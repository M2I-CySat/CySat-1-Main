
OBC_SDK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f218  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800f3c8  0800f3c8  0001f3c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800f964  0800f964  0001f964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800f968  0800f968  0001f968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  20000000  0800f96c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
  7 .bss          00008014  200001ec  200001ec  000201ec  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  20008200  20008200  000201ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002261c  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004ebb  00000000  00000000  00042838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d00  00000000  00000000  000476f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001ab8  00000000  00000000  000493f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000b377  00000000  00000000  0004aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028595  00000000  00000000  00056227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f58ce  00000000  00000000  0007e7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0017408a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008950  00000000  00000000  001740dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000b4  00000000  00000000  0017ca2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001c7  00000000  00000000  0017cae0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f3b0 	.word	0x0800f3b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	0800f3b0 	.word	0x0800f3b0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <Main_Task>:
bool LOW_POWER_MODE = 0;

/*
 * @brief Main Task/Thread
 */
void Main_Task(void const * argument){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
    debug_printf("Starting Main function.\r\n");
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <Main_Task+0x18>)
 8000bd2:	f002 f81d 	bl	8002c10 <debug_printf>
    while(1){
        osDelay(10000);
 8000bd6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000bda:	f008 fe9c 	bl	8009916 <osDelay>
 8000bde:	e7fa      	b.n	8000bd6 <Main_Task+0xe>
 8000be0:	0800f3cc 	.word	0x0800f3cc

08000be4 <UHF_Task>:
}

/*
 * @brief main UHF Task/Thread
 */
void UHF_Task(void const * argument){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
    debug_printf("Starting UHF function.\r\n");
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <UHF_Task+0x18>)
 8000bee:	f002 f80f 	bl	8002c10 <debug_printf>




    while(1){
        osDelay(10000);
 8000bf2:	f242 7010 	movw	r0, #10000	; 0x2710
 8000bf6:	f008 fe8e 	bl	8009916 <osDelay>
 8000bfa:	e7fa      	b.n	8000bf2 <UHF_Task+0xe>
 8000bfc:	0800f3e8 	.word	0x0800f3e8

08000c00 <ADCS_Task>:
}

/*
 * @brief main ADCS Task/Thread
 */
void ADCS_Task(void const * argument){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
    debug_printf("Starting ADCS function.\r\n");
 8000c08:	480b      	ldr	r0, [pc, #44]	; (8000c38 <ADCS_Task+0x38>)
 8000c0a:	f002 f801 	bl	8002c10 <debug_printf>
//        debug_printf("Did not command speed properly.\r\n");
//    else if(result == FAULT_PITCH_ANGLE)
//        debug_printf("Pitch did not stay constant!\r\n");
//    else if(result == FAULT_Y_RATE)
//        debug_printf("Did not go to 0 y-rate and then back up to Y-Thompson rate.\r\n");
    osMutexWait(ADCS_Active_Mutex, 500);
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <ADCS_Task+0x3c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c16:	4618      	mov	r0, r3
 8000c18:	f008 fe9e 	bl	8009958 <osMutexWait>
    ADCS_ACTIVE = 1;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <ADCS_Task+0x40>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ADCS_Active_Mutex);
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <ADCS_Task+0x3c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f008 fee6 	bl	80099f8 <osMutexRelease>
    while(1){
        osDelay(10000);
 8000c2c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c30:	f008 fe71 	bl	8009916 <osDelay>
 8000c34:	e7fa      	b.n	8000c2c <ADCS_Task+0x2c>
 8000c36:	bf00      	nop
 8000c38:	0800f404 	.word	0x0800f404
 8000c3c:	20000238 	.word	0x20000238
 8000c40:	2000020c 	.word	0x2000020c

08000c44 <BatteryCapacity_Task>:
}

/*
 * @brief Task/Thread responsible for calculating battery capacity
 */
void BatteryCapacity_Task(void const * argument){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b092      	sub	sp, #72	; 0x48
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
    debug_printf("Starting battery capacity function.\r\n");
 8000c4c:	4888      	ldr	r0, [pc, #544]	; (8000e70 <BatteryCapacity_Task+0x22c>)
 8000c4e:	f001 ffdf 	bl	8002c10 <debug_printf>
    float y_voltage, y_neg_current, y_pos_current;
    float z_voltage, z_neg_current, z_pos_current;
    float total_input_power;
    float total_output_power;

    uint32_t PreviousWakeTime = osKernelSysTick();
 8000c52:	f008 fe29 	bl	80098a8 <osKernelSysTick>
 8000c56:	4603      	mov	r3, r0
 8000c58:	60fb      	str	r3, [r7, #12]

    while(1){
        READ_EPS_INPUT_CONDITION(&input_conditions);
 8000c5a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 fdc4 	bl	80017ec <READ_EPS_INPUT_CONDITION>
        if((input_conditions & 0x20)==0x20){ // Charge Complete
 8000c64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000c66:	f003 0320 	and.w	r3, r3, #32
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00f      	beq.n	8000c8e <BatteryCapacity_Task+0x4a>
            osMutexWait(Battery_Capacity_Mutex, 500);
 8000c6e:	4b81      	ldr	r3, [pc, #516]	; (8000e74 <BatteryCapacity_Task+0x230>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c76:	4618      	mov	r0, r3
 8000c78:	f008 fe6e 	bl	8009958 <osMutexWait>
            BATTERY_CAPACITY = original_battery_capacity;
 8000c7c:	4a7e      	ldr	r2, [pc, #504]	; (8000e78 <BatteryCapacity_Task+0x234>)
 8000c7e:	4b7f      	ldr	r3, [pc, #508]	; (8000e7c <BatteryCapacity_Task+0x238>)
 8000c80:	601a      	str	r2, [r3, #0]
            osMutexRelease(Battery_Capacity_Mutex);
 8000c82:	4b7c      	ldr	r3, [pc, #496]	; (8000e74 <BatteryCapacity_Task+0x230>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f008 feb6 	bl	80099f8 <osMutexRelease>
 8000c8c:	e033      	b.n	8000cf6 <BatteryCapacity_Task+0xb2>
        }
        else{ // Not Fully Charged
            READ_EPS_5V_CURRENT(&Five_Bus_Current);
 8000c8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fc72 	bl	800157c <READ_EPS_5V_CURRENT>
            READ_EPS_3V_CURRENT(&Three_Bus_Current);
 8000c98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 fc3b 	bl	8001518 <READ_EPS_3V_CURRENT>

            total_output_power = (5*Five_Bus_Current)+(3*Three_Bus_Current);
 8000ca2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000ca6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000caa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cae:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000cb2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000cb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cbe:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            osMutexWait(Battery_Capacity_Mutex, 500);
 8000cc2:	4b6c      	ldr	r3, [pc, #432]	; (8000e74 <BatteryCapacity_Task+0x230>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f008 fe44 	bl	8009958 <osMutexWait>
            BATTERY_CAPACITY -= total_output_power/3600;
 8000cd0:	4b6a      	ldr	r3, [pc, #424]	; (8000e7c <BatteryCapacity_Task+0x238>)
 8000cd2:	ed93 7a00 	vldr	s14, [r3]
 8000cd6:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8000cda:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8000e80 <BatteryCapacity_Task+0x23c>
 8000cde:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ce6:	4b65      	ldr	r3, [pc, #404]	; (8000e7c <BatteryCapacity_Task+0x238>)
 8000ce8:	edc3 7a00 	vstr	s15, [r3]
            osMutexRelease(Battery_Capacity_Mutex);
 8000cec:	4b61      	ldr	r3, [pc, #388]	; (8000e74 <BatteryCapacity_Task+0x230>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f008 fe81 	bl	80099f8 <osMutexRelease>
        }

        if((input_conditions & 0x40)==0x40){ // Charge in Progress
 8000cf6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d072      	beq.n	8000de6 <BatteryCapacity_Task+0x1a2>
            READ_EPS_SOLAR_X_VOLTAGE(&x_voltage);
 8000d00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 fa45 	bl	8001194 <READ_EPS_SOLAR_X_VOLTAGE>
            READ_EPS_SOLAR_X_NEG_CURRENT(&x_neg_current);
 8000d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 fa72 	bl	80011f8 <READ_EPS_SOLAR_X_NEG_CURRENT>
            READ_EPS_SOLAR_X_POS_CURRENT(&x_pos_current);
 8000d14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 fa9f 	bl	800125c <READ_EPS_SOLAR_X_POS_CURRENT>

            READ_EPS_SOLAR_Y_VOLTAGE(&y_voltage);
 8000d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 facc 	bl	80012c0 <READ_EPS_SOLAR_Y_VOLTAGE>
            READ_EPS_SOLAR_Y_NEG_CURRENT(&y_neg_current);
 8000d28:	f107 0320 	add.w	r3, r7, #32
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 faf9 	bl	8001324 <READ_EPS_SOLAR_Y_NEG_CURRENT>
            READ_EPS_SOLAR_Y_POS_CURRENT(&y_pos_current);
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fb26 	bl	8001388 <READ_EPS_SOLAR_Y_POS_CURRENT>

            READ_EPS_SOLAR_Z_VOLTAGE(&z_voltage);
 8000d3c:	f107 0318 	add.w	r3, r7, #24
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 fb53 	bl	80013ec <READ_EPS_SOLAR_Z_VOLTAGE>
            READ_EPS_SOLAR_Z_NEG_CURRENT(&z_neg_current);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fb80 	bl	8001450 <READ_EPS_SOLAR_Z_NEG_CURRENT>
            READ_EPS_SOLAR_Z_POS_CURRENT(&z_pos_current);
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 fbad 	bl	80014b4 <READ_EPS_SOLAR_Z_POS_CURRENT>

            total_input_power = (x_voltage*(x_neg_current+x_pos_current));
 8000d5a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000d5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d66:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d6e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            total_input_power += (y_voltage*(y_neg_current+y_pos_current));
 8000d72:	ed97 7a08 	vldr	s14, [r7, #32]
 8000d76:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d86:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d8e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            total_input_power += (z_voltage*(z_neg_current+z_pos_current));
 8000d92:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d96:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dae:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

            osMutexWait(Battery_Capacity_Mutex, 500);
 8000db2:	4b30      	ldr	r3, [pc, #192]	; (8000e74 <BatteryCapacity_Task+0x230>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f008 fdcc 	bl	8009958 <osMutexWait>
            BATTERY_CAPACITY += total_input_power/3600;
 8000dc0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000dc4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8000e80 <BatteryCapacity_Task+0x23c>
 8000dc8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000dcc:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <BatteryCapacity_Task+0x238>)
 8000dce:	edd3 7a00 	vldr	s15, [r3]
 8000dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dd6:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <BatteryCapacity_Task+0x238>)
 8000dd8:	edc3 7a00 	vstr	s15, [r3]
            osMutexRelease(Battery_Capacity_Mutex);
 8000ddc:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <BatteryCapacity_Task+0x230>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f008 fe09 	bl	80099f8 <osMutexRelease>
        }
        osMutexWait(Battery_Capacity_Mutex, 500);
 8000de6:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <BatteryCapacity_Task+0x230>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000dee:	4618      	mov	r0, r3
 8000df0:	f008 fdb2 	bl	8009958 <osMutexWait>
        osMutexWait(Low_Power_Mode_Mutex, 500);
 8000df4:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <BatteryCapacity_Task+0x240>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f008 fdab 	bl	8009958 <osMutexWait>
        if(BATTERY_CAPACITY < 3){
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <BatteryCapacity_Task+0x238>)
 8000e04:	edd3 7a00 	vldr	s15, [r3]
 8000e08:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000e0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e14:	d503      	bpl.n	8000e1e <BatteryCapacity_Task+0x1da>
            LOW_POWER_MODE = 1;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <BatteryCapacity_Task+0x244>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	701a      	strb	r2, [r3, #0]
 8000e1c:	e015      	b.n	8000e4a <BatteryCapacity_Task+0x206>
        }
        else if((LOW_POWER_MODE==1)&(BATTERY_CAPACITY>8)){
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <BatteryCapacity_Task+0x244>)
 8000e20:	781a      	ldrb	r2, [r3, #0]
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <BatteryCapacity_Task+0x238>)
 8000e24:	edd3 7a00 	vldr	s15, [r3]
 8000e28:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e34:	bfcc      	ite	gt
 8000e36:	2301      	movgt	r3, #1
 8000e38:	2300      	movle	r3, #0
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d002      	beq.n	8000e4a <BatteryCapacity_Task+0x206>
            LOW_POWER_MODE = 0;
 8000e44:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <BatteryCapacity_Task+0x244>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
        }
        osMutexRelease(Low_Power_Mode_Mutex);
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <BatteryCapacity_Task+0x240>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f008 fdd2 	bl	80099f8 <osMutexRelease>
        osMutexRelease(Battery_Capacity_Mutex);
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <BatteryCapacity_Task+0x230>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f008 fdcd 	bl	80099f8 <osMutexRelease>

        osDelayUntil(&PreviousWakeTime, 1000); // Delay for 1 second
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e66:	4618      	mov	r0, r3
 8000e68:	f008 fe07 	bl	8009a7a <osDelayUntil>
        READ_EPS_INPUT_CONDITION(&input_conditions);
 8000e6c:	e6f5      	b.n	8000c5a <BatteryCapacity_Task+0x16>
 8000e6e:	bf00      	nop
 8000e70:	0800f420 	.word	0x0800f420
 8000e74:	20000234 	.word	0x20000234
 8000e78:	418f102e 	.word	0x418f102e
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	45610000 	.word	0x45610000
 8000e84:	2000023c 	.word	0x2000023c
 8000e88:	2000020d 	.word	0x2000020d

08000e8c <parseCySatPacket>:
/**
 * @brief Takes in an array containing the cysat packet in byte form and builds a struct from it
 * @param packet: the byte array containing the packet within, with the first byte being the start character
 * @retval The struct representing this CySat packet
 */
CySat_Packet_t parseCySatPacket(uint8_t* packet){
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
    CySat_Packet_t cySatPacket;
    cySatPacket.Subsystem_Type = packet[1];
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	785b      	ldrb	r3, [r3, #1]
 8000e9a:	733b      	strb	r3, [r7, #12]
    cySatPacket.Command = packet[2];
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	789b      	ldrb	r3, [r3, #2]
 8000ea0:	737b      	strb	r3, [r7, #13]
    cySatPacket.Data_Length = packet[3];
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	78db      	ldrb	r3, [r3, #3]
 8000ea6:	73bb      	strb	r3, [r7, #14]
    cySatPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * cySatPacket.Data_Length);
 8000ea8:	7bbb      	ldrb	r3, [r7, #14]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f00b fb2a 	bl	800c504 <malloc>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	613b      	str	r3, [r7, #16]
    memcpy(cySatPacket.Data, packet+4, cySatPacket.Data_Length);
 8000eb4:	6938      	ldr	r0, [r7, #16]
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	7bba      	ldrb	r2, [r7, #14]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f00b fb31 	bl	800c524 <memcpy>
    cySatPacket.Checksum = packet[cySatPacket.Data_Length+4];
 8000ec2:	7bbb      	ldrb	r3, [r7, #14]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	753b      	strb	r3, [r7, #20]
    return cySatPacket;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	461c      	mov	r4, r3
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000eda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	371c      	adds	r7, #28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd90      	pop	{r4, r7, pc}
	...

08000ee8 <sendCySatPacket>:
 * @brief Takes in a packet and sends it to the Ground Station via UART serial connection
 * @param packet: A struct representing the CySat packet you wish to send
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
HAL_StatusTypeDef sendCySatPacket(CySat_Packet_t packet){
 8000ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000eec:	b089      	sub	sp, #36	; 0x24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000ef6:	466b      	mov	r3, sp
 8000ef8:	461e      	mov	r6, r3
    uint8_t message[packet.Data_Length + 5];
 8000efa:	79bb      	ldrb	r3, [r7, #6]
 8000efc:	1d59      	adds	r1, r3, #5
 8000efe:	1e4b      	subs	r3, r1, #1
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	460a      	mov	r2, r1
 8000f04:	2300      	movs	r3, #0
 8000f06:	4690      	mov	r8, r2
 8000f08:	4699      	mov	r9, r3
 8000f0a:	f04f 0200 	mov.w	r2, #0
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f1e:	460a      	mov	r2, r1
 8000f20:	2300      	movs	r3, #0
 8000f22:	4614      	mov	r4, r2
 8000f24:	461d      	mov	r5, r3
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	f04f 0300 	mov.w	r3, #0
 8000f2e:	00eb      	lsls	r3, r5, #3
 8000f30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f34:	00e2      	lsls	r2, r4, #3
 8000f36:	460b      	mov	r3, r1
 8000f38:	3307      	adds	r3, #7
 8000f3a:	08db      	lsrs	r3, r3, #3
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	ebad 0d03 	sub.w	sp, sp, r3
 8000f42:	466b      	mov	r3, sp
 8000f44:	3300      	adds	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]

    //build byte array
    message[0] = 0xFF; //start byte
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	22ff      	movs	r2, #255	; 0xff
 8000f4c:	701a      	strb	r2, [r3, #0]
    message[1] = packet.Subsystem_Type;
 8000f4e:	793a      	ldrb	r2, [r7, #4]
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	705a      	strb	r2, [r3, #1]
    message[2] = packet.Command;
 8000f54:	797a      	ldrb	r2, [r7, #5]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	709a      	strb	r2, [r3, #2]
    message[3] = packet.Data_Length;
 8000f5a:	79ba      	ldrb	r2, [r7, #6]
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	70da      	strb	r2, [r3, #3]
    int i;
    for(i = 0; i < packet.Data_Length; i++){
 8000f60:	2300      	movs	r3, #0
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	e00a      	b.n	8000f7c <sendCySatPacket+0x94>
        message[i + 4] = packet.Data[i];
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	441a      	add	r2, r3
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	3304      	adds	r3, #4
 8000f70:	7811      	ldrb	r1, [r2, #0]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < packet.Data_Length; i++){
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	79bb      	ldrb	r3, [r7, #6]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	4293      	cmp	r3, r2
 8000f84:	dbef      	blt.n	8000f66 <sendCySatPacket+0x7e>
    }
    message[4 + packet.Data_Length] = packet.Checksum;
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	7b39      	ldrb	r1, [r7, #12]
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	54d1      	strb	r1, [r2, r3]

    HAL_StatusTypeDef status = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	77fb      	strb	r3, [r7, #31]
    if(packet.Subsystem_Type == OBC_SUBSYSTEM_TYPE){
 8000f94:	793b      	ldrb	r3, [r7, #4]
 8000f96:	2b0a      	cmp	r3, #10
 8000f98:	d10c      	bne.n	8000fb4 <sendCySatPacket+0xcc>
        status = HAL_UART_Transmit(&huart1, message, packet.Data_Length + 5, 1000); //send the message over uart, but timeout after 1s
 8000f9a:	79bb      	ldrb	r3, [r7, #6]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	3305      	adds	r3, #5
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	6939      	ldr	r1, [r7, #16]
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <sendCySatPacket+0xf8>)
 8000faa:	f006 f8f2 	bl	8007192 <HAL_UART_Transmit>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	77fb      	strb	r3, [r7, #31]
 8000fb2:	e00e      	b.n	8000fd2 <sendCySatPacket+0xea>
    }
    else if(packet.Subsystem_Type == PAYLOAD_SUBSYSTEM_TYPE){
 8000fb4:	793b      	ldrb	r3, [r7, #4]
 8000fb6:	2b28      	cmp	r3, #40	; 0x28
 8000fb8:	d10b      	bne.n	8000fd2 <sendCySatPacket+0xea>
        status = HAL_UART_Transmit(&huart6, message, packet.Data_Length + 5, 1000); //send the message over uart, but timeout after 1s
 8000fba:	79bb      	ldrb	r3, [r7, #6]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	3305      	adds	r3, #5
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	6939      	ldr	r1, [r7, #16]
 8000fc8:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <sendCySatPacket+0xfc>)
 8000fca:	f006 f8e2 	bl	8007192 <HAL_UART_Transmit>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	77fb      	strb	r3, [r7, #31]
    }
    return status;
 8000fd2:	7ffb      	ldrb	r3, [r7, #31]
 8000fd4:	46b5      	mov	sp, r6
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fe0:	200006b4 	.word	0x200006b4
 8000fe4:	200006f4 	.word	0x200006f4

08000fe8 <generateCySatChecksum>:
/**
  * @brief Gives you the checksum byte value for a submitted packet
  * @param packet: The packet for which you want to generate a packet
  * @retval The 1 byte packet checksum that has been generated
  */
uint8_t generateCySatChecksum(CySat_Packet_t packet){
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]

    //add components of the packet together (NOT including the checksum)
    sum += packet.Subsystem_Type;
 8000ff8:	793b      	ldrb	r3, [r7, #4]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	4413      	add	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
    sum += packet.Command;
 8001002:	797b      	ldrb	r3, [r7, #5]
 8001004:	461a      	mov	r2, r3
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	4413      	add	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
    sum += packet.Data_Length;
 800100c:	79bb      	ldrb	r3, [r7, #6]
 800100e:	461a      	mov	r2, r3
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	4413      	add	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
 800101a:	e00a      	b.n	8001032 <generateCySatChecksum+0x4a>
        sum += packet.Data[i];
 800101c:	68ba      	ldr	r2, [r7, #8]
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	4413      	add	r3, r2
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	4413      	add	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	3301      	adds	r3, #1
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	461a      	mov	r2, r3
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	4293      	cmp	r3, r2
 800103a:	dbef      	blt.n	800101c <generateCySatChecksum+0x34>
    }

    //take the lowest 8 bits
    uint8_t byte = (uint8_t) sum & 0xFF;
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	75fb      	strb	r3, [r7, #23]

    //subtract from 0xFF
    return 0xFF - byte;
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	43db      	mvns	r3, r3
 8001044:	b2db      	uxtb	r3, r3
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <validateCySatChecksum>:
/**
  * @brief Returns if the checksum of a given packet is correct or not
  * @param packet: The packet you have just received and want to check
  * @retval 1 if the checksum is correct for the data in the packet, otherwise it returns a 0
  */
uint8_t validateCySatChecksum(CySat_Packet_t packet){
 8001052:	b480      	push	{r7}
 8001054:	b087      	sub	sp, #28
 8001056:	af00      	add	r7, sp, #0
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]

    //add components of the packet together (INCLUDING the checksum)
    sum += packet.Subsystem_Type;
 8001062:	793b      	ldrb	r3, [r7, #4]
 8001064:	461a      	mov	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4413      	add	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
    sum += packet.Command;
 800106c:	797b      	ldrb	r3, [r7, #5]
 800106e:	461a      	mov	r2, r3
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4413      	add	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
    sum += packet.Data_Length;
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	461a      	mov	r2, r3
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4413      	add	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00a      	b.n	800109c <validateCySatChecksum+0x4a>
        sum += packet.Data[i];
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4413      	add	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	461a      	mov	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	4293      	cmp	r3, r2
 80010a4:	dbef      	blt.n	8001086 <validateCySatChecksum+0x34>
    }
    sum += packet.Checksum;
 80010a6:	7b3b      	ldrb	r3, [r7, #12]
 80010a8:	461a      	mov	r2, r3
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4413      	add	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]

    //if the last 8 bits equal 0xFF, it is correct
    if((sum & 0xFF) == 0xFF){
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2bff      	cmp	r3, #255	; 0xff
 80010b6:	d101      	bne.n	80010bc <validateCySatChecksum+0x6a>
        return 1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e000      	b.n	80010be <validateCySatChecksum+0x6c>
    }
    else{
        return 0;
 80010bc:	2300      	movs	r3, #0
    }
}
 80010be:	4618      	mov	r0, r3
 80010c0:	371c      	adds	r7, #28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <READ_EPS_BATTERY_VOLTAGE>:
/**
  * @brief Reads the voltage level of the EPS battery voltage bus and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_VOLTAGE(float* volt_ptr){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 1; //battery voltage command
 80010d8:	2301      	movs	r3, #1
 80010da:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80010dc:	f107 0208 	add.w	r2, r7, #8
 80010e0:	7bbb      	ldrb	r3, [r7, #14]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 fdcb 	bl	8001c80 <EPS_READ>
 80010ea:	4603      	mov	r3, r0
 80010ec:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <READ_EPS_BATTERY_VOLTAGE+0x2c>
        return status;
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	e014      	b.n	8001122 <READ_EPS_BATTERY_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80010f8:	7a3b      	ldrb	r3, [r7, #8]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	b29a      	uxth	r2, r3
 8001100:	7a7b      	ldrb	r3, [r7, #9]
 8001102:	b29b      	uxth	r3, r3
 8001104:	4413      	add	r3, r2
 8001106:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0023394775f * (float) raw_voltage; //multiply by the conversion coeff
 8001108:	89bb      	ldrh	r3, [r7, #12]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001112:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800112c <READ_EPS_BATTERY_VOLTAGE+0x60>
 8001116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0023394775 * 4095 = 9.58 V
    return status;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	3b1951eb 	.word	0x3b1951eb

08001130 <READ_EPS_BATTERY_CURRENT>:
/**
  * @brief Reads the current level of the EPS battery bus and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_CURRENT(float* curr_ptr){
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 2; //battery current command
 800113c:	2302      	movs	r3, #2
 800113e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001140:	f107 0208 	add.w	r2, r7, #8
 8001144:	7bbb      	ldrb	r3, [r7, #14]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fd99 	bl	8001c80 <EPS_READ>
 800114e:	4603      	mov	r3, r0
 8001150:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <READ_EPS_BATTERY_CURRENT+0x2c>
        return status;
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	e014      	b.n	8001186 <READ_EPS_BATTERY_CURRENT+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800115c:	7a3b      	ldrb	r3, [r7, #8]
 800115e:	b29b      	uxth	r3, r3
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	b29a      	uxth	r2, r3
 8001164:	7a7b      	ldrb	r3, [r7, #9]
 8001166:	b29b      	uxth	r3, r3
 8001168:	4413      	add	r3, r2
 800116a:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0030517578f * (float) raw_value; //multiply by the conversion coeff
 800116c:	89bb      	ldrh	r3, [r7, #12]
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001176:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001190 <READ_EPS_BATTERY_CURRENT+0x60>
 800117a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0030517578f * 4095 = 12.497 A
    return status;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	3b480000 	.word	0x3b480000

08001194 <READ_EPS_SOLAR_X_VOLTAGE>:
/**
  * @brief Reads the voltage of the X-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_VOLTAGE(float* volt_ptr){
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 5; //solar panel x-axis voltage command
 80011a0:	2305      	movs	r3, #5
 80011a2:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80011a4:	f107 0208 	add.w	r2, r7, #8
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fd67 	bl	8001c80 <EPS_READ>
 80011b2:	4603      	mov	r3, r0
 80011b4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <READ_EPS_SOLAR_X_VOLTAGE+0x2c>
        return status;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	e014      	b.n	80011ea <READ_EPS_SOLAR_X_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80011c0:	7a3b      	ldrb	r3, [r7, #8]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	7a7b      	ldrb	r3, [r7, #9]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4413      	add	r3, r2
 80011ce:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 80011d0:	89bb      	ldrh	r3, [r7, #12]
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011da:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80011f4 <READ_EPS_SOLAR_X_VOLTAGE+0x60>
 80011de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	3b200000 	.word	0x3b200000

080011f8 <READ_EPS_SOLAR_X_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the X- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_NEG_CURRENT(float* curr_ptr){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001200:	2301      	movs	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 6; //solar panel x- current command
 8001204:	2306      	movs	r3, #6
 8001206:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001208:	f107 0208 	add.w	r2, r7, #8
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f000 fd35 	bl	8001c80 <EPS_READ>
 8001216:	4603      	mov	r3, r0
 8001218:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <READ_EPS_SOLAR_X_NEG_CURRENT+0x2c>
        return status;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	e014      	b.n	800124e <READ_EPS_SOLAR_X_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001224:	7a3b      	ldrb	r3, [r7, #8]
 8001226:	b29b      	uxth	r3, r3
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b29a      	uxth	r2, r3
 800122c:	7a7b      	ldrb	r3, [r7, #9]
 800122e:	b29b      	uxth	r3, r3
 8001230:	4413      	add	r3, r2
 8001232:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001234:	89bb      	ldrh	r3, [r7, #12]
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800123e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001258 <READ_EPS_SOLAR_X_NEG_CURRENT+0x60>
 8001242:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	edc3 7a00 	vstr	s15, [r3]
    return status;
 800124c:	7bfb      	ldrb	r3, [r7, #15]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	3a200001 	.word	0x3a200001

0800125c <READ_EPS_SOLAR_X_POS_CURRENT>:
/**
  * @brief Reads the voltage of the X+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_POS_CURRENT(float* curr_ptr){
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001264:	2301      	movs	r3, #1
 8001266:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 7; //solar panel x+ current command
 8001268:	2307      	movs	r3, #7
 800126a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800126c:	f107 0208 	add.w	r2, r7, #8
 8001270:	7bbb      	ldrb	r3, [r7, #14]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f000 fd03 	bl	8001c80 <EPS_READ>
 800127a:	4603      	mov	r3, r0
 800127c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <READ_EPS_SOLAR_X_POS_CURRENT+0x2c>
        return status;
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	e014      	b.n	80012b2 <READ_EPS_SOLAR_X_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001288:	7a3b      	ldrb	r3, [r7, #8]
 800128a:	b29b      	uxth	r3, r3
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	b29a      	uxth	r2, r3
 8001290:	7a7b      	ldrb	r3, [r7, #9]
 8001292:	b29b      	uxth	r3, r3
 8001294:	4413      	add	r3, r2
 8001296:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001298:	89bb      	ldrh	r3, [r7, #12]
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80012bc <READ_EPS_SOLAR_X_POS_CURRENT+0x60>
 80012a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	3a200001 	.word	0x3a200001

080012c0 <READ_EPS_SOLAR_Y_VOLTAGE>:
/**
  * @brief Reads the voltage of the Y-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_VOLTAGE(float* volt_ptr){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80012c8:	2301      	movs	r3, #1
 80012ca:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 8; //solar panel y-axis voltage command
 80012cc:	2308      	movs	r3, #8
 80012ce:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80012d0:	f107 0208 	add.w	r2, r7, #8
 80012d4:	7bbb      	ldrb	r3, [r7, #14]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fcd1 	bl	8001c80 <EPS_READ>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <READ_EPS_SOLAR_Y_VOLTAGE+0x2c>
        return status;
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	e014      	b.n	8001316 <READ_EPS_SOLAR_Y_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80012ec:	7a3b      	ldrb	r3, [r7, #8]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	7a7b      	ldrb	r3, [r7, #9]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	4413      	add	r3, r2
 80012fa:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 80012fc:	89bb      	ldrh	r3, [r7, #12]
 80012fe:	ee07 3a90 	vmov	s15, r3
 8001302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001306:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001320 <READ_EPS_SOLAR_Y_VOLTAGE+0x60>
 800130a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001314:	7bfb      	ldrb	r3, [r7, #15]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	3b200000 	.word	0x3b200000

08001324 <READ_EPS_SOLAR_Y_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the Y- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_NEG_CURRENT(float* curr_ptr){
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800132c:	2301      	movs	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 9; //solar panel y- current command
 8001330:	2309      	movs	r3, #9
 8001332:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001334:	f107 0208 	add.w	r2, r7, #8
 8001338:	7bbb      	ldrb	r3, [r7, #14]
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fc9f 	bl	8001c80 <EPS_READ>
 8001342:	4603      	mov	r3, r0
 8001344:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <READ_EPS_SOLAR_Y_NEG_CURRENT+0x2c>
        return status;
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	e014      	b.n	800137a <READ_EPS_SOLAR_Y_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001350:	7a3b      	ldrb	r3, [r7, #8]
 8001352:	b29b      	uxth	r3, r3
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	b29a      	uxth	r2, r3
 8001358:	7a7b      	ldrb	r3, [r7, #9]
 800135a:	b29b      	uxth	r3, r3
 800135c:	4413      	add	r3, r2
 800135e:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001360:	89bb      	ldrh	r3, [r7, #12]
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800136a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001384 <READ_EPS_SOLAR_Y_NEG_CURRENT+0x60>
 800136e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	3a200001 	.word	0x3a200001

08001388 <READ_EPS_SOLAR_Y_POS_CURRENT>:
/**
  * @brief Reads the voltage of the Y+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_POS_CURRENT(float* curr_ptr){
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001390:	2301      	movs	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 10; //solar panel y+ current command
 8001394:	230a      	movs	r3, #10
 8001396:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001398:	f107 0208 	add.w	r2, r7, #8
 800139c:	7bbb      	ldrb	r3, [r7, #14]
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fc6d 	bl	8001c80 <EPS_READ>
 80013a6:	4603      	mov	r3, r0
 80013a8:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <READ_EPS_SOLAR_Y_POS_CURRENT+0x2c>
        return status;
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	e014      	b.n	80013de <READ_EPS_SOLAR_Y_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80013b4:	7a3b      	ldrb	r3, [r7, #8]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	7a7b      	ldrb	r3, [r7, #9]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4413      	add	r3, r2
 80013c2:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 80013c4:	89bb      	ldrh	r3, [r7, #12]
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80013e8 <READ_EPS_SOLAR_Y_POS_CURRENT+0x60>
 80013d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	3a200001 	.word	0x3a200001

080013ec <READ_EPS_SOLAR_Z_VOLTAGE>:
/**
  * @brief Reads the voltage of the Y-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_VOLTAGE(float* volt_ptr){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80013f4:	2301      	movs	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 11; //solar panel z-axis voltage command
 80013f8:	230b      	movs	r3, #11
 80013fa:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80013fc:	f107 0208 	add.w	r2, r7, #8
 8001400:	7bbb      	ldrb	r3, [r7, #14]
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f000 fc3b 	bl	8001c80 <EPS_READ>
 800140a:	4603      	mov	r3, r0
 800140c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <READ_EPS_SOLAR_Z_VOLTAGE+0x2c>
        return status;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	e014      	b.n	8001442 <READ_EPS_SOLAR_Z_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001418:	7a3b      	ldrb	r3, [r7, #8]
 800141a:	b29b      	uxth	r3, r3
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	b29a      	uxth	r2, r3
 8001420:	7a7b      	ldrb	r3, [r7, #9]
 8001422:	b29b      	uxth	r3, r3
 8001424:	4413      	add	r3, r2
 8001426:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 8001428:	89bb      	ldrh	r3, [r7, #12]
 800142a:	ee07 3a90 	vmov	s15, r3
 800142e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001432:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800144c <READ_EPS_SOLAR_Z_VOLTAGE+0x60>
 8001436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	3b200000 	.word	0x3b200000

08001450 <READ_EPS_SOLAR_Z_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the Z- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_NEG_CURRENT(float* curr_ptr){
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001458:	2301      	movs	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 12; //solar panel z- current command
 800145c:	230c      	movs	r3, #12
 800145e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001460:	f107 0208 	add.w	r2, r7, #8
 8001464:	7bbb      	ldrb	r3, [r7, #14]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f000 fc09 	bl	8001c80 <EPS_READ>
 800146e:	4603      	mov	r3, r0
 8001470:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <READ_EPS_SOLAR_Z_NEG_CURRENT+0x2c>
        return status;
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	e014      	b.n	80014a6 <READ_EPS_SOLAR_Z_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800147c:	7a3b      	ldrb	r3, [r7, #8]
 800147e:	b29b      	uxth	r3, r3
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	b29a      	uxth	r2, r3
 8001484:	7a7b      	ldrb	r3, [r7, #9]
 8001486:	b29b      	uxth	r3, r3
 8001488:	4413      	add	r3, r2
 800148a:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 800148c:	89bb      	ldrh	r3, [r7, #12]
 800148e:	ee07 3a90 	vmov	s15, r3
 8001492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001496:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80014b0 <READ_EPS_SOLAR_Z_NEG_CURRENT+0x60>
 800149a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	3a200001 	.word	0x3a200001

080014b4 <READ_EPS_SOLAR_Z_POS_CURRENT>:
/**
  * @brief Reads the voltage of the Z+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_POS_CURRENT(float* curr_ptr){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80014bc:	2301      	movs	r3, #1
 80014be:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 13; //solar panel z+ current command
 80014c0:	230d      	movs	r3, #13
 80014c2:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80014c4:	f107 0208 	add.w	r2, r7, #8
 80014c8:	7bbb      	ldrb	r3, [r7, #14]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 fbd7 	bl	8001c80 <EPS_READ>
 80014d2:	4603      	mov	r3, r0
 80014d4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <READ_EPS_SOLAR_Z_POS_CURRENT+0x2c>
        return status;
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	e014      	b.n	800150a <READ_EPS_SOLAR_Z_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80014e0:	7a3b      	ldrb	r3, [r7, #8]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	7a7b      	ldrb	r3, [r7, #9]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 80014f0:	89bb      	ldrh	r3, [r7, #12]
 80014f2:	ee07 3a90 	vmov	s15, r3
 80014f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014fa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001514 <READ_EPS_SOLAR_Z_POS_CURRENT+0x60>
 80014fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001508:	7bfb      	ldrb	r3, [r7, #15]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	3a200001 	.word	0x3a200001

08001518 <READ_EPS_3V_CURRENT>:
/**
  * @brief Reads the current of the EPS 3.3v bus in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_3V_CURRENT(float* curr_ptr){
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 14; //3.3v bus current command
 8001524:	230e      	movs	r3, #14
 8001526:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001528:	f107 0208 	add.w	r2, r7, #8
 800152c:	7bbb      	ldrb	r3, [r7, #14]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f000 fba5 	bl	8001c80 <EPS_READ>
 8001536:	4603      	mov	r3, r0
 8001538:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <READ_EPS_3V_CURRENT+0x2c>
        return status;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	e014      	b.n	800156e <READ_EPS_3V_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001544:	7a3b      	ldrb	r3, [r7, #8]
 8001546:	b29b      	uxth	r3, r3
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b29a      	uxth	r2, r3
 800154c:	7a7b      	ldrb	r3, [r7, #9]
 800154e:	b29b      	uxth	r3, r3
 8001550:	4413      	add	r3, r2
 8001552:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0020345052f * (float) raw_current; //multiply by the conversion coeff
 8001554:	89bb      	ldrh	r3, [r7, #12]
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800155e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001578 <READ_EPS_3V_CURRENT+0x60>
 8001562:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	edc3 7a00 	vstr	s15, [r3]
    return status;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	3b055555 	.word	0x3b055555

0800157c <READ_EPS_5V_CURRENT>:
/**
  * @brief Reads the current of the EPS 5v bus in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_5V_CURRENT(float* curr_ptr){
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001584:	2301      	movs	r3, #1
 8001586:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 15; //5v bus current command
 8001588:	230f      	movs	r3, #15
 800158a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800158c:	f107 0208 	add.w	r2, r7, #8
 8001590:	7bbb      	ldrb	r3, [r7, #14]
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f000 fb73 	bl	8001c80 <EPS_READ>
 800159a:	4603      	mov	r3, r0
 800159c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <READ_EPS_5V_CURRENT+0x2c>
        return status;
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	e014      	b.n	80015d2 <READ_EPS_5V_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80015a8:	7a3b      	ldrb	r3, [r7, #8]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	7a7b      	ldrb	r3, [r7, #9]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0020345052f * (float) raw_current; //multiply by the conversion coeff
 80015b8:	89bb      	ldrh	r3, [r7, #12]
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015c2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80015dc <READ_EPS_5V_CURRENT+0x60>
 80015c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	3b055555 	.word	0x3b055555

080015e0 <READ_EPS_MCU_TEMP>:
/**
  * @brief Reads the temperature of the EPS microcontroller in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_MCU_TEMP(float* temp_ptr){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80015e8:	2301      	movs	r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 18; //MCU temperature command
 80015ec:	2312      	movs	r3, #18
 80015ee:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80015f0:	f107 0208 	add.w	r2, r7, #8
 80015f4:	7bbb      	ldrb	r3, [r7, #14]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 fb41 	bl	8001c80 <EPS_READ>
 80015fe:	4603      	mov	r3, r0
 8001600:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <READ_EPS_MCU_TEMP+0x2c>
        return status;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	e01c      	b.n	8001646 <READ_EPS_MCU_TEMP+0x66>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800160c:	7a3b      	ldrb	r3, [r7, #8]
 800160e:	b29b      	uxth	r3, r3
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b29a      	uxth	r2, r3
 8001614:	7a7b      	ldrb	r3, [r7, #9]
 8001616:	b29b      	uxth	r3, r3
 8001618:	4413      	add	r3, r2
 800161a:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = (((float) raw_value * 0.0006103516f) - 0.986f) / 0.00355f;
 800161c:	89bb      	ldrh	r3, [r7, #12]
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001626:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001650 <READ_EPS_MCU_TEMP+0x70>
 800162a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001654 <READ_EPS_MCU_TEMP+0x74>
 8001632:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001636:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001658 <READ_EPS_MCU_TEMP+0x78>
 800163a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001644:	7bfb      	ldrb	r3, [r7, #15]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	3a200001 	.word	0x3a200001
 8001654:	3f7c6a7f 	.word	0x3f7c6a7f
 8001658:	3b68a71e 	.word	0x3b68a71e

0800165c <READ_EPS_BATT_1_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 1 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_1_TEMP(float* temp_ptr){
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001664:	2301      	movs	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 19; //battery cell 1 temperature command
 8001668:	2313      	movs	r3, #19
 800166a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800166c:	f107 0208 	add.w	r2, r7, #8
 8001670:	7bbb      	ldrb	r3, [r7, #14]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f000 fb03 	bl	8001c80 <EPS_READ>
 800167a:	4603      	mov	r3, r0
 800167c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <READ_EPS_BATT_1_TEMP+0x2c>
        return status;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	e014      	b.n	80016b2 <READ_EPS_BATT_1_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001688:	7a3b      	ldrb	r3, [r7, #8]
 800168a:	b29b      	uxth	r3, r3
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b29a      	uxth	r2, r3
 8001690:	7a7b      	ldrb	r3, [r7, #9]
 8001692:	b29b      	uxth	r3, r3
 8001694:	4413      	add	r3, r2
 8001696:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8001698:	89bb      	ldrh	r3, [r7, #12]
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016a2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80016bc <READ_EPS_BATT_1_TEMP+0x60>
 80016a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	3b800000 	.word	0x3b800000

080016c0 <READ_EPS_BATT_2_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 2 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_2_TEMP(float* temp_ptr){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80016c8:	2301      	movs	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 20; //battery cell 2 temperature command
 80016cc:	2314      	movs	r3, #20
 80016ce:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80016d0:	f107 0208 	add.w	r2, r7, #8
 80016d4:	7bbb      	ldrb	r3, [r7, #14]
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fad1 	bl	8001c80 <EPS_READ>
 80016de:	4603      	mov	r3, r0
 80016e0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <READ_EPS_BATT_2_TEMP+0x2c>
        return status;
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	e014      	b.n	8001716 <READ_EPS_BATT_2_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80016ec:	7a3b      	ldrb	r3, [r7, #8]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	7a7b      	ldrb	r3, [r7, #9]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 80016fc:	89bb      	ldrh	r3, [r7, #12]
 80016fe:	ee07 3a90 	vmov	s15, r3
 8001702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001706:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001720 <READ_EPS_BATT_2_TEMP+0x60>
 800170a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	3b800000 	.word	0x3b800000

08001724 <READ_EPS_BATT_3_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 3 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_3_TEMP(float* temp_ptr){
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800172c:	2301      	movs	r3, #1
 800172e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 21; //battery cell 3 temperature command
 8001730:	2315      	movs	r3, #21
 8001732:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001734:	f107 0208 	add.w	r2, r7, #8
 8001738:	7bbb      	ldrb	r3, [r7, #14]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f000 fa9f 	bl	8001c80 <EPS_READ>
 8001742:	4603      	mov	r3, r0
 8001744:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <READ_EPS_BATT_3_TEMP+0x2c>
        return status;
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	e014      	b.n	800177a <READ_EPS_BATT_3_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001750:	7a3b      	ldrb	r3, [r7, #8]
 8001752:	b29b      	uxth	r3, r3
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	b29a      	uxth	r2, r3
 8001758:	7a7b      	ldrb	r3, [r7, #9]
 800175a:	b29b      	uxth	r3, r3
 800175c:	4413      	add	r3, r2
 800175e:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8001760:	89bb      	ldrh	r3, [r7, #12]
 8001762:	ee07 3a90 	vmov	s15, r3
 8001766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800176a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001784 <READ_EPS_BATT_3_TEMP+0x60>
 800176e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001778:	7bfb      	ldrb	r3, [r7, #15]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	3b800000 	.word	0x3b800000

08001788 <READ_EPS_BATT_4_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 4 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_4_TEMP(float* temp_ptr){
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 22; //battery cell 4 temperature command
 8001794:	2316      	movs	r3, #22
 8001796:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001798:	f107 0208 	add.w	r2, r7, #8
 800179c:	7bbb      	ldrb	r3, [r7, #14]
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 fa6d 	bl	8001c80 <EPS_READ>
 80017a6:	4603      	mov	r3, r0
 80017a8:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <READ_EPS_BATT_4_TEMP+0x2c>
        return status;
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	e014      	b.n	80017de <READ_EPS_BATT_4_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80017b4:	7a3b      	ldrb	r3, [r7, #8]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	021b      	lsls	r3, r3, #8
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	7a7b      	ldrb	r3, [r7, #9]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	4413      	add	r3, r2
 80017c2:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 80017c4:	89bb      	ldrh	r3, [r7, #12]
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80017e8 <READ_EPS_BATT_4_TEMP+0x60>
 80017d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	3b800000 	.word	0x3b800000

080017ec <READ_EPS_INPUT_CONDITION>:
/**
  * @brief Reads raw return value of the Input Condition command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_INPUT_CONDITION(uint16_t *cond_ptr){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 23; //input conditions command
 80017f8:	2317      	movs	r3, #23
 80017fa:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80017fc:	f107 020c 	add.w	r2, r7, #12
 8001800:	7bbb      	ldrb	r3, [r7, #14]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f000 fa3b 	bl	8001c80 <EPS_READ>
 800180a:	4603      	mov	r3, r0
 800180c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <READ_EPS_INPUT_CONDITION+0x2c>
        return status;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	e00a      	b.n	800182e <READ_EPS_INPUT_CONDITION+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001818:	7b3b      	ldrb	r3, [r7, #12]
 800181a:	b29b      	uxth	r3, r3
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	b29a      	uxth	r2, r3
 8001820:	7b7b      	ldrb	r3, [r7, #13]
 8001822:	b29b      	uxth	r3, r3
 8001824:	4413      	add	r3, r2
 8001826:	b29a      	uxth	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	801a      	strh	r2, [r3, #0]
    return status;
 800182c:	7bfb      	ldrb	r3, [r7, #15]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <READ_EPS_OUTPUT_CONDITION1>:
/**
  * @brief Reads raw return value of the Output Condition 1 command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OUTPUT_CONDITION1(uint16_t *cond_ptr){
 8001836:	b580      	push	{r7, lr}
 8001838:	b084      	sub	sp, #16
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800183e:	2301      	movs	r3, #1
 8001840:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 24; //output conditions command
 8001842:	2318      	movs	r3, #24
 8001844:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001846:	f107 020c 	add.w	r2, r7, #12
 800184a:	7bbb      	ldrb	r3, [r7, #14]
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f000 fa16 	bl	8001c80 <EPS_READ>
 8001854:	4603      	mov	r3, r0
 8001856:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <READ_EPS_OUTPUT_CONDITION1+0x2c>
        return status;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	e00a      	b.n	8001878 <READ_EPS_OUTPUT_CONDITION1+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001862:	7b3b      	ldrb	r3, [r7, #12]
 8001864:	b29b      	uxth	r3, r3
 8001866:	021b      	lsls	r3, r3, #8
 8001868:	b29a      	uxth	r2, r3
 800186a:	7b7b      	ldrb	r3, [r7, #13]
 800186c:	b29b      	uxth	r3, r3
 800186e:	4413      	add	r3, r2
 8001870:	b29a      	uxth	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	801a      	strh	r2, [r3, #0]
    return status;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <READ_EPS_OUTPUT_CONDITION2>:
/**
  * @brief Reads raw return value of the Output Condition 2 command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OUTPUT_CONDITION2(uint16_t *cond_ptr){
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 24; //output conditions command
 800188c:	2318      	movs	r3, #24
 800188e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001890:	f107 020c 	add.w	r2, r7, #12
 8001894:	7bbb      	ldrb	r3, [r7, #14]
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f000 f9f1 	bl	8001c80 <EPS_READ>
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <READ_EPS_OUTPUT_CONDITION2+0x2c>
        return status;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	e00a      	b.n	80018c2 <READ_EPS_OUTPUT_CONDITION2+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80018ac:	7b3b      	ldrb	r3, [r7, #12]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	7b7b      	ldrb	r3, [r7, #13]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	801a      	strh	r2, [r3, #0]
    return status;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <READ_EPS_POWER_ON_CYCLES>:
/**
  * @brief Reads the current count of EPS power cycles and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_POWER_ON_CYCLES(uint16_t *count_ptr){
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80018d2:	2301      	movs	r3, #1
 80018d4:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 26; //power on cycles count command
 80018d6:	231a      	movs	r3, #26
 80018d8:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80018da:	f107 020c 	add.w	r2, r7, #12
 80018de:	7bbb      	ldrb	r3, [r7, #14]
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f9cc 	bl	8001c80 <EPS_READ>
 80018e8:	4603      	mov	r3, r0
 80018ea:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <READ_EPS_POWER_ON_CYCLES+0x2c>
        return status;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	e00a      	b.n	800190c <READ_EPS_POWER_ON_CYCLES+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80018f6:	7b3b      	ldrb	r3, [r7, #12]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	7b7b      	ldrb	r3, [r7, #13]
 8001900:	b29b      	uxth	r3, r3
 8001902:	4413      	add	r3, r2
 8001904:	b29a      	uxth	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	801a      	strh	r2, [r3, #0]
    return status;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <READ_EPS_UNDER_VOLT_COUNT>:
/**
  * @brief Reads the current count of EPS under-voltage occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_UNDER_VOLT_COUNT(uint16_t *count_ptr){
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 27; //under voltage count command
 8001920:	231b      	movs	r3, #27
 8001922:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001924:	f107 020c 	add.w	r2, r7, #12
 8001928:	7bbb      	ldrb	r3, [r7, #14]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f000 f9a7 	bl	8001c80 <EPS_READ>
 8001932:	4603      	mov	r3, r0
 8001934:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <READ_EPS_UNDER_VOLT_COUNT+0x2c>
        return status;
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	e00a      	b.n	8001956 <READ_EPS_UNDER_VOLT_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001940:	7b3b      	ldrb	r3, [r7, #12]
 8001942:	b29b      	uxth	r3, r3
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b29a      	uxth	r2, r3
 8001948:	7b7b      	ldrb	r3, [r7, #13]
 800194a:	b29b      	uxth	r3, r3
 800194c:	4413      	add	r3, r2
 800194e:	b29a      	uxth	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	801a      	strh	r2, [r3, #0]
    return status;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <READ_EPS_SHORT_CIRCUIT_COUNT>:
/**
  * @brief Reads the current count of EPS short-circuit occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SHORT_CIRCUIT_COUNT(uint16_t *count_ptr){
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001966:	2301      	movs	r3, #1
 8001968:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 28; //short circuit count command
 800196a:	231c      	movs	r3, #28
 800196c:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800196e:	f107 020c 	add.w	r2, r7, #12
 8001972:	7bbb      	ldrb	r3, [r7, #14]
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f000 f982 	bl	8001c80 <EPS_READ>
 800197c:	4603      	mov	r3, r0
 800197e:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <READ_EPS_SHORT_CIRCUIT_COUNT+0x2c>
        return status;
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	e00a      	b.n	80019a0 <READ_EPS_SHORT_CIRCUIT_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800198a:	7b3b      	ldrb	r3, [r7, #12]
 800198c:	b29b      	uxth	r3, r3
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	b29a      	uxth	r2, r3
 8001992:	7b7b      	ldrb	r3, [r7, #13]
 8001994:	b29b      	uxth	r3, r3
 8001996:	4413      	add	r3, r2
 8001998:	b29a      	uxth	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	801a      	strh	r2, [r3, #0]
    return status;
 800199e:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <READ_EPS_OVER_TEMP_COUNT>:
/**
  * @brief Reads the current count of EPS over-temp occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OVER_TEMP_COUNT(uint16_t *count_ptr){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 29; //over temperature count command
 80019b4:	231d      	movs	r3, #29
 80019b6:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80019b8:	f107 020c 	add.w	r2, r7, #12
 80019bc:	7bbb      	ldrb	r3, [r7, #14]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 f95d 	bl	8001c80 <EPS_READ>
 80019c6:	4603      	mov	r3, r0
 80019c8:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <READ_EPS_OVER_TEMP_COUNT+0x2c>
        return status;
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	e00a      	b.n	80019ea <READ_EPS_OVER_TEMP_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80019d4:	7b3b      	ldrb	r3, [r7, #12]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	b29a      	uxth	r2, r3
 80019dc:	7b7b      	ldrb	r3, [r7, #13]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	801a      	strh	r2, [r3, #0]
    return status;
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <READ_EPS_CHARGE_CYCLES>:
/**
  * @brief Reads the current count of EPS battery charge cycles and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_CHARGE_CYCLES(uint16_t *count_ptr){
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80019fa:	2301      	movs	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 48; //charging cycles count command
 80019fe:	2330      	movs	r3, #48	; 0x30
 8001a00:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001a02:	f107 020c 	add.w	r2, r7, #12
 8001a06:	7bbb      	ldrb	r3, [r7, #14]
 8001a08:	4611      	mov	r1, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f938 	bl	8001c80 <EPS_READ>
 8001a10:	4603      	mov	r3, r0
 8001a12:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <READ_EPS_CHARGE_CYCLES+0x2c>
        return status;
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	e00a      	b.n	8001a34 <READ_EPS_CHARGE_CYCLES+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001a1e:	7b3b      	ldrb	r3, [r7, #12]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	7b7b      	ldrb	r3, [r7, #13]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	801a      	strh	r2, [r3, #0]
    return status;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <READ_EPS_DEFAULTS1>:
/**
  * @brief Reads the default values of LUPs and fast charge modes and stores the value in the pointed to address
  * @param default_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_DEFAULTS1(uint16_t *default_ptr){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 43; //output 1 default value command
 8001a48:	232b      	movs	r3, #43	; 0x2b
 8001a4a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001a4c:	f107 020c 	add.w	r2, r7, #12
 8001a50:	7bbb      	ldrb	r3, [r7, #14]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 f913 	bl	8001c80 <EPS_READ>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <READ_EPS_DEFAULTS1+0x2c>
        return status;
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	e00a      	b.n	8001a7e <READ_EPS_DEFAULTS1+0x42>
    }
    (*default_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001a68:	7b3b      	ldrb	r3, [r7, #12]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	7b7b      	ldrb	r3, [r7, #13]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	801a      	strh	r2, [r3, #0]
    return status;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <READ_EPS_DEFAULTS2>:
/**
  * @brief Reads the default values of OUT1-OUT6 and stores the value in the pointed to address
  * @param default_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_DEFAULTS2(uint16_t *default_ptr){
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001a8e:	2301      	movs	r3, #1
 8001a90:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 44; //output 3 default value command
 8001a92:	232c      	movs	r3, #44	; 0x2c
 8001a94:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001a96:	f107 020c 	add.w	r2, r7, #12
 8001a9a:	7bbb      	ldrb	r3, [r7, #14]
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 f8ee 	bl	8001c80 <EPS_READ>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <READ_EPS_DEFAULTS2+0x2c>
        return status;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	e00a      	b.n	8001ac8 <READ_EPS_DEFAULTS2+0x42>
    }
    (*default_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001ab2:	7b3b      	ldrb	r3, [r7, #12]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	7b7b      	ldrb	r3, [r7, #13]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	801a      	strh	r2, [r3, #0]
    return status;
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <enable_EPS_Vbatt_Bus>:


/********************************************** WRITE FUNCTIONS **********************************************************************************/
HAL_StatusTypeDef enable_EPS_Vbatt_Bus(){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
    return EPS_WRITE(1, 1); //turn command 1 to the ON state
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f000 f936 	bl	8001d48 <EPS_WRITE>
 8001adc:	4603      	mov	r3, r0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <disable_EPS_Vbatt_Bus>:

HAL_StatusTypeDef disable_EPS_Vbatt_Bus(){
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	af00      	add	r7, sp, #0
    return EPS_WRITE(1, 2); //turn command 1 to the FORCE OFF state
 8001ae6:	2102      	movs	r1, #2
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f000 f92d 	bl	8001d48 <EPS_WRITE>
 8001aee:	4603      	mov	r3, r0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <enable_EPS_5v_Bus>:

HAL_StatusTypeDef disable_EPS_BCR_Bus(){
    return EPS_WRITE(2, 0); //turn command 2 to the OFF state
}

HAL_StatusTypeDef enable_EPS_5v_Bus(){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
    return EPS_WRITE(4, 1); //turn command 4 to the ON state
 8001af8:	2101      	movs	r1, #1
 8001afa:	2004      	movs	r0, #4
 8001afc:	f000 f924 	bl	8001d48 <EPS_WRITE>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <disable_EPS_5v_Bus>:

HAL_StatusTypeDef disable_EPS_5v_Bus(){
 8001b06:	b580      	push	{r7, lr}
 8001b08:	af00      	add	r7, sp, #0
    return EPS_WRITE(4, 2); //turn command 4 to the FORCE OFF state
 8001b0a:	2102      	movs	r1, #2
 8001b0c:	2004      	movs	r0, #4
 8001b0e:	f000 f91b 	bl	8001d48 <EPS_WRITE>
 8001b12:	4603      	mov	r3, r0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <enable_EPS_Fast_Charge1>:

HAL_StatusTypeDef disable_EPS_LUP_5v(){
    return EPS_WRITE(6, 1); //turn command 6 to the OFF state
}

HAL_StatusTypeDef enable_EPS_Fast_Charge1(){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
    return EPS_WRITE(8, 1); //turn command 8 to the ON state (HIGH = Fast?, LOW = Slow?)
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	2008      	movs	r0, #8
 8001b20:	f000 f912 	bl	8001d48 <EPS_WRITE>
 8001b24:	4603      	mov	r3, r0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <disable_EPS_Fast_Charge1>:

HAL_StatusTypeDef disable_EPS_Fast_Charge1(){
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	af00      	add	r7, sp, #0
    return EPS_WRITE(8, 0); //turn command 8 to the ON state (HIGH = Fast?, LOW = Slow?)
 8001b2e:	2100      	movs	r1, #0
 8001b30:	2008      	movs	r0, #8
 8001b32:	f000 f909 	bl	8001d48 <EPS_WRITE>
 8001b36:	4603      	mov	r3, r0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <enable_EPS_Fast_Charge2>:

HAL_StatusTypeDef enable_EPS_Fast_Charge2(){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
    return EPS_WRITE(9, 1); //turn command 9 to the ON state (HIGH = Fast?, LOW = Slow?)
 8001b40:	2101      	movs	r1, #1
 8001b42:	2009      	movs	r0, #9
 8001b44:	f000 f900 	bl	8001d48 <EPS_WRITE>
 8001b48:	4603      	mov	r3, r0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <disable_EPS_Fast_Charge2>:

HAL_StatusTypeDef disable_EPS_Fast_Charge2(){
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	af00      	add	r7, sp, #0
    return EPS_WRITE(9, 0); //turn command 9 to the OFF state (HIGH = Fast?, LOW = Slow?)
 8001b52:	2100      	movs	r1, #0
 8001b54:	2009      	movs	r0, #9
 8001b56:	f000 f8f7 	bl	8001d48 <EPS_WRITE>
 8001b5a:	4603      	mov	r3, r0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <enable_Boost_Board>:

HAL_StatusTypeDef enable_Boost_Board(){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
    return EPS_WRITE(10, 1); //turn command 10 to the ON state
 8001b64:	2101      	movs	r1, #1
 8001b66:	200a      	movs	r0, #10
 8001b68:	f000 f8ee 	bl	8001d48 <EPS_WRITE>
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <disable_Boost_Board>:

HAL_StatusTypeDef disable_Boost_Board(){
 8001b72:	b580      	push	{r7, lr}
 8001b74:	af00      	add	r7, sp, #0
    return EPS_WRITE(10, 0); //turn command 10 to the OFF state
 8001b76:	2100      	movs	r1, #0
 8001b78:	200a      	movs	r0, #10
 8001b7a:	f000 f8e5 	bl	8001d48 <EPS_WRITE>
 8001b7e:	4603      	mov	r3, r0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <enable_Payload>:

HAL_StatusTypeDef enable_Payload(){
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
    return EPS_WRITE(11, 1); //turn command 11 to the ON state
 8001b88:	2101      	movs	r1, #1
 8001b8a:	200b      	movs	r0, #11
 8001b8c:	f000 f8dc 	bl	8001d48 <EPS_WRITE>
 8001b90:	4603      	mov	r3, r0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <disable_Payload>:

HAL_StatusTypeDef disable_Payload(){
 8001b96:	b580      	push	{r7, lr}
 8001b98:	af00      	add	r7, sp, #0
    return EPS_WRITE(11, 0); //turn command 11 to the OFF state
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	200b      	movs	r0, #11
 8001b9e:	f000 f8d3 	bl	8001d48 <EPS_WRITE>
 8001ba2:	4603      	mov	r3, r0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <enable_EPS_Output_3>:

HAL_StatusTypeDef enable_EPS_Output_3(){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
    return EPS_WRITE(12, 1); //turn command 12 to the ON state
 8001bac:	2101      	movs	r1, #1
 8001bae:	200c      	movs	r0, #12
 8001bb0:	f000 f8ca 	bl	8001d48 <EPS_WRITE>
 8001bb4:	4603      	mov	r3, r0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <disable_EPS_Output_3>:

HAL_StatusTypeDef disable_EPS_Output_3(){
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	af00      	add	r7, sp, #0
    return EPS_WRITE(12, 0); //turn command 12 to the OFF state
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	200c      	movs	r0, #12
 8001bc2:	f000 f8c1 	bl	8001d48 <EPS_WRITE>
 8001bc6:	4603      	mov	r3, r0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <enable_UHF>:

HAL_StatusTypeDef enable_UHF(){
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
    return EPS_WRITE(14, 1); //turn command 14 to the ON state
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	200e      	movs	r0, #14
 8001bd4:	f000 f8b8 	bl	8001d48 <EPS_WRITE>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <disable_UHF>:

HAL_StatusTypeDef disable_UHF(){
 8001bde:	b580      	push	{r7, lr}
 8001be0:	af00      	add	r7, sp, #0
//    osThreadTerminate(myUHFTask);
//    osThreadDef(myUHFTask, UHF_Task, osPriorityNormal, 0, 512);
//    osThreadCreate(osThread(myUHFTask), NULL);
    return EPS_WRITE(14, 0); //turn command 14 to the OFF state
 8001be2:	2100      	movs	r1, #0
 8001be4:	200e      	movs	r0, #14
 8001be6:	f000 f8af 	bl	8001d48 <EPS_WRITE>
 8001bea:	4603      	mov	r3, r0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <enable_EPS_Output_6>:

HAL_StatusTypeDef enable_EPS_Output_6(){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
    return EPS_WRITE(15, 1); //turn command 15 to the ON state
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	200f      	movs	r0, #15
 8001bf8:	f000 f8a6 	bl	8001d48 <EPS_WRITE>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <disable_EPS_Output_6>:

HAL_StatusTypeDef disable_EPS_Output_6(){
 8001c02:	b580      	push	{r7, lr}
 8001c04:	af00      	add	r7, sp, #0
    return EPS_WRITE(15, 0); //turn command 15 to the OFF state
 8001c06:	2100      	movs	r1, #0
 8001c08:	200f      	movs	r0, #15
 8001c0a:	f000 f89d 	bl	8001d48 <EPS_WRITE>
 8001c0e:	4603      	mov	r3, r0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <enable_EPS_Batt_Heater_1>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_1(){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
    return EPS_WRITE(16, 1); //turn command 16 to the ON state
 8001c18:	2101      	movs	r1, #1
 8001c1a:	2010      	movs	r0, #16
 8001c1c:	f000 f894 	bl	8001d48 <EPS_WRITE>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <disable_EPS_Batt_Heater_1>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_1(){
 8001c26:	b580      	push	{r7, lr}
 8001c28:	af00      	add	r7, sp, #0
    return EPS_WRITE(16, 0); //turn command 16 to the OFF state
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2010      	movs	r0, #16
 8001c2e:	f000 f88b 	bl	8001d48 <EPS_WRITE>
 8001c32:	4603      	mov	r3, r0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <enable_EPS_Batt_Heater_2>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_2(){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
    return EPS_WRITE(17, 1); //turn command 17 to the ON state
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	2011      	movs	r0, #17
 8001c40:	f000 f882 	bl	8001d48 <EPS_WRITE>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <disable_EPS_Batt_Heater_2>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_2(){
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	af00      	add	r7, sp, #0
    return EPS_WRITE(17, 0); //turn command 17 to the OFF state
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2011      	movs	r0, #17
 8001c52:	f000 f879 	bl	8001d48 <EPS_WRITE>
 8001c56:	4603      	mov	r3, r0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <enable_EPS_Batt_Heater_3>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_3(){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
    return EPS_WRITE(18, 1); //turn command 18 to the ON state
 8001c60:	2101      	movs	r1, #1
 8001c62:	2012      	movs	r0, #18
 8001c64:	f000 f870 	bl	8001d48 <EPS_WRITE>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <disable_EPS_Batt_Heater_3>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_3(){
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0
    return EPS_WRITE(18, 0); //turn command 18 to the OFF state
 8001c72:	2100      	movs	r1, #0
 8001c74:	2012      	movs	r0, #18
 8001c76:	f000 f867 	bl	8001d48 <EPS_WRITE>
 8001c7a:	4603      	mov	r3, r0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <EPS_READ>:
  * @brief Sends a write command to the EPS module over a given I2C instance and reads back a response
  * @param command : the command to be used on the transceiver
  * @param data_ptr : A pointer to allow information from the health check to be viewed.
  * @retval Returns if the hal function call succeeded, or if it failed
  */
HAL_StatusTypeDef EPS_READ(uint8_t command, uint8_t* data_ptr){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	4603      	mov	r3, r0
 8001c88:	6039      	str	r1, [r7, #0]
 8001c8a:	71fb      	strb	r3, [r7, #7]
    osMutexWait(EPS_I2C_Mutex, 2500);
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <EPS_READ+0xb8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8001c94:	4618      	mov	r0, r3
 8001c96:	f007 fe5f 	bl	8009958 <osMutexWait>

    HAL_StatusTypeDef status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	73fb      	strb	r3, [r7, #15]
    status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), &command, 1, EPS_I2C_TIMEOUT);
 8001c9e:	1dfa      	adds	r2, r7, #7
 8001ca0:	2364      	movs	r3, #100	; 0x64
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	2130      	movs	r1, #48	; 0x30
 8001ca8:	4824      	ldr	r0, [pc, #144]	; (8001d3c <EPS_READ+0xbc>)
 8001caa:	f001 ff43 	bl	8003b34 <HAL_I2C_Master_Transmit>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d017      	beq.n	8001ce8 <EPS_READ+0x68>
        osMutexWait(Num_I2C_Errors_Mutex, 500);
 8001cb8:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <EPS_READ+0xc0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f007 fe49 	bl	8009958 <osMutexWait>
        NUM_I2C_ERRORS++;
 8001cc6:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <EPS_READ+0xc4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	4a1d      	ldr	r2, [pc, #116]	; (8001d44 <EPS_READ+0xc4>)
 8001cce:	6013      	str	r3, [r2, #0]
        osMutexRelease(Num_I2C_Errors_Mutex);
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <EPS_READ+0xc0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f007 fe8f 	bl	80099f8 <osMutexRelease>
        osMutexRelease(EPS_I2C_Mutex);
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <EPS_READ+0xb8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f007 fe8a 	bl	80099f8 <osMutexRelease>
        return status;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	e023      	b.n	8001d30 <EPS_READ+0xb0>
    }
    status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), data_ptr, 2, EPS_I2C_TIMEOUT);
 8001ce8:	2364      	movs	r3, #100	; 0x64
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	2302      	movs	r3, #2
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	2130      	movs	r1, #48	; 0x30
 8001cf2:	4812      	ldr	r0, [pc, #72]	; (8001d3c <EPS_READ+0xbc>)
 8001cf4:	f002 f82c 	bl	8003d50 <HAL_I2C_Master_Receive>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	73fb      	strb	r3, [r7, #15]

    if(status != HAL_OK){
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d010      	beq.n	8001d24 <EPS_READ+0xa4>
        osMutexWait(Num_I2C_Errors_Mutex, 500);
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <EPS_READ+0xc0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f007 fe24 	bl	8009958 <osMutexWait>
        NUM_I2C_ERRORS++;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <EPS_READ+0xc4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	3301      	adds	r3, #1
 8001d16:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <EPS_READ+0xc4>)
 8001d18:	6013      	str	r3, [r2, #0]
        osMutexRelease(Num_I2C_Errors_Mutex);
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <EPS_READ+0xc0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f007 fe6a 	bl	80099f8 <osMutexRelease>
    }

    osMutexRelease(EPS_I2C_Mutex);
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <EPS_READ+0xb8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f007 fe65 	bl	80099f8 <osMutexRelease>
    return status;
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000228 	.word	0x20000228
 8001d3c:	20000298 	.word	0x20000298
 8001d40:	20000230 	.word	0x20000230
 8001d44:	20000208 	.word	0x20000208

08001d48 <EPS_WRITE>:
/**
  * @brief Sends a write command to the EPS module over a given I2C instance
  * @param state: the state to set the output specified by the command to (0 or 1)
  * @retval Returns if the hal function call succeeded, or if it failed
  */
HAL_StatusTypeDef EPS_WRITE(uint8_t command, uint8_t state){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	4603      	mov	r3, r0
 8001d50:	460a      	mov	r2, r1
 8001d52:	71fb      	strb	r3, [r7, #7]
 8001d54:	4613      	mov	r3, r2
 8001d56:	71bb      	strb	r3, [r7, #6]
    osMutexWait(EPS_I2C_Mutex, 1500);
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <EPS_WRITE+0x7c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001d60:	4618      	mov	r0, r3
 8001d62:	f007 fdf9 	bl	8009958 <osMutexWait>

    HAL_StatusTypeDef status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2];
    data[0] = command;
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	733b      	strb	r3, [r7, #12]
    data[1] = state;
 8001d6e:	79bb      	ldrb	r3, [r7, #6]
 8001d70:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), data, 2, EPS_I2C_TIMEOUT);
 8001d72:	f107 020c 	add.w	r2, r7, #12
 8001d76:	2364      	movs	r3, #100	; 0x64
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	2130      	movs	r1, #48	; 0x30
 8001d7e:	4812      	ldr	r0, [pc, #72]	; (8001dc8 <EPS_WRITE+0x80>)
 8001d80:	f001 fed8 	bl	8003b34 <HAL_I2C_Master_Transmit>
 8001d84:	4603      	mov	r3, r0
 8001d86:	73fb      	strb	r3, [r7, #15]

    if(status != HAL_OK){
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d010      	beq.n	8001db0 <EPS_WRITE+0x68>
        osMutexWait(Num_I2C_Errors_Mutex, 500);
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <EPS_WRITE+0x84>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d96:	4618      	mov	r0, r3
 8001d98:	f007 fdde 	bl	8009958 <osMutexWait>
        NUM_I2C_ERRORS++;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <EPS_WRITE+0x88>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	3301      	adds	r3, #1
 8001da2:	4a0b      	ldr	r2, [pc, #44]	; (8001dd0 <EPS_WRITE+0x88>)
 8001da4:	6013      	str	r3, [r2, #0]
        osMutexRelease(Num_I2C_Errors_Mutex);
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <EPS_WRITE+0x84>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f007 fe24 	bl	80099f8 <osMutexRelease>
    }

    osMutexRelease(EPS_I2C_Mutex);
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <EPS_WRITE+0x7c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f007 fe1f 	bl	80099f8 <osMutexRelease>
    return status;
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000228 	.word	0x20000228
 8001dc8:	20000298 	.word	0x20000298
 8001dcc:	20000230 	.word	0x20000230
 8001dd0:	20000208 	.word	0x20000208

08001dd4 <sendErrorPacket>:
/**
 * @brief This function sends an error packet to the Ground Station
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
int sendErrorPacket(){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
    CySat_Packet_t cySatPacket;
    cySatPacket.Subsystem_Type = OBC_SUBSYSTEM_TYPE;
 8001dda:	230a      	movs	r3, #10
 8001ddc:	713b      	strb	r3, [r7, #4]
    cySatPacket.Command = 0xFF;
 8001dde:	23ff      	movs	r3, #255	; 0xff
 8001de0:	717b      	strb	r3, [r7, #5]
    cySatPacket.Data_Length = 0x02;
 8001de2:	2302      	movs	r3, #2
 8001de4:	71bb      	strb	r3, [r7, #6]
    cySatPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 2);
 8001de6:	2002      	movs	r0, #2
 8001de8:	f00a fb8c 	bl	800c504 <malloc>
 8001dec:	4603      	mov	r3, r0
 8001dee:	60bb      	str	r3, [r7, #8]
    cySatPacket.Data[0] = 0xFF;
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	22ff      	movs	r2, #255	; 0xff
 8001df4:	701a      	strb	r2, [r3, #0]
    cySatPacket.Data[1] = 0xFF;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	22ff      	movs	r2, #255	; 0xff
 8001dfc:	701a      	strb	r2, [r3, #0]
    cySatPacket.Checksum = generateCySatChecksum(cySatPacket);
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e04:	f7ff f8f0 	bl	8000fe8 <generateCySatChecksum>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	733b      	strb	r3, [r7, #12]
    return sendCySatPacket(cySatPacket);
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e12:	f7ff f869 	bl	8000ee8 <sendCySatPacket>
 8001e16:	4603      	mov	r3, r0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <handleCySatPacket>:
/**
 * @brief This function takes in a newly received CySat Packet and acts upon the command within
 * @param packet: the packet to handle
 * @retval A zero indicates success, -1 means the command or subtype is unrecognized, else means failure
 */
int handleCySatPacket(CySat_Packet_t packet){
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b0a9      	sub	sp, #164	; 0xa4
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    HAL_StatusTypeDef status;
    CySat_Packet_t outgoingPacket;
    switch(packet.Subsystem_Type){
 8001e2c:	793b      	ldrb	r3, [r7, #4]
 8001e2e:	2b28      	cmp	r3, #40	; 0x28
 8001e30:	dc48      	bgt.n	8001ec4 <handleCySatPacket+0xa4>
 8001e32:	2b0a      	cmp	r3, #10
 8001e34:	f2c0 86df 	blt.w	8002bf6 <handleCySatPacket+0xdd6>
 8001e38:	3b0a      	subs	r3, #10
 8001e3a:	2b1e      	cmp	r3, #30
 8001e3c:	f200 86db 	bhi.w	8002bf6 <handleCySatPacket+0xdd6>
 8001e40:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <handleCySatPacket+0x28>)
 8001e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e46:	bf00      	nop
 8001e48:	08002bfd 	.word	0x08002bfd
 8001e4c:	08002bf7 	.word	0x08002bf7
 8001e50:	08002bf7 	.word	0x08002bf7
 8001e54:	08002bf7 	.word	0x08002bf7
 8001e58:	08002bf7 	.word	0x08002bf7
 8001e5c:	08002bf7 	.word	0x08002bf7
 8001e60:	08002bf7 	.word	0x08002bf7
 8001e64:	08002bf7 	.word	0x08002bf7
 8001e68:	08002bf7 	.word	0x08002bf7
 8001e6c:	08002bf7 	.word	0x08002bf7
 8001e70:	08002bfd 	.word	0x08002bfd
 8001e74:	08002bf7 	.word	0x08002bf7
 8001e78:	08002bf7 	.word	0x08002bf7
 8001e7c:	08002bf7 	.word	0x08002bf7
 8001e80:	08002bf7 	.word	0x08002bf7
 8001e84:	08002bf7 	.word	0x08002bf7
 8001e88:	08002bf7 	.word	0x08002bf7
 8001e8c:	08002bf7 	.word	0x08002bf7
 8001e90:	08002bf7 	.word	0x08002bf7
 8001e94:	08002bf7 	.word	0x08002bf7
 8001e98:	08001ecf 	.word	0x08001ecf
 8001e9c:	08002bf7 	.word	0x08002bf7
 8001ea0:	08002bf7 	.word	0x08002bf7
 8001ea4:	08002bf7 	.word	0x08002bf7
 8001ea8:	08002bf7 	.word	0x08002bf7
 8001eac:	08002bf7 	.word	0x08002bf7
 8001eb0:	08002bf7 	.word	0x08002bf7
 8001eb4:	08002bf7 	.word	0x08002bf7
 8001eb8:	08002bf7 	.word	0x08002bf7
 8001ebc:	08002bf7 	.word	0x08002bf7
 8001ec0:	08002bfd 	.word	0x08002bfd
 8001ec4:	2b5a      	cmp	r3, #90	; 0x5a
 8001ec6:	f000 869b 	beq.w	8002c00 <handleCySatPacket+0xde0>
 8001eca:	f000 be94 	b.w	8002bf6 <handleCySatPacket+0xdd6>
        case ADCS_SUBSYSTEM_TYPE: //ADCS

            break;

        case EPS_SUBSYSTEM_TYPE: //EPS
            switch(packet.Command){
 8001ece:	797b      	ldrb	r3, [r7, #5]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	2b10      	cmp	r3, #16
 8001ed4:	f200 8696 	bhi.w	8002c04 <handleCySatPacket+0xde4>
 8001ed8:	a201      	add	r2, pc, #4	; (adr r2, 8001ee0 <handleCySatPacket+0xc0>)
 8001eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ede:	bf00      	nop
 8001ee0:	08001f25 	.word	0x08001f25
 8001ee4:	08002c05 	.word	0x08002c05
 8001ee8:	08001fff 	.word	0x08001fff
 8001eec:	08002c05 	.word	0x08002c05
 8001ef0:	08002137 	.word	0x08002137
 8001ef4:	08002c05 	.word	0x08002c05
 8001ef8:	0800226f 	.word	0x0800226f
 8001efc:	08002c05 	.word	0x08002c05
 8001f00:	080023a7 	.word	0x080023a7
 8001f04:	08002c05 	.word	0x08002c05
 8001f08:	0800248f 	.word	0x0800248f
 8001f0c:	08002c05 	.word	0x08002c05
 8001f10:	08002657 	.word	0x08002657
 8001f14:	08002c05 	.word	0x08002c05
 8001f18:	08002779 	.word	0x08002779
 8001f1c:	08002c05 	.word	0x08002c05
 8001f20:	080028d3 	.word	0x080028d3
                case 0x01: { //Battery Pack Voltage/Current Request
                    float voltage, current;
                    status = READ_EPS_BATTERY_VOLTAGE(&voltage); //read the voltage from the EPS Battery Pack
 8001f24:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff f8cf 	bl	80010cc <READ_EPS_BATTERY_VOLTAGE>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8001f34:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <handleCySatPacket+0x124>
                        return -1;
 8001f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f40:	f000 be62 	b.w	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATTERY_CURRENT(&current); //read the current from the EPS Battery Pack
 8001f44:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff f8f1 	bl	8001130 <READ_EPS_BATTERY_CURRENT>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8001f54:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <handleCySatPacket+0x144>
                        return -1;
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f60:	f000 be52 	b.w	8002c08 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(voltage);
 8001f64:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001f68:	eeb0 0a67 	vmov.f32	s0, s15
 8001f6c:	f000 feb6 	bl	8002cdc <FloatToUnsigned16bits>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
                    uint16_t data2 = FloatToUnsigned16bits(current);
 8001f76:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7e:	f000 fead 	bl	8002cdc <FloatToUnsigned16bits>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8001f88:	231e      	movs	r3, #30
 8001f8a:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x00; //Battery Pack Voltage/Current Response
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x04;
 8001f94:	2304      	movs	r3, #4
 8001f96:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 8001f9a:	2004      	movs	r0, #4
 8001f9c:	f00a fab2 	bl	800c504 <malloc>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8001fa4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8001fb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8001fbe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fc8:	3302      	adds	r3, #2
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8001fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fd0:	3303      	adds	r3, #3
 8001fd2:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8001fda:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001fe2:	f7ff f801 	bl	8000fe8 <generateCySatChecksum>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    return sendCySatPacket(outgoingPacket); //send the response
 8001fec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ff0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ff4:	f7fe ff78 	bl	8000ee8 <sendCySatPacket>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f000 be05 	b.w	8002c08 <handleCySatPacket+0xde8>
                }
                case 0x03: { //Solar Panel X Status Request
                    float x_voltage, x_neg_current, x_pos_current;
                    status = READ_EPS_SOLAR_X_VOLTAGE(&x_voltage); //read the Solar Panel X axis voltage
 8001ffe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff f8c6 	bl	8001194 <READ_EPS_SOLAR_X_VOLTAGE>
 8002008:	4603      	mov	r3, r0
 800200a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800200e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <handleCySatPacket+0x1fe>
                        return -1;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
 800201a:	f000 bdf5 	b.w	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_X_NEG_CURRENT(&x_neg_current); //read the Solar Panel X- current
 800201e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff f8e8 	bl	80011f8 <READ_EPS_SOLAR_X_NEG_CURRENT>
 8002028:	4603      	mov	r3, r0
 800202a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800202e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <handleCySatPacket+0x21e>
                        return -1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	f000 bde5 	b.w	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_X_POS_CURRENT(&x_pos_current); //read the Solar Panel X+ current
 800203e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff f90a 	bl	800125c <READ_EPS_SOLAR_X_POS_CURRENT>
 8002048:	4603      	mov	r3, r0
 800204a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800204e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <handleCySatPacket+0x23e>
                        return -1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	f000 bdd5 	b.w	8002c08 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(x_voltage);
 800205e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002062:	eeb0 0a67 	vmov.f32	s0, s15
 8002066:	f000 fe39 	bl	8002cdc <FloatToUnsigned16bits>
 800206a:	4603      	mov	r3, r0
 800206c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
                    uint16_t data2 = FloatToUnsigned16bits(x_neg_current);
 8002070:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002074:	eeb0 0a67 	vmov.f32	s0, s15
 8002078:	f000 fe30 	bl	8002cdc <FloatToUnsigned16bits>
 800207c:	4603      	mov	r3, r0
 800207e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
                    uint16_t data3 = FloatToUnsigned16bits(x_pos_current);
 8002082:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002086:	eeb0 0a67 	vmov.f32	s0, s15
 800208a:	f000 fe27 	bl	8002cdc <FloatToUnsigned16bits>
 800208e:	4603      	mov	r3, r0
 8002090:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002094:	231e      	movs	r3, #30
 8002096:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x02; //Solar Panel X Status Response
 800209a:	2302      	movs	r3, #2
 800209c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 80020a0:	2306      	movs	r3, #6
 80020a2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 80020a6:	2006      	movs	r0, #6
 80020a8:	f00a fa2c 	bl	800c504 <malloc>
 80020ac:	4603      	mov	r3, r0
 80020ae:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 80020b0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 80020be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c0:	3301      	adds	r3, #1
 80020c2:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 80020ca:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d4:	3302      	adds	r3, #2
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 80020da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020dc:	3303      	adds	r3, #3
 80020de:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 80020e6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80020ea:	0a1b      	lsrs	r3, r3, #8
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020f0:	3304      	adds	r3, #4
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 80020f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020f8:	3305      	adds	r3, #5
 80020fa:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002102:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002106:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800210a:	f7fe ff6d 	bl	8000fe8 <generateCySatChecksum>
 800210e:	4603      	mov	r3, r0
 8002110:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8002114:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002118:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800211c:	f7fe fee4 	bl	8000ee8 <sendCySatPacket>
 8002120:	4603      	mov	r3, r0
 8002122:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8002126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002128:	4618      	mov	r0, r3
 800212a:	f00a f9f3 	bl	800c514 <free>
                    return status; //send the response
 800212e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002132:	f000 bd69 	b.w	8002c08 <handleCySatPacket+0xde8>
                }
                case 0x05: { //Solar Panel Y Status Request
                    float y_voltage, y_neg_current, y_pos_current;
                    status = READ_EPS_SOLAR_Y_VOLTAGE(&y_voltage); //read the Solar Panel Y axis voltage
 8002136:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff f8c0 	bl	80012c0 <READ_EPS_SOLAR_Y_VOLTAGE>
 8002140:	4603      	mov	r3, r0
 8002142:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002146:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <handleCySatPacket+0x336>
                        return -1;
 800214e:	f04f 33ff 	mov.w	r3, #4294967295
 8002152:	f000 bd59 	b.w	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Y_NEG_CURRENT(&y_neg_current); //read the Solar Panel Y- current
 8002156:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff f8e2 	bl	8001324 <READ_EPS_SOLAR_Y_NEG_CURRENT>
 8002160:	4603      	mov	r3, r0
 8002162:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002166:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <handleCySatPacket+0x356>
                        return -1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
 8002172:	f000 bd49 	b.w	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Y_POS_CURRENT(&y_pos_current); //read the Solar Panel Y+ current
 8002176:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff f904 	bl	8001388 <READ_EPS_SOLAR_Y_POS_CURRENT>
 8002180:	4603      	mov	r3, r0
 8002182:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002186:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <handleCySatPacket+0x376>
                        return -1;
 800218e:	f04f 33ff 	mov.w	r3, #4294967295
 8002192:	f000 bd39 	b.w	8002c08 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(y_voltage);
 8002196:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800219a:	eeb0 0a67 	vmov.f32	s0, s15
 800219e:	f000 fd9d 	bl	8002cdc <FloatToUnsigned16bits>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
                    uint16_t data2 = FloatToUnsigned16bits(y_neg_current);
 80021a8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80021ac:	eeb0 0a67 	vmov.f32	s0, s15
 80021b0:	f000 fd94 	bl	8002cdc <FloatToUnsigned16bits>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
                    uint16_t data3 = FloatToUnsigned16bits(y_pos_current);
 80021ba:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80021be:	eeb0 0a67 	vmov.f32	s0, s15
 80021c2:	f000 fd8b 	bl	8002cdc <FloatToUnsigned16bits>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80021cc:	231e      	movs	r3, #30
 80021ce:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x04; //Solar Panel Y Status Response
 80021d2:	2304      	movs	r3, #4
 80021d4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 80021d8:	2306      	movs	r3, #6
 80021da:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 80021de:	2006      	movs	r0, #6
 80021e0:	f00a f990 	bl	800c504 <malloc>
 80021e4:	4603      	mov	r3, r0
 80021e6:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 80021e8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 80021f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021f8:	3301      	adds	r3, #1
 80021fa:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8002202:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	b29a      	uxth	r2, r3
 800220a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800220c:	3302      	adds	r3, #2
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002214:	3303      	adds	r3, #3
 8002216:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 800221e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	b29a      	uxth	r2, r3
 8002226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002228:	3304      	adds	r3, #4
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 800222e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002230:	3305      	adds	r3, #5
 8002232:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 800223a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800223e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002242:	f7fe fed1 	bl	8000fe8 <generateCySatChecksum>
 8002246:	4603      	mov	r3, r0
 8002248:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 800224c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002250:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002254:	f7fe fe48 	bl	8000ee8 <sendCySatPacket>
 8002258:	4603      	mov	r3, r0
 800225a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 800225e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002260:	4618      	mov	r0, r3
 8002262:	f00a f957 	bl	800c514 <free>
                    return status; //send the response
 8002266:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800226a:	f000 bccd 	b.w	8002c08 <handleCySatPacket+0xde8>
                }
                case 0x07: { //Solar Panel Z Status Request
                    float z_voltage, z_neg_current, z_pos_current;
                    status = READ_EPS_SOLAR_Z_VOLTAGE(&z_voltage); //read the Solar Panel Z axis voltage
 800226e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f8ba 	bl	80013ec <READ_EPS_SOLAR_Z_VOLTAGE>
 8002278:	4603      	mov	r3, r0
 800227a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800227e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <handleCySatPacket+0x46e>
                        return -1;
 8002286:	f04f 33ff 	mov.w	r3, #4294967295
 800228a:	f000 bcbd 	b.w	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Z_NEG_CURRENT(&z_neg_current); //read the Solar Panel Z- current
 800228e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f8dc 	bl	8001450 <READ_EPS_SOLAR_Z_NEG_CURRENT>
 8002298:	4603      	mov	r3, r0
 800229a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800229e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <handleCySatPacket+0x48e>
                        return -1;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	f000 bcad 	b.w	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Z_POS_CURRENT(&z_pos_current); //read the Solar Panel Z+ current
 80022ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff f8fe 	bl	80014b4 <READ_EPS_SOLAR_Z_POS_CURRENT>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80022be:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <handleCySatPacket+0x4ae>
                        return -1;
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ca:	f000 bc9d 	b.w	8002c08 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(z_voltage);
 80022ce:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80022d2:	eeb0 0a67 	vmov.f32	s0, s15
 80022d6:	f000 fd01 	bl	8002cdc <FloatToUnsigned16bits>
 80022da:	4603      	mov	r3, r0
 80022dc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
                    uint16_t data2 = FloatToUnsigned16bits(z_neg_current);
 80022e0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80022e4:	eeb0 0a67 	vmov.f32	s0, s15
 80022e8:	f000 fcf8 	bl	8002cdc <FloatToUnsigned16bits>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
                    uint16_t data3 = FloatToUnsigned16bits(z_pos_current);
 80022f2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80022f6:	eeb0 0a67 	vmov.f32	s0, s15
 80022fa:	f000 fcef 	bl	8002cdc <FloatToUnsigned16bits>
 80022fe:	4603      	mov	r3, r0
 8002300:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002304:	231e      	movs	r3, #30
 8002306:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x06; //Solar Panel Z Status Response
 800230a:	2306      	movs	r3, #6
 800230c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 8002310:	2306      	movs	r3, #6
 8002312:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 8002316:	2006      	movs	r0, #6
 8002318:	f00a f8f4 	bl	800c504 <malloc>
 800231c:	4603      	mov	r3, r0
 800231e:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002320:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	b29a      	uxth	r2, r3
 8002328:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 800232e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002330:	3301      	adds	r3, #1
 8002332:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 800233a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	b29a      	uxth	r2, r3
 8002342:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002344:	3302      	adds	r3, #2
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 800234a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800234c:	3303      	adds	r3, #3
 800234e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 8002356:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	b29a      	uxth	r2, r3
 800235e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002360:	3304      	adds	r3, #4
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8002366:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002368:	3305      	adds	r3, #5
 800236a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002372:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002376:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800237a:	f7fe fe35 	bl	8000fe8 <generateCySatChecksum>
 800237e:	4603      	mov	r3, r0
 8002380:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8002384:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002388:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800238c:	f7fe fdac 	bl	8000ee8 <sendCySatPacket>
 8002390:	4603      	mov	r3, r0
 8002392:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8002396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002398:	4618      	mov	r0, r3
 800239a:	f00a f8bb 	bl	800c514 <free>
                    return status; //send the response
 800239e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80023a2:	f000 bc31 	b.w	8002c08 <handleCySatPacket+0xde8>
                }
                case 0x09: { //BUS Current Request
                    float current_3, current_5;
                    status = READ_EPS_3V_CURRENT(&current_3); //read the 3.3v BUS current
 80023a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff f8b4 	bl	8001518 <READ_EPS_3V_CURRENT>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80023b6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <handleCySatPacket+0x5a6>
                        return -1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	f000 bc21 	b.w	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_5V_CURRENT(&current_5); //read the 5v BUS current
 80023c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff f8d6 	bl	800157c <READ_EPS_5V_CURRENT>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80023d6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <handleCySatPacket+0x5c6>
                        return -1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	f000 bc11 	b.w	8002c08 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(current_3);
 80023e6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80023ea:	eeb0 0a67 	vmov.f32	s0, s15
 80023ee:	f000 fc75 	bl	8002cdc <FloatToUnsigned16bits>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
                    uint16_t data2 = FloatToUnsigned16bits(current_5);
 80023f8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80023fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002400:	f000 fc6c 	bl	8002cdc <FloatToUnsigned16bits>
 8002404:	4603      	mov	r3, r0
 8002406:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 800240a:	231e      	movs	r3, #30
 800240c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x08; //BUS Current Response
 8002410:	2308      	movs	r3, #8
 8002412:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x04;
 8002416:	2304      	movs	r3, #4
 8002418:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 800241c:	2004      	movs	r0, #4
 800241e:	f00a f871 	bl	800c504 <malloc>
 8002422:	4603      	mov	r3, r0
 8002424:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002426:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800242a:	0a1b      	lsrs	r3, r3, #8
 800242c:	b29a      	uxth	r2, r3
 800242e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002434:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002436:	3301      	adds	r3, #1
 8002438:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8002440:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	b29a      	uxth	r2, r3
 8002448:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800244a:	3302      	adds	r3, #2
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002450:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002452:	3303      	adds	r3, #3
 8002454:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 800245c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002460:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002464:	f7fe fdc0 	bl	8000fe8 <generateCySatChecksum>
 8002468:	4603      	mov	r3, r0
 800246a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 800246e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002472:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002476:	f7fe fd37 	bl	8000ee8 <sendCySatPacket>
 800247a:	4603      	mov	r3, r0
 800247c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8002480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002482:	4618      	mov	r0, r3
 8002484:	f00a f846 	bl	800c514 <free>
                    return status; //send the response
 8002488:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800248c:	e3bc      	b.n	8002c08 <handleCySatPacket+0xde8>
                }
                case 0x0B: { //Temperature Request
                    float mcu_temp, battery1_temp, battery2_temp, battery3_temp, battery4_temp;
                    status = READ_EPS_MCU_TEMP(&mcu_temp); //read the MCU Temperature
 800248e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff f8a4 	bl	80015e0 <READ_EPS_MCU_TEMP>
 8002498:	4603      	mov	r3, r0
 800249a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800249e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <handleCySatPacket+0x68c>
                        return -1;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	e3ad      	b.n	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_1_TEMP(&battery1_temp); //read the Battery Cell 1 Temperature
 80024ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff f8d3 	bl	800165c <READ_EPS_BATT_1_TEMP>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80024bc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <handleCySatPacket+0x6aa>
                        return -1;
 80024c4:	f04f 33ff 	mov.w	r3, #4294967295
 80024c8:	e39e      	b.n	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_2_TEMP(&battery2_temp); //read the Battery Cell 2 Temperature
 80024ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff f8f6 	bl	80016c0 <READ_EPS_BATT_2_TEMP>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80024da:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <handleCySatPacket+0x6c8>
                        return -1;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	e38f      	b.n	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_3_TEMP(&battery3_temp); //read the Battery Cell 3 Temperature
 80024e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff f919 	bl	8001724 <READ_EPS_BATT_3_TEMP>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80024f8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <handleCySatPacket+0x6e6>
                        return -1;
 8002500:	f04f 33ff 	mov.w	r3, #4294967295
 8002504:	e380      	b.n	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_4_TEMP(&battery4_temp); //read the Battery Cell 4 Temperature
 8002506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff f93c 	bl	8001788 <READ_EPS_BATT_4_TEMP>
 8002510:	4603      	mov	r3, r0
 8002512:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002516:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <handleCySatPacket+0x704>
                        return -1;
 800251e:	f04f 33ff 	mov.w	r3, #4294967295
 8002522:	e371      	b.n	8002c08 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(mcu_temp);
 8002524:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002528:	eeb0 0a67 	vmov.f32	s0, s15
 800252c:	f000 fbd6 	bl	8002cdc <FloatToUnsigned16bits>
 8002530:	4603      	mov	r3, r0
 8002532:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
                    uint16_t data2 = FloatToUnsigned16bits(battery1_temp);
 8002536:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800253a:	eeb0 0a67 	vmov.f32	s0, s15
 800253e:	f000 fbcd 	bl	8002cdc <FloatToUnsigned16bits>
 8002542:	4603      	mov	r3, r0
 8002544:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
                    uint16_t data3 = FloatToUnsigned16bits(battery2_temp);
 8002548:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800254c:	eeb0 0a67 	vmov.f32	s0, s15
 8002550:	f000 fbc4 	bl	8002cdc <FloatToUnsigned16bits>
 8002554:	4603      	mov	r3, r0
 8002556:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
                    uint16_t data4 = FloatToUnsigned16bits(battery3_temp);
 800255a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800255e:	eeb0 0a67 	vmov.f32	s0, s15
 8002562:	f000 fbbb 	bl	8002cdc <FloatToUnsigned16bits>
 8002566:	4603      	mov	r3, r0
 8002568:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
                    uint16_t data5 = FloatToUnsigned16bits(battery4_temp);
 800256c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002570:	eeb0 0a67 	vmov.f32	s0, s15
 8002574:	f000 fbb2 	bl	8002cdc <FloatToUnsigned16bits>
 8002578:	4603      	mov	r3, r0
 800257a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 800257e:	231e      	movs	r3, #30
 8002580:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x0A; //Temperature Response
 8002584:	230a      	movs	r3, #10
 8002586:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x0A;
 800258a:	230a      	movs	r3, #10
 800258c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 10);
 8002590:	200a      	movs	r0, #10
 8002592:	f009 ffb7 	bl	800c504 <malloc>
 8002596:	4603      	mov	r3, r0
 8002598:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 800259a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800259e:	0a1b      	lsrs	r3, r3, #8
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 80025a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025aa:	3301      	adds	r3, #1
 80025ac:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 80025b4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025be:	3302      	adds	r3, #2
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 80025c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025c6:	3303      	adds	r3, #3
 80025c8:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 80025d0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025da:	3304      	adds	r3, #4
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 80025e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025e2:	3305      	adds	r3, #5
 80025e4:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[6] = (data4 & 0xFF00) >> 8;
 80025ec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025f6:	3306      	adds	r3, #6
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[7] = data4 & 0xFF;
 80025fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025fe:	3307      	adds	r3, #7
 8002600:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[8] = (data5 & 0xFF00) >> 8;
 8002608:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	b29a      	uxth	r2, r3
 8002610:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002612:	3308      	adds	r3, #8
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[9] = data5 & 0xFF;
 8002618:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800261a:	3309      	adds	r3, #9
 800261c:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002624:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002628:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800262c:	f7fe fcdc 	bl	8000fe8 <generateCySatChecksum>
 8002630:	4603      	mov	r3, r0
 8002632:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8002636:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800263a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800263e:	f7fe fc53 	bl	8000ee8 <sendCySatPacket>
 8002642:	4603      	mov	r3, r0
 8002644:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8002648:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800264a:	4618      	mov	r0, r3
 800264c:	f009 ff62 	bl	800c514 <free>
                    return status; //send the response
 8002650:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002654:	e2d8      	b.n	8002c08 <handleCySatPacket+0xde8>
                }
                case 0x0D: { //Input, Output, and Default Conditions Request
                    uint16_t input, output1, output2, defaults1, defaults2;
                    status = READ_EPS_INPUT_CONDITION(&input); //read the Input Conditions
 8002656:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff f8c6 	bl	80017ec <READ_EPS_INPUT_CONDITION>
 8002660:	4603      	mov	r3, r0
 8002662:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002666:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <handleCySatPacket+0x854>
                        return -1;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	e2c9      	b.n	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_OUTPUT_CONDITION1(&output1); //read the Output 1 Conditions
 8002674:	f107 0320 	add.w	r3, r7, #32
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff f8dc 	bl	8001836 <READ_EPS_OUTPUT_CONDITION1>
 800267e:	4603      	mov	r3, r0
 8002680:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002684:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <handleCySatPacket+0x872>
                        return -1;
 800268c:	f04f 33ff 	mov.w	r3, #4294967295
 8002690:	e2ba      	b.n	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_OUTPUT_CONDITION2(&output2); //read the Output 2 Conditions
 8002692:	f107 031e 	add.w	r3, r7, #30
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff f8f2 	bl	8001880 <READ_EPS_OUTPUT_CONDITION2>
 800269c:	4603      	mov	r3, r0
 800269e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80026a2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <handleCySatPacket+0x890>
                        return -1;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	e2ab      	b.n	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_DEFAULTS1(&defaults1); //read the Defaults 1 Conditions
 80026b0:	f107 031c 	add.w	r3, r7, #28
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff f9c1 	bl	8001a3c <READ_EPS_DEFAULTS1>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80026c0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <handleCySatPacket+0x8ae>
                        return -1;
 80026c8:	f04f 33ff 	mov.w	r3, #4294967295
 80026cc:	e29c      	b.n	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_DEFAULTS2(&defaults2); //read the Defaults 2 Conditions
 80026ce:	f107 031a 	add.w	r3, r7, #26
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff f9d7 	bl	8001a86 <READ_EPS_DEFAULTS2>
 80026d8:	4603      	mov	r3, r0
 80026da:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80026de:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <handleCySatPacket+0x8cc>
                        return -1;
 80026e6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ea:	e28d      	b.n	8002c08 <handleCySatPacket+0xde8>
                    }

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80026ec:	231e      	movs	r3, #30
 80026ee:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x0C; //Input, Output, and Default Conditions Response
 80026f2:	230c      	movs	r3, #12
 80026f4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 80026f8:	2306      	movs	r3, #6
 80026fa:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 80026fe:	2006      	movs	r0, #6
 8002700:	f009 ff00 	bl	800c504 <malloc>
 8002704:	4603      	mov	r3, r0
 8002706:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = input & 0xFF;
 8002708:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800270a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = (output1 & 0xFF00) >> 8;
 8002710:	8c3b      	ldrh	r3, [r7, #32]
 8002712:	0a1b      	lsrs	r3, r3, #8
 8002714:	b29a      	uxth	r2, r3
 8002716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002718:	3301      	adds	r3, #1
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = output1 & 0xFF;
 800271e:	8c3a      	ldrh	r2, [r7, #32]
 8002720:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002722:	3302      	adds	r3, #2
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = output2 & 0xFF;
 8002728:	8bfa      	ldrh	r2, [r7, #30]
 800272a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800272c:	3303      	adds	r3, #3
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = defaults1 & 0xFF;
 8002732:	8bba      	ldrh	r2, [r7, #28]
 8002734:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002736:	3304      	adds	r3, #4
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = defaults2 & 0xFF;
 800273c:	8b7a      	ldrh	r2, [r7, #26]
 800273e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002740:	3305      	adds	r3, #5
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002746:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800274a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800274e:	f7fe fc4b 	bl	8000fe8 <generateCySatChecksum>
 8002752:	4603      	mov	r3, r0
 8002754:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8002758:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800275c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002760:	f7fe fbc2 	bl	8000ee8 <sendCySatPacket>
 8002764:	4603      	mov	r3, r0
 8002766:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 800276a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800276c:	4618      	mov	r0, r3
 800276e:	f009 fed1 	bl	800c514 <free>
                    return status; //send the response
 8002772:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002776:	e247      	b.n	8002c08 <handleCySatPacket+0xde8>
                }
                case 0x0F: { //Counter Check Request
                    uint16_t power_on, under_voltage, short_circuited, over_temp, charging_cycles;
                    status = READ_EPS_POWER_ON_CYCLES(&power_on); //read the MCU Temperature
 8002778:	f107 0318 	add.w	r3, r7, #24
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff f8a4 	bl	80018ca <READ_EPS_POWER_ON_CYCLES>
 8002782:	4603      	mov	r3, r0
 8002784:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002788:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <handleCySatPacket+0x976>
                        return -1;
 8002790:	f04f 33ff 	mov.w	r3, #4294967295
 8002794:	e238      	b.n	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_UNDER_VOLT_COUNT(&under_voltage); //read the Battery Cell 1 Temperature
 8002796:	f107 0316 	add.w	r3, r7, #22
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff f8ba 	bl	8001914 <READ_EPS_UNDER_VOLT_COUNT>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80027a6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <handleCySatPacket+0x994>
                        return -1;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	e229      	b.n	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SHORT_CIRCUIT_COUNT(&short_circuited); //read the Battery Cell 2 Temperature
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff f8d0 	bl	800195e <READ_EPS_SHORT_CIRCUIT_COUNT>
 80027be:	4603      	mov	r3, r0
 80027c0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80027c4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <handleCySatPacket+0x9b2>
                        return -1;
 80027cc:	f04f 33ff 	mov.w	r3, #4294967295
 80027d0:	e21a      	b.n	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_OVER_TEMP_COUNT(&over_temp); //read the Battery Cell 3 Temperature
 80027d2:	f107 0312 	add.w	r3, r7, #18
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff f8e6 	bl	80019a8 <READ_EPS_OVER_TEMP_COUNT>
 80027dc:	4603      	mov	r3, r0
 80027de:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80027e2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <handleCySatPacket+0x9d0>
                        return -1;
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
 80027ee:	e20b      	b.n	8002c08 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_CHARGE_CYCLES(&charging_cycles); //read the Battery Cell 4 Temperature
 80027f0:	f107 0310 	add.w	r3, r7, #16
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff f8fc 	bl	80019f2 <READ_EPS_CHARGE_CYCLES>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002800:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <handleCySatPacket+0x9ee>
                        return -1;
 8002808:	f04f 33ff 	mov.w	r3, #4294967295
 800280c:	e1fc      	b.n	8002c08 <handleCySatPacket+0xde8>
                    }

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 800280e:	231e      	movs	r3, #30
 8002810:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x0E; //Temperature Response
 8002814:	230e      	movs	r3, #14
 8002816:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x0A;
 800281a:	230a      	movs	r3, #10
 800281c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 10);
 8002820:	200a      	movs	r0, #10
 8002822:	f009 fe6f 	bl	800c504 <malloc>
 8002826:	4603      	mov	r3, r0
 8002828:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (power_on & 0xFF00) >> 8;
 800282a:	8b3b      	ldrh	r3, [r7, #24]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	b29a      	uxth	r2, r3
 8002830:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = power_on & 0xFF;
 8002836:	8b3a      	ldrh	r2, [r7, #24]
 8002838:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800283a:	3301      	adds	r3, #1
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (under_voltage & 0xFF00) >> 8;
 8002840:	8afb      	ldrh	r3, [r7, #22]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	b29a      	uxth	r2, r3
 8002846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002848:	3302      	adds	r3, #2
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = under_voltage & 0xFF;
 800284e:	8afa      	ldrh	r2, [r7, #22]
 8002850:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002852:	3303      	adds	r3, #3
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (short_circuited & 0xFF00) >> 8;
 8002858:	8abb      	ldrh	r3, [r7, #20]
 800285a:	0a1b      	lsrs	r3, r3, #8
 800285c:	b29a      	uxth	r2, r3
 800285e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002860:	3304      	adds	r3, #4
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = short_circuited & 0xFF;
 8002866:	8aba      	ldrh	r2, [r7, #20]
 8002868:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800286a:	3305      	adds	r3, #5
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[6] = (over_temp & 0xFF00) >> 8;
 8002870:	8a7b      	ldrh	r3, [r7, #18]
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	b29a      	uxth	r2, r3
 8002876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002878:	3306      	adds	r3, #6
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[7] = over_temp & 0xFF;
 800287e:	8a7a      	ldrh	r2, [r7, #18]
 8002880:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002882:	3307      	adds	r3, #7
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[8] = (charging_cycles & 0xFF00) >> 8;
 8002888:	8a3b      	ldrh	r3, [r7, #16]
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	b29a      	uxth	r2, r3
 800288e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002890:	3308      	adds	r3, #8
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[9] = charging_cycles & 0xFF;
 8002896:	8a3a      	ldrh	r2, [r7, #16]
 8002898:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800289a:	3309      	adds	r3, #9
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 80028a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028a8:	f7fe fb9e 	bl	8000fe8 <generateCySatChecksum>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 80028b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028ba:	f7fe fb15 	bl	8000ee8 <sendCySatPacket>
 80028be:	4603      	mov	r3, r0
 80028c0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 80028c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028c6:	4618      	mov	r0, r3
 80028c8:	f009 fe24 	bl	800c514 <free>
                    return status; //send the response
 80028cc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80028d0:	e19a      	b.n	8002c08 <handleCySatPacket+0xde8>
                }
                case 0x11: { //Enable/Disable Request
                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80028d2:	231e      	movs	r3, #30
 80028d4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x10; //Enable/Disable Response
 80028d8:	2310      	movs	r3, #16
 80028da:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x01;
 80028de:	2301      	movs	r3, #1
 80028e0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t));
 80028e4:	2001      	movs	r0, #1
 80028e6:	f009 fe0d 	bl	800c504 <malloc>
 80028ea:	4603      	mov	r3, r0
 80028ec:	673b      	str	r3, [r7, #112]	; 0x70
                    if(validateCySatChecksum(packet)==0){
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028f4:	f7fe fbad 	bl	8001052 <validateCySatChecksum>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d103      	bne.n	8002906 <handleCySatPacket+0xae6>
                        outgoingPacket.Data[0] = 0;
 80028fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
 8002904:	e15e      	b.n	8002bc4 <handleCySatPacket+0xda4>
                    }
                    else{
                        switch(packet.Data[0]){
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	3b01      	subs	r3, #1
 800290c:	2b0e      	cmp	r3, #14
 800290e:	f200 8159 	bhi.w	8002bc4 <handleCySatPacket+0xda4>
 8002912:	a201      	add	r2, pc, #4	; (adr r2, 8002918 <handleCySatPacket+0xaf8>)
 8002914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002918:	08002955 	.word	0x08002955
 800291c:	08002bc5 	.word	0x08002bc5
 8002920:	08002bc5 	.word	0x08002bc5
 8002924:	08002989 	.word	0x08002989
 8002928:	08002bc5 	.word	0x08002bc5
 800292c:	080029bd 	.word	0x080029bd
 8002930:	080029f1 	.word	0x080029f1
 8002934:	08002a25 	.word	0x08002a25
 8002938:	08002a59 	.word	0x08002a59
 800293c:	08002a8d 	.word	0x08002a8d
 8002940:	08002ac1 	.word	0x08002ac1
 8002944:	08002af5 	.word	0x08002af5
 8002948:	08002b29 	.word	0x08002b29
 800294c:	08002b5d 	.word	0x08002b5d
 8002950:	08002b91 	.word	0x08002b91
                            case 0x01:{ //Enable/Disable Battery BUS
                                if(packet.Data[1] == 0){
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	3301      	adds	r3, #1
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d105      	bne.n	800296a <handleCySatPacket+0xb4a>
                                    outgoingPacket.Data[0] = disable_EPS_Vbatt_Bus();
 800295e:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002960:	f7ff f8bf 	bl	8001ae2 <disable_EPS_Vbatt_Bus>
 8002964:	4603      	mov	r3, r0
 8002966:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Vbatt_Bus();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002968:	e12c      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	3301      	adds	r3, #1
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d105      	bne.n	8002980 <handleCySatPacket+0xb60>
                                    outgoingPacket.Data[0] = enable_EPS_Vbatt_Bus();
 8002974:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002976:	f7ff f8ab 	bl	8001ad0 <enable_EPS_Vbatt_Bus>
 800297a:	4603      	mov	r3, r0
 800297c:	7023      	strb	r3, [r4, #0]
                                break;
 800297e:	e121      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002980:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
                                break;
 8002986:	e11d      	b.n	8002bc4 <handleCySatPacket+0xda4>
                            }
                            case 0x04:{ //Enable/Disable 5v BUS
                                if(packet.Data[1] == 0){
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	3301      	adds	r3, #1
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d105      	bne.n	800299e <handleCySatPacket+0xb7e>
                                    outgoingPacket.Data[0] = disable_EPS_5v_Bus();
 8002992:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002994:	f7ff f8b7 	bl	8001b06 <disable_EPS_5v_Bus>
 8002998:	4603      	mov	r3, r0
 800299a:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_5v_Bus();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800299c:	e112      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	3301      	adds	r3, #1
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d105      	bne.n	80029b4 <handleCySatPacket+0xb94>
                                    outgoingPacket.Data[0] = enable_EPS_5v_Bus();
 80029a8:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80029aa:	f7ff f8a3 	bl	8001af4 <enable_EPS_5v_Bus>
 80029ae:	4603      	mov	r3, r0
 80029b0:	7023      	strb	r3, [r4, #0]
                                break;
 80029b2:	e107      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 80029b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]
                                break;
 80029ba:	e103      	b.n	8002bc4 <handleCySatPacket+0xda4>
                            }
                            case 0x06:{ //Enable/Disable Fast/Slow Battery Charge 1
                                if(packet.Data[1] == 0){
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	3301      	adds	r3, #1
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d105      	bne.n	80029d2 <handleCySatPacket+0xbb2>
                                    outgoingPacket.Data[0] = disable_EPS_Fast_Charge1();
 80029c6:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80029c8:	f7ff f8af 	bl	8001b2a <disable_EPS_Fast_Charge1>
 80029cc:	4603      	mov	r3, r0
 80029ce:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80029d0:	e0f8      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	3301      	adds	r3, #1
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d105      	bne.n	80029e8 <handleCySatPacket+0xbc8>
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge1();
 80029dc:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80029de:	f7ff f89b 	bl	8001b18 <enable_EPS_Fast_Charge1>
 80029e2:	4603      	mov	r3, r0
 80029e4:	7023      	strb	r3, [r4, #0]
                                break;
 80029e6:	e0ed      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 80029e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
                                break;
 80029ee:	e0e9      	b.n	8002bc4 <handleCySatPacket+0xda4>
                            }
                            case 0x07:{ //Enable/Disable Fast/Slow Battery Charge 2
                                if(packet.Data[1] == 0){
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	3301      	adds	r3, #1
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d105      	bne.n	8002a06 <handleCySatPacket+0xbe6>
                                    outgoingPacket.Data[0] = disable_EPS_Fast_Charge2();
 80029fa:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80029fc:	f7ff f8a7 	bl	8001b4e <disable_EPS_Fast_Charge2>
 8002a00:	4603      	mov	r3, r0
 8002a02:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002a04:	e0de      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d105      	bne.n	8002a1c <handleCySatPacket+0xbfc>
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge2();
 8002a10:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002a12:	f7ff f893 	bl	8001b3c <enable_EPS_Fast_Charge2>
 8002a16:	4603      	mov	r3, r0
 8002a18:	7023      	strb	r3, [r4, #0]
                                break;
 8002a1a:	e0d3      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002a1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a1e:	2200      	movs	r2, #0
 8002a20:	701a      	strb	r2, [r3, #0]
                                break;
 8002a22:	e0cf      	b.n	8002bc4 <handleCySatPacket+0xda4>
                            }
                            case 0x08:{ //Enable/Disable Out1/Boost Board
                                if(packet.Data[1] == 0){
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	3301      	adds	r3, #1
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d105      	bne.n	8002a3a <handleCySatPacket+0xc1a>
                                    outgoingPacket.Data[0] = disable_Boost_Board();
 8002a2e:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002a30:	f7ff f89f 	bl	8001b72 <disable_Boost_Board>
 8002a34:	4603      	mov	r3, r0
 8002a36:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_Boost_Board();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002a38:	e0c4      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d105      	bne.n	8002a50 <handleCySatPacket+0xc30>
                                    outgoingPacket.Data[0] = enable_Boost_Board();
 8002a44:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002a46:	f7ff f88b 	bl	8001b60 <enable_Boost_Board>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	7023      	strb	r3, [r4, #0]
                                break;
 8002a4e:	e0b9      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002a50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
                                break;
 8002a56:	e0b5      	b.n	8002bc4 <handleCySatPacket+0xda4>
                            }
                            case 0x09:{ //Enable/Disable Out2
                                if(packet.Data[1] == 0){
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d105      	bne.n	8002a6e <handleCySatPacket+0xc4e>
                                    outgoingPacket.Data[0] = disable_Payload();
 8002a62:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002a64:	f7ff f897 	bl	8001b96 <disable_Payload>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_Payload();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002a6c:	e0aa      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	3301      	adds	r3, #1
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d105      	bne.n	8002a84 <handleCySatPacket+0xc64>
                                    outgoingPacket.Data[0] = enable_Payload();
 8002a78:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002a7a:	f7ff f883 	bl	8001b84 <enable_Payload>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	7023      	strb	r3, [r4, #0]
                                break;
 8002a82:	e09f      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002a84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
                                break;
 8002a8a:	e09b      	b.n	8002bc4 <handleCySatPacket+0xda4>
                            }
                            case 0x0A:{ //Enable/Disable Out3
                                if(packet.Data[1] == 0){
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d105      	bne.n	8002aa2 <handleCySatPacket+0xc82>
                                    outgoingPacket.Data[0] = disable_EPS_Output_3();
 8002a96:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002a98:	f7ff f88f 	bl	8001bba <disable_EPS_Output_3>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_3();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002aa0:	e090      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d105      	bne.n	8002ab8 <handleCySatPacket+0xc98>
                                    outgoingPacket.Data[0] = enable_EPS_Output_3();
 8002aac:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002aae:	f7ff f87b 	bl	8001ba8 <enable_EPS_Output_3>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	7023      	strb	r3, [r4, #0]
                                break;
 8002ab6:	e085      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002ab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
                                break;
 8002abe:	e081      	b.n	8002bc4 <handleCySatPacket+0xda4>
                            }
                            case 0x0B:{ //Enable/Disable Out5/UHF
                                if(packet.Data[1] == 0){
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d105      	bne.n	8002ad6 <handleCySatPacket+0xcb6>
                                    outgoingPacket.Data[0] = disable_UHF();
 8002aca:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002acc:	f7ff f887 	bl	8001bde <disable_UHF>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_UHF();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002ad4:	e076      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d105      	bne.n	8002aec <handleCySatPacket+0xccc>
                                    outgoingPacket.Data[0] = enable_UHF();
 8002ae0:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002ae2:	f7ff f873 	bl	8001bcc <enable_UHF>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	7023      	strb	r3, [r4, #0]
                                break;
 8002aea:	e06b      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002aec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
                                break;
 8002af2:	e067      	b.n	8002bc4 <handleCySatPacket+0xda4>
                            }
                            case 0x0C:{ //Enable/Disable Out6
                                if(packet.Data[1] == 0){
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	3301      	adds	r3, #1
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d105      	bne.n	8002b0a <handleCySatPacket+0xcea>
                                    outgoingPacket.Data[0] = disable_EPS_Output_6();
 8002afe:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002b00:	f7ff f87f 	bl	8001c02 <disable_EPS_Output_6>
 8002b04:	4603      	mov	r3, r0
 8002b06:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_6();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002b08:	e05c      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d105      	bne.n	8002b20 <handleCySatPacket+0xd00>
                                    outgoingPacket.Data[0] = enable_EPS_Output_6();
 8002b14:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002b16:	f7ff f86b 	bl	8001bf0 <enable_EPS_Output_6>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	7023      	strb	r3, [r4, #0]
                                break;
 8002b1e:	e051      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002b20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
                                break;
 8002b26:	e04d      	b.n	8002bc4 <handleCySatPacket+0xda4>
                            }
                            case 0x0D:{ //Enable/Disable Heater 1
                                if(packet.Data[1] == 0){
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d105      	bne.n	8002b3e <handleCySatPacket+0xd1e>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_1();
 8002b32:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002b34:	f7ff f877 	bl	8001c26 <disable_EPS_Batt_Heater_1>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002b3c:	e042      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	3301      	adds	r3, #1
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d105      	bne.n	8002b54 <handleCySatPacket+0xd34>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_1();
 8002b48:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002b4a:	f7ff f863 	bl	8001c14 <enable_EPS_Batt_Heater_1>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	7023      	strb	r3, [r4, #0]
                                break;
 8002b52:	e037      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002b54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
                                break;
 8002b5a:	e033      	b.n	8002bc4 <handleCySatPacket+0xda4>
                            }
                            case 0x0E:{ //Enable/Disable Heater 2
                                if(packet.Data[1] == 0){
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d105      	bne.n	8002b72 <handleCySatPacket+0xd52>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_2();
 8002b66:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002b68:	f7ff f86f 	bl	8001c4a <disable_EPS_Batt_Heater_2>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002b70:	e028      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	3301      	adds	r3, #1
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d105      	bne.n	8002b88 <handleCySatPacket+0xd68>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_2();
 8002b7c:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002b7e:	f7ff f85b 	bl	8001c38 <enable_EPS_Batt_Heater_2>
 8002b82:	4603      	mov	r3, r0
 8002b84:	7023      	strb	r3, [r4, #0]
                                break;
 8002b86:	e01d      	b.n	8002bc4 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8002b88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
                                break;
 8002b8e:	e019      	b.n	8002bc4 <handleCySatPacket+0xda4>
                            }
                            case 0x0F:{ //Enable/Disable Heater 3
                                if(packet.Data[1] == 0){
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	3301      	adds	r3, #1
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d105      	bne.n	8002ba6 <handleCySatPacket+0xd86>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_3();
 8002b9a:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002b9c:	f7ff f867 	bl	8001c6e <disable_EPS_Batt_Heater_3>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_3();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002ba4:	e00d      	b.n	8002bc2 <handleCySatPacket+0xda2>
                                else if(packet.Data[1] == 1){
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d105      	bne.n	8002bbc <handleCySatPacket+0xd9c>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_3();
 8002bb0:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8002bb2:	f7ff f853 	bl	8001c5c <enable_EPS_Batt_Heater_3>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	7023      	strb	r3, [r4, #0]
                                break;
 8002bba:	e002      	b.n	8002bc2 <handleCySatPacket+0xda2>
                                    outgoingPacket.Data[0] = 0x00;
 8002bbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
                                break;
 8002bc2:	bf00      	nop
                            }
                        }
                    }
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002bc4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bc8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002bcc:	f7fe fa0c 	bl	8000fe8 <generateCySatChecksum>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8002bd6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002bde:	f7fe f983 	bl	8000ee8 <sendCySatPacket>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8002be8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bea:	4618      	mov	r0, r3
 8002bec:	f009 fc92 	bl	800c514 <free>
                    return status; //send the response
 8002bf0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002bf4:	e008      	b.n	8002c08 <handleCySatPacket+0xde8>
        case EOL_SUBSYSTEM_TYPE: //End of Life

            break;

        default:
            return -1;
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfa:	e005      	b.n	8002c08 <handleCySatPacket+0xde8>
            break;
 8002bfc:	bf00      	nop
 8002bfe:	e002      	b.n	8002c06 <handleCySatPacket+0xde6>
            break;
 8002c00:	bf00      	nop
 8002c02:	e000      	b.n	8002c06 <handleCySatPacket+0xde6>
            break;
 8002c04:	bf00      	nop
    }

    return 0;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	37a4      	adds	r7, #164	; 0xa4
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd90      	pop	{r4, r7, pc}

08002c10 <debug_printf>:

/**
  * @brief Formats and prints data out on to the debug UART line. Formatting works in standard printf fashion
  * @retval Returns the status of the HAL UART transmission
  */
HAL_StatusTypeDef debug_printf(char* format, ...){
 8002c10:	b40f      	push	{r0, r1, r2, r3}
 8002c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	466b      	mov	r3, sp
 8002c1c:	4698      	mov	r8, r3

    uint32_t bufferSize = 512;
 8002c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c22:	61bb      	str	r3, [r7, #24]
    uint8_t formatBuffer[bufferSize];
 8002c24:	69be      	ldr	r6, [r7, #24]
 8002c26:	4633      	mov	r3, r6
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	4634      	mov	r4, r6
 8002c30:	461d      	mov	r5, r3
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	00eb      	lsls	r3, r5, #3
 8002c3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c40:	00e2      	lsls	r2, r4, #3
 8002c42:	2300      	movs	r3, #0
 8002c44:	4630      	mov	r0, r6
 8002c46:	4619      	mov	r1, r3
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	00cb      	lsls	r3, r1, #3
 8002c52:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002c56:	00c2      	lsls	r2, r0, #3
 8002c58:	1df3      	adds	r3, r6, #7
 8002c5a:	08db      	lsrs	r3, r3, #3
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	ebad 0d03 	sub.w	sp, sp, r3
 8002c62:	466b      	mov	r3, sp
 8002c64:	3300      	adds	r3, #0
 8002c66:	613b      	str	r3, [r7, #16]

    va_list args;
    va_start(args, format);
 8002c68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c6c:	60bb      	str	r3, [r7, #8]
    int len = vsnprintf(formatBuffer, bufferSize, format, args); //warning due to use of uint8_t instead of int8_t
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c72:	69b9      	ldr	r1, [r7, #24]
 8002c74:	6938      	ldr	r0, [r7, #16]
 8002c76:	f00a f9f1 	bl	800d05c <vsniprintf>
 8002c7a:	60f8      	str	r0, [r7, #12]
    va_end(args);

    HAL_StatusTypeDef status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	77fb      	strb	r3, [r7, #31]
    if (len > 0) {
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	dd1b      	ble.n	8002cbe <debug_printf+0xae>
        status = HAL_UART_Transmit(&huart6, formatBuffer, len, 1000);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c8e:	6939      	ldr	r1, [r7, #16]
 8002c90:	4810      	ldr	r0, [pc, #64]	; (8002cd4 <debug_printf+0xc4>)
 8002c92:	f004 fa7e 	bl	8007192 <HAL_UART_Transmit>
 8002c96:	4603      	mov	r3, r0
 8002c98:	77fb      	strb	r3, [r7, #31]
        uint8_t crlf[] = "\r\n";
 8002c9a:	4a0f      	ldr	r2, [pc, #60]	; (8002cd8 <debug_printf+0xc8>)
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	8019      	strh	r1, [r3, #0]
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	0c12      	lsrs	r2, r2, #16
 8002ca8:	701a      	strb	r2, [r3, #0]
        status = HAL_UART_Transmit(&huart6, crlf, 2, 1000); //sends a carrige return and a line feed to UART (meant for putty/windows)
 8002caa:	1d39      	adds	r1, r7, #4
 8002cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	4808      	ldr	r0, [pc, #32]	; (8002cd4 <debug_printf+0xc4>)
 8002cb4:	f004 fa6d 	bl	8007192 <HAL_UART_Transmit>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	77fb      	strb	r3, [r7, #31]
 8002cbc:	e001      	b.n	8002cc2 <debug_printf+0xb2>
    }
    else{
        status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 8002cc2:	7ffb      	ldrb	r3, [r7, #31]
 8002cc4:	46c5      	mov	sp, r8
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002cd0:	b004      	add	sp, #16
 8002cd2:	4770      	bx	lr
 8002cd4:	200006f4 	.word	0x200006f4
 8002cd8:	0800f448 	.word	0x0800f448

08002cdc <FloatToUnsigned16bits>:
  * @brief Converts a float into a uint16_t
  * @param bytes: an array of bytes the same size as a float in bytes
  * @param float_value: the float value to convert into a uint16_t
  * @retval The 16 bit unsigned integer
  */
uint16_t FloatToUnsigned16bits(float float_value){
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t x = *((uint32_t*)&float_value);
 8002ce6:	1d3b      	adds	r3, r7, #4
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60fb      	str	r3, [r7, #12]
    return ((x>>16)&0x8000)|((((x&0x7f800000)-0x38000000)>>13)&0x7c00)|((x>>13)&0x03ff);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	0c1b      	lsrs	r3, r3, #16
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002cf6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 8002d02:	f103 4348 	add.w	r3, r3, #3355443200	; 0xc8000000
 8002d06:	0b5b      	lsrs	r3, r3, #13
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	4313      	orrs	r3, r2
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	0b5b      	lsrs	r3, r3, #13
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	4313      	orrs	r3, r2
 8002d22:	b29b      	uxth	r3, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <main>:
    disable_EPS_Batt_Heater_3();
}


int main(void)
{
 8002d30:	b5b0      	push	{r4, r5, r7, lr}
 8002d32:	b09c      	sub	sp, #112	; 0x70
 8002d34:	af00      	add	r7, sp, #0
    //SCB->VTOR = APPL_ADDRESS;

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8002d36:	f000 f921 	bl	8002f7c <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 8002d3a:	f005 fd6d 	bl	8008818 <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8002d3e:	f005 fded 	bl	800891c <MX_GPIO_Init>
    MX_I2C1_Init();
 8002d42:	f005 ff87 	bl	8008c54 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8002d46:	f005 fffd 	bl	8008d44 <MX_USART1_UART_Init>
    MX_UART4_Init();
 8002d4a:	f005 ffd1 	bl	8008cf0 <MX_UART4_Init>
    MX_USART6_UART_Init();
 8002d4e:	f006 f823 	bl	8008d98 <MX_USART6_UART_Init>
    MX_SDIO_SD_Init();
 8002d52:	f005 ffad 	bl	8008cb0 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 8002d56:	f006 f925 	bl	8008fa4 <MX_FATFS_Init>

    for (int i = 0; i < 5; i++) {
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d5e:	e016      	b.n	8002d8e <main+0x5e>
        GREEN_LED_ON();
 8002d60:	4b4a      	ldr	r3, [pc, #296]	; (8002e8c <main+0x15c>)
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	4a49      	ldr	r2, [pc, #292]	; (8002e8c <main+0x15c>)
 8002d66:	f043 0310 	orr.w	r3, r3, #16
 8002d6a:	6153      	str	r3, [r2, #20]
        HAL_Delay(500);
 8002d6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d70:	f000 f940 	bl	8002ff4 <HAL_Delay>
        GREEN_LED_OFF();
 8002d74:	4b45      	ldr	r3, [pc, #276]	; (8002e8c <main+0x15c>)
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	4a44      	ldr	r2, [pc, #272]	; (8002e8c <main+0x15c>)
 8002d7a:	f023 0310 	bic.w	r3, r3, #16
 8002d7e:	6153      	str	r3, [r2, #20]
        HAL_Delay(500);
 8002d80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d84:	f000 f936 	bl	8002ff4 <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 8002d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	dde5      	ble.n	8002d60 <main+0x30>
    }

    debug_printf("Hi");
 8002d94:	483e      	ldr	r0, [pc, #248]	; (8002e90 <main+0x160>)
 8002d96:	f7ff ff3b 	bl	8002c10 <debug_printf>

    osMutexDef(EPS_I2C_Mutex);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	66bb      	str	r3, [r7, #104]	; 0x68
    EPS_I2C_Mutex = osMutexCreate(osMutex(EPS_I2C_Mutex));
 8002d9e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002da2:	4618      	mov	r0, r3
 8002da4:	f006 fdcb 	bl	800993e <osMutexCreate>
 8002da8:	4603      	mov	r3, r0
 8002daa:	4a3a      	ldr	r2, [pc, #232]	; (8002e94 <main+0x164>)
 8002dac:	6013      	str	r3, [r2, #0]
    osMutexDef(UART_Mutex);
 8002dae:	2300      	movs	r3, #0
 8002db0:	667b      	str	r3, [r7, #100]	; 0x64
    UART_Mutex = osMutexCreate(osMutex(UART_Mutex));
 8002db2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002db6:	4618      	mov	r0, r3
 8002db8:	f006 fdc1 	bl	800993e <osMutexCreate>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	4a36      	ldr	r2, [pc, #216]	; (8002e98 <main+0x168>)
 8002dc0:	6013      	str	r3, [r2, #0]
    osMutexDef(Num_I2C_Errors_Mutex);
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	663b      	str	r3, [r7, #96]	; 0x60
    Num_I2C_Errors_Mutex = osMutexCreate(osMutex(Num_I2C_Errors_Mutex));
 8002dc6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f006 fdb7 	bl	800993e <osMutexCreate>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	4a32      	ldr	r2, [pc, #200]	; (8002e9c <main+0x16c>)
 8002dd4:	6013      	str	r3, [r2, #0]
    osMutexDef(Battery_Capacity_Mutex);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
    Battery_Capacity_Mutex = osMutexCreate(osMutex(Battery_Capacity_Mutex));
 8002dda:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002dde:	4618      	mov	r0, r3
 8002de0:	f006 fdad 	bl	800993e <osMutexCreate>
 8002de4:	4603      	mov	r3, r0
 8002de6:	4a2e      	ldr	r2, [pc, #184]	; (8002ea0 <main+0x170>)
 8002de8:	6013      	str	r3, [r2, #0]
    osMutexDef(ADCS_Active_Mutex);
 8002dea:	2300      	movs	r3, #0
 8002dec:	65bb      	str	r3, [r7, #88]	; 0x58
    ADCS_Active_Mutex = osMutexCreate(osMutex(ADCS_Active_Mutex));
 8002dee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002df2:	4618      	mov	r0, r3
 8002df4:	f006 fda3 	bl	800993e <osMutexCreate>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	4a2a      	ldr	r2, [pc, #168]	; (8002ea4 <main+0x174>)
 8002dfc:	6013      	str	r3, [r2, #0]
    osMutexDef(Low_Power_Mode_Mutex);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	657b      	str	r3, [r7, #84]	; 0x54
    Low_Power_Mode_Mutex = osMutexCreate(osMutex(Low_Power_Mode_Mutex));
 8002e02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e06:	4618      	mov	r0, r3
 8002e08:	f006 fd99 	bl	800993e <osMutexCreate>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4a26      	ldr	r2, [pc, #152]	; (8002ea8 <main+0x178>)
 8002e10:	6013      	str	r3, [r2, #0]

   // HAL_Delay(15000); // Delay for 15 seconds to allow ADCS to boot-up in application mode

    osThreadDef(myMainTask, Main_Task, osPriorityAboveNormal, 0, 512);
 8002e12:	4b26      	ldr	r3, [pc, #152]	; (8002eac <main+0x17c>)
 8002e14:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8002e18:	461d      	mov	r5, r3
 8002e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e1e:	682b      	ldr	r3, [r5, #0]
 8002e20:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myMainTask), NULL);
 8002e22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f006 fd4d 	bl	80098c8 <osThreadCreate>

    osThreadDef(myUHFTask, UHF_Task, osPriorityNormal, 0, 512);
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <main+0x180>)
 8002e30:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002e34:	461d      	mov	r5, r3
 8002e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e3a:	682b      	ldr	r3, [r5, #0]
 8002e3c:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myUHFTask), NULL);
 8002e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e42:	2100      	movs	r1, #0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f006 fd3f 	bl	80098c8 <osThreadCreate>


    osThreadDef(myADCSTask, ADCS_Task, osPriorityHigh, 0, 1024);
 8002e4a:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <main+0x184>)
 8002e4c:	f107 0418 	add.w	r4, r7, #24
 8002e50:	461d      	mov	r5, r3
 8002e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e56:	682b      	ldr	r3, [r5, #0]
 8002e58:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myADCSTask), NULL);
 8002e5a:	f107 0318 	add.w	r3, r7, #24
 8002e5e:	2100      	movs	r1, #0
 8002e60:	4618      	mov	r0, r3
 8002e62:	f006 fd31 	bl	80098c8 <osThreadCreate>

    osThreadDef(myBatteryCapacityTask, BatteryCapacity_Task, osPriorityRealtime, 0, 256);
 8002e66:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <main+0x188>)
 8002e68:	1d3c      	adds	r4, r7, #4
 8002e6a:	461d      	mov	r5, r3
 8002e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e70:	682b      	ldr	r3, [r5, #0]
 8002e72:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myBatteryCapacityTask), NULL);
 8002e74:	1d3b      	adds	r3, r7, #4
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f006 fd25 	bl	80098c8 <osThreadCreate>

    /* Start scheduler */
    osKernelStart();
 8002e7e:	f006 fd0c 	bl	800989a <osKernelStart>
 8002e82:	2300      	movs	r3, #0

    //GroundStationRxDataLength = 4;
    //HAL_UART_Receive_IT(&huart6, (uint8_t*) &GroundStationRxBuffer, 4);
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3770      	adds	r7, #112	; 0x70
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e8c:	40020800 	.word	0x40020800
 8002e90:	0800f4e0 	.word	0x0800f4e0
 8002e94:	20000228 	.word	0x20000228
 8002e98:	2000022c 	.word	0x2000022c
 8002e9c:	20000230 	.word	0x20000230
 8002ea0:	20000234 	.word	0x20000234
 8002ea4:	20000238 	.word	0x20000238
 8002ea8:	2000023c 	.word	0x2000023c
 8002eac:	0800f4e4 	.word	0x0800f4e4
 8002eb0:	0800f4f8 	.word	0x0800f4f8
 8002eb4:	0800f50c 	.word	0x0800f50c
 8002eb8:	0800f520 	.word	0x0800f520

08002ebc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a04      	ldr	r2, [pc, #16]	; (8002edc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d101      	bne.n	8002ed2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ece:	f000 f877 	bl	8002fc0 <HAL_IncTick>
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40010000 	.word	0x40010000

08002ee0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
#ifdef DEBUG_ENABLE
  while(1)
  {
      GREEN_LED_ON();
 8002ee4:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <Error_Handler+0x48>)
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	4a0f      	ldr	r2, [pc, #60]	; (8002f28 <Error_Handler+0x48>)
 8002eea:	f043 0310 	orr.w	r3, r3, #16
 8002eee:	6153      	str	r3, [r2, #20]
      AMBER_LED_ON();
 8002ef0:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <Error_Handler+0x48>)
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	4a0c      	ldr	r2, [pc, #48]	; (8002f28 <Error_Handler+0x48>)
 8002ef6:	f043 0320 	orr.w	r3, r3, #32
 8002efa:	6153      	str	r3, [r2, #20]
      HAL_Delay(2000);
 8002efc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f00:	f000 f878 	bl	8002ff4 <HAL_Delay>
      GREEN_LED_OFF();
 8002f04:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <Error_Handler+0x48>)
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	4a07      	ldr	r2, [pc, #28]	; (8002f28 <Error_Handler+0x48>)
 8002f0a:	f023 0310 	bic.w	r3, r3, #16
 8002f0e:	6153      	str	r3, [r2, #20]
      AMBER_LED_OFF();
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <Error_Handler+0x48>)
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <Error_Handler+0x48>)
 8002f16:	f023 0320 	bic.w	r3, r3, #32
 8002f1a:	6153      	str	r3, [r2, #20]
      HAL_Delay(2000);
 8002f1c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f20:	f000 f868 	bl	8002ff4 <HAL_Delay>
      GREEN_LED_ON();
 8002f24:	e7de      	b.n	8002ee4 <Error_Handler+0x4>
 8002f26:	bf00      	nop
 8002f28:	40020800 	.word	0x40020800

08002f2c <HAL_UART_RxCpltCallback>:
{
    Error_Handler();
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
    if(huart == &huart6){ //OBC connected to Payload/USB
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a0f      	ldr	r2, [pc, #60]	; (8002f74 <HAL_UART_RxCpltCallback+0x48>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d116      	bne.n	8002f6a <HAL_UART_RxCpltCallback+0x3e>
        if(handleCySatPacket(parseCySatPacket(GroundStationRxBuffer)) == -1){ //error occurred
 8002f3c:	f107 030c 	add.w	r3, r7, #12
 8002f40:	490d      	ldr	r1, [pc, #52]	; (8002f78 <HAL_UART_RxCpltCallback+0x4c>)
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd ffa2 	bl	8000e8c <parseCySatPacket>
 8002f48:	f107 030c 	add.w	r3, r7, #12
 8002f4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f50:	f7fe ff66 	bl	8001e20 <handleCySatPacket>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5a:	d101      	bne.n	8002f60 <HAL_UART_RxCpltCallback+0x34>
            sendErrorPacket();
 8002f5c:	f7fe ff3a 	bl	8001dd4 <sendErrorPacket>
        }
        HAL_UART_Receive_IT(&huart6,GroundStationRxBuffer, 4);
 8002f60:	2204      	movs	r2, #4
 8002f62:	4905      	ldr	r1, [pc, #20]	; (8002f78 <HAL_UART_RxCpltCallback+0x4c>)
 8002f64:	4803      	ldr	r0, [pc, #12]	; (8002f74 <HAL_UART_RxCpltCallback+0x48>)
 8002f66:	f004 f9ad 	bl	80072c4 <HAL_UART_Receive_IT>
    }
}
 8002f6a:	bf00      	nop
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200006f4 	.word	0x200006f4
 8002f78:	20000214 	.word	0x20000214

08002f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f80:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <HAL_Init+0x40>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a0d      	ldr	r2, [pc, #52]	; (8002fbc <HAL_Init+0x40>)
 8002f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_Init+0x40>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a0a      	ldr	r2, [pc, #40]	; (8002fbc <HAL_Init+0x40>)
 8002f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f98:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <HAL_Init+0x40>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a07      	ldr	r2, [pc, #28]	; (8002fbc <HAL_Init+0x40>)
 8002f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa4:	2003      	movs	r0, #3
 8002fa6:	f000 f90f 	bl	80031c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002faa:	200f      	movs	r0, #15
 8002fac:	f006 faee 	bl	800958c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002fb0:	f006 f910 	bl	80091d4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023c00 	.word	0x40023c00

08002fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  uwTick++;
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <HAL_IncTick+0x18>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	4a03      	ldr	r2, [pc, #12]	; (8002fd8 <HAL_IncTick+0x18>)
 8002fcc:	6013      	str	r3, [r2, #0]
}
 8002fce:	bf00      	nop
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	2000024c 	.word	0x2000024c

08002fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <HAL_GetTick+0x14>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	2000024c 	.word	0x2000024c

08002ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ffc:	f7ff ffee 	bl	8002fdc <HAL_GetTick>
 8003000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d002      	beq.n	8003014 <HAL_Delay+0x20>
  {
     wait++;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	3301      	adds	r3, #1
 8003012:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003014:	bf00      	nop
 8003016:	f7ff ffe1 	bl	8002fdc <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	429a      	cmp	r2, r3
 8003024:	d8f7      	bhi.n	8003016 <HAL_Delay+0x22>
  {
  }
}
 8003026:	bf00      	nop
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <NVIC_SetPriorityGrouping+0x44>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800304c:	4013      	ands	r3, r2
 800304e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800305c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003062:	4a04      	ldr	r2, [pc, #16]	; (8003074 <NVIC_SetPriorityGrouping+0x44>)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	60d3      	str	r3, [r2, #12]
}
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <NVIC_GetPriorityGrouping+0x18>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	0a1b      	lsrs	r3, r3, #8
 8003082:	f003 0307 	and.w	r3, r3, #7
}
 8003086:	4618      	mov	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	f003 021f 	and.w	r2, r3, #31
 80030a4:	4907      	ldr	r1, [pc, #28]	; (80030c4 <NVIC_EnableIRQ+0x30>)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	2001      	movs	r0, #1
 80030ae:	fa00 f202 	lsl.w	r2, r0, r2
 80030b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	e000e100 	.word	0xe000e100

080030c8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	6039      	str	r1, [r7, #0]
 80030d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80030d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	da0b      	bge.n	80030f4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	490c      	ldr	r1, [pc, #48]	; (8003114 <NVIC_SetPriority+0x4c>)
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	3b04      	subs	r3, #4
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	440b      	add	r3, r1
 80030f0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f2:	e009      	b.n	8003108 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	4907      	ldr	r1, [pc, #28]	; (8003118 <NVIC_SetPriority+0x50>)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	0112      	lsls	r2, r2, #4
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	440b      	add	r3, r1
 8003104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000ed00 	.word	0xe000ed00
 8003118:	e000e100 	.word	0xe000e100

0800311c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800311c:	b480      	push	{r7}
 800311e:	b089      	sub	sp, #36	; 0x24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f1c3 0307 	rsb	r3, r3, #7
 8003136:	2b04      	cmp	r3, #4
 8003138:	bf28      	it	cs
 800313a:	2304      	movcs	r3, #4
 800313c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3304      	adds	r3, #4
 8003142:	2b06      	cmp	r3, #6
 8003144:	d902      	bls.n	800314c <NVIC_EncodePriority+0x30>
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	3b03      	subs	r3, #3
 800314a:	e000      	b.n	800314e <NVIC_EncodePriority+0x32>
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003150:	f04f 32ff 	mov.w	r2, #4294967295
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43da      	mvns	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	401a      	ands	r2, r3
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003164:	f04f 31ff 	mov.w	r1, #4294967295
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	fa01 f303 	lsl.w	r3, r1, r3
 800316e:	43d9      	mvns	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003174:	4313      	orrs	r3, r2
         );
}
 8003176:	4618      	mov	r0, r3
 8003178:	3724      	adds	r7, #36	; 0x24
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3b01      	subs	r3, #1
 8003190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003194:	d301      	bcc.n	800319a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003196:	2301      	movs	r3, #1
 8003198:	e00f      	b.n	80031ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800319a:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <SysTick_Config+0x40>)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3b01      	subs	r3, #1
 80031a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031a2:	210f      	movs	r1, #15
 80031a4:	f04f 30ff 	mov.w	r0, #4294967295
 80031a8:	f7ff ff8e 	bl	80030c8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <SysTick_Config+0x40>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031b2:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <SysTick_Config+0x40>)
 80031b4:	2207      	movs	r2, #7
 80031b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	e000e010 	.word	0xe000e010

080031c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff ff2d 	bl	8003030 <NVIC_SetPriorityGrouping>
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031de:	b580      	push	{r7, lr}
 80031e0:	b086      	sub	sp, #24
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	4603      	mov	r3, r0
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
 80031ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031f0:	f7ff ff42 	bl	8003078 <NVIC_GetPriorityGrouping>
 80031f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68b9      	ldr	r1, [r7, #8]
 80031fa:	6978      	ldr	r0, [r7, #20]
 80031fc:	f7ff ff8e 	bl	800311c <NVIC_EncodePriority>
 8003200:	4602      	mov	r2, r0
 8003202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff ff5d 	bl	80030c8 <NVIC_SetPriority>
}
 800320e:	bf00      	nop
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	4603      	mov	r3, r0
 800321e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ff35 	bl	8003094 <NVIC_EnableIRQ>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff ffa2 	bl	8003184 <SysTick_Config>
 8003240:	4603      	mov	r3, r0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b04      	cmp	r3, #4
 8003258:	d106      	bne.n	8003268 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a08      	ldr	r2, [pc, #32]	; (8003280 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003260:	f043 0304 	orr.w	r3, r3, #4
 8003264:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8003266:	e005      	b.n	8003274 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a04      	ldr	r2, [pc, #16]	; (8003280 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800326e:	f023 0304 	bic.w	r3, r3, #4
 8003272:	6013      	str	r3, [r2, #0]
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	e000e010 	.word	0xe000e010

08003284 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d004      	beq.n	80032a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2280      	movs	r2, #128	; 0x80
 800329c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e00c      	b.n	80032bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2205      	movs	r2, #5
 80032a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0201 	bic.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032d4:	4b8e      	ldr	r3, [pc, #568]	; (8003510 <HAL_DMA_IRQHandler+0x248>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a8e      	ldr	r2, [pc, #568]	; (8003514 <HAL_DMA_IRQHandler+0x24c>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	0a9b      	lsrs	r3, r3, #10
 80032e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f2:	2208      	movs	r2, #8
 80032f4:	409a      	lsls	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01a      	beq.n	8003334 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d013      	beq.n	8003334 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0204 	bic.w	r2, r2, #4
 800331a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003320:	2208      	movs	r2, #8
 8003322:	409a      	lsls	r2, r3
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332c:	f043 0201 	orr.w	r2, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	4a77      	ldr	r2, [pc, #476]	; (8003518 <HAL_DMA_IRQHandler+0x250>)
 800333a:	409a      	lsls	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d012      	beq.n	800336a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003356:	4a70      	ldr	r2, [pc, #448]	; (8003518 <HAL_DMA_IRQHandler+0x250>)
 8003358:	409a      	lsls	r2, r3
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	f043 0202 	orr.w	r2, r3, #2
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336e:	4a6b      	ldr	r2, [pc, #428]	; (800351c <HAL_DMA_IRQHandler+0x254>)
 8003370:	409a      	lsls	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4013      	ands	r3, r2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d012      	beq.n	80033a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00b      	beq.n	80033a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338c:	4a63      	ldr	r2, [pc, #396]	; (800351c <HAL_DMA_IRQHandler+0x254>)
 800338e:	409a      	lsls	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	f043 0204 	orr.w	r2, r3, #4
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a4:	2210      	movs	r2, #16
 80033a6:	409a      	lsls	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d043      	beq.n	8003438 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d03c      	beq.n	8003438 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c2:	2210      	movs	r2, #16
 80033c4:	409a      	lsls	r2, r3
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d018      	beq.n	800340a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d108      	bne.n	80033f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d024      	beq.n	8003438 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	4798      	blx	r3
 80033f6:	e01f      	b.n	8003438 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01b      	beq.n	8003438 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	4798      	blx	r3
 8003408:	e016      	b.n	8003438 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d107      	bne.n	8003428 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0208 	bic.w	r2, r2, #8
 8003426:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	2220      	movs	r2, #32
 800343e:	409a      	lsls	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8093 	beq.w	8003570 <HAL_DMA_IRQHandler+0x2a8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 808b 	beq.w	8003570 <HAL_DMA_IRQHandler+0x2a8>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345e:	2220      	movs	r2, #32
 8003460:	409a      	lsls	r2, r3
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b05      	cmp	r3, #5
 8003470:	d137      	bne.n	80034e2 <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0216 	bic.w	r2, r2, #22
 8003480:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695a      	ldr	r2, [r3, #20]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003490:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d103      	bne.n	80034a2 <HAL_DMA_IRQHandler+0x1da>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d007      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0208 	bic.w	r2, r2, #8
 80034b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b6:	223f      	movs	r2, #63	; 0x3f
 80034b8:	409a      	lsls	r2, r3
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 8082 	beq.w	80035dc <HAL_DMA_IRQHandler+0x314>
        {
          hdma->XferAbortCallback(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	4798      	blx	r3
        }
        return;
 80034e0:	e07c      	b.n	80035dc <HAL_DMA_IRQHandler+0x314>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <HAL_DMA_IRQHandler+0x26a>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d110      	bne.n	8003520 <HAL_DMA_IRQHandler+0x258>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	2b00      	cmp	r3, #0
 8003504:	d034      	beq.n	8003570 <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	4798      	blx	r3
 800350e:	e02f      	b.n	8003570 <HAL_DMA_IRQHandler+0x2a8>
 8003510:	20000014 	.word	0x20000014
 8003514:	1b4e81b5 	.word	0x1b4e81b5
 8003518:	00800001 	.word	0x00800001
 800351c:	00800004 	.word	0x00800004
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003524:	2b00      	cmp	r3, #0
 8003526:	d023      	beq.n	8003570 <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
 8003530:	e01e      	b.n	8003570 <HAL_DMA_IRQHandler+0x2a8>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10f      	bne.n	8003560 <HAL_DMA_IRQHandler+0x298>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0210 	bic.w	r2, r2, #16
 800354e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_DMA_IRQHandler+0x2a8>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003574:	2b00      	cmp	r3, #0
 8003576:	d032      	beq.n	80035de <HAL_DMA_IRQHandler+0x316>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	d022      	beq.n	80035ca <HAL_DMA_IRQHandler+0x302>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2205      	movs	r2, #5
 8003588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	3301      	adds	r3, #1
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d307      	bcc.n	80035b8 <HAL_DMA_IRQHandler+0x2f0>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f2      	bne.n	800359c <HAL_DMA_IRQHandler+0x2d4>
 80035b6:	e000      	b.n	80035ba <HAL_DMA_IRQHandler+0x2f2>
          break;
 80035b8:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <HAL_DMA_IRQHandler+0x316>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	4798      	blx	r3
 80035da:	e000      	b.n	80035de <HAL_DMA_IRQHandler+0x316>
        return;
 80035dc:	bf00      	nop
    }
  }
}
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b089      	sub	sp, #36	; 0x24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
 80035fe:	e177      	b.n	80038f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003600:	2201      	movs	r2, #1
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4013      	ands	r3, r2
 8003612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	429a      	cmp	r2, r3
 800361a:	f040 8166 	bne.w	80038ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d003      	beq.n	800362e <HAL_GPIO_Init+0x4a>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b12      	cmp	r3, #18
 800362c:	d123      	bne.n	8003676 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	08da      	lsrs	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3208      	adds	r2, #8
 8003636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800363a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	220f      	movs	r2, #15
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	691a      	ldr	r2, [r3, #16]
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	08da      	lsrs	r2, r3, #3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3208      	adds	r2, #8
 8003670:	69b9      	ldr	r1, [r7, #24]
 8003672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	2203      	movs	r2, #3
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4013      	ands	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 0203 	and.w	r2, r3, #3
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d00b      	beq.n	80036ca <HAL_GPIO_Init+0xe6>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d007      	beq.n	80036ca <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036be:	2b11      	cmp	r3, #17
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b12      	cmp	r3, #18
 80036c8:	d130      	bne.n	800372c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	2203      	movs	r2, #3
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4013      	ands	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003700:	2201      	movs	r2, #1
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f003 0201 	and.w	r2, r3, #1
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4313      	orrs	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	2203      	movs	r2, #3
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 80c0 	beq.w	80038ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	4b66      	ldr	r3, [pc, #408]	; (8003908 <HAL_GPIO_Init+0x324>)
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	4a65      	ldr	r2, [pc, #404]	; (8003908 <HAL_GPIO_Init+0x324>)
 8003774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003778:	6453      	str	r3, [r2, #68]	; 0x44
 800377a:	4b63      	ldr	r3, [pc, #396]	; (8003908 <HAL_GPIO_Init+0x324>)
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003786:	4a61      	ldr	r2, [pc, #388]	; (800390c <HAL_GPIO_Init+0x328>)
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	089b      	lsrs	r3, r3, #2
 800378c:	3302      	adds	r3, #2
 800378e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	220f      	movs	r2, #15
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a58      	ldr	r2, [pc, #352]	; (8003910 <HAL_GPIO_Init+0x32c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d037      	beq.n	8003822 <HAL_GPIO_Init+0x23e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a57      	ldr	r2, [pc, #348]	; (8003914 <HAL_GPIO_Init+0x330>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d031      	beq.n	800381e <HAL_GPIO_Init+0x23a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a56      	ldr	r2, [pc, #344]	; (8003918 <HAL_GPIO_Init+0x334>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d02b      	beq.n	800381a <HAL_GPIO_Init+0x236>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a55      	ldr	r2, [pc, #340]	; (800391c <HAL_GPIO_Init+0x338>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d025      	beq.n	8003816 <HAL_GPIO_Init+0x232>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a54      	ldr	r2, [pc, #336]	; (8003920 <HAL_GPIO_Init+0x33c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d01f      	beq.n	8003812 <HAL_GPIO_Init+0x22e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a53      	ldr	r2, [pc, #332]	; (8003924 <HAL_GPIO_Init+0x340>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d019      	beq.n	800380e <HAL_GPIO_Init+0x22a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a52      	ldr	r2, [pc, #328]	; (8003928 <HAL_GPIO_Init+0x344>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <HAL_GPIO_Init+0x226>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a51      	ldr	r2, [pc, #324]	; (800392c <HAL_GPIO_Init+0x348>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00d      	beq.n	8003806 <HAL_GPIO_Init+0x222>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a50      	ldr	r2, [pc, #320]	; (8003930 <HAL_GPIO_Init+0x34c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d007      	beq.n	8003802 <HAL_GPIO_Init+0x21e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a4f      	ldr	r2, [pc, #316]	; (8003934 <HAL_GPIO_Init+0x350>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <HAL_GPIO_Init+0x21a>
 80037fa:	2309      	movs	r3, #9
 80037fc:	e012      	b.n	8003824 <HAL_GPIO_Init+0x240>
 80037fe:	230a      	movs	r3, #10
 8003800:	e010      	b.n	8003824 <HAL_GPIO_Init+0x240>
 8003802:	2308      	movs	r3, #8
 8003804:	e00e      	b.n	8003824 <HAL_GPIO_Init+0x240>
 8003806:	2307      	movs	r3, #7
 8003808:	e00c      	b.n	8003824 <HAL_GPIO_Init+0x240>
 800380a:	2306      	movs	r3, #6
 800380c:	e00a      	b.n	8003824 <HAL_GPIO_Init+0x240>
 800380e:	2305      	movs	r3, #5
 8003810:	e008      	b.n	8003824 <HAL_GPIO_Init+0x240>
 8003812:	2304      	movs	r3, #4
 8003814:	e006      	b.n	8003824 <HAL_GPIO_Init+0x240>
 8003816:	2303      	movs	r3, #3
 8003818:	e004      	b.n	8003824 <HAL_GPIO_Init+0x240>
 800381a:	2302      	movs	r3, #2
 800381c:	e002      	b.n	8003824 <HAL_GPIO_Init+0x240>
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <HAL_GPIO_Init+0x240>
 8003822:	2300      	movs	r3, #0
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	f002 0203 	and.w	r2, r2, #3
 800382a:	0092      	lsls	r2, r2, #2
 800382c:	4093      	lsls	r3, r2
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003834:	4935      	ldr	r1, [pc, #212]	; (800390c <HAL_GPIO_Init+0x328>)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	089b      	lsrs	r3, r3, #2
 800383a:	3302      	adds	r3, #2
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003842:	4b3d      	ldr	r3, [pc, #244]	; (8003938 <HAL_GPIO_Init+0x354>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003866:	4a34      	ldr	r2, [pc, #208]	; (8003938 <HAL_GPIO_Init+0x354>)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800386c:	4b32      	ldr	r3, [pc, #200]	; (8003938 <HAL_GPIO_Init+0x354>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003890:	4a29      	ldr	r2, [pc, #164]	; (8003938 <HAL_GPIO_Init+0x354>)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003896:	4b28      	ldr	r3, [pc, #160]	; (8003938 <HAL_GPIO_Init+0x354>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ba:	4a1f      	ldr	r2, [pc, #124]	; (8003938 <HAL_GPIO_Init+0x354>)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038c0:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <HAL_GPIO_Init+0x354>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038e4:	4a14      	ldr	r2, [pc, #80]	; (8003938 <HAL_GPIO_Init+0x354>)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3301      	adds	r3, #1
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2b0f      	cmp	r3, #15
 80038f4:	f67f ae84 	bls.w	8003600 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	3724      	adds	r7, #36	; 0x24
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40023800 	.word	0x40023800
 800390c:	40013800 	.word	0x40013800
 8003910:	40020000 	.word	0x40020000
 8003914:	40020400 	.word	0x40020400
 8003918:	40020800 	.word	0x40020800
 800391c:	40020c00 	.word	0x40020c00
 8003920:	40021000 	.word	0x40021000
 8003924:	40021400 	.word	0x40021400
 8003928:	40021800 	.word	0x40021800
 800392c:	40021c00 	.word	0x40021c00
 8003930:	40022000 	.word	0x40022000
 8003934:	40022400 	.word	0x40022400
 8003938:	40013c00 	.word	0x40013c00

0800393c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	807b      	strh	r3, [r7, #2]
 8003948:	4613      	mov	r3, r2
 800394a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800394c:	787b      	ldrb	r3, [r7, #1]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003952:	887a      	ldrh	r2, [r7, #2]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003958:	e003      	b.n	8003962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800395a:	887b      	ldrh	r3, [r7, #2]
 800395c:	041a      	lsls	r2, r3, #16
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	619a      	str	r2, [r3, #24]
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e0c9      	b.n	8003b1e <HAL_I2C_Init+0x1ae>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f005 fc4a 	bl	8009238 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2224      	movs	r2, #36	; 0x24
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0201 	bic.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039bc:	f001 fae6 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 80039c0:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	4a58      	ldr	r2, [pc, #352]	; (8003b28 <HAL_I2C_Init+0x1b8>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	0c9b      	lsrs	r3, r3, #18
 80039cc:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4a54      	ldr	r2, [pc, #336]	; (8003b2c <HAL_I2C_Init+0x1bc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d802      	bhi.n	80039e6 <HAL_I2C_Init+0x76>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	3301      	adds	r3, #1
 80039e4:	e009      	b.n	80039fa <HAL_I2C_Init+0x8a>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039ec:	fb02 f303 	mul.w	r3, r2, r3
 80039f0:	4a4f      	ldr	r2, [pc, #316]	; (8003b30 <HAL_I2C_Init+0x1c0>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	099b      	lsrs	r3, r3, #6
 80039f8:	3301      	adds	r3, #1
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4a49      	ldr	r2, [pc, #292]	; (8003b2c <HAL_I2C_Init+0x1bc>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d813      	bhi.n	8003a32 <HAL_I2C_Init+0xc2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a16:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d006      	beq.n	8003a2e <HAL_I2C_Init+0xbe>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	e045      	b.n	8003aba <HAL_I2C_Init+0x14a>
 8003a2e:	2304      	movs	r3, #4
 8003a30:	e043      	b.n	8003aba <HAL_I2C_Init+0x14a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10f      	bne.n	8003a5a <HAL_I2C_Init+0xea>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	4413      	add	r3, r2
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	bf0c      	ite	eq
 8003a52:	2301      	moveq	r3, #1
 8003a54:	2300      	movne	r3, #0
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	e010      	b.n	8003a7c <HAL_I2C_Init+0x10c>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	009a      	lsls	r2, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bf0c      	ite	eq
 8003a76:	2301      	moveq	r3, #1
 8003a78:	2300      	movne	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_I2C_Init+0x114>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e01a      	b.n	8003aba <HAL_I2C_Init+0x14a>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <HAL_I2C_Init+0x132>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aa0:	e00b      	b.n	8003aba <HAL_I2C_Init+0x14a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	009a      	lsls	r2, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69d9      	ldr	r1, [r3, #28]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1a      	ldr	r2, [r3, #32]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6919      	ldr	r1, [r3, #16]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6959      	ldr	r1, [r3, #20]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699a      	ldr	r2, [r3, #24]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	431bde83 	.word	0x431bde83
 8003b2c:	000186a0 	.word	0x000186a0
 8003b30:	10624dd3 	.word	0x10624dd3

08003b34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	460b      	mov	r3, r1
 8003b42:	817b      	strh	r3, [r7, #10]
 8003b44:	4613      	mov	r3, r2
 8003b46:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b4c:	f7ff fa46 	bl	8002fdc <HAL_GetTick>
 8003b50:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	f040 80ee 	bne.w	8003d3c <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	2319      	movs	r3, #25
 8003b66:	2201      	movs	r2, #1
 8003b68:	4977      	ldr	r1, [pc, #476]	; (8003d48 <HAL_I2C_Master_Transmit+0x214>)
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fc6c 	bl	8004448 <I2C_WaitOnFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8003b76:	2302      	movs	r3, #2
 8003b78:	e0e1      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_I2C_Master_Transmit+0x54>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e0da      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x20a>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d007      	beq.n	8003bae <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0201 	orr.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bbc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2221      	movs	r2, #33	; 0x21
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2210      	movs	r2, #16
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	893a      	ldrh	r2, [r7, #8]
 8003bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a5a      	ldr	r2, [pc, #360]	; (8003d4c <HAL_I2C_Master_Transmit+0x218>)
 8003be4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bf0:	8979      	ldrh	r1, [r7, #10]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	6a3a      	ldr	r2, [r7, #32]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fadc 	bl	80041b4 <I2C_MasterRequestWrite>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00f      	beq.n	8003c22 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d105      	bne.n	8003c16 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e093      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e08d      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8003c38:	e066      	b.n	8003d08 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	6a39      	ldr	r1, [r7, #32]
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 fcc1 	bl	80045c6 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00f      	beq.n	8003c6a <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d109      	bne.n	8003c66 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c60:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e06b      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e069      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	1c59      	adds	r1, r3, #1
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	6251      	str	r1, [r2, #36]	; 0x24
 8003c74:	781a      	ldrb	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d119      	bne.n	8003cd8 <HAL_I2C_Master_Transmit+0x1a4>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d015      	beq.n	8003cd8 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	1c59      	adds	r1, r3, #1
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	6251      	str	r1, [r2, #36]	; 0x24
 8003cb6:	781a      	ldrb	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	6a39      	ldr	r1, [r7, #32]
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 fcaf 	bl	8004640 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00f      	beq.n	8003d08 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d109      	bne.n	8003d04 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfe:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e01c      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e01a      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d194      	bne.n	8003c3a <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e000      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8003d3c:	2302      	movs	r3, #2
  }
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	00100002 	.word	0x00100002
 8003d4c:	ffff0000 	.word	0xffff0000

08003d50 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08c      	sub	sp, #48	; 0x30
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	817b      	strh	r3, [r7, #10]
 8003d60:	4613      	mov	r3, r2
 8003d62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d68:	f7ff f938 	bl	8002fdc <HAL_GetTick>
 8003d6c:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	f040 8215 	bne.w	80041a6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	2319      	movs	r3, #25
 8003d82:	2201      	movs	r2, #1
 8003d84:	4985      	ldr	r1, [pc, #532]	; (8003f9c <HAL_I2C_Master_Receive+0x24c>)
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 fb5e 	bl	8004448 <I2C_WaitOnFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003d92:	2302      	movs	r3, #2
 8003d94:	e208      	b.n	80041a8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_I2C_Master_Receive+0x54>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e201      	b.n	80041a8 <HAL_I2C_Master_Receive+0x458>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d007      	beq.n	8003dca <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0201 	orr.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2222      	movs	r2, #34	; 0x22
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2210      	movs	r2, #16
 8003de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	893a      	ldrh	r2, [r7, #8]
 8003dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4a68      	ldr	r2, [pc, #416]	; (8003fa0 <HAL_I2C_Master_Receive+0x250>)
 8003e00:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e0c:	8979      	ldrh	r1, [r7, #10]
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fa50 	bl	80042b8 <I2C_MasterRequestRead>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00f      	beq.n	8003e3e <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d105      	bne.n	8003e32 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e1ba      	b.n	80041a8 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e1b4      	b.n	80041a8 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d113      	bne.n	8003e6e <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e46:	2300      	movs	r3, #0
 8003e48:	623b      	str	r3, [r7, #32]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	623b      	str	r3, [r7, #32]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	623b      	str	r3, [r7, #32]
 8003e5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	e188      	b.n	8004180 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d11b      	bne.n	8003eae <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e86:	2300      	movs	r3, #0
 8003e88:	61fb      	str	r3, [r7, #28]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	61fb      	str	r3, [r7, #28]
 8003e9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	e168      	b.n	8004180 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d11b      	bne.n	8003eee <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ed4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	e148      	b.n	8004180 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003efc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8003f14:	e134      	b.n	8004180 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	f200 80eb 	bhi.w	80040f6 <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d127      	bne.n	8003f78 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8003f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 fbc4 	bl	80046ba <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d101      	bne.n	8003f44 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e131      	b.n	80041a8 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e12f      	b.n	80041a8 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6918      	ldr	r0, [r3, #16]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	1c59      	adds	r1, r3, #1
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	6251      	str	r1, [r2, #36]	; 0x24
 8003f58:	b2c2      	uxtb	r2, r0
 8003f5a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f76:	e103      	b.n	8004180 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d14a      	bne.n	8004016 <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f86:	2200      	movs	r2, #0
 8003f88:	4906      	ldr	r1, [pc, #24]	; (8003fa4 <HAL_I2C_Master_Receive+0x254>)
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 fa5c 	bl	8004448 <I2C_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e106      	b.n	80041a8 <HAL_I2C_Master_Receive+0x458>
 8003f9a:	bf00      	nop
 8003f9c:	00100002 	.word	0x00100002
 8003fa0:	ffff0000 	.word	0xffff0000
 8003fa4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6918      	ldr	r0, [r3, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	1c59      	adds	r1, r3, #1
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	6251      	str	r1, [r2, #36]	; 0x24
 8003fc8:	b2c2      	uxtb	r2, r0
 8003fca:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6918      	ldr	r0, [r3, #16]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	1c59      	adds	r1, r3, #1
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	6251      	str	r1, [r2, #36]	; 0x24
 8003ff6:	b2c2      	uxtb	r2, r0
 8003ff8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004014:	e0b4      	b.n	8004180 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401c:	2200      	movs	r2, #0
 800401e:	4964      	ldr	r1, [pc, #400]	; (80041b0 <HAL_I2C_Master_Receive+0x460>)
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 fa11 	bl	8004448 <I2C_WaitOnFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e0bb      	b.n	80041a8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6918      	ldr	r0, [r3, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	1c59      	adds	r1, r3, #1
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	6251      	str	r1, [r2, #36]	; 0x24
 8004050:	b2c2      	uxtb	r2, r0
 8004052:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004074:	2200      	movs	r2, #0
 8004076:	494e      	ldr	r1, [pc, #312]	; (80041b0 <HAL_I2C_Master_Receive+0x460>)
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f9e5 	bl	8004448 <I2C_WaitOnFlagUntilTimeout>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e08f      	b.n	80041a8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004096:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6918      	ldr	r0, [r3, #16]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	1c59      	adds	r1, r3, #1
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	6251      	str	r1, [r2, #36]	; 0x24
 80040a8:	b2c2      	uxtb	r2, r0
 80040aa:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6918      	ldr	r0, [r3, #16]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	1c59      	adds	r1, r3, #1
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	6251      	str	r1, [r2, #36]	; 0x24
 80040d6:	b2c2      	uxtb	r2, r0
 80040d8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040f4:	e044      	b.n	8004180 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80040f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 fadd 	bl	80046ba <I2C_WaitOnRXNEFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	2b20      	cmp	r3, #32
 800410c:	d101      	bne.n	8004112 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e04a      	b.n	80041a8 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e048      	b.n	80041a8 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6918      	ldr	r0, [r3, #16]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	1c59      	adds	r1, r3, #1
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	6251      	str	r1, [r2, #36]	; 0x24
 8004126:	b2c2      	uxtb	r2, r0
 8004128:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b04      	cmp	r3, #4
 8004150:	d116      	bne.n	8004180 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6918      	ldr	r0, [r3, #16]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	1c59      	adds	r1, r3, #1
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	6251      	str	r1, [r2, #36]	; 0x24
 8004162:	b2c2      	uxtb	r2, r0
 8004164:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	f47f aec6 	bne.w	8003f16 <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	e000      	b.n	80041a8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80041a6:	2302      	movs	r3, #2
  }
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3728      	adds	r7, #40	; 0x28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	00010004 	.word	0x00010004

080041b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	607a      	str	r2, [r7, #4]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	460b      	mov	r3, r1
 80041c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d006      	beq.n	80041de <I2C_MasterRequestWrite+0x2a>
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d003      	beq.n	80041de <I2C_MasterRequestWrite+0x2a>
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041dc:	d108      	bne.n	80041f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	e00b      	b.n	8004208 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	2b12      	cmp	r3, #18
 80041f6:	d107      	bne.n	8004208 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004206:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f917 	bl	8004448 <I2C_WaitOnFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e041      	b.n	80042a8 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800422c:	d108      	bne.n	8004240 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800422e:	897b      	ldrh	r3, [r7, #10]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	461a      	mov	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800423c:	611a      	str	r2, [r3, #16]
 800423e:	e021      	b.n	8004284 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004240:	897b      	ldrh	r3, [r7, #10]
 8004242:	11db      	asrs	r3, r3, #7
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f003 0306 	and.w	r3, r3, #6
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f063 030f 	orn	r3, r3, #15
 8004250:	b2da      	uxtb	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	4914      	ldr	r1, [pc, #80]	; (80042b0 <I2C_MasterRequestWrite+0xfc>)
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 f943 	bl	80044ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d007      	beq.n	800427a <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	2b04      	cmp	r3, #4
 8004270:	d101      	bne.n	8004276 <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e018      	b.n	80042a8 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e016      	b.n	80042a8 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800427a:	897b      	ldrh	r3, [r7, #10]
 800427c:	b2da      	uxtb	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	490a      	ldr	r1, [pc, #40]	; (80042b4 <I2C_MasterRequestWrite+0x100>)
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f92d 	bl	80044ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d007      	beq.n	80042a6 <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	2b04      	cmp	r3, #4
 800429c:	d101      	bne.n	80042a2 <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e002      	b.n	80042a8 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e000      	b.n	80042a8 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	00010008 	.word	0x00010008
 80042b4:	00010002 	.word	0x00010002

080042b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	607a      	str	r2, [r7, #4]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	460b      	mov	r3, r1
 80042c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d006      	beq.n	80042f2 <I2C_MasterRequestRead+0x3a>
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d003      	beq.n	80042f2 <I2C_MasterRequestRead+0x3a>
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042f0:	d108      	bne.n	8004304 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	e00b      	b.n	800431c <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	2b11      	cmp	r3, #17
 800430a:	d107      	bne.n	800431c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800431a:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f88d 	bl	8004448 <I2C_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e07f      	b.n	8004438 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004340:	d108      	bne.n	8004354 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004342:	897b      	ldrh	r3, [r7, #10]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	b2da      	uxtb	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	611a      	str	r2, [r3, #16]
 8004352:	e05f      	b.n	8004414 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004354:	897b      	ldrh	r3, [r7, #10]
 8004356:	11db      	asrs	r3, r3, #7
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f003 0306 	and.w	r3, r3, #6
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f063 030f 	orn	r3, r3, #15
 8004364:	b2da      	uxtb	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	4933      	ldr	r1, [pc, #204]	; (8004440 <I2C_MasterRequestRead+0x188>)
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f8b9 	bl	80044ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	2b04      	cmp	r3, #4
 8004384:	d101      	bne.n	800438a <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e056      	b.n	8004438 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e054      	b.n	8004438 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800438e:	897b      	ldrh	r3, [r7, #10]
 8004390:	b2da      	uxtb	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	4929      	ldr	r1, [pc, #164]	; (8004444 <I2C_MasterRequestRead+0x18c>)
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 f8a3 	bl	80044ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d007      	beq.n	80043ba <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d101      	bne.n	80043b6 <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e040      	b.n	8004438 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e03e      	b.n	8004438 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ba:	2300      	movs	r3, #0
 80043bc:	613b      	str	r3, [r7, #16]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f82b 	bl	8004448 <I2C_WaitOnFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e01d      	b.n	8004438 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80043fc:	897b      	ldrh	r3, [r7, #10]
 80043fe:	11db      	asrs	r3, r3, #7
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f003 0306 	and.w	r3, r3, #6
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f063 030e 	orn	r3, r3, #14
 800440c:	b2da      	uxtb	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	490a      	ldr	r1, [pc, #40]	; (8004444 <I2C_MasterRequestRead+0x18c>)
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f865 	bl	80044ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d007      	beq.n	8004436 <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	2b04      	cmp	r3, #4
 800442c:	d101      	bne.n	8004432 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e002      	b.n	8004438 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e000      	b.n	8004438 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	00010008 	.word	0x00010008
 8004444:	00010002 	.word	0x00010002

08004448 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	4613      	mov	r3, r2
 8004456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8004458:	e01f      	b.n	800449a <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d01b      	beq.n	800449a <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d007      	beq.n	8004478 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004468:	f7fe fdb8 	bl	8002fdc <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d210      	bcs.n	800449a <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e023      	b.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	0c1b      	lsrs	r3, r3, #16
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d10d      	bne.n	80044c0 <I2C_WaitOnFlagUntilTimeout+0x78>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	43da      	mvns	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4013      	ands	r3, r2
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	bf0c      	ite	eq
 80044b6:	2301      	moveq	r3, #1
 80044b8:	2300      	movne	r3, #0
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	e00c      	b.n	80044da <I2C_WaitOnFlagUntilTimeout+0x92>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	43da      	mvns	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4013      	ands	r3, r2
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bf0c      	ite	eq
 80044d2:	2301      	moveq	r3, #1
 80044d4:	2300      	movne	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	461a      	mov	r2, r3
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d0bc      	beq.n	800445a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044f8:	e040      	b.n	800457c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004508:	d11c      	bne.n	8004544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004518:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004522:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2204      	movs	r2, #4
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e03c      	b.n	80045be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454a:	d017      	beq.n	800457c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8004552:	f7fe fd43 	bl	8002fdc <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	429a      	cmp	r2, r3
 8004560:	d20c      	bcs.n	800457c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e020      	b.n	80045be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	0c1b      	lsrs	r3, r3, #16
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b01      	cmp	r3, #1
 8004584:	d10c      	bne.n	80045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	43da      	mvns	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	4013      	ands	r3, r2
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	bf14      	ite	ne
 8004598:	2301      	movne	r3, #1
 800459a:	2300      	moveq	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	e00b      	b.n	80045b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	43da      	mvns	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4013      	ands	r3, r2
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bf14      	ite	ne
 80045b2:	2301      	movne	r3, #1
 80045b4:	2300      	moveq	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d19e      	bne.n	80044fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045d2:	e029      	b.n	8004628 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f8ba 	bl	800474e <I2C_IsAcknowledgeFailed>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e029      	b.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ea:	d01d      	beq.n	8004628 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d007      	beq.n	8004602 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045f2:	f7fe fcf3 	bl	8002fdc <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d212      	bcs.n	8004628 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f043 0220 	orr.w	r2, r3, #32
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e007      	b.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004632:	2b80      	cmp	r3, #128	; 0x80
 8004634:	d1ce      	bne.n	80045d4 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800464c:	e029      	b.n	80046a2 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 f87d 	bl	800474e <I2C_IsAcknowledgeFailed>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e029      	b.n	80046b2 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004664:	d01d      	beq.n	80046a2 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d007      	beq.n	800467c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800466c:	f7fe fcb6 	bl	8002fdc <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	429a      	cmp	r2, r3
 800467a:	d212      	bcs.n	80046a2 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	f043 0220 	orr.w	r2, r3, #32
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e007      	b.n	80046b2 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d1ce      	bne.n	800464e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b084      	sub	sp, #16
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046c6:	e036      	b.n	8004736 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f003 0310 	and.w	r3, r3, #16
 80046d2:	2b10      	cmp	r3, #16
 80046d4:	d114      	bne.n	8004700 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f06f 0210 	mvn.w	r2, #16
 80046de:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e022      	b.n	8004746 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d007      	beq.n	8004716 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8004706:	f7fe fc69 	bl	8002fdc <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	429a      	cmp	r2, r3
 8004714:	d20f      	bcs.n	8004736 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f043 0220 	orr.w	r2, r3, #32
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e007      	b.n	8004746 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004740:	2b40      	cmp	r3, #64	; 0x40
 8004742:	d1c1      	bne.n	80046c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004764:	d114      	bne.n	8004790 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800476e:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2204      	movs	r2, #4
 8004774:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08e      	sub	sp, #56	; 0x38
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 80047a8:	2300      	movs	r3, #0
 80047aa:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d075      	beq.n	80048a4 <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047b8:	4b92      	ldr	r3, [pc, #584]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 030c 	and.w	r3, r3, #12
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d00c      	beq.n	80047de <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047c4:	4b8f      	ldr	r3, [pc, #572]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d112      	bne.n	80047f6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047d0:	4b8c      	ldr	r3, [pc, #560]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047dc:	d10b      	bne.n	80047f6 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047de:	4b89      	ldr	r3, [pc, #548]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d05b      	beq.n	80048a2 <HAL_RCC_OscConfig+0x102>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d157      	bne.n	80048a2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e222      	b.n	8004c3c <HAL_RCC_OscConfig+0x49c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fe:	d106      	bne.n	800480e <HAL_RCC_OscConfig+0x6e>
 8004800:	4b80      	ldr	r3, [pc, #512]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a7f      	ldr	r2, [pc, #508]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 8004806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	e01d      	b.n	800484a <HAL_RCC_OscConfig+0xaa>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004816:	d10c      	bne.n	8004832 <HAL_RCC_OscConfig+0x92>
 8004818:	4b7a      	ldr	r3, [pc, #488]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a79      	ldr	r2, [pc, #484]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 800481e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	4b77      	ldr	r3, [pc, #476]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a76      	ldr	r2, [pc, #472]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 800482a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	e00b      	b.n	800484a <HAL_RCC_OscConfig+0xaa>
 8004832:	4b74      	ldr	r3, [pc, #464]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a73      	ldr	r2, [pc, #460]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 8004838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	4b71      	ldr	r3, [pc, #452]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a70      	ldr	r2, [pc, #448]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 8004844:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004848:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d013      	beq.n	800487a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004852:	f7fe fbc3 	bl	8002fdc <HAL_GetTick>
 8004856:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800485a:	f7fe fbbf 	bl	8002fdc <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b64      	cmp	r3, #100	; 0x64
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e1e7      	b.n	8004c3c <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800486c:	4b65      	ldr	r3, [pc, #404]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <HAL_RCC_OscConfig+0xba>
 8004878:	e014      	b.n	80048a4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487a:	f7fe fbaf 	bl	8002fdc <HAL_GetTick>
 800487e:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004882:	f7fe fbab 	bl	8002fdc <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b64      	cmp	r3, #100	; 0x64
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e1d3      	b.n	8004c3c <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004894:	4b5b      	ldr	r3, [pc, #364]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1f0      	bne.n	8004882 <HAL_RCC_OscConfig+0xe2>
 80048a0:	e000      	b.n	80048a4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d077      	beq.n	80049a0 <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048b0:	4b54      	ldr	r3, [pc, #336]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 030c 	and.w	r3, r3, #12
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00b      	beq.n	80048d4 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048bc:	4b51      	ldr	r3, [pc, #324]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d126      	bne.n	8004916 <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048c8:	4b4e      	ldr	r3, [pc, #312]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d120      	bne.n	8004916 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048d4:	4b4b      	ldr	r3, [pc, #300]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_RCC_OscConfig+0x14c>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e1a7      	b.n	8004c3c <HAL_RCC_OscConfig+0x49c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ec:	4b45      	ldr	r3, [pc, #276]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6919      	ldr	r1, [r3, #16]
 80048f8:	23f8      	movs	r3, #248	; 0xf8
 80048fa:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	fa93 f3a3 	rbit	r3, r3
 8004902:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004906:	fab3 f383 	clz	r3, r3
 800490a:	fa01 f303 	lsl.w	r3, r1, r3
 800490e:	493d      	ldr	r1, [pc, #244]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 8004910:	4313      	orrs	r3, r2
 8004912:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004914:	e044      	b.n	80049a0 <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d02a      	beq.n	8004974 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800491e:	4b3a      	ldr	r3, [pc, #232]	; (8004a08 <HAL_RCC_OscConfig+0x268>)
 8004920:	2201      	movs	r2, #1
 8004922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004924:	f7fe fb5a 	bl	8002fdc <HAL_GetTick>
 8004928:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800492c:	f7fe fb56 	bl	8002fdc <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e17e      	b.n	8004c3c <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493e:	4b31      	ldr	r3, [pc, #196]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494a:	4b2e      	ldr	r3, [pc, #184]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6919      	ldr	r1, [r3, #16]
 8004956:	23f8      	movs	r3, #248	; 0xf8
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	fa93 f3a3 	rbit	r3, r3
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	fab3 f383 	clz	r3, r3
 8004968:	fa01 f303 	lsl.w	r3, r1, r3
 800496c:	4925      	ldr	r1, [pc, #148]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 800496e:	4313      	orrs	r3, r2
 8004970:	600b      	str	r3, [r1, #0]
 8004972:	e015      	b.n	80049a0 <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004974:	4b24      	ldr	r3, [pc, #144]	; (8004a08 <HAL_RCC_OscConfig+0x268>)
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497a:	f7fe fb2f 	bl	8002fdc <HAL_GetTick>
 800497e:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004982:	f7fe fb2b 	bl	8002fdc <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e153      	b.n	8004c3c <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004994:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f0      	bne.n	8004982 <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d037      	beq.n	8004a1c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d016      	beq.n	80049e2 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049b4:	4b15      	ldr	r3, [pc, #84]	; (8004a0c <HAL_RCC_OscConfig+0x26c>)
 80049b6:	2201      	movs	r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ba:	f7fe fb0f 	bl	8002fdc <HAL_GetTick>
 80049be:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c0:	e008      	b.n	80049d4 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049c2:	f7fe fb0b 	bl	8002fdc <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e133      	b.n	8004c3c <HAL_RCC_OscConfig+0x49c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049d4:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <HAL_RCC_OscConfig+0x264>)
 80049d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0f0      	beq.n	80049c2 <HAL_RCC_OscConfig+0x222>
 80049e0:	e01c      	b.n	8004a1c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049e2:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <HAL_RCC_OscConfig+0x26c>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e8:	f7fe faf8 	bl	8002fdc <HAL_GetTick>
 80049ec:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ee:	e00f      	b.n	8004a10 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049f0:	f7fe faf4 	bl	8002fdc <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d908      	bls.n	8004a10 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e11c      	b.n	8004c3c <HAL_RCC_OscConfig+0x49c>
 8004a02:	bf00      	nop
 8004a04:	40023800 	.word	0x40023800
 8004a08:	42470000 	.word	0x42470000
 8004a0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a10:	4b8c      	ldr	r3, [pc, #560]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e9      	bne.n	80049f0 <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d07d      	beq.n	8004b24 <HAL_RCC_OscConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60bb      	str	r3, [r7, #8]
 8004a2c:	4b85      	ldr	r3, [pc, #532]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	4a84      	ldr	r2, [pc, #528]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a36:	6413      	str	r3, [r2, #64]	; 0x40
 8004a38:	4b82      	ldr	r3, [pc, #520]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a40:	60bb      	str	r3, [r7, #8]
 8004a42:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a44:	4b80      	ldr	r3, [pc, #512]	; (8004c48 <HAL_RCC_OscConfig+0x4a8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a7f      	ldr	r2, [pc, #508]	; (8004c48 <HAL_RCC_OscConfig+0x4a8>)
 8004a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a4e:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8004a50:	f7fe fac4 	bl	8002fdc <HAL_GetTick>
 8004a54:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x2ca>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a58:	f7fe fac0 	bl	8002fdc <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x2ca>
      {
        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e0e8      	b.n	8004c3c <HAL_RCC_OscConfig+0x49c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a6a:	4b77      	ldr	r3, [pc, #476]	; (8004c48 <HAL_RCC_OscConfig+0x4a8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0f0      	beq.n	8004a58 <HAL_RCC_OscConfig+0x2b8>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d106      	bne.n	8004a8c <HAL_RCC_OscConfig+0x2ec>
 8004a7e:	4b71      	ldr	r3, [pc, #452]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a82:	4a70      	ldr	r2, [pc, #448]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8a:	e01c      	b.n	8004ac6 <HAL_RCC_OscConfig+0x326>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	2b05      	cmp	r3, #5
 8004a92:	d10c      	bne.n	8004aae <HAL_RCC_OscConfig+0x30e>
 8004a94:	4b6b      	ldr	r3, [pc, #428]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a98:	4a6a      	ldr	r2, [pc, #424]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004a9a:	f043 0304 	orr.w	r3, r3, #4
 8004a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa0:	4b68      	ldr	r3, [pc, #416]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa4:	4a67      	ldr	r2, [pc, #412]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8004aac:	e00b      	b.n	8004ac6 <HAL_RCC_OscConfig+0x326>
 8004aae:	4b65      	ldr	r3, [pc, #404]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab2:	4a64      	ldr	r2, [pc, #400]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004ab4:	f023 0301 	bic.w	r3, r3, #1
 8004ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8004aba:	4b62      	ldr	r3, [pc, #392]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abe:	4a61      	ldr	r2, [pc, #388]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004ac0:	f023 0304 	bic.w	r3, r3, #4
 8004ac4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d015      	beq.n	8004afa <HAL_RCC_OscConfig+0x35a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ace:	f7fe fa85 	bl	8002fdc <HAL_GetTick>
 8004ad2:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad4:	e00a      	b.n	8004aec <HAL_RCC_OscConfig+0x34c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ad6:	f7fe fa81 	bl	8002fdc <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x34c>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e0a7      	b.n	8004c3c <HAL_RCC_OscConfig+0x49c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aec:	4b55      	ldr	r3, [pc, #340]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0ee      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x336>
 8004af8:	e014      	b.n	8004b24 <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afa:	f7fe fa6f 	bl	8002fdc <HAL_GetTick>
 8004afe:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b00:	e00a      	b.n	8004b18 <HAL_RCC_OscConfig+0x378>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b02:	f7fe fa6b 	bl	8002fdc <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e091      	b.n	8004c3c <HAL_RCC_OscConfig+0x49c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b18:	4b4a      	ldr	r3, [pc, #296]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1ee      	bne.n	8004b02 <HAL_RCC_OscConfig+0x362>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8086 	beq.w	8004c3a <HAL_RCC_OscConfig+0x49a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b2e:	4b45      	ldr	r3, [pc, #276]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 030c 	and.w	r3, r3, #12
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d07d      	beq.n	8004c36 <HAL_RCC_OscConfig+0x496>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d162      	bne.n	8004c08 <HAL_RCC_OscConfig+0x468>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b42:	4b42      	ldr	r3, [pc, #264]	; (8004c4c <HAL_RCC_OscConfig+0x4ac>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fe fa48 	bl	8002fdc <HAL_GetTick>
 8004b4c:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x3c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b50:	f7fe fa44 	bl	8002fdc <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x3c2>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e06c      	b.n	8004c3c <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b62:	4b38      	ldr	r3, [pc, #224]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x3b0>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69da      	ldr	r2, [r3, #28]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	fa93 f3a3 	rbit	r3, r3
 8004b88:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	fab3 f383 	clz	r3, r3
 8004b90:	fa01 f303 	lsl.w	r3, r1, r3
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	1e59      	subs	r1, r3, #1
 8004b9e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004ba2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	fa93 f3a3 	rbit	r3, r3
 8004baa:	617b      	str	r3, [r7, #20]
  return(result);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	fab3 f383 	clz	r3, r3
 8004bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bbc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8004bc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	fa93 f3a3 	rbit	r3, r3
 8004bc8:	61fb      	str	r3, [r7, #28]
  return(result);
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	fab3 f383 	clz	r3, r3
 8004bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd4:	491b      	ldr	r1, [pc, #108]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bda:	4b1c      	ldr	r3, [pc, #112]	; (8004c4c <HAL_RCC_OscConfig+0x4ac>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be0:	f7fe f9fc 	bl	8002fdc <HAL_GetTick>
 8004be4:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004be8:	f7fe f9f8 	bl	8002fdc <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e020      	b.n	8004c3c <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bfa:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0x448>
 8004c06:	e018      	b.n	8004c3a <HAL_RCC_OscConfig+0x49a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c08:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <HAL_RCC_OscConfig+0x4ac>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0e:	f7fe f9e5 	bl	8002fdc <HAL_GetTick>
 8004c12:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c16:	f7fe f9e1 	bl	8002fdc <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e009      	b.n	8004c3c <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c28:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <HAL_RCC_OscConfig+0x4a4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1f0      	bne.n	8004c16 <HAL_RCC_OscConfig+0x476>
 8004c34:	e001      	b.n	8004c3a <HAL_RCC_OscConfig+0x49a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <HAL_RCC_OscConfig+0x49c>
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3738      	adds	r7, #56	; 0x38
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40023800 	.word	0x40023800
 8004c48:	40007000 	.word	0x40007000
 8004c4c:	42470060 	.word	0x42470060

08004c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004c5e:	4b81      	ldr	r3, [pc, #516]	; (8004e64 <HAL_RCC_ClockConfig+0x214>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d90c      	bls.n	8004c86 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6c:	4b7d      	ldr	r3, [pc, #500]	; (8004e64 <HAL_RCC_ClockConfig+0x214>)
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	b2d2      	uxtb	r2, r2
 8004c72:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c74:	4b7b      	ldr	r3, [pc, #492]	; (8004e64 <HAL_RCC_ClockConfig+0x214>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d001      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e0ea      	b.n	8004e5c <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d008      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c92:	4b75      	ldr	r3, [pc, #468]	; (8004e68 <HAL_RCC_ClockConfig+0x218>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	4972      	ldr	r1, [pc, #456]	; (8004e68 <HAL_RCC_ClockConfig+0x218>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 8086 	beq.w	8004dbe <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d107      	bne.n	8004cca <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cba:	4b6b      	ldr	r3, [pc, #428]	; (8004e68 <HAL_RCC_ClockConfig+0x218>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d119      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e0c8      	b.n	8004e5c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d003      	beq.n	8004cda <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d107      	bne.n	8004cea <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cda:	4b63      	ldr	r3, [pc, #396]	; (8004e68 <HAL_RCC_ClockConfig+0x218>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d109      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e0b8      	b.n	8004e5c <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cea:	4b5f      	ldr	r3, [pc, #380]	; (8004e68 <HAL_RCC_ClockConfig+0x218>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e0b0      	b.n	8004e5c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cfa:	4b5b      	ldr	r3, [pc, #364]	; (8004e68 <HAL_RCC_ClockConfig+0x218>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f023 0203 	bic.w	r2, r3, #3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	4958      	ldr	r1, [pc, #352]	; (8004e68 <HAL_RCC_ClockConfig+0x218>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d0c:	f7fe f966 	bl	8002fdc <HAL_GetTick>
 8004d10:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d112      	bne.n	8004d40 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d1c:	f7fe f95e 	bl	8002fdc <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e094      	b.n	8004e5c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d32:	4b4d      	ldr	r3, [pc, #308]	; (8004e68 <HAL_RCC_ClockConfig+0x218>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 030c 	and.w	r3, r3, #12
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d1ee      	bne.n	8004d1c <HAL_RCC_ClockConfig+0xcc>
 8004d3e:	e03e      	b.n	8004dbe <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d112      	bne.n	8004d6e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d48:	e00a      	b.n	8004d60 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d4a:	f7fe f947 	bl	8002fdc <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e07d      	b.n	8004e5c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d60:	4b41      	ldr	r3, [pc, #260]	; (8004e68 <HAL_RCC_ClockConfig+0x218>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 030c 	and.w	r3, r3, #12
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d1ee      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xfa>
 8004d6c:	e027      	b.n	8004dbe <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d11d      	bne.n	8004db2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8004d76:	e00a      	b.n	8004d8e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d78:	f7fe f930 	bl	8002fdc <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e066      	b.n	8004e5c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8004d8e:	4b36      	ldr	r3, [pc, #216]	; (8004e68 <HAL_RCC_ClockConfig+0x218>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 030c 	and.w	r3, r3, #12
 8004d96:	2b0c      	cmp	r3, #12
 8004d98:	d1ee      	bne.n	8004d78 <HAL_RCC_ClockConfig+0x128>
 8004d9a:	e010      	b.n	8004dbe <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d9c:	f7fe f91e 	bl	8002fdc <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e054      	b.n	8004e5c <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004db2:	4b2d      	ldr	r3, [pc, #180]	; (8004e68 <HAL_RCC_ClockConfig+0x218>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1ee      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004dbe:	4b29      	ldr	r3, [pc, #164]	; (8004e64 <HAL_RCC_ClockConfig+0x214>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d20c      	bcs.n	8004de6 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dcc:	4b25      	ldr	r3, [pc, #148]	; (8004e64 <HAL_RCC_ClockConfig+0x214>)
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004dd4:	4b23      	ldr	r3, [pc, #140]	; (8004e64 <HAL_RCC_ClockConfig+0x214>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d001      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e03a      	b.n	8004e5c <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0304 	and.w	r3, r3, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d008      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004df2:	4b1d      	ldr	r3, [pc, #116]	; (8004e68 <HAL_RCC_ClockConfig+0x218>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	491a      	ldr	r1, [pc, #104]	; (8004e68 <HAL_RCC_ClockConfig+0x218>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d009      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e10:	4b15      	ldr	r3, [pc, #84]	; (8004e68 <HAL_RCC_ClockConfig+0x218>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	4912      	ldr	r1, [pc, #72]	; (8004e68 <HAL_RCC_ClockConfig+0x218>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8004e24:	f000 f826 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8004e28:	4601      	mov	r1, r0
 8004e2a:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <HAL_RCC_ClockConfig+0x218>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e32:	23f0      	movs	r3, #240	; 0xf0
 8004e34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	fa93 f3a3 	rbit	r3, r3
 8004e3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	fab3 f383 	clz	r3, r3
 8004e44:	fa22 f303 	lsr.w	r3, r2, r3
 8004e48:	4a08      	ldr	r2, [pc, #32]	; (8004e6c <HAL_RCC_ClockConfig+0x21c>)
 8004e4a:	5cd3      	ldrb	r3, [r2, r3]
 8004e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8004e50:	4a07      	ldr	r2, [pc, #28]	; (8004e70 <HAL_RCC_ClockConfig+0x220>)
 8004e52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004e54:	200f      	movs	r0, #15
 8004e56:	f004 fb99 	bl	800958c <HAL_InitTick>
  
  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40023c00 	.word	0x40023c00
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	0800f55c 	.word	0x0800f55c
 8004e70:	20000014 	.word	0x20000014

08004e74 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b08b      	sub	sp, #44	; 0x2c
 8004e78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
 8004e82:	2300      	movs	r3, #0
 8004e84:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e8a:	4b38      	ldr	r3, [pc, #224]	; (8004f6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d00c      	beq.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x3c>
 8004e96:	2b08      	cmp	r3, #8
 8004e98:	d85d      	bhi.n	8004f56 <HAL_RCC_GetSysClockFreq+0xe2>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x30>
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d003      	beq.n	8004eaa <HAL_RCC_GetSysClockFreq+0x36>
 8004ea2:	e058      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ea4:	4b32      	ldr	r3, [pc, #200]	; (8004f70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ea6:	623b      	str	r3, [r7, #32]
       break;
 8004ea8:	e058      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eaa:	4b31      	ldr	r3, [pc, #196]	; (8004f70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004eac:	623b      	str	r3, [r7, #32]
      break;
 8004eae:	e055      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eb0:	4b2e      	ldr	r3, [pc, #184]	; (8004f6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eb8:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eba:	4b2c      	ldr	r3, [pc, #176]	; (8004f6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d017      	beq.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8004ec6:	4a2a      	ldr	r2, [pc, #168]	; (8004f70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ece:	4b27      	ldr	r3, [pc, #156]	; (8004f6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ed0:	6859      	ldr	r1, [r3, #4]
 8004ed2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ed6:	400b      	ands	r3, r1
 8004ed8:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8004edc:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ede:	6979      	ldr	r1, [r7, #20]
 8004ee0:	fa91 f1a1 	rbit	r1, r1
 8004ee4:	6139      	str	r1, [r7, #16]
  return(result);
 8004ee6:	6939      	ldr	r1, [r7, #16]
 8004ee8:	fab1 f181 	clz	r1, r1
 8004eec:	40cb      	lsrs	r3, r1
 8004eee:	fb02 f303 	mul.w	r3, r2, r3
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef4:	e016      	b.n	8004f24 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8004ef6:	4a1e      	ldr	r2, [pc, #120]	; (8004f70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004efe:	4b1b      	ldr	r3, [pc, #108]	; (8004f6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f00:	6859      	ldr	r1, [r3, #4]
 8004f02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f06:	400b      	ands	r3, r1
 8004f08:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8004f0c:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0e:	68f9      	ldr	r1, [r7, #12]
 8004f10:	fa91 f1a1 	rbit	r1, r1
 8004f14:	60b9      	str	r1, [r7, #8]
  return(result);
 8004f16:	68b9      	ldr	r1, [r7, #8]
 8004f18:	fab1 f181 	clz	r1, r1
 8004f1c:	40cb      	lsrs	r3, r1
 8004f1e:	fb02 f303 	mul.w	r3, r2, r3
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8004f24:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f2c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004f30:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	fa93 f3a3 	rbit	r3, r3
 8004f38:	603b      	str	r3, [r7, #0]
  return(result);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	fab3 f383 	clz	r3, r3
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
 8004f44:	3301      	adds	r3, #1
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8004f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f52:	623b      	str	r3, [r7, #32]
      break;
 8004f54:	e002      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f56:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004f58:	623b      	str	r3, [r7, #32]
      break;
 8004f5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	372c      	adds	r7, #44	; 0x2c
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	00f42400 	.word	0x00f42400

08004f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f78:	4b03      	ldr	r3, [pc, #12]	; (8004f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	20000014 	.word	0x20000014

08004f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8004f92:	f7ff ffef 	bl	8004f74 <HAL_RCC_GetHCLKFreq>
 8004f96:	4601      	mov	r1, r0
 8004f98:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fa0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004fa4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	fa93 f3a3 	rbit	r3, r3
 8004fac:	603b      	str	r3, [r7, #0]
  return(result);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	fab3 f383 	clz	r3, r3
 8004fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb8:	4a04      	ldr	r2, [pc, #16]	; (8004fcc <HAL_RCC_GetPCLK1Freq+0x40>)
 8004fba:	5cd3      	ldrb	r3, [r2, r3]
 8004fbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	0800f56c 	.word	0x0800f56c

08004fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8004fd6:	f7ff ffcd 	bl	8004f74 <HAL_RCC_GetHCLKFreq>
 8004fda:	4601      	mov	r1, r0
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	; (800500c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8004fe4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004fe8:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	fa93 f3a3 	rbit	r3, r3
 8004ff0:	603b      	str	r3, [r7, #0]
  return(result);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	fab3 f383 	clz	r3, r3
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffc:	4a04      	ldr	r2, [pc, #16]	; (8005010 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004ffe:	5cd3      	ldrb	r3, [r2, r3]
 8005000:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40023800 	.word	0x40023800
 8005010:	0800f56c 	.word	0x0800f56c

08005014 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	220f      	movs	r2, #15
 8005022:	601a      	str	r2, [r3, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005024:	4b12      	ldr	r3, [pc, #72]	; (8005070 <HAL_RCC_GetClockConfig+0x5c>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 0203 	and.w	r2, r3, #3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005030:	4b0f      	ldr	r3, [pc, #60]	; (8005070 <HAL_RCC_GetClockConfig+0x5c>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800503c:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <HAL_RCC_GetClockConfig+0x5c>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005048:	4b09      	ldr	r3, [pc, #36]	; (8005070 <HAL_RCC_GetClockConfig+0x5c>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	08db      	lsrs	r3, r3, #3
 800504e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005056:	4b07      	ldr	r3, [pc, #28]	; (8005074 <HAL_RCC_GetClockConfig+0x60>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 020f 	and.w	r2, r3, #15
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	601a      	str	r2, [r3, #0]
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800
 8005074:	40023c00 	.word	0x40023c00

08005078 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b09c      	sub	sp, #112	; 0x70
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t tmpreg1 = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	66bb      	str	r3, [r7, #104]	; 0x68
  
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division   
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d106      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 8082 	beq.w	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
        
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();    
 80050a2:	4bac      	ldr	r3, [pc, #688]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050a8:	f7fd ff98 	bl	8002fdc <HAL_GetTick>
 80050ac:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050b0:	f7fd ff94 	bl	8002fdc <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e1eb      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050c2:	4ba5      	ldr	r3, [pc, #660]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1f0      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x38>
    }
    
    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added   
      only for I2S configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d01e      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050e6:	fa93 f3a3 	rbit	r3, r3
 80050ea:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 80050ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050ee:	fab3 f383 	clz	r3, r3
 80050f2:	409a      	lsls	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6899      	ldr	r1, [r3, #8]
 80050f8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80050fc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005100:	fa93 f3a3 	rbit	r3, r3
 8005104:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005108:	fab3 f383 	clz	r3, r3
 800510c:	fa01 f303 	lsl.w	r3, r1, r3
 8005110:	4991      	ldr	r1, [pc, #580]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
  
    /*---------------------------- SAI configuration -------------------------*/ 
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d02a      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
      
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005124:	4b8c      	ldr	r3, [pc, #560]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800512a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800512e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005132:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005136:	fa93 f3a3 	rbit	r3, r3
 800513a:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 800513c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800513e:	fab3 f383 	clz	r3, r3
 8005142:	fa22 f303 	lsr.w	r3, r2, r3
 8005146:	66bb      	str	r3, [r7, #104]	; 0x68
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	019a      	lsls	r2, r3, #6
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	061b      	lsls	r3, r3, #24
 8005154:	431a      	orrs	r2, r3
 8005156:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005158:	071b      	lsls	r3, r3, #28
 800515a:	497f      	ldr	r1, [pc, #508]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005162:	4b7d      	ldr	r3, [pc, #500]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005168:	f023 021f 	bic.w	r2, r3, #31
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	3b01      	subs	r3, #1
 8005172:	4979      	ldr	r1, [pc, #484]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800517a:	4b76      	ldr	r3, [pc, #472]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800517c:	2201      	movs	r2, #1
 800517e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005180:	f7fd ff2c 	bl	8002fdc <HAL_GetTick>
 8005184:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005186:	e008      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005188:	f7fd ff28 	bl	8002fdc <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e17f      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800519a:	4b6f      	ldr	r3, [pc, #444]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x110>
    
  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x148>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 80d7 	beq.w	800536e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 80051c0:	4b66      	ldr	r3, [pc, #408]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051c6:	f7fd ff09 	bl	8002fdc <HAL_GetTick>
 80051ca:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051cc:	e008      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80051ce:	f7fd ff05 	bl	8002fdc <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d901      	bls.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x168>
      { 
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e15c      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051e0:	4b5d      	ldr	r3, [pc, #372]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ec:	d0ef      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x156>
    }
    
    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d04b      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80051fa:	4b57      	ldr	r3, [pc, #348]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005200:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005204:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005208:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520c:	fa93 f3a3 	rbit	r3, r3
 8005210:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	fab3 f383 	clz	r3, r3
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
 800521c:	66bb      	str	r3, [r7, #104]	; 0x68
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691a      	ldr	r2, [r3, #16]
 8005222:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005226:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800522a:	fa93 f3a3 	rbit	r3, r3
 800522e:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8005230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005232:	fab3 f383 	clz	r3, r3
 8005236:	409a      	lsls	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6959      	ldr	r1, [r3, #20]
 800523c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005240:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005244:	fa93 f3a3 	rbit	r3, r3
 8005248:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800524a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800524c:	fab3 f383 	clz	r3, r3
 8005250:	fa01 f303 	lsl.w	r3, r1, r3
 8005254:	431a      	orrs	r2, r3
 8005256:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800525a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525e:	fa93 f3a3 	rbit	r3, r3
 8005262:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005266:	fab3 f383 	clz	r3, r3
 800526a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800526c:	fa01 f303 	lsl.w	r3, r1, r3
 8005270:	4939      	ldr	r1, [pc, #228]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005278:	4b37      	ldr	r3, [pc, #220]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800527a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800527e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	3b01      	subs	r3, #1
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	4933      	ldr	r1, [pc, #204]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    
    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d049      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 800529e:	4b2e      	ldr	r3, [pc, #184]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80052a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052a8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80052ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	fa93 f3a3 	rbit	r3, r3
 80052b4:	613b      	str	r3, [r7, #16]
  return(result);
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	fab3 f383 	clz	r3, r3
 80052bc:	fa22 f303 	lsr.w	r3, r2, r3
 80052c0:	66bb      	str	r3, [r7, #104]	; 0x68
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	fa93 f3a3 	rbit	r3, r3
 80052d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	fab3 f383 	clz	r3, r3
 80052da:	409a      	lsls	r2, r3
 80052dc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	fa93 f3a3 	rbit	r3, r3
 80052e8:	623b      	str	r3, [r7, #32]
  return(result);
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	fab3 f383 	clz	r3, r3
 80052f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052f2:	fa01 f303 	lsl.w	r3, r1, r3
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6999      	ldr	r1, [r3, #24]
 80052fc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	fa93 f3a3 	rbit	r3, r3
 8005308:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	fab3 f383 	clz	r3, r3
 8005310:	fa01 f303 	lsl.w	r3, r1, r3
 8005314:	4910      	ldr	r1, [pc, #64]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800531c:	4b0e      	ldr	r3, [pc, #56]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800531e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005322:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	490b      	ldr	r1, [pc, #44]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005332:	4b0a      	ldr	r3, [pc, #40]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005334:	2201      	movs	r2, #1
 8005336:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005338:	f7fd fe50 	bl	8002fdc <HAL_GetTick>
 800533c:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800533e:	e00f      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005340:	f7fd fe4c 	bl	8002fdc <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d908      	bls.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      { 
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e0a3      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x422>
 8005352:	bf00      	nop
 8005354:	42470068 	.word	0x42470068
 8005358:	40023800 	.word	0x40023800
 800535c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005360:	4b50      	ldr	r3, [pc, #320]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800536c:	d1e8      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    }  
  }
  /*--------------------------------------------------------------------------*/
    
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 8083 	beq.w	8005482 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800537c:	2300      	movs	r3, #0
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	4b48      	ldr	r3, [pc, #288]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005384:	4a47      	ldr	r2, [pc, #284]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800538a:	6413      	str	r3, [r2, #64]	; 0x40
 800538c:	4b45      	ldr	r3, [pc, #276]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	68fb      	ldr	r3, [r7, #12]
      
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005398:	4b43      	ldr	r3, [pc, #268]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a42      	ldr	r2, [pc, #264]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 800539e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a2:	6013      	str	r3, [r2, #0]
      
    /* Get tick */
    tickstart = HAL_GetTick();
 80053a4:	f7fd fe1a 	bl	8002fdc <HAL_GetTick>
 80053a8:	66f8      	str	r0, [r7, #108]	; 0x6c
      
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053aa:	e008      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x346>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80053ac:	f7fd fe16 	bl	8002fdc <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x346>
      {
        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e06d      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x422>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053be:	4b3a      	ldr	r3, [pc, #232]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0f0      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x334>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053ca:	4b36      	ldr	r3, [pc, #216]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80053cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d2:	66bb      	str	r3, [r7, #104]	; 0x68
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d02f      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d028      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053e8:	4b2e      	ldr	r3, [pc, #184]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80053ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f0:	66bb      	str	r3, [r7, #104]	; 0x68
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053f2:	4b2e      	ldr	r3, [pc, #184]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80053f4:	2201      	movs	r2, #1
 80053f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053f8:	4b2c      	ldr	r3, [pc, #176]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80053fe:	4a29      	ldr	r2, [pc, #164]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005402:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005404:	4b27      	ldr	r3, [pc, #156]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d014      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005410:	f7fd fde4 	bl	8002fdc <HAL_GetTick>
 8005414:	66f8      	str	r0, [r7, #108]	; 0x6c
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005416:	e00a      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005418:	f7fd fde0 	bl	8002fdc <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	f241 3288 	movw	r2, #5000	; 0x1388
 8005426:	4293      	cmp	r3, r2
 8005428:	d901      	bls.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e035      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800542e:	4b1d      	ldr	r3, [pc, #116]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0ee      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005446:	d10d      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005448:	4b16      	ldr	r3, [pc, #88]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800545c:	4911      	ldr	r1, [pc, #68]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800545e:	4313      	orrs	r3, r2
 8005460:	608b      	str	r3, [r1, #8]
 8005462:	e005      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005464:	4b0f      	ldr	r3, [pc, #60]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	4a0e      	ldr	r2, [pc, #56]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800546a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800546e:	6093      	str	r3, [r2, #8]
 8005470:	4b0c      	ldr	r3, [pc, #48]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005472:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800547c:	4909      	ldr	r1, [pc, #36]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800547e:	4313      	orrs	r3, r2
 8005480:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0310 	and.w	r3, r3, #16
 800548a:	2b00      	cmp	r3, #0
 800548c:	d004      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005494:	4b06      	ldr	r3, [pc, #24]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005496:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3770      	adds	r7, #112	; 0x70
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	40023800 	.word	0x40023800
 80054a8:	40007000 	.word	0x40007000
 80054ac:	42470e40 	.word	0x42470e40
 80054b0:	424711e0 	.word	0x424711e0

080054b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e01d      	b.n	8005502 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d105      	bne.n	80054de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f003 ff2f 	bl	800933c <HAL_SD_MspInit>
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2203      	movs	r2, #3
 80054e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f810 	bl	800550c <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800550c:	b5b0      	push	{r4, r5, r7, lr}
 800550e:	b08e      	sub	sp, #56	; 0x38
 8005510:	af04      	add	r7, sp, #16
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005514:	2300      	movs	r3, #0
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005518:	2300      	movs	r3, #0
 800551a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800551c:	2300      	movs	r3, #0
 800551e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005524:	2300      	movs	r3, #0
 8005526:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005528:	2300      	movs	r3, #0
 800552a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800552c:	2376      	movs	r3, #118	; 0x76
 800552e:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681d      	ldr	r5, [r3, #0]
 8005534:	466c      	mov	r4, sp
 8005536:	f107 0318 	add.w	r3, r7, #24
 800553a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800553e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005542:	f107 030c 	add.w	r3, r7, #12
 8005546:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005548:	4628      	mov	r0, r5
 800554a:	f002 fbd9 	bl	8007d00 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 800554e:	4b1c      	ldr	r3, [pc, #112]	; (80055c0 <HAL_SD_InitCard+0xb4>)
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4618      	mov	r0, r3
 800555a:	f002 fc1a 	bl	8007d92 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800555e:	4b18      	ldr	r3, [pc, #96]	; (80055c0 <HAL_SD_InitCard+0xb4>)
 8005560:	2201      	movs	r2, #1
 8005562:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8005564:	2002      	movs	r0, #2
 8005566:	f7fd fd45 	bl	8002ff4 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f001 f90c 	bl	8006788 <SD_PowerON>
 8005570:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00b      	beq.n	8005590 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e013      	b.n	80055b8 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f001 f82f 	bl	80065f4 <SD_InitCard>
 8005596:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00b      	beq.n	80055b6 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e000      	b.n	80055b8 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3728      	adds	r7, #40	; 0x28
 80055bc:	46bd      	mov	sp, r7
 80055be:	bdb0      	pop	{r4, r5, r7, pc}
 80055c0:	422580a0 	.word	0x422580a0

080055c4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80055c4:	b590      	push	{r4, r7, lr}
 80055c6:	b08f      	sub	sp, #60	; 0x3c
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80055d2:	2300      	movs	r3, #0
 80055d4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80055d6:	f7fd fd01 	bl	8002fdc <HAL_GetTick>
 80055da:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 80055dc:	2300      	movs	r3, #0
 80055de:	633b      	str	r3, [r7, #48]	; 0x30
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d107      	bne.n	80055fa <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e177      	b.n	80058ea <HAL_SD_ReadBlocks+0x326>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b01      	cmp	r3, #1
 8005604:	f040 816a 	bne.w	80058dc <HAL_SD_ReadBlocks+0x318>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	441a      	add	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005618:	429a      	cmp	r2, r3
 800561a:	d907      	bls.n	800562c <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e15e      	b.n	80058ea <HAL_SD_ReadBlocks+0x326>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2203      	movs	r2, #3
 8005630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2200      	movs	r2, #0
 800563a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005640:	2b01      	cmp	r3, #1
 8005642:	d002      	beq.n	800564a <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	025b      	lsls	r3, r3, #9
 8005648:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005652:	4618      	mov	r0, r3
 8005654:	f002 fc31 	bl	8007eba <SDMMC_CmdBlockLength>
 8005658:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 800565a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565c:	2b00      	cmp	r3, #0
 800565e:	d010      	beq.n	8005682 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005668:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800566e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005670:	431a      	orrs	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e133      	b.n	80058ea <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005682:	f04f 33ff 	mov.w	r3, #4294967295
 8005686:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	025b      	lsls	r3, r3, #9
 800568c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800568e:	2390      	movs	r3, #144	; 0x90
 8005690:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005692:	2302      	movs	r3, #2
 8005694:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005696:	2300      	movs	r3, #0
 8005698:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800569a:	2301      	movs	r3, #1
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f107 0210 	add.w	r2, r7, #16
 80056a6:	4611      	mov	r1, r2
 80056a8:	4618      	mov	r0, r3
 80056aa:	f002 fbda 	bl	8007e62 <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d90a      	bls.n	80056ca <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2202      	movs	r2, #2
 80056b8:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f002 fc42 	bl	8007f4a <SDMMC_CmdReadMultiBlock>
 80056c6:	6378      	str	r0, [r7, #52]	; 0x34
 80056c8:	e009      	b.n	80056de <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f002 fc13 	bl	8007f02 <SDMMC_CmdReadSingleBlock>
 80056dc:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80056de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d04a      	beq.n	800577a <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80056ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f4:	431a      	orrs	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e0f1      	b.n	80058ea <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d016      	beq.n	8005742 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005714:	2300      	movs	r3, #0
 8005716:	633b      	str	r3, [r7, #48]	; 0x30
 8005718:	e00d      	b.n	8005736 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6819      	ldr	r1, [r3, #0]
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005724:	18d4      	adds	r4, r2, r3
 8005726:	4608      	mov	r0, r1
 8005728:	f002 fb15 	bl	8007d56 <SDIO_ReadFIFO>
 800572c:	4603      	mov	r3, r0
 800572e:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005732:	3301      	adds	r3, #1
 8005734:	633b      	str	r3, [r7, #48]	; 0x30
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	2b07      	cmp	r3, #7
 800573a:	d9ee      	bls.n	800571a <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 800573c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573e:	3320      	adds	r3, #32
 8005740:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8005742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005744:	2b00      	cmp	r3, #0
 8005746:	d007      	beq.n	8005758 <HAL_SD_ReadBlocks+0x194>
 8005748:	f7fd fc48 	bl	8002fdc <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005754:	429a      	cmp	r2, r3
 8005756:	d810      	bhi.n	800577a <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005760:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e0b7      	b.n	80058ea <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005780:	f240 332a 	movw	r3, #810	; 0x32a
 8005784:	4013      	ands	r3, r2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0bd      	beq.n	8005706 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005794:	2b00      	cmp	r3, #0
 8005796:	d020      	beq.n	80057da <HAL_SD_ReadBlocks+0x216>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d91d      	bls.n	80057da <HAL_SD_ReadBlocks+0x216>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d019      	beq.n	80057da <HAL_SD_ReadBlocks+0x216>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f002 fc3a 	bl	8008024 <SDMMC_CmdStopTransfer>
 80057b0:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 80057b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d010      	beq.n	80057da <HAL_SD_ReadBlocks+0x216>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80057c0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c8:	431a      	orrs	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e087      	b.n	80058ea <HAL_SD_ReadBlocks+0x326>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d010      	beq.n	800580a <HAL_SD_ReadBlocks+0x246>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80057f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	f043 0208 	orr.w	r2, r3, #8
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e06f      	b.n	80058ea <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d010      	beq.n	800583a <HAL_SD_ReadBlocks+0x276>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005820:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	f043 0202 	orr.w	r2, r3, #2
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e057      	b.n	80058ea <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005840:	f003 0320 	and.w	r3, r3, #32
 8005844:	2b00      	cmp	r3, #0
 8005846:	d037      	beq.n	80058b8 <HAL_SD_ReadBlocks+0x2f4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005850:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005856:	f043 0220 	orr.w	r2, r3, #32
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e03f      	b.n	80058ea <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f002 fa71 	bl	8007d56 <SDIO_ReadFIFO>
 8005874:	4602      	mov	r2, r0
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	601a      	str	r2, [r3, #0]
      tempbuff++;
 800587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587c:	3304      	adds	r3, #4
 800587e:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8005880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005882:	2b00      	cmp	r3, #0
 8005884:	d007      	beq.n	8005896 <HAL_SD_ReadBlocks+0x2d2>
 8005886:	f7fd fba9 	bl	8002fdc <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005892:	429a      	cmp	r2, r3
 8005894:	d810      	bhi.n	80058b8 <HAL_SD_ReadBlocks+0x2f4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800589e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e018      	b.n	80058ea <HAL_SD_ReadBlocks+0x326>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1d1      	bne.n	800586a <HAL_SD_ReadBlocks+0x2a6>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80058ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	e006      	b.n	80058ea <HAL_SD_ReadBlocks+0x326>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
  }
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	373c      	adds	r7, #60	; 0x3c
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd90      	pop	{r4, r7, pc}

080058f2 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b08e      	sub	sp, #56	; 0x38
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	607a      	str	r2, [r7, #4]
 80058fe:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005900:	2300      	movs	r3, #0
 8005902:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8005904:	f7fd fb6a 	bl	8002fdc <HAL_GetTick>
 8005908:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d107      	bne.n	8005928 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e160      	b.n	8005bea <HAL_SD_WriteBlocks+0x2f8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	f040 8153 	bne.w	8005bdc <HAL_SD_WriteBlocks+0x2ea>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	441a      	add	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005946:	429a      	cmp	r2, r3
 8005948:	d907      	bls.n	800595a <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e147      	b.n	8005bea <HAL_SD_WriteBlocks+0x2f8>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2203      	movs	r2, #3
 800595e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2200      	movs	r2, #0
 8005968:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596e:	2b01      	cmp	r3, #1
 8005970:	d002      	beq.n	8005978 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	025b      	lsls	r3, r3, #9
 8005976:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005980:	4618      	mov	r0, r3
 8005982:	f002 fa9a 	bl	8007eba <SDMMC_CmdBlockLength>
 8005986:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8005988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598a:	2b00      	cmp	r3, #0
 800598c:	d010      	beq.n	80059b0 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005996:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800599c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599e:	431a      	orrs	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e11c      	b.n	8005bea <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d90a      	bls.n	80059cc <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2220      	movs	r2, #32
 80059ba:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f002 fb09 	bl	8007fda <SDMMC_CmdWriteMultiBlock>
 80059c8:	6378      	str	r0, [r7, #52]	; 0x34
 80059ca:	e009      	b.n	80059e0 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2210      	movs	r2, #16
 80059d0:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	4618      	mov	r0, r3
 80059da:	f002 fada 	bl	8007f92 <SDMMC_CmdWriteSingleBlock>
 80059de:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80059e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d010      	beq.n	8005a08 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80059ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f6:	431a      	orrs	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e0f0      	b.n	8005bea <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a08:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0c:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	025b      	lsls	r3, r3, #9
 8005a12:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005a14:	2390      	movs	r3, #144	; 0x90
 8005a16:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005a20:	2301      	movs	r3, #1
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f107 0210 	add.w	r2, r7, #16
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f002 fa17 	bl	8007e62 <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005a34:	e037      	b.n	8005aa6 <HAL_SD_WriteBlocks+0x1b4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, /*SDIO_FLAG_TXUNDERR |*/ SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d014      	beq.n	8005a6e <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005a44:	2300      	movs	r3, #0
 8005a46:	633b      	str	r3, [r7, #48]	; 0x30
 8005a48:	e00b      	b.n	8005a62 <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a54:	4413      	add	r3, r2
 8005a56:	4619      	mov	r1, r3
 8005a58:	f002 f98a 	bl	8007d70 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	3301      	adds	r3, #1
 8005a60:	633b      	str	r3, [r7, #48]	; 0x30
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	2b07      	cmp	r3, #7
 8005a66:	d9f0      	bls.n	8005a4a <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8005a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6a:	3320      	adds	r3, #32
 8005a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8005a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d007      	beq.n	8005a84 <HAL_SD_WriteBlocks+0x192>
 8005a74:	f7fd fab2 	bl	8002fdc <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d810      	bhi.n	8005aa6 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a94:	431a      	orrs	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e0a1      	b.n	8005bea <HAL_SD_WriteBlocks+0x2f8>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aac:	f240 331a 	movw	r3, #794	; 0x31a
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0bf      	beq.n	8005a36 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d020      	beq.n	8005b06 <HAL_SD_WriteBlocks+0x214>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d91d      	bls.n	8005b06 <HAL_SD_WriteBlocks+0x214>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	d019      	beq.n	8005b06 <HAL_SD_WriteBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f002 faa4 	bl	8008024 <SDMMC_CmdStopTransfer>
 8005adc:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8005ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d010      	beq.n	8005b06 <HAL_SD_WriteBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af4:	431a      	orrs	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e071      	b.n	8005bea <HAL_SD_WriteBlocks+0x2f8>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0c:	f003 0308 	and.w	r3, r3, #8
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d010      	beq.n	8005b36 <HAL_SD_WriteBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005b1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	f043 0208 	orr.w	r2, r3, #8
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e059      	b.n	8005bea <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d010      	beq.n	8005b66 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005b4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b52:	f043 0202 	orr.w	r2, r3, #2
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e041      	b.n	8005bea <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6c:	f003 0310 	and.w	r3, r3, #16
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d010      	beq.n	8005b96 <HAL_SD_WriteBlocks+0x2a4>
    {
      // Clear all the static flags
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005b7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	f043 0210 	orr.w	r2, r3, #16
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e029      	b.n	8005bea <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_STA_STBITERR))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d010      	beq.n	8005bc6 <HAL_SD_WriteBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005bac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_GENERAL_UNKNOWN_ERR;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e011      	b.n	8005bea <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005bce:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	e006      	b.n	8005bea <HAL_SD_WriteBlocks+0x2f8>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
  }
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3738      	adds	r7, #56	; 0x38
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 808d 	beq.w	8005d2a <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c18:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6812      	ldr	r2, [r2, #0]
 8005c24:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005c28:	f023 0302 	bic.w	r3, r3, #2
 8005c2c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c32:	f003 0308 	and.w	r3, r3, #8
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d03a      	beq.n	8005cb0 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d105      	bne.n	8005c52 <HAL_SD_IRQHandler+0x5e>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d011      	beq.n	8005c76 <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f002 f9e4 	bl	8008024 <SDMMC_CmdStopTransfer>
 8005c5c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d008      	beq.n	8005c76 <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f939 	bl	8005ee8 <HAL_SD_ErrorCallback>
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005c7e:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d105      	bne.n	8005ca0 <HAL_SD_IRQHandler+0xac>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <HAL_SD_IRQHandler+0xb4>
      {
        HAL_SD_RxCpltCallback(hsd);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f917 	bl	8005ed4 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 8005ca6:	e103      	b.n	8005eb0 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f909 	bl	8005ec0 <HAL_SD_TxCpltCallback>
}
 8005cae:	e0ff      	b.n	8005eb0 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 80f9 	beq.w	8005eb0 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d011      	beq.n	8005cee <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f002 f9a8 	bl	8008024 <SDMMC_CmdStopTransfer>
 8005cd4:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d008      	beq.n	8005cee <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f8fd 	bl	8005ee8 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f040 80da 	bne.w	8005eb0 <HAL_SD_IRQHandler+0x2bc>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f040 80d3 	bne.w	8005eb0 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0208 	bic.w	r2, r2, #8
 8005d18:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f8cc 	bl	8005ec0 <HAL_SD_TxCpltCallback>
}
 8005d28:	e0c2      	b.n	8005eb0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d008      	beq.n	8005d4a <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d40:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 ff7d 	bl	8006c42 <SD_Write_IT>
}
 8005d48:	e0b2      	b.n	8005eb0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d008      	beq.n	8005d6a <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005d60:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 ff45 	bl	8006bf2 <SD_Read_IT>
}
 8005d68:	e0a2      	b.n	8005eb0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d70:	f240 233a 	movw	r3, #570	; 0x23a
 8005d74:	4013      	ands	r3, r2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 809a 	beq.w	8005eb0 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d005      	beq.n	8005d96 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	f043 0202 	orr.w	r2, r3, #2
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9c:	f003 0308 	and.w	r3, r3, #8
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	f043 0208 	orr.w	r2, r3, #8
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	f043 0220 	orr.w	r2, r3, #32
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd0:	f003 0310 	and.w	r3, r3, #16
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	f043 0210 	orr.w	r2, r3, #16
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d005      	beq.n	8005dfe <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	f043 0208 	orr.w	r2, r3, #8
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005e06:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6812      	ldr	r2, [r2, #0]
 8005e12:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005e16:	f023 0302 	bic.w	r3, r3, #2
 8005e1a:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d036      	beq.n	8005e96 <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d011      	beq.n	8005e54 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	4a20      	ldr	r2, [pc, #128]	; (8005eb8 <HAL_SD_IRQHandler+0x2c4>)
 8005e36:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fd fa21 	bl	8003284 <HAL_DMA_Abort_IT>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d033      	beq.n	8005eb0 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 fb55 	bl	80064fc <SD_DMATxAbort>
}
 8005e52:	e02d      	b.n	8005eb0 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d011      	beq.n	8005e80 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e60:	4a16      	ldr	r2, [pc, #88]	; (8005ebc <HAL_SD_IRQHandler+0x2c8>)
 8005e62:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fd fa0b 	bl	8003284 <HAL_DMA_Abort_IT>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01d      	beq.n	8005eb0 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 fb7d 	bl	8006578 <SD_DMARxAbort>
}
 8005e7e:	e017      	b.n	8005eb0 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f834 	bl	8005efc <HAL_SD_AbortCallback>
}
 8005e94:	e00c      	b.n	8005eb0 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	f003 0308 	and.w	r3, r3, #8
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d006      	beq.n	8005eb0 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f81c 	bl	8005ee8 <HAL_SD_ErrorCallback>
}
 8005eb0:	bf00      	nop
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	080064fd 	.word	0x080064fd
 8005ebc:	08006579 	.word	0x08006579

08005ec0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
 __weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f22:	0e1b      	lsrs	r3, r3, #24
 8005f24:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	099b      	lsrs	r3, r3, #6
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	f003 0303 	and.w	r3, r3, #3
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	089b      	lsrs	r3, r3, #2
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f58:	0c1b      	lsrs	r3, r3, #16
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f6a:	0a1b      	lsrs	r3, r3, #8
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f8c:	0e1b      	lsrs	r3, r3, #24
 8005f8e:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	011b      	lsls	r3, r3, #4
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fa0:	0c1b      	lsrs	r3, r3, #16
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	88db      	ldrh	r3, [r3, #6]
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	091b      	lsrs	r3, r3, #4
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	f003 030f 	and.w	r3, r3, #15
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fd2:	0a1b      	lsrs	r3, r3, #8
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	09db      	lsrs	r3, r3, #7
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	099b      	lsrs	r3, r3, #6
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	095b      	lsrs	r3, r3, #5
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	b2da      	uxtb	r2, r3
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	091b      	lsrs	r3, r3, #4
 800600c:	b2db      	uxtb	r3, r3
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	b2da      	uxtb	r2, r3
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	2200      	movs	r2, #0
 800601c:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006022:	2b00      	cmp	r3, #0
 8006024:	f040 8087 	bne.w	8006136 <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	029b      	lsls	r3, r3, #10
 800602c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006038:	b2db      	uxtb	r3, r3
 800603a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	431a      	orrs	r2, r3
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800604e:	0e1b      	lsrs	r3, r3, #24
 8006050:	b2db      	uxtb	r3, r3
 8006052:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	691a      	ldr	r2, [r3, #16]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	099b      	lsrs	r3, r3, #6
 800605c:	f003 0303 	and.w	r3, r3, #3
 8006060:	431a      	orrs	r2, r3
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	08db      	lsrs	r3, r3, #3
 800606a:	b2db      	uxtb	r3, r3
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	b2da      	uxtb	r2, r3
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	b2db      	uxtb	r3, r3
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	b2da      	uxtb	r2, r3
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006088:	0c1b      	lsrs	r3, r3, #16
 800608a:	b2db      	uxtb	r3, r3
 800608c:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	095b      	lsrs	r3, r3, #5
 8006092:	b2db      	uxtb	r3, r3
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	b2da      	uxtb	r2, r3
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	089b      	lsrs	r3, r3, #2
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	f003 0306 	and.w	r3, r3, #6
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060c4:	0a1b      	lsrs	r3, r3, #8
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	7e1b      	ldrb	r3, [r3, #24]
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	09db      	lsrs	r3, r3, #7
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	4313      	orrs	r3, r2
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	7e1b      	ldrb	r3, [r3, #24]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	3302      	adds	r3, #2
 80060f6:	2201      	movs	r2, #1
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006100:	fb03 f202 	mul.w	r2, r3, r2
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	7a1b      	ldrb	r3, [r3, #8]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	461a      	mov	r2, r3
 8006110:	2301      	movs	r3, #1
 8006112:	fa03 f202 	lsl.w	r2, r3, r2
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006122:	0a52      	lsrs	r2, r2, #9
 8006124:	fb03 f202 	mul.w	r2, r3, r2
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006132:	661a      	str	r2, [r3, #96]	; 0x60
 8006134:	e04d      	b.n	80061d2 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613a:	2b01      	cmp	r3, #1
 800613c:	d138      	bne.n	80061b0 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006142:	b2db      	uxtb	r3, r3
 8006144:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	041b      	lsls	r3, r3, #16
 800614a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006156:	0e1b      	lsrs	r3, r3, #24
 8006158:	b2db      	uxtb	r3, r3
 800615a:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	691a      	ldr	r2, [r3, #16]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	021b      	lsls	r3, r3, #8
 8006164:	431a      	orrs	r2, r3
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800616e:	0c1b      	lsrs	r3, r3, #16
 8006170:	b2db      	uxtb	r3, r3
 8006172:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	431a      	orrs	r2, r3
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006184:	0a1b      	lsrs	r3, r3, #8
 8006186:	b2db      	uxtb	r3, r3
 8006188:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	3301      	adds	r3, #1
 8006190:	029a      	lsls	r2, r3, #10
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	655a      	str	r2, [r3, #84]	; 0x54
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061a4:	659a      	str	r2, [r3, #88]	; 0x58
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	661a      	str	r2, [r3, #96]	; 0x60
 80061ae:	e010      	b.n	80061d2 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80061b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e0c1      	b.n	8006356 <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	099b      	lsrs	r3, r3, #6
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	7e9b      	ldrb	r3, [r3, #26]
 8006200:	b2da      	uxtb	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	09db      	lsrs	r3, r3, #7
 8006206:	b2db      	uxtb	r3, r3
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	b2db      	uxtb	r3, r3
 800620e:	4313      	orrs	r3, r2
 8006210:	b2da      	uxtb	r2, r3
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800621e:	b2da      	uxtb	r2, r3
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006228:	0e1b      	lsrs	r3, r3, #24
 800622a:	b2db      	uxtb	r3, r3
 800622c:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	09db      	lsrs	r3, r3, #7
 8006232:	b2db      	uxtb	r3, r3
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	b2da      	uxtb	r2, r3
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	095b      	lsrs	r3, r3, #5
 8006242:	b2db      	uxtb	r3, r3
 8006244:	f003 0303 	and.w	r3, r3, #3
 8006248:	b2da      	uxtb	r2, r3
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	089b      	lsrs	r3, r3, #2
 8006252:	b2db      	uxtb	r3, r3
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	b2da      	uxtb	r2, r3
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	b2db      	uxtb	r3, r3
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	b2db      	uxtb	r3, r3
 8006266:	f003 030c 	and.w	r3, r3, #12
 800626a:	b2da      	uxtb	r2, r3
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006274:	0c1b      	lsrs	r3, r3, #16
 8006276:	b2db      	uxtb	r3, r3
 8006278:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	7fdb      	ldrb	r3, [r3, #31]
 800627e:	b2da      	uxtb	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	099b      	lsrs	r3, r3, #6
 8006284:	b2db      	uxtb	r3, r3
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	b2db      	uxtb	r3, r3
 800628c:	4313      	orrs	r3, r2
 800628e:	b2da      	uxtb	r2, r3
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	095b      	lsrs	r3, r3, #5
 8006298:	b2db      	uxtb	r3, r3
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c2:	0a1b      	lsrs	r3, r3, #8
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	09db      	lsrs	r3, r3, #7
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	099b      	lsrs	r3, r3, #6
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	095b      	lsrs	r3, r3, #5
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	091b      	lsrs	r3, r3, #4
 8006302:	b2db      	uxtb	r3, r3
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	b2da      	uxtb	r2, r3
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	089b      	lsrs	r3, r3, #2
 8006314:	b2db      	uxtb	r3, r3
 8006316:	f003 0303 	and.w	r3, r3, #3
 800631a:	b2da      	uxtb	r2, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	b2db      	uxtb	r3, r3
 8006326:	f003 0303 	and.w	r3, r3, #3
 800632a:	b2da      	uxtb	r2, r3
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006336:	b2db      	uxtb	r3, r3
 8006338:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	085b      	lsrs	r3, r3, #1
 800633e:	b2db      	uxtb	r3, r3
 8006340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006344:	b2da      	uxtb	r2, r3
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80063ba:	b5b0      	push	{r4, r5, r7, lr}
 80063bc:	b08e      	sub	sp, #56	; 0x38
 80063be:	af04      	add	r7, sp, #16
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80063c4:	2300      	movs	r3, #0
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2203      	movs	r2, #3
 80063cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d02e      	beq.n	8006436 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063de:	d106      	bne.n	80063ee <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	639a      	str	r2, [r3, #56]	; 0x38
 80063ec:	e029      	b.n	8006442 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063f4:	d10a      	bne.n	800640c <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fa98 	bl	800692c <SD_WideBus_Enable>
 80063fc:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	639a      	str	r2, [r3, #56]	; 0x38
 800640a:	e01a      	b.n	8006442 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10a      	bne.n	8006428 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fad7 	bl	80069c6 <SD_WideBus_Disable>
 8006418:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	431a      	orrs	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	639a      	str	r2, [r3, #56]	; 0x38
 8006426:	e00c      	b.n	8006442 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	639a      	str	r2, [r3, #56]	; 0x38
 8006434:	e005      	b.n	8006442 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00a      	beq.n	8006460 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006452:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e024      	b.n	80064aa <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681d      	ldr	r5, [r3, #0]
 8006486:	466c      	mov	r4, sp
 8006488:	f107 0318 	add.w	r3, r7, #24
 800648c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006490:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006494:	f107 030c 	add.w	r3, r7, #12
 8006498:	cb0e      	ldmia	r3, {r1, r2, r3}
 800649a:	4628      	mov	r0, r5
 800649c:	f001 fc30 	bl	8007d00 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3728      	adds	r7, #40	; 0x28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bdb0      	pop	{r4, r5, r7, pc}

080064b2 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b086      	sub	sp, #24
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80064ba:	2304      	movs	r3, #4
 80064bc:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80064be:	2300      	movs	r3, #0
 80064c0:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80064c6:	f107 030c 	add.w	r3, r7, #12
 80064ca:	4619      	mov	r1, r3
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fa03 	bl	80068d8 <SD_SendStatus>
 80064d2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d005      	beq.n	80064e6 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	431a      	orrs	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	0a5b      	lsrs	r3, r3, #9
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	f003 030f 	and.w	r3, r3, #15
 80064f0:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 80064f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006508:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651c:	2b00      	cmp	r3, #0
 800651e:	d127      	bne.n	8006570 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f7ff ffc6 	bl	80064b2 <HAL_SD_GetCardState>
 8006526:	4603      	mov	r3, r0
 8006528:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006538:	7afb      	ldrb	r3, [r7, #11]
 800653a:	2b06      	cmp	r3, #6
 800653c:	d002      	beq.n	8006544 <SD_DMATxAbort+0x48>
 800653e:	7afb      	ldrb	r3, [r7, #11]
 8006540:	2b05      	cmp	r3, #5
 8006542:	d115      	bne.n	8006570 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4618      	mov	r0, r3
 800654a:	f001 fd6b 	bl	8008024 <SDMMC_CmdStopTransfer>
 800654e:	4602      	mov	r2, r0
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006554:	431a      	orrs	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <SD_DMATxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f7ff fcca 	bl	8005efc <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 8006568:	e002      	b.n	8006570 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f7ff fcbc 	bl	8005ee8 <HAL_SD_ErrorCallback>
}
 8006570:	bf00      	nop
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006584:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006598:	2b00      	cmp	r3, #0
 800659a:	d127      	bne.n	80065ec <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f7ff ff88 	bl	80064b2 <HAL_SD_GetCardState>
 80065a2:	4603      	mov	r3, r0
 80065a4:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80065b4:	7afb      	ldrb	r3, [r7, #11]
 80065b6:	2b06      	cmp	r3, #6
 80065b8:	d002      	beq.n	80065c0 <SD_DMARxAbort+0x48>
 80065ba:	7afb      	ldrb	r3, [r7, #11]
 80065bc:	2b05      	cmp	r3, #5
 80065be:	d115      	bne.n	80065ec <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f001 fd2d 	bl	8008024 <SDMMC_CmdStopTransfer>
 80065ca:	4602      	mov	r2, r0
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d0:	431a      	orrs	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <SD_DMARxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f7ff fc8c 	bl	8005efc <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 80065e4:	e002      	b.n	80065ec <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f7ff fc7e 	bl	8005ee8 <HAL_SD_ErrorCallback>
}
 80065ec:	bf00      	nop
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80065f4:	b5b0      	push	{r4, r5, r7, lr}
 80065f6:	b094      	sub	sp, #80	; 0x50
 80065f8:	af04      	add	r7, sp, #16
 80065fa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80065fc:	2300      	movs	r3, #0
 80065fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8006600:	2301      	movs	r3, #1
 8006602:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4618      	mov	r0, r3
 800660a:	f001 fbd0 	bl	8007dae <SDIO_GetPowerState>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d102      	bne.n	800661a <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006614:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006618:	e0b2      	b.n	8006780 <SD_InitCard+0x18c>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661e:	2b03      	cmp	r3, #3
 8006620:	d02f      	beq.n	8006682 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4618      	mov	r0, r3
 8006628:	f001 fe16 	bl	8008258 <SDMMC_CmdSendCID>
 800662c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800662e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <SD_InitCard+0x44>
    {
      return errorstate;
 8006634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006636:	e0a3      	b.n	8006780 <SD_InitCard+0x18c>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2100      	movs	r1, #0
 800663e:	4618      	mov	r0, r3
 8006640:	f001 fbfa 	bl	8007e38 <SDIO_GetResponse>
 8006644:	4602      	mov	r2, r0
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2104      	movs	r1, #4
 8006650:	4618      	mov	r0, r3
 8006652:	f001 fbf1 	bl	8007e38 <SDIO_GetResponse>
 8006656:	4602      	mov	r2, r0
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2108      	movs	r1, #8
 8006662:	4618      	mov	r0, r3
 8006664:	f001 fbe8 	bl	8007e38 <SDIO_GetResponse>
 8006668:	4602      	mov	r2, r0
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	210c      	movs	r1, #12
 8006674:	4618      	mov	r0, r3
 8006676:	f001 fbdf 	bl	8007e38 <SDIO_GetResponse>
 800667a:	4602      	mov	r2, r0
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006686:	2b03      	cmp	r3, #3
 8006688:	d00d      	beq.n	80066a6 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f107 020e 	add.w	r2, r7, #14
 8006692:	4611      	mov	r1, r2
 8006694:	4618      	mov	r0, r3
 8006696:	f001 fe20 	bl	80082da <SDMMC_CmdSetRelAdd>
 800669a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800669c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <SD_InitCard+0xb2>
    {
      return errorstate;
 80066a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a4:	e06c      	b.n	8006780 <SD_InitCard+0x18c>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d036      	beq.n	800671c <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80066ae:	89fb      	ldrh	r3, [r7, #14]
 80066b0:	461a      	mov	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066be:	041b      	lsls	r3, r3, #16
 80066c0:	4619      	mov	r1, r3
 80066c2:	4610      	mov	r0, r2
 80066c4:	f001 fde8 	bl	8008298 <SDMMC_CmdSendCSD>
 80066c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80066ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <SD_InitCard+0xe0>
    {
      return errorstate;
 80066d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d2:	e055      	b.n	8006780 <SD_InitCard+0x18c>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2100      	movs	r1, #0
 80066da:	4618      	mov	r0, r3
 80066dc:	f001 fbac 	bl	8007e38 <SDIO_GetResponse>
 80066e0:	4602      	mov	r2, r0
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2104      	movs	r1, #4
 80066ec:	4618      	mov	r0, r3
 80066ee:	f001 fba3 	bl	8007e38 <SDIO_GetResponse>
 80066f2:	4602      	mov	r2, r0
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2108      	movs	r1, #8
 80066fe:	4618      	mov	r0, r3
 8006700:	f001 fb9a 	bl	8007e38 <SDIO_GetResponse>
 8006704:	4602      	mov	r2, r0
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	210c      	movs	r1, #12
 8006710:	4618      	mov	r0, r3
 8006712:	f001 fb91 	bl	8007e38 <SDIO_GetResponse>
 8006716:	4602      	mov	r2, r0
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2104      	movs	r1, #4
 8006722:	4618      	mov	r0, r3
 8006724:	f001 fb88 	bl	8007e38 <SDIO_GetResponse>
 8006728:	4603      	mov	r3, r0
 800672a:	0d1a      	lsrs	r2, r3, #20
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8006730:	f107 0310 	add.w	r3, r7, #16
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff fbea 	bl	8005f10 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6819      	ldr	r1, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006744:	041b      	lsls	r3, r3, #16
 8006746:	2200      	movs	r2, #0
 8006748:	461c      	mov	r4, r3
 800674a:	4615      	mov	r5, r2
 800674c:	4622      	mov	r2, r4
 800674e:	462b      	mov	r3, r5
 8006750:	4608      	mov	r0, r1
 8006752:	f001 fc8b 	bl	800806c <SDMMC_CmdSelDesel>
 8006756:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <SD_InitCard+0x16e>
  {
    return errorstate;
 800675e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006760:	e00e      	b.n	8006780 <SD_InitCard+0x18c>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681d      	ldr	r5, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	466c      	mov	r4, sp
 800676a:	f103 0210 	add.w	r2, r3, #16
 800676e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006774:	3304      	adds	r3, #4
 8006776:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006778:	4628      	mov	r0, r5
 800677a:	f001 fac1 	bl	8007d00 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3740      	adds	r7, #64	; 0x40
 8006784:	46bd      	mov	sp, r7
 8006786:	bdb0      	pop	{r4, r5, r7, pc}

08006788 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	617b      	str	r3, [r7, #20]
 8006798:	2300      	movs	r3, #0
 800679a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800679c:	2300      	movs	r3, #0
 800679e:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f001 fc86 	bl	80080b6 <SDMMC_CmdGoIdleState>
 80067aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <SD_PowerON+0x2e>
  {
    return errorstate;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	e08c      	b.n	80068d0 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f001 fc9b 	bl	80080f6 <SDMMC_CmdOperCond>
 80067c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d03d      	beq.n	8006844 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 80067ce:	e032      	b.n	8006836 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	60ba      	str	r2, [r7, #8]
 80067d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067da:	4293      	cmp	r3, r2
 80067dc:	d102      	bne.n	80067e4 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80067de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067e2:	e075      	b.n	80068d0 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2100      	movs	r1, #0
 80067ea:	4618      	mov	r0, r3
 80067ec:	f001 fca4 	bl	8008138 <SDMMC_CmdAppCommand>
 80067f0:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80067fc:	e068      	b.n	80068d0 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2100      	movs	r1, #0
 8006804:	4618      	mov	r0, r3
 8006806:	f001 fcbb 	bl	8008180 <SDMMC_CmdAppOperCommand>
 800680a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006812:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006816:	e05b      	b.n	80068d0 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2100      	movs	r1, #0
 800681e:	4618      	mov	r0, r3
 8006820:	f001 fb0a 	bl	8007e38 <SDIO_GetResponse>
 8006824:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	0fdb      	lsrs	r3, r3, #31
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <SD_PowerON+0xaa>
 800682e:	2301      	movs	r3, #1
 8006830:	e000      	b.n	8006834 <SD_PowerON+0xac>
 8006832:	2300      	movs	r3, #0
 8006834:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d0c9      	beq.n	80067d0 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	645a      	str	r2, [r3, #68]	; 0x44
 8006842:	e044      	b.n	80068ce <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800684a:	e031      	b.n	80068b0 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	60ba      	str	r2, [r7, #8]
 8006852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006856:	4293      	cmp	r3, r2
 8006858:	d102      	bne.n	8006860 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800685a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800685e:	e037      	b.n	80068d0 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2100      	movs	r1, #0
 8006866:	4618      	mov	r0, r3
 8006868:	f001 fc66 	bl	8008138 <SDMMC_CmdAppCommand>
 800686c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <SD_PowerON+0xf0>
      {
        return errorstate;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	e02b      	b.n	80068d0 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006880:	4618      	mov	r0, r3
 8006882:	f001 fc7d 	bl	8008180 <SDMMC_CmdAppOperCommand>
 8006886:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <SD_PowerON+0x10a>
      {
        return errorstate;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	e01e      	b.n	80068d0 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2100      	movs	r1, #0
 8006898:	4618      	mov	r0, r3
 800689a:	f001 facd 	bl	8007e38 <SDIO_GetResponse>
 800689e:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	0fdb      	lsrs	r3, r3, #31
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d101      	bne.n	80068ac <SD_PowerON+0x124>
 80068a8:	2301      	movs	r3, #1
 80068aa:	e000      	b.n	80068ae <SD_PowerON+0x126>
 80068ac:	2300      	movs	r3, #0
 80068ae:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0ca      	beq.n	800684c <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	645a      	str	r2, [r3, #68]	; 0x44
 80068c6:	e002      	b.n	80068ce <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80068e2:	2300      	movs	r3, #0
 80068e4:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d102      	bne.n	80068f2 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 80068ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068f0:	e018      	b.n	8006924 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068fa:	041b      	lsls	r3, r3, #16
 80068fc:	4619      	mov	r1, r3
 80068fe:	4610      	mov	r0, r2
 8006900:	f001 fd0e 	bl	8008320 <SDMMC_CmdSendStatus>
 8006904:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <SD_SendStatus+0x38>
  {
    return errorstate;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	e009      	b.n	8006924 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2100      	movs	r1, #0
 8006916:	4618      	mov	r0, r3
 8006918:	f001 fa8e 	bl	8007e38 <SDIO_GetResponse>
 800691c:	4602      	mov	r2, r0
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006934:	2300      	movs	r3, #0
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	2300      	movs	r3, #0
 800693a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800693c:	2300      	movs	r3, #0
 800693e:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2100      	movs	r1, #0
 8006946:	4618      	mov	r0, r3
 8006948:	f001 fa76 	bl	8007e38 <SDIO_GetResponse>
 800694c:	4603      	mov	r3, r0
 800694e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006952:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006956:	d102      	bne.n	800695e <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006958:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800695c:	e02f      	b.n	80069be <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800695e:	f107 030c 	add.w	r3, r7, #12
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f87b 	bl	8006a60 <SD_FindSCR>
 800696a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	e023      	b.n	80069be <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01c      	beq.n	80069ba <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006988:	041b      	lsls	r3, r3, #16
 800698a:	4619      	mov	r1, r3
 800698c:	4610      	mov	r0, r2
 800698e:	f001 fbd3 	bl	8008138 <SDMMC_CmdAppCommand>
 8006992:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	e00f      	b.n	80069be <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2102      	movs	r1, #2
 80069a4:	4618      	mov	r0, r3
 80069a6:	f001 fc10 	bl	80081ca <SDMMC_CmdBusWidth>
 80069aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	e003      	b.n	80069be <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 80069b6:	2300      	movs	r3, #0
 80069b8:	e001      	b.n	80069be <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80069ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b086      	sub	sp, #24
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80069ce:	2300      	movs	r3, #0
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	2300      	movs	r3, #0
 80069d4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80069d6:	2300      	movs	r3, #0
 80069d8:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2100      	movs	r1, #0
 80069e0:	4618      	mov	r0, r3
 80069e2:	f001 fa29 	bl	8007e38 <SDIO_GetResponse>
 80069e6:	4603      	mov	r3, r0
 80069e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069f0:	d102      	bne.n	80069f8 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80069f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069f6:	e02f      	b.n	8006a58 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80069f8:	f107 030c 	add.w	r3, r7, #12
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f82e 	bl	8006a60 <SD_FindSCR>
 8006a04:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	e023      	b.n	8006a58 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d01c      	beq.n	8006a54 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a22:	041b      	lsls	r3, r3, #16
 8006a24:	4619      	mov	r1, r3
 8006a26:	4610      	mov	r0, r2
 8006a28:	f001 fb86 	bl	8008138 <SDMMC_CmdAppCommand>
 8006a2c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	e00f      	b.n	8006a58 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f001 fbc3 	bl	80081ca <SDMMC_CmdBusWidth>
 8006a44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	e003      	b.n	8006a58 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8006a50:	2300      	movs	r3, #0
 8006a52:	e001      	b.n	8006a58 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006a54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006a60:	b590      	push	{r4, r7, lr}
 8006a62:	b08f      	sub	sp, #60	; 0x3c
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8006a6e:	f7fc fab5 	bl	8002fdc <HAL_GetTick>
 8006a72:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006a78:	2300      	movs	r3, #0
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2108      	movs	r1, #8
 8006a86:	4618      	mov	r0, r3
 8006a88:	f001 fa17 	bl	8007eba <SDMMC_CmdBlockLength>
 8006a8c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a96:	e0a8      	b.n	8006bea <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa0:	041b      	lsls	r3, r3, #16
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	f001 fb47 	bl	8008138 <SDMMC_CmdAppCommand>
 8006aaa:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	e099      	b.n	8006bea <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aba:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8006abc:	2308      	movs	r3, #8
 8006abe:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006ac0:	2330      	movs	r3, #48	; 0x30
 8006ac2:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006acc:	2301      	movs	r3, #1
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f107 0214 	add.w	r2, r7, #20
 8006ad8:	4611      	mov	r1, r2
 8006ada:	4618      	mov	r0, r3
 8006adc:	f001 f9c1 	bl	8007e62 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f001 fb94 	bl	8008212 <SDMMC_CmdSendSCR>
 8006aea:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8006aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d022      	beq.n	8006b38 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	e079      	b.n	8006bea <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00e      	beq.n	8006b22 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6819      	ldr	r1, [r3, #0]
 8006b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	f107 020c 	add.w	r2, r7, #12
 8006b10:	18d4      	adds	r4, r2, r3
 8006b12:	4608      	mov	r0, r1
 8006b14:	f001 f91f 	bl	8007d56 <SDIO_ReadFIFO>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	6023      	str	r3, [r4, #0]
      index++;
 8006b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1e:	3301      	adds	r3, #1
 8006b20:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006b22:	f7fc fa5b 	bl	8002fdc <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b30:	d102      	bne.n	8006b38 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006b32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b36:	e058      	b.n	8006bea <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b3e:	f240 432a 	movw	r3, #1066	; 0x42a
 8006b42:	4013      	ands	r3, r2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0d6      	beq.n	8006af6 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d005      	beq.n	8006b62 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2208      	movs	r2, #8
 8006b5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006b5e:	2308      	movs	r3, #8
 8006b60:	e043      	b.n	8006bea <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d005      	beq.n	8006b7c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2202      	movs	r2, #2
 8006b76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e036      	b.n	8006bea <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b82:	f003 0320 	and.w	r3, r3, #32
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d005      	beq.n	8006b96 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8006b92:	2320      	movs	r3, #32
 8006b94:	e029      	b.n	8006bea <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006b9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	061a      	lsls	r2, r3, #24
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	021b      	lsls	r3, r3, #8
 8006ba8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006bac:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	0a1b      	lsrs	r3, r3, #8
 8006bb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8006bb6:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8006bc2:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8006bc4:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	061a      	lsls	r2, r3, #24
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	021b      	lsls	r3, r3, #8
 8006bce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006bd2:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	0a1b      	lsrs	r3, r3, #8
 8006bd8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8006bdc:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	0e1b      	lsrs	r3, r3, #24
 8006be2:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	373c      	adds	r7, #60	; 0x3c
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd90      	pop	{r4, r7, pc}

08006bf2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006bf2:	b590      	push	{r4, r7, lr}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c02:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 8006c04:	2300      	movs	r3, #0
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	e00d      	b.n	8006c26 <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6819      	ldr	r1, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	18d4      	adds	r4, r2, r3
 8006c16:	4608      	mov	r0, r1
 8006c18:	f001 f89d 	bl	8007d56 <SDIO_ReadFIFO>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	3301      	adds	r3, #1
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b07      	cmp	r3, #7
 8006c2a:	d9ee      	bls.n	8006c0a <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c30:	f103 0220 	add.w	r2, r3, #32
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd90      	pop	{r4, r7, pc}

08006c42 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8006c54:	2300      	movs	r3, #0
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	e00b      	b.n	8006c72 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6818      	ldr	r0, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	4413      	add	r3, r2
 8006c66:	4619      	mov	r1, r3
 8006c68:	f001 f882 	bl	8007d70 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	60fb      	str	r3, [r7, #12]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2b07      	cmp	r3, #7
 8006c76:	d9f0      	bls.n	8006c5a <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	f103 0220 	add.w	r2, r3, #32
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b082      	sub	sp, #8
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e01d      	b.n	8006cdc <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d106      	bne.n	8006cba <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f002 fb8d 	bl	80093d4 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3304      	adds	r3, #4
 8006cca:	4619      	mov	r1, r3
 8006ccc:	4610      	mov	r0, r2
 8006cce:	f000 f955 	bl	8006f7c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <HAL_TIM_Base_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68da      	ldr	r2, [r3, #12]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0201 	orr.w	r2, r2, #1
 8006cfa:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0201 	orr.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b082      	sub	sp, #8
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d122      	bne.n	8006d76 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d11b      	bne.n	8006d76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f06f 0202 	mvn.w	r2, #2
 8006d46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	f003 0303 	and.w	r3, r3, #3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f8ee 	bl	8006f3e <HAL_TIM_IC_CaptureCallback>
 8006d62:	e005      	b.n	8006d70 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f8e0 	bl	8006f2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f8f1 	bl	8006f52 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	f003 0304 	and.w	r3, r3, #4
 8006d80:	2b04      	cmp	r3, #4
 8006d82:	d122      	bne.n	8006dca <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f003 0304 	and.w	r3, r3, #4
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	d11b      	bne.n	8006dca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f06f 0204 	mvn.w	r2, #4
 8006d9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f8c4 	bl	8006f3e <HAL_TIM_IC_CaptureCallback>
 8006db6:	e005      	b.n	8006dc4 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f8b6 	bl	8006f2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f8c7 	bl	8006f52 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	f003 0308 	and.w	r3, r3, #8
 8006dd4:	2b08      	cmp	r3, #8
 8006dd6:	d122      	bne.n	8006e1e <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f003 0308 	and.w	r3, r3, #8
 8006de2:	2b08      	cmp	r3, #8
 8006de4:	d11b      	bne.n	8006e1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f06f 0208 	mvn.w	r2, #8
 8006dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2204      	movs	r2, #4
 8006df4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	f003 0303 	and.w	r3, r3, #3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d003      	beq.n	8006e0c <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f89a 	bl	8006f3e <HAL_TIM_IC_CaptureCallback>
 8006e0a:	e005      	b.n	8006e18 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f88c 	bl	8006f2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f89d 	bl	8006f52 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	f003 0310 	and.w	r3, r3, #16
 8006e28:	2b10      	cmp	r3, #16
 8006e2a:	d122      	bne.n	8006e72 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f003 0310 	and.w	r3, r3, #16
 8006e36:	2b10      	cmp	r3, #16
 8006e38:	d11b      	bne.n	8006e72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f06f 0210 	mvn.w	r2, #16
 8006e42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2208      	movs	r2, #8
 8006e48:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f870 	bl	8006f3e <HAL_TIM_IC_CaptureCallback>
 8006e5e:	e005      	b.n	8006e6c <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f862 	bl	8006f2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f873 	bl	8006f52 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d10e      	bne.n	8006e9e <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d107      	bne.n	8006e9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f06f 0201 	mvn.w	r2, #1
 8006e96:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7fc f80f 	bl	8002ebc <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea8:	2b80      	cmp	r3, #128	; 0x80
 8006eaa:	d10e      	bne.n	8006eca <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb6:	2b80      	cmp	r3, #128	; 0x80
 8006eb8:	d107      	bne.n	8006eca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ec2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f90d 	bl	80070e4 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed4:	2b40      	cmp	r3, #64	; 0x40
 8006ed6:	d10e      	bne.n	8006ef6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee2:	2b40      	cmp	r3, #64	; 0x40
 8006ee4:	d107      	bne.n	8006ef6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006eee:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f838 	bl	8006f66 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	f003 0320 	and.w	r3, r3, #32
 8006f00:	2b20      	cmp	r3, #32
 8006f02:	d10e      	bne.n	8006f22 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b20      	cmp	r3, #32
 8006f10:	d107      	bne.n	8006f22 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f06f 0220 	mvn.w	r2, #32
 8006f1a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f8d7 	bl	80070d0 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8006f22:	bf00      	nop
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f32:	bf00      	nop
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f46:	bf00      	nop
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f6e:	bf00      	nop
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
	...

08006f7c <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a44      	ldr	r2, [pc, #272]	; (80070a4 <TIM_Base_SetConfig+0x128>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d013      	beq.n	8006fc0 <TIM_Base_SetConfig+0x44>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9e:	d00f      	beq.n	8006fc0 <TIM_Base_SetConfig+0x44>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a41      	ldr	r2, [pc, #260]	; (80070a8 <TIM_Base_SetConfig+0x12c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00b      	beq.n	8006fc0 <TIM_Base_SetConfig+0x44>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a40      	ldr	r2, [pc, #256]	; (80070ac <TIM_Base_SetConfig+0x130>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d007      	beq.n	8006fc0 <TIM_Base_SetConfig+0x44>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a3f      	ldr	r2, [pc, #252]	; (80070b0 <TIM_Base_SetConfig+0x134>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d003      	beq.n	8006fc0 <TIM_Base_SetConfig+0x44>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a3e      	ldr	r2, [pc, #248]	; (80070b4 <TIM_Base_SetConfig+0x138>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d101      	bne.n	8006fc4 <TIM_Base_SetConfig+0x48>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e000      	b.n	8006fc6 <TIM_Base_SetConfig+0x4a>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d008      	beq.n	8006fdc <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a31      	ldr	r2, [pc, #196]	; (80070a4 <TIM_Base_SetConfig+0x128>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d02b      	beq.n	800703c <TIM_Base_SetConfig+0xc0>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fea:	d027      	beq.n	800703c <TIM_Base_SetConfig+0xc0>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a2e      	ldr	r2, [pc, #184]	; (80070a8 <TIM_Base_SetConfig+0x12c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d023      	beq.n	800703c <TIM_Base_SetConfig+0xc0>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a2d      	ldr	r2, [pc, #180]	; (80070ac <TIM_Base_SetConfig+0x130>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d01f      	beq.n	800703c <TIM_Base_SetConfig+0xc0>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a2c      	ldr	r2, [pc, #176]	; (80070b0 <TIM_Base_SetConfig+0x134>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d01b      	beq.n	800703c <TIM_Base_SetConfig+0xc0>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a2b      	ldr	r2, [pc, #172]	; (80070b4 <TIM_Base_SetConfig+0x138>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d017      	beq.n	800703c <TIM_Base_SetConfig+0xc0>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a2a      	ldr	r2, [pc, #168]	; (80070b8 <TIM_Base_SetConfig+0x13c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d013      	beq.n	800703c <TIM_Base_SetConfig+0xc0>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a29      	ldr	r2, [pc, #164]	; (80070bc <TIM_Base_SetConfig+0x140>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d00f      	beq.n	800703c <TIM_Base_SetConfig+0xc0>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a28      	ldr	r2, [pc, #160]	; (80070c0 <TIM_Base_SetConfig+0x144>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d00b      	beq.n	800703c <TIM_Base_SetConfig+0xc0>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a27      	ldr	r2, [pc, #156]	; (80070c4 <TIM_Base_SetConfig+0x148>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d007      	beq.n	800703c <TIM_Base_SetConfig+0xc0>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a26      	ldr	r2, [pc, #152]	; (80070c8 <TIM_Base_SetConfig+0x14c>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d003      	beq.n	800703c <TIM_Base_SetConfig+0xc0>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a25      	ldr	r2, [pc, #148]	; (80070cc <TIM_Base_SetConfig+0x150>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d101      	bne.n	8007040 <TIM_Base_SetConfig+0xc4>
 800703c:	2301      	movs	r3, #1
 800703e:	e000      	b.n	8007042 <TIM_Base_SetConfig+0xc6>
 8007040:	2300      	movs	r3, #0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d008      	beq.n	8007058 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800704c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	4313      	orrs	r3, r2
 8007056:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	689a      	ldr	r2, [r3, #8]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a0c      	ldr	r2, [pc, #48]	; (80070a4 <TIM_Base_SetConfig+0x128>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d003      	beq.n	800707e <TIM_Base_SetConfig+0x102>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a0e      	ldr	r2, [pc, #56]	; (80070b4 <TIM_Base_SetConfig+0x138>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d101      	bne.n	8007082 <TIM_Base_SetConfig+0x106>
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <TIM_Base_SetConfig+0x108>
 8007082:	2300      	movs	r3, #0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d003      	beq.n	8007090 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	615a      	str	r2, [r3, #20]
}
 8007096:	bf00      	nop
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	40010000 	.word	0x40010000
 80070a8:	40000400 	.word	0x40000400
 80070ac:	40000800 	.word	0x40000800
 80070b0:	40000c00 	.word	0x40000c00
 80070b4:	40010400 	.word	0x40010400
 80070b8:	40014000 	.word	0x40014000
 80070bc:	40014400 	.word	0x40014400
 80070c0:	40014800 	.word	0x40014800
 80070c4:	40001800 	.word	0x40001800
 80070c8:	40001c00 	.word	0x40001c00
 80070cc:	40002000 	.word	0x40002000

080070d0 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e03f      	b.n	800718a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d106      	bne.n	8007124 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f002 f97a 	bl	8009418 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2224      	movs	r2, #36	; 0x24
 8007128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800713a:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fb9f 	bl	8007880 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007150:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	695a      	ldr	r2, [r3, #20]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007160:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007170:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2220      	movs	r2, #32
 800717c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2220      	movs	r2, #32
 8007184:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b088      	sub	sp, #32
 8007196:	af02      	add	r7, sp, #8
 8007198:	60f8      	str	r0, [r7, #12]
 800719a:	60b9      	str	r1, [r7, #8]
 800719c:	603b      	str	r3, [r7, #0]
 800719e:	4613      	mov	r3, r2
 80071a0:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	f040 8083 	bne.w	80072ba <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL ) || (Size == 0)) 
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <HAL_UART_Transmit+0x2e>
 80071ba:	88fb      	ldrh	r3, [r7, #6]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e07b      	b.n	80072bc <HAL_UART_Transmit+0x12a>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d101      	bne.n	80071d2 <HAL_UART_Transmit+0x40>
 80071ce:	2302      	movs	r3, #2
 80071d0:	e074      	b.n	80072bc <HAL_UART_Transmit+0x12a>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2221      	movs	r2, #33	; 0x21
 80071e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80071e8:	f7fb fef8 	bl	8002fdc <HAL_GetTick>
 80071ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	88fa      	ldrh	r2, [r7, #6]
 80071f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	88fa      	ldrh	r2, [r7, #6]
 80071f8:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80071fa:	e042      	b.n	8007282 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007200:	b29b      	uxth	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	b29a      	uxth	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007212:	d122      	bne.n	800725a <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2200      	movs	r2, #0
 800721c:	2180      	movs	r1, #128	; 0x80
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 f9ac 	bl	800757c <UART_WaitOnFlagUntilTimeout>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e046      	b.n	80072bc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007240:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d103      	bne.n	8007252 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	3302      	adds	r3, #2
 800724e:	60bb      	str	r3, [r7, #8]
 8007250:	e017      	b.n	8007282 <HAL_UART_Transmit+0xf0>
        }
        else
        { 
          pData +=1U;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	3301      	adds	r3, #1
 8007256:	60bb      	str	r3, [r7, #8]
 8007258:	e013      	b.n	8007282 <HAL_UART_Transmit+0xf0>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2200      	movs	r2, #0
 8007262:	2180      	movs	r1, #128	; 0x80
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 f989 	bl	800757c <UART_WaitOnFlagUntilTimeout>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e023      	b.n	80072bc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	1c5a      	adds	r2, r3, #1
 8007278:	60ba      	str	r2, [r7, #8]
 800727a:	781a      	ldrb	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007286:	b29b      	uxth	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1b7      	bne.n	80071fc <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	2200      	movs	r2, #0
 8007294:	2140      	movs	r1, #64	; 0x40
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 f970 	bl	800757c <UART_WaitOnFlagUntilTimeout>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <HAL_UART_Transmit+0x114>
    { 
      return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e00a      	b.n	80072bc <HAL_UART_Transmit+0x12a>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	e000      	b.n	80072bc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80072ba:	2302      	movs	r3, #2
  }
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	4613      	mov	r3, r2
 80072d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b20      	cmp	r3, #32
 80072dc:	d138      	bne.n	8007350 <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <HAL_UART_Receive_IT+0x26>
 80072e4:	88fb      	ldrh	r3, [r7, #6]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d101      	bne.n	80072ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e031      	b.n	8007352 <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d101      	bne.n	80072fc <HAL_UART_Receive_IT+0x38>
 80072f8:	2302      	movs	r3, #2
 80072fa:	e02a      	b.n	8007352 <HAL_UART_Receive_IT+0x8e>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	88fa      	ldrh	r2, [r7, #6]
 800730e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	88fa      	ldrh	r2, [r7, #6]
 8007314:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2222      	movs	r2, #34	; 0x22
 8007320:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	695a      	ldr	r2, [r3, #20]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f042 0201 	orr.w	r2, r2, #1
 800733a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800734a:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	e000      	b.n	8007352 <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 8007350:	2302      	movs	r3, #2
  }
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
	...

08007360 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b088      	sub	sp, #32
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8007380:	2300      	movs	r3, #0
 8007382:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8007384:	2300      	movs	r3, #0
 8007386:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	f003 030f 	and.w	r3, r3, #15
 800738e:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10d      	bne.n	80073b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	f003 0320 	and.w	r3, r3, #32
 800739c:	2b00      	cmp	r3, #0
 800739e:	d008      	beq.n	80073b2 <HAL_UART_IRQHandler+0x52>
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	f003 0320 	and.w	r3, r3, #32
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f9d0 	bl	8007750 <UART_Receive_IT>
      return;
 80073b0:	e0cb      	b.n	800754a <HAL_UART_IRQHandler+0x1ea>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 80ab 	beq.w	8007510 <HAL_UART_IRQHandler+0x1b0>
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d105      	bne.n	80073d0 <HAL_UART_IRQHandler+0x70>
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 80a0 	beq.w	8007510 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <HAL_UART_IRQHandler+0x90>
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d005      	beq.n	80073f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e8:	f043 0201 	orr.w	r2, r3, #1
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	f003 0304 	and.w	r3, r3, #4
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <HAL_UART_IRQHandler+0xb0>
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d005      	beq.n	8007410 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007408:	f043 0202 	orr.w	r2, r3, #2
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <HAL_UART_IRQHandler+0xd0>
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d005      	beq.n	8007430 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007428:	f043 0204 	orr.w	r2, r3, #4
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <HAL_UART_IRQHandler+0xf0>
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b00      	cmp	r3, #0
 8007442:	d005      	beq.n	8007450 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007448:	f043 0208 	orr.w	r2, r3, #8
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007454:	2b00      	cmp	r3, #0
 8007456:	d077      	beq.n	8007548 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b00      	cmp	r3, #0
 8007460:	d007      	beq.n	8007472 <HAL_UART_IRQHandler+0x112>
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d002      	beq.n	8007472 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f96f 	bl	8007750 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747c:	2b00      	cmp	r3, #0
 800747e:	bf14      	ite	ne
 8007480:	2301      	movne	r3, #1
 8007482:	2300      	moveq	r3, #0
 8007484:	b2db      	uxtb	r3, r3
 8007486:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748c:	f003 0308 	and.w	r3, r3, #8
 8007490:	2b00      	cmp	r3, #0
 8007492:	d102      	bne.n	800749a <HAL_UART_IRQHandler+0x13a>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d031      	beq.n	80074fe <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f8b8 	bl	8007610 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d023      	beq.n	80074f6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	695a      	ldr	r2, [r3, #20]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074bc:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d013      	beq.n	80074ee <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ca:	4a21      	ldr	r2, [pc, #132]	; (8007550 <HAL_UART_IRQHandler+0x1f0>)
 80074cc:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fb fed6 	bl	8003284 <HAL_DMA_Abort_IT>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d016      	beq.n	800750c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80074e8:	4610      	mov	r0, r2
 80074ea:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ec:	e00e      	b.n	800750c <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f83a 	bl	8007568 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f4:	e00a      	b.n	800750c <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f836 	bl	8007568 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074fc:	e006      	b.n	800750c <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f832 	bl	8007568 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800750a:	e01d      	b.n	8007548 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800750c:	bf00      	nop
    return;
 800750e:	e01b      	b.n	8007548 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007516:	2b00      	cmp	r3, #0
 8007518:	d008      	beq.n	800752c <HAL_UART_IRQHandler+0x1cc>
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f8a5 	bl	8007674 <UART_Transmit_IT>
    return;
 800752a:	e00e      	b.n	800754a <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007532:	2b00      	cmp	r3, #0
 8007534:	d009      	beq.n	800754a <HAL_UART_IRQHandler+0x1ea>
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753c:	2b00      	cmp	r3, #0
 800753e:	d004      	beq.n	800754a <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f8ed 	bl	8007720 <UART_EndTransmit_IT>
    return;
 8007546:	e000      	b.n	800754a <HAL_UART_IRQHandler+0x1ea>
    return;
 8007548:	bf00      	nop
  }
}
 800754a:	3720      	adds	r7, #32
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	0800764d 	.word	0x0800764d

08007554 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	603b      	str	r3, [r7, #0]
 8007588:	4613      	mov	r3, r2
 800758a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800758c:	e02c      	b.n	80075e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007594:	d028      	beq.n	80075e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d007      	beq.n	80075ac <UART_WaitOnFlagUntilTimeout+0x30>
 800759c:	f7fb fd1e 	bl	8002fdc <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	69ba      	ldr	r2, [r7, #24]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d21d      	bcs.n	80075e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80075ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	695a      	ldr	r2, [r3, #20]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f022 0201 	bic.w	r2, r2, #1
 80075ca:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2220      	movs	r2, #32
 80075d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e00f      	b.n	8007608 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	4013      	ands	r3, r2
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	bf0c      	ite	eq
 80075f8:	2301      	moveq	r3, #1
 80075fa:	2300      	movne	r3, #0
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	461a      	mov	r2, r3
 8007600:	79fb      	ldrb	r3, [r7, #7]
 8007602:	429a      	cmp	r2, r3
 8007604:	d0c3      	beq.n	800758e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68da      	ldr	r2, [r3, #12]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007626:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	695a      	ldr	r2, [r3, #20]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0201 	bic.w	r2, r2, #1
 8007636:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2220      	movs	r2, #32
 800763c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f7ff ff7e 	bl	8007568 <HAL_UART_ErrorCallback>
}
 800766c:	bf00      	nop
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b21      	cmp	r3, #33	; 0x21
 8007686:	d144      	bne.n	8007712 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007690:	d11a      	bne.n	80076c8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	461a      	mov	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076a6:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d105      	bne.n	80076bc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a1b      	ldr	r3, [r3, #32]
 80076b4:	1c9a      	adds	r2, r3, #2
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	621a      	str	r2, [r3, #32]
 80076ba:	e00e      	b.n	80076da <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a1b      	ldr	r3, [r3, #32]
 80076c0:	1c5a      	adds	r2, r3, #1
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	621a      	str	r2, [r3, #32]
 80076c6:	e008      	b.n	80076da <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a1b      	ldr	r3, [r3, #32]
 80076cc:	1c59      	adds	r1, r3, #1
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	6211      	str	r1, [r2, #32]
 80076d2:	781a      	ldrb	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076de:	b29b      	uxth	r3, r3
 80076e0:	3b01      	subs	r3, #1
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	4619      	mov	r1, r3
 80076e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10f      	bne.n	800770e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68da      	ldr	r2, [r3, #12]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68da      	ldr	r2, [r3, #12]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800770c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	e000      	b.n	8007714 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007712:	2302      	movs	r3, #2
  }
}
 8007714:	4618      	mov	r0, r3
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007736:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2220      	movs	r2, #32
 800773c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7ff ff07 	bl	8007554 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]


  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b22      	cmp	r3, #34	; 0x22
 8007762:	f040 8088 	bne.w	8007876 <UART_Receive_IT+0x126>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800776e:	d123      	bne.n	80077b8 <UART_Receive_IT+0x68>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007774:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10e      	bne.n	800779c <UART_Receive_IT+0x4c>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	b29b      	uxth	r3, r3
 8007786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007794:	1c9a      	adds	r2, r3, #2
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	629a      	str	r2, [r3, #40]	; 0x28
 800779a:	e029      	b.n	80077f0 <UART_Receive_IT+0xa0>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b0:	1c5a      	adds	r2, r3, #1
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	629a      	str	r2, [r3, #40]	; 0x28
 80077b6:	e01b      	b.n	80077f0 <UART_Receive_IT+0xa0>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10a      	bne.n	80077d6 <UART_Receive_IT+0x86>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6858      	ldr	r0, [r3, #4]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ca:	1c59      	adds	r1, r3, #1
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	6291      	str	r1, [r2, #40]	; 0x28
 80077d0:	b2c2      	uxtb	r2, r0
 80077d2:	701a      	strb	r2, [r3, #0]
 80077d4:	e00c      	b.n	80077f0 <UART_Receive_IT+0xa0>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e2:	1c58      	adds	r0, r3, #1
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	6288      	str	r0, [r1, #40]	; 0x28
 80077e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80077ec:	b2d2      	uxtb	r2, r2
 80077ee:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	3b01      	subs	r3, #1
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	4619      	mov	r1, r3
 80077fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007800:	2b00      	cmp	r3, #0
 8007802:	d136      	bne.n	8007872 <UART_Receive_IT+0x122>
    {
        //This allows the buffer to resize based on length of the Ground Station commands over UART
        if((*(huart->pRxBuffPtr-1)!= 0) && (huart->RxXferSize == 4)){
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007808:	3b01      	subs	r3, #1
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d017      	beq.n	8007840 <UART_Receive_IT+0xf0>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007814:	2b04      	cmp	r3, #4
 8007816:	d113      	bne.n	8007840 <UART_Receive_IT+0xf0>
            huart->RxXferCount = *(huart->pRxBuffPtr-1) + 1;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781c:	3b01      	subs	r3, #1
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	b29b      	uxth	r3, r3
 8007822:	3301      	adds	r3, #1
 8007824:	b29a      	uxth	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	85da      	strh	r2, [r3, #46]	; 0x2e
            huart->RxXferSize = *(huart->pRxBuffPtr-1) + 5;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782e:	3b01      	subs	r3, #1
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	b29b      	uxth	r3, r3
 8007834:	3305      	adds	r3, #5
 8007836:	b29a      	uxth	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	859a      	strh	r2, [r3, #44]	; 0x2c
            return HAL_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	e01b      	b.n	8007878 <UART_Receive_IT+0x128>
        }
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800784e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	695a      	ldr	r2, [r3, #20]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 0201 	bic.w	r2, r2, #1
 800785e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7fb fb5f 	bl	8002f2c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	e002      	b.n	8007878 <UART_Receive_IT+0x128>
    }
    return HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	e000      	b.n	8007878 <UART_Receive_IT+0x128>
  }
  else
  {
    return HAL_BUSY;
 8007876:	2302      	movs	r3, #2
  }

#endif
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007880:	b5b0      	push	{r4, r5, r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8007888:	2300      	movs	r3, #0
 800788a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800789a:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80078bc:	f023 030c 	bic.w	r3, r3, #12
 80078c0:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	689a      	ldr	r2, [r3, #8]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	431a      	orrs	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	431a      	orrs	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	4313      	orrs	r3, r2
 80078dc:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078f4:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	69db      	ldr	r3, [r3, #28]
 800790c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007910:	f040 80e4 	bne.w	8007adc <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4aab      	ldr	r2, [pc, #684]	; (8007bc8 <UART_SetConfig+0x348>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d004      	beq.n	8007928 <UART_SetConfig+0xa8>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4aaa      	ldr	r2, [pc, #680]	; (8007bcc <UART_SetConfig+0x34c>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d16c      	bne.n	8007a02 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007928:	f7fd fb52 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 800792c:	4602      	mov	r2, r0
 800792e:	4613      	mov	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	009a      	lsls	r2, r3, #2
 8007936:	441a      	add	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007942:	4aa3      	ldr	r2, [pc, #652]	; (8007bd0 <UART_SetConfig+0x350>)
 8007944:	fba2 2303 	umull	r2, r3, r2, r3
 8007948:	095b      	lsrs	r3, r3, #5
 800794a:	011c      	lsls	r4, r3, #4
 800794c:	f7fd fb40 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 8007950:	4602      	mov	r2, r0
 8007952:	4613      	mov	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	009a      	lsls	r2, r3, #2
 800795a:	441a      	add	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	fbb2 f5f3 	udiv	r5, r2, r3
 8007966:	f7fd fb33 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 800796a:	4602      	mov	r2, r0
 800796c:	4613      	mov	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	009a      	lsls	r2, r3, #2
 8007974:	441a      	add	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	005b      	lsls	r3, r3, #1
 800797c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007980:	4a93      	ldr	r2, [pc, #588]	; (8007bd0 <UART_SetConfig+0x350>)
 8007982:	fba2 2303 	umull	r2, r3, r2, r3
 8007986:	095b      	lsrs	r3, r3, #5
 8007988:	2264      	movs	r2, #100	; 0x64
 800798a:	fb02 f303 	mul.w	r3, r2, r3
 800798e:	1aeb      	subs	r3, r5, r3
 8007990:	00db      	lsls	r3, r3, #3
 8007992:	3332      	adds	r3, #50	; 0x32
 8007994:	4a8e      	ldr	r2, [pc, #568]	; (8007bd0 <UART_SetConfig+0x350>)
 8007996:	fba2 2303 	umull	r2, r3, r2, r3
 800799a:	095b      	lsrs	r3, r3, #5
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80079a2:	441c      	add	r4, r3
 80079a4:	f7fd fb14 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 80079a8:	4602      	mov	r2, r0
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009a      	lsls	r2, r3, #2
 80079b2:	441a      	add	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	fbb2 f5f3 	udiv	r5, r2, r3
 80079be:	f7fd fb07 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 80079c2:	4602      	mov	r2, r0
 80079c4:	4613      	mov	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	009a      	lsls	r2, r3, #2
 80079cc:	441a      	add	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d8:	4a7d      	ldr	r2, [pc, #500]	; (8007bd0 <UART_SetConfig+0x350>)
 80079da:	fba2 2303 	umull	r2, r3, r2, r3
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	2264      	movs	r2, #100	; 0x64
 80079e2:	fb02 f303 	mul.w	r3, r2, r3
 80079e6:	1aeb      	subs	r3, r5, r3
 80079e8:	00db      	lsls	r3, r3, #3
 80079ea:	3332      	adds	r3, #50	; 0x32
 80079ec:	4a78      	ldr	r2, [pc, #480]	; (8007bd0 <UART_SetConfig+0x350>)
 80079ee:	fba2 2303 	umull	r2, r3, r2, r3
 80079f2:	095b      	lsrs	r3, r3, #5
 80079f4:	f003 0207 	and.w	r2, r3, #7
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4422      	add	r2, r4
 80079fe:	609a      	str	r2, [r3, #8]
 8007a00:	e154      	b.n	8007cac <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007a02:	f7fd fac3 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 8007a06:	4602      	mov	r2, r0
 8007a08:	4613      	mov	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009a      	lsls	r2, r3, #2
 8007a10:	441a      	add	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	005b      	lsls	r3, r3, #1
 8007a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a1c:	4a6c      	ldr	r2, [pc, #432]	; (8007bd0 <UART_SetConfig+0x350>)
 8007a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a22:	095b      	lsrs	r3, r3, #5
 8007a24:	011c      	lsls	r4, r3, #4
 8007a26:	f7fd fab1 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	009a      	lsls	r2, r3, #2
 8007a34:	441a      	add	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	fbb2 f5f3 	udiv	r5, r2, r3
 8007a40:	f7fd faa4 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 8007a44:	4602      	mov	r2, r0
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009a      	lsls	r2, r3, #2
 8007a4e:	441a      	add	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a5a:	4a5d      	ldr	r2, [pc, #372]	; (8007bd0 <UART_SetConfig+0x350>)
 8007a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a60:	095b      	lsrs	r3, r3, #5
 8007a62:	2264      	movs	r2, #100	; 0x64
 8007a64:	fb02 f303 	mul.w	r3, r2, r3
 8007a68:	1aeb      	subs	r3, r5, r3
 8007a6a:	00db      	lsls	r3, r3, #3
 8007a6c:	3332      	adds	r3, #50	; 0x32
 8007a6e:	4a58      	ldr	r2, [pc, #352]	; (8007bd0 <UART_SetConfig+0x350>)
 8007a70:	fba2 2303 	umull	r2, r3, r2, r3
 8007a74:	095b      	lsrs	r3, r3, #5
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a7c:	441c      	add	r4, r3
 8007a7e:	f7fd fa85 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 8007a82:	4602      	mov	r2, r0
 8007a84:	4613      	mov	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	009a      	lsls	r2, r3, #2
 8007a8c:	441a      	add	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	fbb2 f5f3 	udiv	r5, r2, r3
 8007a98:	f7fd fa78 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	009a      	lsls	r2, r3, #2
 8007aa6:	441a      	add	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab2:	4a47      	ldr	r2, [pc, #284]	; (8007bd0 <UART_SetConfig+0x350>)
 8007ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	2264      	movs	r2, #100	; 0x64
 8007abc:	fb02 f303 	mul.w	r3, r2, r3
 8007ac0:	1aeb      	subs	r3, r5, r3
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	3332      	adds	r3, #50	; 0x32
 8007ac6:	4a42      	ldr	r2, [pc, #264]	; (8007bd0 <UART_SetConfig+0x350>)
 8007ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8007acc:	095b      	lsrs	r3, r3, #5
 8007ace:	f003 0207 	and.w	r2, r3, #7
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4422      	add	r2, r4
 8007ad8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8007ada:	e0e7      	b.n	8007cac <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a39      	ldr	r2, [pc, #228]	; (8007bc8 <UART_SetConfig+0x348>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d004      	beq.n	8007af0 <UART_SetConfig+0x270>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a38      	ldr	r2, [pc, #224]	; (8007bcc <UART_SetConfig+0x34c>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d171      	bne.n	8007bd4 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007af0:	f7fd fa6e 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 8007af4:	4602      	mov	r2, r0
 8007af6:	4613      	mov	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	009a      	lsls	r2, r3, #2
 8007afe:	441a      	add	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b0a:	4a31      	ldr	r2, [pc, #196]	; (8007bd0 <UART_SetConfig+0x350>)
 8007b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b10:	095b      	lsrs	r3, r3, #5
 8007b12:	011c      	lsls	r4, r3, #4
 8007b14:	f7fd fa5c 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	009a      	lsls	r2, r3, #2
 8007b22:	441a      	add	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	fbb2 f5f3 	udiv	r5, r2, r3
 8007b2e:	f7fd fa4f 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 8007b32:	4602      	mov	r2, r0
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	009a      	lsls	r2, r3, #2
 8007b3c:	441a      	add	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b48:	4a21      	ldr	r2, [pc, #132]	; (8007bd0 <UART_SetConfig+0x350>)
 8007b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4e:	095b      	lsrs	r3, r3, #5
 8007b50:	2264      	movs	r2, #100	; 0x64
 8007b52:	fb02 f303 	mul.w	r3, r2, r3
 8007b56:	1aeb      	subs	r3, r5, r3
 8007b58:	011b      	lsls	r3, r3, #4
 8007b5a:	3332      	adds	r3, #50	; 0x32
 8007b5c:	4a1c      	ldr	r2, [pc, #112]	; (8007bd0 <UART_SetConfig+0x350>)
 8007b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b62:	095b      	lsrs	r3, r3, #5
 8007b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b68:	441c      	add	r4, r3
 8007b6a:	f7fd fa31 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	4613      	mov	r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	009a      	lsls	r2, r3, #2
 8007b78:	441a      	add	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	fbb2 f5f3 	udiv	r5, r2, r3
 8007b84:	f7fd fa24 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	009a      	lsls	r2, r3, #2
 8007b92:	441a      	add	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b9e:	4a0c      	ldr	r2, [pc, #48]	; (8007bd0 <UART_SetConfig+0x350>)
 8007ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba4:	095b      	lsrs	r3, r3, #5
 8007ba6:	2264      	movs	r2, #100	; 0x64
 8007ba8:	fb02 f303 	mul.w	r3, r2, r3
 8007bac:	1aeb      	subs	r3, r5, r3
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	3332      	adds	r3, #50	; 0x32
 8007bb2:	4a07      	ldr	r2, [pc, #28]	; (8007bd0 <UART_SetConfig+0x350>)
 8007bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb8:	095b      	lsrs	r3, r3, #5
 8007bba:	f003 020f 	and.w	r2, r3, #15
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4422      	add	r2, r4
 8007bc4:	609a      	str	r2, [r3, #8]
 8007bc6:	e071      	b.n	8007cac <UART_SetConfig+0x42c>
 8007bc8:	40011000 	.word	0x40011000
 8007bcc:	40011400 	.word	0x40011400
 8007bd0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007bd4:	f7fd f9da 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	4613      	mov	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4413      	add	r3, r2
 8007be0:	009a      	lsls	r2, r3, #2
 8007be2:	441a      	add	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bee:	4a31      	ldr	r2, [pc, #196]	; (8007cb4 <UART_SetConfig+0x434>)
 8007bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf4:	095b      	lsrs	r3, r3, #5
 8007bf6:	011c      	lsls	r4, r3, #4
 8007bf8:	f7fd f9c8 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	009a      	lsls	r2, r3, #2
 8007c06:	441a      	add	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	fbb2 f5f3 	udiv	r5, r2, r3
 8007c12:	f7fd f9bb 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 8007c16:	4602      	mov	r2, r0
 8007c18:	4613      	mov	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	009a      	lsls	r2, r3, #2
 8007c20:	441a      	add	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c2c:	4a21      	ldr	r2, [pc, #132]	; (8007cb4 <UART_SetConfig+0x434>)
 8007c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c32:	095b      	lsrs	r3, r3, #5
 8007c34:	2264      	movs	r2, #100	; 0x64
 8007c36:	fb02 f303 	mul.w	r3, r2, r3
 8007c3a:	1aeb      	subs	r3, r5, r3
 8007c3c:	011b      	lsls	r3, r3, #4
 8007c3e:	3332      	adds	r3, #50	; 0x32
 8007c40:	4a1c      	ldr	r2, [pc, #112]	; (8007cb4 <UART_SetConfig+0x434>)
 8007c42:	fba2 2303 	umull	r2, r3, r2, r3
 8007c46:	095b      	lsrs	r3, r3, #5
 8007c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c4c:	441c      	add	r4, r3
 8007c4e:	f7fd f99d 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 8007c52:	4602      	mov	r2, r0
 8007c54:	4613      	mov	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	009a      	lsls	r2, r3, #2
 8007c5c:	441a      	add	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	fbb2 f5f3 	udiv	r5, r2, r3
 8007c68:	f7fd f990 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	4613      	mov	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	009a      	lsls	r2, r3, #2
 8007c76:	441a      	add	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c82:	4a0c      	ldr	r2, [pc, #48]	; (8007cb4 <UART_SetConfig+0x434>)
 8007c84:	fba2 2303 	umull	r2, r3, r2, r3
 8007c88:	095b      	lsrs	r3, r3, #5
 8007c8a:	2264      	movs	r2, #100	; 0x64
 8007c8c:	fb02 f303 	mul.w	r3, r2, r3
 8007c90:	1aeb      	subs	r3, r5, r3
 8007c92:	011b      	lsls	r3, r3, #4
 8007c94:	3332      	adds	r3, #50	; 0x32
 8007c96:	4a07      	ldr	r2, [pc, #28]	; (8007cb4 <UART_SetConfig+0x434>)
 8007c98:	fba2 2303 	umull	r2, r3, r2, r3
 8007c9c:	095b      	lsrs	r3, r3, #5
 8007c9e:	f003 020f 	and.w	r2, r3, #15
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4422      	add	r2, r4
 8007ca8:	609a      	str	r2, [r3, #8]
}
 8007caa:	e7ff      	b.n	8007cac <UART_SetConfig+0x42c>
 8007cac:	bf00      	nop
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8007cb4:	51eb851f 	.word	0x51eb851f

08007cb8 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if(hwwdg == NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e016      	b.n	8007cf8 <HAL_WWDG_Init+0x40>
  assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));

  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 fc3c 	bl	8009548 <HAL_WWDG_MspInit>

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	68da      	ldr	r2, [r3, #12]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cdc:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	691a      	ldr	r2, [r3, #16]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	ea42 0103 	orr.w	r1, r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689a      	ldr	r2, [r3, #8]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007d00:	b084      	sub	sp, #16
 8007d02:	b480      	push	{r7}
 8007d04:	b085      	sub	sp, #20
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	f107 001c 	add.w	r0, r7, #28
 8007d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007d16:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007d18:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007d1a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007d1e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007d22:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007d26:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007d2a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007d3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	431a      	orrs	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3714      	adds	r7, #20
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	b004      	add	sp, #16
 8007d54:	4770      	bx	lr

08007d56 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b083      	sub	sp, #12
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007d92:	b480      	push	{r7}
 8007d94:	b083      	sub	sp, #12
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2203      	movs	r2, #3
 8007d9e:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007dae:	b480      	push	{r7}
 8007db0:	b083      	sub	sp, #12
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0303 	and.w	r3, r3, #3
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b085      	sub	sp, #20
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007de8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007dee:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007df4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007e04:	f023 030f 	bic.w	r3, r3, #15
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b083      	sub	sp, #12
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	b2db      	uxtb	r3, r3
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	3314      	adds	r3, #20
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	4413      	add	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
}  
 8007e56:	4618      	mov	r0, r3
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b085      	sub	sp, #20
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e88:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007e8e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007e94:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0

}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b088      	sub	sp, #32
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007ecc:	2310      	movs	r3, #16
 8007ece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ed0:	2340      	movs	r3, #64	; 0x40
 8007ed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007edc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ede:	f107 0308 	add.w	r3, r7, #8
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7ff ff70 	bl	8007dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007eea:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007eee:	2110      	movs	r1, #16
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fa63 	bl	80083bc <SDMMC_GetCmdResp1>
 8007ef6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ef8:	69fb      	ldr	r3, [r7, #28]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3720      	adds	r7, #32
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b088      	sub	sp, #32
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007f14:	2311      	movs	r3, #17
 8007f16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f18:	2340      	movs	r3, #64	; 0x40
 8007f1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f24:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f26:	f107 0308 	add.w	r3, r7, #8
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff ff4c 	bl	8007dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007f32:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007f36:	2111      	movs	r1, #17
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fa3f 	bl	80083bc <SDMMC_GetCmdResp1>
 8007f3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f40:	69fb      	ldr	r3, [r7, #28]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3720      	adds	r7, #32
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b088      	sub	sp, #32
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007f54:	2300      	movs	r3, #0
 8007f56:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007f5c:	2312      	movs	r3, #18
 8007f5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f60:	2340      	movs	r3, #64	; 0x40
 8007f62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f64:	2300      	movs	r3, #0
 8007f66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f6c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f6e:	f107 0308 	add.w	r3, r7, #8
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7ff ff28 	bl	8007dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007f7a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007f7e:	2112      	movs	r1, #18
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fa1b 	bl	80083bc <SDMMC_GetCmdResp1>
 8007f86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f88:	69fb      	ldr	r3, [r7, #28]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3720      	adds	r7, #32
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b088      	sub	sp, #32
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007fa4:	2318      	movs	r3, #24
 8007fa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007fa8:	2340      	movs	r3, #64	; 0x40
 8007faa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007fac:	2300      	movs	r3, #0
 8007fae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fb4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fb6:	f107 0308 	add.w	r3, r7, #8
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7ff ff04 	bl	8007dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007fc2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007fc6:	2118      	movs	r1, #24
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f9f7 	bl	80083bc <SDMMC_GetCmdResp1>
 8007fce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fd0:	69fb      	ldr	r3, [r7, #28]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3720      	adds	r7, #32
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b088      	sub	sp, #32
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007fec:	2319      	movs	r3, #25
 8007fee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ff0:	2340      	movs	r3, #64	; 0x40
 8007ff2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ffc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ffe:	f107 0308 	add.w	r3, r7, #8
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7ff fee0 	bl	8007dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800800a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800800e:	2119      	movs	r1, #25
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f9d3 	bl	80083bc <SDMMC_GetCmdResp1>
 8008016:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008018:	69fb      	ldr	r3, [r7, #28]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3720      	adds	r7, #32
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b088      	sub	sp, #32
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800802c:	2300      	movs	r3, #0
 800802e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008030:	2300      	movs	r3, #0
 8008032:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008034:	230c      	movs	r3, #12
 8008036:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008038:	2340      	movs	r3, #64	; 0x40
 800803a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800803c:	2300      	movs	r3, #0
 800803e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008044:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008046:	f107 0308 	add.w	r3, r7, #8
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff febc 	bl	8007dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8008052:	4a05      	ldr	r2, [pc, #20]	; (8008068 <SDMMC_CmdStopTransfer+0x44>)
 8008054:	210c      	movs	r1, #12
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f9b0 	bl	80083bc <SDMMC_GetCmdResp1>
 800805c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800805e:	69fb      	ldr	r3, [r7, #28]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3720      	adds	r7, #32
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	05f5e100 	.word	0x05f5e100

0800806c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08a      	sub	sp, #40	; 0x28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008078:	2300      	movs	r3, #0
 800807a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008080:	2307      	movs	r3, #7
 8008082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008084:	2340      	movs	r3, #64	; 0x40
 8008086:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008088:	2300      	movs	r3, #0
 800808a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800808c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008090:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008092:	f107 0310 	add.w	r3, r7, #16
 8008096:	4619      	mov	r1, r3
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f7ff fe96 	bl	8007dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800809e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80080a2:	2107      	movs	r1, #7
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 f989 	bl	80083bc <SDMMC_GetCmdResp1>
 80080aa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3728      	adds	r7, #40	; 0x28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b088      	sub	sp, #32
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80080be:	2300      	movs	r3, #0
 80080c0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80080c6:	2300      	movs	r3, #0
 80080c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80080ca:	2300      	movs	r3, #0
 80080cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080ce:	2300      	movs	r3, #0
 80080d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080d6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080d8:	f107 0308 	add.w	r3, r7, #8
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7ff fe73 	bl	8007dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f93f 	bl	8008368 <SDMMC_GetCmdError>
 80080ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080ec:	69fb      	ldr	r3, [r7, #28]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3720      	adds	r7, #32
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b088      	sub	sp, #32
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80080fe:	2300      	movs	r3, #0
 8008100:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008102:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008106:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008108:	2308      	movs	r3, #8
 800810a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800810c:	2340      	movs	r3, #64	; 0x40
 800810e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008110:	2300      	movs	r3, #0
 8008112:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008118:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800811a:	f107 0308 	add.w	r3, r7, #8
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7ff fe52 	bl	8007dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fb10 	bl	800874c <SDMMC_GetCmdResp7>
 800812c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800812e:	69fb      	ldr	r3, [r7, #28]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3720      	adds	r7, #32
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b088      	sub	sp, #32
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008142:	2300      	movs	r3, #0
 8008144:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800814a:	2337      	movs	r3, #55	; 0x37
 800814c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800814e:	2340      	movs	r3, #64	; 0x40
 8008150:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008152:	2300      	movs	r3, #0
 8008154:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800815a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800815c:	f107 0308 	add.w	r3, r7, #8
 8008160:	4619      	mov	r1, r3
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7ff fe31 	bl	8007dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008168:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800816c:	2137      	movs	r1, #55	; 0x37
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f924 	bl	80083bc <SDMMC_GetCmdResp1>
 8008174:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008176:	69fb      	ldr	r3, [r7, #28]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3720      	adds	r7, #32
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b088      	sub	sp, #32
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800818a:	2300      	movs	r3, #0
 800818c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008194:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008198:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800819a:	2329      	movs	r3, #41	; 0x29
 800819c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800819e:	2340      	movs	r3, #64	; 0x40
 80081a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081a2:	2300      	movs	r3, #0
 80081a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081aa:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081ac:	f107 0308 	add.w	r3, r7, #8
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7ff fe09 	bl	8007dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fa25 	bl	8008608 <SDMMC_GetCmdResp3>
 80081be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081c0:	69fb      	ldr	r3, [r7, #28]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3720      	adds	r7, #32
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b088      	sub	sp, #32
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80081d4:	2300      	movs	r3, #0
 80081d6:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80081dc:	2306      	movs	r3, #6
 80081de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081e0:	2340      	movs	r3, #64	; 0x40
 80081e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081e4:	2300      	movs	r3, #0
 80081e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081ec:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081ee:	f107 0308 	add.w	r3, r7, #8
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7ff fde8 	bl	8007dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80081fa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80081fe:	2106      	movs	r1, #6
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f8db 	bl	80083bc <SDMMC_GetCmdResp1>
 8008206:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008208:	69fb      	ldr	r3, [r7, #28]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3720      	adds	r7, #32
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b088      	sub	sp, #32
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800821a:	2300      	movs	r3, #0
 800821c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008222:	2333      	movs	r3, #51	; 0x33
 8008224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008226:	2340      	movs	r3, #64	; 0x40
 8008228:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800822a:	2300      	movs	r3, #0
 800822c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800822e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008232:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008234:	f107 0308 	add.w	r3, r7, #8
 8008238:	4619      	mov	r1, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7ff fdc5 	bl	8007dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008240:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008244:	2133      	movs	r1, #51	; 0x33
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f8b8 	bl	80083bc <SDMMC_GetCmdResp1>
 800824c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800824e:	69fb      	ldr	r3, [r7, #28]
}
 8008250:	4618      	mov	r0, r3
 8008252:	3720      	adds	r7, #32
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b088      	sub	sp, #32
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008260:	2300      	movs	r3, #0
 8008262:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008268:	2302      	movs	r3, #2
 800826a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800826c:	23c0      	movs	r3, #192	; 0xc0
 800826e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008270:	2300      	movs	r3, #0
 8008272:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008278:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800827a:	f107 0308 	add.w	r3, r7, #8
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7ff fda2 	bl	8007dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f97e 	bl	8008588 <SDMMC_GetCmdResp2>
 800828c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800828e:	69fb      	ldr	r3, [r7, #28]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3720      	adds	r7, #32
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80082a2:	2300      	movs	r3, #0
 80082a4:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80082aa:	2309      	movs	r3, #9
 80082ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80082ae:	23c0      	movs	r3, #192	; 0xc0
 80082b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082b2:	2300      	movs	r3, #0
 80082b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082ba:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082bc:	f107 0308 	add.w	r3, r7, #8
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7ff fd81 	bl	8007dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f95d 	bl	8008588 <SDMMC_GetCmdResp2>
 80082ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082d0:	69fb      	ldr	r3, [r7, #28]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3720      	adds	r7, #32
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b088      	sub	sp, #32
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80082e4:	2300      	movs	r3, #0
 80082e6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80082e8:	2300      	movs	r3, #0
 80082ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80082ec:	2303      	movs	r3, #3
 80082ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082f0:	2340      	movs	r3, #64	; 0x40
 80082f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082f4:	2300      	movs	r3, #0
 80082f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082fc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082fe:	f107 0308 	add.w	r3, r7, #8
 8008302:	4619      	mov	r1, r3
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f7ff fd60 	bl	8007dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	2103      	movs	r1, #3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f9ae 	bl	8008670 <SDMMC_GetCmdResp6>
 8008314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008316:	69fb      	ldr	r3, [r7, #28]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3720      	adds	r7, #32
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b088      	sub	sp, #32
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800832a:	2300      	movs	r3, #0
 800832c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008332:	230d      	movs	r3, #13
 8008334:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008336:	2340      	movs	r3, #64	; 0x40
 8008338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800833a:	2300      	movs	r3, #0
 800833c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800833e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008342:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008344:	f107 0308 	add.w	r3, r7, #8
 8008348:	4619      	mov	r1, r3
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7ff fd3d 	bl	8007dca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008350:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008354:	210d      	movs	r1, #13
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f830 	bl	80083bc <SDMMC_GetCmdResp1>
 800835c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800835e:	69fb      	ldr	r3, [r7, #28]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3720      	adds	r7, #32
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008368:	b490      	push	{r4, r7}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008370:	4b10      	ldr	r3, [pc, #64]	; (80083b4 <SDMMC_GetCmdError+0x4c>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a10      	ldr	r2, [pc, #64]	; (80083b8 <SDMMC_GetCmdError+0x50>)
 8008376:	fba2 2303 	umull	r2, r3, r2, r3
 800837a:	0a5b      	lsrs	r3, r3, #9
 800837c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008380:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008384:	4623      	mov	r3, r4
 8008386:	1e5c      	subs	r4, r3, #1
 8008388:	2b00      	cmp	r3, #0
 800838a:	d102      	bne.n	8008392 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800838c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008390:	e00a      	b.n	80083a8 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800839a:	2b00      	cmp	r3, #0
 800839c:	d0f2      	beq.n	8008384 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80083a4:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bc90      	pop	{r4, r7}
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	20000014 	.word	0x20000014
 80083b8:	10624dd3 	.word	0x10624dd3

080083bc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80083bc:	b590      	push	{r4, r7, lr}
 80083be:	b087      	sub	sp, #28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	460b      	mov	r3, r1
 80083c6:	607a      	str	r2, [r7, #4]
 80083c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80083ca:	4b6c      	ldr	r3, [pc, #432]	; (800857c <SDMMC_GetCmdResp1+0x1c0>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a6c      	ldr	r2, [pc, #432]	; (8008580 <SDMMC_GetCmdResp1+0x1c4>)
 80083d0:	fba2 2303 	umull	r2, r3, r2, r3
 80083d4:	0a5b      	lsrs	r3, r3, #9
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80083dc:	4623      	mov	r3, r4
 80083de:	1e5c      	subs	r4, r3, #1
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d102      	bne.n	80083ea <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80083e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80083e8:	e0c3      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0f2      	beq.n	80083dc <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083fa:	f003 0304 	and.w	r3, r3, #4
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d004      	beq.n	800840c <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2204      	movs	r2, #4
 8008406:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008408:	2304      	movs	r3, #4
 800840a:	e0b2      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008410:	f003 0301 	and.w	r3, r3, #1
 8008414:	2b00      	cmp	r3, #0
 8008416:	d004      	beq.n	8008422 <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2201      	movs	r2, #1
 800841c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800841e:	2301      	movs	r3, #1
 8008420:	e0a7      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f7ff fcfb 	bl	8007e1e <SDIO_GetCommandResponse>
 8008428:	4603      	mov	r3, r0
 800842a:	461a      	mov	r2, r3
 800842c:	7afb      	ldrb	r3, [r7, #11]
 800842e:	4293      	cmp	r3, r2
 8008430:	d001      	beq.n	8008436 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008432:	2301      	movs	r3, #1
 8008434:	e09d      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800843c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800843e:	2100      	movs	r1, #0
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f7ff fcf9 	bl	8007e38 <SDIO_GetResponse>
 8008446:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	4b4e      	ldr	r3, [pc, #312]	; (8008584 <SDMMC_GetCmdResp1+0x1c8>)
 800844c:	4013      	ands	r3, r2
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8008452:	2300      	movs	r3, #0
 8008454:	e08d      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2b00      	cmp	r3, #0
 800845a:	da02      	bge.n	8008462 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800845c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008460:	e087      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800846c:	2340      	movs	r3, #64	; 0x40
 800846e:	e080      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800847a:	2380      	movs	r3, #128	; 0x80
 800847c:	e079      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800848c:	e071      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800849c:	e069      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d002      	beq.n	80084ae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80084a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ac:	e061      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80084b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084bc:	e059      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80084c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084cc:	e051      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d002      	beq.n	80084de <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80084d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084dc:	e049      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80084e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80084ec:	e041      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 80084f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084fc:	e039      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800850c:	e031      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008518:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800851c:	e029      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d002      	beq.n	800852e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008528:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800852c:	e021      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008538:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800853c:	e019      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008548:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800854c:	e011      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008558:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800855c:	e009      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f003 0308 	and.w	r3, r3, #8
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008568:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800856c:	e001      	b.n	8008572 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800856e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008572:	4618      	mov	r0, r3
 8008574:	371c      	adds	r7, #28
 8008576:	46bd      	mov	sp, r7
 8008578:	bd90      	pop	{r4, r7, pc}
 800857a:	bf00      	nop
 800857c:	20000014 	.word	0x20000014
 8008580:	10624dd3 	.word	0x10624dd3
 8008584:	fdffe008 	.word	0xfdffe008

08008588 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008588:	b490      	push	{r4, r7}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008590:	4b1b      	ldr	r3, [pc, #108]	; (8008600 <SDMMC_GetCmdResp2+0x78>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a1b      	ldr	r2, [pc, #108]	; (8008604 <SDMMC_GetCmdResp2+0x7c>)
 8008596:	fba2 2303 	umull	r2, r3, r2, r3
 800859a:	0a5b      	lsrs	r3, r3, #9
 800859c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80085a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80085a4:	4623      	mov	r3, r4
 80085a6:	1e5c      	subs	r4, r3, #1
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d102      	bne.n	80085b2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085b0:	e020      	b.n	80085f4 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d0f2      	beq.n	80085a4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c2:	f003 0304 	and.w	r3, r3, #4
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d004      	beq.n	80085d4 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2204      	movs	r2, #4
 80085ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80085d0:	2304      	movs	r3, #4
 80085d2:	e00f      	b.n	80085f4 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d004      	beq.n	80085ea <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e004      	b.n	80085f4 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80085f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bc90      	pop	{r4, r7}
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	20000014 	.word	0x20000014
 8008604:	10624dd3 	.word	0x10624dd3

08008608 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008608:	b490      	push	{r4, r7}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008610:	4b15      	ldr	r3, [pc, #84]	; (8008668 <SDMMC_GetCmdResp3+0x60>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a15      	ldr	r2, [pc, #84]	; (800866c <SDMMC_GetCmdResp3+0x64>)
 8008616:	fba2 2303 	umull	r2, r3, r2, r3
 800861a:	0a5b      	lsrs	r3, r3, #9
 800861c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008620:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008624:	4623      	mov	r3, r4
 8008626:	1e5c      	subs	r4, r3, #1
 8008628:	2b00      	cmp	r3, #0
 800862a:	d102      	bne.n	8008632 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800862c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008630:	e015      	b.n	800865e <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008636:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800863a:	2b00      	cmp	r3, #0
 800863c:	d0f2      	beq.n	8008624 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008642:	f003 0304 	and.w	r3, r3, #4
 8008646:	2b00      	cmp	r3, #0
 8008648:	d004      	beq.n	8008654 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2204      	movs	r2, #4
 800864e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008650:	2304      	movs	r3, #4
 8008652:	e004      	b.n	800865e <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800865a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3708      	adds	r7, #8
 8008662:	46bd      	mov	sp, r7
 8008664:	bc90      	pop	{r4, r7}
 8008666:	4770      	bx	lr
 8008668:	20000014 	.word	0x20000014
 800866c:	10624dd3 	.word	0x10624dd3

08008670 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008670:	b590      	push	{r4, r7, lr}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	460b      	mov	r3, r1
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800867e:	4b31      	ldr	r3, [pc, #196]	; (8008744 <SDMMC_GetCmdResp6+0xd4>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a31      	ldr	r2, [pc, #196]	; (8008748 <SDMMC_GetCmdResp6+0xd8>)
 8008684:	fba2 2303 	umull	r2, r3, r2, r3
 8008688:	0a5b      	lsrs	r3, r3, #9
 800868a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800868e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008692:	4623      	mov	r3, r4
 8008694:	1e5c      	subs	r4, r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	d102      	bne.n	80086a0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800869a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800869e:	e04c      	b.n	800873a <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d0f2      	beq.n	8008692 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d004      	beq.n	80086c2 <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2204      	movs	r2, #4
 80086bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80086be:	2304      	movs	r3, #4
 80086c0:	e03b      	b.n	800873a <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d004      	beq.n	80086d8 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2201      	movs	r2, #1
 80086d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e030      	b.n	800873a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f7ff fba0 	bl	8007e1e <SDIO_GetCommandResponse>
 80086de:	4603      	mov	r3, r0
 80086e0:	461a      	mov	r2, r3
 80086e2:	7afb      	ldrb	r3, [r7, #11]
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d001      	beq.n	80086ec <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e026      	b.n	800873a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80086f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80086f4:	2100      	movs	r1, #0
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f7ff fb9e 	bl	8007e38 <SDIO_GetResponse>
 80086fc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d106      	bne.n	8008716 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	0c1b      	lsrs	r3, r3, #16
 800870c:	b29a      	uxth	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008712:	2300      	movs	r3, #0
 8008714:	e011      	b.n	800873a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d002      	beq.n	8008726 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008724:	e009      	b.n	800873a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008734:	e001      	b.n	800873a <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800873a:	4618      	mov	r0, r3
 800873c:	371c      	adds	r7, #28
 800873e:	46bd      	mov	sp, r7
 8008740:	bd90      	pop	{r4, r7, pc}
 8008742:	bf00      	nop
 8008744:	20000014 	.word	0x20000014
 8008748:	10624dd3 	.word	0x10624dd3

0800874c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800874c:	b490      	push	{r4, r7}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008754:	4b18      	ldr	r3, [pc, #96]	; (80087b8 <SDMMC_GetCmdResp7+0x6c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a18      	ldr	r2, [pc, #96]	; (80087bc <SDMMC_GetCmdResp7+0x70>)
 800875a:	fba2 2303 	umull	r2, r3, r2, r3
 800875e:	0a5b      	lsrs	r3, r3, #9
 8008760:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008764:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008768:	4623      	mov	r3, r4
 800876a:	1e5c      	subs	r4, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d102      	bne.n	8008776 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008770:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008774:	e01a      	b.n	80087ac <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800877a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800877e:	2b00      	cmp	r3, #0
 8008780:	d0f2      	beq.n	8008768 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	2b00      	cmp	r3, #0
 800878c:	d004      	beq.n	8008798 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2240      	movs	r2, #64	; 0x40
 8008792:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008794:	2304      	movs	r3, #4
 8008796:	e009      	b.n	80087ac <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800879c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2240      	movs	r2, #64	; 0x40
 80087a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80087aa:	2300      	movs	r3, #0
  
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bc90      	pop	{r4, r7}
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	20000014 	.word	0x20000014
 80087bc:	10624dd3 	.word	0x10624dd3

080087c0 <_write>:
//
//	return _n;
//}

int _write(int file, char *data, int len)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d00a      	beq.n	80087e8 <_write+0x28>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d007      	beq.n	80087e8 <_write+0x28>
   {
      errno = EBADF;
 80087d8:	f003 fe6a 	bl	800c4b0 <__errno>
 80087dc:	4603      	mov	r3, r0
 80087de:	2209      	movs	r2, #9
 80087e0:	601a      	str	r2, [r3, #0]
      return -1;
 80087e2:	f04f 33ff 	mov.w	r3, #4294967295
 80087e6:	e010      	b.n	800880a <_write+0x4a>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit((UART_HandleTypeDef *)COMM, (uint8_t*)data, len, 1000);
 80087e8:	4b0a      	ldr	r3, [pc, #40]	; (8008814 <_write+0x54>)
 80087ea:	6818      	ldr	r0, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80087f4:	68b9      	ldr	r1, [r7, #8]
 80087f6:	f7fe fccc 	bl	8007192 <HAL_UART_Transmit>
 80087fa:	4603      	mov	r3, r0
 80087fc:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 80087fe:	7dfb      	ldrb	r3, [r7, #23]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d101      	bne.n	8008808 <_write+0x48>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	e000      	b.n	800880a <_write+0x4a>
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3718      	adds	r7, #24
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	20000004 	.word	0x20000004

08008818 <SystemClock_Config>:
*/

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b0a0      	sub	sp, #128	; 0x80
 800881c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800881e:	2300      	movs	r3, #0
 8008820:	60bb      	str	r3, [r7, #8]
 8008822:	4b3b      	ldr	r3, [pc, #236]	; (8008910 <SystemClock_Config+0xf8>)
 8008824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008826:	4a3a      	ldr	r2, [pc, #232]	; (8008910 <SystemClock_Config+0xf8>)
 8008828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800882c:	6413      	str	r3, [r2, #64]	; 0x40
 800882e:	4b38      	ldr	r3, [pc, #224]	; (8008910 <SystemClock_Config+0xf8>)
 8008830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008836:	60bb      	str	r3, [r7, #8]
 8008838:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800883a:	2300      	movs	r3, #0
 800883c:	607b      	str	r3, [r7, #4]
 800883e:	4b35      	ldr	r3, [pc, #212]	; (8008914 <SystemClock_Config+0xfc>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008846:	4a33      	ldr	r2, [pc, #204]	; (8008914 <SystemClock_Config+0xfc>)
 8008848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800884c:	6013      	str	r3, [r2, #0]
 800884e:	4b31      	ldr	r3, [pc, #196]	; (8008914 <SystemClock_Config+0xfc>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008856:	607b      	str	r3, [r7, #4]
 8008858:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800885a:	2305      	movs	r3, #5
 800885c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800885e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008862:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8008864:	2301      	movs	r3, #1
 8008866:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008868:	2302      	movs	r3, #2
 800886a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800886c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008870:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8008872:	2310      	movs	r3, #16
 8008874:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 192;
 8008876:	23c0      	movs	r3, #192	; 0xc0
 8008878:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800887a:	2302      	movs	r3, #2
 800887c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800887e:	2304      	movs	r3, #4
 8008880:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008882:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008886:	4618      	mov	r0, r3
 8008888:	f7fb ff8a 	bl	80047a0 <HAL_RCC_OscConfig>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8008892:	f7fa fb25 	bl	8002ee0 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008896:	230f      	movs	r3, #15
 8008898:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800889a:	2302      	movs	r3, #2
 800889c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800889e:	2300      	movs	r3, #0
 80088a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80088a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80088a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80088a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088ac:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80088ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80088b2:	2103      	movs	r1, #3
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fc f9cb 	bl	8004c50 <HAL_RCC_ClockConfig>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80088c0:	f7fa fb0e 	bl	8002ee0 <Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80088c4:	2320      	movs	r3, #32
 80088c6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80088c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088cc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80088ce:	f107 030c 	add.w	r3, r7, #12
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fc fbd0 	bl	8005078 <HAL_RCCEx_PeriphCLKConfig>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d001      	beq.n	80088e2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80088de:	f7fa faff 	bl	8002ee0 <Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80088e2:	f7fc fb47 	bl	8004f74 <HAL_RCC_GetHCLKFreq>
 80088e6:	4603      	mov	r3, r0
 80088e8:	4a0b      	ldr	r2, [pc, #44]	; (8008918 <SystemClock_Config+0x100>)
 80088ea:	fba2 2303 	umull	r2, r3, r2, r3
 80088ee:	099b      	lsrs	r3, r3, #6
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fa fc9e 	bl	8003232 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80088f6:	2004      	movs	r0, #4
 80088f8:	f7fa fca8 	bl	800324c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80088fc:	2200      	movs	r2, #0
 80088fe:	210f      	movs	r1, #15
 8008900:	f04f 30ff 	mov.w	r0, #4294967295
 8008904:	f7fa fc6b 	bl	80031de <HAL_NVIC_SetPriority>
}
 8008908:	bf00      	nop
 800890a:	3780      	adds	r7, #128	; 0x80
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	40023800 	.word	0x40023800
 8008914:	40007000 	.word	0x40007000
 8008918:	10624dd3 	.word	0x10624dd3

0800891c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08e      	sub	sp, #56	; 0x38
 8008920:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008922:	2300      	movs	r3, #0
 8008924:	623b      	str	r3, [r7, #32]
 8008926:	4bb2      	ldr	r3, [pc, #712]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 8008928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892a:	4ab1      	ldr	r2, [pc, #708]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 800892c:	f043 0310 	orr.w	r3, r3, #16
 8008930:	6313      	str	r3, [r2, #48]	; 0x30
 8008932:	4baf      	ldr	r3, [pc, #700]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 8008934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008936:	f003 0310 	and.w	r3, r3, #16
 800893a:	623b      	str	r3, [r7, #32]
 800893c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800893e:	2300      	movs	r3, #0
 8008940:	61fb      	str	r3, [r7, #28]
 8008942:	4bab      	ldr	r3, [pc, #684]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 8008944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008946:	4aaa      	ldr	r2, [pc, #680]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 8008948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800894c:	6313      	str	r3, [r2, #48]	; 0x30
 800894e:	4ba8      	ldr	r3, [pc, #672]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 8008950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008956:	61fb      	str	r3, [r7, #28]
 8008958:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800895a:	2300      	movs	r3, #0
 800895c:	61bb      	str	r3, [r7, #24]
 800895e:	4ba4      	ldr	r3, [pc, #656]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 8008960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008962:	4aa3      	ldr	r2, [pc, #652]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 8008964:	f043 0304 	orr.w	r3, r3, #4
 8008968:	6313      	str	r3, [r2, #48]	; 0x30
 800896a:	4ba1      	ldr	r3, [pc, #644]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 800896c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896e:	f003 0304 	and.w	r3, r3, #4
 8008972:	61bb      	str	r3, [r7, #24]
 8008974:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008976:	2300      	movs	r3, #0
 8008978:	617b      	str	r3, [r7, #20]
 800897a:	4b9d      	ldr	r3, [pc, #628]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 800897c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897e:	4a9c      	ldr	r2, [pc, #624]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 8008980:	f043 0320 	orr.w	r3, r3, #32
 8008984:	6313      	str	r3, [r2, #48]	; 0x30
 8008986:	4b9a      	ldr	r3, [pc, #616]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898a:	f003 0320 	and.w	r3, r3, #32
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008992:	2300      	movs	r3, #0
 8008994:	613b      	str	r3, [r7, #16]
 8008996:	4b96      	ldr	r3, [pc, #600]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 8008998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899a:	4a95      	ldr	r2, [pc, #596]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 800899c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089a0:	6313      	str	r3, [r2, #48]	; 0x30
 80089a2:	4b93      	ldr	r3, [pc, #588]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 80089a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089aa:	613b      	str	r3, [r7, #16]
 80089ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80089ae:	2300      	movs	r3, #0
 80089b0:	60fb      	str	r3, [r7, #12]
 80089b2:	4b8f      	ldr	r3, [pc, #572]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 80089b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b6:	4a8e      	ldr	r2, [pc, #568]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 80089b8:	f043 0301 	orr.w	r3, r3, #1
 80089bc:	6313      	str	r3, [r2, #48]	; 0x30
 80089be:	4b8c      	ldr	r3, [pc, #560]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 80089c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80089ca:	2300      	movs	r3, #0
 80089cc:	60bb      	str	r3, [r7, #8]
 80089ce:	4b88      	ldr	r3, [pc, #544]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 80089d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d2:	4a87      	ldr	r2, [pc, #540]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 80089d4:	f043 0302 	orr.w	r3, r3, #2
 80089d8:	6313      	str	r3, [r2, #48]	; 0x30
 80089da:	4b85      	ldr	r3, [pc, #532]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 80089dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	60bb      	str	r3, [r7, #8]
 80089e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80089e6:	2300      	movs	r3, #0
 80089e8:	607b      	str	r3, [r7, #4]
 80089ea:	4b81      	ldr	r3, [pc, #516]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 80089ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ee:	4a80      	ldr	r2, [pc, #512]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 80089f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089f4:	6313      	str	r3, [r2, #48]	; 0x30
 80089f6:	4b7e      	ldr	r3, [pc, #504]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 80089f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fe:	607b      	str	r3, [r7, #4]
 8008a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008a02:	2300      	movs	r3, #0
 8008a04:	603b      	str	r3, [r7, #0]
 8008a06:	4b7a      	ldr	r3, [pc, #488]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 8008a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0a:	4a79      	ldr	r2, [pc, #484]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 8008a0c:	f043 0308 	orr.w	r3, r3, #8
 8008a10:	6313      	str	r3, [r2, #48]	; 0x30
 8008a12:	4b77      	ldr	r3, [pc, #476]	; (8008bf0 <MX_GPIO_Init+0x2d4>)
 8008a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a16:	f003 0308 	and.w	r3, r3, #8
 8008a1a:	603b      	str	r3, [r7, #0]
 8008a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PAN4_VGY_GPIO_Port, PAN4_VGY_Pin, GPIO_PIN_RESET);
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2104      	movs	r1, #4
 8008a22:	4874      	ldr	r0, [pc, #464]	; (8008bf4 <MX_GPIO_Init+0x2d8>)
 8008a24:	f7fa ff8a 	bl	800393c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PAN5_CS2_Pin|LED_G_Pin|LED_Y_Pin, GPIO_PIN_SET);
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f242 0130 	movw	r1, #8240	; 0x2030
 8008a2e:	4872      	ldr	r0, [pc, #456]	; (8008bf8 <MX_GPIO_Init+0x2dc>)
 8008a30:	f7fa ff84 	bl	800393c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, PAN5_CS1_Pin|PAN6_CS2_Pin|PAN6_CS1_Pin|PAN1_CS2_Pin
 8008a34:	2201      	movs	r2, #1
 8008a36:	f640 61ff 	movw	r1, #3839	; 0xeff
 8008a3a:	4870      	ldr	r0, [pc, #448]	; (8008bfc <MX_GPIO_Init+0x2e0>)
 8008a3c:	f7fa ff7e 	bl	800393c <HAL_GPIO_WritePin>
                          |PAN1_CS1_Pin|PAN2_CS2_Pin|PAN2_CS1_Pin|PAN3_CS2_Pin
                          |PAN3_CS1_Pin|PAN4_CS2_Pin|PAN4_CS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SBAND_CS_GPIO_Port, SBAND_CS_Pin, GPIO_PIN_RESET);
 8008a40:	2200      	movs	r2, #0
 8008a42:	2140      	movs	r1, #64	; 0x40
 8008a44:	486e      	ldr	r0, [pc, #440]	; (8008c00 <MX_GPIO_Init+0x2e4>)
 8008a46:	f7fa ff79 	bl	800393c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PAN5_DIR1_Pin|PAN5_DIR2_Pin|PAN6_DIR1_Pin|PAN6_DIR2_Pin
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f24e 217c 	movw	r1, #57980	; 0xe27c
 8008a50:	486c      	ldr	r0, [pc, #432]	; (8008c04 <MX_GPIO_Init+0x2e8>)
 8008a52:	f7fa ff73 	bl	800393c <HAL_GPIO_WritePin>
  // Turn-off the second MAG sensor due lack of I2C arbitration MAG1/MAG2
  HAL_GPIO_WritePin(GPIOH, MAG1_EN_Pin|MAG2_EN_Pin, GPIO_PIN_SET);
#endif

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8008a56:	2201      	movs	r2, #1
 8008a58:	2110      	movs	r1, #16
 8008a5a:	486b      	ldr	r0, [pc, #428]	; (8008c08 <MX_GPIO_Init+0x2ec>)
 8008a5c:	f7fa ff6e 	bl	800393c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PAN5_VGY_Pin|PAN6_VGY_Pin|PAN1_VGY_Pin|PAN2_VGY_Pin
 8008a60:	2200      	movs	r2, #0
 8008a62:	21e6      	movs	r1, #230	; 0xe6
 8008a64:	4869      	ldr	r0, [pc, #420]	; (8008c0c <MX_GPIO_Init+0x2f0>)
 8008a66:	f7fa ff69 	bl	800393c <HAL_GPIO_WritePin>
                          |PAN3_VGY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OBC_OUT5_Pin|PAN4_DIR1_Pin|FLASH_NCS_Pin|OBC_OUT3_Pin
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8008a70:	4867      	ldr	r0, [pc, #412]	; (8008c10 <MX_GPIO_Init+0x2f4>)
 8008a72:	f7fa ff63 	bl	800393c <HAL_GPIO_WritePin>
                          |OBC_OUT2_Pin|OBC_OUT1_Pin, GPIO_PIN_RESET);

  /* Camera power supply disable by default */
  HAL_GPIO_WritePin(GPIOG, OBC_OUT1_Pin, GPIO_PIN_RESET);
 8008a76:	2200      	movs	r2, #0
 8008a78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008a7c:	4864      	ldr	r0, [pc, #400]	; (8008c10 <MX_GPIO_Init+0x2f4>)
 8008a7e:	f7fa ff5d 	bl	800393c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_EN_Pin|OBC_OUT4_Pin, GPIO_PIN_RESET);
 8008a82:	2200      	movs	r2, #0
 8008a84:	2148      	movs	r1, #72	; 0x48
 8008a86:	4863      	ldr	r0, [pc, #396]	; (8008c14 <MX_GPIO_Init+0x2f8>)
 8008a88:	f7fa ff58 	bl	800393c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PAN4_VGY_Pin */
  GPIO_InitStruct.Pin = PAN4_VGY_Pin;
 8008a8c:	2304      	movs	r3, #4
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8008a90:	2311      	movs	r3, #17
 8008a92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a94:	2300      	movs	r3, #0
 8008a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PAN4_VGY_GPIO_Port, &GPIO_InitStruct);
 8008a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4854      	ldr	r0, [pc, #336]	; (8008bf4 <MX_GPIO_Init+0x2d8>)
 8008aa4:	f7fa fd9e 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IRQ_Pin */
  GPIO_InitStruct.Pin = M2_IRQ_Pin;
 8008aa8:	2340      	movs	r3, #64	; 0x40
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008aac:	4b5a      	ldr	r3, [pc, #360]	; (8008c18 <MX_GPIO_Init+0x2fc>)
 8008aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M2_IRQ_GPIO_Port, &GPIO_InitStruct);
 8008ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ab8:	4619      	mov	r1, r3
 8008aba:	484e      	ldr	r0, [pc, #312]	; (8008bf4 <MX_GPIO_Init+0x2d8>)
 8008abc:	f7fa fd92 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_IRQ_Pin */
  GPIO_InitStruct.Pin = M1_IRQ_Pin;
 8008ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008ac6:	4b54      	ldr	r3, [pc, #336]	; (8008c18 <MX_GPIO_Init+0x2fc>)
 8008ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aca:	2300      	movs	r3, #0
 8008acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8008ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	4849      	ldr	r0, [pc, #292]	; (8008bfc <MX_GPIO_Init+0x2e0>)
 8008ad6:	f7fa fd85 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_CS2_Pin LED_G_Pin LED_Y_Pin */
  GPIO_InitStruct.Pin = PAN5_CS2_Pin|LED_G_Pin|LED_Y_Pin;
 8008ada:	f242 0330 	movw	r3, #8240	; 0x2030
 8008ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008af0:	4619      	mov	r1, r3
 8008af2:	4841      	ldr	r0, [pc, #260]	; (8008bf8 <MX_GPIO_Init+0x2dc>)
 8008af4:	f7fa fd76 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_CS1_Pin PAN6_CS2_Pin PAN6_CS1_Pin PAN1_CS2_Pin
                           PAN1_CS1_Pin PAN2_CS2_Pin PAN2_CS1_Pin PAN3_CS2_Pin
                           PAN3_CS1_Pin PAN4_CS2_Pin PAN4_CS1_Pin */
  GPIO_InitStruct.Pin = PAN5_CS1_Pin|PAN6_CS2_Pin|PAN6_CS1_Pin|PAN1_CS2_Pin
 8008af8:	f640 63ff 	movw	r3, #3839	; 0xeff
 8008afc:	627b      	str	r3, [r7, #36]	; 0x24
                          |PAN1_CS1_Pin|PAN2_CS2_Pin|PAN2_CS1_Pin|PAN3_CS2_Pin
                          |PAN3_CS1_Pin|PAN4_CS2_Pin|PAN4_CS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008afe:	2301      	movs	r3, #1
 8008b00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b06:	2300      	movs	r3, #0
 8008b08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b0e:	4619      	mov	r1, r3
 8008b10:	483a      	ldr	r0, [pc, #232]	; (8008bfc <MX_GPIO_Init+0x2e0>)
 8008b12:	f7fa fd67 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SBAND_CS_Pin */
  GPIO_InitStruct.Pin = SBAND_CS_Pin;
 8008b16:	2340      	movs	r3, #64	; 0x40
 8008b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b22:	2300      	movs	r3, #0
 8008b24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SBAND_CS_GPIO_Port, &GPIO_InitStruct);
 8008b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	4834      	ldr	r0, [pc, #208]	; (8008c00 <MX_GPIO_Init+0x2e4>)
 8008b2e:	f7fa fd59 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SBAND_IRQ_Pin */
  GPIO_InitStruct.Pin = SBAND_IRQ_Pin;
 8008b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008b38:	4b37      	ldr	r3, [pc, #220]	; (8008c18 <MX_GPIO_Init+0x2fc>)
 8008b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SBAND_IRQ_GPIO_Port, &GPIO_InitStruct);
 8008b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b44:	4619      	mov	r1, r3
 8008b46:	482e      	ldr	r0, [pc, #184]	; (8008c00 <MX_GPIO_Init+0x2e4>)
 8008b48:	f7fa fd4c 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_DIR1_Pin PAN5_DIR2_Pin PAN6_DIR1_Pin PAN6_DIR2_Pin
                           ACC1_EN_Pin ACC2_EN_Pin MAG1_EN_Pin MAG2_EN_Pin
                           PAN4_DIR2_Pin */
  GPIO_InitStruct.Pin = PAN5_DIR1_Pin|PAN5_DIR2_Pin|PAN6_DIR1_Pin|PAN6_DIR2_Pin
 8008b4c:	f24e 033c 	movw	r3, #57404	; 0xe03c
 8008b50:	627b      	str	r3, [r7, #36]	; 0x24
                          |MAG1_EN_Pin|MAG2_EN_Pin
                          |PAN4_DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b52:	2301      	movs	r3, #1
 8008b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b56:	2300      	movs	r3, #0
 8008b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b62:	4619      	mov	r1, r3
 8008b64:	4827      	ldr	r0, [pc, #156]	; (8008c04 <MX_GPIO_Init+0x2e8>)
 8008b66:	f7fa fd3d 	bl	80035e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ACC1_EN_Pin|ACC2_EN_Pin;
 8008b6a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8008b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8008b70:	2311      	movs	r3, #17
 8008b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b74:	2300      	movs	r3, #0
 8008b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b80:	4619      	mov	r1, r3
 8008b82:	4820      	ldr	r0, [pc, #128]	; (8008c04 <MX_GPIO_Init+0x2e8>)
 8008b84:	f7fa fd2e 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8008b88:	2310      	movs	r3, #16
 8008b8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b90:	2300      	movs	r3, #0
 8008b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b94:	2300      	movs	r3, #0
 8008b96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8008b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	481a      	ldr	r0, [pc, #104]	; (8008c08 <MX_GPIO_Init+0x2ec>)
 8008ba0:	f7fa fd20 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_VGY_Pin PAN6_VGY_Pin PAN1_VGY_Pin PAN2_VGY_Pin
                           PAN3_VGY_Pin */
  GPIO_InitStruct.Pin = PAN5_VGY_Pin|PAN6_VGY_Pin|PAN1_VGY_Pin|PAN2_VGY_Pin
 8008ba4:	23e6      	movs	r3, #230	; 0xe6
 8008ba6:	627b      	str	r3, [r7, #36]	; 0x24
                          |PAN3_VGY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8008ba8:	2311      	movs	r3, #17
 8008baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bac:	2300      	movs	r3, #0
 8008bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bb8:	4619      	mov	r1, r3
 8008bba:	4814      	ldr	r0, [pc, #80]	; (8008c0c <MX_GPIO_Init+0x2f0>)
 8008bbc:	f7fa fd12 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OBC_OUT5_Pin PAN4_DIR1_Pin FLASH_NCS_Pin OBC_OUT3_Pin
                           OBC_OUT2_Pin OBC_OUT1_Pin */
  GPIO_InitStruct.Pin = OBC_OUT5_Pin|PAN4_DIR1_Pin|FLASH_NCS_Pin|OBC_OUT3_Pin
 8008bc0:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 8008bc4:	627b      	str	r3, [r7, #36]	; 0x24
                          |OBC_OUT2_Pin|OBC_OUT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	480d      	ldr	r0, [pc, #52]	; (8008c10 <MX_GPIO_Init+0x2f4>)
 8008bda:	f7fa fd03 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_EN_Pin OBC_OUT4_Pin */
  GPIO_InitStruct.Pin = SD_EN_Pin|OBC_OUT4_Pin;
 8008bde:	2348      	movs	r3, #72	; 0x48
 8008be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008be2:	2301      	movs	r3, #1
 8008be4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008be6:	2300      	movs	r3, #0
 8008be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bea:	2300      	movs	r3, #0
 8008bec:	e016      	b.n	8008c1c <MX_GPIO_Init+0x300>
 8008bee:	bf00      	nop
 8008bf0:	40023800 	.word	0x40023800
 8008bf4:	40021000 	.word	0x40021000
 8008bf8:	40020800 	.word	0x40020800
 8008bfc:	40022000 	.word	0x40022000
 8008c00:	40021400 	.word	0x40021400
 8008c04:	40021c00 	.word	0x40021c00
 8008c08:	40020000 	.word	0x40020000
 8008c0c:	40020400 	.word	0x40020400
 8008c10:	40021800 	.word	0x40021800
 8008c14:	40020c00 	.word	0x40020c00
 8008c18:	10110000 	.word	0x10110000
 8008c1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c22:	4619      	mov	r1, r3
 8008c24:	4809      	ldr	r0, [pc, #36]	; (8008c4c <MX_GPIO_Init+0x330>)
 8008c26:	f7fa fcdd 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 8008c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c30:	2300      	movs	r3, #0
 8008c32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c34:	2300      	movs	r3, #0
 8008c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8008c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	4804      	ldr	r0, [pc, #16]	; (8008c50 <MX_GPIO_Init+0x334>)
 8008c40:	f7fa fcd0 	bl	80035e4 <HAL_GPIO_Init>

}
 8008c44:	bf00      	nop
 8008c46:	3738      	adds	r7, #56	; 0x38
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	40020c00 	.word	0x40020c00
 8008c50:	40021800 	.word	0x40021800

08008c54 <MX_I2C1_Init>:

}

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008c58:	4b12      	ldr	r3, [pc, #72]	; (8008ca4 <MX_I2C1_Init+0x50>)
 8008c5a:	4a13      	ldr	r2, [pc, #76]	; (8008ca8 <MX_I2C1_Init+0x54>)
 8008c5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008c5e:	4b11      	ldr	r3, [pc, #68]	; (8008ca4 <MX_I2C1_Init+0x50>)
 8008c60:	4a12      	ldr	r2, [pc, #72]	; (8008cac <MX_I2C1_Init+0x58>)
 8008c62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008c64:	4b0f      	ldr	r3, [pc, #60]	; (8008ca4 <MX_I2C1_Init+0x50>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008c6a:	4b0e      	ldr	r3, [pc, #56]	; (8008ca4 <MX_I2C1_Init+0x50>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008c70:	4b0c      	ldr	r3, [pc, #48]	; (8008ca4 <MX_I2C1_Init+0x50>)
 8008c72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008c76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008c78:	4b0a      	ldr	r3, [pc, #40]	; (8008ca4 <MX_I2C1_Init+0x50>)
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008c7e:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <MX_I2C1_Init+0x50>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008c84:	4b07      	ldr	r3, [pc, #28]	; (8008ca4 <MX_I2C1_Init+0x50>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008c8a:	4b06      	ldr	r3, [pc, #24]	; (8008ca4 <MX_I2C1_Init+0x50>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008c90:	4804      	ldr	r0, [pc, #16]	; (8008ca4 <MX_I2C1_Init+0x50>)
 8008c92:	f7fa fe6d 	bl	8003970 <HAL_I2C_Init>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008c9c:	f7fa f920 	bl	8002ee0 <Error_Handler>
  }

}
 8008ca0:	bf00      	nop
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	20000298 	.word	0x20000298
 8008ca8:	40005400 	.word	0x40005400
 8008cac:	00061a80 	.word	0x00061a80

08008cb0 <MX_SDIO_SD_Init>:

}

/* SDIO init function */
void MX_SDIO_SD_Init(void)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8008cb4:	4b0c      	ldr	r3, [pc, #48]	; (8008ce8 <MX_SDIO_SD_Init+0x38>)
 8008cb6:	4a0d      	ldr	r2, [pc, #52]	; (8008cec <MX_SDIO_SD_Init+0x3c>)
 8008cb8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8008cba:	4b0b      	ldr	r3, [pc, #44]	; (8008ce8 <MX_SDIO_SD_Init+0x38>)
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8008cc0:	4b09      	ldr	r3, [pc, #36]	; (8008ce8 <MX_SDIO_SD_Init+0x38>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008cc6:	4b08      	ldr	r3, [pc, #32]	; (8008ce8 <MX_SDIO_SD_Init+0x38>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8008ccc:	4b06      	ldr	r3, [pc, #24]	; (8008ce8 <MX_SDIO_SD_Init+0x38>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008cd2:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <MX_SDIO_SD_Init+0x38>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = SDIO_TRANSFER_CLK_DIV;
 8008cd8:	4b03      	ldr	r3, [pc, #12]	; (8008ce8 <MX_SDIO_SD_Init+0x38>)
 8008cda:	2203      	movs	r2, #3
 8008cdc:	619a      	str	r2, [r3, #24]

}
 8008cde:	bf00      	nop
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	20000394 	.word	0x20000394
 8008cec:	40012c00 	.word	0x40012c00

08008cf0 <MX_UART4_Init>:

}

/* UART4 init function */
void MX_UART4_Init(void)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8008cf4:	4b11      	ldr	r3, [pc, #68]	; (8008d3c <MX_UART4_Init+0x4c>)
 8008cf6:	4a12      	ldr	r2, [pc, #72]	; (8008d40 <MX_UART4_Init+0x50>)
 8008cf8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8008cfa:	4b10      	ldr	r3, [pc, #64]	; (8008d3c <MX_UART4_Init+0x4c>)
 8008cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008d00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8008d02:	4b0e      	ldr	r3, [pc, #56]	; (8008d3c <MX_UART4_Init+0x4c>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8008d08:	4b0c      	ldr	r3, [pc, #48]	; (8008d3c <MX_UART4_Init+0x4c>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8008d0e:	4b0b      	ldr	r3, [pc, #44]	; (8008d3c <MX_UART4_Init+0x4c>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8008d14:	4b09      	ldr	r3, [pc, #36]	; (8008d3c <MX_UART4_Init+0x4c>)
 8008d16:	220c      	movs	r2, #12
 8008d18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008d1a:	4b08      	ldr	r3, [pc, #32]	; (8008d3c <MX_UART4_Init+0x4c>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008d20:	4b06      	ldr	r3, [pc, #24]	; (8008d3c <MX_UART4_Init+0x4c>)
 8008d22:	2200      	movs	r2, #0
 8008d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8008d26:	4805      	ldr	r0, [pc, #20]	; (8008d3c <MX_UART4_Init+0x4c>)
 8008d28:	f7fe f9e6 	bl	80070f8 <HAL_UART_Init>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8008d32:	f7fa f8d5 	bl	8002ee0 <Error_Handler>
  }

}
 8008d36:	bf00      	nop
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20000674 	.word	0x20000674
 8008d40:	40004c00 	.word	0x40004c00

08008d44 <MX_USART1_UART_Init>:

/* USART1 init function */
void MX_USART1_UART_Init(void)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8008d48:	4b11      	ldr	r3, [pc, #68]	; (8008d90 <MX_USART1_UART_Init+0x4c>)
 8008d4a:	4a12      	ldr	r2, [pc, #72]	; (8008d94 <MX_USART1_UART_Init+0x50>)
 8008d4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008d4e:	4b10      	ldr	r3, [pc, #64]	; (8008d90 <MX_USART1_UART_Init+0x4c>)
 8008d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008d54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008d56:	4b0e      	ldr	r3, [pc, #56]	; (8008d90 <MX_USART1_UART_Init+0x4c>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008d5c:	4b0c      	ldr	r3, [pc, #48]	; (8008d90 <MX_USART1_UART_Init+0x4c>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008d62:	4b0b      	ldr	r3, [pc, #44]	; (8008d90 <MX_USART1_UART_Init+0x4c>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008d68:	4b09      	ldr	r3, [pc, #36]	; (8008d90 <MX_USART1_UART_Init+0x4c>)
 8008d6a:	220c      	movs	r2, #12
 8008d6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008d6e:	4b08      	ldr	r3, [pc, #32]	; (8008d90 <MX_USART1_UART_Init+0x4c>)
 8008d70:	2200      	movs	r2, #0
 8008d72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008d74:	4b06      	ldr	r3, [pc, #24]	; (8008d90 <MX_USART1_UART_Init+0x4c>)
 8008d76:	2200      	movs	r2, #0
 8008d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008d7a:	4805      	ldr	r0, [pc, #20]	; (8008d90 <MX_USART1_UART_Init+0x4c>)
 8008d7c:	f7fe f9bc 	bl	80070f8 <HAL_UART_Init>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008d86:	f7fa f8ab 	bl	8002ee0 <Error_Handler>
  }

}
 8008d8a:	bf00      	nop
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	200006b4 	.word	0x200006b4
 8008d94:	40011000 	.word	0x40011000

08008d98 <MX_USART6_UART_Init>:

/* USART6 init function */
void MX_USART6_UART_Init(void)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8008d9c:	4b15      	ldr	r3, [pc, #84]	; (8008df4 <MX_USART6_UART_Init+0x5c>)
 8008d9e:	4a16      	ldr	r2, [pc, #88]	; (8008df8 <MX_USART6_UART_Init+0x60>)
 8008da0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8008da2:	4b14      	ldr	r3, [pc, #80]	; (8008df4 <MX_USART6_UART_Init+0x5c>)
 8008da4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008da8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8008daa:	4b12      	ldr	r3, [pc, #72]	; (8008df4 <MX_USART6_UART_Init+0x5c>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8008db0:	4b10      	ldr	r3, [pc, #64]	; (8008df4 <MX_USART6_UART_Init+0x5c>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8008db6:	4b0f      	ldr	r3, [pc, #60]	; (8008df4 <MX_USART6_UART_Init+0x5c>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8008dbc:	4b0d      	ldr	r3, [pc, #52]	; (8008df4 <MX_USART6_UART_Init+0x5c>)
 8008dbe:	220c      	movs	r2, #12
 8008dc0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008dc2:	4b0c      	ldr	r3, [pc, #48]	; (8008df4 <MX_USART6_UART_Init+0x5c>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8008dc8:	4b0a      	ldr	r3, [pc, #40]	; (8008df4 <MX_USART6_UART_Init+0x5c>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8008dce:	4809      	ldr	r0, [pc, #36]	; (8008df4 <MX_USART6_UART_Init+0x5c>)
 8008dd0:	f7fe f992 	bl	80070f8 <HAL_UART_Init>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8008dda:	f7fa f881 	bl	8002ee0 <Error_Handler>
  }
  //Enable interrupts
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8008dde:	2200      	movs	r2, #0
 8008de0:	2100      	movs	r1, #0
 8008de2:	2047      	movs	r0, #71	; 0x47
 8008de4:	f7fa f9fb 	bl	80031de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8008de8:	2047      	movs	r0, #71	; 0x47
 8008dea:	f7fa fa14 	bl	8003216 <HAL_NVIC_EnableIRQ>
}
 8008dee:	bf00      	nop
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	200006f4 	.word	0x200006f4
 8008df8:	40011400 	.word	0x40011400

08008dfc <MX_WWDG_Init>:

}

/* WWDG init function */
void MX_WWDG_Init(void)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	af00      	add	r7, sp, #0

  hwwdg.Instance = WWDG;
 8008e00:	4b0d      	ldr	r3, [pc, #52]	; (8008e38 <MX_WWDG_Init+0x3c>)
 8008e02:	4a0e      	ldr	r2, [pc, #56]	; (8008e3c <MX_WWDG_Init+0x40>)
 8008e04:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 8008e06:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <MX_WWDG_Init+0x3c>)
 8008e08:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8008e0c:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8008e0e:	4b0a      	ldr	r3, [pc, #40]	; (8008e38 <MX_WWDG_Init+0x3c>)
 8008e10:	2240      	movs	r2, #64	; 0x40
 8008e12:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 8008e14:	4b08      	ldr	r3, [pc, #32]	; (8008e38 <MX_WWDG_Init+0x3c>)
 8008e16:	2240      	movs	r2, #64	; 0x40
 8008e18:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_ENABLE;
 8008e1a:	4b07      	ldr	r3, [pc, #28]	; (8008e38 <MX_WWDG_Init+0x3c>)
 8008e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e20:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8008e22:	4805      	ldr	r0, [pc, #20]	; (8008e38 <MX_WWDG_Init+0x3c>)
 8008e24:	f7fe ff48 	bl	8007cb8 <HAL_WWDG_Init>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d001      	beq.n	8008e32 <MX_WWDG_Init+0x36>
  {
    Error_Handler();
 8008e2e:	f7fa f857 	bl	8002ee0 <Error_Handler>
  }

}
 8008e32:	bf00      	nop
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	20000734 	.word	0x20000734
 8008e3c:	40002c00 	.word	0x40002c00

08008e40 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008e4a:	f000 f89d 	bl	8008f88 <BSP_SD_IsDetected>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d001      	beq.n	8008e58 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e012      	b.n	8008e7e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008e58:	480b      	ldr	r0, [pc, #44]	; (8008e88 <BSP_SD_Init+0x48>)
 8008e5a:	f7fc fb2b 	bl	80054b4 <HAL_SD_Init>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	71fb      	strb	r3, [r7, #7]
#ifdef BUS_4BITS
  /* Configure SD Bus width */
  if (sd_state == MSD_OK)
 8008e62:	79fb      	ldrb	r3, [r7, #7]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d109      	bne.n	8008e7c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008e68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008e6c:	4806      	ldr	r0, [pc, #24]	; (8008e88 <BSP_SD_Init+0x48>)
 8008e6e:	f7fd faa4 	bl	80063ba <HAL_SD_ConfigWideBusOperation>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif
  return sd_state;
 8008e7c:	79fb      	ldrb	r3, [r7, #7]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	20000394 	.word	0x20000394

08008e8c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b088      	sub	sp, #32
 8008e90:	af02      	add	r7, sp, #8
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
 8008e98:	603b      	str	r3, [r7, #0]
  uint8_t sd_state;

  __HAL_LOCK(&hsd);
 8008e9a:	4b0d      	ldr	r3, [pc, #52]	; (8008ed0 <BSP_SD_ReadBlocks+0x44>)
 8008e9c:	7f1b      	ldrb	r3, [r3, #28]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d101      	bne.n	8008ea6 <BSP_SD_ReadBlocks+0x1a>
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	e010      	b.n	8008ec8 <BSP_SD_ReadBlocks+0x3c>
 8008ea6:	4b0a      	ldr	r3, [pc, #40]	; (8008ed0 <BSP_SD_ReadBlocks+0x44>)
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	771a      	strb	r2, [r3, #28]
  sd_state = HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout);
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	68f9      	ldr	r1, [r7, #12]
 8008eb6:	4806      	ldr	r0, [pc, #24]	; (8008ed0 <BSP_SD_ReadBlocks+0x44>)
 8008eb8:	f7fc fb84 	bl	80055c4 <HAL_SD_ReadBlocks>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	75fb      	strb	r3, [r7, #23]
  __HAL_UNLOCK(&hsd);
 8008ec0:	4b03      	ldr	r3, [pc, #12]	; (8008ed0 <BSP_SD_ReadBlocks+0x44>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	771a      	strb	r2, [r3, #28]
  
  return sd_state;  
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3718      	adds	r7, #24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	20000394 	.word	0x20000394

08008ed4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b088      	sub	sp, #32
 8008ed8:	af02      	add	r7, sp, #8
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
 8008ee0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	75fb      	strb	r3, [r7, #23]

  __HAL_LOCK(&hsd);
 8008ee6:	4b0d      	ldr	r3, [pc, #52]	; (8008f1c <BSP_SD_WriteBlocks+0x48>)
 8008ee8:	7f1b      	ldrb	r3, [r3, #28]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d101      	bne.n	8008ef2 <BSP_SD_WriteBlocks+0x1e>
 8008eee:	2302      	movs	r3, #2
 8008ef0:	e010      	b.n	8008f14 <BSP_SD_WriteBlocks+0x40>
 8008ef2:	4b0a      	ldr	r3, [pc, #40]	; (8008f1c <BSP_SD_WriteBlocks+0x48>)
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	771a      	strb	r2, [r3, #28]
  sd_state = HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	68f9      	ldr	r1, [r7, #12]
 8008f02:	4806      	ldr	r0, [pc, #24]	; (8008f1c <BSP_SD_WriteBlocks+0x48>)
 8008f04:	f7fc fcf5 	bl	80058f2 <HAL_SD_WriteBlocks>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	75fb      	strb	r3, [r7, #23]
  __HAL_UNLOCK(&hsd);
 8008f0c:	4b03      	ldr	r3, [pc, #12]	; (8008f1c <BSP_SD_WriteBlocks+0x48>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	771a      	strb	r2, [r3, #28]

  return sd_state;  
 8008f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3718      	adds	r7, #24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	20000394 	.word	0x20000394

08008f20 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
  uint8_t sd_state;  

  __HAL_LOCK(&hsd);
 8008f26:	4b0e      	ldr	r3, [pc, #56]	; (8008f60 <BSP_SD_GetCardState+0x40>)
 8008f28:	7f1b      	ldrb	r3, [r3, #28]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d101      	bne.n	8008f32 <BSP_SD_GetCardState+0x12>
 8008f2e:	2302      	movs	r3, #2
 8008f30:	e011      	b.n	8008f56 <BSP_SD_GetCardState+0x36>
 8008f32:	4b0b      	ldr	r3, [pc, #44]	; (8008f60 <BSP_SD_GetCardState+0x40>)
 8008f34:	2201      	movs	r2, #1
 8008f36:	771a      	strb	r2, [r3, #28]
  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER)
 8008f38:	4809      	ldr	r0, [pc, #36]	; (8008f60 <BSP_SD_GetCardState+0x40>)
 8008f3a:	f7fd faba 	bl	80064b2 <HAL_SD_GetCardState>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b04      	cmp	r3, #4
 8008f42:	d102      	bne.n	8008f4a <BSP_SD_GetCardState+0x2a>
    sd_state = HAL_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	71fb      	strb	r3, [r7, #7]
 8008f48:	e001      	b.n	8008f4e <BSP_SD_GetCardState+0x2e>
  else
    sd_state = HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	71fb      	strb	r3, [r7, #7]
  __HAL_UNLOCK(&hsd);
 8008f4e:	4b04      	ldr	r3, [pc, #16]	; (8008f60 <BSP_SD_GetCardState+0x40>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	771a      	strb	r2, [r3, #28]
  
  return sd_state;
 8008f54:	79fb      	ldrb	r3, [r7, #7]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	20000394 	.word	0x20000394

08008f64 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f6c:	b672      	cpsid	i
}
 8008f6e:	bf00      	nop
  /* Get SD card Information */
    __disable_irq();
    HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008f70:	6879      	ldr	r1, [r7, #4]
 8008f72:	4804      	ldr	r0, [pc, #16]	; (8008f84 <BSP_SD_GetCardInfo+0x20>)
 8008f74:	f7fd f9f5 	bl	8006362 <HAL_SD_GetCardInfo>
  __ASM volatile ("cpsie i" : : : "memory");
 8008f78:	b662      	cpsie	i
}
 8008f7a:	bf00      	nop
    __enable_irq();
}
 8008f7c:	bf00      	nop
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	20000394 	.word	0x20000394

08008f88 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8008f92:	79fb      	ldrb	r3, [r7, #7]
 8008f94:	b2db      	uxtb	r3, r3
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
	...

08008fa4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver((Diskio_drvTypeDef*)&SD_Driver, SD_Path);
 8008fa8:	4904      	ldr	r1, [pc, #16]	; (8008fbc <MX_FATFS_Init+0x18>)
 8008faa:	4805      	ldr	r0, [pc, #20]	; (8008fc0 <MX_FATFS_Init+0x1c>)
 8008fac:	f000 fc3c 	bl	8009828 <FATFS_LinkDriver>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	4b03      	ldr	r3, [pc, #12]	; (8008fc4 <MX_FATFS_Init+0x20>)
 8008fb6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8008fb8:	bf00      	nop
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	200007d4 	.word	0x200007d4
 8008fc0:	0800f548 	.word	0x0800f548
 8008fc4:	200007d0 	.word	0x200007d0

08008fc8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008fd2:	4b0b      	ldr	r3, [pc, #44]	; (8009000 <SD_initialize+0x38>)
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8008fd8:	f7ff ff32 	bl	8008e40 <BSP_SD_Init>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d107      	bne.n	8008ff2 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008fe2:	4b07      	ldr	r3, [pc, #28]	; (8009000 <SD_initialize+0x38>)
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	f023 0301 	bic.w	r3, r3, #1
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	4b04      	ldr	r3, [pc, #16]	; (8009000 <SD_initialize+0x38>)
 8008ff0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008ff2:	4b03      	ldr	r3, [pc, #12]	; (8009000 <SD_initialize+0x38>)
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	b2db      	uxtb	r3, r3
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	20000010 	.word	0x20000010

08009004 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	4603      	mov	r3, r0
 800900c:	71fb      	strb	r3, [r7, #7]
  
  if(BSP_SD_GetCardState() != SD_TRANSFER_BUSY)
 800900e:	f7ff ff87 	bl	8008f20 <BSP_SD_GetCardState>
 8009012:	4603      	mov	r3, r0
 8009014:	2b01      	cmp	r3, #1
 8009016:	d008      	beq.n	800902a <SD_status+0x26>
    Stat &= ~STA_BUSY;
 8009018:	4b0b      	ldr	r3, [pc, #44]	; (8009048 <SD_status+0x44>)
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	b2db      	uxtb	r3, r3
 800901e:	f023 0308 	bic.w	r3, r3, #8
 8009022:	b2da      	uxtb	r2, r3
 8009024:	4b08      	ldr	r3, [pc, #32]	; (8009048 <SD_status+0x44>)
 8009026:	701a      	strb	r2, [r3, #0]
 8009028:	e007      	b.n	800903a <SD_status+0x36>
  else
    Stat |= STA_BUSY;
 800902a:	4b07      	ldr	r3, [pc, #28]	; (8009048 <SD_status+0x44>)
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	b2db      	uxtb	r3, r3
 8009030:	f043 0308 	orr.w	r3, r3, #8
 8009034:	b2da      	uxtb	r2, r3
 8009036:	4b04      	ldr	r3, [pc, #16]	; (8009048 <SD_status+0x44>)
 8009038:	701a      	strb	r2, [r3, #0]
  
  return Stat;
 800903a:	4b03      	ldr	r3, [pc, #12]	; (8009048 <SD_status+0x44>)
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	b2db      	uxtb	r3, r3
}
 8009040:	4618      	mov	r0, r3
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	20000010 	.word	0x20000010

0800904c <SD_read>:
  */
    
#define MMC_RDWR_TRIES       20
#define MMC_STATUS_TRIES     500
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	60b9      	str	r1, [r7, #8]
 8009054:	607a      	str	r2, [r7, #4]
 8009056:	603b      	str	r3, [r7, #0]
 8009058:	4603      	mov	r3, r0
 800905a:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = MMC_RDWR_TRIES;
 800905c:	2314      	movs	r3, #20
 800905e:	617b      	str	r3, [r7, #20]

  while (BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t) (sector), count, SD_DATATIMEOUT) != HAL_OK)
 8009060:	e009      	b.n	8009076 <SD_read+0x2a>
  {
    if (timeout-- == 0)
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	1e5a      	subs	r2, r3, #1
 8009066:	617a      	str	r2, [r7, #20]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d101      	bne.n	8009070 <SD_read+0x24>
    {
      return RES_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	e020      	b.n	80090b2 <SD_read+0x66>
    }
    osDelay(1);
 8009070:	2001      	movs	r0, #1
 8009072:	f000 fc50 	bl	8009916 <osDelay>
  while (BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t) (sector), count, SD_DATATIMEOUT) != HAL_OK)
 8009076:	f241 3388 	movw	r3, #5000	; 0x1388
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	6879      	ldr	r1, [r7, #4]
 800907e:	68b8      	ldr	r0, [r7, #8]
 8009080:	f7ff ff04 	bl	8008e8c <BSP_SD_ReadBlocks>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1eb      	bne.n	8009062 <SD_read+0x16>
  }
  timeout = MMC_STATUS_TRIES;
 800908a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800908e:	617b      	str	r3, [r7, #20]
  while (BSP_SD_GetCardState() != HAL_OK)
 8009090:	e009      	b.n	80090a6 <SD_read+0x5a>
  {
    if (timeout-- == 0)
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	1e5a      	subs	r2, r3, #1
 8009096:	617a      	str	r2, [r7, #20]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d101      	bne.n	80090a0 <SD_read+0x54>
    {
      return RES_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e008      	b.n	80090b2 <SD_read+0x66>
    }
    osDelay(1);
 80090a0:	2001      	movs	r0, #1
 80090a2:	f000 fc38 	bl	8009916 <osDelay>
  while (BSP_SD_GetCardState() != HAL_OK)
 80090a6:	f7ff ff3b 	bl	8008f20 <BSP_SD_GetCardState>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1f0      	bne.n	8009092 <SD_read+0x46>
  }
  return RES_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3718      	adds	r7, #24
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b086      	sub	sp, #24
 80090be:	af00      	add	r7, sp, #0
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
 80090c4:	603b      	str	r3, [r7, #0]
 80090c6:	4603      	mov	r3, r0
 80090c8:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = MMC_RDWR_TRIES;
 80090ca:	2314      	movs	r3, #20
 80090cc:	617b      	str	r3, [r7, #20]

  while (BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_DATATIMEOUT) != HAL_OK)
 80090ce:	e009      	b.n	80090e4 <SD_write+0x2a>
  {
    if (timeout-- == 0)
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	1e5a      	subs	r2, r3, #1
 80090d4:	617a      	str	r2, [r7, #20]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d101      	bne.n	80090de <SD_write+0x24>
    {
      return RES_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e020      	b.n	8009120 <SD_write+0x66>
    }
    osDelay(1);
 80090de:	2001      	movs	r0, #1
 80090e0:	f000 fc19 	bl	8009916 <osDelay>
  while (BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_DATATIMEOUT) != HAL_OK)
 80090e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	6879      	ldr	r1, [r7, #4]
 80090ec:	68b8      	ldr	r0, [r7, #8]
 80090ee:	f7ff fef1 	bl	8008ed4 <BSP_SD_WriteBlocks>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1eb      	bne.n	80090d0 <SD_write+0x16>
  }
  timeout = MMC_STATUS_TRIES;
 80090f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80090fc:	617b      	str	r3, [r7, #20]
  while(BSP_SD_GetCardState() != HAL_OK)
 80090fe:	e009      	b.n	8009114 <SD_write+0x5a>
  {
    if (timeout-- == 0)
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	1e5a      	subs	r2, r3, #1
 8009104:	617a      	str	r2, [r7, #20]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <SD_write+0x54>
    {
      return RES_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e008      	b.n	8009120 <SD_write+0x66>
    }
    osDelay(1);
 800910e:	2001      	movs	r0, #1
 8009110:	f000 fc01 	bl	8009916 <osDelay>
  while(BSP_SD_GetCardState() != HAL_OK)
 8009114:	f7ff ff04 	bl	8008f20 <BSP_SD_GetCardState>
 8009118:	4603      	mov	r3, r0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1f0      	bne.n	8009100 <SD_write+0x46>
  }    
  return RES_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3718      	adds	r7, #24
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b08c      	sub	sp, #48	; 0x30
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	603a      	str	r2, [r7, #0]
 8009132:	71fb      	strb	r3, [r7, #7]
 8009134:	460b      	mov	r3, r1
 8009136:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) 
 800913e:	4b24      	ldr	r3, [pc, #144]	; (80091d0 <SD_ioctl+0xa8>)
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	b2db      	uxtb	r3, r3
 8009144:	f003 0301 	and.w	r3, r3, #1
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <SD_ioctl+0x28>
    return RES_NOTRDY;
 800914c:	2303      	movs	r3, #3
 800914e:	e03b      	b.n	80091c8 <SD_ioctl+0xa0>
  
  switch (cmd)
 8009150:	79bb      	ldrb	r3, [r7, #6]
 8009152:	2b03      	cmp	r3, #3
 8009154:	d833      	bhi.n	80091be <SD_ioctl+0x96>
 8009156:	a201      	add	r2, pc, #4	; (adr r2, 800915c <SD_ioctl+0x34>)
 8009158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915c:	0800916d 	.word	0x0800916d
 8009160:	08009175 	.word	0x08009175
 8009164:	0800918d 	.word	0x0800918d
 8009168:	080091a7 	.word	0x080091a7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009172:	e027      	b.n	80091c4 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009174:	f107 030c 	add.w	r3, r7, #12
 8009178:	4618      	mov	r0, r3
 800917a:	f7ff fef3 	bl	8008f64 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800917e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800918a:	e01b      	b.n	80091c4 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800918c:	f107 030c 	add.w	r3, r7, #12
 8009190:	4618      	mov	r0, r3
 8009192:	f7ff fee7 	bl	8008f64 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009198:	b29a      	uxth	r2, r3
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80091a4:	e00e      	b.n	80091c4 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80091a6:	f107 030c 	add.w	r3, r7, #12
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7ff feda 	bl	8008f64 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 80091b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80091bc:	e002      	b.n	80091c4 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 80091be:	2304      	movs	r3, #4
 80091c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 80091c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3730      	adds	r7, #48	; 0x30
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	20000010 	.word	0x20000010

080091d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80091d8:	2003      	movs	r0, #3
 80091da:	f7f9 fff5 	bl	80031c8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80091de:	2200      	movs	r2, #0
 80091e0:	2100      	movs	r1, #0
 80091e2:	f06f 000b 	mvn.w	r0, #11
 80091e6:	f7f9 fffa 	bl	80031de <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80091ea:	2200      	movs	r2, #0
 80091ec:	2100      	movs	r1, #0
 80091ee:	f06f 000a 	mvn.w	r0, #10
 80091f2:	f7f9 fff4 	bl	80031de <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80091f6:	2200      	movs	r2, #0
 80091f8:	2100      	movs	r1, #0
 80091fa:	f06f 0009 	mvn.w	r0, #9
 80091fe:	f7f9 ffee 	bl	80031de <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8009202:	2200      	movs	r2, #0
 8009204:	2100      	movs	r1, #0
 8009206:	f06f 0004 	mvn.w	r0, #4
 800920a:	f7f9 ffe8 	bl	80031de <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800920e:	2200      	movs	r2, #0
 8009210:	2100      	movs	r1, #0
 8009212:	f06f 0003 	mvn.w	r0, #3
 8009216:	f7f9 ffe2 	bl	80031de <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800921a:	2200      	movs	r2, #0
 800921c:	210f      	movs	r1, #15
 800921e:	f06f 0001 	mvn.w	r0, #1
 8009222:	f7f9 ffdc 	bl	80031de <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8009226:	2200      	movs	r2, #0
 8009228:	210f      	movs	r1, #15
 800922a:	f04f 30ff 	mov.w	r0, #4294967295
 800922e:	f7f9 ffd6 	bl	80031de <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009232:	bf00      	nop
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <HAL_I2C_MspInit>:
  /* USER CODE END CAN1_MspDeInit 1 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08a      	sub	sp, #40	; 0x28
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a37      	ldr	r2, [pc, #220]	; (8009324 <HAL_I2C_MspInit+0xec>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d11f      	bne.n	800928a <HAL_I2C_MspInit+0x52>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SYS_SCL_Pin|SYS_SDA_Pin;
 800924a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800924e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009250:	2312      	movs	r3, #18
 8009252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009254:	2301      	movs	r3, #1
 8009256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009258:	2303      	movs	r3, #3
 800925a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800925c:	2304      	movs	r3, #4
 800925e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009260:	f107 0314 	add.w	r3, r7, #20
 8009264:	4619      	mov	r1, r3
 8009266:	4830      	ldr	r0, [pc, #192]	; (8009328 <HAL_I2C_MspInit+0xf0>)
 8009268:	f7fa f9bc 	bl	80035e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800926c:	2300      	movs	r3, #0
 800926e:	613b      	str	r3, [r7, #16]
 8009270:	4b2e      	ldr	r3, [pc, #184]	; (800932c <HAL_I2C_MspInit+0xf4>)
 8009272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009274:	4a2d      	ldr	r2, [pc, #180]	; (800932c <HAL_I2C_MspInit+0xf4>)
 8009276:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800927a:	6413      	str	r3, [r2, #64]	; 0x40
 800927c:	4b2b      	ldr	r3, [pc, #172]	; (800932c <HAL_I2C_MspInit+0xf4>)
 800927e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009284:	613b      	str	r3, [r7, #16]
 8009286:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8009288:	e048      	b.n	800931c <HAL_I2C_MspInit+0xe4>
  else if(hi2c->Instance==I2C2)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a28      	ldr	r2, [pc, #160]	; (8009330 <HAL_I2C_MspInit+0xf8>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d11f      	bne.n	80092d4 <HAL_I2C_MspInit+0x9c>
    GPIO_InitStruct.Pin = SEN_SCL_Pin|SEN_SDA_Pin;
 8009294:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800929a:	2312      	movs	r3, #18
 800929c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800929e:	2301      	movs	r3, #1
 80092a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092a2:	2303      	movs	r3, #3
 80092a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80092a6:	2304      	movs	r3, #4
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092aa:	f107 0314 	add.w	r3, r7, #20
 80092ae:	4619      	mov	r1, r3
 80092b0:	481d      	ldr	r0, [pc, #116]	; (8009328 <HAL_I2C_MspInit+0xf0>)
 80092b2:	f7fa f997 	bl	80035e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80092b6:	2300      	movs	r3, #0
 80092b8:	60fb      	str	r3, [r7, #12]
 80092ba:	4b1c      	ldr	r3, [pc, #112]	; (800932c <HAL_I2C_MspInit+0xf4>)
 80092bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092be:	4a1b      	ldr	r2, [pc, #108]	; (800932c <HAL_I2C_MspInit+0xf4>)
 80092c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092c4:	6413      	str	r3, [r2, #64]	; 0x40
 80092c6:	4b19      	ldr	r3, [pc, #100]	; (800932c <HAL_I2C_MspInit+0xf4>)
 80092c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092ce:	60fb      	str	r3, [r7, #12]
 80092d0:	68fb      	ldr	r3, [r7, #12]
}
 80092d2:	e023      	b.n	800931c <HAL_I2C_MspInit+0xe4>
  else if(hi2c->Instance==I2C3)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a16      	ldr	r2, [pc, #88]	; (8009334 <HAL_I2C_MspInit+0xfc>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d11e      	bne.n	800931c <HAL_I2C_MspInit+0xe4>
    GPIO_InitStruct.Pin = PAY_SCL_Pin|PAY_SDA_Pin;
 80092de:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80092e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80092e4:	2312      	movs	r3, #18
 80092e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80092e8:	2301      	movs	r3, #1
 80092ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092ec:	2303      	movs	r3, #3
 80092ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80092f0:	2304      	movs	r3, #4
 80092f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80092f4:	f107 0314 	add.w	r3, r7, #20
 80092f8:	4619      	mov	r1, r3
 80092fa:	480f      	ldr	r0, [pc, #60]	; (8009338 <HAL_I2C_MspInit+0x100>)
 80092fc:	f7fa f972 	bl	80035e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8009300:	2300      	movs	r3, #0
 8009302:	60bb      	str	r3, [r7, #8]
 8009304:	4b09      	ldr	r3, [pc, #36]	; (800932c <HAL_I2C_MspInit+0xf4>)
 8009306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009308:	4a08      	ldr	r2, [pc, #32]	; (800932c <HAL_I2C_MspInit+0xf4>)
 800930a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800930e:	6413      	str	r3, [r2, #64]	; 0x40
 8009310:	4b06      	ldr	r3, [pc, #24]	; (800932c <HAL_I2C_MspInit+0xf4>)
 8009312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009314:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009318:	60bb      	str	r3, [r7, #8]
 800931a:	68bb      	ldr	r3, [r7, #8]
}
 800931c:	bf00      	nop
 800931e:	3728      	adds	r7, #40	; 0x28
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	40005400 	.word	0x40005400
 8009328:	40020400 	.word	0x40020400
 800932c:	40023800 	.word	0x40023800
 8009330:	40005800 	.word	0x40005800
 8009334:	40005c00 	.word	0x40005c00
 8009338:	40021c00 	.word	0x40021c00

0800933c <HAL_SD_MspInit>:
  /* USER CODE END RTC_MspDeInit 1 */

}

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b088      	sub	sp, #32
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDIO)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a1e      	ldr	r2, [pc, #120]	; (80093c4 <HAL_SD_MspInit+0x88>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d136      	bne.n	80093bc <HAL_SD_MspInit+0x80>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800934e:	2300      	movs	r3, #0
 8009350:	60bb      	str	r3, [r7, #8]
 8009352:	4b1d      	ldr	r3, [pc, #116]	; (80093c8 <HAL_SD_MspInit+0x8c>)
 8009354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009356:	4a1c      	ldr	r2, [pc, #112]	; (80093c8 <HAL_SD_MspInit+0x8c>)
 8009358:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800935c:	6453      	str	r3, [r2, #68]	; 0x44
 800935e:	4b1a      	ldr	r3, [pc, #104]	; (80093c8 <HAL_SD_MspInit+0x8c>)
 8009360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009366:	60bb      	str	r3, [r7, #8]
 8009368:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800936a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800936e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009370:	2302      	movs	r3, #2
 8009372:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009374:	2300      	movs	r3, #0
 8009376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009378:	2303      	movs	r3, #3
 800937a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800937c:	230c      	movs	r3, #12
 800937e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009380:	f107 030c 	add.w	r3, r7, #12
 8009384:	4619      	mov	r1, r3
 8009386:	4811      	ldr	r0, [pc, #68]	; (80093cc <HAL_SD_MspInit+0x90>)
 8009388:	f7fa f92c 	bl	80035e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800938c:	2304      	movs	r3, #4
 800938e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009390:	2302      	movs	r3, #2
 8009392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009394:	2300      	movs	r3, #0
 8009396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009398:	2303      	movs	r3, #3
 800939a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800939c:	230c      	movs	r3, #12
 800939e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80093a0:	f107 030c 	add.w	r3, r7, #12
 80093a4:	4619      	mov	r1, r3
 80093a6:	480a      	ldr	r0, [pc, #40]	; (80093d0 <HAL_SD_MspInit+0x94>)
 80093a8:	f7fa f91c 	bl	80035e4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SDIO_IRQn, USER_INT_PRIORITY, 0);
 80093ac:	2200      	movs	r2, #0
 80093ae:	2106      	movs	r1, #6
 80093b0:	2031      	movs	r0, #49	; 0x31
 80093b2:	f7f9 ff14 	bl	80031de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80093b6:	2031      	movs	r0, #49	; 0x31
 80093b8:	f7f9 ff2d 	bl	8003216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80093bc:	bf00      	nop
 80093be:	3720      	adds	r7, #32
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	40012c00 	.word	0x40012c00
 80093c8:	40023800 	.word	0x40023800
 80093cc:	40020800 	.word	0x40020800
 80093d0:	40020c00 	.word	0x40020c00

080093d4 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM5)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a0b      	ldr	r2, [pc, #44]	; (8009410 <HAL_TIM_Base_MspInit+0x3c>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d10d      	bne.n	8009402 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80093e6:	2300      	movs	r3, #0
 80093e8:	60fb      	str	r3, [r7, #12]
 80093ea:	4b0a      	ldr	r3, [pc, #40]	; (8009414 <HAL_TIM_Base_MspInit+0x40>)
 80093ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ee:	4a09      	ldr	r2, [pc, #36]	; (8009414 <HAL_TIM_Base_MspInit+0x40>)
 80093f0:	f043 0308 	orr.w	r3, r3, #8
 80093f4:	6413      	str	r3, [r2, #64]	; 0x40
 80093f6:	4b07      	ldr	r3, [pc, #28]	; (8009414 <HAL_TIM_Base_MspInit+0x40>)
 80093f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fa:	f003 0308 	and.w	r3, r3, #8
 80093fe:	60fb      	str	r3, [r7, #12]
 8009400:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8009402:	bf00      	nop
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	40000c00 	.word	0x40000c00
 8009414:	40023800 	.word	0x40023800

08009418 <HAL_UART_MspInit>:
  /* USER CODE END TIM5_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b08a      	sub	sp, #40	; 0x28
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a42      	ldr	r2, [pc, #264]	; (8009530 <HAL_UART_MspInit+0x118>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d126      	bne.n	8009478 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800942a:	2300      	movs	r3, #0
 800942c:	613b      	str	r3, [r7, #16]
 800942e:	4b41      	ldr	r3, [pc, #260]	; (8009534 <HAL_UART_MspInit+0x11c>)
 8009430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009432:	4a40      	ldr	r2, [pc, #256]	; (8009534 <HAL_UART_MspInit+0x11c>)
 8009434:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009438:	6413      	str	r3, [r2, #64]	; 0x40
 800943a:	4b3e      	ldr	r3, [pc, #248]	; (8009534 <HAL_UART_MspInit+0x11c>)
 800943c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009442:	613b      	str	r3, [r7, #16]
 8009444:	693b      	ldr	r3, [r7, #16]
  
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009446:	2303      	movs	r3, #3
 8009448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800944a:	2302      	movs	r3, #2
 800944c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800944e:	2301      	movs	r3, #1
 8009450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009452:	2303      	movs	r3, #3
 8009454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8009456:	2308      	movs	r3, #8
 8009458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800945a:	f107 0314 	add.w	r3, r7, #20
 800945e:	4619      	mov	r1, r3
 8009460:	4835      	ldr	r0, [pc, #212]	; (8009538 <HAL_UART_MspInit+0x120>)
 8009462:	f7fa f8bf 	bl	80035e4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(UART4_IRQn, USER_INT_PRIORITY, 0);
 8009466:	2200      	movs	r2, #0
 8009468:	2106      	movs	r1, #6
 800946a:	2034      	movs	r0, #52	; 0x34
 800946c:	f7f9 feb7 	bl	80031de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8009470:	2034      	movs	r0, #52	; 0x34
 8009472:	f7f9 fed0 	bl	8003216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8009476:	e057      	b.n	8009528 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART1)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a2f      	ldr	r2, [pc, #188]	; (800953c <HAL_UART_MspInit+0x124>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d127      	bne.n	80094d2 <HAL_UART_MspInit+0xba>
    __HAL_RCC_USART1_CLK_ENABLE();
 8009482:	2300      	movs	r3, #0
 8009484:	60fb      	str	r3, [r7, #12]
 8009486:	4b2b      	ldr	r3, [pc, #172]	; (8009534 <HAL_UART_MspInit+0x11c>)
 8009488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800948a:	4a2a      	ldr	r2, [pc, #168]	; (8009534 <HAL_UART_MspInit+0x11c>)
 800948c:	f043 0310 	orr.w	r3, r3, #16
 8009490:	6453      	str	r3, [r2, #68]	; 0x44
 8009492:	4b28      	ldr	r3, [pc, #160]	; (8009534 <HAL_UART_MspInit+0x11c>)
 8009494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009496:	f003 0310 	and.w	r3, r3, #16
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800949e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80094a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094a4:	2302      	movs	r3, #2
 80094a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80094a8:	2301      	movs	r3, #1
 80094aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094ac:	2303      	movs	r3, #3
 80094ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80094b0:	2307      	movs	r3, #7
 80094b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094b4:	f107 0314 	add.w	r3, r7, #20
 80094b8:	4619      	mov	r1, r3
 80094ba:	481f      	ldr	r0, [pc, #124]	; (8009538 <HAL_UART_MspInit+0x120>)
 80094bc:	f7fa f892 	bl	80035e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, USER_INT_PRIORITY, 0);
 80094c0:	2200      	movs	r2, #0
 80094c2:	2106      	movs	r1, #6
 80094c4:	2025      	movs	r0, #37	; 0x25
 80094c6:	f7f9 fe8a 	bl	80031de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);    
 80094ca:	2025      	movs	r0, #37	; 0x25
 80094cc:	f7f9 fea3 	bl	8003216 <HAL_NVIC_EnableIRQ>
}
 80094d0:	e02a      	b.n	8009528 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART6)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a1a      	ldr	r2, [pc, #104]	; (8009540 <HAL_UART_MspInit+0x128>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d125      	bne.n	8009528 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART6_CLK_ENABLE();
 80094dc:	2300      	movs	r3, #0
 80094de:	60bb      	str	r3, [r7, #8]
 80094e0:	4b14      	ldr	r3, [pc, #80]	; (8009534 <HAL_UART_MspInit+0x11c>)
 80094e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e4:	4a13      	ldr	r2, [pc, #76]	; (8009534 <HAL_UART_MspInit+0x11c>)
 80094e6:	f043 0320 	orr.w	r3, r3, #32
 80094ea:	6453      	str	r3, [r2, #68]	; 0x44
 80094ec:	4b11      	ldr	r3, [pc, #68]	; (8009534 <HAL_UART_MspInit+0x11c>)
 80094ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094f0:	f003 0320 	and.w	r3, r3, #32
 80094f4:	60bb      	str	r3, [r7, #8]
 80094f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PAY_TX_Pin|PAY_RX_Pin;
 80094f8:	23c0      	movs	r3, #192	; 0xc0
 80094fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094fc:	2302      	movs	r3, #2
 80094fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009500:	2301      	movs	r3, #1
 8009502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009504:	2303      	movs	r3, #3
 8009506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8009508:	2308      	movs	r3, #8
 800950a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800950c:	f107 0314 	add.w	r3, r7, #20
 8009510:	4619      	mov	r1, r3
 8009512:	480c      	ldr	r0, [pc, #48]	; (8009544 <HAL_UART_MspInit+0x12c>)
 8009514:	f7fa f866 	bl	80035e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, USER_INT_PRIORITY, 0);
 8009518:	2200      	movs	r2, #0
 800951a:	2106      	movs	r1, #6
 800951c:	2047      	movs	r0, #71	; 0x47
 800951e:	f7f9 fe5e 	bl	80031de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8009522:	2047      	movs	r0, #71	; 0x47
 8009524:	f7f9 fe77 	bl	8003216 <HAL_NVIC_EnableIRQ>
}
 8009528:	bf00      	nop
 800952a:	3728      	adds	r7, #40	; 0x28
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	40004c00 	.word	0x40004c00
 8009534:	40023800 	.word	0x40023800
 8009538:	40020000 	.word	0x40020000
 800953c:	40011000 	.word	0x40011000
 8009540:	40011400 	.word	0x40011400
 8009544:	40020800 	.word	0x40020800

08009548 <HAL_WWDG_MspInit>:
  }

}

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]

  if(hwwdg->Instance==WWDG)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a0b      	ldr	r2, [pc, #44]	; (8009584 <HAL_WWDG_MspInit+0x3c>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d10d      	bne.n	8009576 <HAL_WWDG_MspInit+0x2e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 800955a:	2300      	movs	r3, #0
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	4b0a      	ldr	r3, [pc, #40]	; (8009588 <HAL_WWDG_MspInit+0x40>)
 8009560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009562:	4a09      	ldr	r2, [pc, #36]	; (8009588 <HAL_WWDG_MspInit+0x40>)
 8009564:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009568:	6413      	str	r3, [r2, #64]	; 0x40
 800956a:	4b07      	ldr	r3, [pc, #28]	; (8009588 <HAL_WWDG_MspInit+0x40>)
 800956c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009572:	60fb      	str	r3, [r7, #12]
 8009574:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8009576:	bf00      	nop
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	40002c00 	.word	0x40002c00
 8009588:	40023800 	.word	0x40023800

0800958c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b08c      	sub	sp, #48	; 0x30
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009594:	2300      	movs	r3, #0
 8009596:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800959c:	2200      	movs	r2, #0
 800959e:	6879      	ldr	r1, [r7, #4]
 80095a0:	2019      	movs	r0, #25
 80095a2:	f7f9 fe1c 	bl	80031de <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80095a6:	2019      	movs	r0, #25
 80095a8:	f7f9 fe35 	bl	8003216 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80095ac:	2300      	movs	r3, #0
 80095ae:	60fb      	str	r3, [r7, #12]
 80095b0:	4b1f      	ldr	r3, [pc, #124]	; (8009630 <HAL_InitTick+0xa4>)
 80095b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095b4:	4a1e      	ldr	r2, [pc, #120]	; (8009630 <HAL_InitTick+0xa4>)
 80095b6:	f043 0301 	orr.w	r3, r3, #1
 80095ba:	6453      	str	r3, [r2, #68]	; 0x44
 80095bc:	4b1c      	ldr	r3, [pc, #112]	; (8009630 <HAL_InitTick+0xa4>)
 80095be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	60fb      	str	r3, [r7, #12]
 80095c6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80095c8:	f107 0210 	add.w	r2, r7, #16
 80095cc:	f107 0314 	add.w	r3, r7, #20
 80095d0:	4611      	mov	r1, r2
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7fb fd1e 	bl	8005014 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80095d8:	f7fb fcfa 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 80095dc:	4603      	mov	r3, r0
 80095de:	005b      	lsls	r3, r3, #1
 80095e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80095e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e4:	4a13      	ldr	r2, [pc, #76]	; (8009634 <HAL_InitTick+0xa8>)
 80095e6:	fba2 2303 	umull	r2, r3, r2, r3
 80095ea:	0c9b      	lsrs	r3, r3, #18
 80095ec:	3b01      	subs	r3, #1
 80095ee:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80095f0:	4b11      	ldr	r3, [pc, #68]	; (8009638 <HAL_InitTick+0xac>)
 80095f2:	4a12      	ldr	r2, [pc, #72]	; (800963c <HAL_InitTick+0xb0>)
 80095f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80095f6:	4b10      	ldr	r3, [pc, #64]	; (8009638 <HAL_InitTick+0xac>)
 80095f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80095fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80095fe:	4a0e      	ldr	r2, [pc, #56]	; (8009638 <HAL_InitTick+0xac>)
 8009600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009602:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8009604:	4b0c      	ldr	r3, [pc, #48]	; (8009638 <HAL_InitTick+0xac>)
 8009606:	2200      	movs	r2, #0
 8009608:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800960a:	4b0b      	ldr	r3, [pc, #44]	; (8009638 <HAL_InitTick+0xac>)
 800960c:	2200      	movs	r2, #0
 800960e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8009610:	4809      	ldr	r0, [pc, #36]	; (8009638 <HAL_InitTick+0xac>)
 8009612:	f7fd fb3c 	bl	8006c8e <HAL_TIM_Base_Init>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d104      	bne.n	8009626 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800961c:	4806      	ldr	r0, [pc, #24]	; (8009638 <HAL_InitTick+0xac>)
 800961e:	f7fd fb61 	bl	8006ce4 <HAL_TIM_Base_Start_IT>
 8009622:	4603      	mov	r3, r0
 8009624:	e000      	b.n	8009628 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
}
 8009628:	4618      	mov	r0, r3
 800962a:	3730      	adds	r7, #48	; 0x30
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	40023800 	.word	0x40023800
 8009634:	431bde83 	.word	0x431bde83
 8009638:	200007d8 	.word	0x200007d8
 800963c:	40010000 	.word	0x40010000

08009640 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8009640:	b480      	push	{r7}
 8009642:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009644:	bf00      	nop
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
	...

08009650 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  *((__IO uint32_t*)MAILBOX_ADDRESS) = MAILBOX_VAL_HARD;
 8009654:	4b03      	ldr	r3, [pc, #12]	; (8009664 <HardFault_Handler+0x14>)
 8009656:	4a04      	ldr	r2, [pc, #16]	; (8009668 <HardFault_Handler+0x18>)
 8009658:	601a      	str	r2, [r3, #0]
  MX_WWDG_Init();
 800965a:	f7ff fbcf 	bl	8008dfc <MX_WWDG_Init>
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	Error_Handler();
 800965e:	f7f9 fc3f 	bl	8002ee0 <Error_Handler>
 8009662:	e7fc      	b.n	800965e <HardFault_Handler+0xe>
 8009664:	40002854 	.word	0x40002854
 8009668:	0bad0bad 	.word	0x0bad0bad

0800966c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800966c:	b480      	push	{r7}
 800966e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009670:	e7fe      	b.n	8009670 <MemManage_Handler+0x4>

08009672 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8009672:	b480      	push	{r7}
 8009674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009676:	e7fe      	b.n	8009676 <BusFault_Handler+0x4>

08009678 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8009678:	b480      	push	{r7}
 800967a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800967c:	e7fe      	b.n	800967c <UsageFault_Handler+0x4>

0800967e <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800967e:	b480      	push	{r7}
 8009680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009682:	bf00      	nop
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8009690:	f000 f9e8 	bl	8009a64 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009694:	bf00      	nop
 8009696:	bd80      	pop	{r7, pc}

08009698 <SDIO_IRQHandler>:

/**
* @brief This function handles SDIO global interrupt.
*/
void SDIO_IRQHandler(void)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800969c:	4802      	ldr	r0, [pc, #8]	; (80096a8 <SDIO_IRQHandler+0x10>)
 800969e:	f7fc faa9 	bl	8005bf4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80096a2:	bf00      	nop
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	20000394 	.word	0x20000394

080096ac <USART1_IRQHandler>:

void  USART1_IRQHandler(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 80096b0:	4802      	ldr	r0, [pc, #8]	; (80096bc <USART1_IRQHandler+0x10>)
 80096b2:	f7fd fe55 	bl	8007360 <HAL_UART_IRQHandler>
}
 80096b6:	bf00      	nop
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	200006b4 	.word	0x200006b4

080096c0 <UART4_IRQHandler>:
void  UART4_IRQHandler(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart4);
 80096c4:	4802      	ldr	r0, [pc, #8]	; (80096d0 <UART4_IRQHandler+0x10>)
 80096c6:	f7fd fe4b 	bl	8007360 <HAL_UART_IRQHandler>
}
 80096ca:	bf00      	nop
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20000674 	.word	0x20000674

080096d4 <USART6_IRQHandler>:
void  USART6_IRQHandler(void)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart6);
 80096d8:	4802      	ldr	r0, [pc, #8]	; (80096e4 <USART6_IRQHandler+0x10>)
 80096da:	f7fd fe41 	bl	8007360 <HAL_UART_IRQHandler>
}
 80096de:	bf00      	nop
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	200006f4 	.word	0x200006f4

080096e8 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80096ec:	4802      	ldr	r0, [pc, #8]	; (80096f8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80096ee:	f7fd fb14 	bl	8006d1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80096f2:	bf00      	nop
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	200007d8 	.word	0x200007d8

080096fc <DMA2_Stream3_IRQHandler>:

/**
* @brief This function handles DMA2 stream3 global interrupt.
*/
void DMA2_Stream3_IRQHandler(void)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8009700:	4802      	ldr	r0, [pc, #8]	; (800970c <DMA2_Stream3_IRQHandler+0x10>)
 8009702:	f7f9 fde1 	bl	80032c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8009706:	bf00      	nop
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	20000418 	.word	0x20000418

08009710 <DMA2_Stream6_IRQHandler>:

/**
* @brief This function handles DMA2 stream6 global interrupt.
*/
void DMA2_Stream6_IRQHandler(void)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8009714:	4802      	ldr	r0, [pc, #8]	; (8009720 <DMA2_Stream6_IRQHandler+0x10>)
 8009716:	f7f9 fdd7 	bl	80032c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800971a:	bf00      	nop
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	20000478 	.word	0x20000478

08009724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009724:	b480      	push	{r7}
 8009726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009728:	4b16      	ldr	r3, [pc, #88]	; (8009784 <SystemInit+0x60>)
 800972a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800972e:	4a15      	ldr	r2, [pc, #84]	; (8009784 <SystemInit+0x60>)
 8009730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009738:	4b13      	ldr	r3, [pc, #76]	; (8009788 <SystemInit+0x64>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a12      	ldr	r2, [pc, #72]	; (8009788 <SystemInit+0x64>)
 800973e:	f043 0301 	orr.w	r3, r3, #1
 8009742:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009744:	4b10      	ldr	r3, [pc, #64]	; (8009788 <SystemInit+0x64>)
 8009746:	2200      	movs	r2, #0
 8009748:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800974a:	4b0f      	ldr	r3, [pc, #60]	; (8009788 <SystemInit+0x64>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a0e      	ldr	r2, [pc, #56]	; (8009788 <SystemInit+0x64>)
 8009750:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009758:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800975a:	4b0b      	ldr	r3, [pc, #44]	; (8009788 <SystemInit+0x64>)
 800975c:	4a0b      	ldr	r2, [pc, #44]	; (800978c <SystemInit+0x68>)
 800975e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009760:	4b09      	ldr	r3, [pc, #36]	; (8009788 <SystemInit+0x64>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a08      	ldr	r2, [pc, #32]	; (8009788 <SystemInit+0x64>)
 8009766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800976a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800976c:	4b06      	ldr	r3, [pc, #24]	; (8009788 <SystemInit+0x64>)
 800976e:	2200      	movs	r2, #0
 8009770:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009772:	4b04      	ldr	r3, [pc, #16]	; (8009784 <SystemInit+0x60>)
 8009774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009778:	609a      	str	r2, [r3, #8]
#endif
}
 800977a:	bf00      	nop
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	e000ed00 	.word	0xe000ed00
 8009788:	40023800 	.word	0x40023800
 800978c:	24003010 	.word	0x24003010

08009790 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009790:	b480      	push	{r7}
 8009792:	b087      	sub	sp, #28
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	4613      	mov	r3, r2
 800979c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800979e:	2301      	movs	r3, #1
 80097a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80097a6:	4b1f      	ldr	r3, [pc, #124]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097a8:	7a5b      	ldrb	r3, [r3, #9]
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d831      	bhi.n	8009814 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80097b0:	4b1c      	ldr	r3, [pc, #112]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097b2:	7a5b      	ldrb	r3, [r3, #9]
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	461a      	mov	r2, r3
 80097b8:	4b1a      	ldr	r3, [pc, #104]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097ba:	2100      	movs	r1, #0
 80097bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80097be:	4b19      	ldr	r3, [pc, #100]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097c0:	7a5b      	ldrb	r3, [r3, #9]
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	4a17      	ldr	r2, [pc, #92]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80097ce:	4b15      	ldr	r3, [pc, #84]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097d0:	7a5b      	ldrb	r3, [r3, #9]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	461a      	mov	r2, r3
 80097d6:	4b13      	ldr	r3, [pc, #76]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097d8:	4413      	add	r3, r2
 80097da:	79fa      	ldrb	r2, [r7, #7]
 80097dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80097de:	4b11      	ldr	r3, [pc, #68]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097e0:	7a5b      	ldrb	r3, [r3, #9]
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	1c5a      	adds	r2, r3, #1
 80097e6:	b2d1      	uxtb	r1, r2
 80097e8:	4a0e      	ldr	r2, [pc, #56]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097ea:	7251      	strb	r1, [r2, #9]
 80097ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80097ee:	7dbb      	ldrb	r3, [r7, #22]
 80097f0:	3330      	adds	r3, #48	; 0x30
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	3301      	adds	r3, #1
 80097fc:	223a      	movs	r2, #58	; 0x3a
 80097fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	3302      	adds	r3, #2
 8009804:	222f      	movs	r2, #47	; 0x2f
 8009806:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	3303      	adds	r3, #3
 800980c:	2200      	movs	r2, #0
 800980e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009814:	7dfb      	ldrb	r3, [r7, #23]
}
 8009816:	4618      	mov	r0, r3
 8009818:	371c      	adds	r7, #28
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	20000818 	.word	0x20000818

08009828 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009832:	2200      	movs	r2, #0
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7ff ffaa 	bl	8009790 <FATFS_LinkDriverEx>
 800983c:	4603      	mov	r3, r0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3708      	adds	r7, #8
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009846:	b480      	push	{r7}
 8009848:	b085      	sub	sp, #20
 800984a:	af00      	add	r7, sp, #0
 800984c:	4603      	mov	r3, r0
 800984e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009850:	2300      	movs	r3, #0
 8009852:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009854:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009858:	2b84      	cmp	r3, #132	; 0x84
 800985a:	d005      	beq.n	8009868 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800985c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4413      	add	r3, r2
 8009864:	3303      	adds	r3, #3
 8009866:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009868:	68fb      	ldr	r3, [r7, #12]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3714      	adds	r7, #20
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009876:	b480      	push	{r7}
 8009878:	b083      	sub	sp, #12
 800987a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800987c:	f3ef 8305 	mrs	r3, IPSR
 8009880:	607b      	str	r3, [r7, #4]
  return(result);
 8009882:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009884:	2b00      	cmp	r3, #0
 8009886:	bf14      	ite	ne
 8009888:	2301      	movne	r3, #1
 800988a:	2300      	moveq	r3, #0
 800988c:	b2db      	uxtb	r3, r3
}
 800988e:	4618      	mov	r0, r3
 8009890:	370c      	adds	r7, #12
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr

0800989a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800989e:	f001 f937 	bl	800ab10 <vTaskStartScheduler>
  
  return osOK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80098ac:	f7ff ffe3 	bl	8009876 <inHandlerMode>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d003      	beq.n	80098be <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80098b6:	f001 fa33 	bl	800ad20 <xTaskGetTickCountFromISR>
 80098ba:	4603      	mov	r3, r0
 80098bc:	e002      	b.n	80098c4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80098be:	f001 fa1f 	bl	800ad00 <xTaskGetTickCount>
 80098c2:	4603      	mov	r3, r0
  }
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80098c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af02      	add	r7, sp, #8
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	685c      	ldr	r4, [r3, #4]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80098de:	b29e      	uxth	r6, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7ff ffad 	bl	8009846 <makeFreeRtosPriority>
 80098ec:	4602      	mov	r2, r0
 80098ee:	f107 030c 	add.w	r3, r7, #12
 80098f2:	9301      	str	r3, [sp, #4]
 80098f4:	9200      	str	r2, [sp, #0]
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	4632      	mov	r2, r6
 80098fa:	4629      	mov	r1, r5
 80098fc:	4620      	mov	r0, r4
 80098fe:	f000 ff9d 	bl	800a83c <xTaskCreate>
 8009902:	4603      	mov	r3, r0
 8009904:	2b01      	cmp	r3, #1
 8009906:	d001      	beq.n	800990c <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009908:	2300      	movs	r3, #0
 800990a:	e000      	b.n	800990e <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800990c:	68fb      	ldr	r3, [r7, #12]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009916 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d001      	beq.n	800992c <osDelay+0x16>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	e000      	b.n	800992e <osDelay+0x18>
 800992c:	2301      	movs	r3, #1
 800992e:	4618      	mov	r0, r3
 8009930:	f001 f8ba 	bl	800aaa8 <vTaskDelay>
  
  return osOK;
 8009934:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b082      	sub	sp, #8
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8009946:	2001      	movs	r0, #1
 8009948:	f000 fa37 	bl	8009dba <xQueueCreateMutex>
 800994c:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800994e:	4618      	mov	r0, r3
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
	...

08009958 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009962:	2300      	movs	r3, #0
 8009964:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <osMutexWait+0x18>
    return osErrorParameter;
 800996c:	2380      	movs	r3, #128	; 0x80
 800996e:	e03c      	b.n	80099ea <osMutexWait+0x92>
  }
  
  ticks = 0;
 8009970:	2300      	movs	r3, #0
 8009972:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997a:	d103      	bne.n	8009984 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800997c:	f04f 33ff 	mov.w	r3, #4294967295
 8009980:	60fb      	str	r3, [r7, #12]
 8009982:	e009      	b.n	8009998 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d006      	beq.n	8009998 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d101      	bne.n	8009998 <osMutexWait+0x40>
      ticks = 1;
 8009994:	2301      	movs	r3, #1
 8009996:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009998:	f7ff ff6d 	bl	8009876 <inHandlerMode>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d017      	beq.n	80099d2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80099a2:	f107 0308 	add.w	r3, r7, #8
 80099a6:	461a      	mov	r2, r3
 80099a8:	2100      	movs	r1, #0
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fd58 	bl	800a460 <xQueueReceiveFromISR>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d001      	beq.n	80099ba <osMutexWait+0x62>
      return osErrorOS;
 80099b6:	23ff      	movs	r3, #255	; 0xff
 80099b8:	e017      	b.n	80099ea <osMutexWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d013      	beq.n	80099e8 <osMutexWait+0x90>
 80099c0:	4b0c      	ldr	r3, [pc, #48]	; (80099f4 <osMutexWait+0x9c>)
 80099c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099c6:	601a      	str	r2, [r3, #0]
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	e00a      	b.n	80099e8 <osMutexWait+0x90>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80099d2:	2300      	movs	r3, #0
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	2100      	movs	r1, #0
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 fc2b 	bl	800a234 <xQueueGenericReceive>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d001      	beq.n	80099e8 <osMutexWait+0x90>
    return osErrorOS;
 80099e4:	23ff      	movs	r3, #255	; 0xff
 80099e6:	e000      	b.n	80099ea <osMutexWait+0x92>
  }
  
  return osOK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	e000ed04 	.word	0xe000ed04

080099f8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009a04:	2300      	movs	r3, #0
 8009a06:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009a08:	f7ff ff35 	bl	8009876 <inHandlerMode>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d016      	beq.n	8009a40 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009a12:	f107 0308 	add.w	r3, r7, #8
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 fb7d 	bl	800a118 <xQueueGiveFromISR>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d001      	beq.n	8009a28 <osMutexRelease+0x30>
      return osErrorOS;
 8009a24:	23ff      	movs	r3, #255	; 0xff
 8009a26:	e017      	b.n	8009a58 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d013      	beq.n	8009a56 <osMutexRelease+0x5e>
 8009a2e:	4b0c      	ldr	r3, [pc, #48]	; (8009a60 <osMutexRelease+0x68>)
 8009a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a34:	601a      	str	r2, [r3, #0]
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	e00a      	b.n	8009a56 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009a40:	2300      	movs	r3, #0
 8009a42:	2200      	movs	r2, #0
 8009a44:	2100      	movs	r1, #0
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f9d0 	bl	8009dec <xQueueGenericSend>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d001      	beq.n	8009a56 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009a52:	23ff      	movs	r3, #255	; 0xff
 8009a54:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009a56:	68fb      	ldr	r3, [r7, #12]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	e000ed04 	.word	0xe000ed04

08009a64 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8009a68:	f001 fc92 	bl	800b390 <xTaskGetSchedulerState>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d001      	beq.n	8009a76 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8009a72:	f002 fa91 	bl	800bf98 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8009a76:	bf00      	nop
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	b083      	sub	sp, #12
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 8009a84:	2381      	movs	r3, #129	; 0x81
#endif
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a92:	b480      	push	{r7}
 8009a94:	b083      	sub	sp, #12
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f103 0208 	add.w	r2, r3, #8
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aaa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f103 0208 	add.w	r2, r3, #8
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f103 0208 	add.w	r2, r3, #8
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ac6:	bf00      	nop
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b083      	sub	sp, #12
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	689a      	ldr	r2, [r3, #8]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	683a      	ldr	r2, [r7, #0]
 8009b10:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	601a      	str	r2, [r3, #0]
}
 8009b28:	bf00      	nop
 8009b2a:	3714      	adds	r7, #20
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4a:	d103      	bne.n	8009b54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	60fb      	str	r3, [r7, #12]
 8009b52:	e00c      	b.n	8009b6e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	3308      	adds	r3, #8
 8009b58:	60fb      	str	r3, [r7, #12]
 8009b5a:	e002      	b.n	8009b62 <vListInsert+0x2e>
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	60fb      	str	r3, [r7, #12]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68ba      	ldr	r2, [r7, #8]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d2f6      	bcs.n	8009b5c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	685a      	ldr	r2, [r3, #4]
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	1c5a      	adds	r2, r3, #1
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	601a      	str	r2, [r3, #0]
}
 8009b9a:	bf00      	nop
 8009b9c:	3714      	adds	r7, #20
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b085      	sub	sp, #20
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	6892      	ldr	r2, [r2, #8]
 8009bbc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	6852      	ldr	r2, [r2, #4]
 8009bc6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d103      	bne.n	8009bda <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	689a      	ldr	r2, [r3, #8]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	1e5a      	subs	r2, r3, #1
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3714      	adds	r7, #20
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
	...

08009bfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10a      	bne.n	8009c26 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8009c22:	bf00      	nop
 8009c24:	e7fe      	b.n	8009c24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c26:	f002 f925 	bl	800be74 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c32:	68f9      	ldr	r1, [r7, #12]
 8009c34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c36:	fb01 f303 	mul.w	r3, r1, r3
 8009c3a:	441a      	add	r2, r3
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c56:	3b01      	subs	r3, #1
 8009c58:	68f9      	ldr	r1, [r7, #12]
 8009c5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c5c:	fb01 f303 	mul.w	r3, r1, r3
 8009c60:	441a      	add	r2, r3
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	22ff      	movs	r2, #255	; 0xff
 8009c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	22ff      	movs	r2, #255	; 0xff
 8009c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d114      	bne.n	8009ca6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d01a      	beq.n	8009cba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	3310      	adds	r3, #16
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f001 f9c5 	bl	800b018 <xTaskRemoveFromEventList>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d012      	beq.n	8009cba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c94:	4b0c      	ldr	r3, [pc, #48]	; (8009cc8 <xQueueGenericReset+0xcc>)
 8009c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c9a:	601a      	str	r2, [r3, #0]
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	e009      	b.n	8009cba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	3310      	adds	r3, #16
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7ff fef1 	bl	8009a92 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	3324      	adds	r3, #36	; 0x24
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7ff feec 	bl	8009a92 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009cba:	f002 f90b 	bl	800bed4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009cbe:	2301      	movs	r3, #1
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3710      	adds	r7, #16
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	e000ed04 	.word	0xe000ed04

08009ccc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b08a      	sub	sp, #40	; 0x28
 8009cd0:	af02      	add	r7, sp, #8
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10a      	bne.n	8009cf6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	613b      	str	r3, [r7, #16]
}
 8009cf2:	bf00      	nop
 8009cf4:	e7fe      	b.n	8009cf4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d102      	bne.n	8009d02 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	61fb      	str	r3, [r7, #28]
 8009d00:	e004      	b.n	8009d0c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	fb02 f303 	mul.w	r3, r2, r3
 8009d0a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	3350      	adds	r3, #80	; 0x50
 8009d10:	4618      	mov	r0, r3
 8009d12:	f002 f9c9 	bl	800c0a8 <pvPortMalloc>
 8009d16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00b      	beq.n	8009d36 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	3350      	adds	r3, #80	; 0x50
 8009d22:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d24:	79fa      	ldrb	r2, [r7, #7]
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	697a      	ldr	r2, [r7, #20]
 8009d2e:	68b9      	ldr	r1, [r7, #8]
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f000 f805 	bl	8009d40 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8009d36:	69bb      	ldr	r3, [r7, #24]
	}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3720      	adds	r7, #32
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	607a      	str	r2, [r7, #4]
 8009d4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d103      	bne.n	8009d5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	69ba      	ldr	r2, [r7, #24]
 8009d58:	601a      	str	r2, [r3, #0]
 8009d5a:	e002      	b.n	8009d62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d6e:	2101      	movs	r1, #1
 8009d70:	69b8      	ldr	r0, [r7, #24]
 8009d72:	f7ff ff43 	bl	8009bfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	78fa      	ldrb	r2, [r7, #3]
 8009d7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009d7e:	bf00      	nop
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b082      	sub	sp, #8
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00e      	beq.n	8009db2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009da6:	2300      	movs	r3, #0
 8009da8:	2200      	movs	r2, #0
 8009daa:	2100      	movs	r1, #0
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 f81d 	bl	8009dec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009db2:	bf00      	nop
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b086      	sub	sp, #24
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	617b      	str	r3, [r7, #20]
 8009dc8:	2300      	movs	r3, #0
 8009dca:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009dcc:	79fb      	ldrb	r3, [r7, #7]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	6939      	ldr	r1, [r7, #16]
 8009dd2:	6978      	ldr	r0, [r7, #20]
 8009dd4:	f7ff ff7a 	bl	8009ccc <xQueueGenericCreate>
 8009dd8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f7ff ffd3 	bl	8009d86 <prvInitialiseMutex>

		return pxNewQueue;
 8009de0:	68fb      	ldr	r3, [r7, #12]
	}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3718      	adds	r7, #24
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
	...

08009dec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08e      	sub	sp, #56	; 0x38
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
 8009df8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10a      	bne.n	8009e1e <xQueueGenericSend+0x32>
	__asm volatile
 8009e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0c:	f383 8811 	msr	BASEPRI, r3
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e1a:	bf00      	nop
 8009e1c:	e7fe      	b.n	8009e1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d103      	bne.n	8009e2c <xQueueGenericSend+0x40>
 8009e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d101      	bne.n	8009e30 <xQueueGenericSend+0x44>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e000      	b.n	8009e32 <xQueueGenericSend+0x46>
 8009e30:	2300      	movs	r3, #0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10a      	bne.n	8009e4c <xQueueGenericSend+0x60>
	__asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e48:	bf00      	nop
 8009e4a:	e7fe      	b.n	8009e4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d103      	bne.n	8009e5a <xQueueGenericSend+0x6e>
 8009e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d101      	bne.n	8009e5e <xQueueGenericSend+0x72>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e000      	b.n	8009e60 <xQueueGenericSend+0x74>
 8009e5e:	2300      	movs	r3, #0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10a      	bne.n	8009e7a <xQueueGenericSend+0x8e>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	623b      	str	r3, [r7, #32]
}
 8009e76:	bf00      	nop
 8009e78:	e7fe      	b.n	8009e78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e7a:	f001 fa89 	bl	800b390 <xTaskGetSchedulerState>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d102      	bne.n	8009e8a <xQueueGenericSend+0x9e>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d101      	bne.n	8009e8e <xQueueGenericSend+0xa2>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e000      	b.n	8009e90 <xQueueGenericSend+0xa4>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10a      	bne.n	8009eaa <xQueueGenericSend+0xbe>
	__asm volatile
 8009e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	61fb      	str	r3, [r7, #28]
}
 8009ea6:	bf00      	nop
 8009ea8:	e7fe      	b.n	8009ea8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009eaa:	f001 ffe3 	bl	800be74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d302      	bcc.n	8009ec0 <xQueueGenericSend+0xd4>
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d129      	bne.n	8009f14 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ec0:	683a      	ldr	r2, [r7, #0]
 8009ec2:	68b9      	ldr	r1, [r7, #8]
 8009ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ec6:	f000 fb4b 	bl	800a560 <prvCopyDataToQueue>
 8009eca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d010      	beq.n	8009ef6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed6:	3324      	adds	r3, #36	; 0x24
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f001 f89d 	bl	800b018 <xTaskRemoveFromEventList>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d013      	beq.n	8009f0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ee4:	4b3f      	ldr	r3, [pc, #252]	; (8009fe4 <xQueueGenericSend+0x1f8>)
 8009ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eea:	601a      	str	r2, [r3, #0]
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	e00a      	b.n	8009f0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d007      	beq.n	8009f0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009efc:	4b39      	ldr	r3, [pc, #228]	; (8009fe4 <xQueueGenericSend+0x1f8>)
 8009efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f02:	601a      	str	r2, [r3, #0]
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f0c:	f001 ffe2 	bl	800bed4 <vPortExitCritical>
				return pdPASS;
 8009f10:	2301      	movs	r3, #1
 8009f12:	e063      	b.n	8009fdc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d103      	bne.n	8009f22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f1a:	f001 ffdb 	bl	800bed4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	e05c      	b.n	8009fdc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d106      	bne.n	8009f36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8009f28:	f107 0314 	add.w	r3, r7, #20
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f001 f8d5 	bl	800b0dc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f32:	2301      	movs	r3, #1
 8009f34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f36:	f001 ffcd 	bl	800bed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f3a:	f000 fe37 	bl	800abac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f3e:	f001 ff99 	bl	800be74 <vPortEnterCritical>
 8009f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f48:	b25b      	sxtb	r3, r3
 8009f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4e:	d103      	bne.n	8009f58 <xQueueGenericSend+0x16c>
 8009f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f52:	2200      	movs	r2, #0
 8009f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f5e:	b25b      	sxtb	r3, r3
 8009f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f64:	d103      	bne.n	8009f6e <xQueueGenericSend+0x182>
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f6e:	f001 ffb1 	bl	800bed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f72:	1d3a      	adds	r2, r7, #4
 8009f74:	f107 0314 	add.w	r3, r7, #20
 8009f78:	4611      	mov	r1, r2
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f001 f8d2 	bl	800b124 <xTaskCheckForTimeOut>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d124      	bne.n	8009fd0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f88:	f000 fbe2 	bl	800a750 <prvIsQueueFull>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d018      	beq.n	8009fc4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	3310      	adds	r3, #16
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	4611      	mov	r1, r2
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f000 ffec 	bl	800af78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fa2:	f000 fb6d 	bl	800a680 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009fa6:	f000 fe0f 	bl	800abc8 <xTaskResumeAll>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f47f af7c 	bne.w	8009eaa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009fb2:	4b0c      	ldr	r3, [pc, #48]	; (8009fe4 <xQueueGenericSend+0x1f8>)
 8009fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb8:	601a      	str	r2, [r3, #0]
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	e772      	b.n	8009eaa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009fc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fc6:	f000 fb5b 	bl	800a680 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fca:	f000 fdfd 	bl	800abc8 <xTaskResumeAll>
 8009fce:	e76c      	b.n	8009eaa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fd2:	f000 fb55 	bl	800a680 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fd6:	f000 fdf7 	bl	800abc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009fda:	2300      	movs	r3, #0
		}
	}
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3738      	adds	r7, #56	; 0x38
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	e000ed04 	.word	0xe000ed04

08009fe8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b08e      	sub	sp, #56	; 0x38
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
 8009ff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10a      	bne.n	800a016 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a012:	bf00      	nop
 800a014:	e7fe      	b.n	800a014 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d103      	bne.n	800a024 <xQueueGenericSendFromISR+0x3c>
 800a01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a020:	2b00      	cmp	r3, #0
 800a022:	d101      	bne.n	800a028 <xQueueGenericSendFromISR+0x40>
 800a024:	2301      	movs	r3, #1
 800a026:	e000      	b.n	800a02a <xQueueGenericSendFromISR+0x42>
 800a028:	2300      	movs	r3, #0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d10a      	bne.n	800a044 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	623b      	str	r3, [r7, #32]
}
 800a040:	bf00      	nop
 800a042:	e7fe      	b.n	800a042 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	2b02      	cmp	r3, #2
 800a048:	d103      	bne.n	800a052 <xQueueGenericSendFromISR+0x6a>
 800a04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d101      	bne.n	800a056 <xQueueGenericSendFromISR+0x6e>
 800a052:	2301      	movs	r3, #1
 800a054:	e000      	b.n	800a058 <xQueueGenericSendFromISR+0x70>
 800a056:	2300      	movs	r3, #0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10a      	bne.n	800a072 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	61fb      	str	r3, [r7, #28]
}
 800a06e:	bf00      	nop
 800a070:	e7fe      	b.n	800a070 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a072:	f001 ffd9 	bl	800c028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a076:	f3ef 8211 	mrs	r2, BASEPRI
 800a07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07e:	f383 8811 	msr	BASEPRI, r3
 800a082:	f3bf 8f6f 	isb	sy
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	61ba      	str	r2, [r7, #24]
 800a08c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a08e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a090:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d302      	bcc.n	800a0a4 <xQueueGenericSendFromISR+0xbc>
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d12c      	bne.n	800a0fe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	68b9      	ldr	r1, [r7, #8]
 800a0b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0b4:	f000 fa54 	bl	800a560 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a0b8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c0:	d112      	bne.n	800a0e8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d016      	beq.n	800a0f8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	3324      	adds	r3, #36	; 0x24
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 ffa2 	bl	800b018 <xTaskRemoveFromEventList>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00e      	beq.n	800a0f8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00b      	beq.n	800a0f8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	e007      	b.n	800a0f8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a0e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	b25a      	sxtb	r2, r3
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a0fc:	e001      	b.n	800a102 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a0fe:	2300      	movs	r3, #0
 800a100:	637b      	str	r3, [r7, #52]	; 0x34
 800a102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a104:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
	);
}
 800a10c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a110:	4618      	mov	r0, r3
 800a112:	3738      	adds	r7, #56	; 0x38
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b08e      	sub	sp, #56	; 0x38
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10a      	bne.n	800a142 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a130:	f383 8811 	msr	BASEPRI, r3
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	623b      	str	r3, [r7, #32]
}
 800a13e:	bf00      	nop
 800a140:	e7fe      	b.n	800a140 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00a      	beq.n	800a160 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14e:	f383 8811 	msr	BASEPRI, r3
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	61fb      	str	r3, [r7, #28]
}
 800a15c:	bf00      	nop
 800a15e:	e7fe      	b.n	800a15e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800a160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d103      	bne.n	800a170 <xQueueGiveFromISR+0x58>
 800a168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d101      	bne.n	800a174 <xQueueGiveFromISR+0x5c>
 800a170:	2301      	movs	r3, #1
 800a172:	e000      	b.n	800a176 <xQueueGiveFromISR+0x5e>
 800a174:	2300      	movs	r3, #0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d10a      	bne.n	800a190 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	61bb      	str	r3, [r7, #24]
}
 800a18c:	bf00      	nop
 800a18e:	e7fe      	b.n	800a18e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a190:	f001 ff4a 	bl	800c028 <vPortValidateInterruptPriority>
	__asm volatile
 800a194:	f3ef 8211 	mrs	r2, BASEPRI
 800a198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19c:	f383 8811 	msr	BASEPRI, r3
 800a1a0:	f3bf 8f6f 	isb	sy
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	617a      	str	r2, [r7, #20]
 800a1aa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a1ac:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d22b      	bcs.n	800a218 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800a1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1cc:	1c5a      	adds	r2, r3, #1
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a1d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1da:	d112      	bne.n	800a202 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d016      	beq.n	800a212 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e6:	3324      	adds	r3, #36	; 0x24
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f000 ff15 	bl	800b018 <xTaskRemoveFromEventList>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00e      	beq.n	800a212 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00b      	beq.n	800a212 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	e007      	b.n	800a212 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a206:	3301      	adds	r3, #1
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	b25a      	sxtb	r2, r3
 800a20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a212:	2301      	movs	r3, #1
 800a214:	637b      	str	r3, [r7, #52]	; 0x34
 800a216:	e001      	b.n	800a21c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a218:	2300      	movs	r3, #0
 800a21a:	637b      	str	r3, [r7, #52]	; 0x34
 800a21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f383 8811 	msr	BASEPRI, r3
}
 800a226:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3738      	adds	r7, #56	; 0x38
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
	...

0800a234 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b08e      	sub	sp, #56	; 0x38
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
 800a240:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a242:	2300      	movs	r3, #0
 800a244:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d10a      	bne.n	800a266 <xQueueGenericReceive+0x32>
	__asm volatile
 800a250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a254:	f383 8811 	msr	BASEPRI, r3
 800a258:	f3bf 8f6f 	isb	sy
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a262:	bf00      	nop
 800a264:	e7fe      	b.n	800a264 <xQueueGenericReceive+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d103      	bne.n	800a274 <xQueueGenericReceive+0x40>
 800a26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a270:	2b00      	cmp	r3, #0
 800a272:	d101      	bne.n	800a278 <xQueueGenericReceive+0x44>
 800a274:	2301      	movs	r3, #1
 800a276:	e000      	b.n	800a27a <xQueueGenericReceive+0x46>
 800a278:	2300      	movs	r3, #0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d10a      	bne.n	800a294 <xQueueGenericReceive+0x60>
	__asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	623b      	str	r3, [r7, #32]
}
 800a290:	bf00      	nop
 800a292:	e7fe      	b.n	800a292 <xQueueGenericReceive+0x5e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a294:	f001 f87c 	bl	800b390 <xTaskGetSchedulerState>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d102      	bne.n	800a2a4 <xQueueGenericReceive+0x70>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d101      	bne.n	800a2a8 <xQueueGenericReceive+0x74>
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e000      	b.n	800a2aa <xQueueGenericReceive+0x76>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d10a      	bne.n	800a2c4 <xQueueGenericReceive+0x90>
	__asm volatile
 800a2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	61fb      	str	r3, [r7, #28]
}
 800a2c0:	bf00      	nop
 800a2c2:	e7fe      	b.n	800a2c2 <xQueueGenericReceive+0x8e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2c4:	f001 fdd6 	bl	800be74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2cc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d046      	beq.n	800a362 <xQueueGenericReceive+0x12e>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800a2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2da:	68b9      	ldr	r1, [r7, #8]
 800a2dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2de:	f000 f9a9 	bl	800a634 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d121      	bne.n	800a32c <xQueueGenericReceive+0xf8>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800a2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ea:	1e5a      	subs	r2, r3, #1
 800a2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ee:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d104      	bne.n	800a302 <xQueueGenericReceive+0xce>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800a2f8:	f001 f964 	bl	800b5c4 <pvTaskIncrementMutexHeldCount>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a300:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d027      	beq.n	800a35a <xQueueGenericReceive+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30c:	3310      	adds	r3, #16
 800a30e:	4618      	mov	r0, r3
 800a310:	f000 fe82 	bl	800b018 <xTaskRemoveFromEventList>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d01f      	beq.n	800a35a <xQueueGenericReceive+0x126>
						{
							queueYIELD_IF_USING_PREEMPTION();
 800a31a:	4b50      	ldr	r3, [pc, #320]	; (800a45c <xQueueGenericReceive+0x228>)
 800a31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a320:	601a      	str	r2, [r3, #0]
 800a322:	f3bf 8f4f 	dsb	sy
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	e016      	b.n	800a35a <xQueueGenericReceive+0x126>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800a32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a330:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00f      	beq.n	800a35a <xQueueGenericReceive+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33c:	3324      	adds	r3, #36	; 0x24
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 fe6a 	bl	800b018 <xTaskRemoveFromEventList>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d007      	beq.n	800a35a <xQueueGenericReceive+0x126>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800a34a:	4b44      	ldr	r3, [pc, #272]	; (800a45c <xQueueGenericReceive+0x228>)
 800a34c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a350:	601a      	str	r2, [r3, #0]
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800a35a:	f001 fdbb 	bl	800bed4 <vPortExitCritical>
				return pdPASS;
 800a35e:	2301      	movs	r3, #1
 800a360:	e077      	b.n	800a452 <xQueueGenericReceive+0x21e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d103      	bne.n	800a370 <xQueueGenericReceive+0x13c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a368:	f001 fdb4 	bl	800bed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a36c:	2300      	movs	r3, #0
 800a36e:	e070      	b.n	800a452 <xQueueGenericReceive+0x21e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a372:	2b00      	cmp	r3, #0
 800a374:	d106      	bne.n	800a384 <xQueueGenericReceive+0x150>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800a376:	f107 0314 	add.w	r3, r7, #20
 800a37a:	4618      	mov	r0, r3
 800a37c:	f000 feae 	bl	800b0dc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a380:	2301      	movs	r3, #1
 800a382:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a384:	f001 fda6 	bl	800bed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a388:	f000 fc10 	bl	800abac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a38c:	f001 fd72 	bl	800be74 <vPortEnterCritical>
 800a390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a396:	b25b      	sxtb	r3, r3
 800a398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a39c:	d103      	bne.n	800a3a6 <xQueueGenericReceive+0x172>
 800a39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3ac:	b25b      	sxtb	r3, r3
 800a3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b2:	d103      	bne.n	800a3bc <xQueueGenericReceive+0x188>
 800a3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3bc:	f001 fd8a 	bl	800bed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3c0:	1d3a      	adds	r2, r7, #4
 800a3c2:	f107 0314 	add.w	r3, r7, #20
 800a3c6:	4611      	mov	r1, r2
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f000 feab 	bl	800b124 <xTaskCheckForTimeOut>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d131      	bne.n	800a438 <xQueueGenericReceive+0x204>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3d6:	f000 f9a5 	bl	800a724 <prvIsQueueEmpty>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d025      	beq.n	800a42c <xQueueGenericReceive+0x1f8>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d108      	bne.n	800a3fa <xQueueGenericReceive+0x1c6>
					{
						taskENTER_CRITICAL();
 800a3e8:	f001 fd44 	bl	800be74 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f000 ffeb 	bl	800b3cc <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800a3f6:	f001 fd6d 	bl	800bed4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fc:	3324      	adds	r3, #36	; 0x24
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	4611      	mov	r1, r2
 800a402:	4618      	mov	r0, r3
 800a404:	f000 fdb8 	bl	800af78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a40a:	f000 f939 	bl	800a680 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a40e:	f000 fbdb 	bl	800abc8 <xTaskResumeAll>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	f47f af55 	bne.w	800a2c4 <xQueueGenericReceive+0x90>
				{
					portYIELD_WITHIN_API();
 800a41a:	4b10      	ldr	r3, [pc, #64]	; (800a45c <xQueueGenericReceive+0x228>)
 800a41c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a420:	601a      	str	r2, [r3, #0]
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	e74b      	b.n	800a2c4 <xQueueGenericReceive+0x90>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a42c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a42e:	f000 f927 	bl	800a680 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a432:	f000 fbc9 	bl	800abc8 <xTaskResumeAll>
 800a436:	e745      	b.n	800a2c4 <xQueueGenericReceive+0x90>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800a438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a43a:	f000 f921 	bl	800a680 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a43e:	f000 fbc3 	bl	800abc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a442:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a444:	f000 f96e 	bl	800a724 <prvIsQueueEmpty>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f43f af3a 	beq.w	800a2c4 <xQueueGenericReceive+0x90>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a450:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a452:	4618      	mov	r0, r3
 800a454:	3738      	adds	r7, #56	; 0x38
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	e000ed04 	.word	0xe000ed04

0800a460 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b08e      	sub	sp, #56	; 0x38
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a472:	2b00      	cmp	r3, #0
 800a474:	d10a      	bne.n	800a48c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47a:	f383 8811 	msr	BASEPRI, r3
 800a47e:	f3bf 8f6f 	isb	sy
 800a482:	f3bf 8f4f 	dsb	sy
 800a486:	623b      	str	r3, [r7, #32]
}
 800a488:	bf00      	nop
 800a48a:	e7fe      	b.n	800a48a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d103      	bne.n	800a49a <xQueueReceiveFromISR+0x3a>
 800a492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a496:	2b00      	cmp	r3, #0
 800a498:	d101      	bne.n	800a49e <xQueueReceiveFromISR+0x3e>
 800a49a:	2301      	movs	r3, #1
 800a49c:	e000      	b.n	800a4a0 <xQueueReceiveFromISR+0x40>
 800a49e:	2300      	movs	r3, #0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10a      	bne.n	800a4ba <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a8:	f383 8811 	msr	BASEPRI, r3
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	f3bf 8f4f 	dsb	sy
 800a4b4:	61fb      	str	r3, [r7, #28]
}
 800a4b6:	bf00      	nop
 800a4b8:	e7fe      	b.n	800a4b8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4ba:	f001 fdb5 	bl	800c028 <vPortValidateInterruptPriority>
	__asm volatile
 800a4be:	f3ef 8211 	mrs	r2, BASEPRI
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	61ba      	str	r2, [r7, #24]
 800a4d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a4d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d02f      	beq.n	800a546 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4f0:	68b9      	ldr	r1, [r7, #8]
 800a4f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4f4:	f000 f89e 	bl	800a634 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800a4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fa:	1e5a      	subs	r2, r3, #1
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a500:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a508:	d112      	bne.n	800a530 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d016      	beq.n	800a540 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a514:	3310      	adds	r3, #16
 800a516:	4618      	mov	r0, r3
 800a518:	f000 fd7e 	bl	800b018 <xTaskRemoveFromEventList>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00e      	beq.n	800a540 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00b      	beq.n	800a540 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	601a      	str	r2, [r3, #0]
 800a52e:	e007      	b.n	800a540 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a534:	3301      	adds	r3, #1
 800a536:	b2db      	uxtb	r3, r3
 800a538:	b25a      	sxtb	r2, r3
 800a53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a540:	2301      	movs	r3, #1
 800a542:	637b      	str	r3, [r7, #52]	; 0x34
 800a544:	e001      	b.n	800a54a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a546:	2300      	movs	r3, #0
 800a548:	637b      	str	r3, [r7, #52]	; 0x34
 800a54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	f383 8811 	msr	BASEPRI, r3
}
 800a554:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3738      	adds	r7, #56	; 0x38
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b086      	sub	sp, #24
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a56c:	2300      	movs	r3, #0
 800a56e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a574:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10d      	bne.n	800a59a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d14d      	bne.n	800a622 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 ff94 	bl	800b4b8 <xTaskPriorityDisinherit>
 800a590:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2200      	movs	r2, #0
 800a596:	605a      	str	r2, [r3, #4]
 800a598:	e043      	b.n	800a622 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d119      	bne.n	800a5d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6898      	ldr	r0, [r3, #8]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	68b9      	ldr	r1, [r7, #8]
 800a5ac:	f001 ffba 	bl	800c524 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	689a      	ldr	r2, [r3, #8]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b8:	441a      	add	r2, r3
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	689a      	ldr	r2, [r3, #8]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d32b      	bcc.n	800a622 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	609a      	str	r2, [r3, #8]
 800a5d2:	e026      	b.n	800a622 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	68d8      	ldr	r0, [r3, #12]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5dc:	461a      	mov	r2, r3
 800a5de:	68b9      	ldr	r1, [r7, #8]
 800a5e0:	f001 ffa0 	bl	800c524 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	68da      	ldr	r2, [r3, #12]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ec:	425b      	negs	r3, r3
 800a5ee:	441a      	add	r2, r3
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	68da      	ldr	r2, [r3, #12]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d207      	bcs.n	800a610 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	685a      	ldr	r2, [r3, #4]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a608:	425b      	negs	r3, r3
 800a60a:	441a      	add	r2, r3
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b02      	cmp	r3, #2
 800a614:	d105      	bne.n	800a622 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d002      	beq.n	800a622 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	3b01      	subs	r3, #1
 800a620:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	1c5a      	adds	r2, r3, #1
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a62a:	697b      	ldr	r3, [r7, #20]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3718      	adds	r7, #24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a642:	2b00      	cmp	r3, #0
 800a644:	d018      	beq.n	800a678 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68da      	ldr	r2, [r3, #12]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64e:	441a      	add	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	68da      	ldr	r2, [r3, #12]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d303      	bcc.n	800a668 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	68d9      	ldr	r1, [r3, #12]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a670:	461a      	mov	r2, r3
 800a672:	6838      	ldr	r0, [r7, #0]
 800a674:	f001 ff56 	bl	800c524 <memcpy>
	}
}
 800a678:	bf00      	nop
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a688:	f001 fbf4 	bl	800be74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a692:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a694:	e011      	b.n	800a6ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d012      	beq.n	800a6c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	3324      	adds	r3, #36	; 0x24
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f000 fcb8 	bl	800b018 <xTaskRemoveFromEventList>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d001      	beq.n	800a6b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a6ae:	f000 fd99 	bl	800b1e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a6b2:	7bfb      	ldrb	r3, [r7, #15]
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	dce9      	bgt.n	800a696 <prvUnlockQueue+0x16>
 800a6c2:	e000      	b.n	800a6c6 <prvUnlockQueue+0x46>
					break;
 800a6c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	22ff      	movs	r2, #255	; 0xff
 800a6ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a6ce:	f001 fc01 	bl	800bed4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a6d2:	f001 fbcf 	bl	800be74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6de:	e011      	b.n	800a704 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d012      	beq.n	800a70e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	3310      	adds	r3, #16
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f000 fc93 	bl	800b018 <xTaskRemoveFromEventList>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d001      	beq.n	800a6fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a6f8:	f000 fd74 	bl	800b1e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a6fc:	7bbb      	ldrb	r3, [r7, #14]
 800a6fe:	3b01      	subs	r3, #1
 800a700:	b2db      	uxtb	r3, r3
 800a702:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a704:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	dce9      	bgt.n	800a6e0 <prvUnlockQueue+0x60>
 800a70c:	e000      	b.n	800a710 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a70e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	22ff      	movs	r2, #255	; 0xff
 800a714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a718:	f001 fbdc 	bl	800bed4 <vPortExitCritical>
}
 800a71c:	bf00      	nop
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a72c:	f001 fba2 	bl	800be74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a734:	2b00      	cmp	r3, #0
 800a736:	d102      	bne.n	800a73e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a738:	2301      	movs	r3, #1
 800a73a:	60fb      	str	r3, [r7, #12]
 800a73c:	e001      	b.n	800a742 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a73e:	2300      	movs	r3, #0
 800a740:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a742:	f001 fbc7 	bl	800bed4 <vPortExitCritical>

	return xReturn;
 800a746:	68fb      	ldr	r3, [r7, #12]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a758:	f001 fb8c 	bl	800be74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a764:	429a      	cmp	r2, r3
 800a766:	d102      	bne.n	800a76e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a768:	2301      	movs	r3, #1
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	e001      	b.n	800a772 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a76e:	2300      	movs	r3, #0
 800a770:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a772:	f001 fbaf 	bl	800bed4 <vPortExitCritical>

	return xReturn;
 800a776:	68fb      	ldr	r3, [r7, #12]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a780:	b480      	push	{r7}
 800a782:	b085      	sub	sp, #20
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a78a:	2300      	movs	r3, #0
 800a78c:	60fb      	str	r3, [r7, #12]
 800a78e:	e014      	b.n	800a7ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a790:	4a0f      	ldr	r2, [pc, #60]	; (800a7d0 <vQueueAddToRegistry+0x50>)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10b      	bne.n	800a7b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a79c:	490c      	ldr	r1, [pc, #48]	; (800a7d0 <vQueueAddToRegistry+0x50>)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	683a      	ldr	r2, [r7, #0]
 800a7a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a7a6:	4a0a      	ldr	r2, [pc, #40]	; (800a7d0 <vQueueAddToRegistry+0x50>)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	00db      	lsls	r3, r3, #3
 800a7ac:	4413      	add	r3, r2
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a7b2:	e006      	b.n	800a7c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	60fb      	str	r3, [r7, #12]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2b07      	cmp	r3, #7
 800a7be:	d9e7      	bls.n	800a790 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a7c0:	bf00      	nop
 800a7c2:	bf00      	nop
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	20000824 	.word	0x20000824

0800a7d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a7e4:	f001 fb46 	bl	800be74 <vPortEnterCritical>
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7ee:	b25b      	sxtb	r3, r3
 800a7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f4:	d103      	bne.n	800a7fe <vQueueWaitForMessageRestricted+0x2a>
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a804:	b25b      	sxtb	r3, r3
 800a806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a80a:	d103      	bne.n	800a814 <vQueueWaitForMessageRestricted+0x40>
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a814:	f001 fb5e 	bl	800bed4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d106      	bne.n	800a82e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	3324      	adds	r3, #36	; 0x24
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	68b9      	ldr	r1, [r7, #8]
 800a828:	4618      	mov	r0, r3
 800a82a:	f000 fbc9 	bl	800afc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a82e:	6978      	ldr	r0, [r7, #20]
 800a830:	f7ff ff26 	bl	800a680 <prvUnlockQueue>
	}
 800a834:	bf00      	nop
 800a836:	3718      	adds	r7, #24
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b08c      	sub	sp, #48	; 0x30
 800a840:	af04      	add	r7, sp, #16
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	603b      	str	r3, [r7, #0]
 800a848:	4613      	mov	r3, r2
 800a84a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a84c:	88fb      	ldrh	r3, [r7, #6]
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4618      	mov	r0, r3
 800a852:	f001 fc29 	bl	800c0a8 <pvPortMalloc>
 800a856:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00e      	beq.n	800a87c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a85e:	205c      	movs	r0, #92	; 0x5c
 800a860:	f001 fc22 	bl	800c0a8 <pvPortMalloc>
 800a864:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d003      	beq.n	800a874 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	697a      	ldr	r2, [r7, #20]
 800a870:	631a      	str	r2, [r3, #48]	; 0x30
 800a872:	e005      	b.n	800a880 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a874:	6978      	ldr	r0, [r7, #20]
 800a876:	f001 fcdb 	bl	800c230 <vPortFree>
 800a87a:	e001      	b.n	800a880 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a87c:	2300      	movs	r3, #0
 800a87e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d013      	beq.n	800a8ae <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a886:	88fa      	ldrh	r2, [r7, #6]
 800a888:	2300      	movs	r3, #0
 800a88a:	9303      	str	r3, [sp, #12]
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	9302      	str	r3, [sp, #8]
 800a890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a892:	9301      	str	r3, [sp, #4]
 800a894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	68b9      	ldr	r1, [r7, #8]
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f000 f80e 	bl	800a8be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8a2:	69f8      	ldr	r0, [r7, #28]
 800a8a4:	f000 f892 	bl	800a9cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	61bb      	str	r3, [r7, #24]
 800a8ac:	e002      	b.n	800a8b4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a8b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a8b4:	69bb      	ldr	r3, [r7, #24]
	}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3720      	adds	r7, #32
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b088      	sub	sp, #32
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	60f8      	str	r0, [r7, #12]
 800a8c6:	60b9      	str	r1, [r7, #8]
 800a8c8:	607a      	str	r2, [r7, #4]
 800a8ca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	21a5      	movs	r1, #165	; 0xa5
 800a8d8:	f001 fe32 	bl	800c540 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4413      	add	r3, r2
 800a8ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	f023 0307 	bic.w	r3, r3, #7
 800a8f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	f003 0307 	and.w	r3, r3, #7
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d00a      	beq.n	800a916 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	617b      	str	r3, [r7, #20]
}
 800a912:	bf00      	nop
 800a914:	e7fe      	b.n	800a914 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a916:	2300      	movs	r3, #0
 800a918:	61fb      	str	r3, [r7, #28]
 800a91a:	e012      	b.n	800a942 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	4413      	add	r3, r2
 800a922:	7819      	ldrb	r1, [r3, #0]
 800a924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	4413      	add	r3, r2
 800a92a:	3334      	adds	r3, #52	; 0x34
 800a92c:	460a      	mov	r2, r1
 800a92e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	4413      	add	r3, r2
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d006      	beq.n	800a94a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	3301      	adds	r3, #1
 800a940:	61fb      	str	r3, [r7, #28]
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	2b0f      	cmp	r3, #15
 800a946:	d9e9      	bls.n	800a91c <prvInitialiseNewTask+0x5e>
 800a948:	e000      	b.n	800a94c <prvInitialiseNewTask+0x8e>
		{
			break;
 800a94a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94e:	2200      	movs	r2, #0
 800a950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a956:	2b06      	cmp	r3, #6
 800a958:	d901      	bls.n	800a95e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a95a:	2306      	movs	r3, #6
 800a95c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a962:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a968:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96c:	2200      	movs	r2, #0
 800a96e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a972:	3304      	adds	r3, #4
 800a974:	4618      	mov	r0, r3
 800a976:	f7ff f8ac 	bl	8009ad2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97c:	3318      	adds	r3, #24
 800a97e:	4618      	mov	r0, r3
 800a980:	f7ff f8a7 	bl	8009ad2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a988:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98c:	f1c3 0207 	rsb	r2, r3, #7
 800a990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a992:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a998:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99c:	2200      	movs	r2, #0
 800a99e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a9a8:	683a      	ldr	r2, [r7, #0]
 800a9aa:	68f9      	ldr	r1, [r7, #12]
 800a9ac:	69b8      	ldr	r0, [r7, #24]
 800a9ae:	f001 f955 	bl	800bc5c <pxPortInitialiseStack>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d002      	beq.n	800a9c4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9c4:	bf00      	nop
 800a9c6:	3720      	adds	r7, #32
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a9d4:	f001 fa4e 	bl	800be74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a9d8:	4b2c      	ldr	r3, [pc, #176]	; (800aa8c <prvAddNewTaskToReadyList+0xc0>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	4a2b      	ldr	r2, [pc, #172]	; (800aa8c <prvAddNewTaskToReadyList+0xc0>)
 800a9e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a9e2:	4b2b      	ldr	r3, [pc, #172]	; (800aa90 <prvAddNewTaskToReadyList+0xc4>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d109      	bne.n	800a9fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a9ea:	4a29      	ldr	r2, [pc, #164]	; (800aa90 <prvAddNewTaskToReadyList+0xc4>)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a9f0:	4b26      	ldr	r3, [pc, #152]	; (800aa8c <prvAddNewTaskToReadyList+0xc0>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d110      	bne.n	800aa1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a9f8:	f000 fc18 	bl	800b22c <prvInitialiseTaskLists>
 800a9fc:	e00d      	b.n	800aa1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a9fe:	4b25      	ldr	r3, [pc, #148]	; (800aa94 <prvAddNewTaskToReadyList+0xc8>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d109      	bne.n	800aa1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aa06:	4b22      	ldr	r3, [pc, #136]	; (800aa90 <prvAddNewTaskToReadyList+0xc4>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d802      	bhi.n	800aa1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aa14:	4a1e      	ldr	r2, [pc, #120]	; (800aa90 <prvAddNewTaskToReadyList+0xc4>)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aa1a:	4b1f      	ldr	r3, [pc, #124]	; (800aa98 <prvAddNewTaskToReadyList+0xcc>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	4a1d      	ldr	r2, [pc, #116]	; (800aa98 <prvAddNewTaskToReadyList+0xcc>)
 800aa22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aa24:	4b1c      	ldr	r3, [pc, #112]	; (800aa98 <prvAddNewTaskToReadyList+0xcc>)
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa30:	2201      	movs	r2, #1
 800aa32:	409a      	lsls	r2, r3
 800aa34:	4b19      	ldr	r3, [pc, #100]	; (800aa9c <prvAddNewTaskToReadyList+0xd0>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	4a18      	ldr	r2, [pc, #96]	; (800aa9c <prvAddNewTaskToReadyList+0xd0>)
 800aa3c:	6013      	str	r3, [r2, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa42:	4613      	mov	r3, r2
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4413      	add	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4a15      	ldr	r2, [pc, #84]	; (800aaa0 <prvAddNewTaskToReadyList+0xd4>)
 800aa4c:	441a      	add	r2, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	3304      	adds	r3, #4
 800aa52:	4619      	mov	r1, r3
 800aa54:	4610      	mov	r0, r2
 800aa56:	f7ff f849 	bl	8009aec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aa5a:	f001 fa3b 	bl	800bed4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aa5e:	4b0d      	ldr	r3, [pc, #52]	; (800aa94 <prvAddNewTaskToReadyList+0xc8>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00e      	beq.n	800aa84 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa66:	4b0a      	ldr	r3, [pc, #40]	; (800aa90 <prvAddNewTaskToReadyList+0xc4>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d207      	bcs.n	800aa84 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa74:	4b0b      	ldr	r3, [pc, #44]	; (800aaa4 <prvAddNewTaskToReadyList+0xd8>)
 800aa76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa7a:	601a      	str	r2, [r3, #0]
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa84:	bf00      	nop
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	20000964 	.word	0x20000964
 800aa90:	20000864 	.word	0x20000864
 800aa94:	20000970 	.word	0x20000970
 800aa98:	20000980 	.word	0x20000980
 800aa9c:	2000096c 	.word	0x2000096c
 800aaa0:	20000868 	.word	0x20000868
 800aaa4:	e000ed04 	.word	0xe000ed04

0800aaa8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aab0:	2300      	movs	r3, #0
 800aab2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d017      	beq.n	800aaea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aaba:	4b13      	ldr	r3, [pc, #76]	; (800ab08 <vTaskDelay+0x60>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d00a      	beq.n	800aad8 <vTaskDelay+0x30>
	__asm volatile
 800aac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac6:	f383 8811 	msr	BASEPRI, r3
 800aaca:	f3bf 8f6f 	isb	sy
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	60bb      	str	r3, [r7, #8]
}
 800aad4:	bf00      	nop
 800aad6:	e7fe      	b.n	800aad6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aad8:	f000 f868 	bl	800abac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aadc:	2100      	movs	r1, #0
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fd84 	bl	800b5ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aae4:	f000 f870 	bl	800abc8 <xTaskResumeAll>
 800aae8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d107      	bne.n	800ab00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aaf0:	4b06      	ldr	r3, [pc, #24]	; (800ab0c <vTaskDelay+0x64>)
 800aaf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaf6:	601a      	str	r2, [r3, #0]
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab00:	bf00      	nop
 800ab02:	3710      	adds	r7, #16
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	2000098c 	.word	0x2000098c
 800ab0c:	e000ed04 	.word	0xe000ed04

0800ab10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800ab16:	4b1f      	ldr	r3, [pc, #124]	; (800ab94 <vTaskStartScheduler+0x84>)
 800ab18:	9301      	str	r3, [sp, #4]
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	2300      	movs	r3, #0
 800ab20:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab24:	491c      	ldr	r1, [pc, #112]	; (800ab98 <vTaskStartScheduler+0x88>)
 800ab26:	481d      	ldr	r0, [pc, #116]	; (800ab9c <vTaskStartScheduler+0x8c>)
 800ab28:	f7ff fe88 	bl	800a83c <xTaskCreate>
 800ab2c:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d102      	bne.n	800ab3a <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 800ab34:	f000 fdc0 	bl	800b6b8 <xTimerCreateTimerTask>
 800ab38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d116      	bne.n	800ab6e <vTaskStartScheduler+0x5e>
	__asm volatile
 800ab40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	60bb      	str	r3, [r7, #8]
}
 800ab52:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab54:	4b12      	ldr	r3, [pc, #72]	; (800aba0 <vTaskStartScheduler+0x90>)
 800ab56:	f04f 32ff 	mov.w	r2, #4294967295
 800ab5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ab5c:	4b11      	ldr	r3, [pc, #68]	; (800aba4 <vTaskStartScheduler+0x94>)
 800ab5e:	2201      	movs	r2, #1
 800ab60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ab62:	4b11      	ldr	r3, [pc, #68]	; (800aba8 <vTaskStartScheduler+0x98>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ab68:	f001 f8f6 	bl	800bd58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ab6c:	e00e      	b.n	800ab8c <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab74:	d10a      	bne.n	800ab8c <vTaskStartScheduler+0x7c>
	__asm volatile
 800ab76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7a:	f383 8811 	msr	BASEPRI, r3
 800ab7e:	f3bf 8f6f 	isb	sy
 800ab82:	f3bf 8f4f 	dsb	sy
 800ab86:	607b      	str	r3, [r7, #4]
}
 800ab88:	bf00      	nop
 800ab8a:	e7fe      	b.n	800ab8a <vTaskStartScheduler+0x7a>
}
 800ab8c:	bf00      	nop
 800ab8e:	3710      	adds	r7, #16
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	20000988 	.word	0x20000988
 800ab98:	0800f574 	.word	0x0800f574
 800ab9c:	0800b1fd 	.word	0x0800b1fd
 800aba0:	20000984 	.word	0x20000984
 800aba4:	20000970 	.word	0x20000970
 800aba8:	20000968 	.word	0x20000968

0800abac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800abac:	b480      	push	{r7}
 800abae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800abb0:	4b04      	ldr	r3, [pc, #16]	; (800abc4 <vTaskSuspendAll+0x18>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	3301      	adds	r3, #1
 800abb6:	4a03      	ldr	r2, [pc, #12]	; (800abc4 <vTaskSuspendAll+0x18>)
 800abb8:	6013      	str	r3, [r2, #0]
}
 800abba:	bf00      	nop
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr
 800abc4:	2000098c 	.word	0x2000098c

0800abc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800abce:	2300      	movs	r3, #0
 800abd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800abd2:	2300      	movs	r3, #0
 800abd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800abd6:	4b41      	ldr	r3, [pc, #260]	; (800acdc <xTaskResumeAll+0x114>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d10a      	bne.n	800abf4 <xTaskResumeAll+0x2c>
	__asm volatile
 800abde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	603b      	str	r3, [r7, #0]
}
 800abf0:	bf00      	nop
 800abf2:	e7fe      	b.n	800abf2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800abf4:	f001 f93e 	bl	800be74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800abf8:	4b38      	ldr	r3, [pc, #224]	; (800acdc <xTaskResumeAll+0x114>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	3b01      	subs	r3, #1
 800abfe:	4a37      	ldr	r2, [pc, #220]	; (800acdc <xTaskResumeAll+0x114>)
 800ac00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac02:	4b36      	ldr	r3, [pc, #216]	; (800acdc <xTaskResumeAll+0x114>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d161      	bne.n	800acce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ac0a:	4b35      	ldr	r3, [pc, #212]	; (800ace0 <xTaskResumeAll+0x118>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d05d      	beq.n	800acce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac12:	e02e      	b.n	800ac72 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ac14:	4b33      	ldr	r3, [pc, #204]	; (800ace4 <xTaskResumeAll+0x11c>)
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	3318      	adds	r3, #24
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7fe ffc0 	bl	8009ba6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	3304      	adds	r3, #4
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7fe ffbb 	bl	8009ba6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac34:	2201      	movs	r2, #1
 800ac36:	409a      	lsls	r2, r3
 800ac38:	4b2b      	ldr	r3, [pc, #172]	; (800ace8 <xTaskResumeAll+0x120>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	4a2a      	ldr	r2, [pc, #168]	; (800ace8 <xTaskResumeAll+0x120>)
 800ac40:	6013      	str	r3, [r2, #0]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac46:	4613      	mov	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4a27      	ldr	r2, [pc, #156]	; (800acec <xTaskResumeAll+0x124>)
 800ac50:	441a      	add	r2, r3
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	3304      	adds	r3, #4
 800ac56:	4619      	mov	r1, r3
 800ac58:	4610      	mov	r0, r2
 800ac5a:	f7fe ff47 	bl	8009aec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac62:	4b23      	ldr	r3, [pc, #140]	; (800acf0 <xTaskResumeAll+0x128>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d302      	bcc.n	800ac72 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ac6c:	4b21      	ldr	r3, [pc, #132]	; (800acf4 <xTaskResumeAll+0x12c>)
 800ac6e:	2201      	movs	r2, #1
 800ac70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac72:	4b1c      	ldr	r3, [pc, #112]	; (800ace4 <xTaskResumeAll+0x11c>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1cc      	bne.n	800ac14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d001      	beq.n	800ac84 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ac80:	f000 fb60 	bl	800b344 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ac84:	4b1c      	ldr	r3, [pc, #112]	; (800acf8 <xTaskResumeAll+0x130>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d010      	beq.n	800acb2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ac90:	f000 f858 	bl	800ad44 <xTaskIncrementTick>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d002      	beq.n	800aca0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ac9a:	4b16      	ldr	r3, [pc, #88]	; (800acf4 <xTaskResumeAll+0x12c>)
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	3b01      	subs	r3, #1
 800aca4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1f1      	bne.n	800ac90 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800acac:	4b12      	ldr	r3, [pc, #72]	; (800acf8 <xTaskResumeAll+0x130>)
 800acae:	2200      	movs	r2, #0
 800acb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800acb2:	4b10      	ldr	r3, [pc, #64]	; (800acf4 <xTaskResumeAll+0x12c>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d009      	beq.n	800acce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800acba:	2301      	movs	r3, #1
 800acbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800acbe:	4b0f      	ldr	r3, [pc, #60]	; (800acfc <xTaskResumeAll+0x134>)
 800acc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acc4:	601a      	str	r2, [r3, #0]
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800acce:	f001 f901 	bl	800bed4 <vPortExitCritical>

	return xAlreadyYielded;
 800acd2:	68bb      	ldr	r3, [r7, #8]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3710      	adds	r7, #16
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	2000098c 	.word	0x2000098c
 800ace0:	20000964 	.word	0x20000964
 800ace4:	20000924 	.word	0x20000924
 800ace8:	2000096c 	.word	0x2000096c
 800acec:	20000868 	.word	0x20000868
 800acf0:	20000864 	.word	0x20000864
 800acf4:	20000978 	.word	0x20000978
 800acf8:	20000974 	.word	0x20000974
 800acfc:	e000ed04 	.word	0xe000ed04

0800ad00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ad06:	4b05      	ldr	r3, [pc, #20]	; (800ad1c <xTaskGetTickCount+0x1c>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ad0c:	687b      	ldr	r3, [r7, #4]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	370c      	adds	r7, #12
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	20000968 	.word	0x20000968

0800ad20 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad26:	f001 f97f 	bl	800c028 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ad2e:	4b04      	ldr	r3, [pc, #16]	; (800ad40 <xTaskGetTickCountFromISR+0x20>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad34:	683b      	ldr	r3, [r7, #0]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3708      	adds	r7, #8
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	20000968 	.word	0x20000968

0800ad44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b086      	sub	sp, #24
 800ad48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad4e:	4b51      	ldr	r3, [pc, #324]	; (800ae94 <xTaskIncrementTick+0x150>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f040 808d 	bne.w	800ae72 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 800ad58:	4b4f      	ldr	r3, [pc, #316]	; (800ae98 <xTaskIncrementTick+0x154>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad60:	4a4d      	ldr	r2, [pc, #308]	; (800ae98 <xTaskIncrementTick+0x154>)
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d120      	bne.n	800adae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad6c:	4b4b      	ldr	r3, [pc, #300]	; (800ae9c <xTaskIncrementTick+0x158>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00a      	beq.n	800ad8c <xTaskIncrementTick+0x48>
	__asm volatile
 800ad76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7a:	f383 8811 	msr	BASEPRI, r3
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f3bf 8f4f 	dsb	sy
 800ad86:	603b      	str	r3, [r7, #0]
}
 800ad88:	bf00      	nop
 800ad8a:	e7fe      	b.n	800ad8a <xTaskIncrementTick+0x46>
 800ad8c:	4b43      	ldr	r3, [pc, #268]	; (800ae9c <xTaskIncrementTick+0x158>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	60fb      	str	r3, [r7, #12]
 800ad92:	4b43      	ldr	r3, [pc, #268]	; (800aea0 <xTaskIncrementTick+0x15c>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a41      	ldr	r2, [pc, #260]	; (800ae9c <xTaskIncrementTick+0x158>)
 800ad98:	6013      	str	r3, [r2, #0]
 800ad9a:	4a41      	ldr	r2, [pc, #260]	; (800aea0 <xTaskIncrementTick+0x15c>)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6013      	str	r3, [r2, #0]
 800ada0:	4b40      	ldr	r3, [pc, #256]	; (800aea4 <xTaskIncrementTick+0x160>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	3301      	adds	r3, #1
 800ada6:	4a3f      	ldr	r2, [pc, #252]	; (800aea4 <xTaskIncrementTick+0x160>)
 800ada8:	6013      	str	r3, [r2, #0]
 800adaa:	f000 facb 	bl	800b344 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800adae:	4b3e      	ldr	r3, [pc, #248]	; (800aea8 <xTaskIncrementTick+0x164>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	693a      	ldr	r2, [r7, #16]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d34d      	bcc.n	800ae54 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800adb8:	4b38      	ldr	r3, [pc, #224]	; (800ae9c <xTaskIncrementTick+0x158>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d101      	bne.n	800adc6 <xTaskIncrementTick+0x82>
 800adc2:	2301      	movs	r3, #1
 800adc4:	e000      	b.n	800adc8 <xTaskIncrementTick+0x84>
 800adc6:	2300      	movs	r3, #0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d004      	beq.n	800add6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adcc:	4b36      	ldr	r3, [pc, #216]	; (800aea8 <xTaskIncrementTick+0x164>)
 800adce:	f04f 32ff 	mov.w	r2, #4294967295
 800add2:	601a      	str	r2, [r3, #0]
					break;
 800add4:	e03e      	b.n	800ae54 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800add6:	4b31      	ldr	r3, [pc, #196]	; (800ae9c <xTaskIncrementTick+0x158>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ade6:	693a      	ldr	r2, [r7, #16]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	429a      	cmp	r2, r3
 800adec:	d203      	bcs.n	800adf6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800adee:	4a2e      	ldr	r2, [pc, #184]	; (800aea8 <xTaskIncrementTick+0x164>)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6013      	str	r3, [r2, #0]
						break;
 800adf4:	e02e      	b.n	800ae54 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	3304      	adds	r3, #4
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fe fed3 	bl	8009ba6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d004      	beq.n	800ae12 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	3318      	adds	r3, #24
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7fe feca 	bl	8009ba6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae16:	2201      	movs	r2, #1
 800ae18:	409a      	lsls	r2, r3
 800ae1a:	4b24      	ldr	r3, [pc, #144]	; (800aeac <xTaskIncrementTick+0x168>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	4a22      	ldr	r2, [pc, #136]	; (800aeac <xTaskIncrementTick+0x168>)
 800ae22:	6013      	str	r3, [r2, #0]
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae28:	4613      	mov	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	4a1f      	ldr	r2, [pc, #124]	; (800aeb0 <xTaskIncrementTick+0x16c>)
 800ae32:	441a      	add	r2, r3
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	3304      	adds	r3, #4
 800ae38:	4619      	mov	r1, r3
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	f7fe fe56 	bl	8009aec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae44:	4b1b      	ldr	r3, [pc, #108]	; (800aeb4 <xTaskIncrementTick+0x170>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d3b4      	bcc.n	800adb8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae52:	e7b1      	b.n	800adb8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae54:	4b17      	ldr	r3, [pc, #92]	; (800aeb4 <xTaskIncrementTick+0x170>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae5a:	4915      	ldr	r1, [pc, #84]	; (800aeb0 <xTaskIncrementTick+0x16c>)
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4413      	add	r3, r2
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	440b      	add	r3, r1
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d907      	bls.n	800ae7c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	617b      	str	r3, [r7, #20]
 800ae70:	e004      	b.n	800ae7c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ae72:	4b11      	ldr	r3, [pc, #68]	; (800aeb8 <xTaskIncrementTick+0x174>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	3301      	adds	r3, #1
 800ae78:	4a0f      	ldr	r2, [pc, #60]	; (800aeb8 <xTaskIncrementTick+0x174>)
 800ae7a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ae7c:	4b0f      	ldr	r3, [pc, #60]	; (800aebc <xTaskIncrementTick+0x178>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d001      	beq.n	800ae88 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800ae84:	2301      	movs	r3, #1
 800ae86:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ae88:	697b      	ldr	r3, [r7, #20]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3718      	adds	r7, #24
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	2000098c 	.word	0x2000098c
 800ae98:	20000968 	.word	0x20000968
 800ae9c:	2000091c 	.word	0x2000091c
 800aea0:	20000920 	.word	0x20000920
 800aea4:	2000097c 	.word	0x2000097c
 800aea8:	20000984 	.word	0x20000984
 800aeac:	2000096c 	.word	0x2000096c
 800aeb0:	20000868 	.word	0x20000868
 800aeb4:	20000864 	.word	0x20000864
 800aeb8:	20000974 	.word	0x20000974
 800aebc:	20000978 	.word	0x20000978

0800aec0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aec0:	b480      	push	{r7}
 800aec2:	b087      	sub	sp, #28
 800aec4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aec6:	4b27      	ldr	r3, [pc, #156]	; (800af64 <vTaskSwitchContext+0xa4>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d003      	beq.n	800aed6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aece:	4b26      	ldr	r3, [pc, #152]	; (800af68 <vTaskSwitchContext+0xa8>)
 800aed0:	2201      	movs	r2, #1
 800aed2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aed4:	e03f      	b.n	800af56 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800aed6:	4b24      	ldr	r3, [pc, #144]	; (800af68 <vTaskSwitchContext+0xa8>)
 800aed8:	2200      	movs	r2, #0
 800aeda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800aedc:	4b23      	ldr	r3, [pc, #140]	; (800af6c <vTaskSwitchContext+0xac>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	fab3 f383 	clz	r3, r3
 800aee8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800aeea:	7afb      	ldrb	r3, [r7, #11]
 800aeec:	f1c3 031f 	rsb	r3, r3, #31
 800aef0:	617b      	str	r3, [r7, #20]
 800aef2:	491f      	ldr	r1, [pc, #124]	; (800af70 <vTaskSwitchContext+0xb0>)
 800aef4:	697a      	ldr	r2, [r7, #20]
 800aef6:	4613      	mov	r3, r2
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	4413      	add	r3, r2
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	440b      	add	r3, r1
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d10a      	bne.n	800af1c <vTaskSwitchContext+0x5c>
	__asm volatile
 800af06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0a:	f383 8811 	msr	BASEPRI, r3
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f3bf 8f4f 	dsb	sy
 800af16:	607b      	str	r3, [r7, #4]
}
 800af18:	bf00      	nop
 800af1a:	e7fe      	b.n	800af1a <vTaskSwitchContext+0x5a>
 800af1c:	697a      	ldr	r2, [r7, #20]
 800af1e:	4613      	mov	r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	4413      	add	r3, r2
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	4a12      	ldr	r2, [pc, #72]	; (800af70 <vTaskSwitchContext+0xb0>)
 800af28:	4413      	add	r3, r2
 800af2a:	613b      	str	r3, [r7, #16]
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	685a      	ldr	r2, [r3, #4]
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	605a      	str	r2, [r3, #4]
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	685a      	ldr	r2, [r3, #4]
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	3308      	adds	r3, #8
 800af3e:	429a      	cmp	r2, r3
 800af40:	d104      	bne.n	800af4c <vTaskSwitchContext+0x8c>
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	685a      	ldr	r2, [r3, #4]
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	605a      	str	r2, [r3, #4]
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	4a08      	ldr	r2, [pc, #32]	; (800af74 <vTaskSwitchContext+0xb4>)
 800af54:	6013      	str	r3, [r2, #0]
}
 800af56:	bf00      	nop
 800af58:	371c      	adds	r7, #28
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	2000098c 	.word	0x2000098c
 800af68:	20000978 	.word	0x20000978
 800af6c:	2000096c 	.word	0x2000096c
 800af70:	20000868 	.word	0x20000868
 800af74:	20000864 	.word	0x20000864

0800af78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10a      	bne.n	800af9e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800af88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8c:	f383 8811 	msr	BASEPRI, r3
 800af90:	f3bf 8f6f 	isb	sy
 800af94:	f3bf 8f4f 	dsb	sy
 800af98:	60fb      	str	r3, [r7, #12]
}
 800af9a:	bf00      	nop
 800af9c:	e7fe      	b.n	800af9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af9e:	4b07      	ldr	r3, [pc, #28]	; (800afbc <vTaskPlaceOnEventList+0x44>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3318      	adds	r3, #24
 800afa4:	4619      	mov	r1, r3
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f7fe fdc4 	bl	8009b34 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800afac:	2101      	movs	r1, #1
 800afae:	6838      	ldr	r0, [r7, #0]
 800afb0:	f000 fb1c 	bl	800b5ec <prvAddCurrentTaskToDelayedList>
}
 800afb4:	bf00      	nop
 800afb6:	3710      	adds	r7, #16
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	20000864 	.word	0x20000864

0800afc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d10a      	bne.n	800afe8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800afd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	617b      	str	r3, [r7, #20]
}
 800afe4:	bf00      	nop
 800afe6:	e7fe      	b.n	800afe6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800afe8:	4b0a      	ldr	r3, [pc, #40]	; (800b014 <vTaskPlaceOnEventListRestricted+0x54>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	3318      	adds	r3, #24
 800afee:	4619      	mov	r1, r3
 800aff0:	68f8      	ldr	r0, [r7, #12]
 800aff2:	f7fe fd7b 	bl	8009aec <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d002      	beq.n	800b002 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800affc:	f04f 33ff 	mov.w	r3, #4294967295
 800b000:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b002:	6879      	ldr	r1, [r7, #4]
 800b004:	68b8      	ldr	r0, [r7, #8]
 800b006:	f000 faf1 	bl	800b5ec <prvAddCurrentTaskToDelayedList>
	}
 800b00a:	bf00      	nop
 800b00c:	3718      	adds	r7, #24
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	20000864 	.word	0x20000864

0800b018 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b086      	sub	sp, #24
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d10a      	bne.n	800b044 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b032:	f383 8811 	msr	BASEPRI, r3
 800b036:	f3bf 8f6f 	isb	sy
 800b03a:	f3bf 8f4f 	dsb	sy
 800b03e:	60fb      	str	r3, [r7, #12]
}
 800b040:	bf00      	nop
 800b042:	e7fe      	b.n	800b042 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	3318      	adds	r3, #24
 800b048:	4618      	mov	r0, r3
 800b04a:	f7fe fdac 	bl	8009ba6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b04e:	4b1d      	ldr	r3, [pc, #116]	; (800b0c4 <xTaskRemoveFromEventList+0xac>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d11c      	bne.n	800b090 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	3304      	adds	r3, #4
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7fe fda3 	bl	8009ba6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b064:	2201      	movs	r2, #1
 800b066:	409a      	lsls	r2, r3
 800b068:	4b17      	ldr	r3, [pc, #92]	; (800b0c8 <xTaskRemoveFromEventList+0xb0>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4313      	orrs	r3, r2
 800b06e:	4a16      	ldr	r2, [pc, #88]	; (800b0c8 <xTaskRemoveFromEventList+0xb0>)
 800b070:	6013      	str	r3, [r2, #0]
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b076:	4613      	mov	r3, r2
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	4413      	add	r3, r2
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	4a13      	ldr	r2, [pc, #76]	; (800b0cc <xTaskRemoveFromEventList+0xb4>)
 800b080:	441a      	add	r2, r3
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	3304      	adds	r3, #4
 800b086:	4619      	mov	r1, r3
 800b088:	4610      	mov	r0, r2
 800b08a:	f7fe fd2f 	bl	8009aec <vListInsertEnd>
 800b08e:	e005      	b.n	800b09c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	3318      	adds	r3, #24
 800b094:	4619      	mov	r1, r3
 800b096:	480e      	ldr	r0, [pc, #56]	; (800b0d0 <xTaskRemoveFromEventList+0xb8>)
 800b098:	f7fe fd28 	bl	8009aec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a0:	4b0c      	ldr	r3, [pc, #48]	; (800b0d4 <xTaskRemoveFromEventList+0xbc>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d905      	bls.n	800b0b6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b0ae:	4b0a      	ldr	r3, [pc, #40]	; (800b0d8 <xTaskRemoveFromEventList+0xc0>)
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	601a      	str	r2, [r3, #0]
 800b0b4:	e001      	b.n	800b0ba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b0ba:	697b      	ldr	r3, [r7, #20]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3718      	adds	r7, #24
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	2000098c 	.word	0x2000098c
 800b0c8:	2000096c 	.word	0x2000096c
 800b0cc:	20000868 	.word	0x20000868
 800b0d0:	20000924 	.word	0x20000924
 800b0d4:	20000864 	.word	0x20000864
 800b0d8:	20000978 	.word	0x20000978

0800b0dc <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b085      	sub	sp, #20
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d10a      	bne.n	800b100 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800b0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ee:	f383 8811 	msr	BASEPRI, r3
 800b0f2:	f3bf 8f6f 	isb	sy
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	60fb      	str	r3, [r7, #12]
}
 800b0fc:	bf00      	nop
 800b0fe:	e7fe      	b.n	800b0fe <vTaskSetTimeOutState+0x22>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b100:	4b06      	ldr	r3, [pc, #24]	; (800b11c <vTaskSetTimeOutState+0x40>)
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b108:	4b05      	ldr	r3, [pc, #20]	; (800b120 <vTaskSetTimeOutState+0x44>)
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	605a      	str	r2, [r3, #4]
}
 800b110:	bf00      	nop
 800b112:	3714      	adds	r7, #20
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr
 800b11c:	2000097c 	.word	0x2000097c
 800b120:	20000968 	.word	0x20000968

0800b124 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b086      	sub	sp, #24
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d10a      	bne.n	800b14a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b138:	f383 8811 	msr	BASEPRI, r3
 800b13c:	f3bf 8f6f 	isb	sy
 800b140:	f3bf 8f4f 	dsb	sy
 800b144:	60fb      	str	r3, [r7, #12]
}
 800b146:	bf00      	nop
 800b148:	e7fe      	b.n	800b148 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d10a      	bne.n	800b166 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	60bb      	str	r3, [r7, #8]
}
 800b162:	bf00      	nop
 800b164:	e7fe      	b.n	800b164 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b166:	f000 fe85 	bl	800be74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b16a:	4b1c      	ldr	r3, [pc, #112]	; (800b1dc <xTaskCheckForTimeOut+0xb8>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b178:	d102      	bne.n	800b180 <xTaskCheckForTimeOut+0x5c>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b17a:	2300      	movs	r3, #0
 800b17c:	617b      	str	r3, [r7, #20]
 800b17e:	e026      	b.n	800b1ce <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	4b16      	ldr	r3, [pc, #88]	; (800b1e0 <xTaskCheckForTimeOut+0xbc>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d007      	beq.n	800b19c <xTaskCheckForTimeOut+0x78>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	693a      	ldr	r2, [r7, #16]
 800b192:	429a      	cmp	r2, r3
 800b194:	d302      	bcc.n	800b19c <xTaskCheckForTimeOut+0x78>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b196:	2301      	movs	r3, #1
 800b198:	617b      	str	r3, [r7, #20]
 800b19a:	e018      	b.n	800b1ce <xTaskCheckForTimeOut+0xaa>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	1ad2      	subs	r2, r2, r3
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d20e      	bcs.n	800b1ca <xTaskCheckForTimeOut+0xa6>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6859      	ldr	r1, [r3, #4]
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	1acb      	subs	r3, r1, r3
 800b1b8:	441a      	add	r2, r3
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f7ff ff8c 	bl	800b0dc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	617b      	str	r3, [r7, #20]
 800b1c8:	e001      	b.n	800b1ce <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			xReturn = pdTRUE;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800b1ce:	f000 fe81 	bl	800bed4 <vPortExitCritical>

	return xReturn;
 800b1d2:	697b      	ldr	r3, [r7, #20]
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3718      	adds	r7, #24
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	20000968 	.word	0x20000968
 800b1e0:	2000097c 	.word	0x2000097c

0800b1e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b1e8:	4b03      	ldr	r3, [pc, #12]	; (800b1f8 <vTaskMissedYield+0x14>)
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	601a      	str	r2, [r3, #0]
}
 800b1ee:	bf00      	nop
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr
 800b1f8:	20000978 	.word	0x20000978

0800b1fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b204:	f000 f852 	bl	800b2ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b208:	4b06      	ldr	r3, [pc, #24]	; (800b224 <prvIdleTask+0x28>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d9f9      	bls.n	800b204 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b210:	4b05      	ldr	r3, [pc, #20]	; (800b228 <prvIdleTask+0x2c>)
 800b212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b216:	601a      	str	r2, [r3, #0]
 800b218:	f3bf 8f4f 	dsb	sy
 800b21c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b220:	e7f0      	b.n	800b204 <prvIdleTask+0x8>
 800b222:	bf00      	nop
 800b224:	20000868 	.word	0x20000868
 800b228:	e000ed04 	.word	0xe000ed04

0800b22c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b232:	2300      	movs	r3, #0
 800b234:	607b      	str	r3, [r7, #4]
 800b236:	e00c      	b.n	800b252 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	4613      	mov	r3, r2
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	4413      	add	r3, r2
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	4a12      	ldr	r2, [pc, #72]	; (800b28c <prvInitialiseTaskLists+0x60>)
 800b244:	4413      	add	r3, r2
 800b246:	4618      	mov	r0, r3
 800b248:	f7fe fc23 	bl	8009a92 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	3301      	adds	r3, #1
 800b250:	607b      	str	r3, [r7, #4]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2b06      	cmp	r3, #6
 800b256:	d9ef      	bls.n	800b238 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b258:	480d      	ldr	r0, [pc, #52]	; (800b290 <prvInitialiseTaskLists+0x64>)
 800b25a:	f7fe fc1a 	bl	8009a92 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b25e:	480d      	ldr	r0, [pc, #52]	; (800b294 <prvInitialiseTaskLists+0x68>)
 800b260:	f7fe fc17 	bl	8009a92 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b264:	480c      	ldr	r0, [pc, #48]	; (800b298 <prvInitialiseTaskLists+0x6c>)
 800b266:	f7fe fc14 	bl	8009a92 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b26a:	480c      	ldr	r0, [pc, #48]	; (800b29c <prvInitialiseTaskLists+0x70>)
 800b26c:	f7fe fc11 	bl	8009a92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b270:	480b      	ldr	r0, [pc, #44]	; (800b2a0 <prvInitialiseTaskLists+0x74>)
 800b272:	f7fe fc0e 	bl	8009a92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b276:	4b0b      	ldr	r3, [pc, #44]	; (800b2a4 <prvInitialiseTaskLists+0x78>)
 800b278:	4a05      	ldr	r2, [pc, #20]	; (800b290 <prvInitialiseTaskLists+0x64>)
 800b27a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b27c:	4b0a      	ldr	r3, [pc, #40]	; (800b2a8 <prvInitialiseTaskLists+0x7c>)
 800b27e:	4a05      	ldr	r2, [pc, #20]	; (800b294 <prvInitialiseTaskLists+0x68>)
 800b280:	601a      	str	r2, [r3, #0]
}
 800b282:	bf00      	nop
 800b284:	3708      	adds	r7, #8
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	20000868 	.word	0x20000868
 800b290:	200008f4 	.word	0x200008f4
 800b294:	20000908 	.word	0x20000908
 800b298:	20000924 	.word	0x20000924
 800b29c:	20000938 	.word	0x20000938
 800b2a0:	20000950 	.word	0x20000950
 800b2a4:	2000091c 	.word	0x2000091c
 800b2a8:	20000920 	.word	0x20000920

0800b2ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2b2:	e028      	b.n	800b306 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800b2b4:	f7ff fc7a 	bl	800abac <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800b2b8:	4b17      	ldr	r3, [pc, #92]	; (800b318 <prvCheckTasksWaitingTermination+0x6c>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	bf0c      	ite	eq
 800b2c0:	2301      	moveq	r3, #1
 800b2c2:	2300      	movne	r3, #0
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800b2c8:	f7ff fc7e 	bl	800abc8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d119      	bne.n	800b306 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800b2d2:	f000 fdcf 	bl	800be74 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b2d6:	4b10      	ldr	r3, [pc, #64]	; (800b318 <prvCheckTasksWaitingTermination+0x6c>)
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	3304      	adds	r3, #4
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7fe fc5f 	bl	8009ba6 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800b2e8:	4b0c      	ldr	r3, [pc, #48]	; (800b31c <prvCheckTasksWaitingTermination+0x70>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	4a0b      	ldr	r2, [pc, #44]	; (800b31c <prvCheckTasksWaitingTermination+0x70>)
 800b2f0:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800b2f2:	4b0b      	ldr	r3, [pc, #44]	; (800b320 <prvCheckTasksWaitingTermination+0x74>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	4a09      	ldr	r2, [pc, #36]	; (800b320 <prvCheckTasksWaitingTermination+0x74>)
 800b2fa:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800b2fc:	f000 fdea 	bl	800bed4 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800b300:	6838      	ldr	r0, [r7, #0]
 800b302:	f000 f80f 	bl	800b324 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b306:	4b06      	ldr	r3, [pc, #24]	; (800b320 <prvCheckTasksWaitingTermination+0x74>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1d2      	bne.n	800b2b4 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b30e:	bf00      	nop
 800b310:	bf00      	nop
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	20000938 	.word	0x20000938
 800b31c:	20000964 	.word	0x20000964
 800b320:	2000094c 	.word	0x2000094c

0800b324 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b330:	4618      	mov	r0, r3
 800b332:	f000 ff7d 	bl	800c230 <vPortFree>
			vPortFree( pxTCB );
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 ff7a 	bl	800c230 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b33c:	bf00      	nop
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b34a:	4b0f      	ldr	r3, [pc, #60]	; (800b388 <prvResetNextTaskUnblockTime+0x44>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d101      	bne.n	800b358 <prvResetNextTaskUnblockTime+0x14>
 800b354:	2301      	movs	r3, #1
 800b356:	e000      	b.n	800b35a <prvResetNextTaskUnblockTime+0x16>
 800b358:	2300      	movs	r3, #0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d004      	beq.n	800b368 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b35e:	4b0b      	ldr	r3, [pc, #44]	; (800b38c <prvResetNextTaskUnblockTime+0x48>)
 800b360:	f04f 32ff 	mov.w	r2, #4294967295
 800b364:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b366:	e008      	b.n	800b37a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b368:	4b07      	ldr	r3, [pc, #28]	; (800b388 <prvResetNextTaskUnblockTime+0x44>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68db      	ldr	r3, [r3, #12]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	4a05      	ldr	r2, [pc, #20]	; (800b38c <prvResetNextTaskUnblockTime+0x48>)
 800b378:	6013      	str	r3, [r2, #0]
}
 800b37a:	bf00      	nop
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop
 800b388:	2000091c 	.word	0x2000091c
 800b38c:	20000984 	.word	0x20000984

0800b390 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b396:	4b0b      	ldr	r3, [pc, #44]	; (800b3c4 <xTaskGetSchedulerState+0x34>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d102      	bne.n	800b3a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	607b      	str	r3, [r7, #4]
 800b3a2:	e008      	b.n	800b3b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3a4:	4b08      	ldr	r3, [pc, #32]	; (800b3c8 <xTaskGetSchedulerState+0x38>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d102      	bne.n	800b3b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b3ac:	2302      	movs	r3, #2
 800b3ae:	607b      	str	r3, [r7, #4]
 800b3b0:	e001      	b.n	800b3b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b3b6:	687b      	ldr	r3, [r7, #4]
	}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr
 800b3c4:	20000970 	.word	0x20000970
 800b3c8:	2000098c 	.word	0x2000098c

0800b3cc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d062      	beq.n	800b4a4 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3e2:	4b32      	ldr	r3, [pc, #200]	; (800b4ac <vTaskPriorityInherit+0xe0>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d25b      	bcs.n	800b4a4 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	699b      	ldr	r3, [r3, #24]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	db06      	blt.n	800b402 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3f4:	4b2d      	ldr	r3, [pc, #180]	; (800b4ac <vTaskPriorityInherit+0xe0>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fa:	f1c3 0207 	rsb	r2, r3, #7
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	6959      	ldr	r1, [r3, #20]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b40a:	4613      	mov	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	4413      	add	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4a27      	ldr	r2, [pc, #156]	; (800b4b0 <vTaskPriorityInherit+0xe4>)
 800b414:	4413      	add	r3, r2
 800b416:	4299      	cmp	r1, r3
 800b418:	d101      	bne.n	800b41e <vTaskPriorityInherit+0x52>
 800b41a:	2301      	movs	r3, #1
 800b41c:	e000      	b.n	800b420 <vTaskPriorityInherit+0x54>
 800b41e:	2300      	movs	r3, #0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d03a      	beq.n	800b49a <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	3304      	adds	r3, #4
 800b428:	4618      	mov	r0, r3
 800b42a:	f7fe fbbc 	bl	8009ba6 <uxListRemove>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	d115      	bne.n	800b460 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b438:	491d      	ldr	r1, [pc, #116]	; (800b4b0 <vTaskPriorityInherit+0xe4>)
 800b43a:	4613      	mov	r3, r2
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	4413      	add	r3, r2
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	440b      	add	r3, r1
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d10a      	bne.n	800b460 <vTaskPriorityInherit+0x94>
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44e:	2201      	movs	r2, #1
 800b450:	fa02 f303 	lsl.w	r3, r2, r3
 800b454:	43da      	mvns	r2, r3
 800b456:	4b17      	ldr	r3, [pc, #92]	; (800b4b4 <vTaskPriorityInherit+0xe8>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4013      	ands	r3, r2
 800b45c:	4a15      	ldr	r2, [pc, #84]	; (800b4b4 <vTaskPriorityInherit+0xe8>)
 800b45e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b460:	4b12      	ldr	r3, [pc, #72]	; (800b4ac <vTaskPriorityInherit+0xe0>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46e:	2201      	movs	r2, #1
 800b470:	409a      	lsls	r2, r3
 800b472:	4b10      	ldr	r3, [pc, #64]	; (800b4b4 <vTaskPriorityInherit+0xe8>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4313      	orrs	r3, r2
 800b478:	4a0e      	ldr	r2, [pc, #56]	; (800b4b4 <vTaskPriorityInherit+0xe8>)
 800b47a:	6013      	str	r3, [r2, #0]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b480:	4613      	mov	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4413      	add	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	4a09      	ldr	r2, [pc, #36]	; (800b4b0 <vTaskPriorityInherit+0xe4>)
 800b48a:	441a      	add	r2, r3
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	3304      	adds	r3, #4
 800b490:	4619      	mov	r1, r3
 800b492:	4610      	mov	r0, r2
 800b494:	f7fe fb2a 	bl	8009aec <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b498:	e004      	b.n	800b4a4 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b49a:	4b04      	ldr	r3, [pc, #16]	; (800b4ac <vTaskPriorityInherit+0xe0>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800b4a4:	bf00      	nop
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	20000864 	.word	0x20000864
 800b4b0:	20000868 	.word	0x20000868
 800b4b4:	2000096c 	.word	0x2000096c

0800b4b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b086      	sub	sp, #24
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d06e      	beq.n	800b5ac <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b4ce:	4b3a      	ldr	r3, [pc, #232]	; (800b5b8 <xTaskPriorityDisinherit+0x100>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	693a      	ldr	r2, [r7, #16]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d00a      	beq.n	800b4ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	60fb      	str	r3, [r7, #12]
}
 800b4ea:	bf00      	nop
 800b4ec:	e7fe      	b.n	800b4ec <xTaskPriorityDisinherit+0x34>

			configASSERT( pxTCB->uxMutexesHeld );
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10a      	bne.n	800b50c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	60bb      	str	r3, [r7, #8]
}
 800b508:	bf00      	nop
 800b50a:	e7fe      	b.n	800b50a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b510:	1e5a      	subs	r2, r3, #1
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b51e:	429a      	cmp	r2, r3
 800b520:	d044      	beq.n	800b5ac <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b526:	2b00      	cmp	r3, #0
 800b528:	d140      	bne.n	800b5ac <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	3304      	adds	r3, #4
 800b52e:	4618      	mov	r0, r3
 800b530:	f7fe fb39 	bl	8009ba6 <uxListRemove>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d115      	bne.n	800b566 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b53e:	491f      	ldr	r1, [pc, #124]	; (800b5bc <xTaskPriorityDisinherit+0x104>)
 800b540:	4613      	mov	r3, r2
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	4413      	add	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	440b      	add	r3, r1
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d10a      	bne.n	800b566 <xTaskPriorityDisinherit+0xae>
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b554:	2201      	movs	r2, #1
 800b556:	fa02 f303 	lsl.w	r3, r2, r3
 800b55a:	43da      	mvns	r2, r3
 800b55c:	4b18      	ldr	r3, [pc, #96]	; (800b5c0 <xTaskPriorityDisinherit+0x108>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4013      	ands	r3, r2
 800b562:	4a17      	ldr	r2, [pc, #92]	; (800b5c0 <xTaskPriorityDisinherit+0x108>)
 800b564:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b572:	f1c3 0207 	rsb	r2, r3, #7
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57e:	2201      	movs	r2, #1
 800b580:	409a      	lsls	r2, r3
 800b582:	4b0f      	ldr	r3, [pc, #60]	; (800b5c0 <xTaskPriorityDisinherit+0x108>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4313      	orrs	r3, r2
 800b588:	4a0d      	ldr	r2, [pc, #52]	; (800b5c0 <xTaskPriorityDisinherit+0x108>)
 800b58a:	6013      	str	r3, [r2, #0]
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b590:	4613      	mov	r3, r2
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	4413      	add	r3, r2
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	4a08      	ldr	r2, [pc, #32]	; (800b5bc <xTaskPriorityDisinherit+0x104>)
 800b59a:	441a      	add	r2, r3
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	3304      	adds	r3, #4
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	4610      	mov	r0, r2
 800b5a4:	f7fe faa2 	bl	8009aec <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b5ac:	697b      	ldr	r3, [r7, #20]
	}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3718      	adds	r7, #24
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	20000864 	.word	0x20000864
 800b5bc:	20000868 	.word	0x20000868
 800b5c0:	2000096c 	.word	0x2000096c

0800b5c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800b5c4:	b480      	push	{r7}
 800b5c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b5c8:	4b07      	ldr	r3, [pc, #28]	; (800b5e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d004      	beq.n	800b5da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b5d0:	4b05      	ldr	r3, [pc, #20]	; (800b5e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b5d6:	3201      	adds	r2, #1
 800b5d8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b5da:	4b03      	ldr	r3, [pc, #12]	; (800b5e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
	}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr
 800b5e8:	20000864 	.word	0x20000864

0800b5ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b5f6:	4b29      	ldr	r3, [pc, #164]	; (800b69c <prvAddCurrentTaskToDelayedList+0xb0>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5fc:	4b28      	ldr	r3, [pc, #160]	; (800b6a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	3304      	adds	r3, #4
 800b602:	4618      	mov	r0, r3
 800b604:	f7fe facf 	bl	8009ba6 <uxListRemove>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d10b      	bne.n	800b626 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b60e:	4b24      	ldr	r3, [pc, #144]	; (800b6a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b614:	2201      	movs	r2, #1
 800b616:	fa02 f303 	lsl.w	r3, r2, r3
 800b61a:	43da      	mvns	r2, r3
 800b61c:	4b21      	ldr	r3, [pc, #132]	; (800b6a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4013      	ands	r3, r2
 800b622:	4a20      	ldr	r2, [pc, #128]	; (800b6a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b624:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b62c:	d10a      	bne.n	800b644 <prvAddCurrentTaskToDelayedList+0x58>
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d007      	beq.n	800b644 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b634:	4b1a      	ldr	r3, [pc, #104]	; (800b6a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	3304      	adds	r3, #4
 800b63a:	4619      	mov	r1, r3
 800b63c:	481a      	ldr	r0, [pc, #104]	; (800b6a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b63e:	f7fe fa55 	bl	8009aec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b642:	e026      	b.n	800b692 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4413      	add	r3, r2
 800b64a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b64c:	4b14      	ldr	r3, [pc, #80]	; (800b6a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	68ba      	ldr	r2, [r7, #8]
 800b652:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d209      	bcs.n	800b670 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b65c:	4b13      	ldr	r3, [pc, #76]	; (800b6ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	4b0f      	ldr	r3, [pc, #60]	; (800b6a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	3304      	adds	r3, #4
 800b666:	4619      	mov	r1, r3
 800b668:	4610      	mov	r0, r2
 800b66a:	f7fe fa63 	bl	8009b34 <vListInsert>
}
 800b66e:	e010      	b.n	800b692 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b670:	4b0f      	ldr	r3, [pc, #60]	; (800b6b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	4b0a      	ldr	r3, [pc, #40]	; (800b6a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	3304      	adds	r3, #4
 800b67a:	4619      	mov	r1, r3
 800b67c:	4610      	mov	r0, r2
 800b67e:	f7fe fa59 	bl	8009b34 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b682:	4b0c      	ldr	r3, [pc, #48]	; (800b6b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	68ba      	ldr	r2, [r7, #8]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d202      	bcs.n	800b692 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b68c:	4a09      	ldr	r2, [pc, #36]	; (800b6b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	6013      	str	r3, [r2, #0]
}
 800b692:	bf00      	nop
 800b694:	3710      	adds	r7, #16
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	20000968 	.word	0x20000968
 800b6a0:	20000864 	.word	0x20000864
 800b6a4:	2000096c 	.word	0x2000096c
 800b6a8:	20000950 	.word	0x20000950
 800b6ac:	20000920 	.word	0x20000920
 800b6b0:	2000091c 	.word	0x2000091c
 800b6b4:	20000984 	.word	0x20000984

0800b6b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b6c2:	f000 fa95 	bl	800bbf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b6c6:	4b11      	ldr	r3, [pc, #68]	; (800b70c <xTimerCreateTimerTask+0x54>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00b      	beq.n	800b6e6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800b6ce:	4b10      	ldr	r3, [pc, #64]	; (800b710 <xTimerCreateTimerTask+0x58>)
 800b6d0:	9301      	str	r3, [sp, #4]
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	9300      	str	r3, [sp, #0]
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b6dc:	490d      	ldr	r1, [pc, #52]	; (800b714 <xTimerCreateTimerTask+0x5c>)
 800b6de:	480e      	ldr	r0, [pc, #56]	; (800b718 <xTimerCreateTimerTask+0x60>)
 800b6e0:	f7ff f8ac 	bl	800a83c <xTaskCreate>
 800b6e4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10a      	bne.n	800b702 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800b6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f0:	f383 8811 	msr	BASEPRI, r3
 800b6f4:	f3bf 8f6f 	isb	sy
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	603b      	str	r3, [r7, #0]
}
 800b6fe:	bf00      	nop
 800b700:	e7fe      	b.n	800b700 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800b702:	687b      	ldr	r3, [r7, #4]
}
 800b704:	4618      	mov	r0, r3
 800b706:	3708      	adds	r7, #8
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	200009c0 	.word	0x200009c0
 800b710:	200009c4 	.word	0x200009c4
 800b714:	0800f57c 	.word	0x0800f57c
 800b718:	0800b839 	.word	0x0800b839

0800b71c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b08a      	sub	sp, #40	; 0x28
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
 800b728:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b72a:	2300      	movs	r3, #0
 800b72c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10a      	bne.n	800b74a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b738:	f383 8811 	msr	BASEPRI, r3
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f3bf 8f4f 	dsb	sy
 800b744:	623b      	str	r3, [r7, #32]
}
 800b746:	bf00      	nop
 800b748:	e7fe      	b.n	800b748 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b74a:	4b1a      	ldr	r3, [pc, #104]	; (800b7b4 <xTimerGenericCommand+0x98>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d02a      	beq.n	800b7a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	2b05      	cmp	r3, #5
 800b762:	dc18      	bgt.n	800b796 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b764:	f7ff fe14 	bl	800b390 <xTaskGetSchedulerState>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b02      	cmp	r3, #2
 800b76c:	d109      	bne.n	800b782 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b76e:	4b11      	ldr	r3, [pc, #68]	; (800b7b4 <xTimerGenericCommand+0x98>)
 800b770:	6818      	ldr	r0, [r3, #0]
 800b772:	f107 0114 	add.w	r1, r7, #20
 800b776:	2300      	movs	r3, #0
 800b778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b77a:	f7fe fb37 	bl	8009dec <xQueueGenericSend>
 800b77e:	6278      	str	r0, [r7, #36]	; 0x24
 800b780:	e012      	b.n	800b7a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b782:	4b0c      	ldr	r3, [pc, #48]	; (800b7b4 <xTimerGenericCommand+0x98>)
 800b784:	6818      	ldr	r0, [r3, #0]
 800b786:	f107 0114 	add.w	r1, r7, #20
 800b78a:	2300      	movs	r3, #0
 800b78c:	2200      	movs	r2, #0
 800b78e:	f7fe fb2d 	bl	8009dec <xQueueGenericSend>
 800b792:	6278      	str	r0, [r7, #36]	; 0x24
 800b794:	e008      	b.n	800b7a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b796:	4b07      	ldr	r3, [pc, #28]	; (800b7b4 <xTimerGenericCommand+0x98>)
 800b798:	6818      	ldr	r0, [r3, #0]
 800b79a:	f107 0114 	add.w	r1, r7, #20
 800b79e:	2300      	movs	r3, #0
 800b7a0:	683a      	ldr	r2, [r7, #0]
 800b7a2:	f7fe fc21 	bl	8009fe8 <xQueueGenericSendFromISR>
 800b7a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3728      	adds	r7, #40	; 0x28
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	200009c0 	.word	0x200009c0

0800b7b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b088      	sub	sp, #32
 800b7bc:	af02      	add	r7, sp, #8
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7c2:	4b1c      	ldr	r3, [pc, #112]	; (800b834 <prvProcessExpiredTimer+0x7c>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	3304      	adds	r3, #4
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7fe f9e8 	bl	8009ba6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	69db      	ldr	r3, [r3, #28]
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d122      	bne.n	800b824 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	699a      	ldr	r2, [r3, #24]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	18d1      	adds	r1, r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	683a      	ldr	r2, [r7, #0]
 800b7ea:	6978      	ldr	r0, [r7, #20]
 800b7ec:	f000 f8c8 	bl	800b980 <prvInsertTimerInActiveList>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d016      	beq.n	800b824 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	9300      	str	r3, [sp, #0]
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	2100      	movs	r1, #0
 800b800:	6978      	ldr	r0, [r7, #20]
 800b802:	f7ff ff8b 	bl	800b71c <xTimerGenericCommand>
 800b806:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d10a      	bne.n	800b824 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	60fb      	str	r3, [r7, #12]
}
 800b820:	bf00      	nop
 800b822:	e7fe      	b.n	800b822 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b828:	6978      	ldr	r0, [r7, #20]
 800b82a:	4798      	blx	r3
}
 800b82c:	bf00      	nop
 800b82e:	3718      	adds	r7, #24
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	200009b8 	.word	0x200009b8

0800b838 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b840:	f107 0308 	add.w	r3, r7, #8
 800b844:	4618      	mov	r0, r3
 800b846:	f000 f857 	bl	800b8f8 <prvGetNextExpireTime>
 800b84a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	4619      	mov	r1, r3
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f000 f803 	bl	800b85c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b856:	f000 f8d5 	bl	800ba04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b85a:	e7f1      	b.n	800b840 <prvTimerTask+0x8>

0800b85c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b866:	f7ff f9a1 	bl	800abac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b86a:	f107 0308 	add.w	r3, r7, #8
 800b86e:	4618      	mov	r0, r3
 800b870:	f000 f866 	bl	800b940 <prvSampleTimeNow>
 800b874:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d130      	bne.n	800b8de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d10a      	bne.n	800b898 <prvProcessTimerOrBlockTask+0x3c>
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	429a      	cmp	r2, r3
 800b888:	d806      	bhi.n	800b898 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b88a:	f7ff f99d 	bl	800abc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b88e:	68f9      	ldr	r1, [r7, #12]
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f7ff ff91 	bl	800b7b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b896:	e024      	b.n	800b8e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d008      	beq.n	800b8b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b89e:	4b13      	ldr	r3, [pc, #76]	; (800b8ec <prvProcessTimerOrBlockTask+0x90>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	bf0c      	ite	eq
 800b8a8:	2301      	moveq	r3, #1
 800b8aa:	2300      	movne	r3, #0
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b8b0:	4b0f      	ldr	r3, [pc, #60]	; (800b8f0 <prvProcessTimerOrBlockTask+0x94>)
 800b8b2:	6818      	ldr	r0, [r3, #0]
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	4619      	mov	r1, r3
 800b8be:	f7fe ff89 	bl	800a7d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b8c2:	f7ff f981 	bl	800abc8 <xTaskResumeAll>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10a      	bne.n	800b8e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b8cc:	4b09      	ldr	r3, [pc, #36]	; (800b8f4 <prvProcessTimerOrBlockTask+0x98>)
 800b8ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8d2:	601a      	str	r2, [r3, #0]
 800b8d4:	f3bf 8f4f 	dsb	sy
 800b8d8:	f3bf 8f6f 	isb	sy
}
 800b8dc:	e001      	b.n	800b8e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b8de:	f7ff f973 	bl	800abc8 <xTaskResumeAll>
}
 800b8e2:	bf00      	nop
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	200009bc 	.word	0x200009bc
 800b8f0:	200009c0 	.word	0x200009c0
 800b8f4:	e000ed04 	.word	0xe000ed04

0800b8f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b900:	4b0e      	ldr	r3, [pc, #56]	; (800b93c <prvGetNextExpireTime+0x44>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	bf0c      	ite	eq
 800b90a:	2301      	moveq	r3, #1
 800b90c:	2300      	movne	r3, #0
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	461a      	mov	r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d105      	bne.n	800b92a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b91e:	4b07      	ldr	r3, [pc, #28]	; (800b93c <prvGetNextExpireTime+0x44>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	60fb      	str	r3, [r7, #12]
 800b928:	e001      	b.n	800b92e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b92a:	2300      	movs	r3, #0
 800b92c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b92e:	68fb      	ldr	r3, [r7, #12]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3714      	adds	r7, #20
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr
 800b93c:	200009b8 	.word	0x200009b8

0800b940 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b948:	f7ff f9da 	bl	800ad00 <xTaskGetTickCount>
 800b94c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b94e:	4b0b      	ldr	r3, [pc, #44]	; (800b97c <prvSampleTimeNow+0x3c>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	429a      	cmp	r2, r3
 800b956:	d205      	bcs.n	800b964 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b958:	f000 f8e8 	bl	800bb2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2201      	movs	r2, #1
 800b960:	601a      	str	r2, [r3, #0]
 800b962:	e002      	b.n	800b96a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b96a:	4a04      	ldr	r2, [pc, #16]	; (800b97c <prvSampleTimeNow+0x3c>)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b970:	68fb      	ldr	r3, [r7, #12]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	200009c8 	.word	0x200009c8

0800b980 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b086      	sub	sp, #24
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
 800b98c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b98e:	2300      	movs	r3, #0
 800b990:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d812      	bhi.n	800b9cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	1ad2      	subs	r2, r2, r3
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	699b      	ldr	r3, [r3, #24]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d302      	bcc.n	800b9ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	617b      	str	r3, [r7, #20]
 800b9b8:	e01b      	b.n	800b9f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b9ba:	4b10      	ldr	r3, [pc, #64]	; (800b9fc <prvInsertTimerInActiveList+0x7c>)
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	3304      	adds	r3, #4
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	4610      	mov	r0, r2
 800b9c6:	f7fe f8b5 	bl	8009b34 <vListInsert>
 800b9ca:	e012      	b.n	800b9f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d206      	bcs.n	800b9e2 <prvInsertTimerInActiveList+0x62>
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d302      	bcc.n	800b9e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	617b      	str	r3, [r7, #20]
 800b9e0:	e007      	b.n	800b9f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b9e2:	4b07      	ldr	r3, [pc, #28]	; (800ba00 <prvInsertTimerInActiveList+0x80>)
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	3304      	adds	r3, #4
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	4610      	mov	r0, r2
 800b9ee:	f7fe f8a1 	bl	8009b34 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b9f2:	697b      	ldr	r3, [r7, #20]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3718      	adds	r7, #24
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	200009bc 	.word	0x200009bc
 800ba00:	200009b8 	.word	0x200009b8

0800ba04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b08c      	sub	sp, #48	; 0x30
 800ba08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba0a:	e07c      	b.n	800bb06 <prvProcessReceivedCommands+0x102>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	db78      	blt.n	800bb04 <prvProcessReceivedCommands+0x100>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800ba16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba18:	695b      	ldr	r3, [r3, #20]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d004      	beq.n	800ba28 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba20:	3304      	adds	r3, #4
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7fe f8bf 	bl	8009ba6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba28:	1d3b      	adds	r3, r7, #4
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7ff ff88 	bl	800b940 <prvSampleTimeNow>
 800ba30:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	2b09      	cmp	r3, #9
 800ba36:	d866      	bhi.n	800bb06 <prvProcessReceivedCommands+0x102>
 800ba38:	a201      	add	r2, pc, #4	; (adr r2, 800ba40 <prvProcessReceivedCommands+0x3c>)
 800ba3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba3e:	bf00      	nop
 800ba40:	0800ba69 	.word	0x0800ba69
 800ba44:	0800ba69 	.word	0x0800ba69
 800ba48:	0800ba69 	.word	0x0800ba69
 800ba4c:	0800bb07 	.word	0x0800bb07
 800ba50:	0800bac5 	.word	0x0800bac5
 800ba54:	0800bafd 	.word	0x0800bafd
 800ba58:	0800ba69 	.word	0x0800ba69
 800ba5c:	0800ba69 	.word	0x0800ba69
 800ba60:	0800bb07 	.word	0x0800bb07
 800ba64:	0800bac5 	.word	0x0800bac5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6c:	699b      	ldr	r3, [r3, #24]
 800ba6e:	18d1      	adds	r1, r2, r3
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6a3a      	ldr	r2, [r7, #32]
 800ba74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba76:	f7ff ff83 	bl	800b980 <prvInsertTimerInActiveList>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d042      	beq.n	800bb06 <prvProcessReceivedCommands+0x102>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba86:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ba88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8a:	69db      	ldr	r3, [r3, #28]
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d13a      	bne.n	800bb06 <prvProcessReceivedCommands+0x102>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ba90:	68fa      	ldr	r2, [r7, #12]
 800ba92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba94:	699b      	ldr	r3, [r3, #24]
 800ba96:	441a      	add	r2, r3
 800ba98:	2300      	movs	r3, #0
 800ba9a:	9300      	str	r3, [sp, #0]
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	2100      	movs	r1, #0
 800baa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800baa2:	f7ff fe3b 	bl	800b71c <xTimerGenericCommand>
 800baa6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d12b      	bne.n	800bb06 <prvProcessReceivedCommands+0x102>
	__asm volatile
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	61bb      	str	r3, [r7, #24]
}
 800bac0:	bf00      	nop
 800bac2:	e7fe      	b.n	800bac2 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bac4:	68fa      	ldr	r2, [r7, #12]
 800bac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800baca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bacc:	699b      	ldr	r3, [r3, #24]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d10a      	bne.n	800bae8 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800bad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	617b      	str	r3, [r7, #20]
}
 800bae4:	bf00      	nop
 800bae6:	e7fe      	b.n	800bae6 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baea:	699a      	ldr	r2, [r3, #24]
 800baec:	6a3b      	ldr	r3, [r7, #32]
 800baee:	18d1      	adds	r1, r2, r3
 800baf0:	6a3b      	ldr	r3, [r7, #32]
 800baf2:	6a3a      	ldr	r2, [r7, #32]
 800baf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800baf6:	f7ff ff43 	bl	800b980 <prvInsertTimerInActiveList>
					break;
 800bafa:	e004      	b.n	800bb06 <prvProcessReceivedCommands+0x102>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 800bafc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bafe:	f000 fb97 	bl	800c230 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bb02:	e000      	b.n	800bb06 <prvProcessReceivedCommands+0x102>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bb04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb06:	4b08      	ldr	r3, [pc, #32]	; (800bb28 <prvProcessReceivedCommands+0x124>)
 800bb08:	6818      	ldr	r0, [r3, #0]
 800bb0a:	f107 0108 	add.w	r1, r7, #8
 800bb0e:	2300      	movs	r3, #0
 800bb10:	2200      	movs	r2, #0
 800bb12:	f7fe fb8f 	bl	800a234 <xQueueGenericReceive>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	f47f af77 	bne.w	800ba0c <prvProcessReceivedCommands+0x8>
	}
}
 800bb1e:	bf00      	nop
 800bb20:	bf00      	nop
 800bb22:	3728      	adds	r7, #40	; 0x28
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	200009c0 	.word	0x200009c0

0800bb2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b088      	sub	sp, #32
 800bb30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb32:	e045      	b.n	800bbc0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb34:	4b2c      	ldr	r3, [pc, #176]	; (800bbe8 <prvSwitchTimerLists+0xbc>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb3e:	4b2a      	ldr	r3, [pc, #168]	; (800bbe8 <prvSwitchTimerLists+0xbc>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fe f82a 	bl	8009ba6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	69db      	ldr	r3, [r3, #28]
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d12e      	bne.n	800bbc0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	699b      	ldr	r3, [r3, #24]
 800bb66:	693a      	ldr	r2, [r7, #16]
 800bb68:	4413      	add	r3, r2
 800bb6a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bb6c:	68ba      	ldr	r2, [r7, #8]
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d90e      	bls.n	800bb92 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	68ba      	ldr	r2, [r7, #8]
 800bb78:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb80:	4b19      	ldr	r3, [pc, #100]	; (800bbe8 <prvSwitchTimerLists+0xbc>)
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	3304      	adds	r3, #4
 800bb88:	4619      	mov	r1, r3
 800bb8a:	4610      	mov	r0, r2
 800bb8c:	f7fd ffd2 	bl	8009b34 <vListInsert>
 800bb90:	e016      	b.n	800bbc0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb92:	2300      	movs	r3, #0
 800bb94:	9300      	str	r3, [sp, #0]
 800bb96:	2300      	movs	r3, #0
 800bb98:	693a      	ldr	r2, [r7, #16]
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f7ff fdbd 	bl	800b71c <xTimerGenericCommand>
 800bba2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d10a      	bne.n	800bbc0 <prvSwitchTimerLists+0x94>
	__asm volatile
 800bbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbae:	f383 8811 	msr	BASEPRI, r3
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	f3bf 8f4f 	dsb	sy
 800bbba:	603b      	str	r3, [r7, #0]
}
 800bbbc:	bf00      	nop
 800bbbe:	e7fe      	b.n	800bbbe <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bbc0:	4b09      	ldr	r3, [pc, #36]	; (800bbe8 <prvSwitchTimerLists+0xbc>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d1b4      	bne.n	800bb34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bbca:	4b07      	ldr	r3, [pc, #28]	; (800bbe8 <prvSwitchTimerLists+0xbc>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bbd0:	4b06      	ldr	r3, [pc, #24]	; (800bbec <prvSwitchTimerLists+0xc0>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a04      	ldr	r2, [pc, #16]	; (800bbe8 <prvSwitchTimerLists+0xbc>)
 800bbd6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bbd8:	4a04      	ldr	r2, [pc, #16]	; (800bbec <prvSwitchTimerLists+0xc0>)
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	6013      	str	r3, [r2, #0]
}
 800bbde:	bf00      	nop
 800bbe0:	3718      	adds	r7, #24
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	200009b8 	.word	0x200009b8
 800bbec:	200009bc 	.word	0x200009bc

0800bbf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bbf4:	f000 f93e 	bl	800be74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bbf8:	4b12      	ldr	r3, [pc, #72]	; (800bc44 <prvCheckForValidListAndQueue+0x54>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d11d      	bne.n	800bc3c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800bc00:	4811      	ldr	r0, [pc, #68]	; (800bc48 <prvCheckForValidListAndQueue+0x58>)
 800bc02:	f7fd ff46 	bl	8009a92 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bc06:	4811      	ldr	r0, [pc, #68]	; (800bc4c <prvCheckForValidListAndQueue+0x5c>)
 800bc08:	f7fd ff43 	bl	8009a92 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bc0c:	4b10      	ldr	r3, [pc, #64]	; (800bc50 <prvCheckForValidListAndQueue+0x60>)
 800bc0e:	4a0e      	ldr	r2, [pc, #56]	; (800bc48 <prvCheckForValidListAndQueue+0x58>)
 800bc10:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bc12:	4b10      	ldr	r3, [pc, #64]	; (800bc54 <prvCheckForValidListAndQueue+0x64>)
 800bc14:	4a0d      	ldr	r2, [pc, #52]	; (800bc4c <prvCheckForValidListAndQueue+0x5c>)
 800bc16:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800bc18:	2200      	movs	r2, #0
 800bc1a:	210c      	movs	r1, #12
 800bc1c:	200a      	movs	r0, #10
 800bc1e:	f7fe f855 	bl	8009ccc <xQueueGenericCreate>
 800bc22:	4603      	mov	r3, r0
 800bc24:	4a07      	ldr	r2, [pc, #28]	; (800bc44 <prvCheckForValidListAndQueue+0x54>)
 800bc26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bc28:	4b06      	ldr	r3, [pc, #24]	; (800bc44 <prvCheckForValidListAndQueue+0x54>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d005      	beq.n	800bc3c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bc30:	4b04      	ldr	r3, [pc, #16]	; (800bc44 <prvCheckForValidListAndQueue+0x54>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4908      	ldr	r1, [pc, #32]	; (800bc58 <prvCheckForValidListAndQueue+0x68>)
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fe fda2 	bl	800a780 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc3c:	f000 f94a 	bl	800bed4 <vPortExitCritical>
}
 800bc40:	bf00      	nop
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	200009c0 	.word	0x200009c0
 800bc48:	20000990 	.word	0x20000990
 800bc4c:	200009a4 	.word	0x200009a4
 800bc50:	200009b8 	.word	0x200009b8
 800bc54:	200009bc 	.word	0x200009bc
 800bc58:	0800f584 	.word	0x0800f584

0800bc5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	3b04      	subs	r3, #4
 800bc6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bc74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	3b04      	subs	r3, #4
 800bc7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	f023 0201 	bic.w	r2, r3, #1
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	3b04      	subs	r3, #4
 800bc8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bc8c:	4a0c      	ldr	r2, [pc, #48]	; (800bcc0 <pxPortInitialiseStack+0x64>)
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	3b14      	subs	r3, #20
 800bc96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	3b04      	subs	r3, #4
 800bca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f06f 0202 	mvn.w	r2, #2
 800bcaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	3b20      	subs	r3, #32
 800bcb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3714      	adds	r7, #20
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr
 800bcc0:	0800bcc5 	.word	0x0800bcc5

0800bcc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bcca:	4b0d      	ldr	r3, [pc, #52]	; (800bd00 <prvTaskExitError+0x3c>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd2:	d00a      	beq.n	800bcea <prvTaskExitError+0x26>
	__asm volatile
 800bcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd8:	f383 8811 	msr	BASEPRI, r3
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	607b      	str	r3, [r7, #4]
}
 800bce6:	bf00      	nop
 800bce8:	e7fe      	b.n	800bce8 <prvTaskExitError+0x24>
	__asm volatile
 800bcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcee:	f383 8811 	msr	BASEPRI, r3
 800bcf2:	f3bf 8f6f 	isb	sy
 800bcf6:	f3bf 8f4f 	dsb	sy
 800bcfa:	603b      	str	r3, [r7, #0]
}
 800bcfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	for( ;; );
 800bcfe:	e7fe      	b.n	800bcfe <prvTaskExitError+0x3a>
 800bd00:	20000018 	.word	0x20000018
	...

0800bd10 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bd10:	4b07      	ldr	r3, [pc, #28]	; (800bd30 <pxCurrentTCBConst2>)
 800bd12:	6819      	ldr	r1, [r3, #0]
 800bd14:	6808      	ldr	r0, [r1, #0]
 800bd16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd1a:	f380 8809 	msr	PSP, r0
 800bd1e:	f3bf 8f6f 	isb	sy
 800bd22:	f04f 0000 	mov.w	r0, #0
 800bd26:	f380 8811 	msr	BASEPRI, r0
 800bd2a:	4770      	bx	lr
 800bd2c:	f3af 8000 	nop.w

0800bd30 <pxCurrentTCBConst2>:
 800bd30:	20000864 	.word	0x20000864
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bd34:	bf00      	nop
 800bd36:	bf00      	nop

0800bd38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800bd38:	4806      	ldr	r0, [pc, #24]	; (800bd54 <prvPortStartFirstTask+0x1c>)
 800bd3a:	6800      	ldr	r0, [r0, #0]
 800bd3c:	6800      	ldr	r0, [r0, #0]
 800bd3e:	f380 8808 	msr	MSP, r0
 800bd42:	b662      	cpsie	i
 800bd44:	b661      	cpsie	f
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	f3bf 8f6f 	isb	sy
 800bd4e:	df00      	svc	0
 800bd50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bd52:	bf00      	nop
 800bd54:	e000ed08 	.word	0xe000ed08

0800bd58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b086      	sub	sp, #24
 800bd5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bd5e:	4b3c      	ldr	r3, [pc, #240]	; (800be50 <xPortStartScheduler+0xf8>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a3c      	ldr	r2, [pc, #240]	; (800be54 <xPortStartScheduler+0xfc>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d10a      	bne.n	800bd7e <xPortStartScheduler+0x26>
	__asm volatile
 800bd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6c:	f383 8811 	msr	BASEPRI, r3
 800bd70:	f3bf 8f6f 	isb	sy
 800bd74:	f3bf 8f4f 	dsb	sy
 800bd78:	613b      	str	r3, [r7, #16]
}
 800bd7a:	bf00      	nop
 800bd7c:	e7fe      	b.n	800bd7c <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bd7e:	4b34      	ldr	r3, [pc, #208]	; (800be50 <xPortStartScheduler+0xf8>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a35      	ldr	r2, [pc, #212]	; (800be58 <xPortStartScheduler+0x100>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d10a      	bne.n	800bd9e <xPortStartScheduler+0x46>
	__asm volatile
 800bd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8c:	f383 8811 	msr	BASEPRI, r3
 800bd90:	f3bf 8f6f 	isb	sy
 800bd94:	f3bf 8f4f 	dsb	sy
 800bd98:	60fb      	str	r3, [r7, #12]
}
 800bd9a:	bf00      	nop
 800bd9c:	e7fe      	b.n	800bd9c <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd9e:	4b2f      	ldr	r3, [pc, #188]	; (800be5c <xPortStartScheduler+0x104>)
 800bda0:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	b2db      	uxtb	r3, r3
 800bda8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	22ff      	movs	r2, #255	; 0xff
 800bdae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bdb8:	79fb      	ldrb	r3, [r7, #7]
 800bdba:	b2db      	uxtb	r3, r3
 800bdbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bdc0:	b2da      	uxtb	r2, r3
 800bdc2:	4b27      	ldr	r3, [pc, #156]	; (800be60 <xPortStartScheduler+0x108>)
 800bdc4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bdc6:	4b27      	ldr	r3, [pc, #156]	; (800be64 <xPortStartScheduler+0x10c>)
 800bdc8:	2207      	movs	r2, #7
 800bdca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bdcc:	e009      	b.n	800bde2 <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bdce:	4b25      	ldr	r3, [pc, #148]	; (800be64 <xPortStartScheduler+0x10c>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	4a23      	ldr	r2, [pc, #140]	; (800be64 <xPortStartScheduler+0x10c>)
 800bdd6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bdd8:	79fb      	ldrb	r3, [r7, #7]
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	005b      	lsls	r3, r3, #1
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bde2:	79fb      	ldrb	r3, [r7, #7]
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdea:	2b80      	cmp	r3, #128	; 0x80
 800bdec:	d0ef      	beq.n	800bdce <xPortStartScheduler+0x76>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bdee:	4b1d      	ldr	r3, [pc, #116]	; (800be64 <xPortStartScheduler+0x10c>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	021b      	lsls	r3, r3, #8
 800bdf4:	4a1b      	ldr	r2, [pc, #108]	; (800be64 <xPortStartScheduler+0x10c>)
 800bdf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bdf8:	4b1a      	ldr	r3, [pc, #104]	; (800be64 <xPortStartScheduler+0x10c>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be00:	4a18      	ldr	r2, [pc, #96]	; (800be64 <xPortStartScheduler+0x10c>)
 800be02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	b2da      	uxtb	r2, r3
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800be0c:	4b16      	ldr	r3, [pc, #88]	; (800be68 <xPortStartScheduler+0x110>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a15      	ldr	r2, [pc, #84]	; (800be68 <xPortStartScheduler+0x110>)
 800be12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800be16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800be18:	4b13      	ldr	r3, [pc, #76]	; (800be68 <xPortStartScheduler+0x110>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a12      	ldr	r2, [pc, #72]	; (800be68 <xPortStartScheduler+0x110>)
 800be1e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800be22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800be24:	f000 f8da 	bl	800bfdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800be28:	4b10      	ldr	r3, [pc, #64]	; (800be6c <xPortStartScheduler+0x114>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800be2e:	f000 f8f1 	bl	800c014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800be32:	4b0f      	ldr	r3, [pc, #60]	; (800be70 <xPortStartScheduler+0x118>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4a0e      	ldr	r2, [pc, #56]	; (800be70 <xPortStartScheduler+0x118>)
 800be38:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800be3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800be3e:	f7ff ff7b 	bl	800bd38 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800be42:	f7ff ff3f 	bl	800bcc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800be46:	2300      	movs	r3, #0
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3718      	adds	r7, #24
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}
 800be50:	e000ed00 	.word	0xe000ed00
 800be54:	410fc271 	.word	0x410fc271
 800be58:	410fc270 	.word	0x410fc270
 800be5c:	e000e400 	.word	0xe000e400
 800be60:	200009cc 	.word	0x200009cc
 800be64:	200009d0 	.word	0x200009d0
 800be68:	e000ed20 	.word	0xe000ed20
 800be6c:	20000018 	.word	0x20000018
 800be70:	e000ef34 	.word	0xe000ef34

0800be74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
	__asm volatile
 800be7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be7e:	f383 8811 	msr	BASEPRI, r3
 800be82:	f3bf 8f6f 	isb	sy
 800be86:	f3bf 8f4f 	dsb	sy
 800be8a:	607b      	str	r3, [r7, #4]
}
 800be8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be8e:	4b0f      	ldr	r3, [pc, #60]	; (800becc <vPortEnterCritical+0x58>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	3301      	adds	r3, #1
 800be94:	4a0d      	ldr	r2, [pc, #52]	; (800becc <vPortEnterCritical+0x58>)
 800be96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be98:	4b0c      	ldr	r3, [pc, #48]	; (800becc <vPortEnterCritical+0x58>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d10f      	bne.n	800bec0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bea0:	4b0b      	ldr	r3, [pc, #44]	; (800bed0 <vPortEnterCritical+0x5c>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d00a      	beq.n	800bec0 <vPortEnterCritical+0x4c>
	__asm volatile
 800beaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beae:	f383 8811 	msr	BASEPRI, r3
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	f3bf 8f4f 	dsb	sy
 800beba:	603b      	str	r3, [r7, #0]
}
 800bebc:	bf00      	nop
 800bebe:	e7fe      	b.n	800bebe <vPortEnterCritical+0x4a>
	}
}
 800bec0:	bf00      	nop
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr
 800becc:	20000018 	.word	0x20000018
 800bed0:	e000ed04 	.word	0xe000ed04

0800bed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800beda:	4b12      	ldr	r3, [pc, #72]	; (800bf24 <vPortExitCritical+0x50>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d10a      	bne.n	800bef8 <vPortExitCritical+0x24>
	__asm volatile
 800bee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee6:	f383 8811 	msr	BASEPRI, r3
 800beea:	f3bf 8f6f 	isb	sy
 800beee:	f3bf 8f4f 	dsb	sy
 800bef2:	607b      	str	r3, [r7, #4]
}
 800bef4:	bf00      	nop
 800bef6:	e7fe      	b.n	800bef6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bef8:	4b0a      	ldr	r3, [pc, #40]	; (800bf24 <vPortExitCritical+0x50>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	3b01      	subs	r3, #1
 800befe:	4a09      	ldr	r2, [pc, #36]	; (800bf24 <vPortExitCritical+0x50>)
 800bf00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf02:	4b08      	ldr	r3, [pc, #32]	; (800bf24 <vPortExitCritical+0x50>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d105      	bne.n	800bf16 <vPortExitCritical+0x42>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	f383 8811 	msr	BASEPRI, r3
}
 800bf14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bf16:	bf00      	nop
 800bf18:	370c      	adds	r7, #12
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	20000018 	.word	0x20000018
	...

0800bf30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bf30:	f3ef 8009 	mrs	r0, PSP
 800bf34:	f3bf 8f6f 	isb	sy
 800bf38:	4b15      	ldr	r3, [pc, #84]	; (800bf90 <pxCurrentTCBConst>)
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	f01e 0f10 	tst.w	lr, #16
 800bf40:	bf08      	it	eq
 800bf42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bf46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf4a:	6010      	str	r0, [r2, #0]
 800bf4c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 800bf50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bf54:	f380 8811 	msr	BASEPRI, r0
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	f7fe ffae 	bl	800aec0 <vTaskSwitchContext>
 800bf64:	f04f 0000 	mov.w	r0, #0
 800bf68:	f380 8811 	msr	BASEPRI, r0
 800bf6c:	bc08      	pop	{r3}
 800bf6e:	6819      	ldr	r1, [r3, #0]
 800bf70:	6808      	ldr	r0, [r1, #0]
 800bf72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf76:	f01e 0f10 	tst.w	lr, #16
 800bf7a:	bf08      	it	eq
 800bf7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf80:	f380 8809 	msr	PSP, r0
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	f3af 8000 	nop.w

0800bf90 <pxCurrentTCBConst>:
 800bf90:	20000864 	.word	0x20000864
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf94:	bf00      	nop
 800bf96:	bf00      	nop

0800bf98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa2:	f383 8811 	msr	BASEPRI, r3
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	f3bf 8f4f 	dsb	sy
 800bfae:	607b      	str	r3, [r7, #4]
}
 800bfb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bfb2:	f7fe fec7 	bl	800ad44 <xTaskIncrementTick>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d003      	beq.n	800bfc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bfbc:	4b06      	ldr	r3, [pc, #24]	; (800bfd8 <xPortSysTickHandler+0x40>)
 800bfbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfc2:	601a      	str	r2, [r3, #0]
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	f383 8811 	msr	BASEPRI, r3
}
 800bfce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bfd0:	bf00      	nop
 800bfd2:	3708      	adds	r7, #8
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	e000ed04 	.word	0xe000ed04

0800bfdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bfdc:	b480      	push	{r7}
 800bfde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bfe0:	4b08      	ldr	r3, [pc, #32]	; (800c004 <vPortSetupTimerInterrupt+0x28>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a08      	ldr	r2, [pc, #32]	; (800c008 <vPortSetupTimerInterrupt+0x2c>)
 800bfe6:	fba2 2303 	umull	r2, r3, r2, r3
 800bfea:	099b      	lsrs	r3, r3, #6
 800bfec:	4a07      	ldr	r2, [pc, #28]	; (800c00c <vPortSetupTimerInterrupt+0x30>)
 800bfee:	3b01      	subs	r3, #1
 800bff0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bff2:	4b07      	ldr	r3, [pc, #28]	; (800c010 <vPortSetupTimerInterrupt+0x34>)
 800bff4:	2207      	movs	r2, #7
 800bff6:	601a      	str	r2, [r3, #0]
}
 800bff8:	bf00      	nop
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
 800c002:	bf00      	nop
 800c004:	20000014 	.word	0x20000014
 800c008:	10624dd3 	.word	0x10624dd3
 800c00c:	e000e014 	.word	0xe000e014
 800c010:	e000e010 	.word	0xe000e010

0800c014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c014:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c024 <vPortEnableVFP+0x10>
 800c018:	6801      	ldr	r1, [r0, #0]
 800c01a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c01e:	6001      	str	r1, [r0, #0]
 800c020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c022:	bf00      	nop
 800c024:	e000ed88 	.word	0xe000ed88

0800c028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c028:	b480      	push	{r7}
 800c02a:	b085      	sub	sp, #20
 800c02c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800c02e:	f3ef 8305 	mrs	r3, IPSR
 800c032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2b0f      	cmp	r3, #15
 800c038:	d914      	bls.n	800c064 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c03a:	4a17      	ldr	r2, [pc, #92]	; (800c098 <vPortValidateInterruptPriority+0x70>)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	4413      	add	r3, r2
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c044:	4b15      	ldr	r3, [pc, #84]	; (800c09c <vPortValidateInterruptPriority+0x74>)
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	7afa      	ldrb	r2, [r7, #11]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d20a      	bcs.n	800c064 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c052:	f383 8811 	msr	BASEPRI, r3
 800c056:	f3bf 8f6f 	isb	sy
 800c05a:	f3bf 8f4f 	dsb	sy
 800c05e:	607b      	str	r3, [r7, #4]
}
 800c060:	bf00      	nop
 800c062:	e7fe      	b.n	800c062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c064:	4b0e      	ldr	r3, [pc, #56]	; (800c0a0 <vPortValidateInterruptPriority+0x78>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c06c:	4b0d      	ldr	r3, [pc, #52]	; (800c0a4 <vPortValidateInterruptPriority+0x7c>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	429a      	cmp	r2, r3
 800c072:	d90a      	bls.n	800c08a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c078:	f383 8811 	msr	BASEPRI, r3
 800c07c:	f3bf 8f6f 	isb	sy
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	603b      	str	r3, [r7, #0]
}
 800c086:	bf00      	nop
 800c088:	e7fe      	b.n	800c088 <vPortValidateInterruptPriority+0x60>
	}
 800c08a:	bf00      	nop
 800c08c:	3714      	adds	r7, #20
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop
 800c098:	e000e3f0 	.word	0xe000e3f0
 800c09c:	200009cc 	.word	0x200009cc
 800c0a0:	e000ed0c 	.word	0xe000ed0c
 800c0a4:	200009d0 	.word	0x200009d0

0800c0a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b08a      	sub	sp, #40	; 0x28
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c0b4:	f7fe fd7a 	bl	800abac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c0b8:	4b58      	ldr	r3, [pc, #352]	; (800c21c <pvPortMalloc+0x174>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d101      	bne.n	800c0c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c0c0:	f000 f910 	bl	800c2e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c0c4:	4b56      	ldr	r3, [pc, #344]	; (800c220 <pvPortMalloc+0x178>)
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	4013      	ands	r3, r2
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	f040 808e 	bne.w	800c1ee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d01d      	beq.n	800c114 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c0d8:	2208      	movs	r2, #8
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	4413      	add	r3, r2
 800c0de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f003 0307 	and.w	r3, r3, #7
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d014      	beq.n	800c114 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f023 0307 	bic.w	r3, r3, #7
 800c0f0:	3308      	adds	r3, #8
 800c0f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f003 0307 	and.w	r3, r3, #7
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00a      	beq.n	800c114 <pvPortMalloc+0x6c>
	__asm volatile
 800c0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c102:	f383 8811 	msr	BASEPRI, r3
 800c106:	f3bf 8f6f 	isb	sy
 800c10a:	f3bf 8f4f 	dsb	sy
 800c10e:	617b      	str	r3, [r7, #20]
}
 800c110:	bf00      	nop
 800c112:	e7fe      	b.n	800c112 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d069      	beq.n	800c1ee <pvPortMalloc+0x146>
 800c11a:	4b42      	ldr	r3, [pc, #264]	; (800c224 <pvPortMalloc+0x17c>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	429a      	cmp	r2, r3
 800c122:	d864      	bhi.n	800c1ee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c124:	4b40      	ldr	r3, [pc, #256]	; (800c228 <pvPortMalloc+0x180>)
 800c126:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c128:	4b3f      	ldr	r3, [pc, #252]	; (800c228 <pvPortMalloc+0x180>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c12e:	e004      	b.n	800c13a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c132:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	429a      	cmp	r2, r3
 800c142:	d903      	bls.n	800c14c <pvPortMalloc+0xa4>
 800c144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d1f1      	bne.n	800c130 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c14c:	4b33      	ldr	r3, [pc, #204]	; (800c21c <pvPortMalloc+0x174>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c152:	429a      	cmp	r2, r3
 800c154:	d04b      	beq.n	800c1ee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c156:	6a3b      	ldr	r3, [r7, #32]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	2208      	movs	r2, #8
 800c15c:	4413      	add	r3, r2
 800c15e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c162:	681a      	ldr	r2, [r3, #0]
 800c164:	6a3b      	ldr	r3, [r7, #32]
 800c166:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16a:	685a      	ldr	r2, [r3, #4]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	1ad2      	subs	r2, r2, r3
 800c170:	2308      	movs	r3, #8
 800c172:	005b      	lsls	r3, r3, #1
 800c174:	429a      	cmp	r2, r3
 800c176:	d91f      	bls.n	800c1b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4413      	add	r3, r2
 800c17e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	f003 0307 	and.w	r3, r3, #7
 800c186:	2b00      	cmp	r3, #0
 800c188:	d00a      	beq.n	800c1a0 <pvPortMalloc+0xf8>
	__asm volatile
 800c18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18e:	f383 8811 	msr	BASEPRI, r3
 800c192:	f3bf 8f6f 	isb	sy
 800c196:	f3bf 8f4f 	dsb	sy
 800c19a:	613b      	str	r3, [r7, #16]
}
 800c19c:	bf00      	nop
 800c19e:	e7fe      	b.n	800c19e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a2:	685a      	ldr	r2, [r3, #4]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	1ad2      	subs	r2, r2, r3
 800c1a8:	69bb      	ldr	r3, [r7, #24]
 800c1aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c1b2:	69b8      	ldr	r0, [r7, #24]
 800c1b4:	f000 f8f8 	bl	800c3a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c1b8:	4b1a      	ldr	r3, [pc, #104]	; (800c224 <pvPortMalloc+0x17c>)
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	1ad3      	subs	r3, r2, r3
 800c1c2:	4a18      	ldr	r2, [pc, #96]	; (800c224 <pvPortMalloc+0x17c>)
 800c1c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c1c6:	4b17      	ldr	r3, [pc, #92]	; (800c224 <pvPortMalloc+0x17c>)
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	4b18      	ldr	r3, [pc, #96]	; (800c22c <pvPortMalloc+0x184>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d203      	bcs.n	800c1da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c1d2:	4b14      	ldr	r3, [pc, #80]	; (800c224 <pvPortMalloc+0x17c>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4a15      	ldr	r2, [pc, #84]	; (800c22c <pvPortMalloc+0x184>)
 800c1d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1dc:	685a      	ldr	r2, [r3, #4]
 800c1de:	4b10      	ldr	r3, [pc, #64]	; (800c220 <pvPortMalloc+0x178>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	431a      	orrs	r2, r3
 800c1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c1ee:	f7fe fceb 	bl	800abc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1f2:	69fb      	ldr	r3, [r7, #28]
 800c1f4:	f003 0307 	and.w	r3, r3, #7
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d00a      	beq.n	800c212 <pvPortMalloc+0x16a>
	__asm volatile
 800c1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c200:	f383 8811 	msr	BASEPRI, r3
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	60fb      	str	r3, [r7, #12]
}
 800c20e:	bf00      	nop
 800c210:	e7fe      	b.n	800c210 <pvPortMalloc+0x168>
	return pvReturn;
 800c212:	69fb      	ldr	r3, [r7, #28]
}
 800c214:	4618      	mov	r0, r3
 800c216:	3728      	adds	r7, #40	; 0x28
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	200081dc 	.word	0x200081dc
 800c220:	200081e8 	.word	0x200081e8
 800c224:	200081e0 	.word	0x200081e0
 800c228:	200081d4 	.word	0x200081d4
 800c22c:	200081e4 	.word	0x200081e4

0800c230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b086      	sub	sp, #24
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d048      	beq.n	800c2d4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c242:	2308      	movs	r3, #8
 800c244:	425b      	negs	r3, r3
 800c246:	697a      	ldr	r2, [r7, #20]
 800c248:	4413      	add	r3, r2
 800c24a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	685a      	ldr	r2, [r3, #4]
 800c254:	4b21      	ldr	r3, [pc, #132]	; (800c2dc <vPortFree+0xac>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4013      	ands	r3, r2
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d10a      	bne.n	800c274 <vPortFree+0x44>
	__asm volatile
 800c25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c262:	f383 8811 	msr	BASEPRI, r3
 800c266:	f3bf 8f6f 	isb	sy
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	60fb      	str	r3, [r7, #12]
}
 800c270:	bf00      	nop
 800c272:	e7fe      	b.n	800c272 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d00a      	beq.n	800c292 <vPortFree+0x62>
	__asm volatile
 800c27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c280:	f383 8811 	msr	BASEPRI, r3
 800c284:	f3bf 8f6f 	isb	sy
 800c288:	f3bf 8f4f 	dsb	sy
 800c28c:	60bb      	str	r3, [r7, #8]
}
 800c28e:	bf00      	nop
 800c290:	e7fe      	b.n	800c290 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	685a      	ldr	r2, [r3, #4]
 800c296:	4b11      	ldr	r3, [pc, #68]	; (800c2dc <vPortFree+0xac>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4013      	ands	r3, r2
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d019      	beq.n	800c2d4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d115      	bne.n	800c2d4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	685a      	ldr	r2, [r3, #4]
 800c2ac:	4b0b      	ldr	r3, [pc, #44]	; (800c2dc <vPortFree+0xac>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	43db      	mvns	r3, r3
 800c2b2:	401a      	ands	r2, r3
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c2b8:	f7fe fc78 	bl	800abac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	685a      	ldr	r2, [r3, #4]
 800c2c0:	4b07      	ldr	r3, [pc, #28]	; (800c2e0 <vPortFree+0xb0>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4413      	add	r3, r2
 800c2c6:	4a06      	ldr	r2, [pc, #24]	; (800c2e0 <vPortFree+0xb0>)
 800c2c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c2ca:	6938      	ldr	r0, [r7, #16]
 800c2cc:	f000 f86c 	bl	800c3a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c2d0:	f7fe fc7a 	bl	800abc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c2d4:	bf00      	nop
 800c2d6:	3718      	adds	r7, #24
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	200081e8 	.word	0x200081e8
 800c2e0:	200081e0 	.word	0x200081e0

0800c2e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c2ea:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800c2ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c2f0:	4b27      	ldr	r3, [pc, #156]	; (800c390 <prvHeapInit+0xac>)
 800c2f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f003 0307 	and.w	r3, r3, #7
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00c      	beq.n	800c318 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	3307      	adds	r3, #7
 800c302:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f023 0307 	bic.w	r3, r3, #7
 800c30a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c30c:	68ba      	ldr	r2, [r7, #8]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	1ad3      	subs	r3, r2, r3
 800c312:	4a1f      	ldr	r2, [pc, #124]	; (800c390 <prvHeapInit+0xac>)
 800c314:	4413      	add	r3, r2
 800c316:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c31c:	4a1d      	ldr	r2, [pc, #116]	; (800c394 <prvHeapInit+0xb0>)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c322:	4b1c      	ldr	r3, [pc, #112]	; (800c394 <prvHeapInit+0xb0>)
 800c324:	2200      	movs	r2, #0
 800c326:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	68ba      	ldr	r2, [r7, #8]
 800c32c:	4413      	add	r3, r2
 800c32e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c330:	2208      	movs	r2, #8
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	1a9b      	subs	r3, r3, r2
 800c336:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f023 0307 	bic.w	r3, r3, #7
 800c33e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	4a15      	ldr	r2, [pc, #84]	; (800c398 <prvHeapInit+0xb4>)
 800c344:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c346:	4b14      	ldr	r3, [pc, #80]	; (800c398 <prvHeapInit+0xb4>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2200      	movs	r2, #0
 800c34c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c34e:	4b12      	ldr	r3, [pc, #72]	; (800c398 <prvHeapInit+0xb4>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2200      	movs	r2, #0
 800c354:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	68fa      	ldr	r2, [r7, #12]
 800c35e:	1ad2      	subs	r2, r2, r3
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c364:	4b0c      	ldr	r3, [pc, #48]	; (800c398 <prvHeapInit+0xb4>)
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	4a0a      	ldr	r2, [pc, #40]	; (800c39c <prvHeapInit+0xb8>)
 800c372:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	4a09      	ldr	r2, [pc, #36]	; (800c3a0 <prvHeapInit+0xbc>)
 800c37a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c37c:	4b09      	ldr	r3, [pc, #36]	; (800c3a4 <prvHeapInit+0xc0>)
 800c37e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c382:	601a      	str	r2, [r3, #0]
}
 800c384:	bf00      	nop
 800c386:	3714      	adds	r7, #20
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr
 800c390:	200009d4 	.word	0x200009d4
 800c394:	200081d4 	.word	0x200081d4
 800c398:	200081dc 	.word	0x200081dc
 800c39c:	200081e4 	.word	0x200081e4
 800c3a0:	200081e0 	.word	0x200081e0
 800c3a4:	200081e8 	.word	0x200081e8

0800c3a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c3b0:	4b28      	ldr	r3, [pc, #160]	; (800c454 <prvInsertBlockIntoFreeList+0xac>)
 800c3b2:	60fb      	str	r3, [r7, #12]
 800c3b4:	e002      	b.n	800c3bc <prvInsertBlockIntoFreeList+0x14>
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	60fb      	str	r3, [r7, #12]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d8f7      	bhi.n	800c3b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	68ba      	ldr	r2, [r7, #8]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d108      	bne.n	800c3ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	685a      	ldr	r2, [r3, #4]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	441a      	add	r2, r3
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	68ba      	ldr	r2, [r7, #8]
 800c3f4:	441a      	add	r2, r3
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d118      	bne.n	800c430 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	4b15      	ldr	r3, [pc, #84]	; (800c458 <prvInsertBlockIntoFreeList+0xb0>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	429a      	cmp	r2, r3
 800c408:	d00d      	beq.n	800c426 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	685a      	ldr	r2, [r3, #4]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	441a      	add	r2, r3
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	601a      	str	r2, [r3, #0]
 800c424:	e008      	b.n	800c438 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c426:	4b0c      	ldr	r3, [pc, #48]	; (800c458 <prvInsertBlockIntoFreeList+0xb0>)
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	601a      	str	r2, [r3, #0]
 800c42e:	e003      	b.n	800c438 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d002      	beq.n	800c446 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c446:	bf00      	nop
 800c448:	3714      	adds	r7, #20
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr
 800c452:	bf00      	nop
 800c454:	200081d4 	.word	0x200081d4
 800c458:	200081dc 	.word	0x200081dc

0800c45c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800c45c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c494 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c460:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c462:	e003      	b.n	800c46c <LoopCopyDataInit>

0800c464 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c464:	4b0c      	ldr	r3, [pc, #48]	; (800c498 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c466:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c468:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c46a:	3104      	adds	r1, #4

0800c46c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c46c:	480b      	ldr	r0, [pc, #44]	; (800c49c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c46e:	4b0c      	ldr	r3, [pc, #48]	; (800c4a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c470:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c472:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c474:	d3f6      	bcc.n	800c464 <CopyDataInit>
  ldr  r2, =_sbss
 800c476:	4a0b      	ldr	r2, [pc, #44]	; (800c4a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c478:	e002      	b.n	800c480 <LoopFillZerobss>

0800c47a <FillZerobss>:

/* Zero fill the bss segment. */  
 FillZerobss:
  movs  r3, #0
 800c47a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c47c:	f842 3b04 	str.w	r3, [r2], #4

0800c480 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c480:	4b09      	ldr	r3, [pc, #36]	; (800c4a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c482:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c484:	d3f9      	bcc.n	800c47a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c486:	f7fd f94d 	bl	8009724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c48a:	f000 f817 	bl	800c4bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c48e:	f7f6 fc4f 	bl	8002d30 <main>
  bx  lr    
 800c492:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800c494:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800c498:	0800f96c 	.word	0x0800f96c
  ldr  r0, =_sdata
 800c49c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c4a0:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 800c4a4:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 800c4a8:	20008200 	.word	0x20008200

0800c4ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c4ac:	e7fe      	b.n	800c4ac <ADC_IRQHandler>
	...

0800c4b0 <__errno>:
 800c4b0:	4b01      	ldr	r3, [pc, #4]	; (800c4b8 <__errno+0x8>)
 800c4b2:	6818      	ldr	r0, [r3, #0]
 800c4b4:	4770      	bx	lr
 800c4b6:	bf00      	nop
 800c4b8:	2000001c 	.word	0x2000001c

0800c4bc <__libc_init_array>:
 800c4bc:	b570      	push	{r4, r5, r6, lr}
 800c4be:	4d0d      	ldr	r5, [pc, #52]	; (800c4f4 <__libc_init_array+0x38>)
 800c4c0:	4c0d      	ldr	r4, [pc, #52]	; (800c4f8 <__libc_init_array+0x3c>)
 800c4c2:	1b64      	subs	r4, r4, r5
 800c4c4:	10a4      	asrs	r4, r4, #2
 800c4c6:	2600      	movs	r6, #0
 800c4c8:	42a6      	cmp	r6, r4
 800c4ca:	d109      	bne.n	800c4e0 <__libc_init_array+0x24>
 800c4cc:	4d0b      	ldr	r5, [pc, #44]	; (800c4fc <__libc_init_array+0x40>)
 800c4ce:	4c0c      	ldr	r4, [pc, #48]	; (800c500 <__libc_init_array+0x44>)
 800c4d0:	f002 ff6e 	bl	800f3b0 <_init>
 800c4d4:	1b64      	subs	r4, r4, r5
 800c4d6:	10a4      	asrs	r4, r4, #2
 800c4d8:	2600      	movs	r6, #0
 800c4da:	42a6      	cmp	r6, r4
 800c4dc:	d105      	bne.n	800c4ea <__libc_init_array+0x2e>
 800c4de:	bd70      	pop	{r4, r5, r6, pc}
 800c4e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4e4:	4798      	blx	r3
 800c4e6:	3601      	adds	r6, #1
 800c4e8:	e7ee      	b.n	800c4c8 <__libc_init_array+0xc>
 800c4ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4ee:	4798      	blx	r3
 800c4f0:	3601      	adds	r6, #1
 800c4f2:	e7f2      	b.n	800c4da <__libc_init_array+0x1e>
 800c4f4:	0800f964 	.word	0x0800f964
 800c4f8:	0800f964 	.word	0x0800f964
 800c4fc:	0800f964 	.word	0x0800f964
 800c500:	0800f968 	.word	0x0800f968

0800c504 <malloc>:
 800c504:	4b02      	ldr	r3, [pc, #8]	; (800c510 <malloc+0xc>)
 800c506:	4601      	mov	r1, r0
 800c508:	6818      	ldr	r0, [r3, #0]
 800c50a:	f000 b88d 	b.w	800c628 <_malloc_r>
 800c50e:	bf00      	nop
 800c510:	2000001c 	.word	0x2000001c

0800c514 <free>:
 800c514:	4b02      	ldr	r3, [pc, #8]	; (800c520 <free+0xc>)
 800c516:	4601      	mov	r1, r0
 800c518:	6818      	ldr	r0, [r3, #0]
 800c51a:	f000 b819 	b.w	800c550 <_free_r>
 800c51e:	bf00      	nop
 800c520:	2000001c 	.word	0x2000001c

0800c524 <memcpy>:
 800c524:	440a      	add	r2, r1
 800c526:	4291      	cmp	r1, r2
 800c528:	f100 33ff 	add.w	r3, r0, #4294967295
 800c52c:	d100      	bne.n	800c530 <memcpy+0xc>
 800c52e:	4770      	bx	lr
 800c530:	b510      	push	{r4, lr}
 800c532:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c536:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c53a:	4291      	cmp	r1, r2
 800c53c:	d1f9      	bne.n	800c532 <memcpy+0xe>
 800c53e:	bd10      	pop	{r4, pc}

0800c540 <memset>:
 800c540:	4402      	add	r2, r0
 800c542:	4603      	mov	r3, r0
 800c544:	4293      	cmp	r3, r2
 800c546:	d100      	bne.n	800c54a <memset+0xa>
 800c548:	4770      	bx	lr
 800c54a:	f803 1b01 	strb.w	r1, [r3], #1
 800c54e:	e7f9      	b.n	800c544 <memset+0x4>

0800c550 <_free_r>:
 800c550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c552:	2900      	cmp	r1, #0
 800c554:	d044      	beq.n	800c5e0 <_free_r+0x90>
 800c556:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c55a:	9001      	str	r0, [sp, #4]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	f1a1 0404 	sub.w	r4, r1, #4
 800c562:	bfb8      	it	lt
 800c564:	18e4      	addlt	r4, r4, r3
 800c566:	f001 fcff 	bl	800df68 <__malloc_lock>
 800c56a:	4a1e      	ldr	r2, [pc, #120]	; (800c5e4 <_free_r+0x94>)
 800c56c:	9801      	ldr	r0, [sp, #4]
 800c56e:	6813      	ldr	r3, [r2, #0]
 800c570:	b933      	cbnz	r3, 800c580 <_free_r+0x30>
 800c572:	6063      	str	r3, [r4, #4]
 800c574:	6014      	str	r4, [r2, #0]
 800c576:	b003      	add	sp, #12
 800c578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c57c:	f001 bcfa 	b.w	800df74 <__malloc_unlock>
 800c580:	42a3      	cmp	r3, r4
 800c582:	d908      	bls.n	800c596 <_free_r+0x46>
 800c584:	6825      	ldr	r5, [r4, #0]
 800c586:	1961      	adds	r1, r4, r5
 800c588:	428b      	cmp	r3, r1
 800c58a:	bf01      	itttt	eq
 800c58c:	6819      	ldreq	r1, [r3, #0]
 800c58e:	685b      	ldreq	r3, [r3, #4]
 800c590:	1949      	addeq	r1, r1, r5
 800c592:	6021      	streq	r1, [r4, #0]
 800c594:	e7ed      	b.n	800c572 <_free_r+0x22>
 800c596:	461a      	mov	r2, r3
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	b10b      	cbz	r3, 800c5a0 <_free_r+0x50>
 800c59c:	42a3      	cmp	r3, r4
 800c59e:	d9fa      	bls.n	800c596 <_free_r+0x46>
 800c5a0:	6811      	ldr	r1, [r2, #0]
 800c5a2:	1855      	adds	r5, r2, r1
 800c5a4:	42a5      	cmp	r5, r4
 800c5a6:	d10b      	bne.n	800c5c0 <_free_r+0x70>
 800c5a8:	6824      	ldr	r4, [r4, #0]
 800c5aa:	4421      	add	r1, r4
 800c5ac:	1854      	adds	r4, r2, r1
 800c5ae:	42a3      	cmp	r3, r4
 800c5b0:	6011      	str	r1, [r2, #0]
 800c5b2:	d1e0      	bne.n	800c576 <_free_r+0x26>
 800c5b4:	681c      	ldr	r4, [r3, #0]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	6053      	str	r3, [r2, #4]
 800c5ba:	4421      	add	r1, r4
 800c5bc:	6011      	str	r1, [r2, #0]
 800c5be:	e7da      	b.n	800c576 <_free_r+0x26>
 800c5c0:	d902      	bls.n	800c5c8 <_free_r+0x78>
 800c5c2:	230c      	movs	r3, #12
 800c5c4:	6003      	str	r3, [r0, #0]
 800c5c6:	e7d6      	b.n	800c576 <_free_r+0x26>
 800c5c8:	6825      	ldr	r5, [r4, #0]
 800c5ca:	1961      	adds	r1, r4, r5
 800c5cc:	428b      	cmp	r3, r1
 800c5ce:	bf04      	itt	eq
 800c5d0:	6819      	ldreq	r1, [r3, #0]
 800c5d2:	685b      	ldreq	r3, [r3, #4]
 800c5d4:	6063      	str	r3, [r4, #4]
 800c5d6:	bf04      	itt	eq
 800c5d8:	1949      	addeq	r1, r1, r5
 800c5da:	6021      	streq	r1, [r4, #0]
 800c5dc:	6054      	str	r4, [r2, #4]
 800c5de:	e7ca      	b.n	800c576 <_free_r+0x26>
 800c5e0:	b003      	add	sp, #12
 800c5e2:	bd30      	pop	{r4, r5, pc}
 800c5e4:	200081ec 	.word	0x200081ec

0800c5e8 <sbrk_aligned>:
 800c5e8:	b570      	push	{r4, r5, r6, lr}
 800c5ea:	4e0e      	ldr	r6, [pc, #56]	; (800c624 <sbrk_aligned+0x3c>)
 800c5ec:	460c      	mov	r4, r1
 800c5ee:	6831      	ldr	r1, [r6, #0]
 800c5f0:	4605      	mov	r5, r0
 800c5f2:	b911      	cbnz	r1, 800c5fa <sbrk_aligned+0x12>
 800c5f4:	f000 fcf6 	bl	800cfe4 <_sbrk_r>
 800c5f8:	6030      	str	r0, [r6, #0]
 800c5fa:	4621      	mov	r1, r4
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	f000 fcf1 	bl	800cfe4 <_sbrk_r>
 800c602:	1c43      	adds	r3, r0, #1
 800c604:	d00a      	beq.n	800c61c <sbrk_aligned+0x34>
 800c606:	1cc4      	adds	r4, r0, #3
 800c608:	f024 0403 	bic.w	r4, r4, #3
 800c60c:	42a0      	cmp	r0, r4
 800c60e:	d007      	beq.n	800c620 <sbrk_aligned+0x38>
 800c610:	1a21      	subs	r1, r4, r0
 800c612:	4628      	mov	r0, r5
 800c614:	f000 fce6 	bl	800cfe4 <_sbrk_r>
 800c618:	3001      	adds	r0, #1
 800c61a:	d101      	bne.n	800c620 <sbrk_aligned+0x38>
 800c61c:	f04f 34ff 	mov.w	r4, #4294967295
 800c620:	4620      	mov	r0, r4
 800c622:	bd70      	pop	{r4, r5, r6, pc}
 800c624:	200081f0 	.word	0x200081f0

0800c628 <_malloc_r>:
 800c628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c62c:	1ccd      	adds	r5, r1, #3
 800c62e:	f025 0503 	bic.w	r5, r5, #3
 800c632:	3508      	adds	r5, #8
 800c634:	2d0c      	cmp	r5, #12
 800c636:	bf38      	it	cc
 800c638:	250c      	movcc	r5, #12
 800c63a:	2d00      	cmp	r5, #0
 800c63c:	4607      	mov	r7, r0
 800c63e:	db01      	blt.n	800c644 <_malloc_r+0x1c>
 800c640:	42a9      	cmp	r1, r5
 800c642:	d905      	bls.n	800c650 <_malloc_r+0x28>
 800c644:	230c      	movs	r3, #12
 800c646:	603b      	str	r3, [r7, #0]
 800c648:	2600      	movs	r6, #0
 800c64a:	4630      	mov	r0, r6
 800c64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c650:	4e2e      	ldr	r6, [pc, #184]	; (800c70c <_malloc_r+0xe4>)
 800c652:	f001 fc89 	bl	800df68 <__malloc_lock>
 800c656:	6833      	ldr	r3, [r6, #0]
 800c658:	461c      	mov	r4, r3
 800c65a:	bb34      	cbnz	r4, 800c6aa <_malloc_r+0x82>
 800c65c:	4629      	mov	r1, r5
 800c65e:	4638      	mov	r0, r7
 800c660:	f7ff ffc2 	bl	800c5e8 <sbrk_aligned>
 800c664:	1c43      	adds	r3, r0, #1
 800c666:	4604      	mov	r4, r0
 800c668:	d14d      	bne.n	800c706 <_malloc_r+0xde>
 800c66a:	6834      	ldr	r4, [r6, #0]
 800c66c:	4626      	mov	r6, r4
 800c66e:	2e00      	cmp	r6, #0
 800c670:	d140      	bne.n	800c6f4 <_malloc_r+0xcc>
 800c672:	6823      	ldr	r3, [r4, #0]
 800c674:	4631      	mov	r1, r6
 800c676:	4638      	mov	r0, r7
 800c678:	eb04 0803 	add.w	r8, r4, r3
 800c67c:	f000 fcb2 	bl	800cfe4 <_sbrk_r>
 800c680:	4580      	cmp	r8, r0
 800c682:	d13a      	bne.n	800c6fa <_malloc_r+0xd2>
 800c684:	6821      	ldr	r1, [r4, #0]
 800c686:	3503      	adds	r5, #3
 800c688:	1a6d      	subs	r5, r5, r1
 800c68a:	f025 0503 	bic.w	r5, r5, #3
 800c68e:	3508      	adds	r5, #8
 800c690:	2d0c      	cmp	r5, #12
 800c692:	bf38      	it	cc
 800c694:	250c      	movcc	r5, #12
 800c696:	4629      	mov	r1, r5
 800c698:	4638      	mov	r0, r7
 800c69a:	f7ff ffa5 	bl	800c5e8 <sbrk_aligned>
 800c69e:	3001      	adds	r0, #1
 800c6a0:	d02b      	beq.n	800c6fa <_malloc_r+0xd2>
 800c6a2:	6823      	ldr	r3, [r4, #0]
 800c6a4:	442b      	add	r3, r5
 800c6a6:	6023      	str	r3, [r4, #0]
 800c6a8:	e00e      	b.n	800c6c8 <_malloc_r+0xa0>
 800c6aa:	6822      	ldr	r2, [r4, #0]
 800c6ac:	1b52      	subs	r2, r2, r5
 800c6ae:	d41e      	bmi.n	800c6ee <_malloc_r+0xc6>
 800c6b0:	2a0b      	cmp	r2, #11
 800c6b2:	d916      	bls.n	800c6e2 <_malloc_r+0xba>
 800c6b4:	1961      	adds	r1, r4, r5
 800c6b6:	42a3      	cmp	r3, r4
 800c6b8:	6025      	str	r5, [r4, #0]
 800c6ba:	bf18      	it	ne
 800c6bc:	6059      	strne	r1, [r3, #4]
 800c6be:	6863      	ldr	r3, [r4, #4]
 800c6c0:	bf08      	it	eq
 800c6c2:	6031      	streq	r1, [r6, #0]
 800c6c4:	5162      	str	r2, [r4, r5]
 800c6c6:	604b      	str	r3, [r1, #4]
 800c6c8:	4638      	mov	r0, r7
 800c6ca:	f104 060b 	add.w	r6, r4, #11
 800c6ce:	f001 fc51 	bl	800df74 <__malloc_unlock>
 800c6d2:	f026 0607 	bic.w	r6, r6, #7
 800c6d6:	1d23      	adds	r3, r4, #4
 800c6d8:	1af2      	subs	r2, r6, r3
 800c6da:	d0b6      	beq.n	800c64a <_malloc_r+0x22>
 800c6dc:	1b9b      	subs	r3, r3, r6
 800c6de:	50a3      	str	r3, [r4, r2]
 800c6e0:	e7b3      	b.n	800c64a <_malloc_r+0x22>
 800c6e2:	6862      	ldr	r2, [r4, #4]
 800c6e4:	42a3      	cmp	r3, r4
 800c6e6:	bf0c      	ite	eq
 800c6e8:	6032      	streq	r2, [r6, #0]
 800c6ea:	605a      	strne	r2, [r3, #4]
 800c6ec:	e7ec      	b.n	800c6c8 <_malloc_r+0xa0>
 800c6ee:	4623      	mov	r3, r4
 800c6f0:	6864      	ldr	r4, [r4, #4]
 800c6f2:	e7b2      	b.n	800c65a <_malloc_r+0x32>
 800c6f4:	4634      	mov	r4, r6
 800c6f6:	6876      	ldr	r6, [r6, #4]
 800c6f8:	e7b9      	b.n	800c66e <_malloc_r+0x46>
 800c6fa:	230c      	movs	r3, #12
 800c6fc:	603b      	str	r3, [r7, #0]
 800c6fe:	4638      	mov	r0, r7
 800c700:	f001 fc38 	bl	800df74 <__malloc_unlock>
 800c704:	e7a1      	b.n	800c64a <_malloc_r+0x22>
 800c706:	6025      	str	r5, [r4, #0]
 800c708:	e7de      	b.n	800c6c8 <_malloc_r+0xa0>
 800c70a:	bf00      	nop
 800c70c:	200081ec 	.word	0x200081ec

0800c710 <__cvt>:
 800c710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c714:	ec55 4b10 	vmov	r4, r5, d0
 800c718:	2d00      	cmp	r5, #0
 800c71a:	460e      	mov	r6, r1
 800c71c:	4619      	mov	r1, r3
 800c71e:	462b      	mov	r3, r5
 800c720:	bfbb      	ittet	lt
 800c722:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c726:	461d      	movlt	r5, r3
 800c728:	2300      	movge	r3, #0
 800c72a:	232d      	movlt	r3, #45	; 0x2d
 800c72c:	700b      	strb	r3, [r1, #0]
 800c72e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c730:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c734:	4691      	mov	r9, r2
 800c736:	f023 0820 	bic.w	r8, r3, #32
 800c73a:	bfbc      	itt	lt
 800c73c:	4622      	movlt	r2, r4
 800c73e:	4614      	movlt	r4, r2
 800c740:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c744:	d005      	beq.n	800c752 <__cvt+0x42>
 800c746:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c74a:	d100      	bne.n	800c74e <__cvt+0x3e>
 800c74c:	3601      	adds	r6, #1
 800c74e:	2102      	movs	r1, #2
 800c750:	e000      	b.n	800c754 <__cvt+0x44>
 800c752:	2103      	movs	r1, #3
 800c754:	ab03      	add	r3, sp, #12
 800c756:	9301      	str	r3, [sp, #4]
 800c758:	ab02      	add	r3, sp, #8
 800c75a:	9300      	str	r3, [sp, #0]
 800c75c:	ec45 4b10 	vmov	d0, r4, r5
 800c760:	4653      	mov	r3, sl
 800c762:	4632      	mov	r2, r6
 800c764:	f000 fd14 	bl	800d190 <_dtoa_r>
 800c768:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c76c:	4607      	mov	r7, r0
 800c76e:	d102      	bne.n	800c776 <__cvt+0x66>
 800c770:	f019 0f01 	tst.w	r9, #1
 800c774:	d022      	beq.n	800c7bc <__cvt+0xac>
 800c776:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c77a:	eb07 0906 	add.w	r9, r7, r6
 800c77e:	d110      	bne.n	800c7a2 <__cvt+0x92>
 800c780:	783b      	ldrb	r3, [r7, #0]
 800c782:	2b30      	cmp	r3, #48	; 0x30
 800c784:	d10a      	bne.n	800c79c <__cvt+0x8c>
 800c786:	2200      	movs	r2, #0
 800c788:	2300      	movs	r3, #0
 800c78a:	4620      	mov	r0, r4
 800c78c:	4629      	mov	r1, r5
 800c78e:	f7f4 f9ab 	bl	8000ae8 <__aeabi_dcmpeq>
 800c792:	b918      	cbnz	r0, 800c79c <__cvt+0x8c>
 800c794:	f1c6 0601 	rsb	r6, r6, #1
 800c798:	f8ca 6000 	str.w	r6, [sl]
 800c79c:	f8da 3000 	ldr.w	r3, [sl]
 800c7a0:	4499      	add	r9, r3
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	4629      	mov	r1, r5
 800c7aa:	f7f4 f99d 	bl	8000ae8 <__aeabi_dcmpeq>
 800c7ae:	b108      	cbz	r0, 800c7b4 <__cvt+0xa4>
 800c7b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c7b4:	2230      	movs	r2, #48	; 0x30
 800c7b6:	9b03      	ldr	r3, [sp, #12]
 800c7b8:	454b      	cmp	r3, r9
 800c7ba:	d307      	bcc.n	800c7cc <__cvt+0xbc>
 800c7bc:	9b03      	ldr	r3, [sp, #12]
 800c7be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7c0:	1bdb      	subs	r3, r3, r7
 800c7c2:	4638      	mov	r0, r7
 800c7c4:	6013      	str	r3, [r2, #0]
 800c7c6:	b004      	add	sp, #16
 800c7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7cc:	1c59      	adds	r1, r3, #1
 800c7ce:	9103      	str	r1, [sp, #12]
 800c7d0:	701a      	strb	r2, [r3, #0]
 800c7d2:	e7f0      	b.n	800c7b6 <__cvt+0xa6>

0800c7d4 <__exponent>:
 800c7d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	2900      	cmp	r1, #0
 800c7da:	bfb8      	it	lt
 800c7dc:	4249      	neglt	r1, r1
 800c7de:	f803 2b02 	strb.w	r2, [r3], #2
 800c7e2:	bfb4      	ite	lt
 800c7e4:	222d      	movlt	r2, #45	; 0x2d
 800c7e6:	222b      	movge	r2, #43	; 0x2b
 800c7e8:	2909      	cmp	r1, #9
 800c7ea:	7042      	strb	r2, [r0, #1]
 800c7ec:	dd2a      	ble.n	800c844 <__exponent+0x70>
 800c7ee:	f10d 0407 	add.w	r4, sp, #7
 800c7f2:	46a4      	mov	ip, r4
 800c7f4:	270a      	movs	r7, #10
 800c7f6:	46a6      	mov	lr, r4
 800c7f8:	460a      	mov	r2, r1
 800c7fa:	fb91 f6f7 	sdiv	r6, r1, r7
 800c7fe:	fb07 1516 	mls	r5, r7, r6, r1
 800c802:	3530      	adds	r5, #48	; 0x30
 800c804:	2a63      	cmp	r2, #99	; 0x63
 800c806:	f104 34ff 	add.w	r4, r4, #4294967295
 800c80a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c80e:	4631      	mov	r1, r6
 800c810:	dcf1      	bgt.n	800c7f6 <__exponent+0x22>
 800c812:	3130      	adds	r1, #48	; 0x30
 800c814:	f1ae 0502 	sub.w	r5, lr, #2
 800c818:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c81c:	1c44      	adds	r4, r0, #1
 800c81e:	4629      	mov	r1, r5
 800c820:	4561      	cmp	r1, ip
 800c822:	d30a      	bcc.n	800c83a <__exponent+0x66>
 800c824:	f10d 0209 	add.w	r2, sp, #9
 800c828:	eba2 020e 	sub.w	r2, r2, lr
 800c82c:	4565      	cmp	r5, ip
 800c82e:	bf88      	it	hi
 800c830:	2200      	movhi	r2, #0
 800c832:	4413      	add	r3, r2
 800c834:	1a18      	subs	r0, r3, r0
 800c836:	b003      	add	sp, #12
 800c838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c83a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c83e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c842:	e7ed      	b.n	800c820 <__exponent+0x4c>
 800c844:	2330      	movs	r3, #48	; 0x30
 800c846:	3130      	adds	r1, #48	; 0x30
 800c848:	7083      	strb	r3, [r0, #2]
 800c84a:	70c1      	strb	r1, [r0, #3]
 800c84c:	1d03      	adds	r3, r0, #4
 800c84e:	e7f1      	b.n	800c834 <__exponent+0x60>

0800c850 <_printf_float>:
 800c850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c854:	ed2d 8b02 	vpush	{d8}
 800c858:	b08d      	sub	sp, #52	; 0x34
 800c85a:	460c      	mov	r4, r1
 800c85c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c860:	4616      	mov	r6, r2
 800c862:	461f      	mov	r7, r3
 800c864:	4605      	mov	r5, r0
 800c866:	f001 fb77 	bl	800df58 <_localeconv_r>
 800c86a:	f8d0 a000 	ldr.w	sl, [r0]
 800c86e:	4650      	mov	r0, sl
 800c870:	f7f3 fcbe 	bl	80001f0 <strlen>
 800c874:	2300      	movs	r3, #0
 800c876:	930a      	str	r3, [sp, #40]	; 0x28
 800c878:	6823      	ldr	r3, [r4, #0]
 800c87a:	9305      	str	r3, [sp, #20]
 800c87c:	f8d8 3000 	ldr.w	r3, [r8]
 800c880:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c884:	3307      	adds	r3, #7
 800c886:	f023 0307 	bic.w	r3, r3, #7
 800c88a:	f103 0208 	add.w	r2, r3, #8
 800c88e:	f8c8 2000 	str.w	r2, [r8]
 800c892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c896:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c89a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c89e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c8a2:	9307      	str	r3, [sp, #28]
 800c8a4:	f8cd 8018 	str.w	r8, [sp, #24]
 800c8a8:	ee08 0a10 	vmov	s16, r0
 800c8ac:	4b9f      	ldr	r3, [pc, #636]	; (800cb2c <_printf_float+0x2dc>)
 800c8ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c8b6:	f7f4 f949 	bl	8000b4c <__aeabi_dcmpun>
 800c8ba:	bb88      	cbnz	r0, 800c920 <_printf_float+0xd0>
 800c8bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8c0:	4b9a      	ldr	r3, [pc, #616]	; (800cb2c <_printf_float+0x2dc>)
 800c8c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c8c6:	f7f4 f923 	bl	8000b10 <__aeabi_dcmple>
 800c8ca:	bb48      	cbnz	r0, 800c920 <_printf_float+0xd0>
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	4640      	mov	r0, r8
 800c8d2:	4649      	mov	r1, r9
 800c8d4:	f7f4 f912 	bl	8000afc <__aeabi_dcmplt>
 800c8d8:	b110      	cbz	r0, 800c8e0 <_printf_float+0x90>
 800c8da:	232d      	movs	r3, #45	; 0x2d
 800c8dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8e0:	4b93      	ldr	r3, [pc, #588]	; (800cb30 <_printf_float+0x2e0>)
 800c8e2:	4894      	ldr	r0, [pc, #592]	; (800cb34 <_printf_float+0x2e4>)
 800c8e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c8e8:	bf94      	ite	ls
 800c8ea:	4698      	movls	r8, r3
 800c8ec:	4680      	movhi	r8, r0
 800c8ee:	2303      	movs	r3, #3
 800c8f0:	6123      	str	r3, [r4, #16]
 800c8f2:	9b05      	ldr	r3, [sp, #20]
 800c8f4:	f023 0204 	bic.w	r2, r3, #4
 800c8f8:	6022      	str	r2, [r4, #0]
 800c8fa:	f04f 0900 	mov.w	r9, #0
 800c8fe:	9700      	str	r7, [sp, #0]
 800c900:	4633      	mov	r3, r6
 800c902:	aa0b      	add	r2, sp, #44	; 0x2c
 800c904:	4621      	mov	r1, r4
 800c906:	4628      	mov	r0, r5
 800c908:	f000 f9d8 	bl	800ccbc <_printf_common>
 800c90c:	3001      	adds	r0, #1
 800c90e:	f040 8090 	bne.w	800ca32 <_printf_float+0x1e2>
 800c912:	f04f 30ff 	mov.w	r0, #4294967295
 800c916:	b00d      	add	sp, #52	; 0x34
 800c918:	ecbd 8b02 	vpop	{d8}
 800c91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c920:	4642      	mov	r2, r8
 800c922:	464b      	mov	r3, r9
 800c924:	4640      	mov	r0, r8
 800c926:	4649      	mov	r1, r9
 800c928:	f7f4 f910 	bl	8000b4c <__aeabi_dcmpun>
 800c92c:	b140      	cbz	r0, 800c940 <_printf_float+0xf0>
 800c92e:	464b      	mov	r3, r9
 800c930:	2b00      	cmp	r3, #0
 800c932:	bfbc      	itt	lt
 800c934:	232d      	movlt	r3, #45	; 0x2d
 800c936:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c93a:	487f      	ldr	r0, [pc, #508]	; (800cb38 <_printf_float+0x2e8>)
 800c93c:	4b7f      	ldr	r3, [pc, #508]	; (800cb3c <_printf_float+0x2ec>)
 800c93e:	e7d1      	b.n	800c8e4 <_printf_float+0x94>
 800c940:	6863      	ldr	r3, [r4, #4]
 800c942:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c946:	9206      	str	r2, [sp, #24]
 800c948:	1c5a      	adds	r2, r3, #1
 800c94a:	d13f      	bne.n	800c9cc <_printf_float+0x17c>
 800c94c:	2306      	movs	r3, #6
 800c94e:	6063      	str	r3, [r4, #4]
 800c950:	9b05      	ldr	r3, [sp, #20]
 800c952:	6861      	ldr	r1, [r4, #4]
 800c954:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c958:	2300      	movs	r3, #0
 800c95a:	9303      	str	r3, [sp, #12]
 800c95c:	ab0a      	add	r3, sp, #40	; 0x28
 800c95e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c962:	ab09      	add	r3, sp, #36	; 0x24
 800c964:	ec49 8b10 	vmov	d0, r8, r9
 800c968:	9300      	str	r3, [sp, #0]
 800c96a:	6022      	str	r2, [r4, #0]
 800c96c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c970:	4628      	mov	r0, r5
 800c972:	f7ff fecd 	bl	800c710 <__cvt>
 800c976:	9b06      	ldr	r3, [sp, #24]
 800c978:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c97a:	2b47      	cmp	r3, #71	; 0x47
 800c97c:	4680      	mov	r8, r0
 800c97e:	d108      	bne.n	800c992 <_printf_float+0x142>
 800c980:	1cc8      	adds	r0, r1, #3
 800c982:	db02      	blt.n	800c98a <_printf_float+0x13a>
 800c984:	6863      	ldr	r3, [r4, #4]
 800c986:	4299      	cmp	r1, r3
 800c988:	dd41      	ble.n	800ca0e <_printf_float+0x1be>
 800c98a:	f1ab 0b02 	sub.w	fp, fp, #2
 800c98e:	fa5f fb8b 	uxtb.w	fp, fp
 800c992:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c996:	d820      	bhi.n	800c9da <_printf_float+0x18a>
 800c998:	3901      	subs	r1, #1
 800c99a:	465a      	mov	r2, fp
 800c99c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c9a0:	9109      	str	r1, [sp, #36]	; 0x24
 800c9a2:	f7ff ff17 	bl	800c7d4 <__exponent>
 800c9a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9a8:	1813      	adds	r3, r2, r0
 800c9aa:	2a01      	cmp	r2, #1
 800c9ac:	4681      	mov	r9, r0
 800c9ae:	6123      	str	r3, [r4, #16]
 800c9b0:	dc02      	bgt.n	800c9b8 <_printf_float+0x168>
 800c9b2:	6822      	ldr	r2, [r4, #0]
 800c9b4:	07d2      	lsls	r2, r2, #31
 800c9b6:	d501      	bpl.n	800c9bc <_printf_float+0x16c>
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	6123      	str	r3, [r4, #16]
 800c9bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d09c      	beq.n	800c8fe <_printf_float+0xae>
 800c9c4:	232d      	movs	r3, #45	; 0x2d
 800c9c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9ca:	e798      	b.n	800c8fe <_printf_float+0xae>
 800c9cc:	9a06      	ldr	r2, [sp, #24]
 800c9ce:	2a47      	cmp	r2, #71	; 0x47
 800c9d0:	d1be      	bne.n	800c950 <_printf_float+0x100>
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d1bc      	bne.n	800c950 <_printf_float+0x100>
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e7b9      	b.n	800c94e <_printf_float+0xfe>
 800c9da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c9de:	d118      	bne.n	800ca12 <_printf_float+0x1c2>
 800c9e0:	2900      	cmp	r1, #0
 800c9e2:	6863      	ldr	r3, [r4, #4]
 800c9e4:	dd0b      	ble.n	800c9fe <_printf_float+0x1ae>
 800c9e6:	6121      	str	r1, [r4, #16]
 800c9e8:	b913      	cbnz	r3, 800c9f0 <_printf_float+0x1a0>
 800c9ea:	6822      	ldr	r2, [r4, #0]
 800c9ec:	07d0      	lsls	r0, r2, #31
 800c9ee:	d502      	bpl.n	800c9f6 <_printf_float+0x1a6>
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	440b      	add	r3, r1
 800c9f4:	6123      	str	r3, [r4, #16]
 800c9f6:	65a1      	str	r1, [r4, #88]	; 0x58
 800c9f8:	f04f 0900 	mov.w	r9, #0
 800c9fc:	e7de      	b.n	800c9bc <_printf_float+0x16c>
 800c9fe:	b913      	cbnz	r3, 800ca06 <_printf_float+0x1b6>
 800ca00:	6822      	ldr	r2, [r4, #0]
 800ca02:	07d2      	lsls	r2, r2, #31
 800ca04:	d501      	bpl.n	800ca0a <_printf_float+0x1ba>
 800ca06:	3302      	adds	r3, #2
 800ca08:	e7f4      	b.n	800c9f4 <_printf_float+0x1a4>
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	e7f2      	b.n	800c9f4 <_printf_float+0x1a4>
 800ca0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ca12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca14:	4299      	cmp	r1, r3
 800ca16:	db05      	blt.n	800ca24 <_printf_float+0x1d4>
 800ca18:	6823      	ldr	r3, [r4, #0]
 800ca1a:	6121      	str	r1, [r4, #16]
 800ca1c:	07d8      	lsls	r0, r3, #31
 800ca1e:	d5ea      	bpl.n	800c9f6 <_printf_float+0x1a6>
 800ca20:	1c4b      	adds	r3, r1, #1
 800ca22:	e7e7      	b.n	800c9f4 <_printf_float+0x1a4>
 800ca24:	2900      	cmp	r1, #0
 800ca26:	bfd4      	ite	le
 800ca28:	f1c1 0202 	rsble	r2, r1, #2
 800ca2c:	2201      	movgt	r2, #1
 800ca2e:	4413      	add	r3, r2
 800ca30:	e7e0      	b.n	800c9f4 <_printf_float+0x1a4>
 800ca32:	6823      	ldr	r3, [r4, #0]
 800ca34:	055a      	lsls	r2, r3, #21
 800ca36:	d407      	bmi.n	800ca48 <_printf_float+0x1f8>
 800ca38:	6923      	ldr	r3, [r4, #16]
 800ca3a:	4642      	mov	r2, r8
 800ca3c:	4631      	mov	r1, r6
 800ca3e:	4628      	mov	r0, r5
 800ca40:	47b8      	blx	r7
 800ca42:	3001      	adds	r0, #1
 800ca44:	d12c      	bne.n	800caa0 <_printf_float+0x250>
 800ca46:	e764      	b.n	800c912 <_printf_float+0xc2>
 800ca48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca4c:	f240 80e0 	bls.w	800cc10 <_printf_float+0x3c0>
 800ca50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca54:	2200      	movs	r2, #0
 800ca56:	2300      	movs	r3, #0
 800ca58:	f7f4 f846 	bl	8000ae8 <__aeabi_dcmpeq>
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	d034      	beq.n	800caca <_printf_float+0x27a>
 800ca60:	4a37      	ldr	r2, [pc, #220]	; (800cb40 <_printf_float+0x2f0>)
 800ca62:	2301      	movs	r3, #1
 800ca64:	4631      	mov	r1, r6
 800ca66:	4628      	mov	r0, r5
 800ca68:	47b8      	blx	r7
 800ca6a:	3001      	adds	r0, #1
 800ca6c:	f43f af51 	beq.w	800c912 <_printf_float+0xc2>
 800ca70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca74:	429a      	cmp	r2, r3
 800ca76:	db02      	blt.n	800ca7e <_printf_float+0x22e>
 800ca78:	6823      	ldr	r3, [r4, #0]
 800ca7a:	07d8      	lsls	r0, r3, #31
 800ca7c:	d510      	bpl.n	800caa0 <_printf_float+0x250>
 800ca7e:	ee18 3a10 	vmov	r3, s16
 800ca82:	4652      	mov	r2, sl
 800ca84:	4631      	mov	r1, r6
 800ca86:	4628      	mov	r0, r5
 800ca88:	47b8      	blx	r7
 800ca8a:	3001      	adds	r0, #1
 800ca8c:	f43f af41 	beq.w	800c912 <_printf_float+0xc2>
 800ca90:	f04f 0800 	mov.w	r8, #0
 800ca94:	f104 091a 	add.w	r9, r4, #26
 800ca98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	4543      	cmp	r3, r8
 800ca9e:	dc09      	bgt.n	800cab4 <_printf_float+0x264>
 800caa0:	6823      	ldr	r3, [r4, #0]
 800caa2:	079b      	lsls	r3, r3, #30
 800caa4:	f100 8105 	bmi.w	800ccb2 <_printf_float+0x462>
 800caa8:	68e0      	ldr	r0, [r4, #12]
 800caaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800caac:	4298      	cmp	r0, r3
 800caae:	bfb8      	it	lt
 800cab0:	4618      	movlt	r0, r3
 800cab2:	e730      	b.n	800c916 <_printf_float+0xc6>
 800cab4:	2301      	movs	r3, #1
 800cab6:	464a      	mov	r2, r9
 800cab8:	4631      	mov	r1, r6
 800caba:	4628      	mov	r0, r5
 800cabc:	47b8      	blx	r7
 800cabe:	3001      	adds	r0, #1
 800cac0:	f43f af27 	beq.w	800c912 <_printf_float+0xc2>
 800cac4:	f108 0801 	add.w	r8, r8, #1
 800cac8:	e7e6      	b.n	800ca98 <_printf_float+0x248>
 800caca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cacc:	2b00      	cmp	r3, #0
 800cace:	dc39      	bgt.n	800cb44 <_printf_float+0x2f4>
 800cad0:	4a1b      	ldr	r2, [pc, #108]	; (800cb40 <_printf_float+0x2f0>)
 800cad2:	2301      	movs	r3, #1
 800cad4:	4631      	mov	r1, r6
 800cad6:	4628      	mov	r0, r5
 800cad8:	47b8      	blx	r7
 800cada:	3001      	adds	r0, #1
 800cadc:	f43f af19 	beq.w	800c912 <_printf_float+0xc2>
 800cae0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cae4:	4313      	orrs	r3, r2
 800cae6:	d102      	bne.n	800caee <_printf_float+0x29e>
 800cae8:	6823      	ldr	r3, [r4, #0]
 800caea:	07d9      	lsls	r1, r3, #31
 800caec:	d5d8      	bpl.n	800caa0 <_printf_float+0x250>
 800caee:	ee18 3a10 	vmov	r3, s16
 800caf2:	4652      	mov	r2, sl
 800caf4:	4631      	mov	r1, r6
 800caf6:	4628      	mov	r0, r5
 800caf8:	47b8      	blx	r7
 800cafa:	3001      	adds	r0, #1
 800cafc:	f43f af09 	beq.w	800c912 <_printf_float+0xc2>
 800cb00:	f04f 0900 	mov.w	r9, #0
 800cb04:	f104 0a1a 	add.w	sl, r4, #26
 800cb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb0a:	425b      	negs	r3, r3
 800cb0c:	454b      	cmp	r3, r9
 800cb0e:	dc01      	bgt.n	800cb14 <_printf_float+0x2c4>
 800cb10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb12:	e792      	b.n	800ca3a <_printf_float+0x1ea>
 800cb14:	2301      	movs	r3, #1
 800cb16:	4652      	mov	r2, sl
 800cb18:	4631      	mov	r1, r6
 800cb1a:	4628      	mov	r0, r5
 800cb1c:	47b8      	blx	r7
 800cb1e:	3001      	adds	r0, #1
 800cb20:	f43f aef7 	beq.w	800c912 <_printf_float+0xc2>
 800cb24:	f109 0901 	add.w	r9, r9, #1
 800cb28:	e7ee      	b.n	800cb08 <_printf_float+0x2b8>
 800cb2a:	bf00      	nop
 800cb2c:	7fefffff 	.word	0x7fefffff
 800cb30:	0800f590 	.word	0x0800f590
 800cb34:	0800f594 	.word	0x0800f594
 800cb38:	0800f59c 	.word	0x0800f59c
 800cb3c:	0800f598 	.word	0x0800f598
 800cb40:	0800f5a0 	.word	0x0800f5a0
 800cb44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	bfa8      	it	ge
 800cb4c:	461a      	movge	r2, r3
 800cb4e:	2a00      	cmp	r2, #0
 800cb50:	4691      	mov	r9, r2
 800cb52:	dc37      	bgt.n	800cbc4 <_printf_float+0x374>
 800cb54:	f04f 0b00 	mov.w	fp, #0
 800cb58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb5c:	f104 021a 	add.w	r2, r4, #26
 800cb60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb62:	9305      	str	r3, [sp, #20]
 800cb64:	eba3 0309 	sub.w	r3, r3, r9
 800cb68:	455b      	cmp	r3, fp
 800cb6a:	dc33      	bgt.n	800cbd4 <_printf_float+0x384>
 800cb6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb70:	429a      	cmp	r2, r3
 800cb72:	db3b      	blt.n	800cbec <_printf_float+0x39c>
 800cb74:	6823      	ldr	r3, [r4, #0]
 800cb76:	07da      	lsls	r2, r3, #31
 800cb78:	d438      	bmi.n	800cbec <_printf_float+0x39c>
 800cb7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb7c:	9a05      	ldr	r2, [sp, #20]
 800cb7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb80:	1a9a      	subs	r2, r3, r2
 800cb82:	eba3 0901 	sub.w	r9, r3, r1
 800cb86:	4591      	cmp	r9, r2
 800cb88:	bfa8      	it	ge
 800cb8a:	4691      	movge	r9, r2
 800cb8c:	f1b9 0f00 	cmp.w	r9, #0
 800cb90:	dc35      	bgt.n	800cbfe <_printf_float+0x3ae>
 800cb92:	f04f 0800 	mov.w	r8, #0
 800cb96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb9a:	f104 0a1a 	add.w	sl, r4, #26
 800cb9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cba2:	1a9b      	subs	r3, r3, r2
 800cba4:	eba3 0309 	sub.w	r3, r3, r9
 800cba8:	4543      	cmp	r3, r8
 800cbaa:	f77f af79 	ble.w	800caa0 <_printf_float+0x250>
 800cbae:	2301      	movs	r3, #1
 800cbb0:	4652      	mov	r2, sl
 800cbb2:	4631      	mov	r1, r6
 800cbb4:	4628      	mov	r0, r5
 800cbb6:	47b8      	blx	r7
 800cbb8:	3001      	adds	r0, #1
 800cbba:	f43f aeaa 	beq.w	800c912 <_printf_float+0xc2>
 800cbbe:	f108 0801 	add.w	r8, r8, #1
 800cbc2:	e7ec      	b.n	800cb9e <_printf_float+0x34e>
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	4631      	mov	r1, r6
 800cbc8:	4642      	mov	r2, r8
 800cbca:	4628      	mov	r0, r5
 800cbcc:	47b8      	blx	r7
 800cbce:	3001      	adds	r0, #1
 800cbd0:	d1c0      	bne.n	800cb54 <_printf_float+0x304>
 800cbd2:	e69e      	b.n	800c912 <_printf_float+0xc2>
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	4631      	mov	r1, r6
 800cbd8:	4628      	mov	r0, r5
 800cbda:	9205      	str	r2, [sp, #20]
 800cbdc:	47b8      	blx	r7
 800cbde:	3001      	adds	r0, #1
 800cbe0:	f43f ae97 	beq.w	800c912 <_printf_float+0xc2>
 800cbe4:	9a05      	ldr	r2, [sp, #20]
 800cbe6:	f10b 0b01 	add.w	fp, fp, #1
 800cbea:	e7b9      	b.n	800cb60 <_printf_float+0x310>
 800cbec:	ee18 3a10 	vmov	r3, s16
 800cbf0:	4652      	mov	r2, sl
 800cbf2:	4631      	mov	r1, r6
 800cbf4:	4628      	mov	r0, r5
 800cbf6:	47b8      	blx	r7
 800cbf8:	3001      	adds	r0, #1
 800cbfa:	d1be      	bne.n	800cb7a <_printf_float+0x32a>
 800cbfc:	e689      	b.n	800c912 <_printf_float+0xc2>
 800cbfe:	9a05      	ldr	r2, [sp, #20]
 800cc00:	464b      	mov	r3, r9
 800cc02:	4442      	add	r2, r8
 800cc04:	4631      	mov	r1, r6
 800cc06:	4628      	mov	r0, r5
 800cc08:	47b8      	blx	r7
 800cc0a:	3001      	adds	r0, #1
 800cc0c:	d1c1      	bne.n	800cb92 <_printf_float+0x342>
 800cc0e:	e680      	b.n	800c912 <_printf_float+0xc2>
 800cc10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc12:	2a01      	cmp	r2, #1
 800cc14:	dc01      	bgt.n	800cc1a <_printf_float+0x3ca>
 800cc16:	07db      	lsls	r3, r3, #31
 800cc18:	d538      	bpl.n	800cc8c <_printf_float+0x43c>
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	4642      	mov	r2, r8
 800cc1e:	4631      	mov	r1, r6
 800cc20:	4628      	mov	r0, r5
 800cc22:	47b8      	blx	r7
 800cc24:	3001      	adds	r0, #1
 800cc26:	f43f ae74 	beq.w	800c912 <_printf_float+0xc2>
 800cc2a:	ee18 3a10 	vmov	r3, s16
 800cc2e:	4652      	mov	r2, sl
 800cc30:	4631      	mov	r1, r6
 800cc32:	4628      	mov	r0, r5
 800cc34:	47b8      	blx	r7
 800cc36:	3001      	adds	r0, #1
 800cc38:	f43f ae6b 	beq.w	800c912 <_printf_float+0xc2>
 800cc3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc40:	2200      	movs	r2, #0
 800cc42:	2300      	movs	r3, #0
 800cc44:	f7f3 ff50 	bl	8000ae8 <__aeabi_dcmpeq>
 800cc48:	b9d8      	cbnz	r0, 800cc82 <_printf_float+0x432>
 800cc4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc4c:	f108 0201 	add.w	r2, r8, #1
 800cc50:	3b01      	subs	r3, #1
 800cc52:	4631      	mov	r1, r6
 800cc54:	4628      	mov	r0, r5
 800cc56:	47b8      	blx	r7
 800cc58:	3001      	adds	r0, #1
 800cc5a:	d10e      	bne.n	800cc7a <_printf_float+0x42a>
 800cc5c:	e659      	b.n	800c912 <_printf_float+0xc2>
 800cc5e:	2301      	movs	r3, #1
 800cc60:	4652      	mov	r2, sl
 800cc62:	4631      	mov	r1, r6
 800cc64:	4628      	mov	r0, r5
 800cc66:	47b8      	blx	r7
 800cc68:	3001      	adds	r0, #1
 800cc6a:	f43f ae52 	beq.w	800c912 <_printf_float+0xc2>
 800cc6e:	f108 0801 	add.w	r8, r8, #1
 800cc72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc74:	3b01      	subs	r3, #1
 800cc76:	4543      	cmp	r3, r8
 800cc78:	dcf1      	bgt.n	800cc5e <_printf_float+0x40e>
 800cc7a:	464b      	mov	r3, r9
 800cc7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cc80:	e6dc      	b.n	800ca3c <_printf_float+0x1ec>
 800cc82:	f04f 0800 	mov.w	r8, #0
 800cc86:	f104 0a1a 	add.w	sl, r4, #26
 800cc8a:	e7f2      	b.n	800cc72 <_printf_float+0x422>
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	4642      	mov	r2, r8
 800cc90:	e7df      	b.n	800cc52 <_printf_float+0x402>
 800cc92:	2301      	movs	r3, #1
 800cc94:	464a      	mov	r2, r9
 800cc96:	4631      	mov	r1, r6
 800cc98:	4628      	mov	r0, r5
 800cc9a:	47b8      	blx	r7
 800cc9c:	3001      	adds	r0, #1
 800cc9e:	f43f ae38 	beq.w	800c912 <_printf_float+0xc2>
 800cca2:	f108 0801 	add.w	r8, r8, #1
 800cca6:	68e3      	ldr	r3, [r4, #12]
 800cca8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ccaa:	1a5b      	subs	r3, r3, r1
 800ccac:	4543      	cmp	r3, r8
 800ccae:	dcf0      	bgt.n	800cc92 <_printf_float+0x442>
 800ccb0:	e6fa      	b.n	800caa8 <_printf_float+0x258>
 800ccb2:	f04f 0800 	mov.w	r8, #0
 800ccb6:	f104 0919 	add.w	r9, r4, #25
 800ccba:	e7f4      	b.n	800cca6 <_printf_float+0x456>

0800ccbc <_printf_common>:
 800ccbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccc0:	4616      	mov	r6, r2
 800ccc2:	4699      	mov	r9, r3
 800ccc4:	688a      	ldr	r2, [r1, #8]
 800ccc6:	690b      	ldr	r3, [r1, #16]
 800ccc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cccc:	4293      	cmp	r3, r2
 800ccce:	bfb8      	it	lt
 800ccd0:	4613      	movlt	r3, r2
 800ccd2:	6033      	str	r3, [r6, #0]
 800ccd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ccd8:	4607      	mov	r7, r0
 800ccda:	460c      	mov	r4, r1
 800ccdc:	b10a      	cbz	r2, 800cce2 <_printf_common+0x26>
 800ccde:	3301      	adds	r3, #1
 800cce0:	6033      	str	r3, [r6, #0]
 800cce2:	6823      	ldr	r3, [r4, #0]
 800cce4:	0699      	lsls	r1, r3, #26
 800cce6:	bf42      	ittt	mi
 800cce8:	6833      	ldrmi	r3, [r6, #0]
 800ccea:	3302      	addmi	r3, #2
 800ccec:	6033      	strmi	r3, [r6, #0]
 800ccee:	6825      	ldr	r5, [r4, #0]
 800ccf0:	f015 0506 	ands.w	r5, r5, #6
 800ccf4:	d106      	bne.n	800cd04 <_printf_common+0x48>
 800ccf6:	f104 0a19 	add.w	sl, r4, #25
 800ccfa:	68e3      	ldr	r3, [r4, #12]
 800ccfc:	6832      	ldr	r2, [r6, #0]
 800ccfe:	1a9b      	subs	r3, r3, r2
 800cd00:	42ab      	cmp	r3, r5
 800cd02:	dc26      	bgt.n	800cd52 <_printf_common+0x96>
 800cd04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd08:	1e13      	subs	r3, r2, #0
 800cd0a:	6822      	ldr	r2, [r4, #0]
 800cd0c:	bf18      	it	ne
 800cd0e:	2301      	movne	r3, #1
 800cd10:	0692      	lsls	r2, r2, #26
 800cd12:	d42b      	bmi.n	800cd6c <_printf_common+0xb0>
 800cd14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd18:	4649      	mov	r1, r9
 800cd1a:	4638      	mov	r0, r7
 800cd1c:	47c0      	blx	r8
 800cd1e:	3001      	adds	r0, #1
 800cd20:	d01e      	beq.n	800cd60 <_printf_common+0xa4>
 800cd22:	6823      	ldr	r3, [r4, #0]
 800cd24:	68e5      	ldr	r5, [r4, #12]
 800cd26:	6832      	ldr	r2, [r6, #0]
 800cd28:	f003 0306 	and.w	r3, r3, #6
 800cd2c:	2b04      	cmp	r3, #4
 800cd2e:	bf08      	it	eq
 800cd30:	1aad      	subeq	r5, r5, r2
 800cd32:	68a3      	ldr	r3, [r4, #8]
 800cd34:	6922      	ldr	r2, [r4, #16]
 800cd36:	bf0c      	ite	eq
 800cd38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd3c:	2500      	movne	r5, #0
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	bfc4      	itt	gt
 800cd42:	1a9b      	subgt	r3, r3, r2
 800cd44:	18ed      	addgt	r5, r5, r3
 800cd46:	2600      	movs	r6, #0
 800cd48:	341a      	adds	r4, #26
 800cd4a:	42b5      	cmp	r5, r6
 800cd4c:	d11a      	bne.n	800cd84 <_printf_common+0xc8>
 800cd4e:	2000      	movs	r0, #0
 800cd50:	e008      	b.n	800cd64 <_printf_common+0xa8>
 800cd52:	2301      	movs	r3, #1
 800cd54:	4652      	mov	r2, sl
 800cd56:	4649      	mov	r1, r9
 800cd58:	4638      	mov	r0, r7
 800cd5a:	47c0      	blx	r8
 800cd5c:	3001      	adds	r0, #1
 800cd5e:	d103      	bne.n	800cd68 <_printf_common+0xac>
 800cd60:	f04f 30ff 	mov.w	r0, #4294967295
 800cd64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd68:	3501      	adds	r5, #1
 800cd6a:	e7c6      	b.n	800ccfa <_printf_common+0x3e>
 800cd6c:	18e1      	adds	r1, r4, r3
 800cd6e:	1c5a      	adds	r2, r3, #1
 800cd70:	2030      	movs	r0, #48	; 0x30
 800cd72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd76:	4422      	add	r2, r4
 800cd78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd80:	3302      	adds	r3, #2
 800cd82:	e7c7      	b.n	800cd14 <_printf_common+0x58>
 800cd84:	2301      	movs	r3, #1
 800cd86:	4622      	mov	r2, r4
 800cd88:	4649      	mov	r1, r9
 800cd8a:	4638      	mov	r0, r7
 800cd8c:	47c0      	blx	r8
 800cd8e:	3001      	adds	r0, #1
 800cd90:	d0e6      	beq.n	800cd60 <_printf_common+0xa4>
 800cd92:	3601      	adds	r6, #1
 800cd94:	e7d9      	b.n	800cd4a <_printf_common+0x8e>
	...

0800cd98 <_printf_i>:
 800cd98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd9c:	7e0f      	ldrb	r7, [r1, #24]
 800cd9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cda0:	2f78      	cmp	r7, #120	; 0x78
 800cda2:	4691      	mov	r9, r2
 800cda4:	4680      	mov	r8, r0
 800cda6:	460c      	mov	r4, r1
 800cda8:	469a      	mov	sl, r3
 800cdaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cdae:	d807      	bhi.n	800cdc0 <_printf_i+0x28>
 800cdb0:	2f62      	cmp	r7, #98	; 0x62
 800cdb2:	d80a      	bhi.n	800cdca <_printf_i+0x32>
 800cdb4:	2f00      	cmp	r7, #0
 800cdb6:	f000 80d8 	beq.w	800cf6a <_printf_i+0x1d2>
 800cdba:	2f58      	cmp	r7, #88	; 0x58
 800cdbc:	f000 80a3 	beq.w	800cf06 <_printf_i+0x16e>
 800cdc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cdc8:	e03a      	b.n	800ce40 <_printf_i+0xa8>
 800cdca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cdce:	2b15      	cmp	r3, #21
 800cdd0:	d8f6      	bhi.n	800cdc0 <_printf_i+0x28>
 800cdd2:	a101      	add	r1, pc, #4	; (adr r1, 800cdd8 <_printf_i+0x40>)
 800cdd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdd8:	0800ce31 	.word	0x0800ce31
 800cddc:	0800ce45 	.word	0x0800ce45
 800cde0:	0800cdc1 	.word	0x0800cdc1
 800cde4:	0800cdc1 	.word	0x0800cdc1
 800cde8:	0800cdc1 	.word	0x0800cdc1
 800cdec:	0800cdc1 	.word	0x0800cdc1
 800cdf0:	0800ce45 	.word	0x0800ce45
 800cdf4:	0800cdc1 	.word	0x0800cdc1
 800cdf8:	0800cdc1 	.word	0x0800cdc1
 800cdfc:	0800cdc1 	.word	0x0800cdc1
 800ce00:	0800cdc1 	.word	0x0800cdc1
 800ce04:	0800cf51 	.word	0x0800cf51
 800ce08:	0800ce75 	.word	0x0800ce75
 800ce0c:	0800cf33 	.word	0x0800cf33
 800ce10:	0800cdc1 	.word	0x0800cdc1
 800ce14:	0800cdc1 	.word	0x0800cdc1
 800ce18:	0800cf73 	.word	0x0800cf73
 800ce1c:	0800cdc1 	.word	0x0800cdc1
 800ce20:	0800ce75 	.word	0x0800ce75
 800ce24:	0800cdc1 	.word	0x0800cdc1
 800ce28:	0800cdc1 	.word	0x0800cdc1
 800ce2c:	0800cf3b 	.word	0x0800cf3b
 800ce30:	682b      	ldr	r3, [r5, #0]
 800ce32:	1d1a      	adds	r2, r3, #4
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	602a      	str	r2, [r5, #0]
 800ce38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce40:	2301      	movs	r3, #1
 800ce42:	e0a3      	b.n	800cf8c <_printf_i+0x1f4>
 800ce44:	6820      	ldr	r0, [r4, #0]
 800ce46:	6829      	ldr	r1, [r5, #0]
 800ce48:	0606      	lsls	r6, r0, #24
 800ce4a:	f101 0304 	add.w	r3, r1, #4
 800ce4e:	d50a      	bpl.n	800ce66 <_printf_i+0xce>
 800ce50:	680e      	ldr	r6, [r1, #0]
 800ce52:	602b      	str	r3, [r5, #0]
 800ce54:	2e00      	cmp	r6, #0
 800ce56:	da03      	bge.n	800ce60 <_printf_i+0xc8>
 800ce58:	232d      	movs	r3, #45	; 0x2d
 800ce5a:	4276      	negs	r6, r6
 800ce5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce60:	485e      	ldr	r0, [pc, #376]	; (800cfdc <_printf_i+0x244>)
 800ce62:	230a      	movs	r3, #10
 800ce64:	e019      	b.n	800ce9a <_printf_i+0x102>
 800ce66:	680e      	ldr	r6, [r1, #0]
 800ce68:	602b      	str	r3, [r5, #0]
 800ce6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ce6e:	bf18      	it	ne
 800ce70:	b236      	sxthne	r6, r6
 800ce72:	e7ef      	b.n	800ce54 <_printf_i+0xbc>
 800ce74:	682b      	ldr	r3, [r5, #0]
 800ce76:	6820      	ldr	r0, [r4, #0]
 800ce78:	1d19      	adds	r1, r3, #4
 800ce7a:	6029      	str	r1, [r5, #0]
 800ce7c:	0601      	lsls	r1, r0, #24
 800ce7e:	d501      	bpl.n	800ce84 <_printf_i+0xec>
 800ce80:	681e      	ldr	r6, [r3, #0]
 800ce82:	e002      	b.n	800ce8a <_printf_i+0xf2>
 800ce84:	0646      	lsls	r6, r0, #25
 800ce86:	d5fb      	bpl.n	800ce80 <_printf_i+0xe8>
 800ce88:	881e      	ldrh	r6, [r3, #0]
 800ce8a:	4854      	ldr	r0, [pc, #336]	; (800cfdc <_printf_i+0x244>)
 800ce8c:	2f6f      	cmp	r7, #111	; 0x6f
 800ce8e:	bf0c      	ite	eq
 800ce90:	2308      	moveq	r3, #8
 800ce92:	230a      	movne	r3, #10
 800ce94:	2100      	movs	r1, #0
 800ce96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce9a:	6865      	ldr	r5, [r4, #4]
 800ce9c:	60a5      	str	r5, [r4, #8]
 800ce9e:	2d00      	cmp	r5, #0
 800cea0:	bfa2      	ittt	ge
 800cea2:	6821      	ldrge	r1, [r4, #0]
 800cea4:	f021 0104 	bicge.w	r1, r1, #4
 800cea8:	6021      	strge	r1, [r4, #0]
 800ceaa:	b90e      	cbnz	r6, 800ceb0 <_printf_i+0x118>
 800ceac:	2d00      	cmp	r5, #0
 800ceae:	d04d      	beq.n	800cf4c <_printf_i+0x1b4>
 800ceb0:	4615      	mov	r5, r2
 800ceb2:	fbb6 f1f3 	udiv	r1, r6, r3
 800ceb6:	fb03 6711 	mls	r7, r3, r1, r6
 800ceba:	5dc7      	ldrb	r7, [r0, r7]
 800cebc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cec0:	4637      	mov	r7, r6
 800cec2:	42bb      	cmp	r3, r7
 800cec4:	460e      	mov	r6, r1
 800cec6:	d9f4      	bls.n	800ceb2 <_printf_i+0x11a>
 800cec8:	2b08      	cmp	r3, #8
 800ceca:	d10b      	bne.n	800cee4 <_printf_i+0x14c>
 800cecc:	6823      	ldr	r3, [r4, #0]
 800cece:	07de      	lsls	r6, r3, #31
 800ced0:	d508      	bpl.n	800cee4 <_printf_i+0x14c>
 800ced2:	6923      	ldr	r3, [r4, #16]
 800ced4:	6861      	ldr	r1, [r4, #4]
 800ced6:	4299      	cmp	r1, r3
 800ced8:	bfde      	ittt	le
 800ceda:	2330      	movle	r3, #48	; 0x30
 800cedc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cee0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cee4:	1b52      	subs	r2, r2, r5
 800cee6:	6122      	str	r2, [r4, #16]
 800cee8:	f8cd a000 	str.w	sl, [sp]
 800ceec:	464b      	mov	r3, r9
 800ceee:	aa03      	add	r2, sp, #12
 800cef0:	4621      	mov	r1, r4
 800cef2:	4640      	mov	r0, r8
 800cef4:	f7ff fee2 	bl	800ccbc <_printf_common>
 800cef8:	3001      	adds	r0, #1
 800cefa:	d14c      	bne.n	800cf96 <_printf_i+0x1fe>
 800cefc:	f04f 30ff 	mov.w	r0, #4294967295
 800cf00:	b004      	add	sp, #16
 800cf02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf06:	4835      	ldr	r0, [pc, #212]	; (800cfdc <_printf_i+0x244>)
 800cf08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cf0c:	6829      	ldr	r1, [r5, #0]
 800cf0e:	6823      	ldr	r3, [r4, #0]
 800cf10:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf14:	6029      	str	r1, [r5, #0]
 800cf16:	061d      	lsls	r5, r3, #24
 800cf18:	d514      	bpl.n	800cf44 <_printf_i+0x1ac>
 800cf1a:	07df      	lsls	r7, r3, #31
 800cf1c:	bf44      	itt	mi
 800cf1e:	f043 0320 	orrmi.w	r3, r3, #32
 800cf22:	6023      	strmi	r3, [r4, #0]
 800cf24:	b91e      	cbnz	r6, 800cf2e <_printf_i+0x196>
 800cf26:	6823      	ldr	r3, [r4, #0]
 800cf28:	f023 0320 	bic.w	r3, r3, #32
 800cf2c:	6023      	str	r3, [r4, #0]
 800cf2e:	2310      	movs	r3, #16
 800cf30:	e7b0      	b.n	800ce94 <_printf_i+0xfc>
 800cf32:	6823      	ldr	r3, [r4, #0]
 800cf34:	f043 0320 	orr.w	r3, r3, #32
 800cf38:	6023      	str	r3, [r4, #0]
 800cf3a:	2378      	movs	r3, #120	; 0x78
 800cf3c:	4828      	ldr	r0, [pc, #160]	; (800cfe0 <_printf_i+0x248>)
 800cf3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf42:	e7e3      	b.n	800cf0c <_printf_i+0x174>
 800cf44:	0659      	lsls	r1, r3, #25
 800cf46:	bf48      	it	mi
 800cf48:	b2b6      	uxthmi	r6, r6
 800cf4a:	e7e6      	b.n	800cf1a <_printf_i+0x182>
 800cf4c:	4615      	mov	r5, r2
 800cf4e:	e7bb      	b.n	800cec8 <_printf_i+0x130>
 800cf50:	682b      	ldr	r3, [r5, #0]
 800cf52:	6826      	ldr	r6, [r4, #0]
 800cf54:	6961      	ldr	r1, [r4, #20]
 800cf56:	1d18      	adds	r0, r3, #4
 800cf58:	6028      	str	r0, [r5, #0]
 800cf5a:	0635      	lsls	r5, r6, #24
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	d501      	bpl.n	800cf64 <_printf_i+0x1cc>
 800cf60:	6019      	str	r1, [r3, #0]
 800cf62:	e002      	b.n	800cf6a <_printf_i+0x1d2>
 800cf64:	0670      	lsls	r0, r6, #25
 800cf66:	d5fb      	bpl.n	800cf60 <_printf_i+0x1c8>
 800cf68:	8019      	strh	r1, [r3, #0]
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	6123      	str	r3, [r4, #16]
 800cf6e:	4615      	mov	r5, r2
 800cf70:	e7ba      	b.n	800cee8 <_printf_i+0x150>
 800cf72:	682b      	ldr	r3, [r5, #0]
 800cf74:	1d1a      	adds	r2, r3, #4
 800cf76:	602a      	str	r2, [r5, #0]
 800cf78:	681d      	ldr	r5, [r3, #0]
 800cf7a:	6862      	ldr	r2, [r4, #4]
 800cf7c:	2100      	movs	r1, #0
 800cf7e:	4628      	mov	r0, r5
 800cf80:	f7f3 f93e 	bl	8000200 <memchr>
 800cf84:	b108      	cbz	r0, 800cf8a <_printf_i+0x1f2>
 800cf86:	1b40      	subs	r0, r0, r5
 800cf88:	6060      	str	r0, [r4, #4]
 800cf8a:	6863      	ldr	r3, [r4, #4]
 800cf8c:	6123      	str	r3, [r4, #16]
 800cf8e:	2300      	movs	r3, #0
 800cf90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf94:	e7a8      	b.n	800cee8 <_printf_i+0x150>
 800cf96:	6923      	ldr	r3, [r4, #16]
 800cf98:	462a      	mov	r2, r5
 800cf9a:	4649      	mov	r1, r9
 800cf9c:	4640      	mov	r0, r8
 800cf9e:	47d0      	blx	sl
 800cfa0:	3001      	adds	r0, #1
 800cfa2:	d0ab      	beq.n	800cefc <_printf_i+0x164>
 800cfa4:	6823      	ldr	r3, [r4, #0]
 800cfa6:	079b      	lsls	r3, r3, #30
 800cfa8:	d413      	bmi.n	800cfd2 <_printf_i+0x23a>
 800cfaa:	68e0      	ldr	r0, [r4, #12]
 800cfac:	9b03      	ldr	r3, [sp, #12]
 800cfae:	4298      	cmp	r0, r3
 800cfb0:	bfb8      	it	lt
 800cfb2:	4618      	movlt	r0, r3
 800cfb4:	e7a4      	b.n	800cf00 <_printf_i+0x168>
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	4632      	mov	r2, r6
 800cfba:	4649      	mov	r1, r9
 800cfbc:	4640      	mov	r0, r8
 800cfbe:	47d0      	blx	sl
 800cfc0:	3001      	adds	r0, #1
 800cfc2:	d09b      	beq.n	800cefc <_printf_i+0x164>
 800cfc4:	3501      	adds	r5, #1
 800cfc6:	68e3      	ldr	r3, [r4, #12]
 800cfc8:	9903      	ldr	r1, [sp, #12]
 800cfca:	1a5b      	subs	r3, r3, r1
 800cfcc:	42ab      	cmp	r3, r5
 800cfce:	dcf2      	bgt.n	800cfb6 <_printf_i+0x21e>
 800cfd0:	e7eb      	b.n	800cfaa <_printf_i+0x212>
 800cfd2:	2500      	movs	r5, #0
 800cfd4:	f104 0619 	add.w	r6, r4, #25
 800cfd8:	e7f5      	b.n	800cfc6 <_printf_i+0x22e>
 800cfda:	bf00      	nop
 800cfdc:	0800f5a2 	.word	0x0800f5a2
 800cfe0:	0800f5b3 	.word	0x0800f5b3

0800cfe4 <_sbrk_r>:
 800cfe4:	b538      	push	{r3, r4, r5, lr}
 800cfe6:	4d06      	ldr	r5, [pc, #24]	; (800d000 <_sbrk_r+0x1c>)
 800cfe8:	2300      	movs	r3, #0
 800cfea:	4604      	mov	r4, r0
 800cfec:	4608      	mov	r0, r1
 800cfee:	602b      	str	r3, [r5, #0]
 800cff0:	f002 f9ce 	bl	800f390 <_sbrk>
 800cff4:	1c43      	adds	r3, r0, #1
 800cff6:	d102      	bne.n	800cffe <_sbrk_r+0x1a>
 800cff8:	682b      	ldr	r3, [r5, #0]
 800cffa:	b103      	cbz	r3, 800cffe <_sbrk_r+0x1a>
 800cffc:	6023      	str	r3, [r4, #0]
 800cffe:	bd38      	pop	{r3, r4, r5, pc}
 800d000:	200081f8 	.word	0x200081f8

0800d004 <_vsniprintf_r>:
 800d004:	b530      	push	{r4, r5, lr}
 800d006:	4614      	mov	r4, r2
 800d008:	2c00      	cmp	r4, #0
 800d00a:	b09b      	sub	sp, #108	; 0x6c
 800d00c:	4605      	mov	r5, r0
 800d00e:	461a      	mov	r2, r3
 800d010:	da05      	bge.n	800d01e <_vsniprintf_r+0x1a>
 800d012:	238b      	movs	r3, #139	; 0x8b
 800d014:	6003      	str	r3, [r0, #0]
 800d016:	f04f 30ff 	mov.w	r0, #4294967295
 800d01a:	b01b      	add	sp, #108	; 0x6c
 800d01c:	bd30      	pop	{r4, r5, pc}
 800d01e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d022:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d026:	bf14      	ite	ne
 800d028:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d02c:	4623      	moveq	r3, r4
 800d02e:	9302      	str	r3, [sp, #8]
 800d030:	9305      	str	r3, [sp, #20]
 800d032:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d036:	9100      	str	r1, [sp, #0]
 800d038:	9104      	str	r1, [sp, #16]
 800d03a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d03e:	4669      	mov	r1, sp
 800d040:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d042:	f001 fb93 	bl	800e76c <_svfiprintf_r>
 800d046:	1c43      	adds	r3, r0, #1
 800d048:	bfbc      	itt	lt
 800d04a:	238b      	movlt	r3, #139	; 0x8b
 800d04c:	602b      	strlt	r3, [r5, #0]
 800d04e:	2c00      	cmp	r4, #0
 800d050:	d0e3      	beq.n	800d01a <_vsniprintf_r+0x16>
 800d052:	9b00      	ldr	r3, [sp, #0]
 800d054:	2200      	movs	r2, #0
 800d056:	701a      	strb	r2, [r3, #0]
 800d058:	e7df      	b.n	800d01a <_vsniprintf_r+0x16>
	...

0800d05c <vsniprintf>:
 800d05c:	b507      	push	{r0, r1, r2, lr}
 800d05e:	9300      	str	r3, [sp, #0]
 800d060:	4613      	mov	r3, r2
 800d062:	460a      	mov	r2, r1
 800d064:	4601      	mov	r1, r0
 800d066:	4803      	ldr	r0, [pc, #12]	; (800d074 <vsniprintf+0x18>)
 800d068:	6800      	ldr	r0, [r0, #0]
 800d06a:	f7ff ffcb 	bl	800d004 <_vsniprintf_r>
 800d06e:	b003      	add	sp, #12
 800d070:	f85d fb04 	ldr.w	pc, [sp], #4
 800d074:	2000001c 	.word	0x2000001c

0800d078 <quorem>:
 800d078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d07c:	6903      	ldr	r3, [r0, #16]
 800d07e:	690c      	ldr	r4, [r1, #16]
 800d080:	42a3      	cmp	r3, r4
 800d082:	4607      	mov	r7, r0
 800d084:	f2c0 8081 	blt.w	800d18a <quorem+0x112>
 800d088:	3c01      	subs	r4, #1
 800d08a:	f101 0814 	add.w	r8, r1, #20
 800d08e:	f100 0514 	add.w	r5, r0, #20
 800d092:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d096:	9301      	str	r3, [sp, #4]
 800d098:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d09c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d0a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d0ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800d0b0:	d331      	bcc.n	800d116 <quorem+0x9e>
 800d0b2:	f04f 0e00 	mov.w	lr, #0
 800d0b6:	4640      	mov	r0, r8
 800d0b8:	46ac      	mov	ip, r5
 800d0ba:	46f2      	mov	sl, lr
 800d0bc:	f850 2b04 	ldr.w	r2, [r0], #4
 800d0c0:	b293      	uxth	r3, r2
 800d0c2:	fb06 e303 	mla	r3, r6, r3, lr
 800d0c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	ebaa 0303 	sub.w	r3, sl, r3
 800d0d0:	f8dc a000 	ldr.w	sl, [ip]
 800d0d4:	0c12      	lsrs	r2, r2, #16
 800d0d6:	fa13 f38a 	uxtah	r3, r3, sl
 800d0da:	fb06 e202 	mla	r2, r6, r2, lr
 800d0de:	9300      	str	r3, [sp, #0]
 800d0e0:	9b00      	ldr	r3, [sp, #0]
 800d0e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d0e6:	b292      	uxth	r2, r2
 800d0e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d0ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d0f0:	f8bd 3000 	ldrh.w	r3, [sp]
 800d0f4:	4581      	cmp	r9, r0
 800d0f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0fa:	f84c 3b04 	str.w	r3, [ip], #4
 800d0fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d102:	d2db      	bcs.n	800d0bc <quorem+0x44>
 800d104:	f855 300b 	ldr.w	r3, [r5, fp]
 800d108:	b92b      	cbnz	r3, 800d116 <quorem+0x9e>
 800d10a:	9b01      	ldr	r3, [sp, #4]
 800d10c:	3b04      	subs	r3, #4
 800d10e:	429d      	cmp	r5, r3
 800d110:	461a      	mov	r2, r3
 800d112:	d32e      	bcc.n	800d172 <quorem+0xfa>
 800d114:	613c      	str	r4, [r7, #16]
 800d116:	4638      	mov	r0, r7
 800d118:	f001 f9b4 	bl	800e484 <__mcmp>
 800d11c:	2800      	cmp	r0, #0
 800d11e:	db24      	blt.n	800d16a <quorem+0xf2>
 800d120:	3601      	adds	r6, #1
 800d122:	4628      	mov	r0, r5
 800d124:	f04f 0c00 	mov.w	ip, #0
 800d128:	f858 2b04 	ldr.w	r2, [r8], #4
 800d12c:	f8d0 e000 	ldr.w	lr, [r0]
 800d130:	b293      	uxth	r3, r2
 800d132:	ebac 0303 	sub.w	r3, ip, r3
 800d136:	0c12      	lsrs	r2, r2, #16
 800d138:	fa13 f38e 	uxtah	r3, r3, lr
 800d13c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d140:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d144:	b29b      	uxth	r3, r3
 800d146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d14a:	45c1      	cmp	r9, r8
 800d14c:	f840 3b04 	str.w	r3, [r0], #4
 800d150:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d154:	d2e8      	bcs.n	800d128 <quorem+0xb0>
 800d156:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d15a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d15e:	b922      	cbnz	r2, 800d16a <quorem+0xf2>
 800d160:	3b04      	subs	r3, #4
 800d162:	429d      	cmp	r5, r3
 800d164:	461a      	mov	r2, r3
 800d166:	d30a      	bcc.n	800d17e <quorem+0x106>
 800d168:	613c      	str	r4, [r7, #16]
 800d16a:	4630      	mov	r0, r6
 800d16c:	b003      	add	sp, #12
 800d16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d172:	6812      	ldr	r2, [r2, #0]
 800d174:	3b04      	subs	r3, #4
 800d176:	2a00      	cmp	r2, #0
 800d178:	d1cc      	bne.n	800d114 <quorem+0x9c>
 800d17a:	3c01      	subs	r4, #1
 800d17c:	e7c7      	b.n	800d10e <quorem+0x96>
 800d17e:	6812      	ldr	r2, [r2, #0]
 800d180:	3b04      	subs	r3, #4
 800d182:	2a00      	cmp	r2, #0
 800d184:	d1f0      	bne.n	800d168 <quorem+0xf0>
 800d186:	3c01      	subs	r4, #1
 800d188:	e7eb      	b.n	800d162 <quorem+0xea>
 800d18a:	2000      	movs	r0, #0
 800d18c:	e7ee      	b.n	800d16c <quorem+0xf4>
	...

0800d190 <_dtoa_r>:
 800d190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d194:	ed2d 8b04 	vpush	{d8-d9}
 800d198:	ec57 6b10 	vmov	r6, r7, d0
 800d19c:	b093      	sub	sp, #76	; 0x4c
 800d19e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d1a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d1a4:	9106      	str	r1, [sp, #24]
 800d1a6:	ee10 aa10 	vmov	sl, s0
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	9209      	str	r2, [sp, #36]	; 0x24
 800d1ae:	930c      	str	r3, [sp, #48]	; 0x30
 800d1b0:	46bb      	mov	fp, r7
 800d1b2:	b975      	cbnz	r5, 800d1d2 <_dtoa_r+0x42>
 800d1b4:	2010      	movs	r0, #16
 800d1b6:	f7ff f9a5 	bl	800c504 <malloc>
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	6260      	str	r0, [r4, #36]	; 0x24
 800d1be:	b920      	cbnz	r0, 800d1ca <_dtoa_r+0x3a>
 800d1c0:	4ba7      	ldr	r3, [pc, #668]	; (800d460 <_dtoa_r+0x2d0>)
 800d1c2:	21ea      	movs	r1, #234	; 0xea
 800d1c4:	48a7      	ldr	r0, [pc, #668]	; (800d464 <_dtoa_r+0x2d4>)
 800d1c6:	f001 fe41 	bl	800ee4c <__assert_func>
 800d1ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d1ce:	6005      	str	r5, [r0, #0]
 800d1d0:	60c5      	str	r5, [r0, #12]
 800d1d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1d4:	6819      	ldr	r1, [r3, #0]
 800d1d6:	b151      	cbz	r1, 800d1ee <_dtoa_r+0x5e>
 800d1d8:	685a      	ldr	r2, [r3, #4]
 800d1da:	604a      	str	r2, [r1, #4]
 800d1dc:	2301      	movs	r3, #1
 800d1de:	4093      	lsls	r3, r2
 800d1e0:	608b      	str	r3, [r1, #8]
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f000 ff0c 	bl	800e000 <_Bfree>
 800d1e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	601a      	str	r2, [r3, #0]
 800d1ee:	1e3b      	subs	r3, r7, #0
 800d1f0:	bfaa      	itet	ge
 800d1f2:	2300      	movge	r3, #0
 800d1f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d1f8:	f8c8 3000 	strge.w	r3, [r8]
 800d1fc:	4b9a      	ldr	r3, [pc, #616]	; (800d468 <_dtoa_r+0x2d8>)
 800d1fe:	bfbc      	itt	lt
 800d200:	2201      	movlt	r2, #1
 800d202:	f8c8 2000 	strlt.w	r2, [r8]
 800d206:	ea33 030b 	bics.w	r3, r3, fp
 800d20a:	d11b      	bne.n	800d244 <_dtoa_r+0xb4>
 800d20c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d20e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d212:	6013      	str	r3, [r2, #0]
 800d214:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d218:	4333      	orrs	r3, r6
 800d21a:	f000 8592 	beq.w	800dd42 <_dtoa_r+0xbb2>
 800d21e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d220:	b963      	cbnz	r3, 800d23c <_dtoa_r+0xac>
 800d222:	4b92      	ldr	r3, [pc, #584]	; (800d46c <_dtoa_r+0x2dc>)
 800d224:	e022      	b.n	800d26c <_dtoa_r+0xdc>
 800d226:	4b92      	ldr	r3, [pc, #584]	; (800d470 <_dtoa_r+0x2e0>)
 800d228:	9301      	str	r3, [sp, #4]
 800d22a:	3308      	adds	r3, #8
 800d22c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d22e:	6013      	str	r3, [r2, #0]
 800d230:	9801      	ldr	r0, [sp, #4]
 800d232:	b013      	add	sp, #76	; 0x4c
 800d234:	ecbd 8b04 	vpop	{d8-d9}
 800d238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23c:	4b8b      	ldr	r3, [pc, #556]	; (800d46c <_dtoa_r+0x2dc>)
 800d23e:	9301      	str	r3, [sp, #4]
 800d240:	3303      	adds	r3, #3
 800d242:	e7f3      	b.n	800d22c <_dtoa_r+0x9c>
 800d244:	2200      	movs	r2, #0
 800d246:	2300      	movs	r3, #0
 800d248:	4650      	mov	r0, sl
 800d24a:	4659      	mov	r1, fp
 800d24c:	f7f3 fc4c 	bl	8000ae8 <__aeabi_dcmpeq>
 800d250:	ec4b ab19 	vmov	d9, sl, fp
 800d254:	4680      	mov	r8, r0
 800d256:	b158      	cbz	r0, 800d270 <_dtoa_r+0xe0>
 800d258:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d25a:	2301      	movs	r3, #1
 800d25c:	6013      	str	r3, [r2, #0]
 800d25e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d260:	2b00      	cmp	r3, #0
 800d262:	f000 856b 	beq.w	800dd3c <_dtoa_r+0xbac>
 800d266:	4883      	ldr	r0, [pc, #524]	; (800d474 <_dtoa_r+0x2e4>)
 800d268:	6018      	str	r0, [r3, #0]
 800d26a:	1e43      	subs	r3, r0, #1
 800d26c:	9301      	str	r3, [sp, #4]
 800d26e:	e7df      	b.n	800d230 <_dtoa_r+0xa0>
 800d270:	ec4b ab10 	vmov	d0, sl, fp
 800d274:	aa10      	add	r2, sp, #64	; 0x40
 800d276:	a911      	add	r1, sp, #68	; 0x44
 800d278:	4620      	mov	r0, r4
 800d27a:	f001 f9a9 	bl	800e5d0 <__d2b>
 800d27e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d282:	ee08 0a10 	vmov	s16, r0
 800d286:	2d00      	cmp	r5, #0
 800d288:	f000 8084 	beq.w	800d394 <_dtoa_r+0x204>
 800d28c:	ee19 3a90 	vmov	r3, s19
 800d290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d294:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d298:	4656      	mov	r6, sl
 800d29a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d29e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d2a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d2a6:	4b74      	ldr	r3, [pc, #464]	; (800d478 <_dtoa_r+0x2e8>)
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	4630      	mov	r0, r6
 800d2ac:	4639      	mov	r1, r7
 800d2ae:	f7f2 fffb 	bl	80002a8 <__aeabi_dsub>
 800d2b2:	a365      	add	r3, pc, #404	; (adr r3, 800d448 <_dtoa_r+0x2b8>)
 800d2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b8:	f7f3 f9ae 	bl	8000618 <__aeabi_dmul>
 800d2bc:	a364      	add	r3, pc, #400	; (adr r3, 800d450 <_dtoa_r+0x2c0>)
 800d2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c2:	f7f2 fff3 	bl	80002ac <__adddf3>
 800d2c6:	4606      	mov	r6, r0
 800d2c8:	4628      	mov	r0, r5
 800d2ca:	460f      	mov	r7, r1
 800d2cc:	f7f3 f93a 	bl	8000544 <__aeabi_i2d>
 800d2d0:	a361      	add	r3, pc, #388	; (adr r3, 800d458 <_dtoa_r+0x2c8>)
 800d2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d6:	f7f3 f99f 	bl	8000618 <__aeabi_dmul>
 800d2da:	4602      	mov	r2, r0
 800d2dc:	460b      	mov	r3, r1
 800d2de:	4630      	mov	r0, r6
 800d2e0:	4639      	mov	r1, r7
 800d2e2:	f7f2 ffe3 	bl	80002ac <__adddf3>
 800d2e6:	4606      	mov	r6, r0
 800d2e8:	460f      	mov	r7, r1
 800d2ea:	f7f3 fc45 	bl	8000b78 <__aeabi_d2iz>
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	9000      	str	r0, [sp, #0]
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	4639      	mov	r1, r7
 800d2f8:	f7f3 fc00 	bl	8000afc <__aeabi_dcmplt>
 800d2fc:	b150      	cbz	r0, 800d314 <_dtoa_r+0x184>
 800d2fe:	9800      	ldr	r0, [sp, #0]
 800d300:	f7f3 f920 	bl	8000544 <__aeabi_i2d>
 800d304:	4632      	mov	r2, r6
 800d306:	463b      	mov	r3, r7
 800d308:	f7f3 fbee 	bl	8000ae8 <__aeabi_dcmpeq>
 800d30c:	b910      	cbnz	r0, 800d314 <_dtoa_r+0x184>
 800d30e:	9b00      	ldr	r3, [sp, #0]
 800d310:	3b01      	subs	r3, #1
 800d312:	9300      	str	r3, [sp, #0]
 800d314:	9b00      	ldr	r3, [sp, #0]
 800d316:	2b16      	cmp	r3, #22
 800d318:	d85a      	bhi.n	800d3d0 <_dtoa_r+0x240>
 800d31a:	9a00      	ldr	r2, [sp, #0]
 800d31c:	4b57      	ldr	r3, [pc, #348]	; (800d47c <_dtoa_r+0x2ec>)
 800d31e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d326:	ec51 0b19 	vmov	r0, r1, d9
 800d32a:	f7f3 fbe7 	bl	8000afc <__aeabi_dcmplt>
 800d32e:	2800      	cmp	r0, #0
 800d330:	d050      	beq.n	800d3d4 <_dtoa_r+0x244>
 800d332:	9b00      	ldr	r3, [sp, #0]
 800d334:	3b01      	subs	r3, #1
 800d336:	9300      	str	r3, [sp, #0]
 800d338:	2300      	movs	r3, #0
 800d33a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d33c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d33e:	1b5d      	subs	r5, r3, r5
 800d340:	1e6b      	subs	r3, r5, #1
 800d342:	9305      	str	r3, [sp, #20]
 800d344:	bf45      	ittet	mi
 800d346:	f1c5 0301 	rsbmi	r3, r5, #1
 800d34a:	9304      	strmi	r3, [sp, #16]
 800d34c:	2300      	movpl	r3, #0
 800d34e:	2300      	movmi	r3, #0
 800d350:	bf4c      	ite	mi
 800d352:	9305      	strmi	r3, [sp, #20]
 800d354:	9304      	strpl	r3, [sp, #16]
 800d356:	9b00      	ldr	r3, [sp, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	db3d      	blt.n	800d3d8 <_dtoa_r+0x248>
 800d35c:	9b05      	ldr	r3, [sp, #20]
 800d35e:	9a00      	ldr	r2, [sp, #0]
 800d360:	920a      	str	r2, [sp, #40]	; 0x28
 800d362:	4413      	add	r3, r2
 800d364:	9305      	str	r3, [sp, #20]
 800d366:	2300      	movs	r3, #0
 800d368:	9307      	str	r3, [sp, #28]
 800d36a:	9b06      	ldr	r3, [sp, #24]
 800d36c:	2b09      	cmp	r3, #9
 800d36e:	f200 8089 	bhi.w	800d484 <_dtoa_r+0x2f4>
 800d372:	2b05      	cmp	r3, #5
 800d374:	bfc4      	itt	gt
 800d376:	3b04      	subgt	r3, #4
 800d378:	9306      	strgt	r3, [sp, #24]
 800d37a:	9b06      	ldr	r3, [sp, #24]
 800d37c:	f1a3 0302 	sub.w	r3, r3, #2
 800d380:	bfcc      	ite	gt
 800d382:	2500      	movgt	r5, #0
 800d384:	2501      	movle	r5, #1
 800d386:	2b03      	cmp	r3, #3
 800d388:	f200 8087 	bhi.w	800d49a <_dtoa_r+0x30a>
 800d38c:	e8df f003 	tbb	[pc, r3]
 800d390:	59383a2d 	.word	0x59383a2d
 800d394:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d398:	441d      	add	r5, r3
 800d39a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d39e:	2b20      	cmp	r3, #32
 800d3a0:	bfc1      	itttt	gt
 800d3a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d3a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d3aa:	fa0b f303 	lslgt.w	r3, fp, r3
 800d3ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d3b2:	bfda      	itte	le
 800d3b4:	f1c3 0320 	rsble	r3, r3, #32
 800d3b8:	fa06 f003 	lslle.w	r0, r6, r3
 800d3bc:	4318      	orrgt	r0, r3
 800d3be:	f7f3 f8b1 	bl	8000524 <__aeabi_ui2d>
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	4606      	mov	r6, r0
 800d3c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d3ca:	3d01      	subs	r5, #1
 800d3cc:	930e      	str	r3, [sp, #56]	; 0x38
 800d3ce:	e76a      	b.n	800d2a6 <_dtoa_r+0x116>
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	e7b2      	b.n	800d33a <_dtoa_r+0x1aa>
 800d3d4:	900b      	str	r0, [sp, #44]	; 0x2c
 800d3d6:	e7b1      	b.n	800d33c <_dtoa_r+0x1ac>
 800d3d8:	9b04      	ldr	r3, [sp, #16]
 800d3da:	9a00      	ldr	r2, [sp, #0]
 800d3dc:	1a9b      	subs	r3, r3, r2
 800d3de:	9304      	str	r3, [sp, #16]
 800d3e0:	4253      	negs	r3, r2
 800d3e2:	9307      	str	r3, [sp, #28]
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	930a      	str	r3, [sp, #40]	; 0x28
 800d3e8:	e7bf      	b.n	800d36a <_dtoa_r+0x1da>
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	9308      	str	r3, [sp, #32]
 800d3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	dc55      	bgt.n	800d4a0 <_dtoa_r+0x310>
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	9209      	str	r2, [sp, #36]	; 0x24
 800d3fe:	e00c      	b.n	800d41a <_dtoa_r+0x28a>
 800d400:	2301      	movs	r3, #1
 800d402:	e7f3      	b.n	800d3ec <_dtoa_r+0x25c>
 800d404:	2300      	movs	r3, #0
 800d406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d408:	9308      	str	r3, [sp, #32]
 800d40a:	9b00      	ldr	r3, [sp, #0]
 800d40c:	4413      	add	r3, r2
 800d40e:	9302      	str	r3, [sp, #8]
 800d410:	3301      	adds	r3, #1
 800d412:	2b01      	cmp	r3, #1
 800d414:	9303      	str	r3, [sp, #12]
 800d416:	bfb8      	it	lt
 800d418:	2301      	movlt	r3, #1
 800d41a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d41c:	2200      	movs	r2, #0
 800d41e:	6042      	str	r2, [r0, #4]
 800d420:	2204      	movs	r2, #4
 800d422:	f102 0614 	add.w	r6, r2, #20
 800d426:	429e      	cmp	r6, r3
 800d428:	6841      	ldr	r1, [r0, #4]
 800d42a:	d93d      	bls.n	800d4a8 <_dtoa_r+0x318>
 800d42c:	4620      	mov	r0, r4
 800d42e:	f000 fda7 	bl	800df80 <_Balloc>
 800d432:	9001      	str	r0, [sp, #4]
 800d434:	2800      	cmp	r0, #0
 800d436:	d13b      	bne.n	800d4b0 <_dtoa_r+0x320>
 800d438:	4b11      	ldr	r3, [pc, #68]	; (800d480 <_dtoa_r+0x2f0>)
 800d43a:	4602      	mov	r2, r0
 800d43c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d440:	e6c0      	b.n	800d1c4 <_dtoa_r+0x34>
 800d442:	2301      	movs	r3, #1
 800d444:	e7df      	b.n	800d406 <_dtoa_r+0x276>
 800d446:	bf00      	nop
 800d448:	636f4361 	.word	0x636f4361
 800d44c:	3fd287a7 	.word	0x3fd287a7
 800d450:	8b60c8b3 	.word	0x8b60c8b3
 800d454:	3fc68a28 	.word	0x3fc68a28
 800d458:	509f79fb 	.word	0x509f79fb
 800d45c:	3fd34413 	.word	0x3fd34413
 800d460:	0800f5d1 	.word	0x0800f5d1
 800d464:	0800f5e8 	.word	0x0800f5e8
 800d468:	7ff00000 	.word	0x7ff00000
 800d46c:	0800f5cd 	.word	0x0800f5cd
 800d470:	0800f5c4 	.word	0x0800f5c4
 800d474:	0800f5a1 	.word	0x0800f5a1
 800d478:	3ff80000 	.word	0x3ff80000
 800d47c:	0800f738 	.word	0x0800f738
 800d480:	0800f643 	.word	0x0800f643
 800d484:	2501      	movs	r5, #1
 800d486:	2300      	movs	r3, #0
 800d488:	9306      	str	r3, [sp, #24]
 800d48a:	9508      	str	r5, [sp, #32]
 800d48c:	f04f 33ff 	mov.w	r3, #4294967295
 800d490:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d494:	2200      	movs	r2, #0
 800d496:	2312      	movs	r3, #18
 800d498:	e7b0      	b.n	800d3fc <_dtoa_r+0x26c>
 800d49a:	2301      	movs	r3, #1
 800d49c:	9308      	str	r3, [sp, #32]
 800d49e:	e7f5      	b.n	800d48c <_dtoa_r+0x2fc>
 800d4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d4a6:	e7b8      	b.n	800d41a <_dtoa_r+0x28a>
 800d4a8:	3101      	adds	r1, #1
 800d4aa:	6041      	str	r1, [r0, #4]
 800d4ac:	0052      	lsls	r2, r2, #1
 800d4ae:	e7b8      	b.n	800d422 <_dtoa_r+0x292>
 800d4b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4b2:	9a01      	ldr	r2, [sp, #4]
 800d4b4:	601a      	str	r2, [r3, #0]
 800d4b6:	9b03      	ldr	r3, [sp, #12]
 800d4b8:	2b0e      	cmp	r3, #14
 800d4ba:	f200 809d 	bhi.w	800d5f8 <_dtoa_r+0x468>
 800d4be:	2d00      	cmp	r5, #0
 800d4c0:	f000 809a 	beq.w	800d5f8 <_dtoa_r+0x468>
 800d4c4:	9b00      	ldr	r3, [sp, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	dd32      	ble.n	800d530 <_dtoa_r+0x3a0>
 800d4ca:	4ab7      	ldr	r2, [pc, #732]	; (800d7a8 <_dtoa_r+0x618>)
 800d4cc:	f003 030f 	and.w	r3, r3, #15
 800d4d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d4d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d4d8:	9b00      	ldr	r3, [sp, #0]
 800d4da:	05d8      	lsls	r0, r3, #23
 800d4dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d4e0:	d516      	bpl.n	800d510 <_dtoa_r+0x380>
 800d4e2:	4bb2      	ldr	r3, [pc, #712]	; (800d7ac <_dtoa_r+0x61c>)
 800d4e4:	ec51 0b19 	vmov	r0, r1, d9
 800d4e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d4ec:	f7f3 f9be 	bl	800086c <__aeabi_ddiv>
 800d4f0:	f007 070f 	and.w	r7, r7, #15
 800d4f4:	4682      	mov	sl, r0
 800d4f6:	468b      	mov	fp, r1
 800d4f8:	2503      	movs	r5, #3
 800d4fa:	4eac      	ldr	r6, [pc, #688]	; (800d7ac <_dtoa_r+0x61c>)
 800d4fc:	b957      	cbnz	r7, 800d514 <_dtoa_r+0x384>
 800d4fe:	4642      	mov	r2, r8
 800d500:	464b      	mov	r3, r9
 800d502:	4650      	mov	r0, sl
 800d504:	4659      	mov	r1, fp
 800d506:	f7f3 f9b1 	bl	800086c <__aeabi_ddiv>
 800d50a:	4682      	mov	sl, r0
 800d50c:	468b      	mov	fp, r1
 800d50e:	e028      	b.n	800d562 <_dtoa_r+0x3d2>
 800d510:	2502      	movs	r5, #2
 800d512:	e7f2      	b.n	800d4fa <_dtoa_r+0x36a>
 800d514:	07f9      	lsls	r1, r7, #31
 800d516:	d508      	bpl.n	800d52a <_dtoa_r+0x39a>
 800d518:	4640      	mov	r0, r8
 800d51a:	4649      	mov	r1, r9
 800d51c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d520:	f7f3 f87a 	bl	8000618 <__aeabi_dmul>
 800d524:	3501      	adds	r5, #1
 800d526:	4680      	mov	r8, r0
 800d528:	4689      	mov	r9, r1
 800d52a:	107f      	asrs	r7, r7, #1
 800d52c:	3608      	adds	r6, #8
 800d52e:	e7e5      	b.n	800d4fc <_dtoa_r+0x36c>
 800d530:	f000 809b 	beq.w	800d66a <_dtoa_r+0x4da>
 800d534:	9b00      	ldr	r3, [sp, #0]
 800d536:	4f9d      	ldr	r7, [pc, #628]	; (800d7ac <_dtoa_r+0x61c>)
 800d538:	425e      	negs	r6, r3
 800d53a:	4b9b      	ldr	r3, [pc, #620]	; (800d7a8 <_dtoa_r+0x618>)
 800d53c:	f006 020f 	and.w	r2, r6, #15
 800d540:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d548:	ec51 0b19 	vmov	r0, r1, d9
 800d54c:	f7f3 f864 	bl	8000618 <__aeabi_dmul>
 800d550:	1136      	asrs	r6, r6, #4
 800d552:	4682      	mov	sl, r0
 800d554:	468b      	mov	fp, r1
 800d556:	2300      	movs	r3, #0
 800d558:	2502      	movs	r5, #2
 800d55a:	2e00      	cmp	r6, #0
 800d55c:	d17a      	bne.n	800d654 <_dtoa_r+0x4c4>
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d1d3      	bne.n	800d50a <_dtoa_r+0x37a>
 800d562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d564:	2b00      	cmp	r3, #0
 800d566:	f000 8082 	beq.w	800d66e <_dtoa_r+0x4de>
 800d56a:	4b91      	ldr	r3, [pc, #580]	; (800d7b0 <_dtoa_r+0x620>)
 800d56c:	2200      	movs	r2, #0
 800d56e:	4650      	mov	r0, sl
 800d570:	4659      	mov	r1, fp
 800d572:	f7f3 fac3 	bl	8000afc <__aeabi_dcmplt>
 800d576:	2800      	cmp	r0, #0
 800d578:	d079      	beq.n	800d66e <_dtoa_r+0x4de>
 800d57a:	9b03      	ldr	r3, [sp, #12]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d076      	beq.n	800d66e <_dtoa_r+0x4de>
 800d580:	9b02      	ldr	r3, [sp, #8]
 800d582:	2b00      	cmp	r3, #0
 800d584:	dd36      	ble.n	800d5f4 <_dtoa_r+0x464>
 800d586:	9b00      	ldr	r3, [sp, #0]
 800d588:	4650      	mov	r0, sl
 800d58a:	4659      	mov	r1, fp
 800d58c:	1e5f      	subs	r7, r3, #1
 800d58e:	2200      	movs	r2, #0
 800d590:	4b88      	ldr	r3, [pc, #544]	; (800d7b4 <_dtoa_r+0x624>)
 800d592:	f7f3 f841 	bl	8000618 <__aeabi_dmul>
 800d596:	9e02      	ldr	r6, [sp, #8]
 800d598:	4682      	mov	sl, r0
 800d59a:	468b      	mov	fp, r1
 800d59c:	3501      	adds	r5, #1
 800d59e:	4628      	mov	r0, r5
 800d5a0:	f7f2 ffd0 	bl	8000544 <__aeabi_i2d>
 800d5a4:	4652      	mov	r2, sl
 800d5a6:	465b      	mov	r3, fp
 800d5a8:	f7f3 f836 	bl	8000618 <__aeabi_dmul>
 800d5ac:	4b82      	ldr	r3, [pc, #520]	; (800d7b8 <_dtoa_r+0x628>)
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f7f2 fe7c 	bl	80002ac <__adddf3>
 800d5b4:	46d0      	mov	r8, sl
 800d5b6:	46d9      	mov	r9, fp
 800d5b8:	4682      	mov	sl, r0
 800d5ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d5be:	2e00      	cmp	r6, #0
 800d5c0:	d158      	bne.n	800d674 <_dtoa_r+0x4e4>
 800d5c2:	4b7e      	ldr	r3, [pc, #504]	; (800d7bc <_dtoa_r+0x62c>)
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	4640      	mov	r0, r8
 800d5c8:	4649      	mov	r1, r9
 800d5ca:	f7f2 fe6d 	bl	80002a8 <__aeabi_dsub>
 800d5ce:	4652      	mov	r2, sl
 800d5d0:	465b      	mov	r3, fp
 800d5d2:	4680      	mov	r8, r0
 800d5d4:	4689      	mov	r9, r1
 800d5d6:	f7f3 faaf 	bl	8000b38 <__aeabi_dcmpgt>
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	f040 8295 	bne.w	800db0a <_dtoa_r+0x97a>
 800d5e0:	4652      	mov	r2, sl
 800d5e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d5e6:	4640      	mov	r0, r8
 800d5e8:	4649      	mov	r1, r9
 800d5ea:	f7f3 fa87 	bl	8000afc <__aeabi_dcmplt>
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	f040 8289 	bne.w	800db06 <_dtoa_r+0x976>
 800d5f4:	ec5b ab19 	vmov	sl, fp, d9
 800d5f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	f2c0 8148 	blt.w	800d890 <_dtoa_r+0x700>
 800d600:	9a00      	ldr	r2, [sp, #0]
 800d602:	2a0e      	cmp	r2, #14
 800d604:	f300 8144 	bgt.w	800d890 <_dtoa_r+0x700>
 800d608:	4b67      	ldr	r3, [pc, #412]	; (800d7a8 <_dtoa_r+0x618>)
 800d60a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d60e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d614:	2b00      	cmp	r3, #0
 800d616:	f280 80d5 	bge.w	800d7c4 <_dtoa_r+0x634>
 800d61a:	9b03      	ldr	r3, [sp, #12]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	f300 80d1 	bgt.w	800d7c4 <_dtoa_r+0x634>
 800d622:	f040 826f 	bne.w	800db04 <_dtoa_r+0x974>
 800d626:	4b65      	ldr	r3, [pc, #404]	; (800d7bc <_dtoa_r+0x62c>)
 800d628:	2200      	movs	r2, #0
 800d62a:	4640      	mov	r0, r8
 800d62c:	4649      	mov	r1, r9
 800d62e:	f7f2 fff3 	bl	8000618 <__aeabi_dmul>
 800d632:	4652      	mov	r2, sl
 800d634:	465b      	mov	r3, fp
 800d636:	f7f3 fa75 	bl	8000b24 <__aeabi_dcmpge>
 800d63a:	9e03      	ldr	r6, [sp, #12]
 800d63c:	4637      	mov	r7, r6
 800d63e:	2800      	cmp	r0, #0
 800d640:	f040 8245 	bne.w	800dace <_dtoa_r+0x93e>
 800d644:	9d01      	ldr	r5, [sp, #4]
 800d646:	2331      	movs	r3, #49	; 0x31
 800d648:	f805 3b01 	strb.w	r3, [r5], #1
 800d64c:	9b00      	ldr	r3, [sp, #0]
 800d64e:	3301      	adds	r3, #1
 800d650:	9300      	str	r3, [sp, #0]
 800d652:	e240      	b.n	800dad6 <_dtoa_r+0x946>
 800d654:	07f2      	lsls	r2, r6, #31
 800d656:	d505      	bpl.n	800d664 <_dtoa_r+0x4d4>
 800d658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d65c:	f7f2 ffdc 	bl	8000618 <__aeabi_dmul>
 800d660:	3501      	adds	r5, #1
 800d662:	2301      	movs	r3, #1
 800d664:	1076      	asrs	r6, r6, #1
 800d666:	3708      	adds	r7, #8
 800d668:	e777      	b.n	800d55a <_dtoa_r+0x3ca>
 800d66a:	2502      	movs	r5, #2
 800d66c:	e779      	b.n	800d562 <_dtoa_r+0x3d2>
 800d66e:	9f00      	ldr	r7, [sp, #0]
 800d670:	9e03      	ldr	r6, [sp, #12]
 800d672:	e794      	b.n	800d59e <_dtoa_r+0x40e>
 800d674:	9901      	ldr	r1, [sp, #4]
 800d676:	4b4c      	ldr	r3, [pc, #304]	; (800d7a8 <_dtoa_r+0x618>)
 800d678:	4431      	add	r1, r6
 800d67a:	910d      	str	r1, [sp, #52]	; 0x34
 800d67c:	9908      	ldr	r1, [sp, #32]
 800d67e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d682:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d686:	2900      	cmp	r1, #0
 800d688:	d043      	beq.n	800d712 <_dtoa_r+0x582>
 800d68a:	494d      	ldr	r1, [pc, #308]	; (800d7c0 <_dtoa_r+0x630>)
 800d68c:	2000      	movs	r0, #0
 800d68e:	f7f3 f8ed 	bl	800086c <__aeabi_ddiv>
 800d692:	4652      	mov	r2, sl
 800d694:	465b      	mov	r3, fp
 800d696:	f7f2 fe07 	bl	80002a8 <__aeabi_dsub>
 800d69a:	9d01      	ldr	r5, [sp, #4]
 800d69c:	4682      	mov	sl, r0
 800d69e:	468b      	mov	fp, r1
 800d6a0:	4649      	mov	r1, r9
 800d6a2:	4640      	mov	r0, r8
 800d6a4:	f7f3 fa68 	bl	8000b78 <__aeabi_d2iz>
 800d6a8:	4606      	mov	r6, r0
 800d6aa:	f7f2 ff4b 	bl	8000544 <__aeabi_i2d>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	4640      	mov	r0, r8
 800d6b4:	4649      	mov	r1, r9
 800d6b6:	f7f2 fdf7 	bl	80002a8 <__aeabi_dsub>
 800d6ba:	3630      	adds	r6, #48	; 0x30
 800d6bc:	f805 6b01 	strb.w	r6, [r5], #1
 800d6c0:	4652      	mov	r2, sl
 800d6c2:	465b      	mov	r3, fp
 800d6c4:	4680      	mov	r8, r0
 800d6c6:	4689      	mov	r9, r1
 800d6c8:	f7f3 fa18 	bl	8000afc <__aeabi_dcmplt>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	d163      	bne.n	800d798 <_dtoa_r+0x608>
 800d6d0:	4642      	mov	r2, r8
 800d6d2:	464b      	mov	r3, r9
 800d6d4:	4936      	ldr	r1, [pc, #216]	; (800d7b0 <_dtoa_r+0x620>)
 800d6d6:	2000      	movs	r0, #0
 800d6d8:	f7f2 fde6 	bl	80002a8 <__aeabi_dsub>
 800d6dc:	4652      	mov	r2, sl
 800d6de:	465b      	mov	r3, fp
 800d6e0:	f7f3 fa0c 	bl	8000afc <__aeabi_dcmplt>
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	f040 80b5 	bne.w	800d854 <_dtoa_r+0x6c4>
 800d6ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6ec:	429d      	cmp	r5, r3
 800d6ee:	d081      	beq.n	800d5f4 <_dtoa_r+0x464>
 800d6f0:	4b30      	ldr	r3, [pc, #192]	; (800d7b4 <_dtoa_r+0x624>)
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	4650      	mov	r0, sl
 800d6f6:	4659      	mov	r1, fp
 800d6f8:	f7f2 ff8e 	bl	8000618 <__aeabi_dmul>
 800d6fc:	4b2d      	ldr	r3, [pc, #180]	; (800d7b4 <_dtoa_r+0x624>)
 800d6fe:	4682      	mov	sl, r0
 800d700:	468b      	mov	fp, r1
 800d702:	4640      	mov	r0, r8
 800d704:	4649      	mov	r1, r9
 800d706:	2200      	movs	r2, #0
 800d708:	f7f2 ff86 	bl	8000618 <__aeabi_dmul>
 800d70c:	4680      	mov	r8, r0
 800d70e:	4689      	mov	r9, r1
 800d710:	e7c6      	b.n	800d6a0 <_dtoa_r+0x510>
 800d712:	4650      	mov	r0, sl
 800d714:	4659      	mov	r1, fp
 800d716:	f7f2 ff7f 	bl	8000618 <__aeabi_dmul>
 800d71a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d71c:	9d01      	ldr	r5, [sp, #4]
 800d71e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d720:	4682      	mov	sl, r0
 800d722:	468b      	mov	fp, r1
 800d724:	4649      	mov	r1, r9
 800d726:	4640      	mov	r0, r8
 800d728:	f7f3 fa26 	bl	8000b78 <__aeabi_d2iz>
 800d72c:	4606      	mov	r6, r0
 800d72e:	f7f2 ff09 	bl	8000544 <__aeabi_i2d>
 800d732:	3630      	adds	r6, #48	; 0x30
 800d734:	4602      	mov	r2, r0
 800d736:	460b      	mov	r3, r1
 800d738:	4640      	mov	r0, r8
 800d73a:	4649      	mov	r1, r9
 800d73c:	f7f2 fdb4 	bl	80002a8 <__aeabi_dsub>
 800d740:	f805 6b01 	strb.w	r6, [r5], #1
 800d744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d746:	429d      	cmp	r5, r3
 800d748:	4680      	mov	r8, r0
 800d74a:	4689      	mov	r9, r1
 800d74c:	f04f 0200 	mov.w	r2, #0
 800d750:	d124      	bne.n	800d79c <_dtoa_r+0x60c>
 800d752:	4b1b      	ldr	r3, [pc, #108]	; (800d7c0 <_dtoa_r+0x630>)
 800d754:	4650      	mov	r0, sl
 800d756:	4659      	mov	r1, fp
 800d758:	f7f2 fda8 	bl	80002ac <__adddf3>
 800d75c:	4602      	mov	r2, r0
 800d75e:	460b      	mov	r3, r1
 800d760:	4640      	mov	r0, r8
 800d762:	4649      	mov	r1, r9
 800d764:	f7f3 f9e8 	bl	8000b38 <__aeabi_dcmpgt>
 800d768:	2800      	cmp	r0, #0
 800d76a:	d173      	bne.n	800d854 <_dtoa_r+0x6c4>
 800d76c:	4652      	mov	r2, sl
 800d76e:	465b      	mov	r3, fp
 800d770:	4913      	ldr	r1, [pc, #76]	; (800d7c0 <_dtoa_r+0x630>)
 800d772:	2000      	movs	r0, #0
 800d774:	f7f2 fd98 	bl	80002a8 <__aeabi_dsub>
 800d778:	4602      	mov	r2, r0
 800d77a:	460b      	mov	r3, r1
 800d77c:	4640      	mov	r0, r8
 800d77e:	4649      	mov	r1, r9
 800d780:	f7f3 f9bc 	bl	8000afc <__aeabi_dcmplt>
 800d784:	2800      	cmp	r0, #0
 800d786:	f43f af35 	beq.w	800d5f4 <_dtoa_r+0x464>
 800d78a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d78c:	1e6b      	subs	r3, r5, #1
 800d78e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d790:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d794:	2b30      	cmp	r3, #48	; 0x30
 800d796:	d0f8      	beq.n	800d78a <_dtoa_r+0x5fa>
 800d798:	9700      	str	r7, [sp, #0]
 800d79a:	e049      	b.n	800d830 <_dtoa_r+0x6a0>
 800d79c:	4b05      	ldr	r3, [pc, #20]	; (800d7b4 <_dtoa_r+0x624>)
 800d79e:	f7f2 ff3b 	bl	8000618 <__aeabi_dmul>
 800d7a2:	4680      	mov	r8, r0
 800d7a4:	4689      	mov	r9, r1
 800d7a6:	e7bd      	b.n	800d724 <_dtoa_r+0x594>
 800d7a8:	0800f738 	.word	0x0800f738
 800d7ac:	0800f710 	.word	0x0800f710
 800d7b0:	3ff00000 	.word	0x3ff00000
 800d7b4:	40240000 	.word	0x40240000
 800d7b8:	401c0000 	.word	0x401c0000
 800d7bc:	40140000 	.word	0x40140000
 800d7c0:	3fe00000 	.word	0x3fe00000
 800d7c4:	9d01      	ldr	r5, [sp, #4]
 800d7c6:	4656      	mov	r6, sl
 800d7c8:	465f      	mov	r7, fp
 800d7ca:	4642      	mov	r2, r8
 800d7cc:	464b      	mov	r3, r9
 800d7ce:	4630      	mov	r0, r6
 800d7d0:	4639      	mov	r1, r7
 800d7d2:	f7f3 f84b 	bl	800086c <__aeabi_ddiv>
 800d7d6:	f7f3 f9cf 	bl	8000b78 <__aeabi_d2iz>
 800d7da:	4682      	mov	sl, r0
 800d7dc:	f7f2 feb2 	bl	8000544 <__aeabi_i2d>
 800d7e0:	4642      	mov	r2, r8
 800d7e2:	464b      	mov	r3, r9
 800d7e4:	f7f2 ff18 	bl	8000618 <__aeabi_dmul>
 800d7e8:	4602      	mov	r2, r0
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	4630      	mov	r0, r6
 800d7ee:	4639      	mov	r1, r7
 800d7f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d7f4:	f7f2 fd58 	bl	80002a8 <__aeabi_dsub>
 800d7f8:	f805 6b01 	strb.w	r6, [r5], #1
 800d7fc:	9e01      	ldr	r6, [sp, #4]
 800d7fe:	9f03      	ldr	r7, [sp, #12]
 800d800:	1bae      	subs	r6, r5, r6
 800d802:	42b7      	cmp	r7, r6
 800d804:	4602      	mov	r2, r0
 800d806:	460b      	mov	r3, r1
 800d808:	d135      	bne.n	800d876 <_dtoa_r+0x6e6>
 800d80a:	f7f2 fd4f 	bl	80002ac <__adddf3>
 800d80e:	4642      	mov	r2, r8
 800d810:	464b      	mov	r3, r9
 800d812:	4606      	mov	r6, r0
 800d814:	460f      	mov	r7, r1
 800d816:	f7f3 f98f 	bl	8000b38 <__aeabi_dcmpgt>
 800d81a:	b9d0      	cbnz	r0, 800d852 <_dtoa_r+0x6c2>
 800d81c:	4642      	mov	r2, r8
 800d81e:	464b      	mov	r3, r9
 800d820:	4630      	mov	r0, r6
 800d822:	4639      	mov	r1, r7
 800d824:	f7f3 f960 	bl	8000ae8 <__aeabi_dcmpeq>
 800d828:	b110      	cbz	r0, 800d830 <_dtoa_r+0x6a0>
 800d82a:	f01a 0f01 	tst.w	sl, #1
 800d82e:	d110      	bne.n	800d852 <_dtoa_r+0x6c2>
 800d830:	4620      	mov	r0, r4
 800d832:	ee18 1a10 	vmov	r1, s16
 800d836:	f000 fbe3 	bl	800e000 <_Bfree>
 800d83a:	2300      	movs	r3, #0
 800d83c:	9800      	ldr	r0, [sp, #0]
 800d83e:	702b      	strb	r3, [r5, #0]
 800d840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d842:	3001      	adds	r0, #1
 800d844:	6018      	str	r0, [r3, #0]
 800d846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d848:	2b00      	cmp	r3, #0
 800d84a:	f43f acf1 	beq.w	800d230 <_dtoa_r+0xa0>
 800d84e:	601d      	str	r5, [r3, #0]
 800d850:	e4ee      	b.n	800d230 <_dtoa_r+0xa0>
 800d852:	9f00      	ldr	r7, [sp, #0]
 800d854:	462b      	mov	r3, r5
 800d856:	461d      	mov	r5, r3
 800d858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d85c:	2a39      	cmp	r2, #57	; 0x39
 800d85e:	d106      	bne.n	800d86e <_dtoa_r+0x6de>
 800d860:	9a01      	ldr	r2, [sp, #4]
 800d862:	429a      	cmp	r2, r3
 800d864:	d1f7      	bne.n	800d856 <_dtoa_r+0x6c6>
 800d866:	9901      	ldr	r1, [sp, #4]
 800d868:	2230      	movs	r2, #48	; 0x30
 800d86a:	3701      	adds	r7, #1
 800d86c:	700a      	strb	r2, [r1, #0]
 800d86e:	781a      	ldrb	r2, [r3, #0]
 800d870:	3201      	adds	r2, #1
 800d872:	701a      	strb	r2, [r3, #0]
 800d874:	e790      	b.n	800d798 <_dtoa_r+0x608>
 800d876:	4ba6      	ldr	r3, [pc, #664]	; (800db10 <_dtoa_r+0x980>)
 800d878:	2200      	movs	r2, #0
 800d87a:	f7f2 fecd 	bl	8000618 <__aeabi_dmul>
 800d87e:	2200      	movs	r2, #0
 800d880:	2300      	movs	r3, #0
 800d882:	4606      	mov	r6, r0
 800d884:	460f      	mov	r7, r1
 800d886:	f7f3 f92f 	bl	8000ae8 <__aeabi_dcmpeq>
 800d88a:	2800      	cmp	r0, #0
 800d88c:	d09d      	beq.n	800d7ca <_dtoa_r+0x63a>
 800d88e:	e7cf      	b.n	800d830 <_dtoa_r+0x6a0>
 800d890:	9a08      	ldr	r2, [sp, #32]
 800d892:	2a00      	cmp	r2, #0
 800d894:	f000 80d7 	beq.w	800da46 <_dtoa_r+0x8b6>
 800d898:	9a06      	ldr	r2, [sp, #24]
 800d89a:	2a01      	cmp	r2, #1
 800d89c:	f300 80ba 	bgt.w	800da14 <_dtoa_r+0x884>
 800d8a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8a2:	2a00      	cmp	r2, #0
 800d8a4:	f000 80b2 	beq.w	800da0c <_dtoa_r+0x87c>
 800d8a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d8ac:	9e07      	ldr	r6, [sp, #28]
 800d8ae:	9d04      	ldr	r5, [sp, #16]
 800d8b0:	9a04      	ldr	r2, [sp, #16]
 800d8b2:	441a      	add	r2, r3
 800d8b4:	9204      	str	r2, [sp, #16]
 800d8b6:	9a05      	ldr	r2, [sp, #20]
 800d8b8:	2101      	movs	r1, #1
 800d8ba:	441a      	add	r2, r3
 800d8bc:	4620      	mov	r0, r4
 800d8be:	9205      	str	r2, [sp, #20]
 800d8c0:	f000 fc56 	bl	800e170 <__i2b>
 800d8c4:	4607      	mov	r7, r0
 800d8c6:	2d00      	cmp	r5, #0
 800d8c8:	dd0c      	ble.n	800d8e4 <_dtoa_r+0x754>
 800d8ca:	9b05      	ldr	r3, [sp, #20]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	dd09      	ble.n	800d8e4 <_dtoa_r+0x754>
 800d8d0:	42ab      	cmp	r3, r5
 800d8d2:	9a04      	ldr	r2, [sp, #16]
 800d8d4:	bfa8      	it	ge
 800d8d6:	462b      	movge	r3, r5
 800d8d8:	1ad2      	subs	r2, r2, r3
 800d8da:	9204      	str	r2, [sp, #16]
 800d8dc:	9a05      	ldr	r2, [sp, #20]
 800d8de:	1aed      	subs	r5, r5, r3
 800d8e0:	1ad3      	subs	r3, r2, r3
 800d8e2:	9305      	str	r3, [sp, #20]
 800d8e4:	9b07      	ldr	r3, [sp, #28]
 800d8e6:	b31b      	cbz	r3, 800d930 <_dtoa_r+0x7a0>
 800d8e8:	9b08      	ldr	r3, [sp, #32]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	f000 80af 	beq.w	800da4e <_dtoa_r+0x8be>
 800d8f0:	2e00      	cmp	r6, #0
 800d8f2:	dd13      	ble.n	800d91c <_dtoa_r+0x78c>
 800d8f4:	4639      	mov	r1, r7
 800d8f6:	4632      	mov	r2, r6
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	f000 fcf9 	bl	800e2f0 <__pow5mult>
 800d8fe:	ee18 2a10 	vmov	r2, s16
 800d902:	4601      	mov	r1, r0
 800d904:	4607      	mov	r7, r0
 800d906:	4620      	mov	r0, r4
 800d908:	f000 fc48 	bl	800e19c <__multiply>
 800d90c:	ee18 1a10 	vmov	r1, s16
 800d910:	4680      	mov	r8, r0
 800d912:	4620      	mov	r0, r4
 800d914:	f000 fb74 	bl	800e000 <_Bfree>
 800d918:	ee08 8a10 	vmov	s16, r8
 800d91c:	9b07      	ldr	r3, [sp, #28]
 800d91e:	1b9a      	subs	r2, r3, r6
 800d920:	d006      	beq.n	800d930 <_dtoa_r+0x7a0>
 800d922:	ee18 1a10 	vmov	r1, s16
 800d926:	4620      	mov	r0, r4
 800d928:	f000 fce2 	bl	800e2f0 <__pow5mult>
 800d92c:	ee08 0a10 	vmov	s16, r0
 800d930:	2101      	movs	r1, #1
 800d932:	4620      	mov	r0, r4
 800d934:	f000 fc1c 	bl	800e170 <__i2b>
 800d938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	4606      	mov	r6, r0
 800d93e:	f340 8088 	ble.w	800da52 <_dtoa_r+0x8c2>
 800d942:	461a      	mov	r2, r3
 800d944:	4601      	mov	r1, r0
 800d946:	4620      	mov	r0, r4
 800d948:	f000 fcd2 	bl	800e2f0 <__pow5mult>
 800d94c:	9b06      	ldr	r3, [sp, #24]
 800d94e:	2b01      	cmp	r3, #1
 800d950:	4606      	mov	r6, r0
 800d952:	f340 8081 	ble.w	800da58 <_dtoa_r+0x8c8>
 800d956:	f04f 0800 	mov.w	r8, #0
 800d95a:	6933      	ldr	r3, [r6, #16]
 800d95c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d960:	6918      	ldr	r0, [r3, #16]
 800d962:	f000 fbb5 	bl	800e0d0 <__hi0bits>
 800d966:	f1c0 0020 	rsb	r0, r0, #32
 800d96a:	9b05      	ldr	r3, [sp, #20]
 800d96c:	4418      	add	r0, r3
 800d96e:	f010 001f 	ands.w	r0, r0, #31
 800d972:	f000 8092 	beq.w	800da9a <_dtoa_r+0x90a>
 800d976:	f1c0 0320 	rsb	r3, r0, #32
 800d97a:	2b04      	cmp	r3, #4
 800d97c:	f340 808a 	ble.w	800da94 <_dtoa_r+0x904>
 800d980:	f1c0 001c 	rsb	r0, r0, #28
 800d984:	9b04      	ldr	r3, [sp, #16]
 800d986:	4403      	add	r3, r0
 800d988:	9304      	str	r3, [sp, #16]
 800d98a:	9b05      	ldr	r3, [sp, #20]
 800d98c:	4403      	add	r3, r0
 800d98e:	4405      	add	r5, r0
 800d990:	9305      	str	r3, [sp, #20]
 800d992:	9b04      	ldr	r3, [sp, #16]
 800d994:	2b00      	cmp	r3, #0
 800d996:	dd07      	ble.n	800d9a8 <_dtoa_r+0x818>
 800d998:	ee18 1a10 	vmov	r1, s16
 800d99c:	461a      	mov	r2, r3
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f000 fd00 	bl	800e3a4 <__lshift>
 800d9a4:	ee08 0a10 	vmov	s16, r0
 800d9a8:	9b05      	ldr	r3, [sp, #20]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	dd05      	ble.n	800d9ba <_dtoa_r+0x82a>
 800d9ae:	4631      	mov	r1, r6
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	f000 fcf6 	bl	800e3a4 <__lshift>
 800d9b8:	4606      	mov	r6, r0
 800d9ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d06e      	beq.n	800da9e <_dtoa_r+0x90e>
 800d9c0:	ee18 0a10 	vmov	r0, s16
 800d9c4:	4631      	mov	r1, r6
 800d9c6:	f000 fd5d 	bl	800e484 <__mcmp>
 800d9ca:	2800      	cmp	r0, #0
 800d9cc:	da67      	bge.n	800da9e <_dtoa_r+0x90e>
 800d9ce:	9b00      	ldr	r3, [sp, #0]
 800d9d0:	3b01      	subs	r3, #1
 800d9d2:	ee18 1a10 	vmov	r1, s16
 800d9d6:	9300      	str	r3, [sp, #0]
 800d9d8:	220a      	movs	r2, #10
 800d9da:	2300      	movs	r3, #0
 800d9dc:	4620      	mov	r0, r4
 800d9de:	f000 fb31 	bl	800e044 <__multadd>
 800d9e2:	9b08      	ldr	r3, [sp, #32]
 800d9e4:	ee08 0a10 	vmov	s16, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	f000 81b1 	beq.w	800dd50 <_dtoa_r+0xbc0>
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	4639      	mov	r1, r7
 800d9f2:	220a      	movs	r2, #10
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	f000 fb25 	bl	800e044 <__multadd>
 800d9fa:	9b02      	ldr	r3, [sp, #8]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	4607      	mov	r7, r0
 800da00:	f300 808e 	bgt.w	800db20 <_dtoa_r+0x990>
 800da04:	9b06      	ldr	r3, [sp, #24]
 800da06:	2b02      	cmp	r3, #2
 800da08:	dc51      	bgt.n	800daae <_dtoa_r+0x91e>
 800da0a:	e089      	b.n	800db20 <_dtoa_r+0x990>
 800da0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800da12:	e74b      	b.n	800d8ac <_dtoa_r+0x71c>
 800da14:	9b03      	ldr	r3, [sp, #12]
 800da16:	1e5e      	subs	r6, r3, #1
 800da18:	9b07      	ldr	r3, [sp, #28]
 800da1a:	42b3      	cmp	r3, r6
 800da1c:	bfbf      	itttt	lt
 800da1e:	9b07      	ldrlt	r3, [sp, #28]
 800da20:	9607      	strlt	r6, [sp, #28]
 800da22:	1af2      	sublt	r2, r6, r3
 800da24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800da26:	bfb6      	itet	lt
 800da28:	189b      	addlt	r3, r3, r2
 800da2a:	1b9e      	subge	r6, r3, r6
 800da2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800da2e:	9b03      	ldr	r3, [sp, #12]
 800da30:	bfb8      	it	lt
 800da32:	2600      	movlt	r6, #0
 800da34:	2b00      	cmp	r3, #0
 800da36:	bfb7      	itett	lt
 800da38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800da3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800da40:	1a9d      	sublt	r5, r3, r2
 800da42:	2300      	movlt	r3, #0
 800da44:	e734      	b.n	800d8b0 <_dtoa_r+0x720>
 800da46:	9e07      	ldr	r6, [sp, #28]
 800da48:	9d04      	ldr	r5, [sp, #16]
 800da4a:	9f08      	ldr	r7, [sp, #32]
 800da4c:	e73b      	b.n	800d8c6 <_dtoa_r+0x736>
 800da4e:	9a07      	ldr	r2, [sp, #28]
 800da50:	e767      	b.n	800d922 <_dtoa_r+0x792>
 800da52:	9b06      	ldr	r3, [sp, #24]
 800da54:	2b01      	cmp	r3, #1
 800da56:	dc18      	bgt.n	800da8a <_dtoa_r+0x8fa>
 800da58:	f1ba 0f00 	cmp.w	sl, #0
 800da5c:	d115      	bne.n	800da8a <_dtoa_r+0x8fa>
 800da5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da62:	b993      	cbnz	r3, 800da8a <_dtoa_r+0x8fa>
 800da64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800da68:	0d1b      	lsrs	r3, r3, #20
 800da6a:	051b      	lsls	r3, r3, #20
 800da6c:	b183      	cbz	r3, 800da90 <_dtoa_r+0x900>
 800da6e:	9b04      	ldr	r3, [sp, #16]
 800da70:	3301      	adds	r3, #1
 800da72:	9304      	str	r3, [sp, #16]
 800da74:	9b05      	ldr	r3, [sp, #20]
 800da76:	3301      	adds	r3, #1
 800da78:	9305      	str	r3, [sp, #20]
 800da7a:	f04f 0801 	mov.w	r8, #1
 800da7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da80:	2b00      	cmp	r3, #0
 800da82:	f47f af6a 	bne.w	800d95a <_dtoa_r+0x7ca>
 800da86:	2001      	movs	r0, #1
 800da88:	e76f      	b.n	800d96a <_dtoa_r+0x7da>
 800da8a:	f04f 0800 	mov.w	r8, #0
 800da8e:	e7f6      	b.n	800da7e <_dtoa_r+0x8ee>
 800da90:	4698      	mov	r8, r3
 800da92:	e7f4      	b.n	800da7e <_dtoa_r+0x8ee>
 800da94:	f43f af7d 	beq.w	800d992 <_dtoa_r+0x802>
 800da98:	4618      	mov	r0, r3
 800da9a:	301c      	adds	r0, #28
 800da9c:	e772      	b.n	800d984 <_dtoa_r+0x7f4>
 800da9e:	9b03      	ldr	r3, [sp, #12]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	dc37      	bgt.n	800db14 <_dtoa_r+0x984>
 800daa4:	9b06      	ldr	r3, [sp, #24]
 800daa6:	2b02      	cmp	r3, #2
 800daa8:	dd34      	ble.n	800db14 <_dtoa_r+0x984>
 800daaa:	9b03      	ldr	r3, [sp, #12]
 800daac:	9302      	str	r3, [sp, #8]
 800daae:	9b02      	ldr	r3, [sp, #8]
 800dab0:	b96b      	cbnz	r3, 800dace <_dtoa_r+0x93e>
 800dab2:	4631      	mov	r1, r6
 800dab4:	2205      	movs	r2, #5
 800dab6:	4620      	mov	r0, r4
 800dab8:	f000 fac4 	bl	800e044 <__multadd>
 800dabc:	4601      	mov	r1, r0
 800dabe:	4606      	mov	r6, r0
 800dac0:	ee18 0a10 	vmov	r0, s16
 800dac4:	f000 fcde 	bl	800e484 <__mcmp>
 800dac8:	2800      	cmp	r0, #0
 800daca:	f73f adbb 	bgt.w	800d644 <_dtoa_r+0x4b4>
 800dace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dad0:	9d01      	ldr	r5, [sp, #4]
 800dad2:	43db      	mvns	r3, r3
 800dad4:	9300      	str	r3, [sp, #0]
 800dad6:	f04f 0800 	mov.w	r8, #0
 800dada:	4631      	mov	r1, r6
 800dadc:	4620      	mov	r0, r4
 800dade:	f000 fa8f 	bl	800e000 <_Bfree>
 800dae2:	2f00      	cmp	r7, #0
 800dae4:	f43f aea4 	beq.w	800d830 <_dtoa_r+0x6a0>
 800dae8:	f1b8 0f00 	cmp.w	r8, #0
 800daec:	d005      	beq.n	800dafa <_dtoa_r+0x96a>
 800daee:	45b8      	cmp	r8, r7
 800daf0:	d003      	beq.n	800dafa <_dtoa_r+0x96a>
 800daf2:	4641      	mov	r1, r8
 800daf4:	4620      	mov	r0, r4
 800daf6:	f000 fa83 	bl	800e000 <_Bfree>
 800dafa:	4639      	mov	r1, r7
 800dafc:	4620      	mov	r0, r4
 800dafe:	f000 fa7f 	bl	800e000 <_Bfree>
 800db02:	e695      	b.n	800d830 <_dtoa_r+0x6a0>
 800db04:	2600      	movs	r6, #0
 800db06:	4637      	mov	r7, r6
 800db08:	e7e1      	b.n	800dace <_dtoa_r+0x93e>
 800db0a:	9700      	str	r7, [sp, #0]
 800db0c:	4637      	mov	r7, r6
 800db0e:	e599      	b.n	800d644 <_dtoa_r+0x4b4>
 800db10:	40240000 	.word	0x40240000
 800db14:	9b08      	ldr	r3, [sp, #32]
 800db16:	2b00      	cmp	r3, #0
 800db18:	f000 80ca 	beq.w	800dcb0 <_dtoa_r+0xb20>
 800db1c:	9b03      	ldr	r3, [sp, #12]
 800db1e:	9302      	str	r3, [sp, #8]
 800db20:	2d00      	cmp	r5, #0
 800db22:	dd05      	ble.n	800db30 <_dtoa_r+0x9a0>
 800db24:	4639      	mov	r1, r7
 800db26:	462a      	mov	r2, r5
 800db28:	4620      	mov	r0, r4
 800db2a:	f000 fc3b 	bl	800e3a4 <__lshift>
 800db2e:	4607      	mov	r7, r0
 800db30:	f1b8 0f00 	cmp.w	r8, #0
 800db34:	d05b      	beq.n	800dbee <_dtoa_r+0xa5e>
 800db36:	6879      	ldr	r1, [r7, #4]
 800db38:	4620      	mov	r0, r4
 800db3a:	f000 fa21 	bl	800df80 <_Balloc>
 800db3e:	4605      	mov	r5, r0
 800db40:	b928      	cbnz	r0, 800db4e <_dtoa_r+0x9be>
 800db42:	4b87      	ldr	r3, [pc, #540]	; (800dd60 <_dtoa_r+0xbd0>)
 800db44:	4602      	mov	r2, r0
 800db46:	f240 21ea 	movw	r1, #746	; 0x2ea
 800db4a:	f7ff bb3b 	b.w	800d1c4 <_dtoa_r+0x34>
 800db4e:	693a      	ldr	r2, [r7, #16]
 800db50:	3202      	adds	r2, #2
 800db52:	0092      	lsls	r2, r2, #2
 800db54:	f107 010c 	add.w	r1, r7, #12
 800db58:	300c      	adds	r0, #12
 800db5a:	f7fe fce3 	bl	800c524 <memcpy>
 800db5e:	2201      	movs	r2, #1
 800db60:	4629      	mov	r1, r5
 800db62:	4620      	mov	r0, r4
 800db64:	f000 fc1e 	bl	800e3a4 <__lshift>
 800db68:	9b01      	ldr	r3, [sp, #4]
 800db6a:	f103 0901 	add.w	r9, r3, #1
 800db6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800db72:	4413      	add	r3, r2
 800db74:	9305      	str	r3, [sp, #20]
 800db76:	f00a 0301 	and.w	r3, sl, #1
 800db7a:	46b8      	mov	r8, r7
 800db7c:	9304      	str	r3, [sp, #16]
 800db7e:	4607      	mov	r7, r0
 800db80:	4631      	mov	r1, r6
 800db82:	ee18 0a10 	vmov	r0, s16
 800db86:	f7ff fa77 	bl	800d078 <quorem>
 800db8a:	4641      	mov	r1, r8
 800db8c:	9002      	str	r0, [sp, #8]
 800db8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800db92:	ee18 0a10 	vmov	r0, s16
 800db96:	f000 fc75 	bl	800e484 <__mcmp>
 800db9a:	463a      	mov	r2, r7
 800db9c:	9003      	str	r0, [sp, #12]
 800db9e:	4631      	mov	r1, r6
 800dba0:	4620      	mov	r0, r4
 800dba2:	f000 fc8b 	bl	800e4bc <__mdiff>
 800dba6:	68c2      	ldr	r2, [r0, #12]
 800dba8:	f109 3bff 	add.w	fp, r9, #4294967295
 800dbac:	4605      	mov	r5, r0
 800dbae:	bb02      	cbnz	r2, 800dbf2 <_dtoa_r+0xa62>
 800dbb0:	4601      	mov	r1, r0
 800dbb2:	ee18 0a10 	vmov	r0, s16
 800dbb6:	f000 fc65 	bl	800e484 <__mcmp>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	4629      	mov	r1, r5
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	9207      	str	r2, [sp, #28]
 800dbc2:	f000 fa1d 	bl	800e000 <_Bfree>
 800dbc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800dbca:	ea43 0102 	orr.w	r1, r3, r2
 800dbce:	9b04      	ldr	r3, [sp, #16]
 800dbd0:	430b      	orrs	r3, r1
 800dbd2:	464d      	mov	r5, r9
 800dbd4:	d10f      	bne.n	800dbf6 <_dtoa_r+0xa66>
 800dbd6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dbda:	d02a      	beq.n	800dc32 <_dtoa_r+0xaa2>
 800dbdc:	9b03      	ldr	r3, [sp, #12]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	dd02      	ble.n	800dbe8 <_dtoa_r+0xa58>
 800dbe2:	9b02      	ldr	r3, [sp, #8]
 800dbe4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800dbe8:	f88b a000 	strb.w	sl, [fp]
 800dbec:	e775      	b.n	800dada <_dtoa_r+0x94a>
 800dbee:	4638      	mov	r0, r7
 800dbf0:	e7ba      	b.n	800db68 <_dtoa_r+0x9d8>
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	e7e2      	b.n	800dbbc <_dtoa_r+0xa2c>
 800dbf6:	9b03      	ldr	r3, [sp, #12]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	db04      	blt.n	800dc06 <_dtoa_r+0xa76>
 800dbfc:	9906      	ldr	r1, [sp, #24]
 800dbfe:	430b      	orrs	r3, r1
 800dc00:	9904      	ldr	r1, [sp, #16]
 800dc02:	430b      	orrs	r3, r1
 800dc04:	d122      	bne.n	800dc4c <_dtoa_r+0xabc>
 800dc06:	2a00      	cmp	r2, #0
 800dc08:	ddee      	ble.n	800dbe8 <_dtoa_r+0xa58>
 800dc0a:	ee18 1a10 	vmov	r1, s16
 800dc0e:	2201      	movs	r2, #1
 800dc10:	4620      	mov	r0, r4
 800dc12:	f000 fbc7 	bl	800e3a4 <__lshift>
 800dc16:	4631      	mov	r1, r6
 800dc18:	ee08 0a10 	vmov	s16, r0
 800dc1c:	f000 fc32 	bl	800e484 <__mcmp>
 800dc20:	2800      	cmp	r0, #0
 800dc22:	dc03      	bgt.n	800dc2c <_dtoa_r+0xa9c>
 800dc24:	d1e0      	bne.n	800dbe8 <_dtoa_r+0xa58>
 800dc26:	f01a 0f01 	tst.w	sl, #1
 800dc2a:	d0dd      	beq.n	800dbe8 <_dtoa_r+0xa58>
 800dc2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dc30:	d1d7      	bne.n	800dbe2 <_dtoa_r+0xa52>
 800dc32:	2339      	movs	r3, #57	; 0x39
 800dc34:	f88b 3000 	strb.w	r3, [fp]
 800dc38:	462b      	mov	r3, r5
 800dc3a:	461d      	mov	r5, r3
 800dc3c:	3b01      	subs	r3, #1
 800dc3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dc42:	2a39      	cmp	r2, #57	; 0x39
 800dc44:	d071      	beq.n	800dd2a <_dtoa_r+0xb9a>
 800dc46:	3201      	adds	r2, #1
 800dc48:	701a      	strb	r2, [r3, #0]
 800dc4a:	e746      	b.n	800dada <_dtoa_r+0x94a>
 800dc4c:	2a00      	cmp	r2, #0
 800dc4e:	dd07      	ble.n	800dc60 <_dtoa_r+0xad0>
 800dc50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dc54:	d0ed      	beq.n	800dc32 <_dtoa_r+0xaa2>
 800dc56:	f10a 0301 	add.w	r3, sl, #1
 800dc5a:	f88b 3000 	strb.w	r3, [fp]
 800dc5e:	e73c      	b.n	800dada <_dtoa_r+0x94a>
 800dc60:	9b05      	ldr	r3, [sp, #20]
 800dc62:	f809 ac01 	strb.w	sl, [r9, #-1]
 800dc66:	4599      	cmp	r9, r3
 800dc68:	d047      	beq.n	800dcfa <_dtoa_r+0xb6a>
 800dc6a:	ee18 1a10 	vmov	r1, s16
 800dc6e:	2300      	movs	r3, #0
 800dc70:	220a      	movs	r2, #10
 800dc72:	4620      	mov	r0, r4
 800dc74:	f000 f9e6 	bl	800e044 <__multadd>
 800dc78:	45b8      	cmp	r8, r7
 800dc7a:	ee08 0a10 	vmov	s16, r0
 800dc7e:	f04f 0300 	mov.w	r3, #0
 800dc82:	f04f 020a 	mov.w	r2, #10
 800dc86:	4641      	mov	r1, r8
 800dc88:	4620      	mov	r0, r4
 800dc8a:	d106      	bne.n	800dc9a <_dtoa_r+0xb0a>
 800dc8c:	f000 f9da 	bl	800e044 <__multadd>
 800dc90:	4680      	mov	r8, r0
 800dc92:	4607      	mov	r7, r0
 800dc94:	f109 0901 	add.w	r9, r9, #1
 800dc98:	e772      	b.n	800db80 <_dtoa_r+0x9f0>
 800dc9a:	f000 f9d3 	bl	800e044 <__multadd>
 800dc9e:	4639      	mov	r1, r7
 800dca0:	4680      	mov	r8, r0
 800dca2:	2300      	movs	r3, #0
 800dca4:	220a      	movs	r2, #10
 800dca6:	4620      	mov	r0, r4
 800dca8:	f000 f9cc 	bl	800e044 <__multadd>
 800dcac:	4607      	mov	r7, r0
 800dcae:	e7f1      	b.n	800dc94 <_dtoa_r+0xb04>
 800dcb0:	9b03      	ldr	r3, [sp, #12]
 800dcb2:	9302      	str	r3, [sp, #8]
 800dcb4:	9d01      	ldr	r5, [sp, #4]
 800dcb6:	ee18 0a10 	vmov	r0, s16
 800dcba:	4631      	mov	r1, r6
 800dcbc:	f7ff f9dc 	bl	800d078 <quorem>
 800dcc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dcc4:	9b01      	ldr	r3, [sp, #4]
 800dcc6:	f805 ab01 	strb.w	sl, [r5], #1
 800dcca:	1aea      	subs	r2, r5, r3
 800dccc:	9b02      	ldr	r3, [sp, #8]
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	dd09      	ble.n	800dce6 <_dtoa_r+0xb56>
 800dcd2:	ee18 1a10 	vmov	r1, s16
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	220a      	movs	r2, #10
 800dcda:	4620      	mov	r0, r4
 800dcdc:	f000 f9b2 	bl	800e044 <__multadd>
 800dce0:	ee08 0a10 	vmov	s16, r0
 800dce4:	e7e7      	b.n	800dcb6 <_dtoa_r+0xb26>
 800dce6:	9b02      	ldr	r3, [sp, #8]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	bfc8      	it	gt
 800dcec:	461d      	movgt	r5, r3
 800dcee:	9b01      	ldr	r3, [sp, #4]
 800dcf0:	bfd8      	it	le
 800dcf2:	2501      	movle	r5, #1
 800dcf4:	441d      	add	r5, r3
 800dcf6:	f04f 0800 	mov.w	r8, #0
 800dcfa:	ee18 1a10 	vmov	r1, s16
 800dcfe:	2201      	movs	r2, #1
 800dd00:	4620      	mov	r0, r4
 800dd02:	f000 fb4f 	bl	800e3a4 <__lshift>
 800dd06:	4631      	mov	r1, r6
 800dd08:	ee08 0a10 	vmov	s16, r0
 800dd0c:	f000 fbba 	bl	800e484 <__mcmp>
 800dd10:	2800      	cmp	r0, #0
 800dd12:	dc91      	bgt.n	800dc38 <_dtoa_r+0xaa8>
 800dd14:	d102      	bne.n	800dd1c <_dtoa_r+0xb8c>
 800dd16:	f01a 0f01 	tst.w	sl, #1
 800dd1a:	d18d      	bne.n	800dc38 <_dtoa_r+0xaa8>
 800dd1c:	462b      	mov	r3, r5
 800dd1e:	461d      	mov	r5, r3
 800dd20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd24:	2a30      	cmp	r2, #48	; 0x30
 800dd26:	d0fa      	beq.n	800dd1e <_dtoa_r+0xb8e>
 800dd28:	e6d7      	b.n	800dada <_dtoa_r+0x94a>
 800dd2a:	9a01      	ldr	r2, [sp, #4]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d184      	bne.n	800dc3a <_dtoa_r+0xaaa>
 800dd30:	9b00      	ldr	r3, [sp, #0]
 800dd32:	3301      	adds	r3, #1
 800dd34:	9300      	str	r3, [sp, #0]
 800dd36:	2331      	movs	r3, #49	; 0x31
 800dd38:	7013      	strb	r3, [r2, #0]
 800dd3a:	e6ce      	b.n	800dada <_dtoa_r+0x94a>
 800dd3c:	4b09      	ldr	r3, [pc, #36]	; (800dd64 <_dtoa_r+0xbd4>)
 800dd3e:	f7ff ba95 	b.w	800d26c <_dtoa_r+0xdc>
 800dd42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	f47f aa6e 	bne.w	800d226 <_dtoa_r+0x96>
 800dd4a:	4b07      	ldr	r3, [pc, #28]	; (800dd68 <_dtoa_r+0xbd8>)
 800dd4c:	f7ff ba8e 	b.w	800d26c <_dtoa_r+0xdc>
 800dd50:	9b02      	ldr	r3, [sp, #8]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	dcae      	bgt.n	800dcb4 <_dtoa_r+0xb24>
 800dd56:	9b06      	ldr	r3, [sp, #24]
 800dd58:	2b02      	cmp	r3, #2
 800dd5a:	f73f aea8 	bgt.w	800daae <_dtoa_r+0x91e>
 800dd5e:	e7a9      	b.n	800dcb4 <_dtoa_r+0xb24>
 800dd60:	0800f643 	.word	0x0800f643
 800dd64:	0800f5a0 	.word	0x0800f5a0
 800dd68:	0800f5c4 	.word	0x0800f5c4

0800dd6c <std>:
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	b510      	push	{r4, lr}
 800dd70:	4604      	mov	r4, r0
 800dd72:	e9c0 3300 	strd	r3, r3, [r0]
 800dd76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd7a:	6083      	str	r3, [r0, #8]
 800dd7c:	8181      	strh	r1, [r0, #12]
 800dd7e:	6643      	str	r3, [r0, #100]	; 0x64
 800dd80:	81c2      	strh	r2, [r0, #14]
 800dd82:	6183      	str	r3, [r0, #24]
 800dd84:	4619      	mov	r1, r3
 800dd86:	2208      	movs	r2, #8
 800dd88:	305c      	adds	r0, #92	; 0x5c
 800dd8a:	f7fe fbd9 	bl	800c540 <memset>
 800dd8e:	4b05      	ldr	r3, [pc, #20]	; (800dda4 <std+0x38>)
 800dd90:	6263      	str	r3, [r4, #36]	; 0x24
 800dd92:	4b05      	ldr	r3, [pc, #20]	; (800dda8 <std+0x3c>)
 800dd94:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd96:	4b05      	ldr	r3, [pc, #20]	; (800ddac <std+0x40>)
 800dd98:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dd9a:	4b05      	ldr	r3, [pc, #20]	; (800ddb0 <std+0x44>)
 800dd9c:	6224      	str	r4, [r4, #32]
 800dd9e:	6323      	str	r3, [r4, #48]	; 0x30
 800dda0:	bd10      	pop	{r4, pc}
 800dda2:	bf00      	nop
 800dda4:	0800ec21 	.word	0x0800ec21
 800dda8:	0800ec43 	.word	0x0800ec43
 800ddac:	0800ec7b 	.word	0x0800ec7b
 800ddb0:	0800ec9f 	.word	0x0800ec9f

0800ddb4 <_cleanup_r>:
 800ddb4:	4901      	ldr	r1, [pc, #4]	; (800ddbc <_cleanup_r+0x8>)
 800ddb6:	f000 b8af 	b.w	800df18 <_fwalk_reent>
 800ddba:	bf00      	nop
 800ddbc:	0800efb5 	.word	0x0800efb5

0800ddc0 <__sfmoreglue>:
 800ddc0:	b570      	push	{r4, r5, r6, lr}
 800ddc2:	2268      	movs	r2, #104	; 0x68
 800ddc4:	1e4d      	subs	r5, r1, #1
 800ddc6:	4355      	muls	r5, r2
 800ddc8:	460e      	mov	r6, r1
 800ddca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ddce:	f7fe fc2b 	bl	800c628 <_malloc_r>
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	b140      	cbz	r0, 800dde8 <__sfmoreglue+0x28>
 800ddd6:	2100      	movs	r1, #0
 800ddd8:	e9c0 1600 	strd	r1, r6, [r0]
 800dddc:	300c      	adds	r0, #12
 800ddde:	60a0      	str	r0, [r4, #8]
 800dde0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dde4:	f7fe fbac 	bl	800c540 <memset>
 800dde8:	4620      	mov	r0, r4
 800ddea:	bd70      	pop	{r4, r5, r6, pc}

0800ddec <__sfp_lock_acquire>:
 800ddec:	4801      	ldr	r0, [pc, #4]	; (800ddf4 <__sfp_lock_acquire+0x8>)
 800ddee:	f000 b8b8 	b.w	800df62 <__retarget_lock_acquire_recursive>
 800ddf2:	bf00      	nop
 800ddf4:	200081f5 	.word	0x200081f5

0800ddf8 <__sfp_lock_release>:
 800ddf8:	4801      	ldr	r0, [pc, #4]	; (800de00 <__sfp_lock_release+0x8>)
 800ddfa:	f000 b8b3 	b.w	800df64 <__retarget_lock_release_recursive>
 800ddfe:	bf00      	nop
 800de00:	200081f5 	.word	0x200081f5

0800de04 <__sinit_lock_acquire>:
 800de04:	4801      	ldr	r0, [pc, #4]	; (800de0c <__sinit_lock_acquire+0x8>)
 800de06:	f000 b8ac 	b.w	800df62 <__retarget_lock_acquire_recursive>
 800de0a:	bf00      	nop
 800de0c:	200081f6 	.word	0x200081f6

0800de10 <__sinit_lock_release>:
 800de10:	4801      	ldr	r0, [pc, #4]	; (800de18 <__sinit_lock_release+0x8>)
 800de12:	f000 b8a7 	b.w	800df64 <__retarget_lock_release_recursive>
 800de16:	bf00      	nop
 800de18:	200081f6 	.word	0x200081f6

0800de1c <__sinit>:
 800de1c:	b510      	push	{r4, lr}
 800de1e:	4604      	mov	r4, r0
 800de20:	f7ff fff0 	bl	800de04 <__sinit_lock_acquire>
 800de24:	69a3      	ldr	r3, [r4, #24]
 800de26:	b11b      	cbz	r3, 800de30 <__sinit+0x14>
 800de28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de2c:	f7ff bff0 	b.w	800de10 <__sinit_lock_release>
 800de30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800de34:	6523      	str	r3, [r4, #80]	; 0x50
 800de36:	4b13      	ldr	r3, [pc, #76]	; (800de84 <__sinit+0x68>)
 800de38:	4a13      	ldr	r2, [pc, #76]	; (800de88 <__sinit+0x6c>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	62a2      	str	r2, [r4, #40]	; 0x28
 800de3e:	42a3      	cmp	r3, r4
 800de40:	bf04      	itt	eq
 800de42:	2301      	moveq	r3, #1
 800de44:	61a3      	streq	r3, [r4, #24]
 800de46:	4620      	mov	r0, r4
 800de48:	f000 f820 	bl	800de8c <__sfp>
 800de4c:	6060      	str	r0, [r4, #4]
 800de4e:	4620      	mov	r0, r4
 800de50:	f000 f81c 	bl	800de8c <__sfp>
 800de54:	60a0      	str	r0, [r4, #8]
 800de56:	4620      	mov	r0, r4
 800de58:	f000 f818 	bl	800de8c <__sfp>
 800de5c:	2200      	movs	r2, #0
 800de5e:	60e0      	str	r0, [r4, #12]
 800de60:	2104      	movs	r1, #4
 800de62:	6860      	ldr	r0, [r4, #4]
 800de64:	f7ff ff82 	bl	800dd6c <std>
 800de68:	68a0      	ldr	r0, [r4, #8]
 800de6a:	2201      	movs	r2, #1
 800de6c:	2109      	movs	r1, #9
 800de6e:	f7ff ff7d 	bl	800dd6c <std>
 800de72:	68e0      	ldr	r0, [r4, #12]
 800de74:	2202      	movs	r2, #2
 800de76:	2112      	movs	r1, #18
 800de78:	f7ff ff78 	bl	800dd6c <std>
 800de7c:	2301      	movs	r3, #1
 800de7e:	61a3      	str	r3, [r4, #24]
 800de80:	e7d2      	b.n	800de28 <__sinit+0xc>
 800de82:	bf00      	nop
 800de84:	0800f58c 	.word	0x0800f58c
 800de88:	0800ddb5 	.word	0x0800ddb5

0800de8c <__sfp>:
 800de8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de8e:	4607      	mov	r7, r0
 800de90:	f7ff ffac 	bl	800ddec <__sfp_lock_acquire>
 800de94:	4b1e      	ldr	r3, [pc, #120]	; (800df10 <__sfp+0x84>)
 800de96:	681e      	ldr	r6, [r3, #0]
 800de98:	69b3      	ldr	r3, [r6, #24]
 800de9a:	b913      	cbnz	r3, 800dea2 <__sfp+0x16>
 800de9c:	4630      	mov	r0, r6
 800de9e:	f7ff ffbd 	bl	800de1c <__sinit>
 800dea2:	3648      	adds	r6, #72	; 0x48
 800dea4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dea8:	3b01      	subs	r3, #1
 800deaa:	d503      	bpl.n	800deb4 <__sfp+0x28>
 800deac:	6833      	ldr	r3, [r6, #0]
 800deae:	b30b      	cbz	r3, 800def4 <__sfp+0x68>
 800deb0:	6836      	ldr	r6, [r6, #0]
 800deb2:	e7f7      	b.n	800dea4 <__sfp+0x18>
 800deb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800deb8:	b9d5      	cbnz	r5, 800def0 <__sfp+0x64>
 800deba:	4b16      	ldr	r3, [pc, #88]	; (800df14 <__sfp+0x88>)
 800debc:	60e3      	str	r3, [r4, #12]
 800debe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dec2:	6665      	str	r5, [r4, #100]	; 0x64
 800dec4:	f000 f84c 	bl	800df60 <__retarget_lock_init_recursive>
 800dec8:	f7ff ff96 	bl	800ddf8 <__sfp_lock_release>
 800decc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ded0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ded4:	6025      	str	r5, [r4, #0]
 800ded6:	61a5      	str	r5, [r4, #24]
 800ded8:	2208      	movs	r2, #8
 800deda:	4629      	mov	r1, r5
 800dedc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dee0:	f7fe fb2e 	bl	800c540 <memset>
 800dee4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dee8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800deec:	4620      	mov	r0, r4
 800deee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800def0:	3468      	adds	r4, #104	; 0x68
 800def2:	e7d9      	b.n	800dea8 <__sfp+0x1c>
 800def4:	2104      	movs	r1, #4
 800def6:	4638      	mov	r0, r7
 800def8:	f7ff ff62 	bl	800ddc0 <__sfmoreglue>
 800defc:	4604      	mov	r4, r0
 800defe:	6030      	str	r0, [r6, #0]
 800df00:	2800      	cmp	r0, #0
 800df02:	d1d5      	bne.n	800deb0 <__sfp+0x24>
 800df04:	f7ff ff78 	bl	800ddf8 <__sfp_lock_release>
 800df08:	230c      	movs	r3, #12
 800df0a:	603b      	str	r3, [r7, #0]
 800df0c:	e7ee      	b.n	800deec <__sfp+0x60>
 800df0e:	bf00      	nop
 800df10:	0800f58c 	.word	0x0800f58c
 800df14:	ffff0001 	.word	0xffff0001

0800df18 <_fwalk_reent>:
 800df18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df1c:	4606      	mov	r6, r0
 800df1e:	4688      	mov	r8, r1
 800df20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800df24:	2700      	movs	r7, #0
 800df26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df2a:	f1b9 0901 	subs.w	r9, r9, #1
 800df2e:	d505      	bpl.n	800df3c <_fwalk_reent+0x24>
 800df30:	6824      	ldr	r4, [r4, #0]
 800df32:	2c00      	cmp	r4, #0
 800df34:	d1f7      	bne.n	800df26 <_fwalk_reent+0xe>
 800df36:	4638      	mov	r0, r7
 800df38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df3c:	89ab      	ldrh	r3, [r5, #12]
 800df3e:	2b01      	cmp	r3, #1
 800df40:	d907      	bls.n	800df52 <_fwalk_reent+0x3a>
 800df42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df46:	3301      	adds	r3, #1
 800df48:	d003      	beq.n	800df52 <_fwalk_reent+0x3a>
 800df4a:	4629      	mov	r1, r5
 800df4c:	4630      	mov	r0, r6
 800df4e:	47c0      	blx	r8
 800df50:	4307      	orrs	r7, r0
 800df52:	3568      	adds	r5, #104	; 0x68
 800df54:	e7e9      	b.n	800df2a <_fwalk_reent+0x12>
	...

0800df58 <_localeconv_r>:
 800df58:	4800      	ldr	r0, [pc, #0]	; (800df5c <_localeconv_r+0x4>)
 800df5a:	4770      	bx	lr
 800df5c:	20000170 	.word	0x20000170

0800df60 <__retarget_lock_init_recursive>:
 800df60:	4770      	bx	lr

0800df62 <__retarget_lock_acquire_recursive>:
 800df62:	4770      	bx	lr

0800df64 <__retarget_lock_release_recursive>:
 800df64:	4770      	bx	lr
	...

0800df68 <__malloc_lock>:
 800df68:	4801      	ldr	r0, [pc, #4]	; (800df70 <__malloc_lock+0x8>)
 800df6a:	f7ff bffa 	b.w	800df62 <__retarget_lock_acquire_recursive>
 800df6e:	bf00      	nop
 800df70:	200081f4 	.word	0x200081f4

0800df74 <__malloc_unlock>:
 800df74:	4801      	ldr	r0, [pc, #4]	; (800df7c <__malloc_unlock+0x8>)
 800df76:	f7ff bff5 	b.w	800df64 <__retarget_lock_release_recursive>
 800df7a:	bf00      	nop
 800df7c:	200081f4 	.word	0x200081f4

0800df80 <_Balloc>:
 800df80:	b570      	push	{r4, r5, r6, lr}
 800df82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800df84:	4604      	mov	r4, r0
 800df86:	460d      	mov	r5, r1
 800df88:	b976      	cbnz	r6, 800dfa8 <_Balloc+0x28>
 800df8a:	2010      	movs	r0, #16
 800df8c:	f7fe faba 	bl	800c504 <malloc>
 800df90:	4602      	mov	r2, r0
 800df92:	6260      	str	r0, [r4, #36]	; 0x24
 800df94:	b920      	cbnz	r0, 800dfa0 <_Balloc+0x20>
 800df96:	4b18      	ldr	r3, [pc, #96]	; (800dff8 <_Balloc+0x78>)
 800df98:	4818      	ldr	r0, [pc, #96]	; (800dffc <_Balloc+0x7c>)
 800df9a:	2166      	movs	r1, #102	; 0x66
 800df9c:	f000 ff56 	bl	800ee4c <__assert_func>
 800dfa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfa4:	6006      	str	r6, [r0, #0]
 800dfa6:	60c6      	str	r6, [r0, #12]
 800dfa8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dfaa:	68f3      	ldr	r3, [r6, #12]
 800dfac:	b183      	cbz	r3, 800dfd0 <_Balloc+0x50>
 800dfae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfb0:	68db      	ldr	r3, [r3, #12]
 800dfb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dfb6:	b9b8      	cbnz	r0, 800dfe8 <_Balloc+0x68>
 800dfb8:	2101      	movs	r1, #1
 800dfba:	fa01 f605 	lsl.w	r6, r1, r5
 800dfbe:	1d72      	adds	r2, r6, #5
 800dfc0:	0092      	lsls	r2, r2, #2
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	f000 fb60 	bl	800e688 <_calloc_r>
 800dfc8:	b160      	cbz	r0, 800dfe4 <_Balloc+0x64>
 800dfca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dfce:	e00e      	b.n	800dfee <_Balloc+0x6e>
 800dfd0:	2221      	movs	r2, #33	; 0x21
 800dfd2:	2104      	movs	r1, #4
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	f000 fb57 	bl	800e688 <_calloc_r>
 800dfda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfdc:	60f0      	str	r0, [r6, #12]
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d1e4      	bne.n	800dfae <_Balloc+0x2e>
 800dfe4:	2000      	movs	r0, #0
 800dfe6:	bd70      	pop	{r4, r5, r6, pc}
 800dfe8:	6802      	ldr	r2, [r0, #0]
 800dfea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dfee:	2300      	movs	r3, #0
 800dff0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dff4:	e7f7      	b.n	800dfe6 <_Balloc+0x66>
 800dff6:	bf00      	nop
 800dff8:	0800f5d1 	.word	0x0800f5d1
 800dffc:	0800f6b4 	.word	0x0800f6b4

0800e000 <_Bfree>:
 800e000:	b570      	push	{r4, r5, r6, lr}
 800e002:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e004:	4605      	mov	r5, r0
 800e006:	460c      	mov	r4, r1
 800e008:	b976      	cbnz	r6, 800e028 <_Bfree+0x28>
 800e00a:	2010      	movs	r0, #16
 800e00c:	f7fe fa7a 	bl	800c504 <malloc>
 800e010:	4602      	mov	r2, r0
 800e012:	6268      	str	r0, [r5, #36]	; 0x24
 800e014:	b920      	cbnz	r0, 800e020 <_Bfree+0x20>
 800e016:	4b09      	ldr	r3, [pc, #36]	; (800e03c <_Bfree+0x3c>)
 800e018:	4809      	ldr	r0, [pc, #36]	; (800e040 <_Bfree+0x40>)
 800e01a:	218a      	movs	r1, #138	; 0x8a
 800e01c:	f000 ff16 	bl	800ee4c <__assert_func>
 800e020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e024:	6006      	str	r6, [r0, #0]
 800e026:	60c6      	str	r6, [r0, #12]
 800e028:	b13c      	cbz	r4, 800e03a <_Bfree+0x3a>
 800e02a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e02c:	6862      	ldr	r2, [r4, #4]
 800e02e:	68db      	ldr	r3, [r3, #12]
 800e030:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e034:	6021      	str	r1, [r4, #0]
 800e036:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e03a:	bd70      	pop	{r4, r5, r6, pc}
 800e03c:	0800f5d1 	.word	0x0800f5d1
 800e040:	0800f6b4 	.word	0x0800f6b4

0800e044 <__multadd>:
 800e044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e048:	690d      	ldr	r5, [r1, #16]
 800e04a:	4607      	mov	r7, r0
 800e04c:	460c      	mov	r4, r1
 800e04e:	461e      	mov	r6, r3
 800e050:	f101 0c14 	add.w	ip, r1, #20
 800e054:	2000      	movs	r0, #0
 800e056:	f8dc 3000 	ldr.w	r3, [ip]
 800e05a:	b299      	uxth	r1, r3
 800e05c:	fb02 6101 	mla	r1, r2, r1, r6
 800e060:	0c1e      	lsrs	r6, r3, #16
 800e062:	0c0b      	lsrs	r3, r1, #16
 800e064:	fb02 3306 	mla	r3, r2, r6, r3
 800e068:	b289      	uxth	r1, r1
 800e06a:	3001      	adds	r0, #1
 800e06c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e070:	4285      	cmp	r5, r0
 800e072:	f84c 1b04 	str.w	r1, [ip], #4
 800e076:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e07a:	dcec      	bgt.n	800e056 <__multadd+0x12>
 800e07c:	b30e      	cbz	r6, 800e0c2 <__multadd+0x7e>
 800e07e:	68a3      	ldr	r3, [r4, #8]
 800e080:	42ab      	cmp	r3, r5
 800e082:	dc19      	bgt.n	800e0b8 <__multadd+0x74>
 800e084:	6861      	ldr	r1, [r4, #4]
 800e086:	4638      	mov	r0, r7
 800e088:	3101      	adds	r1, #1
 800e08a:	f7ff ff79 	bl	800df80 <_Balloc>
 800e08e:	4680      	mov	r8, r0
 800e090:	b928      	cbnz	r0, 800e09e <__multadd+0x5a>
 800e092:	4602      	mov	r2, r0
 800e094:	4b0c      	ldr	r3, [pc, #48]	; (800e0c8 <__multadd+0x84>)
 800e096:	480d      	ldr	r0, [pc, #52]	; (800e0cc <__multadd+0x88>)
 800e098:	21b5      	movs	r1, #181	; 0xb5
 800e09a:	f000 fed7 	bl	800ee4c <__assert_func>
 800e09e:	6922      	ldr	r2, [r4, #16]
 800e0a0:	3202      	adds	r2, #2
 800e0a2:	f104 010c 	add.w	r1, r4, #12
 800e0a6:	0092      	lsls	r2, r2, #2
 800e0a8:	300c      	adds	r0, #12
 800e0aa:	f7fe fa3b 	bl	800c524 <memcpy>
 800e0ae:	4621      	mov	r1, r4
 800e0b0:	4638      	mov	r0, r7
 800e0b2:	f7ff ffa5 	bl	800e000 <_Bfree>
 800e0b6:	4644      	mov	r4, r8
 800e0b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e0bc:	3501      	adds	r5, #1
 800e0be:	615e      	str	r6, [r3, #20]
 800e0c0:	6125      	str	r5, [r4, #16]
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c8:	0800f643 	.word	0x0800f643
 800e0cc:	0800f6b4 	.word	0x0800f6b4

0800e0d0 <__hi0bits>:
 800e0d0:	0c03      	lsrs	r3, r0, #16
 800e0d2:	041b      	lsls	r3, r3, #16
 800e0d4:	b9d3      	cbnz	r3, 800e10c <__hi0bits+0x3c>
 800e0d6:	0400      	lsls	r0, r0, #16
 800e0d8:	2310      	movs	r3, #16
 800e0da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e0de:	bf04      	itt	eq
 800e0e0:	0200      	lsleq	r0, r0, #8
 800e0e2:	3308      	addeq	r3, #8
 800e0e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e0e8:	bf04      	itt	eq
 800e0ea:	0100      	lsleq	r0, r0, #4
 800e0ec:	3304      	addeq	r3, #4
 800e0ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e0f2:	bf04      	itt	eq
 800e0f4:	0080      	lsleq	r0, r0, #2
 800e0f6:	3302      	addeq	r3, #2
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	db05      	blt.n	800e108 <__hi0bits+0x38>
 800e0fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e100:	f103 0301 	add.w	r3, r3, #1
 800e104:	bf08      	it	eq
 800e106:	2320      	moveq	r3, #32
 800e108:	4618      	mov	r0, r3
 800e10a:	4770      	bx	lr
 800e10c:	2300      	movs	r3, #0
 800e10e:	e7e4      	b.n	800e0da <__hi0bits+0xa>

0800e110 <__lo0bits>:
 800e110:	6803      	ldr	r3, [r0, #0]
 800e112:	f013 0207 	ands.w	r2, r3, #7
 800e116:	4601      	mov	r1, r0
 800e118:	d00b      	beq.n	800e132 <__lo0bits+0x22>
 800e11a:	07da      	lsls	r2, r3, #31
 800e11c:	d423      	bmi.n	800e166 <__lo0bits+0x56>
 800e11e:	0798      	lsls	r0, r3, #30
 800e120:	bf49      	itett	mi
 800e122:	085b      	lsrmi	r3, r3, #1
 800e124:	089b      	lsrpl	r3, r3, #2
 800e126:	2001      	movmi	r0, #1
 800e128:	600b      	strmi	r3, [r1, #0]
 800e12a:	bf5c      	itt	pl
 800e12c:	600b      	strpl	r3, [r1, #0]
 800e12e:	2002      	movpl	r0, #2
 800e130:	4770      	bx	lr
 800e132:	b298      	uxth	r0, r3
 800e134:	b9a8      	cbnz	r0, 800e162 <__lo0bits+0x52>
 800e136:	0c1b      	lsrs	r3, r3, #16
 800e138:	2010      	movs	r0, #16
 800e13a:	b2da      	uxtb	r2, r3
 800e13c:	b90a      	cbnz	r2, 800e142 <__lo0bits+0x32>
 800e13e:	3008      	adds	r0, #8
 800e140:	0a1b      	lsrs	r3, r3, #8
 800e142:	071a      	lsls	r2, r3, #28
 800e144:	bf04      	itt	eq
 800e146:	091b      	lsreq	r3, r3, #4
 800e148:	3004      	addeq	r0, #4
 800e14a:	079a      	lsls	r2, r3, #30
 800e14c:	bf04      	itt	eq
 800e14e:	089b      	lsreq	r3, r3, #2
 800e150:	3002      	addeq	r0, #2
 800e152:	07da      	lsls	r2, r3, #31
 800e154:	d403      	bmi.n	800e15e <__lo0bits+0x4e>
 800e156:	085b      	lsrs	r3, r3, #1
 800e158:	f100 0001 	add.w	r0, r0, #1
 800e15c:	d005      	beq.n	800e16a <__lo0bits+0x5a>
 800e15e:	600b      	str	r3, [r1, #0]
 800e160:	4770      	bx	lr
 800e162:	4610      	mov	r0, r2
 800e164:	e7e9      	b.n	800e13a <__lo0bits+0x2a>
 800e166:	2000      	movs	r0, #0
 800e168:	4770      	bx	lr
 800e16a:	2020      	movs	r0, #32
 800e16c:	4770      	bx	lr
	...

0800e170 <__i2b>:
 800e170:	b510      	push	{r4, lr}
 800e172:	460c      	mov	r4, r1
 800e174:	2101      	movs	r1, #1
 800e176:	f7ff ff03 	bl	800df80 <_Balloc>
 800e17a:	4602      	mov	r2, r0
 800e17c:	b928      	cbnz	r0, 800e18a <__i2b+0x1a>
 800e17e:	4b05      	ldr	r3, [pc, #20]	; (800e194 <__i2b+0x24>)
 800e180:	4805      	ldr	r0, [pc, #20]	; (800e198 <__i2b+0x28>)
 800e182:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e186:	f000 fe61 	bl	800ee4c <__assert_func>
 800e18a:	2301      	movs	r3, #1
 800e18c:	6144      	str	r4, [r0, #20]
 800e18e:	6103      	str	r3, [r0, #16]
 800e190:	bd10      	pop	{r4, pc}
 800e192:	bf00      	nop
 800e194:	0800f643 	.word	0x0800f643
 800e198:	0800f6b4 	.word	0x0800f6b4

0800e19c <__multiply>:
 800e19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a0:	4691      	mov	r9, r2
 800e1a2:	690a      	ldr	r2, [r1, #16]
 800e1a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	bfb8      	it	lt
 800e1ac:	460b      	movlt	r3, r1
 800e1ae:	460c      	mov	r4, r1
 800e1b0:	bfbc      	itt	lt
 800e1b2:	464c      	movlt	r4, r9
 800e1b4:	4699      	movlt	r9, r3
 800e1b6:	6927      	ldr	r7, [r4, #16]
 800e1b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e1bc:	68a3      	ldr	r3, [r4, #8]
 800e1be:	6861      	ldr	r1, [r4, #4]
 800e1c0:	eb07 060a 	add.w	r6, r7, sl
 800e1c4:	42b3      	cmp	r3, r6
 800e1c6:	b085      	sub	sp, #20
 800e1c8:	bfb8      	it	lt
 800e1ca:	3101      	addlt	r1, #1
 800e1cc:	f7ff fed8 	bl	800df80 <_Balloc>
 800e1d0:	b930      	cbnz	r0, 800e1e0 <__multiply+0x44>
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	4b44      	ldr	r3, [pc, #272]	; (800e2e8 <__multiply+0x14c>)
 800e1d6:	4845      	ldr	r0, [pc, #276]	; (800e2ec <__multiply+0x150>)
 800e1d8:	f240 115d 	movw	r1, #349	; 0x15d
 800e1dc:	f000 fe36 	bl	800ee4c <__assert_func>
 800e1e0:	f100 0514 	add.w	r5, r0, #20
 800e1e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e1e8:	462b      	mov	r3, r5
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	4543      	cmp	r3, r8
 800e1ee:	d321      	bcc.n	800e234 <__multiply+0x98>
 800e1f0:	f104 0314 	add.w	r3, r4, #20
 800e1f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e1f8:	f109 0314 	add.w	r3, r9, #20
 800e1fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e200:	9202      	str	r2, [sp, #8]
 800e202:	1b3a      	subs	r2, r7, r4
 800e204:	3a15      	subs	r2, #21
 800e206:	f022 0203 	bic.w	r2, r2, #3
 800e20a:	3204      	adds	r2, #4
 800e20c:	f104 0115 	add.w	r1, r4, #21
 800e210:	428f      	cmp	r7, r1
 800e212:	bf38      	it	cc
 800e214:	2204      	movcc	r2, #4
 800e216:	9201      	str	r2, [sp, #4]
 800e218:	9a02      	ldr	r2, [sp, #8]
 800e21a:	9303      	str	r3, [sp, #12]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d80c      	bhi.n	800e23a <__multiply+0x9e>
 800e220:	2e00      	cmp	r6, #0
 800e222:	dd03      	ble.n	800e22c <__multiply+0x90>
 800e224:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d05a      	beq.n	800e2e2 <__multiply+0x146>
 800e22c:	6106      	str	r6, [r0, #16]
 800e22e:	b005      	add	sp, #20
 800e230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e234:	f843 2b04 	str.w	r2, [r3], #4
 800e238:	e7d8      	b.n	800e1ec <__multiply+0x50>
 800e23a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e23e:	f1ba 0f00 	cmp.w	sl, #0
 800e242:	d024      	beq.n	800e28e <__multiply+0xf2>
 800e244:	f104 0e14 	add.w	lr, r4, #20
 800e248:	46a9      	mov	r9, r5
 800e24a:	f04f 0c00 	mov.w	ip, #0
 800e24e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e252:	f8d9 1000 	ldr.w	r1, [r9]
 800e256:	fa1f fb82 	uxth.w	fp, r2
 800e25a:	b289      	uxth	r1, r1
 800e25c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e260:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e264:	f8d9 2000 	ldr.w	r2, [r9]
 800e268:	4461      	add	r1, ip
 800e26a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e26e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e272:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e276:	b289      	uxth	r1, r1
 800e278:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e27c:	4577      	cmp	r7, lr
 800e27e:	f849 1b04 	str.w	r1, [r9], #4
 800e282:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e286:	d8e2      	bhi.n	800e24e <__multiply+0xb2>
 800e288:	9a01      	ldr	r2, [sp, #4]
 800e28a:	f845 c002 	str.w	ip, [r5, r2]
 800e28e:	9a03      	ldr	r2, [sp, #12]
 800e290:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e294:	3304      	adds	r3, #4
 800e296:	f1b9 0f00 	cmp.w	r9, #0
 800e29a:	d020      	beq.n	800e2de <__multiply+0x142>
 800e29c:	6829      	ldr	r1, [r5, #0]
 800e29e:	f104 0c14 	add.w	ip, r4, #20
 800e2a2:	46ae      	mov	lr, r5
 800e2a4:	f04f 0a00 	mov.w	sl, #0
 800e2a8:	f8bc b000 	ldrh.w	fp, [ip]
 800e2ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e2b0:	fb09 220b 	mla	r2, r9, fp, r2
 800e2b4:	4492      	add	sl, r2
 800e2b6:	b289      	uxth	r1, r1
 800e2b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e2bc:	f84e 1b04 	str.w	r1, [lr], #4
 800e2c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e2c4:	f8be 1000 	ldrh.w	r1, [lr]
 800e2c8:	0c12      	lsrs	r2, r2, #16
 800e2ca:	fb09 1102 	mla	r1, r9, r2, r1
 800e2ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e2d2:	4567      	cmp	r7, ip
 800e2d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e2d8:	d8e6      	bhi.n	800e2a8 <__multiply+0x10c>
 800e2da:	9a01      	ldr	r2, [sp, #4]
 800e2dc:	50a9      	str	r1, [r5, r2]
 800e2de:	3504      	adds	r5, #4
 800e2e0:	e79a      	b.n	800e218 <__multiply+0x7c>
 800e2e2:	3e01      	subs	r6, #1
 800e2e4:	e79c      	b.n	800e220 <__multiply+0x84>
 800e2e6:	bf00      	nop
 800e2e8:	0800f643 	.word	0x0800f643
 800e2ec:	0800f6b4 	.word	0x0800f6b4

0800e2f0 <__pow5mult>:
 800e2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2f4:	4615      	mov	r5, r2
 800e2f6:	f012 0203 	ands.w	r2, r2, #3
 800e2fa:	4606      	mov	r6, r0
 800e2fc:	460f      	mov	r7, r1
 800e2fe:	d007      	beq.n	800e310 <__pow5mult+0x20>
 800e300:	4c25      	ldr	r4, [pc, #148]	; (800e398 <__pow5mult+0xa8>)
 800e302:	3a01      	subs	r2, #1
 800e304:	2300      	movs	r3, #0
 800e306:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e30a:	f7ff fe9b 	bl	800e044 <__multadd>
 800e30e:	4607      	mov	r7, r0
 800e310:	10ad      	asrs	r5, r5, #2
 800e312:	d03d      	beq.n	800e390 <__pow5mult+0xa0>
 800e314:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e316:	b97c      	cbnz	r4, 800e338 <__pow5mult+0x48>
 800e318:	2010      	movs	r0, #16
 800e31a:	f7fe f8f3 	bl	800c504 <malloc>
 800e31e:	4602      	mov	r2, r0
 800e320:	6270      	str	r0, [r6, #36]	; 0x24
 800e322:	b928      	cbnz	r0, 800e330 <__pow5mult+0x40>
 800e324:	4b1d      	ldr	r3, [pc, #116]	; (800e39c <__pow5mult+0xac>)
 800e326:	481e      	ldr	r0, [pc, #120]	; (800e3a0 <__pow5mult+0xb0>)
 800e328:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e32c:	f000 fd8e 	bl	800ee4c <__assert_func>
 800e330:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e334:	6004      	str	r4, [r0, #0]
 800e336:	60c4      	str	r4, [r0, #12]
 800e338:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e33c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e340:	b94c      	cbnz	r4, 800e356 <__pow5mult+0x66>
 800e342:	f240 2171 	movw	r1, #625	; 0x271
 800e346:	4630      	mov	r0, r6
 800e348:	f7ff ff12 	bl	800e170 <__i2b>
 800e34c:	2300      	movs	r3, #0
 800e34e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e352:	4604      	mov	r4, r0
 800e354:	6003      	str	r3, [r0, #0]
 800e356:	f04f 0900 	mov.w	r9, #0
 800e35a:	07eb      	lsls	r3, r5, #31
 800e35c:	d50a      	bpl.n	800e374 <__pow5mult+0x84>
 800e35e:	4639      	mov	r1, r7
 800e360:	4622      	mov	r2, r4
 800e362:	4630      	mov	r0, r6
 800e364:	f7ff ff1a 	bl	800e19c <__multiply>
 800e368:	4639      	mov	r1, r7
 800e36a:	4680      	mov	r8, r0
 800e36c:	4630      	mov	r0, r6
 800e36e:	f7ff fe47 	bl	800e000 <_Bfree>
 800e372:	4647      	mov	r7, r8
 800e374:	106d      	asrs	r5, r5, #1
 800e376:	d00b      	beq.n	800e390 <__pow5mult+0xa0>
 800e378:	6820      	ldr	r0, [r4, #0]
 800e37a:	b938      	cbnz	r0, 800e38c <__pow5mult+0x9c>
 800e37c:	4622      	mov	r2, r4
 800e37e:	4621      	mov	r1, r4
 800e380:	4630      	mov	r0, r6
 800e382:	f7ff ff0b 	bl	800e19c <__multiply>
 800e386:	6020      	str	r0, [r4, #0]
 800e388:	f8c0 9000 	str.w	r9, [r0]
 800e38c:	4604      	mov	r4, r0
 800e38e:	e7e4      	b.n	800e35a <__pow5mult+0x6a>
 800e390:	4638      	mov	r0, r7
 800e392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e396:	bf00      	nop
 800e398:	0800f800 	.word	0x0800f800
 800e39c:	0800f5d1 	.word	0x0800f5d1
 800e3a0:	0800f6b4 	.word	0x0800f6b4

0800e3a4 <__lshift>:
 800e3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3a8:	460c      	mov	r4, r1
 800e3aa:	6849      	ldr	r1, [r1, #4]
 800e3ac:	6923      	ldr	r3, [r4, #16]
 800e3ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e3b2:	68a3      	ldr	r3, [r4, #8]
 800e3b4:	4607      	mov	r7, r0
 800e3b6:	4691      	mov	r9, r2
 800e3b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e3bc:	f108 0601 	add.w	r6, r8, #1
 800e3c0:	42b3      	cmp	r3, r6
 800e3c2:	db0b      	blt.n	800e3dc <__lshift+0x38>
 800e3c4:	4638      	mov	r0, r7
 800e3c6:	f7ff fddb 	bl	800df80 <_Balloc>
 800e3ca:	4605      	mov	r5, r0
 800e3cc:	b948      	cbnz	r0, 800e3e2 <__lshift+0x3e>
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	4b2a      	ldr	r3, [pc, #168]	; (800e47c <__lshift+0xd8>)
 800e3d2:	482b      	ldr	r0, [pc, #172]	; (800e480 <__lshift+0xdc>)
 800e3d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e3d8:	f000 fd38 	bl	800ee4c <__assert_func>
 800e3dc:	3101      	adds	r1, #1
 800e3de:	005b      	lsls	r3, r3, #1
 800e3e0:	e7ee      	b.n	800e3c0 <__lshift+0x1c>
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	f100 0114 	add.w	r1, r0, #20
 800e3e8:	f100 0210 	add.w	r2, r0, #16
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	4553      	cmp	r3, sl
 800e3f0:	db37      	blt.n	800e462 <__lshift+0xbe>
 800e3f2:	6920      	ldr	r0, [r4, #16]
 800e3f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3f8:	f104 0314 	add.w	r3, r4, #20
 800e3fc:	f019 091f 	ands.w	r9, r9, #31
 800e400:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e404:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e408:	d02f      	beq.n	800e46a <__lshift+0xc6>
 800e40a:	f1c9 0e20 	rsb	lr, r9, #32
 800e40e:	468a      	mov	sl, r1
 800e410:	f04f 0c00 	mov.w	ip, #0
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	fa02 f209 	lsl.w	r2, r2, r9
 800e41a:	ea42 020c 	orr.w	r2, r2, ip
 800e41e:	f84a 2b04 	str.w	r2, [sl], #4
 800e422:	f853 2b04 	ldr.w	r2, [r3], #4
 800e426:	4298      	cmp	r0, r3
 800e428:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e42c:	d8f2      	bhi.n	800e414 <__lshift+0x70>
 800e42e:	1b03      	subs	r3, r0, r4
 800e430:	3b15      	subs	r3, #21
 800e432:	f023 0303 	bic.w	r3, r3, #3
 800e436:	3304      	adds	r3, #4
 800e438:	f104 0215 	add.w	r2, r4, #21
 800e43c:	4290      	cmp	r0, r2
 800e43e:	bf38      	it	cc
 800e440:	2304      	movcc	r3, #4
 800e442:	f841 c003 	str.w	ip, [r1, r3]
 800e446:	f1bc 0f00 	cmp.w	ip, #0
 800e44a:	d001      	beq.n	800e450 <__lshift+0xac>
 800e44c:	f108 0602 	add.w	r6, r8, #2
 800e450:	3e01      	subs	r6, #1
 800e452:	4638      	mov	r0, r7
 800e454:	612e      	str	r6, [r5, #16]
 800e456:	4621      	mov	r1, r4
 800e458:	f7ff fdd2 	bl	800e000 <_Bfree>
 800e45c:	4628      	mov	r0, r5
 800e45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e462:	f842 0f04 	str.w	r0, [r2, #4]!
 800e466:	3301      	adds	r3, #1
 800e468:	e7c1      	b.n	800e3ee <__lshift+0x4a>
 800e46a:	3904      	subs	r1, #4
 800e46c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e470:	f841 2f04 	str.w	r2, [r1, #4]!
 800e474:	4298      	cmp	r0, r3
 800e476:	d8f9      	bhi.n	800e46c <__lshift+0xc8>
 800e478:	e7ea      	b.n	800e450 <__lshift+0xac>
 800e47a:	bf00      	nop
 800e47c:	0800f643 	.word	0x0800f643
 800e480:	0800f6b4 	.word	0x0800f6b4

0800e484 <__mcmp>:
 800e484:	b530      	push	{r4, r5, lr}
 800e486:	6902      	ldr	r2, [r0, #16]
 800e488:	690c      	ldr	r4, [r1, #16]
 800e48a:	1b12      	subs	r2, r2, r4
 800e48c:	d10e      	bne.n	800e4ac <__mcmp+0x28>
 800e48e:	f100 0314 	add.w	r3, r0, #20
 800e492:	3114      	adds	r1, #20
 800e494:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e498:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e49c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e4a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e4a4:	42a5      	cmp	r5, r4
 800e4a6:	d003      	beq.n	800e4b0 <__mcmp+0x2c>
 800e4a8:	d305      	bcc.n	800e4b6 <__mcmp+0x32>
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	4610      	mov	r0, r2
 800e4ae:	bd30      	pop	{r4, r5, pc}
 800e4b0:	4283      	cmp	r3, r0
 800e4b2:	d3f3      	bcc.n	800e49c <__mcmp+0x18>
 800e4b4:	e7fa      	b.n	800e4ac <__mcmp+0x28>
 800e4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ba:	e7f7      	b.n	800e4ac <__mcmp+0x28>

0800e4bc <__mdiff>:
 800e4bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c0:	460c      	mov	r4, r1
 800e4c2:	4606      	mov	r6, r0
 800e4c4:	4611      	mov	r1, r2
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	4690      	mov	r8, r2
 800e4ca:	f7ff ffdb 	bl	800e484 <__mcmp>
 800e4ce:	1e05      	subs	r5, r0, #0
 800e4d0:	d110      	bne.n	800e4f4 <__mdiff+0x38>
 800e4d2:	4629      	mov	r1, r5
 800e4d4:	4630      	mov	r0, r6
 800e4d6:	f7ff fd53 	bl	800df80 <_Balloc>
 800e4da:	b930      	cbnz	r0, 800e4ea <__mdiff+0x2e>
 800e4dc:	4b3a      	ldr	r3, [pc, #232]	; (800e5c8 <__mdiff+0x10c>)
 800e4de:	4602      	mov	r2, r0
 800e4e0:	f240 2132 	movw	r1, #562	; 0x232
 800e4e4:	4839      	ldr	r0, [pc, #228]	; (800e5cc <__mdiff+0x110>)
 800e4e6:	f000 fcb1 	bl	800ee4c <__assert_func>
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e4f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4f4:	bfa4      	itt	ge
 800e4f6:	4643      	movge	r3, r8
 800e4f8:	46a0      	movge	r8, r4
 800e4fa:	4630      	mov	r0, r6
 800e4fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e500:	bfa6      	itte	ge
 800e502:	461c      	movge	r4, r3
 800e504:	2500      	movge	r5, #0
 800e506:	2501      	movlt	r5, #1
 800e508:	f7ff fd3a 	bl	800df80 <_Balloc>
 800e50c:	b920      	cbnz	r0, 800e518 <__mdiff+0x5c>
 800e50e:	4b2e      	ldr	r3, [pc, #184]	; (800e5c8 <__mdiff+0x10c>)
 800e510:	4602      	mov	r2, r0
 800e512:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e516:	e7e5      	b.n	800e4e4 <__mdiff+0x28>
 800e518:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e51c:	6926      	ldr	r6, [r4, #16]
 800e51e:	60c5      	str	r5, [r0, #12]
 800e520:	f104 0914 	add.w	r9, r4, #20
 800e524:	f108 0514 	add.w	r5, r8, #20
 800e528:	f100 0e14 	add.w	lr, r0, #20
 800e52c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e530:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e534:	f108 0210 	add.w	r2, r8, #16
 800e538:	46f2      	mov	sl, lr
 800e53a:	2100      	movs	r1, #0
 800e53c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e540:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e544:	fa1f f883 	uxth.w	r8, r3
 800e548:	fa11 f18b 	uxtah	r1, r1, fp
 800e54c:	0c1b      	lsrs	r3, r3, #16
 800e54e:	eba1 0808 	sub.w	r8, r1, r8
 800e552:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e556:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e55a:	fa1f f888 	uxth.w	r8, r8
 800e55e:	1419      	asrs	r1, r3, #16
 800e560:	454e      	cmp	r6, r9
 800e562:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e566:	f84a 3b04 	str.w	r3, [sl], #4
 800e56a:	d8e7      	bhi.n	800e53c <__mdiff+0x80>
 800e56c:	1b33      	subs	r3, r6, r4
 800e56e:	3b15      	subs	r3, #21
 800e570:	f023 0303 	bic.w	r3, r3, #3
 800e574:	3304      	adds	r3, #4
 800e576:	3415      	adds	r4, #21
 800e578:	42a6      	cmp	r6, r4
 800e57a:	bf38      	it	cc
 800e57c:	2304      	movcc	r3, #4
 800e57e:	441d      	add	r5, r3
 800e580:	4473      	add	r3, lr
 800e582:	469e      	mov	lr, r3
 800e584:	462e      	mov	r6, r5
 800e586:	4566      	cmp	r6, ip
 800e588:	d30e      	bcc.n	800e5a8 <__mdiff+0xec>
 800e58a:	f10c 0203 	add.w	r2, ip, #3
 800e58e:	1b52      	subs	r2, r2, r5
 800e590:	f022 0203 	bic.w	r2, r2, #3
 800e594:	3d03      	subs	r5, #3
 800e596:	45ac      	cmp	ip, r5
 800e598:	bf38      	it	cc
 800e59a:	2200      	movcc	r2, #0
 800e59c:	441a      	add	r2, r3
 800e59e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e5a2:	b17b      	cbz	r3, 800e5c4 <__mdiff+0x108>
 800e5a4:	6107      	str	r7, [r0, #16]
 800e5a6:	e7a3      	b.n	800e4f0 <__mdiff+0x34>
 800e5a8:	f856 8b04 	ldr.w	r8, [r6], #4
 800e5ac:	fa11 f288 	uxtah	r2, r1, r8
 800e5b0:	1414      	asrs	r4, r2, #16
 800e5b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e5b6:	b292      	uxth	r2, r2
 800e5b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e5bc:	f84e 2b04 	str.w	r2, [lr], #4
 800e5c0:	1421      	asrs	r1, r4, #16
 800e5c2:	e7e0      	b.n	800e586 <__mdiff+0xca>
 800e5c4:	3f01      	subs	r7, #1
 800e5c6:	e7ea      	b.n	800e59e <__mdiff+0xe2>
 800e5c8:	0800f643 	.word	0x0800f643
 800e5cc:	0800f6b4 	.word	0x0800f6b4

0800e5d0 <__d2b>:
 800e5d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e5d4:	4689      	mov	r9, r1
 800e5d6:	2101      	movs	r1, #1
 800e5d8:	ec57 6b10 	vmov	r6, r7, d0
 800e5dc:	4690      	mov	r8, r2
 800e5de:	f7ff fccf 	bl	800df80 <_Balloc>
 800e5e2:	4604      	mov	r4, r0
 800e5e4:	b930      	cbnz	r0, 800e5f4 <__d2b+0x24>
 800e5e6:	4602      	mov	r2, r0
 800e5e8:	4b25      	ldr	r3, [pc, #148]	; (800e680 <__d2b+0xb0>)
 800e5ea:	4826      	ldr	r0, [pc, #152]	; (800e684 <__d2b+0xb4>)
 800e5ec:	f240 310a 	movw	r1, #778	; 0x30a
 800e5f0:	f000 fc2c 	bl	800ee4c <__assert_func>
 800e5f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e5f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e5fc:	bb35      	cbnz	r5, 800e64c <__d2b+0x7c>
 800e5fe:	2e00      	cmp	r6, #0
 800e600:	9301      	str	r3, [sp, #4]
 800e602:	d028      	beq.n	800e656 <__d2b+0x86>
 800e604:	4668      	mov	r0, sp
 800e606:	9600      	str	r6, [sp, #0]
 800e608:	f7ff fd82 	bl	800e110 <__lo0bits>
 800e60c:	9900      	ldr	r1, [sp, #0]
 800e60e:	b300      	cbz	r0, 800e652 <__d2b+0x82>
 800e610:	9a01      	ldr	r2, [sp, #4]
 800e612:	f1c0 0320 	rsb	r3, r0, #32
 800e616:	fa02 f303 	lsl.w	r3, r2, r3
 800e61a:	430b      	orrs	r3, r1
 800e61c:	40c2      	lsrs	r2, r0
 800e61e:	6163      	str	r3, [r4, #20]
 800e620:	9201      	str	r2, [sp, #4]
 800e622:	9b01      	ldr	r3, [sp, #4]
 800e624:	61a3      	str	r3, [r4, #24]
 800e626:	2b00      	cmp	r3, #0
 800e628:	bf14      	ite	ne
 800e62a:	2202      	movne	r2, #2
 800e62c:	2201      	moveq	r2, #1
 800e62e:	6122      	str	r2, [r4, #16]
 800e630:	b1d5      	cbz	r5, 800e668 <__d2b+0x98>
 800e632:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e636:	4405      	add	r5, r0
 800e638:	f8c9 5000 	str.w	r5, [r9]
 800e63c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e640:	f8c8 0000 	str.w	r0, [r8]
 800e644:	4620      	mov	r0, r4
 800e646:	b003      	add	sp, #12
 800e648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e64c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e650:	e7d5      	b.n	800e5fe <__d2b+0x2e>
 800e652:	6161      	str	r1, [r4, #20]
 800e654:	e7e5      	b.n	800e622 <__d2b+0x52>
 800e656:	a801      	add	r0, sp, #4
 800e658:	f7ff fd5a 	bl	800e110 <__lo0bits>
 800e65c:	9b01      	ldr	r3, [sp, #4]
 800e65e:	6163      	str	r3, [r4, #20]
 800e660:	2201      	movs	r2, #1
 800e662:	6122      	str	r2, [r4, #16]
 800e664:	3020      	adds	r0, #32
 800e666:	e7e3      	b.n	800e630 <__d2b+0x60>
 800e668:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e66c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e670:	f8c9 0000 	str.w	r0, [r9]
 800e674:	6918      	ldr	r0, [r3, #16]
 800e676:	f7ff fd2b 	bl	800e0d0 <__hi0bits>
 800e67a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e67e:	e7df      	b.n	800e640 <__d2b+0x70>
 800e680:	0800f643 	.word	0x0800f643
 800e684:	0800f6b4 	.word	0x0800f6b4

0800e688 <_calloc_r>:
 800e688:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e68a:	fba1 2402 	umull	r2, r4, r1, r2
 800e68e:	b94c      	cbnz	r4, 800e6a4 <_calloc_r+0x1c>
 800e690:	4611      	mov	r1, r2
 800e692:	9201      	str	r2, [sp, #4]
 800e694:	f7fd ffc8 	bl	800c628 <_malloc_r>
 800e698:	9a01      	ldr	r2, [sp, #4]
 800e69a:	4605      	mov	r5, r0
 800e69c:	b930      	cbnz	r0, 800e6ac <_calloc_r+0x24>
 800e69e:	4628      	mov	r0, r5
 800e6a0:	b003      	add	sp, #12
 800e6a2:	bd30      	pop	{r4, r5, pc}
 800e6a4:	220c      	movs	r2, #12
 800e6a6:	6002      	str	r2, [r0, #0]
 800e6a8:	2500      	movs	r5, #0
 800e6aa:	e7f8      	b.n	800e69e <_calloc_r+0x16>
 800e6ac:	4621      	mov	r1, r4
 800e6ae:	f7fd ff47 	bl	800c540 <memset>
 800e6b2:	e7f4      	b.n	800e69e <_calloc_r+0x16>

0800e6b4 <__ssputs_r>:
 800e6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6b8:	688e      	ldr	r6, [r1, #8]
 800e6ba:	429e      	cmp	r6, r3
 800e6bc:	4682      	mov	sl, r0
 800e6be:	460c      	mov	r4, r1
 800e6c0:	4690      	mov	r8, r2
 800e6c2:	461f      	mov	r7, r3
 800e6c4:	d838      	bhi.n	800e738 <__ssputs_r+0x84>
 800e6c6:	898a      	ldrh	r2, [r1, #12]
 800e6c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e6cc:	d032      	beq.n	800e734 <__ssputs_r+0x80>
 800e6ce:	6825      	ldr	r5, [r4, #0]
 800e6d0:	6909      	ldr	r1, [r1, #16]
 800e6d2:	eba5 0901 	sub.w	r9, r5, r1
 800e6d6:	6965      	ldr	r5, [r4, #20]
 800e6d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e6dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	444b      	add	r3, r9
 800e6e4:	106d      	asrs	r5, r5, #1
 800e6e6:	429d      	cmp	r5, r3
 800e6e8:	bf38      	it	cc
 800e6ea:	461d      	movcc	r5, r3
 800e6ec:	0553      	lsls	r3, r2, #21
 800e6ee:	d531      	bpl.n	800e754 <__ssputs_r+0xa0>
 800e6f0:	4629      	mov	r1, r5
 800e6f2:	f7fd ff99 	bl	800c628 <_malloc_r>
 800e6f6:	4606      	mov	r6, r0
 800e6f8:	b950      	cbnz	r0, 800e710 <__ssputs_r+0x5c>
 800e6fa:	230c      	movs	r3, #12
 800e6fc:	f8ca 3000 	str.w	r3, [sl]
 800e700:	89a3      	ldrh	r3, [r4, #12]
 800e702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e706:	81a3      	strh	r3, [r4, #12]
 800e708:	f04f 30ff 	mov.w	r0, #4294967295
 800e70c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e710:	6921      	ldr	r1, [r4, #16]
 800e712:	464a      	mov	r2, r9
 800e714:	f7fd ff06 	bl	800c524 <memcpy>
 800e718:	89a3      	ldrh	r3, [r4, #12]
 800e71a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e71e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e722:	81a3      	strh	r3, [r4, #12]
 800e724:	6126      	str	r6, [r4, #16]
 800e726:	6165      	str	r5, [r4, #20]
 800e728:	444e      	add	r6, r9
 800e72a:	eba5 0509 	sub.w	r5, r5, r9
 800e72e:	6026      	str	r6, [r4, #0]
 800e730:	60a5      	str	r5, [r4, #8]
 800e732:	463e      	mov	r6, r7
 800e734:	42be      	cmp	r6, r7
 800e736:	d900      	bls.n	800e73a <__ssputs_r+0x86>
 800e738:	463e      	mov	r6, r7
 800e73a:	6820      	ldr	r0, [r4, #0]
 800e73c:	4632      	mov	r2, r6
 800e73e:	4641      	mov	r1, r8
 800e740:	f000 fd10 	bl	800f164 <memmove>
 800e744:	68a3      	ldr	r3, [r4, #8]
 800e746:	1b9b      	subs	r3, r3, r6
 800e748:	60a3      	str	r3, [r4, #8]
 800e74a:	6823      	ldr	r3, [r4, #0]
 800e74c:	4433      	add	r3, r6
 800e74e:	6023      	str	r3, [r4, #0]
 800e750:	2000      	movs	r0, #0
 800e752:	e7db      	b.n	800e70c <__ssputs_r+0x58>
 800e754:	462a      	mov	r2, r5
 800e756:	f000 fd1f 	bl	800f198 <_realloc_r>
 800e75a:	4606      	mov	r6, r0
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d1e1      	bne.n	800e724 <__ssputs_r+0x70>
 800e760:	6921      	ldr	r1, [r4, #16]
 800e762:	4650      	mov	r0, sl
 800e764:	f7fd fef4 	bl	800c550 <_free_r>
 800e768:	e7c7      	b.n	800e6fa <__ssputs_r+0x46>
	...

0800e76c <_svfiprintf_r>:
 800e76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e770:	4698      	mov	r8, r3
 800e772:	898b      	ldrh	r3, [r1, #12]
 800e774:	061b      	lsls	r3, r3, #24
 800e776:	b09d      	sub	sp, #116	; 0x74
 800e778:	4607      	mov	r7, r0
 800e77a:	460d      	mov	r5, r1
 800e77c:	4614      	mov	r4, r2
 800e77e:	d50e      	bpl.n	800e79e <_svfiprintf_r+0x32>
 800e780:	690b      	ldr	r3, [r1, #16]
 800e782:	b963      	cbnz	r3, 800e79e <_svfiprintf_r+0x32>
 800e784:	2140      	movs	r1, #64	; 0x40
 800e786:	f7fd ff4f 	bl	800c628 <_malloc_r>
 800e78a:	6028      	str	r0, [r5, #0]
 800e78c:	6128      	str	r0, [r5, #16]
 800e78e:	b920      	cbnz	r0, 800e79a <_svfiprintf_r+0x2e>
 800e790:	230c      	movs	r3, #12
 800e792:	603b      	str	r3, [r7, #0]
 800e794:	f04f 30ff 	mov.w	r0, #4294967295
 800e798:	e0d1      	b.n	800e93e <_svfiprintf_r+0x1d2>
 800e79a:	2340      	movs	r3, #64	; 0x40
 800e79c:	616b      	str	r3, [r5, #20]
 800e79e:	2300      	movs	r3, #0
 800e7a0:	9309      	str	r3, [sp, #36]	; 0x24
 800e7a2:	2320      	movs	r3, #32
 800e7a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7ac:	2330      	movs	r3, #48	; 0x30
 800e7ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e958 <_svfiprintf_r+0x1ec>
 800e7b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7b6:	f04f 0901 	mov.w	r9, #1
 800e7ba:	4623      	mov	r3, r4
 800e7bc:	469a      	mov	sl, r3
 800e7be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7c2:	b10a      	cbz	r2, 800e7c8 <_svfiprintf_r+0x5c>
 800e7c4:	2a25      	cmp	r2, #37	; 0x25
 800e7c6:	d1f9      	bne.n	800e7bc <_svfiprintf_r+0x50>
 800e7c8:	ebba 0b04 	subs.w	fp, sl, r4
 800e7cc:	d00b      	beq.n	800e7e6 <_svfiprintf_r+0x7a>
 800e7ce:	465b      	mov	r3, fp
 800e7d0:	4622      	mov	r2, r4
 800e7d2:	4629      	mov	r1, r5
 800e7d4:	4638      	mov	r0, r7
 800e7d6:	f7ff ff6d 	bl	800e6b4 <__ssputs_r>
 800e7da:	3001      	adds	r0, #1
 800e7dc:	f000 80aa 	beq.w	800e934 <_svfiprintf_r+0x1c8>
 800e7e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7e2:	445a      	add	r2, fp
 800e7e4:	9209      	str	r2, [sp, #36]	; 0x24
 800e7e6:	f89a 3000 	ldrb.w	r3, [sl]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	f000 80a2 	beq.w	800e934 <_svfiprintf_r+0x1c8>
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e7f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7fa:	f10a 0a01 	add.w	sl, sl, #1
 800e7fe:	9304      	str	r3, [sp, #16]
 800e800:	9307      	str	r3, [sp, #28]
 800e802:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e806:	931a      	str	r3, [sp, #104]	; 0x68
 800e808:	4654      	mov	r4, sl
 800e80a:	2205      	movs	r2, #5
 800e80c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e810:	4851      	ldr	r0, [pc, #324]	; (800e958 <_svfiprintf_r+0x1ec>)
 800e812:	f7f1 fcf5 	bl	8000200 <memchr>
 800e816:	9a04      	ldr	r2, [sp, #16]
 800e818:	b9d8      	cbnz	r0, 800e852 <_svfiprintf_r+0xe6>
 800e81a:	06d0      	lsls	r0, r2, #27
 800e81c:	bf44      	itt	mi
 800e81e:	2320      	movmi	r3, #32
 800e820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e824:	0711      	lsls	r1, r2, #28
 800e826:	bf44      	itt	mi
 800e828:	232b      	movmi	r3, #43	; 0x2b
 800e82a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e82e:	f89a 3000 	ldrb.w	r3, [sl]
 800e832:	2b2a      	cmp	r3, #42	; 0x2a
 800e834:	d015      	beq.n	800e862 <_svfiprintf_r+0xf6>
 800e836:	9a07      	ldr	r2, [sp, #28]
 800e838:	4654      	mov	r4, sl
 800e83a:	2000      	movs	r0, #0
 800e83c:	f04f 0c0a 	mov.w	ip, #10
 800e840:	4621      	mov	r1, r4
 800e842:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e846:	3b30      	subs	r3, #48	; 0x30
 800e848:	2b09      	cmp	r3, #9
 800e84a:	d94e      	bls.n	800e8ea <_svfiprintf_r+0x17e>
 800e84c:	b1b0      	cbz	r0, 800e87c <_svfiprintf_r+0x110>
 800e84e:	9207      	str	r2, [sp, #28]
 800e850:	e014      	b.n	800e87c <_svfiprintf_r+0x110>
 800e852:	eba0 0308 	sub.w	r3, r0, r8
 800e856:	fa09 f303 	lsl.w	r3, r9, r3
 800e85a:	4313      	orrs	r3, r2
 800e85c:	9304      	str	r3, [sp, #16]
 800e85e:	46a2      	mov	sl, r4
 800e860:	e7d2      	b.n	800e808 <_svfiprintf_r+0x9c>
 800e862:	9b03      	ldr	r3, [sp, #12]
 800e864:	1d19      	adds	r1, r3, #4
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	9103      	str	r1, [sp, #12]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	bfbb      	ittet	lt
 800e86e:	425b      	neglt	r3, r3
 800e870:	f042 0202 	orrlt.w	r2, r2, #2
 800e874:	9307      	strge	r3, [sp, #28]
 800e876:	9307      	strlt	r3, [sp, #28]
 800e878:	bfb8      	it	lt
 800e87a:	9204      	strlt	r2, [sp, #16]
 800e87c:	7823      	ldrb	r3, [r4, #0]
 800e87e:	2b2e      	cmp	r3, #46	; 0x2e
 800e880:	d10c      	bne.n	800e89c <_svfiprintf_r+0x130>
 800e882:	7863      	ldrb	r3, [r4, #1]
 800e884:	2b2a      	cmp	r3, #42	; 0x2a
 800e886:	d135      	bne.n	800e8f4 <_svfiprintf_r+0x188>
 800e888:	9b03      	ldr	r3, [sp, #12]
 800e88a:	1d1a      	adds	r2, r3, #4
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	9203      	str	r2, [sp, #12]
 800e890:	2b00      	cmp	r3, #0
 800e892:	bfb8      	it	lt
 800e894:	f04f 33ff 	movlt.w	r3, #4294967295
 800e898:	3402      	adds	r4, #2
 800e89a:	9305      	str	r3, [sp, #20]
 800e89c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e968 <_svfiprintf_r+0x1fc>
 800e8a0:	7821      	ldrb	r1, [r4, #0]
 800e8a2:	2203      	movs	r2, #3
 800e8a4:	4650      	mov	r0, sl
 800e8a6:	f7f1 fcab 	bl	8000200 <memchr>
 800e8aa:	b140      	cbz	r0, 800e8be <_svfiprintf_r+0x152>
 800e8ac:	2340      	movs	r3, #64	; 0x40
 800e8ae:	eba0 000a 	sub.w	r0, r0, sl
 800e8b2:	fa03 f000 	lsl.w	r0, r3, r0
 800e8b6:	9b04      	ldr	r3, [sp, #16]
 800e8b8:	4303      	orrs	r3, r0
 800e8ba:	3401      	adds	r4, #1
 800e8bc:	9304      	str	r3, [sp, #16]
 800e8be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8c2:	4826      	ldr	r0, [pc, #152]	; (800e95c <_svfiprintf_r+0x1f0>)
 800e8c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8c8:	2206      	movs	r2, #6
 800e8ca:	f7f1 fc99 	bl	8000200 <memchr>
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	d038      	beq.n	800e944 <_svfiprintf_r+0x1d8>
 800e8d2:	4b23      	ldr	r3, [pc, #140]	; (800e960 <_svfiprintf_r+0x1f4>)
 800e8d4:	bb1b      	cbnz	r3, 800e91e <_svfiprintf_r+0x1b2>
 800e8d6:	9b03      	ldr	r3, [sp, #12]
 800e8d8:	3307      	adds	r3, #7
 800e8da:	f023 0307 	bic.w	r3, r3, #7
 800e8de:	3308      	adds	r3, #8
 800e8e0:	9303      	str	r3, [sp, #12]
 800e8e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8e4:	4433      	add	r3, r6
 800e8e6:	9309      	str	r3, [sp, #36]	; 0x24
 800e8e8:	e767      	b.n	800e7ba <_svfiprintf_r+0x4e>
 800e8ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8ee:	460c      	mov	r4, r1
 800e8f0:	2001      	movs	r0, #1
 800e8f2:	e7a5      	b.n	800e840 <_svfiprintf_r+0xd4>
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	3401      	adds	r4, #1
 800e8f8:	9305      	str	r3, [sp, #20]
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	f04f 0c0a 	mov.w	ip, #10
 800e900:	4620      	mov	r0, r4
 800e902:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e906:	3a30      	subs	r2, #48	; 0x30
 800e908:	2a09      	cmp	r2, #9
 800e90a:	d903      	bls.n	800e914 <_svfiprintf_r+0x1a8>
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d0c5      	beq.n	800e89c <_svfiprintf_r+0x130>
 800e910:	9105      	str	r1, [sp, #20]
 800e912:	e7c3      	b.n	800e89c <_svfiprintf_r+0x130>
 800e914:	fb0c 2101 	mla	r1, ip, r1, r2
 800e918:	4604      	mov	r4, r0
 800e91a:	2301      	movs	r3, #1
 800e91c:	e7f0      	b.n	800e900 <_svfiprintf_r+0x194>
 800e91e:	ab03      	add	r3, sp, #12
 800e920:	9300      	str	r3, [sp, #0]
 800e922:	462a      	mov	r2, r5
 800e924:	4b0f      	ldr	r3, [pc, #60]	; (800e964 <_svfiprintf_r+0x1f8>)
 800e926:	a904      	add	r1, sp, #16
 800e928:	4638      	mov	r0, r7
 800e92a:	f7fd ff91 	bl	800c850 <_printf_float>
 800e92e:	1c42      	adds	r2, r0, #1
 800e930:	4606      	mov	r6, r0
 800e932:	d1d6      	bne.n	800e8e2 <_svfiprintf_r+0x176>
 800e934:	89ab      	ldrh	r3, [r5, #12]
 800e936:	065b      	lsls	r3, r3, #25
 800e938:	f53f af2c 	bmi.w	800e794 <_svfiprintf_r+0x28>
 800e93c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e93e:	b01d      	add	sp, #116	; 0x74
 800e940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e944:	ab03      	add	r3, sp, #12
 800e946:	9300      	str	r3, [sp, #0]
 800e948:	462a      	mov	r2, r5
 800e94a:	4b06      	ldr	r3, [pc, #24]	; (800e964 <_svfiprintf_r+0x1f8>)
 800e94c:	a904      	add	r1, sp, #16
 800e94e:	4638      	mov	r0, r7
 800e950:	f7fe fa22 	bl	800cd98 <_printf_i>
 800e954:	e7eb      	b.n	800e92e <_svfiprintf_r+0x1c2>
 800e956:	bf00      	nop
 800e958:	0800f80c 	.word	0x0800f80c
 800e95c:	0800f816 	.word	0x0800f816
 800e960:	0800c851 	.word	0x0800c851
 800e964:	0800e6b5 	.word	0x0800e6b5
 800e968:	0800f812 	.word	0x0800f812

0800e96c <__sfputc_r>:
 800e96c:	6893      	ldr	r3, [r2, #8]
 800e96e:	3b01      	subs	r3, #1
 800e970:	2b00      	cmp	r3, #0
 800e972:	b410      	push	{r4}
 800e974:	6093      	str	r3, [r2, #8]
 800e976:	da08      	bge.n	800e98a <__sfputc_r+0x1e>
 800e978:	6994      	ldr	r4, [r2, #24]
 800e97a:	42a3      	cmp	r3, r4
 800e97c:	db01      	blt.n	800e982 <__sfputc_r+0x16>
 800e97e:	290a      	cmp	r1, #10
 800e980:	d103      	bne.n	800e98a <__sfputc_r+0x1e>
 800e982:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e986:	f000 b98f 	b.w	800eca8 <__swbuf_r>
 800e98a:	6813      	ldr	r3, [r2, #0]
 800e98c:	1c58      	adds	r0, r3, #1
 800e98e:	6010      	str	r0, [r2, #0]
 800e990:	7019      	strb	r1, [r3, #0]
 800e992:	4608      	mov	r0, r1
 800e994:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e998:	4770      	bx	lr

0800e99a <__sfputs_r>:
 800e99a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e99c:	4606      	mov	r6, r0
 800e99e:	460f      	mov	r7, r1
 800e9a0:	4614      	mov	r4, r2
 800e9a2:	18d5      	adds	r5, r2, r3
 800e9a4:	42ac      	cmp	r4, r5
 800e9a6:	d101      	bne.n	800e9ac <__sfputs_r+0x12>
 800e9a8:	2000      	movs	r0, #0
 800e9aa:	e007      	b.n	800e9bc <__sfputs_r+0x22>
 800e9ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9b0:	463a      	mov	r2, r7
 800e9b2:	4630      	mov	r0, r6
 800e9b4:	f7ff ffda 	bl	800e96c <__sfputc_r>
 800e9b8:	1c43      	adds	r3, r0, #1
 800e9ba:	d1f3      	bne.n	800e9a4 <__sfputs_r+0xa>
 800e9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e9c0 <_vfiprintf_r>:
 800e9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c4:	460d      	mov	r5, r1
 800e9c6:	b09d      	sub	sp, #116	; 0x74
 800e9c8:	4614      	mov	r4, r2
 800e9ca:	4698      	mov	r8, r3
 800e9cc:	4606      	mov	r6, r0
 800e9ce:	b118      	cbz	r0, 800e9d8 <_vfiprintf_r+0x18>
 800e9d0:	6983      	ldr	r3, [r0, #24]
 800e9d2:	b90b      	cbnz	r3, 800e9d8 <_vfiprintf_r+0x18>
 800e9d4:	f7ff fa22 	bl	800de1c <__sinit>
 800e9d8:	4b89      	ldr	r3, [pc, #548]	; (800ec00 <_vfiprintf_r+0x240>)
 800e9da:	429d      	cmp	r5, r3
 800e9dc:	d11b      	bne.n	800ea16 <_vfiprintf_r+0x56>
 800e9de:	6875      	ldr	r5, [r6, #4]
 800e9e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9e2:	07d9      	lsls	r1, r3, #31
 800e9e4:	d405      	bmi.n	800e9f2 <_vfiprintf_r+0x32>
 800e9e6:	89ab      	ldrh	r3, [r5, #12]
 800e9e8:	059a      	lsls	r2, r3, #22
 800e9ea:	d402      	bmi.n	800e9f2 <_vfiprintf_r+0x32>
 800e9ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9ee:	f7ff fab8 	bl	800df62 <__retarget_lock_acquire_recursive>
 800e9f2:	89ab      	ldrh	r3, [r5, #12]
 800e9f4:	071b      	lsls	r3, r3, #28
 800e9f6:	d501      	bpl.n	800e9fc <_vfiprintf_r+0x3c>
 800e9f8:	692b      	ldr	r3, [r5, #16]
 800e9fa:	b9eb      	cbnz	r3, 800ea38 <_vfiprintf_r+0x78>
 800e9fc:	4629      	mov	r1, r5
 800e9fe:	4630      	mov	r0, r6
 800ea00:	f000 f9b6 	bl	800ed70 <__swsetup_r>
 800ea04:	b1c0      	cbz	r0, 800ea38 <_vfiprintf_r+0x78>
 800ea06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea08:	07dc      	lsls	r4, r3, #31
 800ea0a:	d50e      	bpl.n	800ea2a <_vfiprintf_r+0x6a>
 800ea0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea10:	b01d      	add	sp, #116	; 0x74
 800ea12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea16:	4b7b      	ldr	r3, [pc, #492]	; (800ec04 <_vfiprintf_r+0x244>)
 800ea18:	429d      	cmp	r5, r3
 800ea1a:	d101      	bne.n	800ea20 <_vfiprintf_r+0x60>
 800ea1c:	68b5      	ldr	r5, [r6, #8]
 800ea1e:	e7df      	b.n	800e9e0 <_vfiprintf_r+0x20>
 800ea20:	4b79      	ldr	r3, [pc, #484]	; (800ec08 <_vfiprintf_r+0x248>)
 800ea22:	429d      	cmp	r5, r3
 800ea24:	bf08      	it	eq
 800ea26:	68f5      	ldreq	r5, [r6, #12]
 800ea28:	e7da      	b.n	800e9e0 <_vfiprintf_r+0x20>
 800ea2a:	89ab      	ldrh	r3, [r5, #12]
 800ea2c:	0598      	lsls	r0, r3, #22
 800ea2e:	d4ed      	bmi.n	800ea0c <_vfiprintf_r+0x4c>
 800ea30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea32:	f7ff fa97 	bl	800df64 <__retarget_lock_release_recursive>
 800ea36:	e7e9      	b.n	800ea0c <_vfiprintf_r+0x4c>
 800ea38:	2300      	movs	r3, #0
 800ea3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea3c:	2320      	movs	r3, #32
 800ea3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea42:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea46:	2330      	movs	r3, #48	; 0x30
 800ea48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ec0c <_vfiprintf_r+0x24c>
 800ea4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea50:	f04f 0901 	mov.w	r9, #1
 800ea54:	4623      	mov	r3, r4
 800ea56:	469a      	mov	sl, r3
 800ea58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea5c:	b10a      	cbz	r2, 800ea62 <_vfiprintf_r+0xa2>
 800ea5e:	2a25      	cmp	r2, #37	; 0x25
 800ea60:	d1f9      	bne.n	800ea56 <_vfiprintf_r+0x96>
 800ea62:	ebba 0b04 	subs.w	fp, sl, r4
 800ea66:	d00b      	beq.n	800ea80 <_vfiprintf_r+0xc0>
 800ea68:	465b      	mov	r3, fp
 800ea6a:	4622      	mov	r2, r4
 800ea6c:	4629      	mov	r1, r5
 800ea6e:	4630      	mov	r0, r6
 800ea70:	f7ff ff93 	bl	800e99a <__sfputs_r>
 800ea74:	3001      	adds	r0, #1
 800ea76:	f000 80aa 	beq.w	800ebce <_vfiprintf_r+0x20e>
 800ea7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea7c:	445a      	add	r2, fp
 800ea7e:	9209      	str	r2, [sp, #36]	; 0x24
 800ea80:	f89a 3000 	ldrb.w	r3, [sl]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	f000 80a2 	beq.w	800ebce <_vfiprintf_r+0x20e>
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea94:	f10a 0a01 	add.w	sl, sl, #1
 800ea98:	9304      	str	r3, [sp, #16]
 800ea9a:	9307      	str	r3, [sp, #28]
 800ea9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eaa0:	931a      	str	r3, [sp, #104]	; 0x68
 800eaa2:	4654      	mov	r4, sl
 800eaa4:	2205      	movs	r2, #5
 800eaa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaaa:	4858      	ldr	r0, [pc, #352]	; (800ec0c <_vfiprintf_r+0x24c>)
 800eaac:	f7f1 fba8 	bl	8000200 <memchr>
 800eab0:	9a04      	ldr	r2, [sp, #16]
 800eab2:	b9d8      	cbnz	r0, 800eaec <_vfiprintf_r+0x12c>
 800eab4:	06d1      	lsls	r1, r2, #27
 800eab6:	bf44      	itt	mi
 800eab8:	2320      	movmi	r3, #32
 800eaba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eabe:	0713      	lsls	r3, r2, #28
 800eac0:	bf44      	itt	mi
 800eac2:	232b      	movmi	r3, #43	; 0x2b
 800eac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eac8:	f89a 3000 	ldrb.w	r3, [sl]
 800eacc:	2b2a      	cmp	r3, #42	; 0x2a
 800eace:	d015      	beq.n	800eafc <_vfiprintf_r+0x13c>
 800ead0:	9a07      	ldr	r2, [sp, #28]
 800ead2:	4654      	mov	r4, sl
 800ead4:	2000      	movs	r0, #0
 800ead6:	f04f 0c0a 	mov.w	ip, #10
 800eada:	4621      	mov	r1, r4
 800eadc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eae0:	3b30      	subs	r3, #48	; 0x30
 800eae2:	2b09      	cmp	r3, #9
 800eae4:	d94e      	bls.n	800eb84 <_vfiprintf_r+0x1c4>
 800eae6:	b1b0      	cbz	r0, 800eb16 <_vfiprintf_r+0x156>
 800eae8:	9207      	str	r2, [sp, #28]
 800eaea:	e014      	b.n	800eb16 <_vfiprintf_r+0x156>
 800eaec:	eba0 0308 	sub.w	r3, r0, r8
 800eaf0:	fa09 f303 	lsl.w	r3, r9, r3
 800eaf4:	4313      	orrs	r3, r2
 800eaf6:	9304      	str	r3, [sp, #16]
 800eaf8:	46a2      	mov	sl, r4
 800eafa:	e7d2      	b.n	800eaa2 <_vfiprintf_r+0xe2>
 800eafc:	9b03      	ldr	r3, [sp, #12]
 800eafe:	1d19      	adds	r1, r3, #4
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	9103      	str	r1, [sp, #12]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	bfbb      	ittet	lt
 800eb08:	425b      	neglt	r3, r3
 800eb0a:	f042 0202 	orrlt.w	r2, r2, #2
 800eb0e:	9307      	strge	r3, [sp, #28]
 800eb10:	9307      	strlt	r3, [sp, #28]
 800eb12:	bfb8      	it	lt
 800eb14:	9204      	strlt	r2, [sp, #16]
 800eb16:	7823      	ldrb	r3, [r4, #0]
 800eb18:	2b2e      	cmp	r3, #46	; 0x2e
 800eb1a:	d10c      	bne.n	800eb36 <_vfiprintf_r+0x176>
 800eb1c:	7863      	ldrb	r3, [r4, #1]
 800eb1e:	2b2a      	cmp	r3, #42	; 0x2a
 800eb20:	d135      	bne.n	800eb8e <_vfiprintf_r+0x1ce>
 800eb22:	9b03      	ldr	r3, [sp, #12]
 800eb24:	1d1a      	adds	r2, r3, #4
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	9203      	str	r2, [sp, #12]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	bfb8      	it	lt
 800eb2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb32:	3402      	adds	r4, #2
 800eb34:	9305      	str	r3, [sp, #20]
 800eb36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ec1c <_vfiprintf_r+0x25c>
 800eb3a:	7821      	ldrb	r1, [r4, #0]
 800eb3c:	2203      	movs	r2, #3
 800eb3e:	4650      	mov	r0, sl
 800eb40:	f7f1 fb5e 	bl	8000200 <memchr>
 800eb44:	b140      	cbz	r0, 800eb58 <_vfiprintf_r+0x198>
 800eb46:	2340      	movs	r3, #64	; 0x40
 800eb48:	eba0 000a 	sub.w	r0, r0, sl
 800eb4c:	fa03 f000 	lsl.w	r0, r3, r0
 800eb50:	9b04      	ldr	r3, [sp, #16]
 800eb52:	4303      	orrs	r3, r0
 800eb54:	3401      	adds	r4, #1
 800eb56:	9304      	str	r3, [sp, #16]
 800eb58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb5c:	482c      	ldr	r0, [pc, #176]	; (800ec10 <_vfiprintf_r+0x250>)
 800eb5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb62:	2206      	movs	r2, #6
 800eb64:	f7f1 fb4c 	bl	8000200 <memchr>
 800eb68:	2800      	cmp	r0, #0
 800eb6a:	d03f      	beq.n	800ebec <_vfiprintf_r+0x22c>
 800eb6c:	4b29      	ldr	r3, [pc, #164]	; (800ec14 <_vfiprintf_r+0x254>)
 800eb6e:	bb1b      	cbnz	r3, 800ebb8 <_vfiprintf_r+0x1f8>
 800eb70:	9b03      	ldr	r3, [sp, #12]
 800eb72:	3307      	adds	r3, #7
 800eb74:	f023 0307 	bic.w	r3, r3, #7
 800eb78:	3308      	adds	r3, #8
 800eb7a:	9303      	str	r3, [sp, #12]
 800eb7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb7e:	443b      	add	r3, r7
 800eb80:	9309      	str	r3, [sp, #36]	; 0x24
 800eb82:	e767      	b.n	800ea54 <_vfiprintf_r+0x94>
 800eb84:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb88:	460c      	mov	r4, r1
 800eb8a:	2001      	movs	r0, #1
 800eb8c:	e7a5      	b.n	800eada <_vfiprintf_r+0x11a>
 800eb8e:	2300      	movs	r3, #0
 800eb90:	3401      	adds	r4, #1
 800eb92:	9305      	str	r3, [sp, #20]
 800eb94:	4619      	mov	r1, r3
 800eb96:	f04f 0c0a 	mov.w	ip, #10
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eba0:	3a30      	subs	r2, #48	; 0x30
 800eba2:	2a09      	cmp	r2, #9
 800eba4:	d903      	bls.n	800ebae <_vfiprintf_r+0x1ee>
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d0c5      	beq.n	800eb36 <_vfiprintf_r+0x176>
 800ebaa:	9105      	str	r1, [sp, #20]
 800ebac:	e7c3      	b.n	800eb36 <_vfiprintf_r+0x176>
 800ebae:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebb2:	4604      	mov	r4, r0
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	e7f0      	b.n	800eb9a <_vfiprintf_r+0x1da>
 800ebb8:	ab03      	add	r3, sp, #12
 800ebba:	9300      	str	r3, [sp, #0]
 800ebbc:	462a      	mov	r2, r5
 800ebbe:	4b16      	ldr	r3, [pc, #88]	; (800ec18 <_vfiprintf_r+0x258>)
 800ebc0:	a904      	add	r1, sp, #16
 800ebc2:	4630      	mov	r0, r6
 800ebc4:	f7fd fe44 	bl	800c850 <_printf_float>
 800ebc8:	4607      	mov	r7, r0
 800ebca:	1c78      	adds	r0, r7, #1
 800ebcc:	d1d6      	bne.n	800eb7c <_vfiprintf_r+0x1bc>
 800ebce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebd0:	07d9      	lsls	r1, r3, #31
 800ebd2:	d405      	bmi.n	800ebe0 <_vfiprintf_r+0x220>
 800ebd4:	89ab      	ldrh	r3, [r5, #12]
 800ebd6:	059a      	lsls	r2, r3, #22
 800ebd8:	d402      	bmi.n	800ebe0 <_vfiprintf_r+0x220>
 800ebda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebdc:	f7ff f9c2 	bl	800df64 <__retarget_lock_release_recursive>
 800ebe0:	89ab      	ldrh	r3, [r5, #12]
 800ebe2:	065b      	lsls	r3, r3, #25
 800ebe4:	f53f af12 	bmi.w	800ea0c <_vfiprintf_r+0x4c>
 800ebe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebea:	e711      	b.n	800ea10 <_vfiprintf_r+0x50>
 800ebec:	ab03      	add	r3, sp, #12
 800ebee:	9300      	str	r3, [sp, #0]
 800ebf0:	462a      	mov	r2, r5
 800ebf2:	4b09      	ldr	r3, [pc, #36]	; (800ec18 <_vfiprintf_r+0x258>)
 800ebf4:	a904      	add	r1, sp, #16
 800ebf6:	4630      	mov	r0, r6
 800ebf8:	f7fe f8ce 	bl	800cd98 <_printf_i>
 800ebfc:	e7e4      	b.n	800ebc8 <_vfiprintf_r+0x208>
 800ebfe:	bf00      	nop
 800ec00:	0800f674 	.word	0x0800f674
 800ec04:	0800f694 	.word	0x0800f694
 800ec08:	0800f654 	.word	0x0800f654
 800ec0c:	0800f80c 	.word	0x0800f80c
 800ec10:	0800f816 	.word	0x0800f816
 800ec14:	0800c851 	.word	0x0800c851
 800ec18:	0800e99b 	.word	0x0800e99b
 800ec1c:	0800f812 	.word	0x0800f812

0800ec20 <__sread>:
 800ec20:	b510      	push	{r4, lr}
 800ec22:	460c      	mov	r4, r1
 800ec24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec28:	f000 fae6 	bl	800f1f8 <_read_r>
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	bfab      	itete	ge
 800ec30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ec32:	89a3      	ldrhlt	r3, [r4, #12]
 800ec34:	181b      	addge	r3, r3, r0
 800ec36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ec3a:	bfac      	ite	ge
 800ec3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ec3e:	81a3      	strhlt	r3, [r4, #12]
 800ec40:	bd10      	pop	{r4, pc}

0800ec42 <__swrite>:
 800ec42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec46:	461f      	mov	r7, r3
 800ec48:	898b      	ldrh	r3, [r1, #12]
 800ec4a:	05db      	lsls	r3, r3, #23
 800ec4c:	4605      	mov	r5, r0
 800ec4e:	460c      	mov	r4, r1
 800ec50:	4616      	mov	r6, r2
 800ec52:	d505      	bpl.n	800ec60 <__swrite+0x1e>
 800ec54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec58:	2302      	movs	r3, #2
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	f000 f9f8 	bl	800f050 <_lseek_r>
 800ec60:	89a3      	ldrh	r3, [r4, #12]
 800ec62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec6a:	81a3      	strh	r3, [r4, #12]
 800ec6c:	4632      	mov	r2, r6
 800ec6e:	463b      	mov	r3, r7
 800ec70:	4628      	mov	r0, r5
 800ec72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec76:	f000 b869 	b.w	800ed4c <_write_r>

0800ec7a <__sseek>:
 800ec7a:	b510      	push	{r4, lr}
 800ec7c:	460c      	mov	r4, r1
 800ec7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec82:	f000 f9e5 	bl	800f050 <_lseek_r>
 800ec86:	1c43      	adds	r3, r0, #1
 800ec88:	89a3      	ldrh	r3, [r4, #12]
 800ec8a:	bf15      	itete	ne
 800ec8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ec8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ec92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ec96:	81a3      	strheq	r3, [r4, #12]
 800ec98:	bf18      	it	ne
 800ec9a:	81a3      	strhne	r3, [r4, #12]
 800ec9c:	bd10      	pop	{r4, pc}

0800ec9e <__sclose>:
 800ec9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eca2:	f000 b8f1 	b.w	800ee88 <_close_r>
	...

0800eca8 <__swbuf_r>:
 800eca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecaa:	460e      	mov	r6, r1
 800ecac:	4614      	mov	r4, r2
 800ecae:	4605      	mov	r5, r0
 800ecb0:	b118      	cbz	r0, 800ecba <__swbuf_r+0x12>
 800ecb2:	6983      	ldr	r3, [r0, #24]
 800ecb4:	b90b      	cbnz	r3, 800ecba <__swbuf_r+0x12>
 800ecb6:	f7ff f8b1 	bl	800de1c <__sinit>
 800ecba:	4b21      	ldr	r3, [pc, #132]	; (800ed40 <__swbuf_r+0x98>)
 800ecbc:	429c      	cmp	r4, r3
 800ecbe:	d12b      	bne.n	800ed18 <__swbuf_r+0x70>
 800ecc0:	686c      	ldr	r4, [r5, #4]
 800ecc2:	69a3      	ldr	r3, [r4, #24]
 800ecc4:	60a3      	str	r3, [r4, #8]
 800ecc6:	89a3      	ldrh	r3, [r4, #12]
 800ecc8:	071a      	lsls	r2, r3, #28
 800ecca:	d52f      	bpl.n	800ed2c <__swbuf_r+0x84>
 800eccc:	6923      	ldr	r3, [r4, #16]
 800ecce:	b36b      	cbz	r3, 800ed2c <__swbuf_r+0x84>
 800ecd0:	6923      	ldr	r3, [r4, #16]
 800ecd2:	6820      	ldr	r0, [r4, #0]
 800ecd4:	1ac0      	subs	r0, r0, r3
 800ecd6:	6963      	ldr	r3, [r4, #20]
 800ecd8:	b2f6      	uxtb	r6, r6
 800ecda:	4283      	cmp	r3, r0
 800ecdc:	4637      	mov	r7, r6
 800ecde:	dc04      	bgt.n	800ecea <__swbuf_r+0x42>
 800ece0:	4621      	mov	r1, r4
 800ece2:	4628      	mov	r0, r5
 800ece4:	f000 f966 	bl	800efb4 <_fflush_r>
 800ece8:	bb30      	cbnz	r0, 800ed38 <__swbuf_r+0x90>
 800ecea:	68a3      	ldr	r3, [r4, #8]
 800ecec:	3b01      	subs	r3, #1
 800ecee:	60a3      	str	r3, [r4, #8]
 800ecf0:	6823      	ldr	r3, [r4, #0]
 800ecf2:	1c5a      	adds	r2, r3, #1
 800ecf4:	6022      	str	r2, [r4, #0]
 800ecf6:	701e      	strb	r6, [r3, #0]
 800ecf8:	6963      	ldr	r3, [r4, #20]
 800ecfa:	3001      	adds	r0, #1
 800ecfc:	4283      	cmp	r3, r0
 800ecfe:	d004      	beq.n	800ed0a <__swbuf_r+0x62>
 800ed00:	89a3      	ldrh	r3, [r4, #12]
 800ed02:	07db      	lsls	r3, r3, #31
 800ed04:	d506      	bpl.n	800ed14 <__swbuf_r+0x6c>
 800ed06:	2e0a      	cmp	r6, #10
 800ed08:	d104      	bne.n	800ed14 <__swbuf_r+0x6c>
 800ed0a:	4621      	mov	r1, r4
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	f000 f951 	bl	800efb4 <_fflush_r>
 800ed12:	b988      	cbnz	r0, 800ed38 <__swbuf_r+0x90>
 800ed14:	4638      	mov	r0, r7
 800ed16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed18:	4b0a      	ldr	r3, [pc, #40]	; (800ed44 <__swbuf_r+0x9c>)
 800ed1a:	429c      	cmp	r4, r3
 800ed1c:	d101      	bne.n	800ed22 <__swbuf_r+0x7a>
 800ed1e:	68ac      	ldr	r4, [r5, #8]
 800ed20:	e7cf      	b.n	800ecc2 <__swbuf_r+0x1a>
 800ed22:	4b09      	ldr	r3, [pc, #36]	; (800ed48 <__swbuf_r+0xa0>)
 800ed24:	429c      	cmp	r4, r3
 800ed26:	bf08      	it	eq
 800ed28:	68ec      	ldreq	r4, [r5, #12]
 800ed2a:	e7ca      	b.n	800ecc2 <__swbuf_r+0x1a>
 800ed2c:	4621      	mov	r1, r4
 800ed2e:	4628      	mov	r0, r5
 800ed30:	f000 f81e 	bl	800ed70 <__swsetup_r>
 800ed34:	2800      	cmp	r0, #0
 800ed36:	d0cb      	beq.n	800ecd0 <__swbuf_r+0x28>
 800ed38:	f04f 37ff 	mov.w	r7, #4294967295
 800ed3c:	e7ea      	b.n	800ed14 <__swbuf_r+0x6c>
 800ed3e:	bf00      	nop
 800ed40:	0800f674 	.word	0x0800f674
 800ed44:	0800f694 	.word	0x0800f694
 800ed48:	0800f654 	.word	0x0800f654

0800ed4c <_write_r>:
 800ed4c:	b538      	push	{r3, r4, r5, lr}
 800ed4e:	4d07      	ldr	r5, [pc, #28]	; (800ed6c <_write_r+0x20>)
 800ed50:	4604      	mov	r4, r0
 800ed52:	4608      	mov	r0, r1
 800ed54:	4611      	mov	r1, r2
 800ed56:	2200      	movs	r2, #0
 800ed58:	602a      	str	r2, [r5, #0]
 800ed5a:	461a      	mov	r2, r3
 800ed5c:	f7f9 fd30 	bl	80087c0 <_write>
 800ed60:	1c43      	adds	r3, r0, #1
 800ed62:	d102      	bne.n	800ed6a <_write_r+0x1e>
 800ed64:	682b      	ldr	r3, [r5, #0]
 800ed66:	b103      	cbz	r3, 800ed6a <_write_r+0x1e>
 800ed68:	6023      	str	r3, [r4, #0]
 800ed6a:	bd38      	pop	{r3, r4, r5, pc}
 800ed6c:	200081f8 	.word	0x200081f8

0800ed70 <__swsetup_r>:
 800ed70:	4b32      	ldr	r3, [pc, #200]	; (800ee3c <__swsetup_r+0xcc>)
 800ed72:	b570      	push	{r4, r5, r6, lr}
 800ed74:	681d      	ldr	r5, [r3, #0]
 800ed76:	4606      	mov	r6, r0
 800ed78:	460c      	mov	r4, r1
 800ed7a:	b125      	cbz	r5, 800ed86 <__swsetup_r+0x16>
 800ed7c:	69ab      	ldr	r3, [r5, #24]
 800ed7e:	b913      	cbnz	r3, 800ed86 <__swsetup_r+0x16>
 800ed80:	4628      	mov	r0, r5
 800ed82:	f7ff f84b 	bl	800de1c <__sinit>
 800ed86:	4b2e      	ldr	r3, [pc, #184]	; (800ee40 <__swsetup_r+0xd0>)
 800ed88:	429c      	cmp	r4, r3
 800ed8a:	d10f      	bne.n	800edac <__swsetup_r+0x3c>
 800ed8c:	686c      	ldr	r4, [r5, #4]
 800ed8e:	89a3      	ldrh	r3, [r4, #12]
 800ed90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed94:	0719      	lsls	r1, r3, #28
 800ed96:	d42c      	bmi.n	800edf2 <__swsetup_r+0x82>
 800ed98:	06dd      	lsls	r5, r3, #27
 800ed9a:	d411      	bmi.n	800edc0 <__swsetup_r+0x50>
 800ed9c:	2309      	movs	r3, #9
 800ed9e:	6033      	str	r3, [r6, #0]
 800eda0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eda4:	81a3      	strh	r3, [r4, #12]
 800eda6:	f04f 30ff 	mov.w	r0, #4294967295
 800edaa:	e03e      	b.n	800ee2a <__swsetup_r+0xba>
 800edac:	4b25      	ldr	r3, [pc, #148]	; (800ee44 <__swsetup_r+0xd4>)
 800edae:	429c      	cmp	r4, r3
 800edb0:	d101      	bne.n	800edb6 <__swsetup_r+0x46>
 800edb2:	68ac      	ldr	r4, [r5, #8]
 800edb4:	e7eb      	b.n	800ed8e <__swsetup_r+0x1e>
 800edb6:	4b24      	ldr	r3, [pc, #144]	; (800ee48 <__swsetup_r+0xd8>)
 800edb8:	429c      	cmp	r4, r3
 800edba:	bf08      	it	eq
 800edbc:	68ec      	ldreq	r4, [r5, #12]
 800edbe:	e7e6      	b.n	800ed8e <__swsetup_r+0x1e>
 800edc0:	0758      	lsls	r0, r3, #29
 800edc2:	d512      	bpl.n	800edea <__swsetup_r+0x7a>
 800edc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edc6:	b141      	cbz	r1, 800edda <__swsetup_r+0x6a>
 800edc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800edcc:	4299      	cmp	r1, r3
 800edce:	d002      	beq.n	800edd6 <__swsetup_r+0x66>
 800edd0:	4630      	mov	r0, r6
 800edd2:	f7fd fbbd 	bl	800c550 <_free_r>
 800edd6:	2300      	movs	r3, #0
 800edd8:	6363      	str	r3, [r4, #52]	; 0x34
 800edda:	89a3      	ldrh	r3, [r4, #12]
 800eddc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ede0:	81a3      	strh	r3, [r4, #12]
 800ede2:	2300      	movs	r3, #0
 800ede4:	6063      	str	r3, [r4, #4]
 800ede6:	6923      	ldr	r3, [r4, #16]
 800ede8:	6023      	str	r3, [r4, #0]
 800edea:	89a3      	ldrh	r3, [r4, #12]
 800edec:	f043 0308 	orr.w	r3, r3, #8
 800edf0:	81a3      	strh	r3, [r4, #12]
 800edf2:	6923      	ldr	r3, [r4, #16]
 800edf4:	b94b      	cbnz	r3, 800ee0a <__swsetup_r+0x9a>
 800edf6:	89a3      	ldrh	r3, [r4, #12]
 800edf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800edfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee00:	d003      	beq.n	800ee0a <__swsetup_r+0x9a>
 800ee02:	4621      	mov	r1, r4
 800ee04:	4630      	mov	r0, r6
 800ee06:	f000 f95b 	bl	800f0c0 <__smakebuf_r>
 800ee0a:	89a0      	ldrh	r0, [r4, #12]
 800ee0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee10:	f010 0301 	ands.w	r3, r0, #1
 800ee14:	d00a      	beq.n	800ee2c <__swsetup_r+0xbc>
 800ee16:	2300      	movs	r3, #0
 800ee18:	60a3      	str	r3, [r4, #8]
 800ee1a:	6963      	ldr	r3, [r4, #20]
 800ee1c:	425b      	negs	r3, r3
 800ee1e:	61a3      	str	r3, [r4, #24]
 800ee20:	6923      	ldr	r3, [r4, #16]
 800ee22:	b943      	cbnz	r3, 800ee36 <__swsetup_r+0xc6>
 800ee24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee28:	d1ba      	bne.n	800eda0 <__swsetup_r+0x30>
 800ee2a:	bd70      	pop	{r4, r5, r6, pc}
 800ee2c:	0781      	lsls	r1, r0, #30
 800ee2e:	bf58      	it	pl
 800ee30:	6963      	ldrpl	r3, [r4, #20]
 800ee32:	60a3      	str	r3, [r4, #8]
 800ee34:	e7f4      	b.n	800ee20 <__swsetup_r+0xb0>
 800ee36:	2000      	movs	r0, #0
 800ee38:	e7f7      	b.n	800ee2a <__swsetup_r+0xba>
 800ee3a:	bf00      	nop
 800ee3c:	2000001c 	.word	0x2000001c
 800ee40:	0800f674 	.word	0x0800f674
 800ee44:	0800f694 	.word	0x0800f694
 800ee48:	0800f654 	.word	0x0800f654

0800ee4c <__assert_func>:
 800ee4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee4e:	4614      	mov	r4, r2
 800ee50:	461a      	mov	r2, r3
 800ee52:	4b09      	ldr	r3, [pc, #36]	; (800ee78 <__assert_func+0x2c>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4605      	mov	r5, r0
 800ee58:	68d8      	ldr	r0, [r3, #12]
 800ee5a:	b14c      	cbz	r4, 800ee70 <__assert_func+0x24>
 800ee5c:	4b07      	ldr	r3, [pc, #28]	; (800ee7c <__assert_func+0x30>)
 800ee5e:	9100      	str	r1, [sp, #0]
 800ee60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee64:	4906      	ldr	r1, [pc, #24]	; (800ee80 <__assert_func+0x34>)
 800ee66:	462b      	mov	r3, r5
 800ee68:	f000 f8e0 	bl	800f02c <fiprintf>
 800ee6c:	f000 f9e3 	bl	800f236 <abort>
 800ee70:	4b04      	ldr	r3, [pc, #16]	; (800ee84 <__assert_func+0x38>)
 800ee72:	461c      	mov	r4, r3
 800ee74:	e7f3      	b.n	800ee5e <__assert_func+0x12>
 800ee76:	bf00      	nop
 800ee78:	2000001c 	.word	0x2000001c
 800ee7c:	0800f81d 	.word	0x0800f81d
 800ee80:	0800f82a 	.word	0x0800f82a
 800ee84:	0800f858 	.word	0x0800f858

0800ee88 <_close_r>:
 800ee88:	b538      	push	{r3, r4, r5, lr}
 800ee8a:	4d06      	ldr	r5, [pc, #24]	; (800eea4 <_close_r+0x1c>)
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	4604      	mov	r4, r0
 800ee90:	4608      	mov	r0, r1
 800ee92:	602b      	str	r3, [r5, #0]
 800ee94:	f000 fa44 	bl	800f320 <_close>
 800ee98:	1c43      	adds	r3, r0, #1
 800ee9a:	d102      	bne.n	800eea2 <_close_r+0x1a>
 800ee9c:	682b      	ldr	r3, [r5, #0]
 800ee9e:	b103      	cbz	r3, 800eea2 <_close_r+0x1a>
 800eea0:	6023      	str	r3, [r4, #0]
 800eea2:	bd38      	pop	{r3, r4, r5, pc}
 800eea4:	200081f8 	.word	0x200081f8

0800eea8 <__sflush_r>:
 800eea8:	898a      	ldrh	r2, [r1, #12]
 800eeaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeae:	4605      	mov	r5, r0
 800eeb0:	0710      	lsls	r0, r2, #28
 800eeb2:	460c      	mov	r4, r1
 800eeb4:	d458      	bmi.n	800ef68 <__sflush_r+0xc0>
 800eeb6:	684b      	ldr	r3, [r1, #4]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	dc05      	bgt.n	800eec8 <__sflush_r+0x20>
 800eebc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	dc02      	bgt.n	800eec8 <__sflush_r+0x20>
 800eec2:	2000      	movs	r0, #0
 800eec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eec8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eeca:	2e00      	cmp	r6, #0
 800eecc:	d0f9      	beq.n	800eec2 <__sflush_r+0x1a>
 800eece:	2300      	movs	r3, #0
 800eed0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eed4:	682f      	ldr	r7, [r5, #0]
 800eed6:	602b      	str	r3, [r5, #0]
 800eed8:	d032      	beq.n	800ef40 <__sflush_r+0x98>
 800eeda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eedc:	89a3      	ldrh	r3, [r4, #12]
 800eede:	075a      	lsls	r2, r3, #29
 800eee0:	d505      	bpl.n	800eeee <__sflush_r+0x46>
 800eee2:	6863      	ldr	r3, [r4, #4]
 800eee4:	1ac0      	subs	r0, r0, r3
 800eee6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eee8:	b10b      	cbz	r3, 800eeee <__sflush_r+0x46>
 800eeea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eeec:	1ac0      	subs	r0, r0, r3
 800eeee:	2300      	movs	r3, #0
 800eef0:	4602      	mov	r2, r0
 800eef2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eef4:	6a21      	ldr	r1, [r4, #32]
 800eef6:	4628      	mov	r0, r5
 800eef8:	47b0      	blx	r6
 800eefa:	1c43      	adds	r3, r0, #1
 800eefc:	89a3      	ldrh	r3, [r4, #12]
 800eefe:	d106      	bne.n	800ef0e <__sflush_r+0x66>
 800ef00:	6829      	ldr	r1, [r5, #0]
 800ef02:	291d      	cmp	r1, #29
 800ef04:	d82c      	bhi.n	800ef60 <__sflush_r+0xb8>
 800ef06:	4a2a      	ldr	r2, [pc, #168]	; (800efb0 <__sflush_r+0x108>)
 800ef08:	40ca      	lsrs	r2, r1
 800ef0a:	07d6      	lsls	r6, r2, #31
 800ef0c:	d528      	bpl.n	800ef60 <__sflush_r+0xb8>
 800ef0e:	2200      	movs	r2, #0
 800ef10:	6062      	str	r2, [r4, #4]
 800ef12:	04d9      	lsls	r1, r3, #19
 800ef14:	6922      	ldr	r2, [r4, #16]
 800ef16:	6022      	str	r2, [r4, #0]
 800ef18:	d504      	bpl.n	800ef24 <__sflush_r+0x7c>
 800ef1a:	1c42      	adds	r2, r0, #1
 800ef1c:	d101      	bne.n	800ef22 <__sflush_r+0x7a>
 800ef1e:	682b      	ldr	r3, [r5, #0]
 800ef20:	b903      	cbnz	r3, 800ef24 <__sflush_r+0x7c>
 800ef22:	6560      	str	r0, [r4, #84]	; 0x54
 800ef24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef26:	602f      	str	r7, [r5, #0]
 800ef28:	2900      	cmp	r1, #0
 800ef2a:	d0ca      	beq.n	800eec2 <__sflush_r+0x1a>
 800ef2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef30:	4299      	cmp	r1, r3
 800ef32:	d002      	beq.n	800ef3a <__sflush_r+0x92>
 800ef34:	4628      	mov	r0, r5
 800ef36:	f7fd fb0b 	bl	800c550 <_free_r>
 800ef3a:	2000      	movs	r0, #0
 800ef3c:	6360      	str	r0, [r4, #52]	; 0x34
 800ef3e:	e7c1      	b.n	800eec4 <__sflush_r+0x1c>
 800ef40:	6a21      	ldr	r1, [r4, #32]
 800ef42:	2301      	movs	r3, #1
 800ef44:	4628      	mov	r0, r5
 800ef46:	47b0      	blx	r6
 800ef48:	1c41      	adds	r1, r0, #1
 800ef4a:	d1c7      	bne.n	800eedc <__sflush_r+0x34>
 800ef4c:	682b      	ldr	r3, [r5, #0]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d0c4      	beq.n	800eedc <__sflush_r+0x34>
 800ef52:	2b1d      	cmp	r3, #29
 800ef54:	d001      	beq.n	800ef5a <__sflush_r+0xb2>
 800ef56:	2b16      	cmp	r3, #22
 800ef58:	d101      	bne.n	800ef5e <__sflush_r+0xb6>
 800ef5a:	602f      	str	r7, [r5, #0]
 800ef5c:	e7b1      	b.n	800eec2 <__sflush_r+0x1a>
 800ef5e:	89a3      	ldrh	r3, [r4, #12]
 800ef60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef64:	81a3      	strh	r3, [r4, #12]
 800ef66:	e7ad      	b.n	800eec4 <__sflush_r+0x1c>
 800ef68:	690f      	ldr	r7, [r1, #16]
 800ef6a:	2f00      	cmp	r7, #0
 800ef6c:	d0a9      	beq.n	800eec2 <__sflush_r+0x1a>
 800ef6e:	0793      	lsls	r3, r2, #30
 800ef70:	680e      	ldr	r6, [r1, #0]
 800ef72:	bf08      	it	eq
 800ef74:	694b      	ldreq	r3, [r1, #20]
 800ef76:	600f      	str	r7, [r1, #0]
 800ef78:	bf18      	it	ne
 800ef7a:	2300      	movne	r3, #0
 800ef7c:	eba6 0807 	sub.w	r8, r6, r7
 800ef80:	608b      	str	r3, [r1, #8]
 800ef82:	f1b8 0f00 	cmp.w	r8, #0
 800ef86:	dd9c      	ble.n	800eec2 <__sflush_r+0x1a>
 800ef88:	6a21      	ldr	r1, [r4, #32]
 800ef8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ef8c:	4643      	mov	r3, r8
 800ef8e:	463a      	mov	r2, r7
 800ef90:	4628      	mov	r0, r5
 800ef92:	47b0      	blx	r6
 800ef94:	2800      	cmp	r0, #0
 800ef96:	dc06      	bgt.n	800efa6 <__sflush_r+0xfe>
 800ef98:	89a3      	ldrh	r3, [r4, #12]
 800ef9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef9e:	81a3      	strh	r3, [r4, #12]
 800efa0:	f04f 30ff 	mov.w	r0, #4294967295
 800efa4:	e78e      	b.n	800eec4 <__sflush_r+0x1c>
 800efa6:	4407      	add	r7, r0
 800efa8:	eba8 0800 	sub.w	r8, r8, r0
 800efac:	e7e9      	b.n	800ef82 <__sflush_r+0xda>
 800efae:	bf00      	nop
 800efb0:	20400001 	.word	0x20400001

0800efb4 <_fflush_r>:
 800efb4:	b538      	push	{r3, r4, r5, lr}
 800efb6:	690b      	ldr	r3, [r1, #16]
 800efb8:	4605      	mov	r5, r0
 800efba:	460c      	mov	r4, r1
 800efbc:	b913      	cbnz	r3, 800efc4 <_fflush_r+0x10>
 800efbe:	2500      	movs	r5, #0
 800efc0:	4628      	mov	r0, r5
 800efc2:	bd38      	pop	{r3, r4, r5, pc}
 800efc4:	b118      	cbz	r0, 800efce <_fflush_r+0x1a>
 800efc6:	6983      	ldr	r3, [r0, #24]
 800efc8:	b90b      	cbnz	r3, 800efce <_fflush_r+0x1a>
 800efca:	f7fe ff27 	bl	800de1c <__sinit>
 800efce:	4b14      	ldr	r3, [pc, #80]	; (800f020 <_fflush_r+0x6c>)
 800efd0:	429c      	cmp	r4, r3
 800efd2:	d11b      	bne.n	800f00c <_fflush_r+0x58>
 800efd4:	686c      	ldr	r4, [r5, #4]
 800efd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d0ef      	beq.n	800efbe <_fflush_r+0xa>
 800efde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800efe0:	07d0      	lsls	r0, r2, #31
 800efe2:	d404      	bmi.n	800efee <_fflush_r+0x3a>
 800efe4:	0599      	lsls	r1, r3, #22
 800efe6:	d402      	bmi.n	800efee <_fflush_r+0x3a>
 800efe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efea:	f7fe ffba 	bl	800df62 <__retarget_lock_acquire_recursive>
 800efee:	4628      	mov	r0, r5
 800eff0:	4621      	mov	r1, r4
 800eff2:	f7ff ff59 	bl	800eea8 <__sflush_r>
 800eff6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eff8:	07da      	lsls	r2, r3, #31
 800effa:	4605      	mov	r5, r0
 800effc:	d4e0      	bmi.n	800efc0 <_fflush_r+0xc>
 800effe:	89a3      	ldrh	r3, [r4, #12]
 800f000:	059b      	lsls	r3, r3, #22
 800f002:	d4dd      	bmi.n	800efc0 <_fflush_r+0xc>
 800f004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f006:	f7fe ffad 	bl	800df64 <__retarget_lock_release_recursive>
 800f00a:	e7d9      	b.n	800efc0 <_fflush_r+0xc>
 800f00c:	4b05      	ldr	r3, [pc, #20]	; (800f024 <_fflush_r+0x70>)
 800f00e:	429c      	cmp	r4, r3
 800f010:	d101      	bne.n	800f016 <_fflush_r+0x62>
 800f012:	68ac      	ldr	r4, [r5, #8]
 800f014:	e7df      	b.n	800efd6 <_fflush_r+0x22>
 800f016:	4b04      	ldr	r3, [pc, #16]	; (800f028 <_fflush_r+0x74>)
 800f018:	429c      	cmp	r4, r3
 800f01a:	bf08      	it	eq
 800f01c:	68ec      	ldreq	r4, [r5, #12]
 800f01e:	e7da      	b.n	800efd6 <_fflush_r+0x22>
 800f020:	0800f674 	.word	0x0800f674
 800f024:	0800f694 	.word	0x0800f694
 800f028:	0800f654 	.word	0x0800f654

0800f02c <fiprintf>:
 800f02c:	b40e      	push	{r1, r2, r3}
 800f02e:	b503      	push	{r0, r1, lr}
 800f030:	4601      	mov	r1, r0
 800f032:	ab03      	add	r3, sp, #12
 800f034:	4805      	ldr	r0, [pc, #20]	; (800f04c <fiprintf+0x20>)
 800f036:	f853 2b04 	ldr.w	r2, [r3], #4
 800f03a:	6800      	ldr	r0, [r0, #0]
 800f03c:	9301      	str	r3, [sp, #4]
 800f03e:	f7ff fcbf 	bl	800e9c0 <_vfiprintf_r>
 800f042:	b002      	add	sp, #8
 800f044:	f85d eb04 	ldr.w	lr, [sp], #4
 800f048:	b003      	add	sp, #12
 800f04a:	4770      	bx	lr
 800f04c:	2000001c 	.word	0x2000001c

0800f050 <_lseek_r>:
 800f050:	b538      	push	{r3, r4, r5, lr}
 800f052:	4d07      	ldr	r5, [pc, #28]	; (800f070 <_lseek_r+0x20>)
 800f054:	4604      	mov	r4, r0
 800f056:	4608      	mov	r0, r1
 800f058:	4611      	mov	r1, r2
 800f05a:	2200      	movs	r2, #0
 800f05c:	602a      	str	r2, [r5, #0]
 800f05e:	461a      	mov	r2, r3
 800f060:	f000 f986 	bl	800f370 <_lseek>
 800f064:	1c43      	adds	r3, r0, #1
 800f066:	d102      	bne.n	800f06e <_lseek_r+0x1e>
 800f068:	682b      	ldr	r3, [r5, #0]
 800f06a:	b103      	cbz	r3, 800f06e <_lseek_r+0x1e>
 800f06c:	6023      	str	r3, [r4, #0]
 800f06e:	bd38      	pop	{r3, r4, r5, pc}
 800f070:	200081f8 	.word	0x200081f8

0800f074 <__swhatbuf_r>:
 800f074:	b570      	push	{r4, r5, r6, lr}
 800f076:	460e      	mov	r6, r1
 800f078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f07c:	2900      	cmp	r1, #0
 800f07e:	b096      	sub	sp, #88	; 0x58
 800f080:	4614      	mov	r4, r2
 800f082:	461d      	mov	r5, r3
 800f084:	da08      	bge.n	800f098 <__swhatbuf_r+0x24>
 800f086:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f08a:	2200      	movs	r2, #0
 800f08c:	602a      	str	r2, [r5, #0]
 800f08e:	061a      	lsls	r2, r3, #24
 800f090:	d410      	bmi.n	800f0b4 <__swhatbuf_r+0x40>
 800f092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f096:	e00e      	b.n	800f0b6 <__swhatbuf_r+0x42>
 800f098:	466a      	mov	r2, sp
 800f09a:	f000 f8d3 	bl	800f244 <_fstat_r>
 800f09e:	2800      	cmp	r0, #0
 800f0a0:	dbf1      	blt.n	800f086 <__swhatbuf_r+0x12>
 800f0a2:	9a01      	ldr	r2, [sp, #4]
 800f0a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f0a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f0ac:	425a      	negs	r2, r3
 800f0ae:	415a      	adcs	r2, r3
 800f0b0:	602a      	str	r2, [r5, #0]
 800f0b2:	e7ee      	b.n	800f092 <__swhatbuf_r+0x1e>
 800f0b4:	2340      	movs	r3, #64	; 0x40
 800f0b6:	2000      	movs	r0, #0
 800f0b8:	6023      	str	r3, [r4, #0]
 800f0ba:	b016      	add	sp, #88	; 0x58
 800f0bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f0c0 <__smakebuf_r>:
 800f0c0:	898b      	ldrh	r3, [r1, #12]
 800f0c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f0c4:	079d      	lsls	r5, r3, #30
 800f0c6:	4606      	mov	r6, r0
 800f0c8:	460c      	mov	r4, r1
 800f0ca:	d507      	bpl.n	800f0dc <__smakebuf_r+0x1c>
 800f0cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f0d0:	6023      	str	r3, [r4, #0]
 800f0d2:	6123      	str	r3, [r4, #16]
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	6163      	str	r3, [r4, #20]
 800f0d8:	b002      	add	sp, #8
 800f0da:	bd70      	pop	{r4, r5, r6, pc}
 800f0dc:	ab01      	add	r3, sp, #4
 800f0de:	466a      	mov	r2, sp
 800f0e0:	f7ff ffc8 	bl	800f074 <__swhatbuf_r>
 800f0e4:	9900      	ldr	r1, [sp, #0]
 800f0e6:	4605      	mov	r5, r0
 800f0e8:	4630      	mov	r0, r6
 800f0ea:	f7fd fa9d 	bl	800c628 <_malloc_r>
 800f0ee:	b948      	cbnz	r0, 800f104 <__smakebuf_r+0x44>
 800f0f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0f4:	059a      	lsls	r2, r3, #22
 800f0f6:	d4ef      	bmi.n	800f0d8 <__smakebuf_r+0x18>
 800f0f8:	f023 0303 	bic.w	r3, r3, #3
 800f0fc:	f043 0302 	orr.w	r3, r3, #2
 800f100:	81a3      	strh	r3, [r4, #12]
 800f102:	e7e3      	b.n	800f0cc <__smakebuf_r+0xc>
 800f104:	4b0d      	ldr	r3, [pc, #52]	; (800f13c <__smakebuf_r+0x7c>)
 800f106:	62b3      	str	r3, [r6, #40]	; 0x28
 800f108:	89a3      	ldrh	r3, [r4, #12]
 800f10a:	6020      	str	r0, [r4, #0]
 800f10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f110:	81a3      	strh	r3, [r4, #12]
 800f112:	9b00      	ldr	r3, [sp, #0]
 800f114:	6163      	str	r3, [r4, #20]
 800f116:	9b01      	ldr	r3, [sp, #4]
 800f118:	6120      	str	r0, [r4, #16]
 800f11a:	b15b      	cbz	r3, 800f134 <__smakebuf_r+0x74>
 800f11c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f120:	4630      	mov	r0, r6
 800f122:	f000 f8a1 	bl	800f268 <_isatty_r>
 800f126:	b128      	cbz	r0, 800f134 <__smakebuf_r+0x74>
 800f128:	89a3      	ldrh	r3, [r4, #12]
 800f12a:	f023 0303 	bic.w	r3, r3, #3
 800f12e:	f043 0301 	orr.w	r3, r3, #1
 800f132:	81a3      	strh	r3, [r4, #12]
 800f134:	89a0      	ldrh	r0, [r4, #12]
 800f136:	4305      	orrs	r5, r0
 800f138:	81a5      	strh	r5, [r4, #12]
 800f13a:	e7cd      	b.n	800f0d8 <__smakebuf_r+0x18>
 800f13c:	0800ddb5 	.word	0x0800ddb5

0800f140 <__ascii_mbtowc>:
 800f140:	b082      	sub	sp, #8
 800f142:	b901      	cbnz	r1, 800f146 <__ascii_mbtowc+0x6>
 800f144:	a901      	add	r1, sp, #4
 800f146:	b142      	cbz	r2, 800f15a <__ascii_mbtowc+0x1a>
 800f148:	b14b      	cbz	r3, 800f15e <__ascii_mbtowc+0x1e>
 800f14a:	7813      	ldrb	r3, [r2, #0]
 800f14c:	600b      	str	r3, [r1, #0]
 800f14e:	7812      	ldrb	r2, [r2, #0]
 800f150:	1e10      	subs	r0, r2, #0
 800f152:	bf18      	it	ne
 800f154:	2001      	movne	r0, #1
 800f156:	b002      	add	sp, #8
 800f158:	4770      	bx	lr
 800f15a:	4610      	mov	r0, r2
 800f15c:	e7fb      	b.n	800f156 <__ascii_mbtowc+0x16>
 800f15e:	f06f 0001 	mvn.w	r0, #1
 800f162:	e7f8      	b.n	800f156 <__ascii_mbtowc+0x16>

0800f164 <memmove>:
 800f164:	4288      	cmp	r0, r1
 800f166:	b510      	push	{r4, lr}
 800f168:	eb01 0402 	add.w	r4, r1, r2
 800f16c:	d902      	bls.n	800f174 <memmove+0x10>
 800f16e:	4284      	cmp	r4, r0
 800f170:	4623      	mov	r3, r4
 800f172:	d807      	bhi.n	800f184 <memmove+0x20>
 800f174:	1e43      	subs	r3, r0, #1
 800f176:	42a1      	cmp	r1, r4
 800f178:	d008      	beq.n	800f18c <memmove+0x28>
 800f17a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f17e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f182:	e7f8      	b.n	800f176 <memmove+0x12>
 800f184:	4402      	add	r2, r0
 800f186:	4601      	mov	r1, r0
 800f188:	428a      	cmp	r2, r1
 800f18a:	d100      	bne.n	800f18e <memmove+0x2a>
 800f18c:	bd10      	pop	{r4, pc}
 800f18e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f192:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f196:	e7f7      	b.n	800f188 <memmove+0x24>

0800f198 <_realloc_r>:
 800f198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f19c:	4680      	mov	r8, r0
 800f19e:	4614      	mov	r4, r2
 800f1a0:	460e      	mov	r6, r1
 800f1a2:	b921      	cbnz	r1, 800f1ae <_realloc_r+0x16>
 800f1a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1a8:	4611      	mov	r1, r2
 800f1aa:	f7fd ba3d 	b.w	800c628 <_malloc_r>
 800f1ae:	b92a      	cbnz	r2, 800f1bc <_realloc_r+0x24>
 800f1b0:	f7fd f9ce 	bl	800c550 <_free_r>
 800f1b4:	4625      	mov	r5, r4
 800f1b6:	4628      	mov	r0, r5
 800f1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1bc:	f000 f864 	bl	800f288 <_malloc_usable_size_r>
 800f1c0:	4284      	cmp	r4, r0
 800f1c2:	4607      	mov	r7, r0
 800f1c4:	d802      	bhi.n	800f1cc <_realloc_r+0x34>
 800f1c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f1ca:	d812      	bhi.n	800f1f2 <_realloc_r+0x5a>
 800f1cc:	4621      	mov	r1, r4
 800f1ce:	4640      	mov	r0, r8
 800f1d0:	f7fd fa2a 	bl	800c628 <_malloc_r>
 800f1d4:	4605      	mov	r5, r0
 800f1d6:	2800      	cmp	r0, #0
 800f1d8:	d0ed      	beq.n	800f1b6 <_realloc_r+0x1e>
 800f1da:	42bc      	cmp	r4, r7
 800f1dc:	4622      	mov	r2, r4
 800f1de:	4631      	mov	r1, r6
 800f1e0:	bf28      	it	cs
 800f1e2:	463a      	movcs	r2, r7
 800f1e4:	f7fd f99e 	bl	800c524 <memcpy>
 800f1e8:	4631      	mov	r1, r6
 800f1ea:	4640      	mov	r0, r8
 800f1ec:	f7fd f9b0 	bl	800c550 <_free_r>
 800f1f0:	e7e1      	b.n	800f1b6 <_realloc_r+0x1e>
 800f1f2:	4635      	mov	r5, r6
 800f1f4:	e7df      	b.n	800f1b6 <_realloc_r+0x1e>
	...

0800f1f8 <_read_r>:
 800f1f8:	b538      	push	{r3, r4, r5, lr}
 800f1fa:	4d07      	ldr	r5, [pc, #28]	; (800f218 <_read_r+0x20>)
 800f1fc:	4604      	mov	r4, r0
 800f1fe:	4608      	mov	r0, r1
 800f200:	4611      	mov	r1, r2
 800f202:	2200      	movs	r2, #0
 800f204:	602a      	str	r2, [r5, #0]
 800f206:	461a      	mov	r2, r3
 800f208:	f000 f8ba 	bl	800f380 <_read>
 800f20c:	1c43      	adds	r3, r0, #1
 800f20e:	d102      	bne.n	800f216 <_read_r+0x1e>
 800f210:	682b      	ldr	r3, [r5, #0]
 800f212:	b103      	cbz	r3, 800f216 <_read_r+0x1e>
 800f214:	6023      	str	r3, [r4, #0]
 800f216:	bd38      	pop	{r3, r4, r5, pc}
 800f218:	200081f8 	.word	0x200081f8

0800f21c <__ascii_wctomb>:
 800f21c:	b149      	cbz	r1, 800f232 <__ascii_wctomb+0x16>
 800f21e:	2aff      	cmp	r2, #255	; 0xff
 800f220:	bf85      	ittet	hi
 800f222:	238a      	movhi	r3, #138	; 0x8a
 800f224:	6003      	strhi	r3, [r0, #0]
 800f226:	700a      	strbls	r2, [r1, #0]
 800f228:	f04f 30ff 	movhi.w	r0, #4294967295
 800f22c:	bf98      	it	ls
 800f22e:	2001      	movls	r0, #1
 800f230:	4770      	bx	lr
 800f232:	4608      	mov	r0, r1
 800f234:	4770      	bx	lr

0800f236 <abort>:
 800f236:	b508      	push	{r3, lr}
 800f238:	2006      	movs	r0, #6
 800f23a:	f000 f855 	bl	800f2e8 <raise>
 800f23e:	2001      	movs	r0, #1
 800f240:	f000 f8b4 	bl	800f3ac <_exit>

0800f244 <_fstat_r>:
 800f244:	b538      	push	{r3, r4, r5, lr}
 800f246:	4d07      	ldr	r5, [pc, #28]	; (800f264 <_fstat_r+0x20>)
 800f248:	2300      	movs	r3, #0
 800f24a:	4604      	mov	r4, r0
 800f24c:	4608      	mov	r0, r1
 800f24e:	4611      	mov	r1, r2
 800f250:	602b      	str	r3, [r5, #0]
 800f252:	f000 f86d 	bl	800f330 <_fstat>
 800f256:	1c43      	adds	r3, r0, #1
 800f258:	d102      	bne.n	800f260 <_fstat_r+0x1c>
 800f25a:	682b      	ldr	r3, [r5, #0]
 800f25c:	b103      	cbz	r3, 800f260 <_fstat_r+0x1c>
 800f25e:	6023      	str	r3, [r4, #0]
 800f260:	bd38      	pop	{r3, r4, r5, pc}
 800f262:	bf00      	nop
 800f264:	200081f8 	.word	0x200081f8

0800f268 <_isatty_r>:
 800f268:	b538      	push	{r3, r4, r5, lr}
 800f26a:	4d06      	ldr	r5, [pc, #24]	; (800f284 <_isatty_r+0x1c>)
 800f26c:	2300      	movs	r3, #0
 800f26e:	4604      	mov	r4, r0
 800f270:	4608      	mov	r0, r1
 800f272:	602b      	str	r3, [r5, #0]
 800f274:	f000 f86c 	bl	800f350 <_isatty>
 800f278:	1c43      	adds	r3, r0, #1
 800f27a:	d102      	bne.n	800f282 <_isatty_r+0x1a>
 800f27c:	682b      	ldr	r3, [r5, #0]
 800f27e:	b103      	cbz	r3, 800f282 <_isatty_r+0x1a>
 800f280:	6023      	str	r3, [r4, #0]
 800f282:	bd38      	pop	{r3, r4, r5, pc}
 800f284:	200081f8 	.word	0x200081f8

0800f288 <_malloc_usable_size_r>:
 800f288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f28c:	1f18      	subs	r0, r3, #4
 800f28e:	2b00      	cmp	r3, #0
 800f290:	bfbc      	itt	lt
 800f292:	580b      	ldrlt	r3, [r1, r0]
 800f294:	18c0      	addlt	r0, r0, r3
 800f296:	4770      	bx	lr

0800f298 <_raise_r>:
 800f298:	291f      	cmp	r1, #31
 800f29a:	b538      	push	{r3, r4, r5, lr}
 800f29c:	4604      	mov	r4, r0
 800f29e:	460d      	mov	r5, r1
 800f2a0:	d904      	bls.n	800f2ac <_raise_r+0x14>
 800f2a2:	2316      	movs	r3, #22
 800f2a4:	6003      	str	r3, [r0, #0]
 800f2a6:	f04f 30ff 	mov.w	r0, #4294967295
 800f2aa:	bd38      	pop	{r3, r4, r5, pc}
 800f2ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f2ae:	b112      	cbz	r2, 800f2b6 <_raise_r+0x1e>
 800f2b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f2b4:	b94b      	cbnz	r3, 800f2ca <_raise_r+0x32>
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	f000 f830 	bl	800f31c <_getpid_r>
 800f2bc:	462a      	mov	r2, r5
 800f2be:	4601      	mov	r1, r0
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2c6:	f000 b817 	b.w	800f2f8 <_kill_r>
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	d00a      	beq.n	800f2e4 <_raise_r+0x4c>
 800f2ce:	1c59      	adds	r1, r3, #1
 800f2d0:	d103      	bne.n	800f2da <_raise_r+0x42>
 800f2d2:	2316      	movs	r3, #22
 800f2d4:	6003      	str	r3, [r0, #0]
 800f2d6:	2001      	movs	r0, #1
 800f2d8:	e7e7      	b.n	800f2aa <_raise_r+0x12>
 800f2da:	2400      	movs	r4, #0
 800f2dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	4798      	blx	r3
 800f2e4:	2000      	movs	r0, #0
 800f2e6:	e7e0      	b.n	800f2aa <_raise_r+0x12>

0800f2e8 <raise>:
 800f2e8:	4b02      	ldr	r3, [pc, #8]	; (800f2f4 <raise+0xc>)
 800f2ea:	4601      	mov	r1, r0
 800f2ec:	6818      	ldr	r0, [r3, #0]
 800f2ee:	f7ff bfd3 	b.w	800f298 <_raise_r>
 800f2f2:	bf00      	nop
 800f2f4:	2000001c 	.word	0x2000001c

0800f2f8 <_kill_r>:
 800f2f8:	b538      	push	{r3, r4, r5, lr}
 800f2fa:	4d07      	ldr	r5, [pc, #28]	; (800f318 <_kill_r+0x20>)
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	4604      	mov	r4, r0
 800f300:	4608      	mov	r0, r1
 800f302:	4611      	mov	r1, r2
 800f304:	602b      	str	r3, [r5, #0]
 800f306:	f000 f82b 	bl	800f360 <_kill>
 800f30a:	1c43      	adds	r3, r0, #1
 800f30c:	d102      	bne.n	800f314 <_kill_r+0x1c>
 800f30e:	682b      	ldr	r3, [r5, #0]
 800f310:	b103      	cbz	r3, 800f314 <_kill_r+0x1c>
 800f312:	6023      	str	r3, [r4, #0]
 800f314:	bd38      	pop	{r3, r4, r5, pc}
 800f316:	bf00      	nop
 800f318:	200081f8 	.word	0x200081f8

0800f31c <_getpid_r>:
 800f31c:	f000 b810 	b.w	800f340 <_getpid>

0800f320 <_close>:
 800f320:	4b02      	ldr	r3, [pc, #8]	; (800f32c <_close+0xc>)
 800f322:	2258      	movs	r2, #88	; 0x58
 800f324:	601a      	str	r2, [r3, #0]
 800f326:	f04f 30ff 	mov.w	r0, #4294967295
 800f32a:	4770      	bx	lr
 800f32c:	200081f8 	.word	0x200081f8

0800f330 <_fstat>:
 800f330:	4b02      	ldr	r3, [pc, #8]	; (800f33c <_fstat+0xc>)
 800f332:	2258      	movs	r2, #88	; 0x58
 800f334:	601a      	str	r2, [r3, #0]
 800f336:	f04f 30ff 	mov.w	r0, #4294967295
 800f33a:	4770      	bx	lr
 800f33c:	200081f8 	.word	0x200081f8

0800f340 <_getpid>:
 800f340:	4b02      	ldr	r3, [pc, #8]	; (800f34c <_getpid+0xc>)
 800f342:	2258      	movs	r2, #88	; 0x58
 800f344:	601a      	str	r2, [r3, #0]
 800f346:	f04f 30ff 	mov.w	r0, #4294967295
 800f34a:	4770      	bx	lr
 800f34c:	200081f8 	.word	0x200081f8

0800f350 <_isatty>:
 800f350:	4b02      	ldr	r3, [pc, #8]	; (800f35c <_isatty+0xc>)
 800f352:	2258      	movs	r2, #88	; 0x58
 800f354:	601a      	str	r2, [r3, #0]
 800f356:	2000      	movs	r0, #0
 800f358:	4770      	bx	lr
 800f35a:	bf00      	nop
 800f35c:	200081f8 	.word	0x200081f8

0800f360 <_kill>:
 800f360:	4b02      	ldr	r3, [pc, #8]	; (800f36c <_kill+0xc>)
 800f362:	2258      	movs	r2, #88	; 0x58
 800f364:	601a      	str	r2, [r3, #0]
 800f366:	f04f 30ff 	mov.w	r0, #4294967295
 800f36a:	4770      	bx	lr
 800f36c:	200081f8 	.word	0x200081f8

0800f370 <_lseek>:
 800f370:	4b02      	ldr	r3, [pc, #8]	; (800f37c <_lseek+0xc>)
 800f372:	2258      	movs	r2, #88	; 0x58
 800f374:	601a      	str	r2, [r3, #0]
 800f376:	f04f 30ff 	mov.w	r0, #4294967295
 800f37a:	4770      	bx	lr
 800f37c:	200081f8 	.word	0x200081f8

0800f380 <_read>:
 800f380:	4b02      	ldr	r3, [pc, #8]	; (800f38c <_read+0xc>)
 800f382:	2258      	movs	r2, #88	; 0x58
 800f384:	601a      	str	r2, [r3, #0]
 800f386:	f04f 30ff 	mov.w	r0, #4294967295
 800f38a:	4770      	bx	lr
 800f38c:	200081f8 	.word	0x200081f8

0800f390 <_sbrk>:
 800f390:	4a04      	ldr	r2, [pc, #16]	; (800f3a4 <_sbrk+0x14>)
 800f392:	6811      	ldr	r1, [r2, #0]
 800f394:	4603      	mov	r3, r0
 800f396:	b909      	cbnz	r1, 800f39c <_sbrk+0xc>
 800f398:	4903      	ldr	r1, [pc, #12]	; (800f3a8 <_sbrk+0x18>)
 800f39a:	6011      	str	r1, [r2, #0]
 800f39c:	6810      	ldr	r0, [r2, #0]
 800f39e:	4403      	add	r3, r0
 800f3a0:	6013      	str	r3, [r2, #0]
 800f3a2:	4770      	bx	lr
 800f3a4:	200081fc 	.word	0x200081fc
 800f3a8:	20008200 	.word	0x20008200

0800f3ac <_exit>:
 800f3ac:	e7fe      	b.n	800f3ac <_exit>
	...

0800f3b0 <_init>:
 800f3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3b2:	bf00      	nop
 800f3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3b6:	bc08      	pop	{r3}
 800f3b8:	469e      	mov	lr, r3
 800f3ba:	4770      	bx	lr

0800f3bc <_fini>:
 800f3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3be:	bf00      	nop
 800f3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3c2:	bc08      	pop	{r3}
 800f3c4:	469e      	mov	lr, r3
 800f3c6:	4770      	bx	lr


OBC_SDK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010188  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab4  08010338  08010338  00020338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08010dec  08010dec  00020dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08010df0  08010df0  00020df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  20000000  08010df4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000301ec  2**0
                  CONTENTS
  7 .bss          0000801c  200001ec  200001ec  000301ec  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  20008208  20008208  000301ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023952  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000051c7  00000000  00000000  00053b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001de0  00000000  00000000  00058d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001b88  00000000  00000000  0005ab18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000b8d2  00000000  00000000  0005c6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a5f5  00000000  00000000  00067f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f5b4b  00000000  00000000  00092567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001880b2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008da8  00000000  00000000  00188104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000b4  00000000  00000000  00190eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001c7  00000000  00000000  00190f60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010320 	.word	0x08010320

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	08010320 	.word	0x08010320

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <Main_Task>:
bool LOW_POWER_MODE = 0;

/*
 * @brief Main Task/Thread
 */
void Main_Task(void const * argument){
 8000c68:	b5b0      	push	{r4, r5, r7, lr}
 8000c6a:	b092      	sub	sp, #72	; 0x48
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
    debug_printf("Starting Main function.\r\n");
 8000c70:	488d      	ldr	r0, [pc, #564]	; (8000ea8 <Main_Task+0x240>)
 8000c72:	f002 fe69 	bl	8003948 <debug_printf>

    debug_led_green(5,500);
 8000c76:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c7a:	2005      	movs	r0, #5
 8000c7c:	f002 feca 	bl	8003a14 <debug_led_green>
    //Initialize Mutexes with CMSIS RTOS
    // EPS I2C
    osMutexDef(EPS_I2C_Mutex);
 8000c80:	2300      	movs	r3, #0
 8000c82:	643b      	str	r3, [r7, #64]	; 0x40
    EPS_I2C_Mutex = osMutexCreate(osMutex(EPS_I2C_Mutex));
 8000c84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f009 fdf6 	bl	800a87a <osMutexCreate>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a86      	ldr	r2, [pc, #536]	; (8000eac <Main_Task+0x244>)
 8000c92:	6013      	str	r3, [r2, #0]

    // UART
    osMutexDef(UART_Mutex);
 8000c94:	2300      	movs	r3, #0
 8000c96:	63fb      	str	r3, [r7, #60]	; 0x3c
    UART_Mutex = osMutexCreate(osMutex(UART_Mutex));
 8000c98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f009 fdec 	bl	800a87a <osMutexCreate>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	4a82      	ldr	r2, [pc, #520]	; (8000eb0 <Main_Task+0x248>)
 8000ca6:	6013      	str	r3, [r2, #0]

    // I2C Errors
    osMutexDef(Num_I2C_Errors_Mutex);
 8000ca8:	2300      	movs	r3, #0
 8000caa:	63bb      	str	r3, [r7, #56]	; 0x38
    Num_I2C_Errors_Mutex = osMutexCreate(osMutex(Num_I2C_Errors_Mutex));
 8000cac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f009 fde2 	bl	800a87a <osMutexCreate>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4a7e      	ldr	r2, [pc, #504]	; (8000eb4 <Main_Task+0x24c>)
 8000cba:	6013      	str	r3, [r2, #0]

    // Battery
    osMutexDef(Battery_Capacity_Mutex);
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
    Battery_Capacity_Mutex = osMutexCreate(osMutex(Battery_Capacity_Mutex));
 8000cc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f009 fdd8 	bl	800a87a <osMutexCreate>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a7a      	ldr	r2, [pc, #488]	; (8000eb8 <Main_Task+0x250>)
 8000cce:	6013      	str	r3, [r2, #0]

    // ADCS
    osMutexDef(ADCS_Active_Mutex);
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
    ADCS_Active_Mutex = osMutexCreate(osMutex(ADCS_Active_Mutex));
 8000cd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f009 fdce 	bl	800a87a <osMutexCreate>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	4a76      	ldr	r2, [pc, #472]	; (8000ebc <Main_Task+0x254>)
 8000ce2:	6013      	str	r3, [r2, #0]

    // Low Power
    osMutexDef(Low_Power_Mode_Mutex);
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Low_Power_Mode_Mutex = osMutexCreate(osMutex(Low_Power_Mode_Mutex));
 8000ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cec:	4618      	mov	r0, r3
 8000cee:	f009 fdc4 	bl	800a87a <osMutexCreate>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4a72      	ldr	r2, [pc, #456]	; (8000ec0 <Main_Task+0x258>)
 8000cf6:	6013      	str	r3, [r2, #0]

    // UHF
    osMutexDef(UHF_UART_Mutex);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    UHF_UART_Mutex = osMutexCreate(osMutex(UHF_UART_Mutex));
 8000cfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d00:	4618      	mov	r0, r3
 8000d02:	f009 fdba 	bl	800a87a <osMutexCreate>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a6e      	ldr	r2, [pc, #440]	; (8000ec4 <Main_Task+0x25c>)
 8000d0a:	6013      	str	r3, [r2, #0]

    // Power on UHF code goes here
    HAL_StatusTypeDef status2 = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    status2 = enable_UHF();
 8000d12:	f001 f935 	bl	8001f80 <enable_UHF>
 8000d16:	4603      	mov	r3, r0
 8000d18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    debug_printf("Commanding EPS to enable UHF");
 8000d1c:	486a      	ldr	r0, [pc, #424]	; (8000ec8 <Main_Task+0x260>)
 8000d1e:	f002 fe13 	bl	8003948 <debug_printf>
    if(status2 != HAL_OK){
 8000d22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <Main_Task+0xca>
        debug_printf("EPS UHF Enable Error");
 8000d2a:	4868      	ldr	r0, [pc, #416]	; (8000ecc <Main_Task+0x264>)
 8000d2c:	f002 fe0c 	bl	8003948 <debug_printf>
 8000d30:	e002      	b.n	8000d38 <Main_Task+0xd0>
    }else{
        debug_printf("Power to UHF Enabled");
 8000d32:	4867      	ldr	r0, [pc, #412]	; (8000ed0 <Main_Task+0x268>)
 8000d34:	f002 fe08 	bl	8003948 <debug_printf>
    }
    osDelay(2000); //Delay to allow the UHF to turn on properly (not the problem but probably good practice)
 8000d38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d3c:	f009 fd89 	bl	800a852 <osDelay>

    // Turns on SDR/Payload
    debug_printf("Commanding EPS to enable payload");
 8000d40:	4864      	ldr	r0, [pc, #400]	; (8000ed4 <Main_Task+0x26c>)
 8000d42:	f002 fe01 	bl	8003948 <debug_printf>
    status2=enable_Payload();
 8000d46:	f001 f8f7 	bl	8001f38 <enable_Payload>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if(status2 != HAL_OK){
 8000d50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <Main_Task+0xf8>
        debug_printf("EPS Payload Enable Error");
 8000d58:	485f      	ldr	r0, [pc, #380]	; (8000ed8 <Main_Task+0x270>)
 8000d5a:	f002 fdf5 	bl	8003948 <debug_printf>
 8000d5e:	e002      	b.n	8000d66 <Main_Task+0xfe>
    }else{
        debug_printf("Power to Payload Enabled");
 8000d60:	485e      	ldr	r0, [pc, #376]	; (8000edc <Main_Task+0x274>)
 8000d62:	f002 fdf1 	bl	8003948 <debug_printf>
    }

    // Turns on Boost Board
    debug_printf("Commanding EPS to enable Boost Board");
 8000d66:	485e      	ldr	r0, [pc, #376]	; (8000ee0 <Main_Task+0x278>)
 8000d68:	f002 fdee 	bl	8003948 <debug_printf>
    enable_Boost_Board();
 8000d6c:	f001 f8d2 	bl	8001f14 <enable_Boost_Board>
    if(status2 != HAL_OK){
 8000d70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <Main_Task+0x118>
        debug_printf("EPS Boost Board Enable Error");
 8000d78:	485a      	ldr	r0, [pc, #360]	; (8000ee4 <Main_Task+0x27c>)
 8000d7a:	f002 fde5 	bl	8003948 <debug_printf>
 8000d7e:	e002      	b.n	8000d86 <Main_Task+0x11e>
    }else{
        debug_printf("Power to Boost Board Enabled");
 8000d80:	4859      	ldr	r0, [pc, #356]	; (8000ee8 <Main_Task+0x280>)
 8000d82:	f002 fde1 	bl	8003948 <debug_printf>
    // Magnetometer Deployment is done by the ADCS function

    // Antenna Deployment
    // TODO: Antenna Deployment Function Goes Here (DO NOT RUN WITH ACTUAL ANTENNA UNTIL FLIGHT, IT IS SINGLE USE)
    //DEPLOY_ANTENNA(30);
    debug_printf("Sending 0x1F to I2C slave address 0x33");
 8000d86:	4859      	ldr	r0, [pc, #356]	; (8000eec <Main_Task+0x284>)
 8000d88:	f002 fdde 	bl	8003948 <debug_printf>

    // Beacon Configuration
    debug_printf("Starting UHF Beacon Configuration");
 8000d8c:	4858      	ldr	r0, [pc, #352]	; (8000ef0 <Main_Task+0x288>)
 8000d8e:	f002 fddb 	bl	8003948 <debug_printf>
    uint8_t initial_beacon_text[] = "Hello I Am Space Core"; // Beacon Message
 8000d92:	4b58      	ldr	r3, [pc, #352]	; (8000ef4 <Main_Task+0x28c>)
 8000d94:	f107 0410 	add.w	r4, r7, #16
 8000d98:	461d      	mov	r5, r3
 8000d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000da2:	6020      	str	r0, [r4, #0]
 8000da4:	3404      	adds	r4, #4
 8000da6:	8021      	strh	r1, [r4, #0]

    // Beacon Period
    debug_printf("Commanding UHF to set beacon period.");
 8000da8:	4853      	ldr	r0, [pc, #332]	; (8000ef8 <Main_Task+0x290>)
 8000daa:	f002 fdcd 	bl	8003948 <debug_printf>
    status2 = SET_BEACON_PERIOD(3);
 8000dae:	2003      	movs	r0, #3
 8000db0:	f002 fb36 	bl	8003420 <SET_BEACON_PERIOD>
 8000db4:	4603      	mov	r3, r0
 8000db6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (status2 != HAL_OK){
 8000dba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <Main_Task+0x162>
        debug_printf("Beacon period set error");
 8000dc2:	484e      	ldr	r0, [pc, #312]	; (8000efc <Main_Task+0x294>)
 8000dc4:	f002 fdc0 	bl	8003948 <debug_printf>
 8000dc8:	e002      	b.n	8000dd0 <Main_Task+0x168>
    } else{
        debug_printf("Beacon period set successfully");
 8000dca:	484d      	ldr	r0, [pc, #308]	; (8000f00 <Main_Task+0x298>)
 8000dcc:	f002 fdbc 	bl	8003948 <debug_printf>
    }
    osDelay(500);
 8000dd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dd4:	f009 fd3d 	bl	800a852 <osDelay>

    // Beacon Text
    debug_printf("Commanding UHF to set beacon text.");
 8000dd8:	484a      	ldr	r0, [pc, #296]	; (8000f04 <Main_Task+0x29c>)
 8000dda:	f002 fdb5 	bl	8003948 <debug_printf>
    status2 = SET_BEACON_TEXT(initial_beacon_text, 21);
 8000dde:	f107 0310 	add.w	r3, r7, #16
 8000de2:	2115      	movs	r1, #21
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 fb5f 	bl	80034a8 <SET_BEACON_TEXT>
 8000dea:	4603      	mov	r3, r0
 8000dec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if (status2 != HAL_OK) {
 8000df0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <Main_Task+0x198>
        debug_printf("Beacon text set error");
 8000df8:	4843      	ldr	r0, [pc, #268]	; (8000f08 <Main_Task+0x2a0>)
 8000dfa:	f002 fda5 	bl	8003948 <debug_printf>
 8000dfe:	e008      	b.n	8000e12 <Main_Task+0x1aa>
    } else{
        debug_printf("Beacon text successfully set to: ");
 8000e00:	4842      	ldr	r0, [pc, #264]	; (8000f0c <Main_Task+0x2a4>)
 8000e02:	f002 fda1 	bl	8003948 <debug_printf>
        debug_printf("%s", initial_beacon_text);
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4840      	ldr	r0, [pc, #256]	; (8000f10 <Main_Task+0x2a8>)
 8000e0e:	f002 fd9b 	bl	8003948 <debug_printf>
    }
    osDelay(1000);
 8000e12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e16:	f009 fd1c 	bl	800a852 <osDelay>


    debug_printf("Commanding UHF to start beacon.");
 8000e1a:	483e      	ldr	r0, [pc, #248]	; (8000f14 <Main_Task+0x2ac>)
 8000e1c:	f002 fd94 	bl	8003948 <debug_printf>
    status2 = START_BEACON();
 8000e20:	f002 fa50 	bl	80032c4 <START_BEACON>
 8000e24:	4603      	mov	r3, r0
 8000e26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (status2 != HAL_OK) {
 8000e2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <Main_Task+0x1d2>
        debug_printf("Beacon start error");
 8000e32:	4839      	ldr	r0, [pc, #228]	; (8000f18 <Main_Task+0x2b0>)
 8000e34:	f002 fd88 	bl	8003948 <debug_printf>
 8000e38:	e002      	b.n	8000e40 <Main_Task+0x1d8>
    } else {
        debug_printf("Beacon successfully started");
 8000e3a:	4838      	ldr	r0, [pc, #224]	; (8000f1c <Main_Task+0x2b4>)
 8000e3c:	f002 fd84 	bl	8003948 <debug_printf>
    }
    osDelay(1000);
 8000e40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e44:	f009 fd05 	bl	800a852 <osDelay>
    //status2 = END_BEACON();
    //debug_printf("Beacon should be off");
    //osDelay(1000);

    float temperaturevalue;
    debug_printf("Getting UHF temperature");
 8000e48:	4835      	ldr	r0, [pc, #212]	; (8000f20 <Main_Task+0x2b8>)
 8000e4a:	f002 fd7d 	bl	8003948 <debug_printf>
    GET_UHF_TEMP(&temperaturevalue);
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fbf8 	bl	8003648 <GET_UHF_TEMP>
    debug_printf("%lf",temperaturevalue);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fb84 	bl	8000568 <__aeabi_f2d>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	482f      	ldr	r0, [pc, #188]	; (8000f24 <Main_Task+0x2bc>)
 8000e66:	f002 fd6f 	bl	8003948 <debug_printf>
    // Enable Transparent Mode
    // TODO: Send command to UHF transceiver to enable transparent mode

    // Detumbling Sequence
    // TODO: Detumbling functions (ADCS) go here
    debug_printf("Beginning detumbling sequence");
 8000e6a:	482f      	ldr	r0, [pc, #188]	; (8000f28 <Main_Task+0x2c0>)
 8000e6c:	f002 fd6c 	bl	8003948 <debug_printf>
    * TODO: Create health checks:
    * EPS, ADCS, SDR, OBC, UHF transceiver
    */

    // Flashes the lights to let you know that the startup sequence completed, then starts other threads
    debug_led_green(10,50);
 8000e70:	2132      	movs	r1, #50	; 0x32
 8000e72:	200a      	movs	r0, #10
 8000e74:	f002 fdce 	bl	8003a14 <debug_led_green>
    debug_led_amber(10,50);
 8000e78:	2132      	movs	r1, #50	; 0x32
 8000e7a:	200a      	movs	r0, #10
 8000e7c:	f002 fdf4 	bl	8003a68 <debug_led_amber>

    while(1){
        GREEN_LED_ON();
 8000e80:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <Main_Task+0x2c4>)
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	4a29      	ldr	r2, [pc, #164]	; (8000f2c <Main_Task+0x2c4>)
 8000e86:	f043 0310 	orr.w	r3, r3, #16
 8000e8a:	6153      	str	r3, [r2, #20]
        osDelay(150);
 8000e8c:	2096      	movs	r0, #150	; 0x96
 8000e8e:	f009 fce0 	bl	800a852 <osDelay>
        GREEN_LED_OFF();
 8000e92:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <Main_Task+0x2c4>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	4a25      	ldr	r2, [pc, #148]	; (8000f2c <Main_Task+0x2c4>)
 8000e98:	f023 0310 	bic.w	r3, r3, #16
 8000e9c:	6153      	str	r3, [r2, #20]
        osDelay(150);
 8000e9e:	2096      	movs	r0, #150	; 0x96
 8000ea0:	f009 fcd7 	bl	800a852 <osDelay>
        GREEN_LED_ON();
 8000ea4:	e7ec      	b.n	8000e80 <Main_Task+0x218>
 8000ea6:	bf00      	nop
 8000ea8:	0801033c 	.word	0x0801033c
 8000eac:	20000228 	.word	0x20000228
 8000eb0:	2000022c 	.word	0x2000022c
 8000eb4:	20000230 	.word	0x20000230
 8000eb8:	20000234 	.word	0x20000234
 8000ebc:	20000238 	.word	0x20000238
 8000ec0:	2000023c 	.word	0x2000023c
 8000ec4:	20000240 	.word	0x20000240
 8000ec8:	08010358 	.word	0x08010358
 8000ecc:	08010378 	.word	0x08010378
 8000ed0:	08010390 	.word	0x08010390
 8000ed4:	080103a8 	.word	0x080103a8
 8000ed8:	080103cc 	.word	0x080103cc
 8000edc:	080103e8 	.word	0x080103e8
 8000ee0:	08010404 	.word	0x08010404
 8000ee4:	0801042c 	.word	0x0801042c
 8000ee8:	0801044c 	.word	0x0801044c
 8000eec:	0801046c 	.word	0x0801046c
 8000ef0:	08010494 	.word	0x08010494
 8000ef4:	08010608 	.word	0x08010608
 8000ef8:	080104b8 	.word	0x080104b8
 8000efc:	080104e0 	.word	0x080104e0
 8000f00:	080104f8 	.word	0x080104f8
 8000f04:	08010518 	.word	0x08010518
 8000f08:	0801053c 	.word	0x0801053c
 8000f0c:	08010554 	.word	0x08010554
 8000f10:	08010578 	.word	0x08010578
 8000f14:	0801057c 	.word	0x0801057c
 8000f18:	0801059c 	.word	0x0801059c
 8000f1c:	080105b0 	.word	0x080105b0
 8000f20:	080105cc 	.word	0x080105cc
 8000f24:	080105e4 	.word	0x080105e4
 8000f28:	080105e8 	.word	0x080105e8
 8000f2c:	40020800 	.word	0x40020800

08000f30 <UHF_Rx_Task>:
}

/*
 * @brief main UHF Task/Thread
 */
void UHF_Rx_Task(void const * argument){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    debug_printf("Starting UHF reception function.\r\n");
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <UHF_Rx_Task+0x18>)
 8000f3a:	f002 fd05 	bl	8003948 <debug_printf>

    //HAL_UART_Receive_IT(&huart6,GroundStationRxBuffer, 4); //These have been moved to main.c where they are declared and defined
    //HAL_UART_Receive_IT(&huart1,GroundStationRxBuffer, 4);

    while(1){
        osDelay(10000); //The actual handleCySatPacket stuff should run in the callback so we shouldn't need this thread at all
 8000f3e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f42:	f009 fc86 	bl	800a852 <osDelay>
 8000f46:	e7fa      	b.n	8000f3e <UHF_Rx_Task+0xe>
 8000f48:	08010620 	.word	0x08010620

08000f4c <UHF_Tx_Task>:
}

/*
 * @brief main UHF Task/Thread
 */
void UHF_Tx_Task(void const * argument){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    debug_printf("Starting UHF function.\r\n");
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <UHF_Tx_Task+0x18>)
 8000f56:	f002 fcf7 	bl	8003948 <debug_printf>

    while(1){
        //AMBER_LED_ON();
        //HAL_UART_Transmit(&huart6, 1234567890123456789012345678901234567890, 40, 1000);
        //AMBER_LED_OFF();
        osDelay(5000);
 8000f5a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f5e:	f009 fc78 	bl	800a852 <osDelay>
 8000f62:	e7fa      	b.n	8000f5a <UHF_Tx_Task+0xe>
 8000f64:	08010644 	.word	0x08010644

08000f68 <ADCS_Task>:


/*
 * @brief main ADCS Task/Thread
 */
void ADCS_Task(void const * argument){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
    osDelay(999999999999); //TODO: Remove, this is for testing
 8000f70:	481a      	ldr	r0, [pc, #104]	; (8000fdc <ADCS_Task+0x74>)
 8000f72:	f009 fc6e 	bl	800a852 <osDelay>
    debug_printf("Starting ADCS function.\r\n");
 8000f76:	481a      	ldr	r0, [pc, #104]	; (8000fe0 <ADCS_Task+0x78>)
 8000f78:	f002 fce6 	bl	8003948 <debug_printf>

    HAL_StatusTypeDef status;
    //status = enable_EPS_Output_1(); //Enabling the boost board is done in the main task
    status = enable_EPS_5v_Bus();
 8000f7c:	f000 ff82 	bl	8001e84 <enable_EPS_5v_Bus>
 8000f80:	4603      	mov	r3, r0
 8000f82:	73fb      	strb	r3, [r7, #15]
    status = enable_EPS_LUP_3v();
 8000f84:	f000 ff90 	bl	8001ea8 <enable_EPS_LUP_3v>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
    status = enable_EPS_LUP_5v();
 8000f8c:	f000 ff95 	bl	8001eba <enable_EPS_LUP_5v>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
        debug_printf("Pitch did not stay constant!\r\n");
    else if(result == FAULT_Y_RATE)
        debug_printf("Did not go to 0 y-rate and then back up to Y-Thompson rate.\r\n");
        */ //Ask Lexi about this stuff

    osMutexWait(ADCS_Active_Mutex, 500);
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <ADCS_Task+0x7c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f009 fc79 	bl	800a894 <osMutexWait>
    ADCS_ACTIVE = 1;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <ADCS_Task+0x80>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ADCS_Active_Mutex);
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <ADCS_Task+0x7c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f009 fcc1 	bl	800a934 <osMutexRelease>
    while(1){
        GREEN_LED_ON();
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <ADCS_Task+0x84>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <ADCS_Task+0x84>)
 8000fb8:	f043 0310 	orr.w	r3, r3, #16
 8000fbc:	6153      	str	r3, [r2, #20]
        osDelay(1000);
 8000fbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc2:	f009 fc46 	bl	800a852 <osDelay>
        GREEN_LED_OFF();
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <ADCS_Task+0x84>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4a08      	ldr	r2, [pc, #32]	; (8000fec <ADCS_Task+0x84>)
 8000fcc:	f023 0310 	bic.w	r3, r3, #16
 8000fd0:	6153      	str	r3, [r2, #20]
        osDelay(1000);
 8000fd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd6:	f009 fc3c 	bl	800a852 <osDelay>
        GREEN_LED_ON();
 8000fda:	e7ea      	b.n	8000fb2 <ADCS_Task+0x4a>
 8000fdc:	d4a50fff 	.word	0xd4a50fff
 8000fe0:	08010660 	.word	0x08010660
 8000fe4:	20000238 	.word	0x20000238
 8000fe8:	2000020c 	.word	0x2000020c
 8000fec:	40020800 	.word	0x40020800

08000ff0 <BatteryCapacity_Task>:
}

/*
 * @brief Task/Thread responsible for calculating battery capacity
 */
void BatteryCapacity_Task(void const * argument){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b092      	sub	sp, #72	; 0x48
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    osDelay(999999999999); //TODO: Remove, this is for testing
 8000ff8:	4881      	ldr	r0, [pc, #516]	; (8001200 <BatteryCapacity_Task+0x210>)
 8000ffa:	f009 fc2a 	bl	800a852 <osDelay>
    debug_printf("Starting battery capacity function.\r\n");
 8000ffe:	4881      	ldr	r0, [pc, #516]	; (8001204 <BatteryCapacity_Task+0x214>)
 8001000:	f002 fca2 	bl	8003948 <debug_printf>
    float y_voltage, y_neg_current, y_pos_current;
    float z_voltage, z_neg_current, z_pos_current;
    float total_input_power;
    float total_output_power;

    uint32_t PreviousWakeTime = osKernelSysTick();
 8001004:	f009 fbee 	bl	800a7e4 <osKernelSysTick>
 8001008:	4603      	mov	r3, r0
 800100a:	60fb      	str	r3, [r7, #12]

    while(1){

        READ_EPS_INPUT_CONDITION(&input_conditions);
 800100c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8001010:	4618      	mov	r0, r3
 8001012:	f000 fdb3 	bl	8001b7c <READ_EPS_INPUT_CONDITION>
        if((input_conditions & 0x20)==0x20){ // Charge Complete
 8001016:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001018:	f003 0320 	and.w	r3, r3, #32
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00f      	beq.n	8001040 <BatteryCapacity_Task+0x50>
            osMutexWait(Battery_Capacity_Mutex, 500);
 8001020:	4b79      	ldr	r3, [pc, #484]	; (8001208 <BatteryCapacity_Task+0x218>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001028:	4618      	mov	r0, r3
 800102a:	f009 fc33 	bl	800a894 <osMutexWait>
            BATTERY_CAPACITY = original_battery_capacity;
 800102e:	4a77      	ldr	r2, [pc, #476]	; (800120c <BatteryCapacity_Task+0x21c>)
 8001030:	4b77      	ldr	r3, [pc, #476]	; (8001210 <BatteryCapacity_Task+0x220>)
 8001032:	601a      	str	r2, [r3, #0]
            osMutexRelease(Battery_Capacity_Mutex);
 8001034:	4b74      	ldr	r3, [pc, #464]	; (8001208 <BatteryCapacity_Task+0x218>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f009 fc7b 	bl	800a934 <osMutexRelease>
 800103e:	e033      	b.n	80010a8 <BatteryCapacity_Task+0xb8>
        }
        else{ // Not Fully Charged
            READ_EPS_5V_CURRENT(&Five_Bus_Current);
 8001040:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fc61 	bl	800190c <READ_EPS_5V_CURRENT>
            READ_EPS_3V_CURRENT(&Three_Bus_Current);
 800104a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fc2a 	bl	80018a8 <READ_EPS_3V_CURRENT>

            total_output_power = (5*Five_Bus_Current)+(3*Three_Bus_Current);
 8001054:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001058:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800105c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001060:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001064:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001068:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800106c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001070:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            osMutexWait(Battery_Capacity_Mutex, 500);
 8001074:	4b64      	ldr	r3, [pc, #400]	; (8001208 <BatteryCapacity_Task+0x218>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800107c:	4618      	mov	r0, r3
 800107e:	f009 fc09 	bl	800a894 <osMutexWait>
            BATTERY_CAPACITY -= total_output_power/3600;
 8001082:	4b63      	ldr	r3, [pc, #396]	; (8001210 <BatteryCapacity_Task+0x220>)
 8001084:	ed93 7a00 	vldr	s14, [r3]
 8001088:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800108c:	ed9f 6a61 	vldr	s12, [pc, #388]	; 8001214 <BatteryCapacity_Task+0x224>
 8001090:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001098:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <BatteryCapacity_Task+0x220>)
 800109a:	edc3 7a00 	vstr	s15, [r3]
            osMutexRelease(Battery_Capacity_Mutex);
 800109e:	4b5a      	ldr	r3, [pc, #360]	; (8001208 <BatteryCapacity_Task+0x218>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f009 fc46 	bl	800a934 <osMutexRelease>
        }

        if((input_conditions & 0x40)==0x40){ // Charge in Progress
 80010a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d072      	beq.n	8001198 <BatteryCapacity_Task+0x1a8>
            READ_EPS_SOLAR_X_VOLTAGE(&x_voltage);
 80010b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fa34 	bl	8001524 <READ_EPS_SOLAR_X_VOLTAGE>
            READ_EPS_SOLAR_X_NEG_CURRENT(&x_neg_current);
 80010bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fa61 	bl	8001588 <READ_EPS_SOLAR_X_NEG_CURRENT>
            READ_EPS_SOLAR_X_POS_CURRENT(&x_pos_current);
 80010c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fa8e 	bl	80015ec <READ_EPS_SOLAR_X_POS_CURRENT>

            READ_EPS_SOLAR_Y_VOLTAGE(&y_voltage);
 80010d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 fabb 	bl	8001650 <READ_EPS_SOLAR_Y_VOLTAGE>
            READ_EPS_SOLAR_Y_NEG_CURRENT(&y_neg_current);
 80010da:	f107 0320 	add.w	r3, r7, #32
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fae8 	bl	80016b4 <READ_EPS_SOLAR_Y_NEG_CURRENT>
            READ_EPS_SOLAR_Y_POS_CURRENT(&y_pos_current);
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fb15 	bl	8001718 <READ_EPS_SOLAR_Y_POS_CURRENT>

            READ_EPS_SOLAR_Z_VOLTAGE(&z_voltage);
 80010ee:	f107 0318 	add.w	r3, r7, #24
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fb42 	bl	800177c <READ_EPS_SOLAR_Z_VOLTAGE>
            READ_EPS_SOLAR_Z_NEG_CURRENT(&z_neg_current);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fb6f 	bl	80017e0 <READ_EPS_SOLAR_Z_NEG_CURRENT>
            READ_EPS_SOLAR_Z_POS_CURRENT(&z_pos_current);
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fb9c 	bl	8001844 <READ_EPS_SOLAR_Z_POS_CURRENT>

            total_input_power = (x_voltage*(x_neg_current+x_pos_current));
 800110c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001110:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001114:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001118:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800111c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001120:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            total_input_power += (y_voltage*(y_neg_current+y_pos_current));
 8001124:	ed97 7a08 	vldr	s14, [r7, #32]
 8001128:	edd7 7a07 	vldr	s15, [r7, #28]
 800112c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001130:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001138:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800113c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001140:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            total_input_power += (z_voltage*(z_neg_current+z_pos_current));
 8001144:	ed97 7a05 	vldr	s14, [r7, #20]
 8001148:	edd7 7a04 	vldr	s15, [r7, #16]
 800114c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001150:	edd7 7a06 	vldr	s15, [r7, #24]
 8001154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001158:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800115c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001160:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

            osMutexWait(Battery_Capacity_Mutex, 500);
 8001164:	4b28      	ldr	r3, [pc, #160]	; (8001208 <BatteryCapacity_Task+0x218>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800116c:	4618      	mov	r0, r3
 800116e:	f009 fb91 	bl	800a894 <osMutexWait>
            BATTERY_CAPACITY += total_input_power/3600;
 8001172:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001176:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001214 <BatteryCapacity_Task+0x224>
 800117a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <BatteryCapacity_Task+0x220>)
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <BatteryCapacity_Task+0x220>)
 800118a:	edc3 7a00 	vstr	s15, [r3]
            osMutexRelease(Battery_Capacity_Mutex);
 800118e:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <BatteryCapacity_Task+0x218>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f009 fbce 	bl	800a934 <osMutexRelease>
        }
        osMutexWait(Battery_Capacity_Mutex, 500);
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <BatteryCapacity_Task+0x218>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011a0:	4618      	mov	r0, r3
 80011a2:	f009 fb77 	bl	800a894 <osMutexWait>
        osMutexWait(Low_Power_Mode_Mutex, 500);
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <BatteryCapacity_Task+0x228>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011ae:	4618      	mov	r0, r3
 80011b0:	f009 fb70 	bl	800a894 <osMutexWait>
        if(BATTERY_CAPACITY < 3){
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <BatteryCapacity_Task+0x220>)
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80011be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c6:	d408      	bmi.n	80011da <BatteryCapacity_Task+0x1ea>
            //LOW_POWER_MODE = 1; //TODO: Uncomment this, I commented it for testing
        }
        else if((LOW_POWER_MODE==1)&(BATTERY_CAPACITY>8)){
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <BatteryCapacity_Task+0x220>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80011d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            //LOW_POWER_MODE = 0;
        }
        osMutexRelease(Low_Power_Mode_Mutex);
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <BatteryCapacity_Task+0x228>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f009 fba8 	bl	800a934 <osMutexRelease>
        osMutexRelease(Battery_Capacity_Mutex);
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <BatteryCapacity_Task+0x218>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f009 fba3 	bl	800a934 <osMutexRelease>

        osDelayUntil(&PreviousWakeTime, 1000); // Delay for 1 second
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011f6:	4618      	mov	r0, r3
 80011f8:	f009 fbdd 	bl	800a9b6 <osDelayUntil>
        READ_EPS_INPUT_CONDITION(&input_conditions);
 80011fc:	e706      	b.n	800100c <BatteryCapacity_Task+0x1c>
 80011fe:	bf00      	nop
 8001200:	d4a50fff 	.word	0xd4a50fff
 8001204:	0801067c 	.word	0x0801067c
 8001208:	20000234 	.word	0x20000234
 800120c:	418f102e 	.word	0x418f102e
 8001210:	20000000 	.word	0x20000000
 8001214:	45610000 	.word	0x45610000
 8001218:	2000023c 	.word	0x2000023c

0800121c <parseCySatPacket>:
/**
 * @brief Takes in an array containing the cysat packet in byte form and builds a struct from it
 * @param packet: the byte array containing the packet within, with the first byte being the start character
 * @retval The struct representing this CySat packet
 */
CySat_Packet_t parseCySatPacket(uint8_t* packet){
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
    CySat_Packet_t cySatPacket;
    cySatPacket.Subsystem_Type = packet[1];
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	785b      	ldrb	r3, [r3, #1]
 800122a:	733b      	strb	r3, [r7, #12]
    cySatPacket.Command = packet[2];
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	789b      	ldrb	r3, [r3, #2]
 8001230:	737b      	strb	r3, [r7, #13]
    cySatPacket.Data_Length = packet[3];
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	78db      	ldrb	r3, [r3, #3]
 8001236:	73bb      	strb	r3, [r7, #14]
    cySatPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * cySatPacket.Data_Length);
 8001238:	7bbb      	ldrb	r3, [r7, #14]
 800123a:	4618      	mov	r0, r3
 800123c:	f00c f8fa 	bl	800d434 <malloc>
 8001240:	4603      	mov	r3, r0
 8001242:	613b      	str	r3, [r7, #16]
    memcpy(cySatPacket.Data, packet+4, cySatPacket.Data_Length);
 8001244:	6938      	ldr	r0, [r7, #16]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	3304      	adds	r3, #4
 800124a:	7bba      	ldrb	r2, [r7, #14]
 800124c:	4619      	mov	r1, r3
 800124e:	f00c f901 	bl	800d454 <memcpy>
    cySatPacket.Checksum = packet[cySatPacket.Data_Length+4];
 8001252:	7bbb      	ldrb	r3, [r7, #14]
 8001254:	3304      	adds	r3, #4
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	753b      	strb	r3, [r7, #20]
    return cySatPacket;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	461c      	mov	r4, r3
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800126a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	371c      	adds	r7, #28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd90      	pop	{r4, r7, pc}
	...

08001278 <sendCySatPacket>:
 * @brief Takes in a packet and sends it to the Ground Station via UART serial connection
 * @param packet: A struct representing the CySat packet you wish to send
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
HAL_StatusTypeDef sendCySatPacket(CySat_Packet_t packet){
 8001278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800127c:	b089      	sub	sp, #36	; 0x24
 800127e:	af00      	add	r7, sp, #0
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001286:	466b      	mov	r3, sp
 8001288:	461e      	mov	r6, r3
    uint8_t message[packet.Data_Length + 5];
 800128a:	79bb      	ldrb	r3, [r7, #6]
 800128c:	1d59      	adds	r1, r3, #5
 800128e:	1e4b      	subs	r3, r1, #1
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	460a      	mov	r2, r1
 8001294:	2300      	movs	r3, #0
 8001296:	4690      	mov	r8, r2
 8001298:	4699      	mov	r9, r3
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012ae:	460a      	mov	r2, r1
 80012b0:	2300      	movs	r3, #0
 80012b2:	4614      	mov	r4, r2
 80012b4:	461d      	mov	r5, r3
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	00eb      	lsls	r3, r5, #3
 80012c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012c4:	00e2      	lsls	r2, r4, #3
 80012c6:	460b      	mov	r3, r1
 80012c8:	3307      	adds	r3, #7
 80012ca:	08db      	lsrs	r3, r3, #3
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	ebad 0d03 	sub.w	sp, sp, r3
 80012d2:	466b      	mov	r3, sp
 80012d4:	3300      	adds	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]

    //build byte array
    message[0] = 0xFF; //start byte
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	22ff      	movs	r2, #255	; 0xff
 80012dc:	701a      	strb	r2, [r3, #0]
    message[1] = packet.Subsystem_Type;
 80012de:	793a      	ldrb	r2, [r7, #4]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	705a      	strb	r2, [r3, #1]
    message[2] = packet.Command;
 80012e4:	797a      	ldrb	r2, [r7, #5]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	709a      	strb	r2, [r3, #2]
    message[3] = packet.Data_Length;
 80012ea:	79ba      	ldrb	r2, [r7, #6]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	70da      	strb	r2, [r3, #3]
    int i;
    for(i = 0; i < packet.Data_Length; i++){
 80012f0:	2300      	movs	r3, #0
 80012f2:	61bb      	str	r3, [r7, #24]
 80012f4:	e00a      	b.n	800130c <sendCySatPacket+0x94>
        message[i + 4] = packet.Data[i];
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	441a      	add	r2, r3
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	3304      	adds	r3, #4
 8001300:	7811      	ldrb	r1, [r2, #0]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < packet.Data_Length; i++){
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	3301      	adds	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	461a      	mov	r2, r3
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	4293      	cmp	r3, r2
 8001314:	dbef      	blt.n	80012f6 <sendCySatPacket+0x7e>
    }
    message[4 + packet.Data_Length] = packet.Checksum;
 8001316:	79bb      	ldrb	r3, [r7, #6]
 8001318:	3304      	adds	r3, #4
 800131a:	7b39      	ldrb	r1, [r7, #12]
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	54d1      	strb	r1, [r2, r3]

    HAL_StatusTypeDef status = HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	77fb      	strb	r3, [r7, #31]
    if(packet.Subsystem_Type == OBC_SUBSYSTEM_TYPE){
 8001324:	793b      	ldrb	r3, [r7, #4]
 8001326:	2b0a      	cmp	r3, #10
 8001328:	d10c      	bne.n	8001344 <sendCySatPacket+0xcc>
        status = HAL_UART_Transmit(&huart1, message, packet.Data_Length + 5, 1000); //send the message over uart, but timeout after 1s
 800132a:	79bb      	ldrb	r3, [r7, #6]
 800132c:	b29b      	uxth	r3, r3
 800132e:	3305      	adds	r3, #5
 8001330:	b29a      	uxth	r2, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	6939      	ldr	r1, [r7, #16]
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <sendCySatPacket+0xf8>)
 800133a:	f006 fe1c 	bl	8007f76 <HAL_UART_Transmit>
 800133e:	4603      	mov	r3, r0
 8001340:	77fb      	strb	r3, [r7, #31]
 8001342:	e00e      	b.n	8001362 <sendCySatPacket+0xea>
    }
    else if(packet.Subsystem_Type == PAYLOAD_SUBSYSTEM_TYPE){
 8001344:	793b      	ldrb	r3, [r7, #4]
 8001346:	2b28      	cmp	r3, #40	; 0x28
 8001348:	d10b      	bne.n	8001362 <sendCySatPacket+0xea>
        status = HAL_UART_Transmit(&huart6, message, packet.Data_Length + 5, 1000); //send the message over uart, but timeout after 1s
 800134a:	79bb      	ldrb	r3, [r7, #6]
 800134c:	b29b      	uxth	r3, r3
 800134e:	3305      	adds	r3, #5
 8001350:	b29a      	uxth	r2, r3
 8001352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001356:	6939      	ldr	r1, [r7, #16]
 8001358:	4806      	ldr	r0, [pc, #24]	; (8001374 <sendCySatPacket+0xfc>)
 800135a:	f006 fe0c 	bl	8007f76 <HAL_UART_Transmit>
 800135e:	4603      	mov	r3, r0
 8001360:	77fb      	strb	r3, [r7, #31]
    }
    return status;
 8001362:	7ffb      	ldrb	r3, [r7, #31]
 8001364:	46b5      	mov	sp, r6
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001370:	200006bc 	.word	0x200006bc
 8001374:	200006fc 	.word	0x200006fc

08001378 <generateCySatChecksum>:
/**
  * @brief Gives you the checksum byte value for a submitted packet
  * @param packet: The packet for which you want to generate a packet
  * @retval The 1 byte packet checksum that has been generated
  */
uint8_t generateCySatChecksum(CySat_Packet_t packet){
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]

    //add components of the packet together (NOT including the checksum)
    sum += packet.Subsystem_Type;
 8001388:	793b      	ldrb	r3, [r7, #4]
 800138a:	461a      	mov	r2, r3
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	4413      	add	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
    sum += packet.Command;
 8001392:	797b      	ldrb	r3, [r7, #5]
 8001394:	461a      	mov	r2, r3
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	4413      	add	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
    sum += packet.Data_Length;
 800139c:	79bb      	ldrb	r3, [r7, #6]
 800139e:	461a      	mov	r2, r3
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	4413      	add	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	e00a      	b.n	80013c2 <generateCySatChecksum+0x4a>
        sum += packet.Data[i];
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	4413      	add	r3, r2
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4413      	add	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	3301      	adds	r3, #1
 80013c0:	61fb      	str	r3, [r7, #28]
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	461a      	mov	r2, r3
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	4293      	cmp	r3, r2
 80013ca:	dbef      	blt.n	80013ac <generateCySatChecksum+0x34>
    }

    //take the lowest 8 bits
    uint8_t byte = (uint8_t) sum & 0xFF;
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	75fb      	strb	r3, [r7, #23]

    //subtract from 0xFF
    return 0xFF - byte;
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	b2db      	uxtb	r3, r3
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <validateCySatChecksum>:
/**
  * @brief Returns if the checksum of a given packet is correct or not
  * @param packet: The packet you have just received and want to check
  * @retval 1 if the checksum is correct for the data in the packet, otherwise it returns a 0
  */
uint8_t validateCySatChecksum(CySat_Packet_t packet){
 80013e2:	b480      	push	{r7}
 80013e4:	b087      	sub	sp, #28
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]

    //add components of the packet together (INCLUDING the checksum)
    sum += packet.Subsystem_Type;
 80013f2:	793b      	ldrb	r3, [r7, #4]
 80013f4:	461a      	mov	r2, r3
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4413      	add	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
    sum += packet.Command;
 80013fc:	797b      	ldrb	r3, [r7, #5]
 80013fe:	461a      	mov	r2, r3
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4413      	add	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
    sum += packet.Data_Length;
 8001406:	79bb      	ldrb	r3, [r7, #6]
 8001408:	461a      	mov	r2, r3
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4413      	add	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	e00a      	b.n	800142c <validateCySatChecksum+0x4a>
        sum += packet.Data[i];
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	4413      	add	r3, r2
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4413      	add	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	461a      	mov	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	4293      	cmp	r3, r2
 8001434:	dbef      	blt.n	8001416 <validateCySatChecksum+0x34>
    }
    sum += packet.Checksum;
 8001436:	7b3b      	ldrb	r3, [r7, #12]
 8001438:	461a      	mov	r2, r3
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4413      	add	r3, r2
 800143e:	613b      	str	r3, [r7, #16]

    //if the last 8 bits equal 0xFF, it is correct
    if((sum & 0xFF) == 0xFF){
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2bff      	cmp	r3, #255	; 0xff
 8001446:	d101      	bne.n	800144c <validateCySatChecksum+0x6a>
        return 1;
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <validateCySatChecksum+0x6c>
    }
    else{
        return 0;
 800144c:	2300      	movs	r3, #0
    }
}
 800144e:	4618      	mov	r0, r3
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <READ_EPS_BATTERY_VOLTAGE>:
/**
  * @brief Reads the voltage level of the EPS battery voltage bus and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_VOLTAGE(float* volt_ptr){
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001464:	2301      	movs	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 1; //battery voltage command
 8001468:	2301      	movs	r3, #1
 800146a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800146c:	f107 0208 	add.w	r2, r7, #8
 8001470:	7bbb      	ldrb	r3, [r7, #14]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fddd 	bl	8002034 <EPS_READ>
 800147a:	4603      	mov	r3, r0
 800147c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <READ_EPS_BATTERY_VOLTAGE+0x2c>
        return status;
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	e014      	b.n	80014b2 <READ_EPS_BATTERY_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001488:	7a3b      	ldrb	r3, [r7, #8]
 800148a:	b29b      	uxth	r3, r3
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	b29a      	uxth	r2, r3
 8001490:	7a7b      	ldrb	r3, [r7, #9]
 8001492:	b29b      	uxth	r3, r3
 8001494:	4413      	add	r3, r2
 8001496:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0023394775f * (float) raw_voltage; //multiply by the conversion coeff
 8001498:	89bb      	ldrh	r3, [r7, #12]
 800149a:	ee07 3a90 	vmov	s15, r3
 800149e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80014bc <READ_EPS_BATTERY_VOLTAGE+0x60>
 80014a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0023394775 * 4095 = 9.58 V
    return status;
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	3b1951eb 	.word	0x3b1951eb

080014c0 <READ_EPS_BATTERY_CURRENT>:
/**
  * @brief Reads the current level of the EPS battery bus and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_CURRENT(float* curr_ptr){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 2; //battery current command
 80014cc:	2302      	movs	r3, #2
 80014ce:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80014d0:	f107 0208 	add.w	r2, r7, #8
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fdab 	bl	8002034 <EPS_READ>
 80014de:	4603      	mov	r3, r0
 80014e0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <READ_EPS_BATTERY_CURRENT+0x2c>
        return status;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	e014      	b.n	8001516 <READ_EPS_BATTERY_CURRENT+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80014ec:	7a3b      	ldrb	r3, [r7, #8]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	7a7b      	ldrb	r3, [r7, #9]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	4413      	add	r3, r2
 80014fa:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0030517578f * (float) raw_value; //multiply by the conversion coeff
 80014fc:	89bb      	ldrh	r3, [r7, #12]
 80014fe:	ee07 3a90 	vmov	s15, r3
 8001502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001506:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001520 <READ_EPS_BATTERY_CURRENT+0x60>
 800150a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0030517578f * 4095 = 12.497 A
    return status;
 8001514:	7bfb      	ldrb	r3, [r7, #15]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	3b480000 	.word	0x3b480000

08001524 <READ_EPS_SOLAR_X_VOLTAGE>:
/**
  * @brief Reads the voltage of the X-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_VOLTAGE(float* volt_ptr){
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 5; //solar panel x-axis voltage command
 8001530:	2305      	movs	r3, #5
 8001532:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001534:	f107 0208 	add.w	r2, r7, #8
 8001538:	7bbb      	ldrb	r3, [r7, #14]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f000 fd79 	bl	8002034 <EPS_READ>
 8001542:	4603      	mov	r3, r0
 8001544:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <READ_EPS_SOLAR_X_VOLTAGE+0x2c>
        return status;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	e014      	b.n	800157a <READ_EPS_SOLAR_X_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001550:	7a3b      	ldrb	r3, [r7, #8]
 8001552:	b29b      	uxth	r3, r3
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b29a      	uxth	r2, r3
 8001558:	7a7b      	ldrb	r3, [r7, #9]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 8001560:	89bb      	ldrh	r3, [r7, #12]
 8001562:	ee07 3a90 	vmov	s15, r3
 8001566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800156a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001584 <READ_EPS_SOLAR_X_VOLTAGE+0x60>
 800156e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	3b200000 	.word	0x3b200000

08001588 <READ_EPS_SOLAR_X_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the X- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_NEG_CURRENT(float* curr_ptr){
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 6; //solar panel x- current command
 8001594:	2306      	movs	r3, #6
 8001596:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001598:	f107 0208 	add.w	r2, r7, #8
 800159c:	7bbb      	ldrb	r3, [r7, #14]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fd47 	bl	8002034 <EPS_READ>
 80015a6:	4603      	mov	r3, r0
 80015a8:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <READ_EPS_SOLAR_X_NEG_CURRENT+0x2c>
        return status;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	e014      	b.n	80015de <READ_EPS_SOLAR_X_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80015b4:	7a3b      	ldrb	r3, [r7, #8]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	7a7b      	ldrb	r3, [r7, #9]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	4413      	add	r3, r2
 80015c2:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 80015c4:	89bb      	ldrh	r3, [r7, #12]
 80015c6:	ee07 3a90 	vmov	s15, r3
 80015ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80015e8 <READ_EPS_SOLAR_X_NEG_CURRENT+0x60>
 80015d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	3a200001 	.word	0x3a200001

080015ec <READ_EPS_SOLAR_X_POS_CURRENT>:
/**
  * @brief Reads the voltage of the X+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_POS_CURRENT(float* curr_ptr){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 7; //solar panel x+ current command
 80015f8:	2307      	movs	r3, #7
 80015fa:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80015fc:	f107 0208 	add.w	r2, r7, #8
 8001600:	7bbb      	ldrb	r3, [r7, #14]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f000 fd15 	bl	8002034 <EPS_READ>
 800160a:	4603      	mov	r3, r0
 800160c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <READ_EPS_SOLAR_X_POS_CURRENT+0x2c>
        return status;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	e014      	b.n	8001642 <READ_EPS_SOLAR_X_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001618:	7a3b      	ldrb	r3, [r7, #8]
 800161a:	b29b      	uxth	r3, r3
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	b29a      	uxth	r2, r3
 8001620:	7a7b      	ldrb	r3, [r7, #9]
 8001622:	b29b      	uxth	r3, r3
 8001624:	4413      	add	r3, r2
 8001626:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001628:	89bb      	ldrh	r3, [r7, #12]
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001632:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800164c <READ_EPS_SOLAR_X_POS_CURRENT+0x60>
 8001636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	3a200001 	.word	0x3a200001

08001650 <READ_EPS_SOLAR_Y_VOLTAGE>:
/**
  * @brief Reads the voltage of the Y-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_VOLTAGE(float* volt_ptr){
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001658:	2301      	movs	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 8; //solar panel y-axis voltage command
 800165c:	2308      	movs	r3, #8
 800165e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001660:	f107 0208 	add.w	r2, r7, #8
 8001664:	7bbb      	ldrb	r3, [r7, #14]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fce3 	bl	8002034 <EPS_READ>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <READ_EPS_SOLAR_Y_VOLTAGE+0x2c>
        return status;
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	e014      	b.n	80016a6 <READ_EPS_SOLAR_Y_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800167c:	7a3b      	ldrb	r3, [r7, #8]
 800167e:	b29b      	uxth	r3, r3
 8001680:	021b      	lsls	r3, r3, #8
 8001682:	b29a      	uxth	r2, r3
 8001684:	7a7b      	ldrb	r3, [r7, #9]
 8001686:	b29b      	uxth	r3, r3
 8001688:	4413      	add	r3, r2
 800168a:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 800168c:	89bb      	ldrh	r3, [r7, #12]
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001696:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80016b0 <READ_EPS_SOLAR_Y_VOLTAGE+0x60>
 800169a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	3b200000 	.word	0x3b200000

080016b4 <READ_EPS_SOLAR_Y_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the Y- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_NEG_CURRENT(float* curr_ptr){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 9; //solar panel y- current command
 80016c0:	2309      	movs	r3, #9
 80016c2:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80016c4:	f107 0208 	add.w	r2, r7, #8
 80016c8:	7bbb      	ldrb	r3, [r7, #14]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 fcb1 	bl	8002034 <EPS_READ>
 80016d2:	4603      	mov	r3, r0
 80016d4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <READ_EPS_SOLAR_Y_NEG_CURRENT+0x2c>
        return status;
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	e014      	b.n	800170a <READ_EPS_SOLAR_Y_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80016e0:	7a3b      	ldrb	r3, [r7, #8]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	7a7b      	ldrb	r3, [r7, #9]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	4413      	add	r3, r2
 80016ee:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 80016f0:	89bb      	ldrh	r3, [r7, #12]
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016fa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001714 <READ_EPS_SOLAR_Y_NEG_CURRENT+0x60>
 80016fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	3a200001 	.word	0x3a200001

08001718 <READ_EPS_SOLAR_Y_POS_CURRENT>:
/**
  * @brief Reads the voltage of the Y+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_POS_CURRENT(float* curr_ptr){
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 10; //solar panel y+ current command
 8001724:	230a      	movs	r3, #10
 8001726:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001728:	f107 0208 	add.w	r2, r7, #8
 800172c:	7bbb      	ldrb	r3, [r7, #14]
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f000 fc7f 	bl	8002034 <EPS_READ>
 8001736:	4603      	mov	r3, r0
 8001738:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <READ_EPS_SOLAR_Y_POS_CURRENT+0x2c>
        return status;
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	e014      	b.n	800176e <READ_EPS_SOLAR_Y_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001744:	7a3b      	ldrb	r3, [r7, #8]
 8001746:	b29b      	uxth	r3, r3
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	b29a      	uxth	r2, r3
 800174c:	7a7b      	ldrb	r3, [r7, #9]
 800174e:	b29b      	uxth	r3, r3
 8001750:	4413      	add	r3, r2
 8001752:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001754:	89bb      	ldrh	r3, [r7, #12]
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800175e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001778 <READ_EPS_SOLAR_Y_POS_CURRENT+0x60>
 8001762:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	edc3 7a00 	vstr	s15, [r3]
    return status;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	3a200001 	.word	0x3a200001

0800177c <READ_EPS_SOLAR_Z_VOLTAGE>:
/**
  * @brief Reads the voltage of the Y-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_VOLTAGE(float* volt_ptr){
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 11; //solar panel z-axis voltage command
 8001788:	230b      	movs	r3, #11
 800178a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800178c:	f107 0208 	add.w	r2, r7, #8
 8001790:	7bbb      	ldrb	r3, [r7, #14]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f000 fc4d 	bl	8002034 <EPS_READ>
 800179a:	4603      	mov	r3, r0
 800179c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <READ_EPS_SOLAR_Z_VOLTAGE+0x2c>
        return status;
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	e014      	b.n	80017d2 <READ_EPS_SOLAR_Z_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80017a8:	7a3b      	ldrb	r3, [r7, #8]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	021b      	lsls	r3, r3, #8
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	7a7b      	ldrb	r3, [r7, #9]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 80017b8:	89bb      	ldrh	r3, [r7, #12]
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017c2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80017dc <READ_EPS_SOLAR_Z_VOLTAGE+0x60>
 80017c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	3b200000 	.word	0x3b200000

080017e0 <READ_EPS_SOLAR_Z_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the Z- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_NEG_CURRENT(float* curr_ptr){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 12; //solar panel z- current command
 80017ec:	230c      	movs	r3, #12
 80017ee:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80017f0:	f107 0208 	add.w	r2, r7, #8
 80017f4:	7bbb      	ldrb	r3, [r7, #14]
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 fc1b 	bl	8002034 <EPS_READ>
 80017fe:	4603      	mov	r3, r0
 8001800:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <READ_EPS_SOLAR_Z_NEG_CURRENT+0x2c>
        return status;
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	e014      	b.n	8001836 <READ_EPS_SOLAR_Z_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800180c:	7a3b      	ldrb	r3, [r7, #8]
 800180e:	b29b      	uxth	r3, r3
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	b29a      	uxth	r2, r3
 8001814:	7a7b      	ldrb	r3, [r7, #9]
 8001816:	b29b      	uxth	r3, r3
 8001818:	4413      	add	r3, r2
 800181a:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 800181c:	89bb      	ldrh	r3, [r7, #12]
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001826:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001840 <READ_EPS_SOLAR_Z_NEG_CURRENT+0x60>
 800182a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001834:	7bfb      	ldrb	r3, [r7, #15]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	3a200001 	.word	0x3a200001

08001844 <READ_EPS_SOLAR_Z_POS_CURRENT>:
/**
  * @brief Reads the voltage of the Z+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_POS_CURRENT(float* curr_ptr){
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 13; //solar panel z+ current command
 8001850:	230d      	movs	r3, #13
 8001852:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001854:	f107 0208 	add.w	r2, r7, #8
 8001858:	7bbb      	ldrb	r3, [r7, #14]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fbe9 	bl	8002034 <EPS_READ>
 8001862:	4603      	mov	r3, r0
 8001864:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <READ_EPS_SOLAR_Z_POS_CURRENT+0x2c>
        return status;
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	e014      	b.n	800189a <READ_EPS_SOLAR_Z_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001870:	7a3b      	ldrb	r3, [r7, #8]
 8001872:	b29b      	uxth	r3, r3
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	b29a      	uxth	r2, r3
 8001878:	7a7b      	ldrb	r3, [r7, #9]
 800187a:	b29b      	uxth	r3, r3
 800187c:	4413      	add	r3, r2
 800187e:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001880:	89bb      	ldrh	r3, [r7, #12]
 8001882:	ee07 3a90 	vmov	s15, r3
 8001886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800188a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80018a4 <READ_EPS_SOLAR_Z_POS_CURRENT+0x60>
 800188e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	3a200001 	.word	0x3a200001

080018a8 <READ_EPS_3V_CURRENT>:
/**
  * @brief Reads the current of the EPS 3.3v bus in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_3V_CURRENT(float* curr_ptr){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80018b0:	2301      	movs	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 14; //3.3v bus current command
 80018b4:	230e      	movs	r3, #14
 80018b6:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80018b8:	f107 0208 	add.w	r2, r7, #8
 80018bc:	7bbb      	ldrb	r3, [r7, #14]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fbb7 	bl	8002034 <EPS_READ>
 80018c6:	4603      	mov	r3, r0
 80018c8:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <READ_EPS_3V_CURRENT+0x2c>
        return status;
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	e014      	b.n	80018fe <READ_EPS_3V_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80018d4:	7a3b      	ldrb	r3, [r7, #8]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	b29a      	uxth	r2, r3
 80018dc:	7a7b      	ldrb	r3, [r7, #9]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0020345052f * (float) raw_current; //multiply by the conversion coeff
 80018e4:	89bb      	ldrh	r3, [r7, #12]
 80018e6:	ee07 3a90 	vmov	s15, r3
 80018ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ee:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001908 <READ_EPS_3V_CURRENT+0x60>
 80018f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	3b055555 	.word	0x3b055555

0800190c <READ_EPS_5V_CURRENT>:
/**
  * @brief Reads the current of the EPS 5v bus in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_5V_CURRENT(float* curr_ptr){
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 15; //5v bus current command
 8001918:	230f      	movs	r3, #15
 800191a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800191c:	f107 0208 	add.w	r2, r7, #8
 8001920:	7bbb      	ldrb	r3, [r7, #14]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fb85 	bl	8002034 <EPS_READ>
 800192a:	4603      	mov	r3, r0
 800192c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <READ_EPS_5V_CURRENT+0x2c>
        return status;
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	e014      	b.n	8001962 <READ_EPS_5V_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001938:	7a3b      	ldrb	r3, [r7, #8]
 800193a:	b29b      	uxth	r3, r3
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	b29a      	uxth	r2, r3
 8001940:	7a7b      	ldrb	r3, [r7, #9]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4413      	add	r3, r2
 8001946:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0020345052f * (float) raw_current; //multiply by the conversion coeff
 8001948:	89bb      	ldrh	r3, [r7, #12]
 800194a:	ee07 3a90 	vmov	s15, r3
 800194e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001952:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800196c <READ_EPS_5V_CURRENT+0x60>
 8001956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001960:	7bfb      	ldrb	r3, [r7, #15]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	3b055555 	.word	0x3b055555

08001970 <READ_EPS_MCU_TEMP>:
/**
  * @brief Reads the temperature of the EPS microcontroller in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_MCU_TEMP(float* temp_ptr){
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001978:	2301      	movs	r3, #1
 800197a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 18; //MCU temperature command
 800197c:	2312      	movs	r3, #18
 800197e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001980:	f107 0208 	add.w	r2, r7, #8
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fb53 	bl	8002034 <EPS_READ>
 800198e:	4603      	mov	r3, r0
 8001990:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <READ_EPS_MCU_TEMP+0x2c>
        return status;
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	e01c      	b.n	80019d6 <READ_EPS_MCU_TEMP+0x66>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800199c:	7a3b      	ldrb	r3, [r7, #8]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	7a7b      	ldrb	r3, [r7, #9]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = (((float) raw_value * 0.0006103516f) - 0.986f) / 0.00355f;
 80019ac:	89bb      	ldrh	r3, [r7, #12]
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019b6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80019e0 <READ_EPS_MCU_TEMP+0x70>
 80019ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019be:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80019e4 <READ_EPS_MCU_TEMP+0x74>
 80019c2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019c6:	eddf 6a08 	vldr	s13, [pc, #32]	; 80019e8 <READ_EPS_MCU_TEMP+0x78>
 80019ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	3a200001 	.word	0x3a200001
 80019e4:	3f7c6a7f 	.word	0x3f7c6a7f
 80019e8:	3b68a71e 	.word	0x3b68a71e

080019ec <READ_EPS_BATT_1_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 1 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_1_TEMP(float* temp_ptr){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80019f4:	2301      	movs	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 19; //battery cell 1 temperature command
 80019f8:	2313      	movs	r3, #19
 80019fa:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80019fc:	f107 0208 	add.w	r2, r7, #8
 8001a00:	7bbb      	ldrb	r3, [r7, #14]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fb15 	bl	8002034 <EPS_READ>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <READ_EPS_BATT_1_TEMP+0x2c>
        return status;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	e014      	b.n	8001a42 <READ_EPS_BATT_1_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001a18:	7a3b      	ldrb	r3, [r7, #8]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	7a7b      	ldrb	r3, [r7, #9]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8001a28:	89bb      	ldrh	r3, [r7, #12]
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a32:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001a4c <READ_EPS_BATT_1_TEMP+0x60>
 8001a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	3b800000 	.word	0x3b800000

08001a50 <READ_EPS_BATT_2_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 2 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_2_TEMP(float* temp_ptr){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 20; //battery cell 2 temperature command
 8001a5c:	2314      	movs	r3, #20
 8001a5e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001a60:	f107 0208 	add.w	r2, r7, #8
 8001a64:	7bbb      	ldrb	r3, [r7, #14]
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fae3 	bl	8002034 <EPS_READ>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <READ_EPS_BATT_2_TEMP+0x2c>
        return status;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	e014      	b.n	8001aa6 <READ_EPS_BATT_2_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001a7c:	7a3b      	ldrb	r3, [r7, #8]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	7a7b      	ldrb	r3, [r7, #9]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	4413      	add	r3, r2
 8001a8a:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8001a8c:	89bb      	ldrh	r3, [r7, #12]
 8001a8e:	ee07 3a90 	vmov	s15, r3
 8001a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a96:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001ab0 <READ_EPS_BATT_2_TEMP+0x60>
 8001a9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	3b800000 	.word	0x3b800000

08001ab4 <READ_EPS_BATT_3_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 3 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_3_TEMP(float* temp_ptr){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001abc:	2301      	movs	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 21; //battery cell 3 temperature command
 8001ac0:	2315      	movs	r3, #21
 8001ac2:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001ac4:	f107 0208 	add.w	r2, r7, #8
 8001ac8:	7bbb      	ldrb	r3, [r7, #14]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 fab1 	bl	8002034 <EPS_READ>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <READ_EPS_BATT_3_TEMP+0x2c>
        return status;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	e014      	b.n	8001b0a <READ_EPS_BATT_3_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001ae0:	7a3b      	ldrb	r3, [r7, #8]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	7a7b      	ldrb	r3, [r7, #9]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8001af0:	89bb      	ldrh	r3, [r7, #12]
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001afa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001b14 <READ_EPS_BATT_3_TEMP+0x60>
 8001afe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	3b800000 	.word	0x3b800000

08001b18 <READ_EPS_BATT_4_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 4 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_4_TEMP(float* temp_ptr){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 22; //battery cell 4 temperature command
 8001b24:	2316      	movs	r3, #22
 8001b26:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001b28:	f107 0208 	add.w	r2, r7, #8
 8001b2c:	7bbb      	ldrb	r3, [r7, #14]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fa7f 	bl	8002034 <EPS_READ>
 8001b36:	4603      	mov	r3, r0
 8001b38:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <READ_EPS_BATT_4_TEMP+0x2c>
        return status;
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	e014      	b.n	8001b6e <READ_EPS_BATT_4_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001b44:	7a3b      	ldrb	r3, [r7, #8]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	7a7b      	ldrb	r3, [r7, #9]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8001b54:	89bb      	ldrh	r3, [r7, #12]
 8001b56:	ee07 3a90 	vmov	s15, r3
 8001b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b5e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001b78 <READ_EPS_BATT_4_TEMP+0x60>
 8001b62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	3b800000 	.word	0x3b800000

08001b7c <READ_EPS_INPUT_CONDITION>:
/**
  * @brief Reads raw return value of the Input Condition command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_INPUT_CONDITION(uint16_t *cond_ptr){
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 23; //input conditions command
 8001b88:	2317      	movs	r3, #23
 8001b8a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001b8c:	f107 020c 	add.w	r2, r7, #12
 8001b90:	7bbb      	ldrb	r3, [r7, #14]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 fa4d 	bl	8002034 <EPS_READ>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <READ_EPS_INPUT_CONDITION+0x2c>
        return status;
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	e00a      	b.n	8001bbe <READ_EPS_INPUT_CONDITION+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001ba8:	7b3b      	ldrb	r3, [r7, #12]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	7b7b      	ldrb	r3, [r7, #13]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	801a      	strh	r2, [r3, #0]
    return status;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <READ_EPS_OUTPUT_CONDITION1>:
/**
  * @brief Reads raw return value of the Output Condition 1 command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OUTPUT_CONDITION1(uint16_t *cond_ptr){
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 24; //output conditions command
 8001bd2:	2318      	movs	r3, #24
 8001bd4:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001bd6:	f107 020c 	add.w	r2, r7, #12
 8001bda:	7bbb      	ldrb	r3, [r7, #14]
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fa28 	bl	8002034 <EPS_READ>
 8001be4:	4603      	mov	r3, r0
 8001be6:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <READ_EPS_OUTPUT_CONDITION1+0x2c>
        return status;
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	e00a      	b.n	8001c08 <READ_EPS_OUTPUT_CONDITION1+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001bf2:	7b3b      	ldrb	r3, [r7, #12]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	7b7b      	ldrb	r3, [r7, #13]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	801a      	strh	r2, [r3, #0]
    return status;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <READ_EPS_OUTPUT_CONDITION2>:
/**
  * @brief Reads raw return value of the Output Condition 2 command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OUTPUT_CONDITION2(uint16_t *cond_ptr){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 24; //output conditions command
 8001c1c:	2318      	movs	r3, #24
 8001c1e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001c20:	f107 020c 	add.w	r2, r7, #12
 8001c24:	7bbb      	ldrb	r3, [r7, #14]
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 fa03 	bl	8002034 <EPS_READ>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <READ_EPS_OUTPUT_CONDITION2+0x2c>
        return status;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	e00a      	b.n	8001c52 <READ_EPS_OUTPUT_CONDITION2+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001c3c:	7b3b      	ldrb	r3, [r7, #12]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	7b7b      	ldrb	r3, [r7, #13]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	801a      	strh	r2, [r3, #0]
    return status;
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <READ_EPS_POWER_ON_CYCLES>:
/**
  * @brief Reads the current count of EPS power cycles and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_POWER_ON_CYCLES(uint16_t *count_ptr){
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001c62:	2301      	movs	r3, #1
 8001c64:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 26; //power on cycles count command
 8001c66:	231a      	movs	r3, #26
 8001c68:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001c6a:	f107 020c 	add.w	r2, r7, #12
 8001c6e:	7bbb      	ldrb	r3, [r7, #14]
 8001c70:	4611      	mov	r1, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f9de 	bl	8002034 <EPS_READ>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <READ_EPS_POWER_ON_CYCLES+0x2c>
        return status;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	e00a      	b.n	8001c9c <READ_EPS_POWER_ON_CYCLES+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001c86:	7b3b      	ldrb	r3, [r7, #12]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	7b7b      	ldrb	r3, [r7, #13]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	801a      	strh	r2, [r3, #0]
    return status;
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <READ_EPS_UNDER_VOLT_COUNT>:
/**
  * @brief Reads the current count of EPS under-voltage occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_UNDER_VOLT_COUNT(uint16_t *count_ptr){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 27; //under voltage count command
 8001cb0:	231b      	movs	r3, #27
 8001cb2:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001cb4:	f107 020c 	add.w	r2, r7, #12
 8001cb8:	7bbb      	ldrb	r3, [r7, #14]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 f9b9 	bl	8002034 <EPS_READ>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <READ_EPS_UNDER_VOLT_COUNT+0x2c>
        return status;
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	e00a      	b.n	8001ce6 <READ_EPS_UNDER_VOLT_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001cd0:	7b3b      	ldrb	r3, [r7, #12]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	7b7b      	ldrb	r3, [r7, #13]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	801a      	strh	r2, [r3, #0]
    return status;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <READ_EPS_SHORT_CIRCUIT_COUNT>:
/**
  * @brief Reads the current count of EPS short-circuit occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SHORT_CIRCUIT_COUNT(uint16_t *count_ptr){
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 28; //short circuit count command
 8001cfa:	231c      	movs	r3, #28
 8001cfc:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001cfe:	f107 020c 	add.w	r2, r7, #12
 8001d02:	7bbb      	ldrb	r3, [r7, #14]
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f994 	bl	8002034 <EPS_READ>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <READ_EPS_SHORT_CIRCUIT_COUNT+0x2c>
        return status;
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	e00a      	b.n	8001d30 <READ_EPS_SHORT_CIRCUIT_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001d1a:	7b3b      	ldrb	r3, [r7, #12]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	7b7b      	ldrb	r3, [r7, #13]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	801a      	strh	r2, [r3, #0]
    return status;
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <READ_EPS_OVER_TEMP_COUNT>:
/**
  * @brief Reads the current count of EPS over-temp occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OVER_TEMP_COUNT(uint16_t *count_ptr){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 29; //over temperature count command
 8001d44:	231d      	movs	r3, #29
 8001d46:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001d48:	f107 020c 	add.w	r2, r7, #12
 8001d4c:	7bbb      	ldrb	r3, [r7, #14]
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 f96f 	bl	8002034 <EPS_READ>
 8001d56:	4603      	mov	r3, r0
 8001d58:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <READ_EPS_OVER_TEMP_COUNT+0x2c>
        return status;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	e00a      	b.n	8001d7a <READ_EPS_OVER_TEMP_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001d64:	7b3b      	ldrb	r3, [r7, #12]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	021b      	lsls	r3, r3, #8
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	7b7b      	ldrb	r3, [r7, #13]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	801a      	strh	r2, [r3, #0]
    return status;
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <READ_EPS_CHARGE_CYCLES>:
/**
  * @brief Reads the current count of EPS battery charge cycles and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_CHARGE_CYCLES(uint16_t *count_ptr){
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 48; //charging cycles count command
 8001d8e:	2330      	movs	r3, #48	; 0x30
 8001d90:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001d92:	f107 020c 	add.w	r2, r7, #12
 8001d96:	7bbb      	ldrb	r3, [r7, #14]
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f94a 	bl	8002034 <EPS_READ>
 8001da0:	4603      	mov	r3, r0
 8001da2:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <READ_EPS_CHARGE_CYCLES+0x2c>
        return status;
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	e00a      	b.n	8001dc4 <READ_EPS_CHARGE_CYCLES+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001dae:	7b3b      	ldrb	r3, [r7, #12]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	021b      	lsls	r3, r3, #8
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	7b7b      	ldrb	r3, [r7, #13]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	4413      	add	r3, r2
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	801a      	strh	r2, [r3, #0]
    return status;
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <READ_EPS_DEFAULTS1>:
/**
  * @brief Reads the default values of LUPs and fast charge modes and stores the value in the pointed to address
  * @param default_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_DEFAULTS1(uint16_t *default_ptr){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 43; //output 1 default value command
 8001dd8:	232b      	movs	r3, #43	; 0x2b
 8001dda:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001ddc:	f107 020c 	add.w	r2, r7, #12
 8001de0:	7bbb      	ldrb	r3, [r7, #14]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 f925 	bl	8002034 <EPS_READ>
 8001dea:	4603      	mov	r3, r0
 8001dec:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <READ_EPS_DEFAULTS1+0x2c>
        return status;
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	e00a      	b.n	8001e0e <READ_EPS_DEFAULTS1+0x42>
    }
    (*default_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001df8:	7b3b      	ldrb	r3, [r7, #12]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	7b7b      	ldrb	r3, [r7, #13]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	801a      	strh	r2, [r3, #0]
    return status;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <READ_EPS_DEFAULTS2>:
/**
  * @brief Reads the default values of OUT1-OUT6 and stores the value in the pointed to address
  * @param default_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_DEFAULTS2(uint16_t *default_ptr){
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001e1e:	2301      	movs	r3, #1
 8001e20:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 44; //output 3 default value command
 8001e22:	232c      	movs	r3, #44	; 0x2c
 8001e24:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001e26:	f107 020c 	add.w	r2, r7, #12
 8001e2a:	7bbb      	ldrb	r3, [r7, #14]
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f900 	bl	8002034 <EPS_READ>
 8001e34:	4603      	mov	r3, r0
 8001e36:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <READ_EPS_DEFAULTS2+0x2c>
        return status;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	e00a      	b.n	8001e58 <READ_EPS_DEFAULTS2+0x42>
    }
    (*default_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001e42:	7b3b      	ldrb	r3, [r7, #12]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	7b7b      	ldrb	r3, [r7, #13]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	801a      	strh	r2, [r3, #0]
    return status;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <enable_EPS_Vbatt_Bus>:


/********************************************** WRITE FUNCTIONS **********************************************************************************/
HAL_StatusTypeDef enable_EPS_Vbatt_Bus(){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
    return EPS_WRITE(1, 1); //turn command 1 to the ON state
 8001e64:	2101      	movs	r1, #1
 8001e66:	2001      	movs	r0, #1
 8001e68:	f000 f948 	bl	80020fc <EPS_WRITE>
 8001e6c:	4603      	mov	r3, r0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <disable_EPS_Vbatt_Bus>:

HAL_StatusTypeDef disable_EPS_Vbatt_Bus(){
 8001e72:	b580      	push	{r7, lr}
 8001e74:	af00      	add	r7, sp, #0
    return EPS_WRITE(1, 2); //turn command 1 to the FORCE OFF state
 8001e76:	2102      	movs	r1, #2
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f000 f93f 	bl	80020fc <EPS_WRITE>
 8001e7e:	4603      	mov	r3, r0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <enable_EPS_5v_Bus>:

HAL_StatusTypeDef disable_EPS_BCR_Bus(){
    return EPS_WRITE(2, 0); //turn command 2 to the OFF state
}

HAL_StatusTypeDef enable_EPS_5v_Bus(){
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
    return EPS_WRITE(4, 1); //turn command 4 to the ON state
 8001e88:	2101      	movs	r1, #1
 8001e8a:	2004      	movs	r0, #4
 8001e8c:	f000 f936 	bl	80020fc <EPS_WRITE>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <disable_EPS_5v_Bus>:

HAL_StatusTypeDef disable_EPS_5v_Bus(){
 8001e96:	b580      	push	{r7, lr}
 8001e98:	af00      	add	r7, sp, #0
    return EPS_WRITE(4, 2); //turn command 4 to the FORCE OFF state
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	2004      	movs	r0, #4
 8001e9e:	f000 f92d 	bl	80020fc <EPS_WRITE>
 8001ea2:	4603      	mov	r3, r0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <enable_EPS_LUP_3v>:

HAL_StatusTypeDef enable_EPS_LUP_3v(){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
    return EPS_WRITE(5, 0); //turn command 5 to the ON state
 8001eac:	2100      	movs	r1, #0
 8001eae:	2005      	movs	r0, #5
 8001eb0:	f000 f924 	bl	80020fc <EPS_WRITE>
 8001eb4:	4603      	mov	r3, r0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <enable_EPS_LUP_5v>:

HAL_StatusTypeDef disable_EPS_LUP_3v(){
    return EPS_WRITE(5, 1); //turn command 5 to the OFF state
}

HAL_StatusTypeDef enable_EPS_LUP_5v(){
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	af00      	add	r7, sp, #0
    return EPS_WRITE(6, 0); //turn command 6 to the ON state
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2006      	movs	r0, #6
 8001ec2:	f000 f91b 	bl	80020fc <EPS_WRITE>
 8001ec6:	4603      	mov	r3, r0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <enable_EPS_Fast_Charge1>:

HAL_StatusTypeDef disable_EPS_LUP_5v(){
    return EPS_WRITE(6, 1); //turn command 6 to the OFF state
}

HAL_StatusTypeDef enable_EPS_Fast_Charge1(){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
    return EPS_WRITE(8, 1); //turn command 8 to the ON state (HIGH = Fast?, LOW = Slow?)
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	2008      	movs	r0, #8
 8001ed4:	f000 f912 	bl	80020fc <EPS_WRITE>
 8001ed8:	4603      	mov	r3, r0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	bd80      	pop	{r7, pc}

08001ede <disable_EPS_Fast_Charge1>:

HAL_StatusTypeDef disable_EPS_Fast_Charge1(){
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	af00      	add	r7, sp, #0
    return EPS_WRITE(8, 0); //turn command 8 to the ON state (HIGH = Fast?, LOW = Slow?)
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2008      	movs	r0, #8
 8001ee6:	f000 f909 	bl	80020fc <EPS_WRITE>
 8001eea:	4603      	mov	r3, r0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <enable_EPS_Fast_Charge2>:

HAL_StatusTypeDef enable_EPS_Fast_Charge2(){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
    return EPS_WRITE(9, 1); //turn command 9 to the ON state (HIGH = Fast?, LOW = Slow?)
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	2009      	movs	r0, #9
 8001ef8:	f000 f900 	bl	80020fc <EPS_WRITE>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <disable_EPS_Fast_Charge2>:

HAL_StatusTypeDef disable_EPS_Fast_Charge2(){
 8001f02:	b580      	push	{r7, lr}
 8001f04:	af00      	add	r7, sp, #0
    return EPS_WRITE(9, 0); //turn command 9 to the OFF state (HIGH = Fast?, LOW = Slow?)
 8001f06:	2100      	movs	r1, #0
 8001f08:	2009      	movs	r0, #9
 8001f0a:	f000 f8f7 	bl	80020fc <EPS_WRITE>
 8001f0e:	4603      	mov	r3, r0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <enable_Boost_Board>:

HAL_StatusTypeDef enable_Boost_Board(){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
    return EPS_WRITE(10, 1); //turn command 10 to the ON state
 8001f18:	2101      	movs	r1, #1
 8001f1a:	200a      	movs	r0, #10
 8001f1c:	f000 f8ee 	bl	80020fc <EPS_WRITE>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <disable_Boost_Board>:

HAL_StatusTypeDef disable_Boost_Board(){
 8001f26:	b580      	push	{r7, lr}
 8001f28:	af00      	add	r7, sp, #0
    return EPS_WRITE(10, 0); //turn command 10 to the OFF state
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	200a      	movs	r0, #10
 8001f2e:	f000 f8e5 	bl	80020fc <EPS_WRITE>
 8001f32:	4603      	mov	r3, r0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <enable_Payload>:

HAL_StatusTypeDef enable_Payload(){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
    return EPS_WRITE(11, 1); //turn command 11 to the ON state
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	200b      	movs	r0, #11
 8001f40:	f000 f8dc 	bl	80020fc <EPS_WRITE>
 8001f44:	4603      	mov	r3, r0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <disable_Payload>:

HAL_StatusTypeDef disable_Payload(){
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	af00      	add	r7, sp, #0
    return EPS_WRITE(11, 0); //turn command 11 to the OFF state
 8001f4e:	2100      	movs	r1, #0
 8001f50:	200b      	movs	r0, #11
 8001f52:	f000 f8d3 	bl	80020fc <EPS_WRITE>
 8001f56:	4603      	mov	r3, r0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <enable_EPS_Output_3>:

HAL_StatusTypeDef enable_EPS_Output_3(){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
    return EPS_WRITE(12, 1); //turn command 12 to the ON state
 8001f60:	2101      	movs	r1, #1
 8001f62:	200c      	movs	r0, #12
 8001f64:	f000 f8ca 	bl	80020fc <EPS_WRITE>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <disable_EPS_Output_3>:

HAL_StatusTypeDef disable_EPS_Output_3(){
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	af00      	add	r7, sp, #0
    return EPS_WRITE(12, 0); //turn command 12 to the OFF state
 8001f72:	2100      	movs	r1, #0
 8001f74:	200c      	movs	r0, #12
 8001f76:	f000 f8c1 	bl	80020fc <EPS_WRITE>
 8001f7a:	4603      	mov	r3, r0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <enable_UHF>:

HAL_StatusTypeDef enable_UHF(){
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
    return EPS_WRITE(14, 1); //turn command 14 to the ON state
 8001f84:	2101      	movs	r1, #1
 8001f86:	200e      	movs	r0, #14
 8001f88:	f000 f8b8 	bl	80020fc <EPS_WRITE>
 8001f8c:	4603      	mov	r3, r0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <disable_UHF>:

HAL_StatusTypeDef disable_UHF(){
 8001f92:	b580      	push	{r7, lr}
 8001f94:	af00      	add	r7, sp, #0
//    osThreadTerminate(myUHFTask);
//    osThreadDef(myUHFTask, UHF_Task, osPriorityNormal, 0, 512);
//    osThreadCreate(osThread(myUHFTask), NULL);
    return EPS_WRITE(14, 0); //turn command 14 to the OFF state
 8001f96:	2100      	movs	r1, #0
 8001f98:	200e      	movs	r0, #14
 8001f9a:	f000 f8af 	bl	80020fc <EPS_WRITE>
 8001f9e:	4603      	mov	r3, r0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <enable_EPS_Output_6>:

HAL_StatusTypeDef enable_EPS_Output_6(){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
    return EPS_WRITE(15, 1); //turn command 15 to the ON state
 8001fa8:	2101      	movs	r1, #1
 8001faa:	200f      	movs	r0, #15
 8001fac:	f000 f8a6 	bl	80020fc <EPS_WRITE>
 8001fb0:	4603      	mov	r3, r0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <disable_EPS_Output_6>:

HAL_StatusTypeDef disable_EPS_Output_6(){
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	af00      	add	r7, sp, #0
    return EPS_WRITE(15, 0); //turn command 15 to the OFF state
 8001fba:	2100      	movs	r1, #0
 8001fbc:	200f      	movs	r0, #15
 8001fbe:	f000 f89d 	bl	80020fc <EPS_WRITE>
 8001fc2:	4603      	mov	r3, r0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <enable_EPS_Batt_Heater_1>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_1(){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
    return EPS_WRITE(16, 1); //turn command 16 to the ON state
 8001fcc:	2101      	movs	r1, #1
 8001fce:	2010      	movs	r0, #16
 8001fd0:	f000 f894 	bl	80020fc <EPS_WRITE>
 8001fd4:	4603      	mov	r3, r0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <disable_EPS_Batt_Heater_1>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_1(){
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	af00      	add	r7, sp, #0
    return EPS_WRITE(16, 0); //turn command 16 to the OFF state
 8001fde:	2100      	movs	r1, #0
 8001fe0:	2010      	movs	r0, #16
 8001fe2:	f000 f88b 	bl	80020fc <EPS_WRITE>
 8001fe6:	4603      	mov	r3, r0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	bd80      	pop	{r7, pc}

08001fec <enable_EPS_Batt_Heater_2>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_2(){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
    return EPS_WRITE(17, 1); //turn command 17 to the ON state
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	2011      	movs	r0, #17
 8001ff4:	f000 f882 	bl	80020fc <EPS_WRITE>
 8001ff8:	4603      	mov	r3, r0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <disable_EPS_Batt_Heater_2>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_2(){
 8001ffe:	b580      	push	{r7, lr}
 8002000:	af00      	add	r7, sp, #0
    return EPS_WRITE(17, 0); //turn command 17 to the OFF state
 8002002:	2100      	movs	r1, #0
 8002004:	2011      	movs	r0, #17
 8002006:	f000 f879 	bl	80020fc <EPS_WRITE>
 800200a:	4603      	mov	r3, r0
}
 800200c:	4618      	mov	r0, r3
 800200e:	bd80      	pop	{r7, pc}

08002010 <enable_EPS_Batt_Heater_3>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_3(){
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
    return EPS_WRITE(18, 1); //turn command 18 to the ON state
 8002014:	2101      	movs	r1, #1
 8002016:	2012      	movs	r0, #18
 8002018:	f000 f870 	bl	80020fc <EPS_WRITE>
 800201c:	4603      	mov	r3, r0
}
 800201e:	4618      	mov	r0, r3
 8002020:	bd80      	pop	{r7, pc}

08002022 <disable_EPS_Batt_Heater_3>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_3(){
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0
    return EPS_WRITE(18, 0); //turn command 18 to the OFF state
 8002026:	2100      	movs	r1, #0
 8002028:	2012      	movs	r0, #18
 800202a:	f000 f867 	bl	80020fc <EPS_WRITE>
 800202e:	4603      	mov	r3, r0
}
 8002030:	4618      	mov	r0, r3
 8002032:	bd80      	pop	{r7, pc}

08002034 <EPS_READ>:
  * @brief Sends a write command to the EPS module over a given I2C instance and reads back a response
  * @param command : the command to be used on the transceiver
  * @param data_ptr : A pointer to allow information from the health check to be viewed.
  * @retval Returns if the hal function call succeeded, or if it failed
  */
HAL_StatusTypeDef EPS_READ(uint8_t command, uint8_t* data_ptr){
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af02      	add	r7, sp, #8
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
    osMutexWait(EPS_I2C_Mutex, 2500);
 8002040:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <EPS_READ+0xb8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8002048:	4618      	mov	r0, r3
 800204a:	f008 fc23 	bl	800a894 <osMutexWait>

    HAL_StatusTypeDef status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
    status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), &command, 1, EPS_I2C_TIMEOUT);
 8002052:	1dfa      	adds	r2, r7, #7
 8002054:	2364      	movs	r3, #100	; 0x64
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2301      	movs	r3, #1
 800205a:	2130      	movs	r1, #48	; 0x30
 800205c:	4824      	ldr	r0, [pc, #144]	; (80020f0 <EPS_READ+0xbc>)
 800205e:	f002 fc5b 	bl	8004918 <HAL_I2C_Master_Transmit>
 8002062:	4603      	mov	r3, r0
 8002064:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d017      	beq.n	800209c <EPS_READ+0x68>
        osMutexWait(Num_I2C_Errors_Mutex, 500);
 800206c:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <EPS_READ+0xc0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002074:	4618      	mov	r0, r3
 8002076:	f008 fc0d 	bl	800a894 <osMutexWait>
        NUM_I2C_ERRORS++;
 800207a:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <EPS_READ+0xc4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	4a1d      	ldr	r2, [pc, #116]	; (80020f8 <EPS_READ+0xc4>)
 8002082:	6013      	str	r3, [r2, #0]
        osMutexRelease(Num_I2C_Errors_Mutex);
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <EPS_READ+0xc0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f008 fc53 	bl	800a934 <osMutexRelease>
        osMutexRelease(EPS_I2C_Mutex);
 800208e:	4b17      	ldr	r3, [pc, #92]	; (80020ec <EPS_READ+0xb8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f008 fc4e 	bl	800a934 <osMutexRelease>
        return status;
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	e023      	b.n	80020e4 <EPS_READ+0xb0>
    }
    status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), data_ptr, 2, EPS_I2C_TIMEOUT);
 800209c:	2364      	movs	r3, #100	; 0x64
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	2302      	movs	r3, #2
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	2130      	movs	r1, #48	; 0x30
 80020a6:	4812      	ldr	r0, [pc, #72]	; (80020f0 <EPS_READ+0xbc>)
 80020a8:	f002 fd44 	bl	8004b34 <HAL_I2C_Master_Receive>
 80020ac:	4603      	mov	r3, r0
 80020ae:	73fb      	strb	r3, [r7, #15]

    if(status != HAL_OK){
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d010      	beq.n	80020d8 <EPS_READ+0xa4>
        osMutexWait(Num_I2C_Errors_Mutex, 500);
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <EPS_READ+0xc0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80020be:	4618      	mov	r0, r3
 80020c0:	f008 fbe8 	bl	800a894 <osMutexWait>
        NUM_I2C_ERRORS++;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <EPS_READ+0xc4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <EPS_READ+0xc4>)
 80020cc:	6013      	str	r3, [r2, #0]
        osMutexRelease(Num_I2C_Errors_Mutex);
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <EPS_READ+0xc0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f008 fc2e 	bl	800a934 <osMutexRelease>
    }

    osMutexRelease(EPS_I2C_Mutex);
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <EPS_READ+0xb8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f008 fc29 	bl	800a934 <osMutexRelease>
    return status;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000228 	.word	0x20000228
 80020f0:	200002a0 	.word	0x200002a0
 80020f4:	20000230 	.word	0x20000230
 80020f8:	20000208 	.word	0x20000208

080020fc <EPS_WRITE>:
/**
  * @brief Sends a write command to the EPS module over a given I2C instance
  * @param state: the state to set the output specified by the command to (0 or 1)
  * @retval Returns if the hal function call succeeded, or if it failed
  */
HAL_StatusTypeDef EPS_WRITE(uint8_t command, uint8_t state){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af02      	add	r7, sp, #8
 8002102:	4603      	mov	r3, r0
 8002104:	460a      	mov	r2, r1
 8002106:	71fb      	strb	r3, [r7, #7]
 8002108:	4613      	mov	r3, r2
 800210a:	71bb      	strb	r3, [r7, #6]
    osMutexWait(EPS_I2C_Mutex, 1500);
 800210c:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <EPS_WRITE+0x7c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8002114:	4618      	mov	r0, r3
 8002116:	f008 fbbd 	bl	800a894 <osMutexWait>

    HAL_StatusTypeDef status = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2];
    data[0] = command;
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	733b      	strb	r3, [r7, #12]
    data[1] = state;
 8002122:	79bb      	ldrb	r3, [r7, #6]
 8002124:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Master_Transmit(&hi2c1, (EPS_I2C_ADDRESS << 0x1), data, 2, EPS_I2C_TIMEOUT); //Possibly size needs to be 3, and data should maybe be replaced with data buffer
 8002126:	f107 020c 	add.w	r2, r7, #12
 800212a:	2364      	movs	r3, #100	; 0x64
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2302      	movs	r3, #2
 8002130:	2130      	movs	r1, #48	; 0x30
 8002132:	4812      	ldr	r0, [pc, #72]	; (800217c <EPS_WRITE+0x80>)
 8002134:	f002 fbf0 	bl	8004918 <HAL_I2C_Master_Transmit>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]

    if(status != HAL_OK){
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d010      	beq.n	8002164 <EPS_WRITE+0x68>
        osMutexWait(Num_I2C_Errors_Mutex, 500);
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <EPS_WRITE+0x84>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800214a:	4618      	mov	r0, r3
 800214c:	f008 fba2 	bl	800a894 <osMutexWait>
        NUM_I2C_ERRORS++;
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <EPS_WRITE+0x88>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <EPS_WRITE+0x88>)
 8002158:	6013      	str	r3, [r2, #0]
        osMutexRelease(Num_I2C_Errors_Mutex);
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <EPS_WRITE+0x84>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f008 fbe8 	bl	800a934 <osMutexRelease>
        }


    }

    osMutexRelease(EPS_I2C_Mutex);
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <EPS_WRITE+0x7c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f008 fbe3 	bl	800a934 <osMutexRelease>
    return status;
 800216e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000228 	.word	0x20000228
 800217c:	200002a0 	.word	0x200002a0
 8002180:	20000230 	.word	0x20000230
 8002184:	20000208 	.word	0x20000208

08002188 <sendErrorPacket>:
/**
 * @brief This function sends an error packet to the Ground Station
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
int sendErrorPacket(){
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
    CySat_Packet_t cySatPacket;
    cySatPacket.Subsystem_Type = OBC_SUBSYSTEM_TYPE;
 800218e:	230a      	movs	r3, #10
 8002190:	713b      	strb	r3, [r7, #4]
    cySatPacket.Command = 0xFF;
 8002192:	23ff      	movs	r3, #255	; 0xff
 8002194:	717b      	strb	r3, [r7, #5]
    cySatPacket.Data_Length = 0x02;
 8002196:	2302      	movs	r3, #2
 8002198:	71bb      	strb	r3, [r7, #6]
    cySatPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 2);
 800219a:	2002      	movs	r0, #2
 800219c:	f00b f94a 	bl	800d434 <malloc>
 80021a0:	4603      	mov	r3, r0
 80021a2:	60bb      	str	r3, [r7, #8]
    cySatPacket.Data[0] = 0xFF;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	22ff      	movs	r2, #255	; 0xff
 80021a8:	701a      	strb	r2, [r3, #0]
    cySatPacket.Data[1] = 0xFF;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	3301      	adds	r3, #1
 80021ae:	22ff      	movs	r2, #255	; 0xff
 80021b0:	701a      	strb	r2, [r3, #0]
    cySatPacket.Checksum = generateCySatChecksum(cySatPacket);
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021b8:	f7ff f8de 	bl	8001378 <generateCySatChecksum>
 80021bc:	4603      	mov	r3, r0
 80021be:	733b      	strb	r3, [r7, #12]
    return sendCySatPacket(cySatPacket);
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021c6:	f7ff f857 	bl	8001278 <sendCySatPacket>
 80021ca:	4603      	mov	r3, r0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <handleCySatPacket>:
/**
 * @brief This function takes in a newly received CySat Packet and acts upon the command within
 * @param packet: the packet to handle
 * @retval A zero indicates success, -1 means the command or subtype is unrecognized, else means failure
 */
int handleCySatPacket(CySat_Packet_t packet){
 80021d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d6:	b0b9      	sub	sp, #228	; 0xe4
 80021d8:	af00      	add	r7, sp, #0
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    HAL_StatusTypeDef status;
    CySat_Packet_t outgoingPacket;
    switch(packet.Subsystem_Type){
 80021e0:	793b      	ldrb	r3, [r7, #4]
 80021e2:	2b28      	cmp	r3, #40	; 0x28
 80021e4:	dc48      	bgt.n	8002278 <handleCySatPacket+0xa4>
 80021e6:	2b0a      	cmp	r3, #10
 80021e8:	f2c1 805c 	blt.w	80032a4 <handleCySatPacket+0x10d0>
 80021ec:	3b0a      	subs	r3, #10
 80021ee:	2b1e      	cmp	r3, #30
 80021f0:	f201 8058 	bhi.w	80032a4 <handleCySatPacket+0x10d0>
 80021f4:	a201      	add	r2, pc, #4	; (adr r2, 80021fc <handleCySatPacket+0x28>)
 80021f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fa:	bf00      	nop
 80021fc:	08002283 	.word	0x08002283
 8002200:	080032a5 	.word	0x080032a5
 8002204:	080032a5 	.word	0x080032a5
 8002208:	080032a5 	.word	0x080032a5
 800220c:	080032a5 	.word	0x080032a5
 8002210:	080032a5 	.word	0x080032a5
 8002214:	080032a5 	.word	0x080032a5
 8002218:	080032a5 	.word	0x080032a5
 800221c:	080032a5 	.word	0x080032a5
 8002220:	080032a5 	.word	0x080032a5
 8002224:	080032ab 	.word	0x080032ab
 8002228:	080032a5 	.word	0x080032a5
 800222c:	080032a5 	.word	0x080032a5
 8002230:	080032a5 	.word	0x080032a5
 8002234:	080032a5 	.word	0x080032a5
 8002238:	080032a5 	.word	0x080032a5
 800223c:	080032a5 	.word	0x080032a5
 8002240:	080032a5 	.word	0x080032a5
 8002244:	080032a5 	.word	0x080032a5
 8002248:	080032a5 	.word	0x080032a5
 800224c:	0800247f 	.word	0x0800247f
 8002250:	080032a5 	.word	0x080032a5
 8002254:	080032a5 	.word	0x080032a5
 8002258:	080032a5 	.word	0x080032a5
 800225c:	080032a5 	.word	0x080032a5
 8002260:	080032a5 	.word	0x080032a5
 8002264:	080032a5 	.word	0x080032a5
 8002268:	080032a5 	.word	0x080032a5
 800226c:	080032a5 	.word	0x080032a5
 8002270:	080032a5 	.word	0x080032a5
 8002274:	080032ab 	.word	0x080032ab
 8002278:	2b5a      	cmp	r3, #90	; 0x5a
 800227a:	f001 8018 	beq.w	80032ae <handleCySatPacket+0x10da>
 800227e:	f001 b811 	b.w	80032a4 <handleCySatPacket+0x10d0>
        case OBC_SUBSYSTEM_TYPE: //OBC
            switch(packet.Command){
 8002282:	797b      	ldrb	r3, [r7, #5]
 8002284:	3b01      	subs	r3, #1
 8002286:	2b0b      	cmp	r3, #11
 8002288:	f201 8013 	bhi.w	80032b2 <handleCySatPacket+0x10de>
 800228c:	a201      	add	r2, pc, #4	; (adr r2, 8002294 <handleCySatPacket+0xc0>)
 800228e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002292:	bf00      	nop
 8002294:	080022c5 	.word	0x080022c5
 8002298:	080032b3 	.word	0x080032b3
 800229c:	08002357 	.word	0x08002357
 80022a0:	080032b3 	.word	0x080032b3
 80022a4:	080023eb 	.word	0x080023eb
 80022a8:	080032b3 	.word	0x080032b3
 80022ac:	080023eb 	.word	0x080023eb
 80022b0:	080032b3 	.word	0x080032b3
 80022b4:	080023eb 	.word	0x080023eb
 80022b8:	080023eb 	.word	0x080023eb
 80022bc:	080032b3 	.word	0x080032b3
 80022c0:	080023eb 	.word	0x080023eb
                case 0x01: { //Ping Request
                    char message[58] = "Alive and well, Ames! Congratulations to the CySat-1 Team!";
 80022c4:	4bd4      	ldr	r3, [pc, #848]	; (8002618 <handleCySatPacket+0x444>)
 80022c6:	f107 0410 	add.w	r4, r7, #16
 80022ca:	461d      	mov	r5, r3
 80022cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022dc:	c403      	stmia	r4!, {r0, r1}
 80022de:	8022      	strh	r2, [r4, #0]
                    outgoingPacket.Subsystem_Type = OBC_SUBSYSTEM_TYPE;
 80022e0:	230a      	movs	r3, #10
 80022e2:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x00; //Ping response
 80022e6:	2300      	movs	r3, #0
 80022e8:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x3A;
 80022ec:	233a      	movs	r3, #58	; 0x3a
 80022ee:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 58);
 80022f2:	203a      	movs	r0, #58	; 0x3a
 80022f4:	f00b f89e 	bl	800d434 <malloc>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    memcpy(outgoingPacket.Data,message,58); //This too IDK seriously this might not work
 80022fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002302:	f107 0410 	add.w	r4, r7, #16
 8002306:	469c      	mov	ip, r3
 8002308:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800230c:	4665      	mov	r5, ip
 800230e:	4626      	mov	r6, r4
 8002310:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002312:	6028      	str	r0, [r5, #0]
 8002314:	6069      	str	r1, [r5, #4]
 8002316:	60aa      	str	r2, [r5, #8]
 8002318:	60eb      	str	r3, [r5, #12]
 800231a:	3410      	adds	r4, #16
 800231c:	f10c 0c10 	add.w	ip, ip, #16
 8002320:	4574      	cmp	r4, lr
 8002322:	d1f3      	bne.n	800230c <handleCySatPacket+0x138>
 8002324:	4662      	mov	r2, ip
 8002326:	4623      	mov	r3, r4
 8002328:	cb03      	ldmia	r3!, {r0, r1}
 800232a:	6010      	str	r0, [r2, #0]
 800232c:	6051      	str	r1, [r2, #4]
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	8113      	strh	r3, [r2, #8]
                    //outgoingPacket.Data[57]=message[57]; //I don't know what I'm doing please check this
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002332:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002336:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800233a:	f7ff f81d 	bl	8001378 <generateCySatChecksum>
 800233e:	4603      	mov	r3, r0
 8002340:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    return sendCySatPacket(outgoingPacket); //send the response
 8002344:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002348:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800234c:	f7fe ff94 	bl	8001278 <sendCySatPacket>
 8002350:	4603      	mov	r3, r0
 8002352:	f000 bfb2 	b.w	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x03: { //Shutoff Beacon Request
                    status=END_BEACON();
 8002356:	f001 f80f 	bl	8003378 <END_BEACON>
 800235a:	4603      	mov	r3, r0
 800235c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002360:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <handleCySatPacket+0x19c>
                        return -1;
 8002368:	f04f 33ff 	mov.w	r3, #4294967295
 800236c:	f000 bfa5 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }

                    uint16_t data1 = FloatToUnsigned16bits(status);
 8002370:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800237c:	eeb0 0a67 	vmov.f32	s0, s15
 8002380:	f001 fb9c 	bl	8003abc <FloatToUnsigned16bits>
 8002384:	4603      	mov	r3, r0
 8002386:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

                    outgoingPacket.Subsystem_Type = OBC_SUBSYSTEM_TYPE;
 800238a:	230a      	movs	r3, #10
 800238c:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x02; //Shutoff Beacon response
 8002390:	2302      	movs	r3, #2
 8002392:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x02;
 8002396:	2302      	movs	r3, #2
 8002398:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 2);
 800239c:	2002      	movs	r0, #2
 800239e:	f00b f849 	bl	800d434 <malloc>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 80023a8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 80023b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023bc:	3301      	adds	r3, #1
 80023be:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 80023c6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80023ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023ce:	f7fe ffd3 	bl	8001378 <generateCySatChecksum>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    return sendCySatPacket(outgoingPacket); //send the response
 80023d8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80023dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023e0:	f7fe ff4a 	bl	8001278 <sendCySatPacket>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f000 bf68 	b.w	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x0A: { //Set beacon text
                    //This will have to wait for transmission of text this is gonna be hard
                }
                case 0x0C: { //Enable Beacon
                    status=START_BEACON();
 80023ea:	f000 ff6b 	bl	80032c4 <START_BEACON>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80023f4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <handleCySatPacket+0x230>
                        return -1;
 80023fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002400:	f000 bf5b 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }

                    uint16_t data1 = FloatToUnsigned16bits(status);
 8002404:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002408:	ee07 3a90 	vmov	s15, r3
 800240c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002410:	eeb0 0a67 	vmov.f32	s0, s15
 8002414:	f001 fb52 	bl	8003abc <FloatToUnsigned16bits>
 8002418:	4603      	mov	r3, r0
 800241a:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8

                    outgoingPacket.Subsystem_Type = OBC_SUBSYSTEM_TYPE;
 800241e:	230a      	movs	r3, #10
 8002420:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x0B; //Enable Beacon response
 8002424:	230b      	movs	r3, #11
 8002426:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x02;
 800242a:	2302      	movs	r3, #2
 800242c:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 2);
 8002430:	2002      	movs	r0, #2
 8002432:	f00a ffff 	bl	800d434 <malloc>
 8002436:	4603      	mov	r3, r0
 8002438:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 800243c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	b29a      	uxth	r2, r3
 8002444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 800244c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002450:	3301      	adds	r3, #1
 8002452:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 800245a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800245e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002462:	f7fe ff89 	bl	8001378 <generateCySatChecksum>
 8002466:	4603      	mov	r3, r0
 8002468:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    return sendCySatPacket(outgoingPacket); //send the response
 800246c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002470:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002474:	f7fe ff00 	bl	8001278 <sendCySatPacket>
 8002478:	4603      	mov	r3, r0
 800247a:	f000 bf1e 	b.w	80032ba <handleCySatPacket+0x10e6>
        case ADCS_SUBSYSTEM_TYPE: //ADCS

            break;

        case EPS_SUBSYSTEM_TYPE: //EPS
            switch(packet.Command){
 800247e:	797b      	ldrb	r3, [r7, #5]
 8002480:	3b01      	subs	r3, #1
 8002482:	2b10      	cmp	r3, #16
 8002484:	f200 8717 	bhi.w	80032b6 <handleCySatPacket+0x10e2>
 8002488:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <handleCySatPacket+0x2bc>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024d5 	.word	0x080024d5
 8002494:	080032b7 	.word	0x080032b7
 8002498:	080025b9 	.word	0x080025b9
 800249c:	080032b7 	.word	0x080032b7
 80024a0:	08002705 	.word	0x08002705
 80024a4:	080032b7 	.word	0x080032b7
 80024a8:	0800284d 	.word	0x0800284d
 80024ac:	080032b7 	.word	0x080032b7
 80024b0:	08002995 	.word	0x08002995
 80024b4:	080032b7 	.word	0x080032b7
 80024b8:	08002a8b 	.word	0x08002a8b
 80024bc:	080032b7 	.word	0x080032b7
 80024c0:	08002c6d 	.word	0x08002c6d
 80024c4:	080032b7 	.word	0x080032b7
 80024c8:	08002dab 	.word	0x08002dab
 80024cc:	080032b7 	.word	0x080032b7
 80024d0:	08002f31 	.word	0x08002f31
                case 0x01: { //Battery Pack Voltage/Current Request
                    float voltage, current;
                    status = READ_EPS_BATTERY_VOLTAGE(&voltage); //read the voltage from the EPS Battery Pack
 80024d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe ffbf 	bl	800145c <READ_EPS_BATTERY_VOLTAGE>
 80024de:	4603      	mov	r3, r0
 80024e0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80024e4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <handleCySatPacket+0x320>
                        return -1;
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295
 80024f0:	f000 bee3 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_BATTERY_CURRENT(&current); //read the current from the EPS Battery Pack
 80024f4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe ffe1 	bl	80014c0 <READ_EPS_BATTERY_CURRENT>
 80024fe:	4603      	mov	r3, r0
 8002500:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002504:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <handleCySatPacket+0x340>
                        return -1;
 800250c:	f04f 33ff 	mov.w	r3, #4294967295
 8002510:	f000 bed3 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(voltage);
 8002514:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002518:	eeb0 0a67 	vmov.f32	s0, s15
 800251c:	f001 face 	bl	8003abc <FloatToUnsigned16bits>
 8002520:	4603      	mov	r3, r0
 8002522:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
                    uint16_t data2 = FloatToUnsigned16bits(current);
 8002526:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800252a:	eeb0 0a67 	vmov.f32	s0, s15
 800252e:	f001 fac5 	bl	8003abc <FloatToUnsigned16bits>
 8002532:	4603      	mov	r3, r0
 8002534:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002538:	231e      	movs	r3, #30
 800253a:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x00; //Battery Pack Voltage/Current Response
 800253e:	2300      	movs	r3, #0
 8002540:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x04;
 8002544:	2304      	movs	r3, #4
 8002546:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 800254a:	2004      	movs	r0, #4
 800254c:	f00a ff72 	bl	800d434 <malloc>
 8002550:	4603      	mov	r3, r0
 8002552:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002556:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800255a:	0a1b      	lsrs	r3, r3, #8
 800255c:	b29a      	uxth	r2, r3
 800255e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800256a:	3301      	adds	r3, #1
 800256c:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8002574:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	b29a      	uxth	r2, r3
 800257c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002580:	3302      	adds	r3, #2
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800258a:	3303      	adds	r3, #3
 800258c:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002594:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002598:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800259c:	f7fe feec 	bl	8001378 <generateCySatChecksum>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    return sendCySatPacket(outgoingPacket); //send the response
 80025a6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80025aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80025ae:	f7fe fe63 	bl	8001278 <sendCySatPacket>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f000 be81 	b.w	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x03: { //Solar Panel X Status Request
                    float x_voltage, x_neg_current, x_pos_current;
                    status = READ_EPS_SOLAR_X_VOLTAGE(&x_voltage); //read the Solar Panel X axis voltage
 80025b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe ffb1 	bl	8001524 <READ_EPS_SOLAR_X_VOLTAGE>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80025c8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <handleCySatPacket+0x404>
                        return -1;
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295
 80025d4:	f000 be71 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SOLAR_X_NEG_CURRENT(&x_neg_current); //read the Solar Panel X- current
 80025d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe ffd3 	bl	8001588 <READ_EPS_SOLAR_X_NEG_CURRENT>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80025e8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <handleCySatPacket+0x424>
                        return -1;
 80025f0:	f04f 33ff 	mov.w	r3, #4294967295
 80025f4:	f000 be61 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SOLAR_X_POS_CURRENT(&x_pos_current); //read the Solar Panel X+ current
 80025f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe fff5 	bl	80015ec <READ_EPS_SOLAR_X_POS_CURRENT>
 8002602:	4603      	mov	r3, r0
 8002604:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002608:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <handleCySatPacket+0x448>
                        return -1;
 8002610:	f04f 33ff 	mov.w	r3, #4294967295
 8002614:	f000 be51 	b.w	80032ba <handleCySatPacket+0x10e6>
 8002618:	080106a4 	.word	0x080106a4
                    }
                    uint16_t data1 = FloatToUnsigned16bits(x_voltage);
 800261c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002620:	eeb0 0a67 	vmov.f32	s0, s15
 8002624:	f001 fa4a 	bl	8003abc <FloatToUnsigned16bits>
 8002628:	4603      	mov	r3, r0
 800262a:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
                    uint16_t data2 = FloatToUnsigned16bits(x_neg_current);
 800262e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002632:	eeb0 0a67 	vmov.f32	s0, s15
 8002636:	f001 fa41 	bl	8003abc <FloatToUnsigned16bits>
 800263a:	4603      	mov	r3, r0
 800263c:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
                    uint16_t data3 = FloatToUnsigned16bits(x_pos_current);
 8002640:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002644:	eeb0 0a67 	vmov.f32	s0, s15
 8002648:	f001 fa38 	bl	8003abc <FloatToUnsigned16bits>
 800264c:	4603      	mov	r3, r0
 800264e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002652:	231e      	movs	r3, #30
 8002654:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x02; //Solar Panel X Status Response
 8002658:	2302      	movs	r3, #2
 800265a:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x06;
 800265e:	2306      	movs	r3, #6
 8002660:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 8002664:	2006      	movs	r0, #6
 8002666:	f00a fee5 	bl	800d434 <malloc>
 800266a:	4603      	mov	r3, r0
 800266c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002670:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	b29a      	uxth	r2, r3
 8002678:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002680:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002684:	3301      	adds	r3, #1
 8002686:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 800268e:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8002692:	0a1b      	lsrs	r3, r3, #8
 8002694:	b29a      	uxth	r2, r3
 8002696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800269a:	3302      	adds	r3, #2
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 80026a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026a4:	3303      	adds	r3, #3
 80026a6:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 80026ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026ba:	3304      	adds	r3, #4
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 80026c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026c4:	3305      	adds	r3, #5
 80026c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 80026ce:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80026d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80026d6:	f7fe fe4f 	bl	8001378 <generateCySatChecksum>
 80026da:	4603      	mov	r3, r0
 80026dc:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 80026e0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80026e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80026e8:	f7fe fdc6 	bl	8001278 <sendCySatPacket>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 80026f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026f6:	4618      	mov	r0, r3
 80026f8:	f00a fea4 	bl	800d444 <free>
                    return status; //send the response
 80026fc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002700:	f000 bddb 	b.w	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x05: { //Solar Panel Y Status Request
                    float y_voltage, y_neg_current, y_pos_current;
                    status = READ_EPS_SOLAR_Y_VOLTAGE(&y_voltage); //read the Solar Panel Y axis voltage
 8002704:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe ffa1 	bl	8001650 <READ_EPS_SOLAR_Y_VOLTAGE>
 800270e:	4603      	mov	r3, r0
 8002710:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002714:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <handleCySatPacket+0x550>
                        return -1;
 800271c:	f04f 33ff 	mov.w	r3, #4294967295
 8002720:	f000 bdcb 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SOLAR_Y_NEG_CURRENT(&y_neg_current); //read the Solar Panel Y- current
 8002724:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002728:	4618      	mov	r0, r3
 800272a:	f7fe ffc3 	bl	80016b4 <READ_EPS_SOLAR_Y_NEG_CURRENT>
 800272e:	4603      	mov	r3, r0
 8002730:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002734:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <handleCySatPacket+0x570>
                        return -1;
 800273c:	f04f 33ff 	mov.w	r3, #4294967295
 8002740:	f000 bdbb 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SOLAR_Y_POS_CURRENT(&y_pos_current); //read the Solar Panel Y+ current
 8002744:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe ffe5 	bl	8001718 <READ_EPS_SOLAR_Y_POS_CURRENT>
 800274e:	4603      	mov	r3, r0
 8002750:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002754:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <handleCySatPacket+0x590>
                        return -1;
 800275c:	f04f 33ff 	mov.w	r3, #4294967295
 8002760:	f000 bdab 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(y_voltage);
 8002764:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002768:	eeb0 0a67 	vmov.f32	s0, s15
 800276c:	f001 f9a6 	bl	8003abc <FloatToUnsigned16bits>
 8002770:	4603      	mov	r3, r0
 8002772:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                    uint16_t data2 = FloatToUnsigned16bits(y_neg_current);
 8002776:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800277a:	eeb0 0a67 	vmov.f32	s0, s15
 800277e:	f001 f99d 	bl	8003abc <FloatToUnsigned16bits>
 8002782:	4603      	mov	r3, r0
 8002784:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
                    uint16_t data3 = FloatToUnsigned16bits(y_pos_current);
 8002788:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800278c:	eeb0 0a67 	vmov.f32	s0, s15
 8002790:	f001 f994 	bl	8003abc <FloatToUnsigned16bits>
 8002794:	4603      	mov	r3, r0
 8002796:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 800279a:	231e      	movs	r3, #30
 800279c:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x04; //Solar Panel Y Status Response
 80027a0:	2304      	movs	r3, #4
 80027a2:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x06;
 80027a6:	2306      	movs	r3, #6
 80027a8:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 80027ac:	2006      	movs	r0, #6
 80027ae:	f00a fe41 	bl	800d434 <malloc>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 80027b8:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	b29a      	uxth	r2, r3
 80027c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 80027c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027cc:	3301      	adds	r3, #1
 80027ce:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 80027d6:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	b29a      	uxth	r2, r3
 80027de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027e2:	3302      	adds	r3, #2
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 80027e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027ec:	3303      	adds	r3, #3
 80027ee:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 80027f6:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002802:	3304      	adds	r3, #4
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8002808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800280c:	3305      	adds	r3, #5
 800280e:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002816:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800281a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800281e:	f7fe fdab 	bl	8001378 <generateCySatChecksum>
 8002822:	4603      	mov	r3, r0
 8002824:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 8002828:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800282c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002830:	f7fe fd22 	bl	8001278 <sendCySatPacket>
 8002834:	4603      	mov	r3, r0
 8002836:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 800283a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800283e:	4618      	mov	r0, r3
 8002840:	f00a fe00 	bl	800d444 <free>
                    return status; //send the response
 8002844:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002848:	f000 bd37 	b.w	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x07: { //Solar Panel Z Status Request
                    float z_voltage, z_neg_current, z_pos_current;
                    status = READ_EPS_SOLAR_Z_VOLTAGE(&z_voltage); //read the Solar Panel Z axis voltage
 800284c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe ff93 	bl	800177c <READ_EPS_SOLAR_Z_VOLTAGE>
 8002856:	4603      	mov	r3, r0
 8002858:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 800285c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <handleCySatPacket+0x698>
                        return -1;
 8002864:	f04f 33ff 	mov.w	r3, #4294967295
 8002868:	f000 bd27 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SOLAR_Z_NEG_CURRENT(&z_neg_current); //read the Solar Panel Z- current
 800286c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe ffb5 	bl	80017e0 <READ_EPS_SOLAR_Z_NEG_CURRENT>
 8002876:	4603      	mov	r3, r0
 8002878:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 800287c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <handleCySatPacket+0x6b8>
                        return -1;
 8002884:	f04f 33ff 	mov.w	r3, #4294967295
 8002888:	f000 bd17 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SOLAR_Z_POS_CURRENT(&z_pos_current); //read the Solar Panel Z+ current
 800288c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002890:	4618      	mov	r0, r3
 8002892:	f7fe ffd7 	bl	8001844 <READ_EPS_SOLAR_Z_POS_CURRENT>
 8002896:	4603      	mov	r3, r0
 8002898:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 800289c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <handleCySatPacket+0x6d8>
                        return -1;
 80028a4:	f04f 33ff 	mov.w	r3, #4294967295
 80028a8:	f000 bd07 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(z_voltage);
 80028ac:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80028b0:	eeb0 0a67 	vmov.f32	s0, s15
 80028b4:	f001 f902 	bl	8003abc <FloatToUnsigned16bits>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
                    uint16_t data2 = FloatToUnsigned16bits(z_neg_current);
 80028be:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80028c2:	eeb0 0a67 	vmov.f32	s0, s15
 80028c6:	f001 f8f9 	bl	8003abc <FloatToUnsigned16bits>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
                    uint16_t data3 = FloatToUnsigned16bits(z_pos_current);
 80028d0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80028d4:	eeb0 0a67 	vmov.f32	s0, s15
 80028d8:	f001 f8f0 	bl	8003abc <FloatToUnsigned16bits>
 80028dc:	4603      	mov	r3, r0
 80028de:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80028e2:	231e      	movs	r3, #30
 80028e4:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x06; //Solar Panel Z Status Response
 80028e8:	2306      	movs	r3, #6
 80028ea:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x06;
 80028ee:	2306      	movs	r3, #6
 80028f0:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 80028f4:	2006      	movs	r0, #6
 80028f6:	f00a fd9d 	bl	800d434 <malloc>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002900:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	b29a      	uxth	r2, r3
 8002908:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002914:	3301      	adds	r3, #1
 8002916:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 800291e:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	b29a      	uxth	r2, r3
 8002926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800292a:	3302      	adds	r3, #2
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002930:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002934:	3303      	adds	r3, #3
 8002936:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 800293e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8002942:	0a1b      	lsrs	r3, r3, #8
 8002944:	b29a      	uxth	r2, r3
 8002946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800294a:	3304      	adds	r3, #4
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8002950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002954:	3305      	adds	r3, #5
 8002956:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 800295e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002962:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002966:	f7fe fd07 	bl	8001378 <generateCySatChecksum>
 800296a:	4603      	mov	r3, r0
 800296c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 8002970:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002974:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002978:	f7fe fc7e 	bl	8001278 <sendCySatPacket>
 800297c:	4603      	mov	r3, r0
 800297e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 8002982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002986:	4618      	mov	r0, r3
 8002988:	f00a fd5c 	bl	800d444 <free>
                    return status; //send the response
 800298c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002990:	f000 bc93 	b.w	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x09: { //BUS Current Request
                    float current_3, current_5;
                    status = READ_EPS_3V_CURRENT(&current_3); //read the 3.3v BUS current
 8002994:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002998:	4618      	mov	r0, r3
 800299a:	f7fe ff85 	bl	80018a8 <READ_EPS_3V_CURRENT>
 800299e:	4603      	mov	r3, r0
 80029a0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80029a4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <handleCySatPacket+0x7e0>
                        return -1;
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
 80029b0:	f000 bc83 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_5V_CURRENT(&current_5); //read the 5v BUS current
 80029b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe ffa7 	bl	800190c <READ_EPS_5V_CURRENT>
 80029be:	4603      	mov	r3, r0
 80029c0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80029c4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <handleCySatPacket+0x800>
                        return -1;
 80029cc:	f04f 33ff 	mov.w	r3, #4294967295
 80029d0:	f000 bc73 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(current_3);
 80029d4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80029d8:	eeb0 0a67 	vmov.f32	s0, s15
 80029dc:	f001 f86e 	bl	8003abc <FloatToUnsigned16bits>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
                    uint16_t data2 = FloatToUnsigned16bits(current_5);
 80029e6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80029ea:	eeb0 0a67 	vmov.f32	s0, s15
 80029ee:	f001 f865 	bl	8003abc <FloatToUnsigned16bits>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80029f8:	231e      	movs	r3, #30
 80029fa:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x08; //BUS Current Response
 80029fe:	2308      	movs	r3, #8
 8002a00:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x04;
 8002a04:	2304      	movs	r3, #4
 8002a06:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 8002a0a:	2004      	movs	r0, #4
 8002a0c:	f00a fd12 	bl	800d434 <malloc>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002a16:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002a1a:	0a1b      	lsrs	r3, r3, #8
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8002a34:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a40:	3302      	adds	r3, #2
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002a46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a4a:	3303      	adds	r3, #3
 8002a4c:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002a54:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002a58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a5c:	f7fe fc8c 	bl	8001378 <generateCySatChecksum>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 8002a66:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002a6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a6e:	f7fe fc03 	bl	8001278 <sendCySatPacket>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 8002a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f00a fce1 	bl	800d444 <free>
                    return status; //send the response
 8002a82:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002a86:	f000 bc18 	b.w	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x0B: { //Temperature Request
                    float mcu_temp, battery1_temp, battery2_temp, battery3_temp, battery4_temp;
                    status = READ_EPS_MCU_TEMP(&mcu_temp); //read the MCU Temperature
 8002a8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe ff6e 	bl	8001970 <READ_EPS_MCU_TEMP>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002a9a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <handleCySatPacket+0x8d6>
                        return -1;
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa6:	f000 bc08 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_BATT_1_TEMP(&battery1_temp); //read the Battery Cell 1 Temperature
 8002aaa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe ff9c 	bl	80019ec <READ_EPS_BATT_1_TEMP>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002aba:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <handleCySatPacket+0x8f4>
                        return -1;
 8002ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac6:	e3f8      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_BATT_2_TEMP(&battery2_temp); //read the Battery Cell 2 Temperature
 8002ac8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fe ffbf 	bl	8001a50 <READ_EPS_BATT_2_TEMP>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002ad8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <handleCySatPacket+0x912>
                        return -1;
 8002ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae4:	e3e9      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_BATT_3_TEMP(&battery3_temp); //read the Battery Cell 3 Temperature
 8002ae6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe ffe2 	bl	8001ab4 <READ_EPS_BATT_3_TEMP>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002af6:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <handleCySatPacket+0x930>
                        return -1;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295
 8002b02:	e3da      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_BATT_4_TEMP(&battery4_temp); //read the Battery Cell 4 Temperature
 8002b04:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff f805 	bl	8001b18 <READ_EPS_BATT_4_TEMP>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002b14:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <handleCySatPacket+0x94e>
                        return -1;
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b20:	e3cb      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(mcu_temp);
 8002b22:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002b26:	eeb0 0a67 	vmov.f32	s0, s15
 8002b2a:	f000 ffc7 	bl	8003abc <FloatToUnsigned16bits>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
                    uint16_t data2 = FloatToUnsigned16bits(battery1_temp);
 8002b34:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002b38:	eeb0 0a67 	vmov.f32	s0, s15
 8002b3c:	f000 ffbe 	bl	8003abc <FloatToUnsigned16bits>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
                    uint16_t data3 = FloatToUnsigned16bits(battery2_temp);
 8002b46:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b4e:	f000 ffb5 	bl	8003abc <FloatToUnsigned16bits>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
                    uint16_t data4 = FloatToUnsigned16bits(battery3_temp);
 8002b58:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b60:	f000 ffac 	bl	8003abc <FloatToUnsigned16bits>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
                    uint16_t data5 = FloatToUnsigned16bits(battery4_temp);
 8002b6a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b72:	f000 ffa3 	bl	8003abc <FloatToUnsigned16bits>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002b7c:	231e      	movs	r3, #30
 8002b7e:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x0A; //Temperature Response
 8002b82:	230a      	movs	r3, #10
 8002b84:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x0A;
 8002b88:	230a      	movs	r3, #10
 8002b8a:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 10);
 8002b8e:	200a      	movs	r0, #10
 8002b90:	f00a fc50 	bl	800d434 <malloc>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002b9a:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8002bb8:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002bbc:	0a1b      	lsrs	r3, r3, #8
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bce:	3303      	adds	r3, #3
 8002bd0:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 8002bd8:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002be4:	3304      	adds	r3, #4
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8002bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bee:	3305      	adds	r3, #5
 8002bf0:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[6] = (data4 & 0xFF00) >> 8;
 8002bf8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c04:	3306      	adds	r3, #6
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[7] = data4 & 0xFF;
 8002c0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c0e:	3307      	adds	r3, #7
 8002c10:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[8] = (data5 & 0xFF00) >> 8;
 8002c18:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c24:	3308      	adds	r3, #8
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[9] = data5 & 0xFF;
 8002c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c2e:	3309      	adds	r3, #9
 8002c30:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002c38:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002c3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c40:	f7fe fb9a 	bl	8001378 <generateCySatChecksum>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 8002c4a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002c4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c52:	f7fe fb11 	bl	8001278 <sendCySatPacket>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 8002c5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c60:	4618      	mov	r0, r3
 8002c62:	f00a fbef 	bl	800d444 <free>
                    return status; //send the response
 8002c66:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002c6a:	e326      	b.n	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x0D: { //Input, Output, and Default Conditions Request
                    uint16_t input, output1, output2, defaults1, defaults2;
                    status = READ_EPS_INPUT_CONDITION(&input); //read the Input Conditions
 8002c6c:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fe ff83 	bl	8001b7c <READ_EPS_INPUT_CONDITION>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002c7c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <handleCySatPacket+0xab6>
                        return -1;
 8002c84:	f04f 33ff 	mov.w	r3, #4294967295
 8002c88:	e317      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_OUTPUT_CONDITION1(&output1); //read the Output 1 Conditions
 8002c8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe ff99 	bl	8001bc6 <READ_EPS_OUTPUT_CONDITION1>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002c9a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <handleCySatPacket+0xad4>
                        return -1;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca6:	e308      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_OUTPUT_CONDITION2(&output2); //read the Output 2 Conditions
 8002ca8:	f107 035a 	add.w	r3, r7, #90	; 0x5a
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe ffaf 	bl	8001c10 <READ_EPS_OUTPUT_CONDITION2>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002cb8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <handleCySatPacket+0xaf2>
                        return -1;
 8002cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc4:	e2f9      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_DEFAULTS1(&defaults1); //read the Defaults 1 Conditions
 8002cc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff f87e 	bl	8001dcc <READ_EPS_DEFAULTS1>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002cd6:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <handleCySatPacket+0xb10>
                        return -1;
 8002cde:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce2:	e2ea      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_DEFAULTS2(&defaults2); //read the Defaults 2 Conditions
 8002ce4:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff f894 	bl	8001e16 <READ_EPS_DEFAULTS2>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002cf4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <handleCySatPacket+0xb2e>
                        return -1;
 8002cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002d00:	e2db      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002d02:	231e      	movs	r3, #30
 8002d04:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x0C; //Input, Output, and Default Conditions Response
 8002d08:	230c      	movs	r3, #12
 8002d0a:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x06;
 8002d0e:	2306      	movs	r3, #6
 8002d10:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 8002d14:	2006      	movs	r0, #6
 8002d16:	f00a fb8d 	bl	800d434 <malloc>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = input & 0xFF;
 8002d20:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8002d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = (output1 & 0xFF00) >> 8;
 8002d2c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002d30:	0a1b      	lsrs	r3, r3, #8
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d38:	3301      	adds	r3, #1
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = output1 & 0xFF;
 8002d3e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d46:	3302      	adds	r3, #2
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = output2 & 0xFF;
 8002d4c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8002d50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d54:	3303      	adds	r3, #3
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = defaults1 & 0xFF;
 8002d5a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8002d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d62:	3304      	adds	r3, #4
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = defaults2 & 0xFF;
 8002d68:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8002d6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d70:	3305      	adds	r3, #5
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002d76:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002d7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d7e:	f7fe fafb 	bl	8001378 <generateCySatChecksum>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 8002d88:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002d8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d90:	f7fe fa72 	bl	8001278 <sendCySatPacket>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 8002d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f00a fb50 	bl	800d444 <free>
                    return status; //send the response
 8002da4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002da8:	e287      	b.n	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x0F: { //Counter Check Request
                    uint16_t power_on, under_voltage, short_circuited, over_temp, charging_cycles;
                    status = READ_EPS_POWER_ON_CYCLES(&power_on); //read the MCU Temperature
 8002daa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe ff53 	bl	8001c5a <READ_EPS_POWER_ON_CYCLES>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002dba:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <handleCySatPacket+0xbf4>
                        return -1;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc6:	e278      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_UNDER_VOLT_COUNT(&under_voltage); //read the Battery Cell 1 Temperature
 8002dc8:	f107 0352 	add.w	r3, r7, #82	; 0x52
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe ff69 	bl	8001ca4 <READ_EPS_UNDER_VOLT_COUNT>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002dd8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <handleCySatPacket+0xc12>
                        return -1;
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295
 8002de4:	e269      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SHORT_CIRCUIT_COUNT(&short_circuited); //read the Battery Cell 2 Temperature
 8002de6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe ff7f 	bl	8001cee <READ_EPS_SHORT_CIRCUIT_COUNT>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002df6:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <handleCySatPacket+0xc30>
                        return -1;
 8002dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002e02:	e25a      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_OVER_TEMP_COUNT(&over_temp); //read the Battery Cell 3 Temperature
 8002e04:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe ff95 	bl	8001d38 <READ_EPS_OVER_TEMP_COUNT>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002e14:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <handleCySatPacket+0xc4e>
                        return -1;
 8002e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e20:	e24b      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_CHARGE_CYCLES(&charging_cycles); //read the Battery Cell 4 Temperature
 8002e22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe ffab 	bl	8001d82 <READ_EPS_CHARGE_CYCLES>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002e32:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <handleCySatPacket+0xc6c>
                        return -1;
 8002e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3e:	e23c      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002e40:	231e      	movs	r3, #30
 8002e42:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x0E; //Temperature Response
 8002e46:	230e      	movs	r3, #14
 8002e48:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x0A;
 8002e4c:	230a      	movs	r3, #10
 8002e4e:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 10);
 8002e52:	200a      	movs	r0, #10
 8002e54:	f00a faee 	bl	800d434 <malloc>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (power_on & 0xFF00) >> 8;
 8002e5e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002e62:	0a1b      	lsrs	r3, r3, #8
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = power_on & 0xFF;
 8002e6e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8002e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e76:	3301      	adds	r3, #1
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (under_voltage & 0xFF00) >> 8;
 8002e7c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e88:	3302      	adds	r3, #2
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = under_voltage & 0xFF;
 8002e8e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8002e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e96:	3303      	adds	r3, #3
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (short_circuited & 0xFF00) >> 8;
 8002e9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = short_circuited & 0xFF;
 8002eae:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002eb6:	3305      	adds	r3, #5
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[6] = (over_temp & 0xFF00) >> 8;
 8002ebc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ec8:	3306      	adds	r3, #6
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[7] = over_temp & 0xFF;
 8002ece:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ed6:	3307      	adds	r3, #7
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[8] = (charging_cycles & 0xFF00) >> 8;
 8002edc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ee8:	3308      	adds	r3, #8
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[9] = charging_cycles & 0xFF;
 8002eee:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ef6:	3309      	adds	r3, #9
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002efc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002f00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f04:	f7fe fa38 	bl	8001378 <generateCySatChecksum>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 8002f0e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002f12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f16:	f7fe f9af 	bl	8001278 <sendCySatPacket>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 8002f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f24:	4618      	mov	r0, r3
 8002f26:	f00a fa8d 	bl	800d444 <free>
                    return status; //send the response
 8002f2a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002f2e:	e1c4      	b.n	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x11: { //Enable/Disable Request
                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002f30:	231e      	movs	r3, #30
 8002f32:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x10; //Enable/Disable Response
 8002f36:	2310      	movs	r3, #16
 8002f38:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x01;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t));
 8002f42:	2001      	movs	r0, #1
 8002f44:	f00a fa76 	bl	800d434 <malloc>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    if(validateCySatChecksum(packet)==0){
 8002f4e:	1d3b      	adds	r3, r7, #4
 8002f50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f54:	f7fe fa45 	bl	80013e2 <validateCySatChecksum>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d104      	bne.n	8002f68 <handleCySatPacket+0xd94>
                        outgoingPacket.Data[0] = 0;
 8002f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
 8002f66:	e183      	b.n	8003270 <handleCySatPacket+0x109c>
                    }
                    else{
                        switch(packet.Data[0]){
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	2b0e      	cmp	r3, #14
 8002f70:	f200 817e 	bhi.w	8003270 <handleCySatPacket+0x109c>
 8002f74:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <handleCySatPacket+0xda8>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002fb9 	.word	0x08002fb9
 8002f80:	08003271 	.word	0x08003271
 8002f84:	08003271 	.word	0x08003271
 8002f88:	08002ff3 	.word	0x08002ff3
 8002f8c:	08003271 	.word	0x08003271
 8002f90:	0800302d 	.word	0x0800302d
 8002f94:	08003067 	.word	0x08003067
 8002f98:	080030a1 	.word	0x080030a1
 8002f9c:	080030db 	.word	0x080030db
 8002fa0:	08003115 	.word	0x08003115
 8002fa4:	0800314f 	.word	0x0800314f
 8002fa8:	08003189 	.word	0x08003189
 8002fac:	080031c3 	.word	0x080031c3
 8002fb0:	080031fd 	.word	0x080031fd
 8002fb4:	08003237 	.word	0x08003237
                            case 0x01:{ //Enable/Disable Battery BUS
                                if(packet.Data[1] == 0){
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <handleCySatPacket+0xdfc>
                                    outgoingPacket.Data[0] = disable_EPS_Vbatt_Bus();
 8002fc2:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8002fc6:	f7fe ff54 	bl	8001e72 <disable_EPS_Vbatt_Bus>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Vbatt_Bus();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002fce:	e14f      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d106      	bne.n	8002fe8 <handleCySatPacket+0xe14>
                                    outgoingPacket.Data[0] = enable_EPS_Vbatt_Bus();
 8002fda:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8002fde:	f7fe ff3f 	bl	8001e60 <enable_EPS_Vbatt_Bus>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	7023      	strb	r3, [r4, #0]
                                break;
 8002fe6:	e143      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 8002fe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
                                break;
 8002ff0:	e13e      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x04:{ //Enable/Disable 5v BUS
                                if(packet.Data[1] == 0){
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d106      	bne.n	800300a <handleCySatPacket+0xe36>
                                    outgoingPacket.Data[0] = disable_EPS_5v_Bus();
 8002ffc:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003000:	f7fe ff49 	bl	8001e96 <disable_EPS_5v_Bus>
 8003004:	4603      	mov	r3, r0
 8003006:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_5v_Bus();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8003008:	e132      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	3301      	adds	r3, #1
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d106      	bne.n	8003022 <handleCySatPacket+0xe4e>
                                    outgoingPacket.Data[0] = enable_EPS_5v_Bus();
 8003014:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003018:	f7fe ff34 	bl	8001e84 <enable_EPS_5v_Bus>
 800301c:	4603      	mov	r3, r0
 800301e:	7023      	strb	r3, [r4, #0]
                                break;
 8003020:	e126      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 8003022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003026:	2200      	movs	r2, #0
 8003028:	701a      	strb	r2, [r3, #0]
                                break;
 800302a:	e121      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x06:{ //Enable/Disable Fast/Slow Battery Charge 1
                                if(packet.Data[1] == 0){
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	3301      	adds	r3, #1
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <handleCySatPacket+0xe70>
                                    outgoingPacket.Data[0] = disable_EPS_Fast_Charge1();
 8003036:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800303a:	f7fe ff50 	bl	8001ede <disable_EPS_Fast_Charge1>
 800303e:	4603      	mov	r3, r0
 8003040:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8003042:	e115      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	3301      	adds	r3, #1
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d106      	bne.n	800305c <handleCySatPacket+0xe88>
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge1();
 800304e:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003052:	f7fe ff3b 	bl	8001ecc <enable_EPS_Fast_Charge1>
 8003056:	4603      	mov	r3, r0
 8003058:	7023      	strb	r3, [r4, #0]
                                break;
 800305a:	e109      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 800305c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
                                break;
 8003064:	e104      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x07:{ //Enable/Disable Fast/Slow Battery Charge 2
                                if(packet.Data[1] == 0){
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	3301      	adds	r3, #1
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d106      	bne.n	800307e <handleCySatPacket+0xeaa>
                                    outgoingPacket.Data[0] = disable_EPS_Fast_Charge2();
 8003070:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003074:	f7fe ff45 	bl	8001f02 <disable_EPS_Fast_Charge2>
 8003078:	4603      	mov	r3, r0
 800307a:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800307c:	e0f8      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	3301      	adds	r3, #1
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d106      	bne.n	8003096 <handleCySatPacket+0xec2>
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge2();
 8003088:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800308c:	f7fe ff30 	bl	8001ef0 <enable_EPS_Fast_Charge2>
 8003090:	4603      	mov	r3, r0
 8003092:	7023      	strb	r3, [r4, #0]
                                break;
 8003094:	e0ec      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 8003096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
                                break;
 800309e:	e0e7      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x08:{ //Enable/Disable Out1/Boost Board
                                if(packet.Data[1] == 0){
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	3301      	adds	r3, #1
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <handleCySatPacket+0xee4>
                                    outgoingPacket.Data[0] = disable_Boost_Board();
 80030aa:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80030ae:	f7fe ff3a 	bl	8001f26 <disable_Boost_Board>
 80030b2:	4603      	mov	r3, r0
 80030b4:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_Boost_Board();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80030b6:	e0db      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	3301      	adds	r3, #1
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d106      	bne.n	80030d0 <handleCySatPacket+0xefc>
                                    outgoingPacket.Data[0] = enable_Boost_Board();
 80030c2:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80030c6:	f7fe ff25 	bl	8001f14 <enable_Boost_Board>
 80030ca:	4603      	mov	r3, r0
 80030cc:	7023      	strb	r3, [r4, #0]
                                break;
 80030ce:	e0cf      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 80030d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
                                break;
 80030d8:	e0ca      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x09:{ //Enable/Disable Out2
                                if(packet.Data[1] == 0){
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	3301      	adds	r3, #1
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d106      	bne.n	80030f2 <handleCySatPacket+0xf1e>
                                    outgoingPacket.Data[0] = disable_Payload();
 80030e4:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80030e8:	f7fe ff2f 	bl	8001f4a <disable_Payload>
 80030ec:	4603      	mov	r3, r0
 80030ee:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_Payload();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80030f0:	e0be      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	3301      	adds	r3, #1
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d106      	bne.n	800310a <handleCySatPacket+0xf36>
                                    outgoingPacket.Data[0] = enable_Payload();
 80030fc:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003100:	f7fe ff1a 	bl	8001f38 <enable_Payload>
 8003104:	4603      	mov	r3, r0
 8003106:	7023      	strb	r3, [r4, #0]
                                break;
 8003108:	e0b2      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 800310a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
                                break;
 8003112:	e0ad      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x0A:{ //Enable/Disable Out3
                                if(packet.Data[1] == 0){
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	3301      	adds	r3, #1
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <handleCySatPacket+0xf58>
                                    outgoingPacket.Data[0] = disable_EPS_Output_3();
 800311e:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003122:	f7fe ff24 	bl	8001f6e <disable_EPS_Output_3>
 8003126:	4603      	mov	r3, r0
 8003128:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_3();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800312a:	e0a1      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	3301      	adds	r3, #1
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d106      	bne.n	8003144 <handleCySatPacket+0xf70>
                                    outgoingPacket.Data[0] = enable_EPS_Output_3();
 8003136:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800313a:	f7fe ff0f 	bl	8001f5c <enable_EPS_Output_3>
 800313e:	4603      	mov	r3, r0
 8003140:	7023      	strb	r3, [r4, #0]
                                break;
 8003142:	e095      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 8003144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
                                break;
 800314c:	e090      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x0B:{ //Enable/Disable Out5/UHF
                                if(packet.Data[1] == 0){
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	3301      	adds	r3, #1
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d106      	bne.n	8003166 <handleCySatPacket+0xf92>
                                    outgoingPacket.Data[0] = disable_UHF();
 8003158:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800315c:	f7fe ff19 	bl	8001f92 <disable_UHF>
 8003160:	4603      	mov	r3, r0
 8003162:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_UHF();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8003164:	e084      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	3301      	adds	r3, #1
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d106      	bne.n	800317e <handleCySatPacket+0xfaa>
                                    outgoingPacket.Data[0] = enable_UHF();
 8003170:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003174:	f7fe ff04 	bl	8001f80 <enable_UHF>
 8003178:	4603      	mov	r3, r0
 800317a:	7023      	strb	r3, [r4, #0]
                                break;
 800317c:	e078      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 800317e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
                                break;
 8003186:	e073      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x0C:{ //Enable/Disable Out6
                                if(packet.Data[1] == 0){
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	3301      	adds	r3, #1
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <handleCySatPacket+0xfcc>
                                    outgoingPacket.Data[0] = disable_EPS_Output_6();
 8003192:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003196:	f7fe ff0e 	bl	8001fb6 <disable_EPS_Output_6>
 800319a:	4603      	mov	r3, r0
 800319c:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_6();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800319e:	e067      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	3301      	adds	r3, #1
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d106      	bne.n	80031b8 <handleCySatPacket+0xfe4>
                                    outgoingPacket.Data[0] = enable_EPS_Output_6();
 80031aa:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80031ae:	f7fe fef9 	bl	8001fa4 <enable_EPS_Output_6>
 80031b2:	4603      	mov	r3, r0
 80031b4:	7023      	strb	r3, [r4, #0]
                                break;
 80031b6:	e05b      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 80031b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
                                break;
 80031c0:	e056      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x0D:{ //Enable/Disable Heater 1
                                if(packet.Data[1] == 0){
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	3301      	adds	r3, #1
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d106      	bne.n	80031da <handleCySatPacket+0x1006>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_1();
 80031cc:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80031d0:	f7fe ff03 	bl	8001fda <disable_EPS_Batt_Heater_1>
 80031d4:	4603      	mov	r3, r0
 80031d6:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80031d8:	e04a      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	3301      	adds	r3, #1
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d106      	bne.n	80031f2 <handleCySatPacket+0x101e>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_1();
 80031e4:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80031e8:	f7fe feee 	bl	8001fc8 <enable_EPS_Batt_Heater_1>
 80031ec:	4603      	mov	r3, r0
 80031ee:	7023      	strb	r3, [r4, #0]
                                break;
 80031f0:	e03e      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 80031f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
                                break;
 80031fa:	e039      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x0E:{ //Enable/Disable Heater 2
                                if(packet.Data[1] == 0){
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	3301      	adds	r3, #1
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <handleCySatPacket+0x1040>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_2();
 8003206:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800320a:	f7fe fef8 	bl	8001ffe <disable_EPS_Batt_Heater_2>
 800320e:	4603      	mov	r3, r0
 8003210:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8003212:	e02d      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	3301      	adds	r3, #1
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d106      	bne.n	800322c <handleCySatPacket+0x1058>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_2();
 800321e:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003222:	f7fe fee3 	bl	8001fec <enable_EPS_Batt_Heater_2>
 8003226:	4603      	mov	r3, r0
 8003228:	7023      	strb	r3, [r4, #0]
                                break;
 800322a:	e021      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 800322c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]
                                break;
 8003234:	e01c      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x0F:{ //Enable/Disable Heater 3
                                if(packet.Data[1] == 0){
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	3301      	adds	r3, #1
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d106      	bne.n	800324e <handleCySatPacket+0x107a>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_3();
 8003240:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003244:	f7fe feed 	bl	8002022 <disable_EPS_Batt_Heater_3>
 8003248:	4603      	mov	r3, r0
 800324a:	7023      	strb	r3, [r4, #0]
                                }
                                else{

                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800324c:	e00f      	b.n	800326e <handleCySatPacket+0x109a>
                                else if(packet.Data[1] == 1){
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	3301      	adds	r3, #1
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d106      	bne.n	8003266 <handleCySatPacket+0x1092>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_3();
 8003258:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800325c:	f7fe fed8 	bl	8002010 <enable_EPS_Batt_Heater_3>
 8003260:	4603      	mov	r3, r0
 8003262:	7023      	strb	r3, [r4, #0]
                                break;
 8003264:	e003      	b.n	800326e <handleCySatPacket+0x109a>
                                    outgoingPacket.Data[0] = 0x00;
 8003266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
                                break;
 800326e:	bf00      	nop
                            }
                        }
                    }
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8003270:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003274:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003278:	f7fe f87e 	bl	8001378 <generateCySatChecksum>
 800327c:	4603      	mov	r3, r0
 800327e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 8003282:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003286:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800328a:	f7fd fff5 	bl	8001278 <sendCySatPacket>
 800328e:	4603      	mov	r3, r0
 8003290:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 8003294:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003298:	4618      	mov	r0, r3
 800329a:	f00a f8d3 	bl	800d444 <free>
                    return status; //send the response
 800329e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80032a2:	e00a      	b.n	80032ba <handleCySatPacket+0x10e6>
        case EOL_SUBSYSTEM_TYPE: //End of Life

            break;

        default:
            return -1;
 80032a4:	f04f 33ff 	mov.w	r3, #4294967295
 80032a8:	e007      	b.n	80032ba <handleCySatPacket+0x10e6>
            break;
 80032aa:	bf00      	nop
 80032ac:	e004      	b.n	80032b8 <handleCySatPacket+0x10e4>
            break;
 80032ae:	bf00      	nop
 80032b0:	e002      	b.n	80032b8 <handleCySatPacket+0x10e4>
            break;
 80032b2:	bf00      	nop
 80032b4:	e000      	b.n	80032b8 <handleCySatPacket+0x10e4>
            break;
 80032b6:	bf00      	nop
    }

    return 0;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	37e4      	adds	r7, #228	; 0xe4
 80032be:	46bd      	mov	sp, r7
 80032c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032c2:	bf00      	nop

080032c4 <START_BEACON>:
/***************************************** BEACON COMMANDS **********************************************************************/

/**
 * @brief Turns on the beacon.
 */
HAL_StatusTypeDef START_BEACON() {
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08e      	sub	sp, #56	; 0x38
 80032c8:	af00      	add	r7, sp, #0
    uint8_t data[23];
    uint8_t bits[4];
    HAL_StatusTypeDef status = GET_UHF_STATUS(data);
 80032ca:	f107 0320 	add.w	r3, r7, #32
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f98c 	bl	80035ec <GET_UHF_STATUS>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status != HAL_OK) {
 80032da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <START_BEACON+0x2a>
        debug_printf("Beacon Start Fail. Init Status is not ok");
 80032e2:	4824      	ldr	r0, [pc, #144]	; (8003374 <START_BEACON+0xb0>)
 80032e4:	f000 fb30 	bl	8003948 <debug_printf>
        return status;
 80032e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032ec:	e03e      	b.n	800336c <START_BEACON+0xa8>
    }

    // Perserve other settings and only enable beacon
    bits[0] = data[9];
 80032ee:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80032f2:	773b      	strb	r3, [r7, #28]
    bits[1] = data[10];
 80032f4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80032f8:	777b      	strb	r3, [r7, #29]
    bits[2] = ((data[11] - 0x30) | 0x04) + 0x30; //set bit 6(BCN) to 1
 80032fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032fe:	3b30      	subs	r3, #48	; 0x30
 8003300:	b2db      	uxtb	r3, r3
 8003302:	b25b      	sxtb	r3, r3
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	b25b      	sxtb	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	3330      	adds	r3, #48	; 0x30
 800330e:	b2db      	uxtb	r3, r3
 8003310:	77bb      	strb	r3, [r7, #30]
    bits[3] = data[13];
 8003312:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003316:	77fb      	strb	r3, [r7, #31]

    uint8_t command[22];
    command[0] = 'E';
 8003318:	2345      	movs	r3, #69	; 0x45
 800331a:	713b      	strb	r3, [r7, #4]
    command[1] = 'S';
 800331c:	2353      	movs	r3, #83	; 0x53
 800331e:	717b      	strb	r3, [r7, #5]
    command[2] = '+';
 8003320:	232b      	movs	r3, #43	; 0x2b
 8003322:	71bb      	strb	r3, [r7, #6]
    command[3] = 'W';
 8003324:	2357      	movs	r3, #87	; 0x57
 8003326:	71fb      	strb	r3, [r7, #7]
    command[4] = '2';
 8003328:	2332      	movs	r3, #50	; 0x32
 800332a:	723b      	strb	r3, [r7, #8]
    command[5] = '2';
 800332c:	2332      	movs	r3, #50	; 0x32
 800332e:	727b      	strb	r3, [r7, #9]
    command[6] = '0';
 8003330:	2330      	movs	r3, #48	; 0x30
 8003332:	72bb      	strb	r3, [r7, #10]
    command[7] = '0';
 8003334:	2330      	movs	r3, #48	; 0x30
 8003336:	72fb      	strb	r3, [r7, #11]
    command[8] = bits[0];
 8003338:	7f3b      	ldrb	r3, [r7, #28]
 800333a:	733b      	strb	r3, [r7, #12]
    command[9] = bits[1];
 800333c:	7f7b      	ldrb	r3, [r7, #29]
 800333e:	737b      	strb	r3, [r7, #13]
    command[10] = bits[2];
 8003340:	7fbb      	ldrb	r3, [r7, #30]
 8003342:	73bb      	strb	r3, [r7, #14]
    command[11] = bits[3];
 8003344:	7ffb      	ldrb	r3, [r7, #31]
 8003346:	73fb      	strb	r3, [r7, #15]
    command[12] = ' ';
 8003348:	2320      	movs	r3, #32
 800334a:	743b      	strb	r3, [r7, #16]
    crc32(command, 12, &command[13]);
 800334c:	1d3b      	adds	r3, r7, #4
 800334e:	f103 020d 	add.w	r2, r3, #13
 8003352:	1d3b      	adds	r3, r7, #4
 8003354:	210c      	movs	r1, #12
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fbda 	bl	8003b10 <crc32>
    command[21] = 0x0D;
 800335c:	230d      	movs	r3, #13
 800335e:	767b      	strb	r3, [r7, #25]

    return UHF_WRITE(command, 22);
 8003360:	1d3b      	adds	r3, r7, #4
 8003362:	2116      	movs	r1, #22
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fa8b 	bl	8003880 <UHF_WRITE>
 800336a:	4603      	mov	r3, r0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3738      	adds	r7, #56	; 0x38
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	080106e0 	.word	0x080106e0

08003378 <END_BEACON>:

/**
 * @brief Turns off the beacon.
 */
HAL_StatusTypeDef END_BEACON() {
 8003378:	b580      	push	{r7, lr}
 800337a:	b08e      	sub	sp, #56	; 0x38
 800337c:	af00      	add	r7, sp, #0
    uint8_t data[23];
    uint8_t bits[4];
    HAL_StatusTypeDef status = GET_UHF_STATUS(data);
 800337e:	f107 0320 	add.w	r3, r7, #32
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f932 	bl	80035ec <GET_UHF_STATUS>
 8003388:	4603      	mov	r3, r0
 800338a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status != HAL_OK) {
 800338e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <END_BEACON+0x24>
        return status;
 8003396:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800339a:	e03c      	b.n	8003416 <END_BEACON+0x9e>
    }

    // Perserve other settings and only enable beacon
    bits[0] = data[9];
 800339c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80033a0:	773b      	strb	r3, [r7, #28]
    bits[1] = data[10];
 80033a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80033a6:	777b      	strb	r3, [r7, #29]
    bits[2] = ((data[11] - 0x30) & 0xFB) + 0x30; //set bit 6(BCN) to 0
 80033a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80033ac:	3b30      	subs	r3, #48	; 0x30
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f023 0304 	bic.w	r3, r3, #4
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	3330      	adds	r3, #48	; 0x30
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	77bb      	strb	r3, [r7, #30]
    bits[3] = data[13];
 80033bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033c0:	77fb      	strb	r3, [r7, #31]

    uint8_t command[22];
    command[0] = 'E';
 80033c2:	2345      	movs	r3, #69	; 0x45
 80033c4:	713b      	strb	r3, [r7, #4]
    command[1] = 'S';
 80033c6:	2353      	movs	r3, #83	; 0x53
 80033c8:	717b      	strb	r3, [r7, #5]
    command[2] = '+';
 80033ca:	232b      	movs	r3, #43	; 0x2b
 80033cc:	71bb      	strb	r3, [r7, #6]
    command[3] = 'W';
 80033ce:	2357      	movs	r3, #87	; 0x57
 80033d0:	71fb      	strb	r3, [r7, #7]
    command[4] = '2';
 80033d2:	2332      	movs	r3, #50	; 0x32
 80033d4:	723b      	strb	r3, [r7, #8]
    command[5] = '2';
 80033d6:	2332      	movs	r3, #50	; 0x32
 80033d8:	727b      	strb	r3, [r7, #9]
    command[6] = '0';
 80033da:	2330      	movs	r3, #48	; 0x30
 80033dc:	72bb      	strb	r3, [r7, #10]
    command[7] = '0';
 80033de:	2330      	movs	r3, #48	; 0x30
 80033e0:	72fb      	strb	r3, [r7, #11]
    command[8] = bits[0];
 80033e2:	7f3b      	ldrb	r3, [r7, #28]
 80033e4:	733b      	strb	r3, [r7, #12]
    command[9] = bits[1];
 80033e6:	7f7b      	ldrb	r3, [r7, #29]
 80033e8:	737b      	strb	r3, [r7, #13]
    command[10] = bits[2];
 80033ea:	7fbb      	ldrb	r3, [r7, #30]
 80033ec:	73bb      	strb	r3, [r7, #14]
    command[11] = bits[3];
 80033ee:	7ffb      	ldrb	r3, [r7, #31]
 80033f0:	73fb      	strb	r3, [r7, #15]
    command[12] = ' ';
 80033f2:	2320      	movs	r3, #32
 80033f4:	743b      	strb	r3, [r7, #16]
    crc32(command, 12, &command[13]);
 80033f6:	1d3b      	adds	r3, r7, #4
 80033f8:	f103 020d 	add.w	r2, r3, #13
 80033fc:	1d3b      	adds	r3, r7, #4
 80033fe:	210c      	movs	r1, #12
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fb85 	bl	8003b10 <crc32>
    command[21] = 0x0D;
 8003406:	230d      	movs	r3, #13
 8003408:	767b      	strb	r3, [r7, #25]

    return UHF_WRITE(command, 22);
 800340a:	1d3b      	adds	r3, r7, #4
 800340c:	2116      	movs	r1, #22
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fa36 	bl	8003880 <UHF_WRITE>
 8003414:	4603      	mov	r3, r0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3738      	adds	r7, #56	; 0x38
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <SET_BEACON_PERIOD>:
 * minimum is: 1 second
 * Maximum is: 65535 seconds
 *
 * @param period : The period in seconds for the beacon to be set to.
 */
HAL_StatusTypeDef SET_BEACON_PERIOD(uint16_t period) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b08c      	sub	sp, #48	; 0x30
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	80fb      	strh	r3, [r7, #6]
    uint8_t command[26];
    command[0] = 'E';
 800342a:	2345      	movs	r3, #69	; 0x45
 800342c:	753b      	strb	r3, [r7, #20]
    command[1] = 'S';
 800342e:	2353      	movs	r3, #83	; 0x53
 8003430:	757b      	strb	r3, [r7, #21]
    command[2] = '+';
 8003432:	232b      	movs	r3, #43	; 0x2b
 8003434:	75bb      	strb	r3, [r7, #22]
    command[3] = 'W';
 8003436:	2357      	movs	r3, #87	; 0x57
 8003438:	75fb      	strb	r3, [r7, #23]
    command[4] = '2';
 800343a:	2332      	movs	r3, #50	; 0x32
 800343c:	763b      	strb	r3, [r7, #24]
    command[5] = '2';
 800343e:	2332      	movs	r3, #50	; 0x32
 8003440:	767b      	strb	r3, [r7, #25]
    command[6] = '0';
 8003442:	2330      	movs	r3, #48	; 0x30
 8003444:	76bb      	strb	r3, [r7, #26]
    command[7] = '7';
 8003446:	2337      	movs	r3, #55	; 0x37
 8003448:	76fb      	strb	r3, [r7, #27]
    command[8] = '0';
 800344a:	2330      	movs	r3, #48	; 0x30
 800344c:	773b      	strb	r3, [r7, #28]
    command[9] = '0';
 800344e:	2330      	movs	r3, #48	; 0x30
 8003450:	777b      	strb	r3, [r7, #29]
    command[10] = '0';
 8003452:	2330      	movs	r3, #48	; 0x30
 8003454:	77bb      	strb	r3, [r7, #30]
    command[11] = '0';
 8003456:	2330      	movs	r3, #48	; 0x30
 8003458:	77fb      	strb	r3, [r7, #31]

    char temp[5];
    sprintf(temp, "%04X", period);
 800345a:	88fa      	ldrh	r2, [r7, #6]
 800345c:	f107 030c 	add.w	r3, r7, #12
 8003460:	4910      	ldr	r1, [pc, #64]	; (80034a4 <SET_BEACON_PERIOD+0x84>)
 8003462:	4618      	mov	r0, r3
 8003464:	f00a fd66 	bl	800df34 <siprintf>
 8003468:	68fb      	ldr	r3, [r7, #12]
    memcpy(&command[12], temp, 4);
 800346a:	623b      	str	r3, [r7, #32]

    command[16] = ' ';
 800346c:	2320      	movs	r3, #32
 800346e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    crc32(command, 16, &command[17]);
 8003472:	f107 0314 	add.w	r3, r7, #20
 8003476:	f103 0211 	add.w	r2, r3, #17
 800347a:	f107 0314 	add.w	r3, r7, #20
 800347e:	2110      	movs	r1, #16
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fb45 	bl	8003b10 <crc32>
    command[25] = '\r';
 8003486:	230d      	movs	r3, #13
 8003488:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    return UHF_WRITE(command, 26);
 800348c:	f107 0314 	add.w	r3, r7, #20
 8003490:	211a      	movs	r1, #26
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f9f4 	bl	8003880 <UHF_WRITE>
 8003498:	4603      	mov	r3, r0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3730      	adds	r7, #48	; 0x30
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	0801070c 	.word	0x0801070c

080034a8 <SET_BEACON_TEXT>:
 * @brief This will set the beacon message to any text. Assuming it is within the range of allowed size.
 *
 * @param text : The message to be placed in the beacon.
 * @param size : The size needs to be under 0x62 to fit in the size of endurosat beacon format.
 */
HAL_StatusTypeDef SET_BEACON_TEXT(uint8_t *text, uint8_t size) {
 80034a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034ac:	b089      	sub	sp, #36	; 0x24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	460b      	mov	r3, r1
 80034b4:	70fb      	strb	r3, [r7, #3]
 80034b6:	466b      	mov	r3, sp
 80034b8:	461e      	mov	r6, r3
    if (size >= 0x62) { // To avoid the size limit of 0x62
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	2b61      	cmp	r3, #97	; 0x61
 80034be:	d904      	bls.n	80034ca <SET_BEACON_TEXT+0x22>
        debug_printf("Beacon Text is too long");
 80034c0:	4846      	ldr	r0, [pc, #280]	; (80035dc <SET_BEACON_TEXT+0x134>)
 80034c2:	f000 fa41 	bl	8003948 <debug_printf>
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e082      	b.n	80035d0 <SET_BEACON_TEXT+0x128>
    }

    int cmdSize = 8 + 2 + size + 1 + 8 +
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	3314      	adds	r3, #20
 80034ce:	61bb      	str	r3, [r7, #24]
                  1; // 8 char write cmd, 2 char size, message chars, 1 space, 8 char checksum (crc32), 0x0D

    /* Write command ES+W22FB */
    uint8_t command[cmdSize];
 80034d0:	69b9      	ldr	r1, [r7, #24]
 80034d2:	1e4b      	subs	r3, r1, #1
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	460a      	mov	r2, r1
 80034d8:	2300      	movs	r3, #0
 80034da:	4690      	mov	r8, r2
 80034dc:	4699      	mov	r9, r3
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034f2:	460a      	mov	r2, r1
 80034f4:	2300      	movs	r3, #0
 80034f6:	4614      	mov	r4, r2
 80034f8:	461d      	mov	r5, r3
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	00eb      	lsls	r3, r5, #3
 8003504:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003508:	00e2      	lsls	r2, r4, #3
 800350a:	460b      	mov	r3, r1
 800350c:	3307      	adds	r3, #7
 800350e:	08db      	lsrs	r3, r3, #3
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	ebad 0d03 	sub.w	sp, sp, r3
 8003516:	466b      	mov	r3, sp
 8003518:	3300      	adds	r3, #0
 800351a:	613b      	str	r3, [r7, #16]
    command[0] = 'E';
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2245      	movs	r2, #69	; 0x45
 8003520:	701a      	strb	r2, [r3, #0]
    command[1] = 'S';
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	2253      	movs	r2, #83	; 0x53
 8003526:	705a      	strb	r2, [r3, #1]
    command[2] = '+';
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	222b      	movs	r2, #43	; 0x2b
 800352c:	709a      	strb	r2, [r3, #2]
    command[3] = 'W';
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2257      	movs	r2, #87	; 0x57
 8003532:	70da      	strb	r2, [r3, #3]
    command[4] = '2';
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	2232      	movs	r2, #50	; 0x32
 8003538:	711a      	strb	r2, [r3, #4]
    command[5] = '2';
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	2232      	movs	r2, #50	; 0x32
 800353e:	715a      	strb	r2, [r3, #5]
    command[6] = 'F';
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	2246      	movs	r2, #70	; 0x46
 8003544:	719a      	strb	r2, [r3, #6]
    command[7] = 'B';
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	2242      	movs	r2, #66	; 0x42
 800354a:	71da      	strb	r2, [r3, #7]

    /* Append size to command XX */
    char temp[3]; // 8, 9
    sprintf(temp, "%02X", size); // Make size a string
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	f107 030c 	add.w	r3, r7, #12
 8003552:	4923      	ldr	r1, [pc, #140]	; (80035e0 <SET_BEACON_TEXT+0x138>)
 8003554:	4618      	mov	r0, r3
 8003556:	f00a fced 	bl	800df34 <siprintf>
    memcpy(&command[8], temp, 2); // Append size to command
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	3308      	adds	r3, #8
 800355e:	89ba      	ldrh	r2, [r7, #12]
 8003560:	801a      	strh	r2, [r3, #0]

    /* Append text */
    int i = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
    while (text[i] != '\0') {
 8003566:	e00a      	b.n	800357e <SET_BEACON_TEXT+0xd6>
        command[i + 10] = text[i]; // Start at pos 10
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	441a      	add	r2, r3
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	330a      	adds	r3, #10
 8003572:	7811      	ldrb	r1, [r2, #0]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	54d1      	strb	r1, [r2, r3]
        i++;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	3301      	adds	r3, #1
 800357c:	61fb      	str	r3, [r7, #28]
    while (text[i] != '\0') {
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	4413      	add	r3, r2
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1ee      	bne.n	8003568 <SET_BEACON_TEXT+0xc0>
    }

    /* Add space + checksum to command, 24-31 */
    command[i + 10] = ' '; // 13 + 10 = 23
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	330a      	adds	r3, #10
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	2120      	movs	r1, #32
 8003592:	54d1      	strb	r1, [r2, r3]
    crc32(command, i + 10, &command[i + 11]);
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f103 010a 	add.w	r1, r3, #10
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	330b      	adds	r3, #11
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4413      	add	r3, r2
 80035a2:	461a      	mov	r2, r3
 80035a4:	6938      	ldr	r0, [r7, #16]
 80035a6:	f000 fab3 	bl	8003b10 <crc32>

    /* Append <CR> */
    command[i + 19] = '\r'; // 32
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3313      	adds	r3, #19
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	210d      	movs	r1, #13
 80035b2:	54d1      	strb	r1, [r2, r3]

    /* Send to UHF */
    debug_printf("UHF_Write-ing command:");
 80035b4:	480b      	ldr	r0, [pc, #44]	; (80035e4 <SET_BEACON_TEXT+0x13c>)
 80035b6:	f000 f9c7 	bl	8003948 <debug_printf>
    debug_printf("%s", command);
 80035ba:	6939      	ldr	r1, [r7, #16]
 80035bc:	480a      	ldr	r0, [pc, #40]	; (80035e8 <SET_BEACON_TEXT+0x140>)
 80035be:	f000 f9c3 	bl	8003948 <debug_printf>
    return UHF_WRITE(command, cmdSize);
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	4619      	mov	r1, r3
 80035c8:	6938      	ldr	r0, [r7, #16]
 80035ca:	f000 f959 	bl	8003880 <UHF_WRITE>
 80035ce:	4603      	mov	r3, r0
 80035d0:	46b5      	mov	sp, r6
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3724      	adds	r7, #36	; 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035dc:	08010714 	.word	0x08010714
 80035e0:	0801072c 	.word	0x0801072c
 80035e4:	08010734 	.word	0x08010734
 80035e8:	0801074c 	.word	0x0801074c

080035ec <GET_UHF_STATUS>:
/**
 * @brief Gets the status control word of the uhf and is placed in the data pointer.
 * @param data : A pointer to allow the ESTCC response to be read
 *
 */
HAL_StatusTypeDef GET_UHF_STATUS(uint8_t *data) {
 80035ec:	b5b0      	push	{r4, r5, r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
    uint8_t read_command[] = "ES+R2200 BD888E1F\r";
 80035f4:	4b12      	ldr	r3, [pc, #72]	; (8003640 <GET_UHF_STATUS+0x54>)
 80035f6:	f107 040c 	add.w	r4, r7, #12
 80035fa:	461d      	mov	r5, r3
 80035fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003600:	682b      	ldr	r3, [r5, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	8022      	strh	r2, [r4, #0]
 8003606:	3402      	adds	r4, #2
 8003608:	0c1b      	lsrs	r3, r3, #16
 800360a:	7023      	strb	r3, [r4, #0]
    HAL_StatusTypeDef status = UHF_READ(read_command, data, 18, 23);
 800360c:	f107 000c 	add.w	r0, r7, #12
 8003610:	2317      	movs	r3, #23
 8003612:	2212      	movs	r2, #18
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	f000 f8f5 	bl	8003804 <UHF_READ>
 800361a:	4603      	mov	r3, r0
 800361c:	77fb      	strb	r3, [r7, #31]
    if (data[0] != 'O' || data[1] != 'K') {
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b4f      	cmp	r3, #79	; 0x4f
 8003624:	d104      	bne.n	8003630 <GET_UHF_STATUS+0x44>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3301      	adds	r3, #1
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b4b      	cmp	r3, #75	; 0x4b
 800362e:	d001      	beq.n	8003634 <GET_UHF_STATUS+0x48>
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <GET_UHF_STATUS+0x4a>
    }
    return status;
 8003634:	7ffb      	ldrb	r3, [r7, #31]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3720      	adds	r7, #32
 800363a:	46bd      	mov	sp, r7
 800363c:	bdb0      	pop	{r4, r5, r7, pc}
 800363e:	bf00      	nop
 8003640:	08010750 	.word	0x08010750
 8003644:	00000000 	.word	0x00000000

08003648 <GET_UHF_TEMP>:

/**
 * Reads internal temperature of the UHF in Celsius
 * @param temp: the temperature in Celsius
 */
HAL_StatusTypeDef GET_UHF_TEMP(float *temp) {
 8003648:	b5b0      	push	{r4, r5, r7, lr}
 800364a:	b08c      	sub	sp, #48	; 0x30
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
    uint8_t command[] = "ES+R220A 9A8ACFB5\r";
 8003650:	4b6b      	ldr	r3, [pc, #428]	; (8003800 <GET_UHF_TEMP+0x1b8>)
 8003652:	f107 041c 	add.w	r4, r7, #28
 8003656:	461d      	mov	r5, r3
 8003658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800365a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	8022      	strh	r2, [r4, #0]
 8003662:	3402      	adds	r4, #2
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	7023      	strb	r3, [r4, #0]
    uint8_t response[18];

    HAL_StatusTypeDef status = UHF_READ(command, response, 18, 18);
 8003668:	f107 0108 	add.w	r1, r7, #8
 800366c:	f107 001c 	add.w	r0, r7, #28
 8003670:	2312      	movs	r3, #18
 8003672:	2212      	movs	r2, #18
 8003674:	f000 f8c6 	bl	8003804 <UHF_READ>
 8003678:	4603      	mov	r3, r0
 800367a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    *temp = 0;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
    if (status != HAL_OK) {
 8003686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <GET_UHF_TEMP+0x4c>
        return status;
 800368e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003692:	e0aa      	b.n	80037ea <GET_UHF_TEMP+0x1a2>
    }
    if (response[0] != 'O' || response[1] != 'K') {
 8003694:	7a3b      	ldrb	r3, [r7, #8]
 8003696:	2b4f      	cmp	r3, #79	; 0x4f
 8003698:	d102      	bne.n	80036a0 <GET_UHF_TEMP+0x58>
 800369a:	7a7b      	ldrb	r3, [r7, #9]
 800369c:	2b4b      	cmp	r3, #75	; 0x4b
 800369e:	d001      	beq.n	80036a4 <GET_UHF_TEMP+0x5c>
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0a2      	b.n	80037ea <GET_UHF_TEMP+0x1a2>
    }
    (response[4] - 0x30) <= 9 ? (*temp += (response[4] - 0x30) * 10) : (*temp += (response[4] - 0x37) * 10);
 80036a4:	7b3b      	ldrb	r3, [r7, #12]
 80036a6:	2b39      	cmp	r3, #57	; 0x39
 80036a8:	d813      	bhi.n	80036d2 <GET_UHF_TEMP+0x8a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	ed93 7a00 	vldr	s14, [r3]
 80036b0:	7b3b      	ldrb	r3, [r7, #12]
 80036b2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	edc3 7a00 	vstr	s15, [r3]
 80036d0:	e012      	b.n	80036f8 <GET_UHF_TEMP+0xb0>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	ed93 7a00 	vldr	s14, [r3]
 80036d8:	7b3b      	ldrb	r3, [r7, #12]
 80036da:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	edc3 7a00 	vstr	s15, [r3]
    (response[5] - 0x30) <= 9 ? (*temp += (response[5] - 0x30) * 1) : (*temp += (response[5] - 0x37) * 1);
 80036f8:	7b7b      	ldrb	r3, [r7, #13]
 80036fa:	2b39      	cmp	r3, #57	; 0x39
 80036fc:	d80e      	bhi.n	800371c <GET_UHF_TEMP+0xd4>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	ed93 7a00 	vldr	s14, [r3]
 8003704:	7b7b      	ldrb	r3, [r7, #13]
 8003706:	3b30      	subs	r3, #48	; 0x30
 8003708:	ee07 3a90 	vmov	s15, r3
 800370c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	edc3 7a00 	vstr	s15, [r3]
 800371a:	e00d      	b.n	8003738 <GET_UHF_TEMP+0xf0>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	ed93 7a00 	vldr	s14, [r3]
 8003722:	7b7b      	ldrb	r3, [r7, #13]
 8003724:	3b37      	subs	r3, #55	; 0x37
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800372e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	edc3 7a00 	vstr	s15, [r3]
    (response[7] - 0x30) <= 9 ? (*temp += (response[7] - 0x30) * .1) : (*temp += (response[7] - 0x37) * .1);
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	2b39      	cmp	r3, #57	; 0x39
 800373c:	d820      	bhi.n	8003780 <GET_UHF_TEMP+0x138>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fc ff10 	bl	8000568 <__aeabi_f2d>
 8003748:	4604      	mov	r4, r0
 800374a:	460d      	mov	r5, r1
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	3b30      	subs	r3, #48	; 0x30
 8003750:	4618      	mov	r0, r3
 8003752:	f7fc fef7 	bl	8000544 <__aeabi_i2d>
 8003756:	a328      	add	r3, pc, #160	; (adr r3, 80037f8 <GET_UHF_TEMP+0x1b0>)
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f7fc ff5c 	bl	8000618 <__aeabi_dmul>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4620      	mov	r0, r4
 8003766:	4629      	mov	r1, r5
 8003768:	f7fc fda0 	bl	80002ac <__adddf3>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	f7fd fa28 	bl	8000bc8 <__aeabi_d2f>
 8003778:	4602      	mov	r2, r0
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e01f      	b.n	80037c0 <GET_UHF_TEMP+0x178>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7fc feef 	bl	8000568 <__aeabi_f2d>
 800378a:	4604      	mov	r4, r0
 800378c:	460d      	mov	r5, r1
 800378e:	7bfb      	ldrb	r3, [r7, #15]
 8003790:	3b37      	subs	r3, #55	; 0x37
 8003792:	4618      	mov	r0, r3
 8003794:	f7fc fed6 	bl	8000544 <__aeabi_i2d>
 8003798:	a317      	add	r3, pc, #92	; (adr r3, 80037f8 <GET_UHF_TEMP+0x1b0>)
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	f7fc ff3b 	bl	8000618 <__aeabi_dmul>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4620      	mov	r0, r4
 80037a8:	4629      	mov	r1, r5
 80037aa:	f7fc fd7f 	bl	80002ac <__adddf3>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4610      	mov	r0, r2
 80037b4:	4619      	mov	r1, r3
 80037b6:	f7fd fa07 	bl	8000bc8 <__aeabi_d2f>
 80037ba:	4602      	mov	r2, r0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	601a      	str	r2, [r3, #0]

    if (response[3] == '+')
 80037c0:	7afb      	ldrb	r3, [r7, #11]
 80037c2:	2b2b      	cmp	r3, #43	; 0x2b
 80037c4:	d104      	bne.n	80037d0 <GET_UHF_TEMP+0x188>
        *temp = *temp * 1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	e00a      	b.n	80037e6 <GET_UHF_TEMP+0x19e>
    else if (response[3] == '-')
 80037d0:	7afb      	ldrb	r3, [r7, #11]
 80037d2:	2b2d      	cmp	r3, #45	; 0x2d
 80037d4:	d107      	bne.n	80037e6 <GET_UHF_TEMP+0x19e>
        *temp = *temp * -1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	edd3 7a00 	vldr	s15, [r3]
 80037dc:	eef1 7a67 	vneg.f32	s15, s15
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	edc3 7a00 	vstr	s15, [r3]

    return status;
 80037e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3730      	adds	r7, #48	; 0x30
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bdb0      	pop	{r4, r5, r7, pc}
 80037f2:	bf00      	nop
 80037f4:	f3af 8000 	nop.w
 80037f8:	9999999a 	.word	0x9999999a
 80037fc:	3fb99999 	.word	0x3fb99999
 8003800:	080107c8 	.word	0x080107c8

08003804 <UHF_READ>:
 * @param command  :the command to be used on the transceiver
 * @param data_ptr :A pointer to allow information from the health check to be viewed.
 * @param in_byte  :The size of the command that is being sent
 * @param out_byte : The size of the expected return./How long to listen for.
 */
HAL_StatusTypeDef UHF_READ(uint8_t command[], uint8_t *data_ptr, uint8_t in_byte, uint8_t out_byte) {
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	4611      	mov	r1, r2
 8003810:	461a      	mov	r2, r3
 8003812:	460b      	mov	r3, r1
 8003814:	71fb      	strb	r3, [r7, #7]
 8003816:	4613      	mov	r3, r2
 8003818:	71bb      	strb	r3, [r7, #6]
    osMutexWait(UART_Mutex, 2500);
 800381a:	4b17      	ldr	r3, [pc, #92]	; (8003878 <UHF_READ+0x74>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003822:	4618      	mov	r0, r3
 8003824:	f007 f836 	bl	800a894 <osMutexWait>
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, command, in_byte, UHF_UART_TIMEOUT);
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	b29a      	uxth	r2, r3
 800382c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003830:	68f9      	ldr	r1, [r7, #12]
 8003832:	4812      	ldr	r0, [pc, #72]	; (800387c <UHF_READ+0x78>)
 8003834:	f004 fb9f 	bl	8007f76 <HAL_UART_Transmit>
 8003838:	4603      	mov	r3, r0
 800383a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 800383c:	7dfb      	ldrb	r3, [r7, #23]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d006      	beq.n	8003850 <UHF_READ+0x4c>
        osMutexRelease(UART_Mutex);
 8003842:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <UHF_READ+0x74>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f007 f874 	bl	800a934 <osMutexRelease>
        return status;
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	e00f      	b.n	8003870 <UHF_READ+0x6c>
    }
    status = HAL_UART_Receive(&huart1, data_ptr, out_byte, UHF_UART_TIMEOUT);
 8003850:	79bb      	ldrb	r3, [r7, #6]
 8003852:	b29a      	uxth	r2, r3
 8003854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	4808      	ldr	r0, [pc, #32]	; (800387c <UHF_READ+0x78>)
 800385c:	f004 fc24 	bl	80080a8 <HAL_UART_Receive>
 8003860:	4603      	mov	r3, r0
 8003862:	75fb      	strb	r3, [r7, #23]
    osMutexRelease(UART_Mutex);
 8003864:	4b04      	ldr	r3, [pc, #16]	; (8003878 <UHF_READ+0x74>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f007 f863 	bl	800a934 <osMutexRelease>
    return status;
 800386e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	2000022c 	.word	0x2000022c
 800387c:	200006bc 	.word	0x200006bc

08003880 <UHF_WRITE>:
/**
 * @brief Sends a write command to the UHF over UART
 * @param command  :the command to be used on the transceiver
 * @param in_byte  :The size of the command that is being sent
 */
HAL_StatusTypeDef UHF_WRITE(uint8_t command[], uint8_t in_byte) {
 8003880:	b580      	push	{r7, lr}
 8003882:	b08a      	sub	sp, #40	; 0x28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	70fb      	strb	r3, [r7, #3]
    osMutexWait(UART_Mutex, 2500);
 800388c:	4b28      	ldr	r3, [pc, #160]	; (8003930 <UHF_WRITE+0xb0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003894:	4618      	mov	r0, r3
 8003896:	f006 fffd 	bl	800a894 <osMutexWait>
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, command, in_byte, UHF_UART_TIMEOUT);
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	b29a      	uxth	r2, r3
 800389e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4823      	ldr	r0, [pc, #140]	; (8003934 <UHF_WRITE+0xb4>)
 80038a6:	f004 fb66 	bl	8007f76 <HAL_UART_Transmit>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (status != HAL_OK) {
 80038b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <UHF_WRITE+0x4e>
        debug_printf("UHF_WRITE: UART Tx Fail");
 80038b8:	481f      	ldr	r0, [pc, #124]	; (8003938 <UHF_WRITE+0xb8>)
 80038ba:	f000 f845 	bl	8003948 <debug_printf>
        osMutexRelease(UART_Mutex);
 80038be:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <UHF_WRITE+0xb0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f007 f836 	bl	800a934 <osMutexRelease>
        return status;
 80038c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038cc:	e02b      	b.n	8003926 <UHF_WRITE+0xa6>
    }

    uint8_t data[25];
    status = HAL_UART_Receive(&huart1, data, 25, UHF_UART_TIMEOUT);
 80038ce:	f107 010c 	add.w	r1, r7, #12
 80038d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038d6:	2219      	movs	r2, #25
 80038d8:	4816      	ldr	r0, [pc, #88]	; (8003934 <UHF_WRITE+0xb4>)
 80038da:	f004 fbe5 	bl	80080a8 <HAL_UART_Receive>
 80038de:	4603      	mov	r3, r0
 80038e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    osMutexRelease(UART_Mutex);
 80038e4:	4b12      	ldr	r3, [pc, #72]	; (8003930 <UHF_WRITE+0xb0>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f007 f823 	bl	800a934 <osMutexRelease>
    if (data[0] != 'O' || data[1] != 'K') {
 80038ee:	7b3b      	ldrb	r3, [r7, #12]
 80038f0:	2b4f      	cmp	r3, #79	; 0x4f
 80038f2:	d102      	bne.n	80038fa <UHF_WRITE+0x7a>
 80038f4:	7b7b      	ldrb	r3, [r7, #13]
 80038f6:	2b4b      	cmp	r3, #75	; 0x4b
 80038f8:	d00a      	beq.n	8003910 <UHF_WRITE+0x90>
        debug_printf("UHF_WRITE: UART Rx FAIL");
 80038fa:	4810      	ldr	r0, [pc, #64]	; (800393c <UHF_WRITE+0xbc>)
 80038fc:	f000 f824 	bl	8003948 <debug_printf>
        debug_printf("%s", data); // Error code
 8003900:	f107 030c 	add.w	r3, r7, #12
 8003904:	4619      	mov	r1, r3
 8003906:	480e      	ldr	r0, [pc, #56]	; (8003940 <UHF_WRITE+0xc0>)
 8003908:	f000 f81e 	bl	8003948 <debug_printf>
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e00a      	b.n	8003926 <UHF_WRITE+0xa6>
    }

    debug_printf("%s", data); // Should be "OK"
 8003910:	f107 030c 	add.w	r3, r7, #12
 8003914:	4619      	mov	r1, r3
 8003916:	480a      	ldr	r0, [pc, #40]	; (8003940 <UHF_WRITE+0xc0>)
 8003918:	f000 f816 	bl	8003948 <debug_printf>
    debug_printf("UHF_WRITE: Success");
 800391c:	4809      	ldr	r0, [pc, #36]	; (8003944 <UHF_WRITE+0xc4>)
 800391e:	f000 f813 	bl	8003948 <debug_printf>
    return status;
 8003922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003926:	4618      	mov	r0, r3
 8003928:	3728      	adds	r7, #40	; 0x28
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	2000022c 	.word	0x2000022c
 8003934:	200006bc 	.word	0x200006bc
 8003938:	0801081c 	.word	0x0801081c
 800393c:	08010834 	.word	0x08010834
 8003940:	0801074c 	.word	0x0801074c
 8003944:	0801084c 	.word	0x0801084c

08003948 <debug_printf>:

/**
  * @brief Formats and prints data out on to the debug UART line. Formatting works in standard printf fashion
  * @retval Returns the status of the HAL UART transmission
  */
HAL_StatusTypeDef debug_printf(char* format, ...){
 8003948:	b40f      	push	{r0, r1, r2, r3}
 800394a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
 8003952:	466b      	mov	r3, sp
 8003954:	4698      	mov	r8, r3

    uint32_t bufferSize = 512;
 8003956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800395a:	61bb      	str	r3, [r7, #24]
    uint8_t formatBuffer[bufferSize];
 800395c:	69be      	ldr	r6, [r7, #24]
 800395e:	4633      	mov	r3, r6
 8003960:	3b01      	subs	r3, #1
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	2300      	movs	r3, #0
 8003966:	4634      	mov	r4, r6
 8003968:	461d      	mov	r5, r3
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	00eb      	lsls	r3, r5, #3
 8003974:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003978:	00e2      	lsls	r2, r4, #3
 800397a:	2300      	movs	r3, #0
 800397c:	4630      	mov	r0, r6
 800397e:	4619      	mov	r1, r3
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	00cb      	lsls	r3, r1, #3
 800398a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800398e:	00c2      	lsls	r2, r0, #3
 8003990:	1df3      	adds	r3, r6, #7
 8003992:	08db      	lsrs	r3, r3, #3
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	ebad 0d03 	sub.w	sp, sp, r3
 800399a:	466b      	mov	r3, sp
 800399c:	3300      	adds	r3, #0
 800399e:	613b      	str	r3, [r7, #16]

    va_list args;
    va_start(args, format);
 80039a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039a4:	60bb      	str	r3, [r7, #8]
    int len = vsnprintf(formatBuffer, bufferSize, format, args); //warning due to use of uint8_t instead of int8_t
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039aa:	69b9      	ldr	r1, [r7, #24]
 80039ac:	6938      	ldr	r0, [r7, #16]
 80039ae:	f00a fb0d 	bl	800dfcc <vsniprintf>
 80039b2:	60f8      	str	r0, [r7, #12]
    va_end(args);

    HAL_StatusTypeDef status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	77fb      	strb	r3, [r7, #31]
    if (len > 0) {
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	dd1b      	ble.n	80039f6 <debug_printf+0xae>
        status = HAL_UART_Transmit(&huart6, formatBuffer, len, 1000);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039c6:	6939      	ldr	r1, [r7, #16]
 80039c8:	4810      	ldr	r0, [pc, #64]	; (8003a0c <debug_printf+0xc4>)
 80039ca:	f004 fad4 	bl	8007f76 <HAL_UART_Transmit>
 80039ce:	4603      	mov	r3, r0
 80039d0:	77fb      	strb	r3, [r7, #31]
        uint8_t crlf[] = "\r\n";
 80039d2:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <debug_printf+0xc8>)
 80039d4:	1d3b      	adds	r3, r7, #4
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	4611      	mov	r1, r2
 80039da:	8019      	strh	r1, [r3, #0]
 80039dc:	3302      	adds	r3, #2
 80039de:	0c12      	lsrs	r2, r2, #16
 80039e0:	701a      	strb	r2, [r3, #0]
        status = HAL_UART_Transmit(&huart6, crlf, 2, 1000); //sends a carrige return and a line feed to UART (meant for putty/windows)
 80039e2:	1d39      	adds	r1, r7, #4
 80039e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039e8:	2202      	movs	r2, #2
 80039ea:	4808      	ldr	r0, [pc, #32]	; (8003a0c <debug_printf+0xc4>)
 80039ec:	f004 fac3 	bl	8007f76 <HAL_UART_Transmit>
 80039f0:	4603      	mov	r3, r0
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	e001      	b.n	80039fa <debug_printf+0xb2>
    }
    else{
        status = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 80039fa:	7ffb      	ldrb	r3, [r7, #31]
 80039fc:	46c5      	mov	sp, r8
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a08:	b004      	add	sp, #16
 8003a0a:	4770      	bx	lr
 8003a0c:	200006fc 	.word	0x200006fc
 8003a10:	08010860 	.word	0x08010860

08003a14 <debug_led_green>:
/**
 * Flash the Green LED located on the OBC
 * @param count - The number of cycles to flash
 * @param period - The amount of time in milliseconds between LED states
 */
void debug_led_green(int count, int period){
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
    int i;
    for (i = 0; i < count; ++i)
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	e016      	b.n	8003a52 <debug_led_green+0x3e>
    {
        GREEN_LED_ON();
 8003a24:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <debug_led_green+0x50>)
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	4a0e      	ldr	r2, [pc, #56]	; (8003a64 <debug_led_green+0x50>)
 8003a2a:	f043 0310 	orr.w	r3, r3, #16
 8003a2e:	6153      	str	r3, [r2, #20]
        HAL_Delay(period);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f9d0 	bl	8003dd8 <HAL_Delay>
        GREEN_LED_OFF();
 8003a38:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <debug_led_green+0x50>)
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	4a09      	ldr	r2, [pc, #36]	; (8003a64 <debug_led_green+0x50>)
 8003a3e:	f023 0310 	bic.w	r3, r3, #16
 8003a42:	6153      	str	r3, [r2, #20]
        HAL_Delay(period);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 f9c6 	bl	8003dd8 <HAL_Delay>
    for (i = 0; i < count; ++i)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	dbe4      	blt.n	8003a24 <debug_led_green+0x10>
    }
}
 8003a5a:	bf00      	nop
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40020800 	.word	0x40020800

08003a68 <debug_led_amber>:
/**
 * Flash the Amber LED located on the OBC
 * @param count - The number of cycles to flash
 * @param period - The amount of time in milliseconds between LED states
 */
void debug_led_amber(int count, int period){
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
    int i;
    for (i = 0; i < count; ++i)
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e016      	b.n	8003aa6 <debug_led_amber+0x3e>
    {
        AMBER_LED_ON();
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <debug_led_amber+0x50>)
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	4a0e      	ldr	r2, [pc, #56]	; (8003ab8 <debug_led_amber+0x50>)
 8003a7e:	f043 0320 	orr.w	r3, r3, #32
 8003a82:	6153      	str	r3, [r2, #20]
        HAL_Delay(period);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 f9a6 	bl	8003dd8 <HAL_Delay>
        AMBER_LED_OFF();
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <debug_led_amber+0x50>)
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	4a09      	ldr	r2, [pc, #36]	; (8003ab8 <debug_led_amber+0x50>)
 8003a92:	f023 0320 	bic.w	r3, r3, #32
 8003a96:	6153      	str	r3, [r2, #20]
        HAL_Delay(period);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f99c 	bl	8003dd8 <HAL_Delay>
    for (i = 0; i < count; ++i)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	dbe4      	blt.n	8003a78 <debug_led_amber+0x10>
    }
}
 8003aae:	bf00      	nop
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40020800 	.word	0x40020800

08003abc <FloatToUnsigned16bits>:
  * @brief Converts a float into a uint16_t
  * @param bytes: an array of bytes the same size as a float in bytes
  * @param float_value: the float value to convert into a uint16_t
  * @retval The 16 bit unsigned integer
  */
uint16_t FloatToUnsigned16bits(float float_value){
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t x = *((uint32_t*)&float_value);
 8003ac6:	1d3b      	adds	r3, r7, #4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60fb      	str	r3, [r7, #12]
    return ((x>>16)&0x8000)|((((x&0x7f800000)-0x38000000)>>13)&0x7c00)|((x>>13)&0x03ff);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	0c1b      	lsrs	r3, r3, #16
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ad6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 8003ae2:	f103 4348 	add.w	r3, r3, #3355443200	; 0xc8000000
 8003ae6:	0b5b      	lsrs	r3, r3, #13
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	4313      	orrs	r3, r2
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	0b5b      	lsrs	r3, r3, #13
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	4313      	orrs	r3, r2
 8003b02:	b29b      	uxth	r3, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <crc32>:
 * @brief Calculates the crc32 value for the message
 * @param message: contains the message to be used for calculation of the crc32.
 * @param crc_ascii: contains the crc value as an 8 byte string
 * @retval returns a uint32_t to as the value of the crc32.
 */
uint32_t crc32(uint8_t* message, int length, uint8_t* crc_ascii) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	; 0x28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
   int i, j;
   uint32_t byte, crc, mask;

   i = 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
   crc = 0xFFFFFFFF;
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295
 8003b24:	61fb      	str	r3, [r7, #28]
   while (i < length) {
 8003b26:	e020      	b.n	8003b6a <crc32+0x5a>
      byte = message[i];                //get the next byte of message
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	61bb      	str	r3, [r7, #24]
      crc = crc ^ byte;                 //^ is bitwise XOR
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	4053      	eors	r3, r2
 8003b38:	61fb      	str	r3, [r7, #28]
      for (j = 7; j >= 0; j--) {
 8003b3a:	2307      	movs	r3, #7
 8003b3c:	623b      	str	r3, [r7, #32]
 8003b3e:	e00e      	b.n	8003b5e <crc32+0x4e>
         mask = -(crc & 1);     // make mask
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	425b      	negs	r3, r3
 8003b48:	617b      	str	r3, [r7, #20]
         crc = (crc >> 1) ^ (0xEDB88320 & mask);  //shift crc and apply mask
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	085a      	lsrs	r2, r3, #1
 8003b4e:	6979      	ldr	r1, [r7, #20]
 8003b50:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <crc32+0x7c>)
 8003b52:	400b      	ands	r3, r1
 8003b54:	4053      	eors	r3, r2
 8003b56:	61fb      	str	r3, [r7, #28]
      for (j = 7; j >= 0; j--) {
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	623b      	str	r3, [r7, #32]
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	daed      	bge.n	8003b40 <crc32+0x30>
      }
      i++;
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	3301      	adds	r3, #1
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
   while (i < length) {
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	dbda      	blt.n	8003b28 <crc32+0x18>
   }

   crc = ~crc;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	43db      	mvns	r3, r3
 8003b76:	61fb      	str	r3, [r7, #28]
   sprintf(crc_ascii, "%lX", crc);
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	4905      	ldr	r1, [pc, #20]	; (8003b90 <crc32+0x80>)
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f00a f9d9 	bl	800df34 <siprintf>
   return crc;
 8003b82:	69fb      	ldr	r3, [r7, #28]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3728      	adds	r7, #40	; 0x28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	edb88320 	.word	0xedb88320
 8003b90:	080108b8 	.word	0x080108b8

08003b94 <main>:

/**
 * CySat 1 Mission Execution
 */
int main(void)
{
 8003b94:	b5b0      	push	{r4, r5, r7, lr}
 8003b96:	b09a      	sub	sp, #104	; 0x68
 8003b98:	af00      	add	r7, sp, #0
    debug_printf("ITS RUNNING!");
 8003b9a:	4835      	ldr	r0, [pc, #212]	; (8003c70 <main+0xdc>)
 8003b9c:	f7ff fed4 	bl	8003948 <debug_printf>
    //SCB->VTOR = APPL_ADDRESS;
    //debug_led_amber(5,500);

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8003ba0:	f000 f8de 	bl	8003d60 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 8003ba4:	f005 fdd6 	bl	8009754 <SystemClock_Config>

    //HAL_Delay(INITIAL_WAIT); // Delay for the specified 30 minutes

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8003ba8:	f005 fe56 	bl	8009858 <MX_GPIO_Init>
    MX_I2C1_Init();
 8003bac:	f005 fff0 	bl	8009b90 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8003bb0:	f006 f866 	bl	8009c80 <MX_USART1_UART_Init>
    MX_UART4_Init();
 8003bb4:	f006 f83a 	bl	8009c2c <MX_UART4_Init>
    MX_USART6_UART_Init();
 8003bb8:	f006 f88c 	bl	8009cd4 <MX_USART6_UART_Init>
    MX_SDIO_SD_Init();
 8003bbc:	f006 f816 	bl	8009bec <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 8003bc0:	f006 f98e 	bl	8009ee0 <MX_FATFS_Init>
    // Commands the start of data reception because I can't define it in AppTasks.c without having to mess around with #including stuff
    //HAL_UART_Receive_IT(&huart6,GroundStationRxBuffer, 4);
    //HAL_UART_Receive_IT(&huart1,GroundStationRxBuffer, 4);

    /* Initialize task threads */
    osThreadDef(myMainTask, Main_Task, osPriorityRealtime, 0, 512);
 8003bc4:	4b2b      	ldr	r3, [pc, #172]	; (8003c74 <main+0xe0>)
 8003bc6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8003bca:	461d      	mov	r5, r3
 8003bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bd0:	682b      	ldr	r3, [r5, #0]
 8003bd2:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myMainTask), NULL);
 8003bd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bd8:	2100      	movs	r1, #0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f006 fe12 	bl	800a804 <osThreadCreate>

    osThreadDef(myUHFRxTask, UHF_Rx_Task, osPriorityNormal, 0, 512);
 8003be0:	4b25      	ldr	r3, [pc, #148]	; (8003c78 <main+0xe4>)
 8003be2:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003be6:	461d      	mov	r5, r3
 8003be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myUHFRxTask), NULL);
 8003bf0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f006 fe04 	bl	800a804 <osThreadCreate>

    osThreadDef(myUHFTxTask, UHF_Tx_Task, osPriorityNormal, 0, 512);
 8003bfc:	4b1f      	ldr	r3, [pc, #124]	; (8003c7c <main+0xe8>)
 8003bfe:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8003c02:	461d      	mov	r5, r3
 8003c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c08:	682b      	ldr	r3, [r5, #0]
 8003c0a:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myUHFTxTask), NULL);
 8003c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c10:	2100      	movs	r1, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f006 fdf6 	bl	800a804 <osThreadCreate>

    osThreadDef(myADCSTask, ADCS_Task, osPriorityNormal, 0, 1024);
 8003c18:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <main+0xec>)
 8003c1a:	f107 0418 	add.w	r4, r7, #24
 8003c1e:	461d      	mov	r5, r3
 8003c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c24:	682b      	ldr	r3, [r5, #0]
 8003c26:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myADCSTask), NULL);
 8003c28:	f107 0318 	add.w	r3, r7, #24
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f006 fde8 	bl	800a804 <osThreadCreate>

    osThreadDef(myBatteryCapacityTask, BatteryCapacity_Task, osPriorityNormal, 0, 256);
 8003c34:	4b13      	ldr	r3, [pc, #76]	; (8003c84 <main+0xf0>)
 8003c36:	1d3c      	adds	r4, r7, #4
 8003c38:	461d      	mov	r5, r3
 8003c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c3e:	682b      	ldr	r3, [r5, #0]
 8003c40:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myBatteryCapacityTask), NULL);
 8003c42:	1d3b      	adds	r3, r7, #4
 8003c44:	2100      	movs	r1, #0
 8003c46:	4618      	mov	r0, r3
 8003c48:	f006 fddc 	bl	800a804 <osThreadCreate>

    /* Start scheduler */
    osKernelStart();
 8003c4c:	f006 fdc3 	bl	800a7d6 <osKernelStart>
    // Enable Transparent Mode
    // TODO: Send command to UHF transceiver to enable transparent mode

    // Detumbling Sequence
    // TODO: Detumbling functions (ADCS) go here
    debug_printf("Beginning detumbling sequence (unfinished)");
 8003c50:	480d      	ldr	r0, [pc, #52]	; (8003c88 <main+0xf4>)
 8003c52:	f7ff fe79 	bl	8003948 <debug_printf>
    */

   // HAL_Delay(15000); // Delay for 15 seconds to allow ADCS to boot-up in application mode

    /* Receive via STM UART */
    GroundStationRxDataLength = 4;
 8003c56:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <main+0xf8>)
 8003c58:	2204      	movs	r2, #4
 8003c5a:	601a      	str	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart6, (uint8_t*) &GroundStationRxBuffer, 4);
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	490c      	ldr	r1, [pc, #48]	; (8003c90 <main+0xfc>)
 8003c60:	480c      	ldr	r0, [pc, #48]	; (8003c94 <main+0x100>)
 8003c62:	f004 facd 	bl	8008200 <HAL_UART_Receive_IT>
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3768      	adds	r7, #104	; 0x68
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c70:	08010904 	.word	0x08010904
 8003c74:	08010940 	.word	0x08010940
 8003c78:	08010954 	.word	0x08010954
 8003c7c:	08010968 	.word	0x08010968
 8003c80:	0801097c 	.word	0x0801097c
 8003c84:	08010990 	.word	0x08010990
 8003c88:	08010914 	.word	0x08010914
 8003c8c:	2000021c 	.word	0x2000021c
 8003c90:	20000214 	.word	0x20000214
 8003c94:	200006fc 	.word	0x200006fc

08003c98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a04      	ldr	r2, [pc, #16]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d101      	bne.n	8003cae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003caa:	f000 f87b 	bl	8003da4 <HAL_IncTick>
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40010000 	.word	0x40010000

08003cbc <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
#ifdef DEBUG_ENABLE
  while(1)
  {
      debug_led_green(5, 2000);
 8003cc0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003cc4:	2005      	movs	r0, #5
 8003cc6:	f7ff fea5 	bl	8003a14 <debug_led_green>
      debug_led_amber(5, 2000);
 8003cca:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003cce:	2005      	movs	r0, #5
 8003cd0:	f7ff feca 	bl	8003a68 <debug_led_amber>
      debug_led_green(5, 2000);
 8003cd4:	e7f4      	b.n	8003cc0 <Error_Handler+0x4>
	...

08003cd8 <HAL_UART_RxCpltCallback>:
{
    Error_Handler();
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
    if(huart == &huart6){ //OBC connected to Payload/USB
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a1c      	ldr	r2, [pc, #112]	; (8003d54 <HAL_UART_RxCpltCallback+0x7c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d116      	bne.n	8003d16 <HAL_UART_RxCpltCallback+0x3e>
        if(handleCySatPacket(parseCySatPacket(GroundStationRxBuffer)) == -1){ //error occurred
 8003ce8:	f107 0308 	add.w	r3, r7, #8
 8003cec:	491a      	ldr	r1, [pc, #104]	; (8003d58 <HAL_UART_RxCpltCallback+0x80>)
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fd fa94 	bl	800121c <parseCySatPacket>
 8003cf4:	f107 0308 	add.w	r3, r7, #8
 8003cf8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003cfc:	f7fe fa6a 	bl	80021d4 <handleCySatPacket>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d06:	d101      	bne.n	8003d0c <HAL_UART_RxCpltCallback+0x34>
            sendErrorPacket();
 8003d08:	f7fe fa3e 	bl	8002188 <sendErrorPacket>
        }
        HAL_UART_Receive_IT(&huart6,GroundStationRxBuffer, 4);
 8003d0c:	2204      	movs	r2, #4
 8003d0e:	4912      	ldr	r1, [pc, #72]	; (8003d58 <HAL_UART_RxCpltCallback+0x80>)
 8003d10:	4810      	ldr	r0, [pc, #64]	; (8003d54 <HAL_UART_RxCpltCallback+0x7c>)
 8003d12:	f004 fa75 	bl	8008200 <HAL_UART_Receive_IT>
    }
    if(huart == &huart1){ //I think this is for the UHF transceiver but I'm not sure -Steven
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a10      	ldr	r2, [pc, #64]	; (8003d5c <HAL_UART_RxCpltCallback+0x84>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d116      	bne.n	8003d4c <HAL_UART_RxCpltCallback+0x74>
        if(handleCySatPacket(parseCySatPacket(GroundStationRxBuffer)) == -1){ //error occurred
 8003d1e:	f107 0314 	add.w	r3, r7, #20
 8003d22:	490d      	ldr	r1, [pc, #52]	; (8003d58 <HAL_UART_RxCpltCallback+0x80>)
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fd fa79 	bl	800121c <parseCySatPacket>
 8003d2a:	f107 0314 	add.w	r3, r7, #20
 8003d2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d32:	f7fe fa4f 	bl	80021d4 <handleCySatPacket>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d101      	bne.n	8003d42 <HAL_UART_RxCpltCallback+0x6a>
            sendErrorPacket();
 8003d3e:	f7fe fa23 	bl	8002188 <sendErrorPacket>
        }
        HAL_UART_Receive_IT(&huart1,GroundStationRxBuffer, 4);
 8003d42:	2204      	movs	r2, #4
 8003d44:	4904      	ldr	r1, [pc, #16]	; (8003d58 <HAL_UART_RxCpltCallback+0x80>)
 8003d46:	4805      	ldr	r0, [pc, #20]	; (8003d5c <HAL_UART_RxCpltCallback+0x84>)
 8003d48:	f004 fa5a 	bl	8008200 <HAL_UART_Receive_IT>
    }
}
 8003d4c:	bf00      	nop
 8003d4e:	3720      	adds	r7, #32
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	200006fc 	.word	0x200006fc
 8003d58:	20000214 	.word	0x20000214
 8003d5c:	200006bc 	.word	0x200006bc

08003d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d64:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_Init+0x40>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a0d      	ldr	r2, [pc, #52]	; (8003da0 <HAL_Init+0x40>)
 8003d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <HAL_Init+0x40>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <HAL_Init+0x40>)
 8003d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d7c:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <HAL_Init+0x40>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <HAL_Init+0x40>)
 8003d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d88:	2003      	movs	r0, #3
 8003d8a:	f000 f90f 	bl	8003fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d8e:	200f      	movs	r0, #15
 8003d90:	f006 fb9a 	bl	800a4c8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003d94:	f006 f9bc 	bl	800a110 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023c00 	.word	0x40023c00

08003da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  uwTick++;
 8003da8:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <HAL_IncTick+0x18>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3301      	adds	r3, #1
 8003dae:	4a03      	ldr	r2, [pc, #12]	; (8003dbc <HAL_IncTick+0x18>)
 8003db0:	6013      	str	r3, [r2, #0]
}
 8003db2:	bf00      	nop
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	20000254 	.word	0x20000254

08003dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8003dc4:	4b03      	ldr	r3, [pc, #12]	; (8003dd4 <HAL_GetTick+0x14>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	20000254 	.word	0x20000254

08003dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003de0:	f7ff ffee 	bl	8003dc0 <HAL_GetTick>
 8003de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df0:	d002      	beq.n	8003df8 <HAL_Delay+0x20>
  {
     wait++;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3301      	adds	r3, #1
 8003df6:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003df8:	bf00      	nop
 8003dfa:	f7ff ffe1 	bl	8003dc0 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d8f7      	bhi.n	8003dfa <HAL_Delay+0x22>
  {
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	bf00      	nop
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e24:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <NVIC_SetPriorityGrouping+0x44>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e30:	4013      	ands	r3, r2
 8003e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e46:	4a04      	ldr	r2, [pc, #16]	; (8003e58 <NVIC_SetPriorityGrouping+0x44>)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	60d3      	str	r3, [r2, #12]
}
 8003e4c:	bf00      	nop
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	e000ed00 	.word	0xe000ed00

08003e5c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e60:	4b04      	ldr	r3, [pc, #16]	; (8003e74 <NVIC_GetPriorityGrouping+0x18>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	0a1b      	lsrs	r3, r3, #8
 8003e66:	f003 0307 	and.w	r3, r3, #7
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	e000ed00 	.word	0xe000ed00

08003e78 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	4603      	mov	r3, r0
 8003e80:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	f003 021f 	and.w	r2, r3, #31
 8003e88:	4907      	ldr	r1, [pc, #28]	; (8003ea8 <NVIC_EnableIRQ+0x30>)
 8003e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	2001      	movs	r0, #1
 8003e92:	fa00 f202 	lsl.w	r2, r0, r2
 8003e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	e000e100 	.word	0xe000e100

08003eac <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	6039      	str	r1, [r7, #0]
 8003eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	da0b      	bge.n	8003ed8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	490c      	ldr	r1, [pc, #48]	; (8003ef8 <NVIC_SetPriority+0x4c>)
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	3b04      	subs	r3, #4
 8003ece:	0112      	lsls	r2, r2, #4
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ed6:	e009      	b.n	8003eec <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	4907      	ldr	r1, [pc, #28]	; (8003efc <NVIC_SetPriority+0x50>)
 8003ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee2:	0112      	lsls	r2, r2, #4
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	e000ed00 	.word	0xe000ed00
 8003efc:	e000e100 	.word	0xe000e100

08003f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b089      	sub	sp, #36	; 0x24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f1c3 0307 	rsb	r3, r3, #7
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	bf28      	it	cs
 8003f1e:	2304      	movcs	r3, #4
 8003f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	3304      	adds	r3, #4
 8003f26:	2b06      	cmp	r3, #6
 8003f28:	d902      	bls.n	8003f30 <NVIC_EncodePriority+0x30>
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	3b03      	subs	r3, #3
 8003f2e:	e000      	b.n	8003f32 <NVIC_EncodePriority+0x32>
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f34:	f04f 32ff 	mov.w	r2, #4294967295
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43da      	mvns	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	401a      	ands	r2, r3
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f48:	f04f 31ff 	mov.w	r1, #4294967295
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f52:	43d9      	mvns	r1, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f58:	4313      	orrs	r3, r2
         );
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3724      	adds	r7, #36	; 0x24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f78:	d301      	bcc.n	8003f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e00f      	b.n	8003f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f7e:	4a0a      	ldr	r2, [pc, #40]	; (8003fa8 <SysTick_Config+0x40>)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f86:	210f      	movs	r1, #15
 8003f88:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8c:	f7ff ff8e 	bl	8003eac <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f90:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <SysTick_Config+0x40>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f96:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <SysTick_Config+0x40>)
 8003f98:	2207      	movs	r2, #7
 8003f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	e000e010 	.word	0xe000e010

08003fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff ff2d 	bl	8003e14 <NVIC_SetPriorityGrouping>
}
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b086      	sub	sp, #24
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	4603      	mov	r3, r0
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	607a      	str	r2, [r7, #4]
 8003fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fd4:	f7ff ff42 	bl	8003e5c <NVIC_GetPriorityGrouping>
 8003fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	6978      	ldr	r0, [r7, #20]
 8003fe0:	f7ff ff8e 	bl	8003f00 <NVIC_EncodePriority>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fea:	4611      	mov	r1, r2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff ff5d 	bl	8003eac <NVIC_SetPriority>
}
 8003ff2:	bf00      	nop
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	4603      	mov	r3, r0
 8004002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff ff35 	bl	8003e78 <NVIC_EnableIRQ>
}
 800400e:	bf00      	nop
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff ffa2 	bl	8003f68 <SysTick_Config>
 8004024:	4603      	mov	r3, r0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b04      	cmp	r3, #4
 800403c:	d106      	bne.n	800404c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800403e:	4b09      	ldr	r3, [pc, #36]	; (8004064 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a08      	ldr	r2, [pc, #32]	; (8004064 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004044:	f043 0304 	orr.w	r3, r3, #4
 8004048:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800404a:	e005      	b.n	8004058 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a04      	ldr	r2, [pc, #16]	; (8004064 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004052:	f023 0304 	bic.w	r3, r3, #4
 8004056:	6013      	str	r3, [r2, #0]
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	e000e010 	.word	0xe000e010

08004068 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d004      	beq.n	8004086 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2280      	movs	r2, #128	; 0x80
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e00c      	b.n	80040a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2205      	movs	r2, #5
 800408a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040b8:	4b8e      	ldr	r3, [pc, #568]	; (80042f4 <HAL_DMA_IRQHandler+0x248>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a8e      	ldr	r2, [pc, #568]	; (80042f8 <HAL_DMA_IRQHandler+0x24c>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	0a9b      	lsrs	r3, r3, #10
 80040c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d6:	2208      	movs	r2, #8
 80040d8:	409a      	lsls	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4013      	ands	r3, r2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d01a      	beq.n	8004118 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d013      	beq.n	8004118 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0204 	bic.w	r2, r2, #4
 80040fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004104:	2208      	movs	r2, #8
 8004106:	409a      	lsls	r2, r3
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004110:	f043 0201 	orr.w	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411c:	4a77      	ldr	r2, [pc, #476]	; (80042fc <HAL_DMA_IRQHandler+0x250>)
 800411e:	409a      	lsls	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4013      	ands	r3, r2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d012      	beq.n	800414e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00b      	beq.n	800414e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413a:	4a70      	ldr	r2, [pc, #448]	; (80042fc <HAL_DMA_IRQHandler+0x250>)
 800413c:	409a      	lsls	r2, r3
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	f043 0202 	orr.w	r2, r3, #2
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004152:	4a6b      	ldr	r2, [pc, #428]	; (8004300 <HAL_DMA_IRQHandler+0x254>)
 8004154:	409a      	lsls	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4013      	ands	r3, r2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d012      	beq.n	8004184 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00b      	beq.n	8004184 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004170:	4a63      	ldr	r2, [pc, #396]	; (8004300 <HAL_DMA_IRQHandler+0x254>)
 8004172:	409a      	lsls	r2, r3
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417c:	f043 0204 	orr.w	r2, r3, #4
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	2210      	movs	r2, #16
 800418a:	409a      	lsls	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4013      	ands	r3, r2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d043      	beq.n	800421c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d03c      	beq.n	800421c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a6:	2210      	movs	r2, #16
 80041a8:	409a      	lsls	r2, r3
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d018      	beq.n	80041ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d108      	bne.n	80041dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d024      	beq.n	800421c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
 80041da:	e01f      	b.n	800421c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01b      	beq.n	800421c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	4798      	blx	r3
 80041ec:	e016      	b.n	800421c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d107      	bne.n	800420c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0208 	bic.w	r2, r2, #8
 800420a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004220:	2220      	movs	r2, #32
 8004222:	409a      	lsls	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4013      	ands	r3, r2
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8093 	beq.w	8004354 <HAL_DMA_IRQHandler+0x2a8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 808b 	beq.w	8004354 <HAL_DMA_IRQHandler+0x2a8>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004242:	2220      	movs	r2, #32
 8004244:	409a      	lsls	r2, r3
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b05      	cmp	r3, #5
 8004254:	d137      	bne.n	80042c6 <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0216 	bic.w	r2, r2, #22
 8004264:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695a      	ldr	r2, [r3, #20]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004274:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d103      	bne.n	8004286 <HAL_DMA_IRQHandler+0x1da>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004282:	2b00      	cmp	r3, #0
 8004284:	d007      	beq.n	8004296 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0208 	bic.w	r2, r2, #8
 8004294:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429a:	223f      	movs	r2, #63	; 0x3f
 800429c:	409a      	lsls	r2, r3
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 8082 	beq.w	80043c0 <HAL_DMA_IRQHandler+0x314>
        {
          hdma->XferAbortCallback(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	4798      	blx	r3
        }
        return;
 80042c4:	e07c      	b.n	80043c0 <HAL_DMA_IRQHandler+0x314>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d020      	beq.n	8004316 <HAL_DMA_IRQHandler+0x26a>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d110      	bne.n	8004304 <HAL_DMA_IRQHandler+0x258>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d034      	beq.n	8004354 <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	4798      	blx	r3
 80042f2:	e02f      	b.n	8004354 <HAL_DMA_IRQHandler+0x2a8>
 80042f4:	20000014 	.word	0x20000014
 80042f8:	1b4e81b5 	.word	0x1b4e81b5
 80042fc:	00800001 	.word	0x00800001
 8004300:	00800004 	.word	0x00800004
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d023      	beq.n	8004354 <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
 8004314:	e01e      	b.n	8004354 <HAL_DMA_IRQHandler+0x2a8>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10f      	bne.n	8004344 <HAL_DMA_IRQHandler+0x298>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0210 	bic.w	r2, r2, #16
 8004332:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_DMA_IRQHandler+0x2a8>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	2b00      	cmp	r3, #0
 800435a:	d032      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x316>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d022      	beq.n	80043ae <HAL_DMA_IRQHandler+0x302>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2205      	movs	r2, #5
 800436c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0201 	bic.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	3301      	adds	r3, #1
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	429a      	cmp	r2, r3
 800438a:	d307      	bcc.n	800439c <HAL_DMA_IRQHandler+0x2f0>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f2      	bne.n	8004380 <HAL_DMA_IRQHandler+0x2d4>
 800439a:	e000      	b.n	800439e <HAL_DMA_IRQHandler+0x2f2>
          break;
 800439c:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x316>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
 80043be:	e000      	b.n	80043c2 <HAL_DMA_IRQHandler+0x316>
        return;
 80043c0:	bf00      	nop
    }
  }
}
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b089      	sub	sp, #36	; 0x24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043da:	2300      	movs	r3, #0
 80043dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043de:	2300      	movs	r3, #0
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	e177      	b.n	80046d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043e4:	2201      	movs	r2, #1
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4013      	ands	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	f040 8166 	bne.w	80046ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d003      	beq.n	8004412 <HAL_GPIO_Init+0x4a>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b12      	cmp	r3, #18
 8004410:	d123      	bne.n	800445a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	08da      	lsrs	r2, r3, #3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3208      	adds	r2, #8
 800441a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800441e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	220f      	movs	r2, #15
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43db      	mvns	r3, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	4013      	ands	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4313      	orrs	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	08da      	lsrs	r2, r3, #3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3208      	adds	r2, #8
 8004454:	69b9      	ldr	r1, [r7, #24]
 8004456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	2203      	movs	r2, #3
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	43db      	mvns	r3, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4013      	ands	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 0203 	and.w	r2, r3, #3
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4313      	orrs	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d00b      	beq.n	80044ae <HAL_GPIO_Init+0xe6>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d007      	beq.n	80044ae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044a2:	2b11      	cmp	r3, #17
 80044a4:	d003      	beq.n	80044ae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b12      	cmp	r3, #18
 80044ac:	d130      	bne.n	8004510 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	2203      	movs	r2, #3
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43db      	mvns	r3, r3
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	4013      	ands	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044e4:	2201      	movs	r2, #1
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	43db      	mvns	r3, r3
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	4013      	ands	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	091b      	lsrs	r3, r3, #4
 80044fa:	f003 0201 	and.w	r2, r3, #1
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	4313      	orrs	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	2203      	movs	r2, #3
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	43db      	mvns	r3, r3
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	4013      	ands	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80c0 	beq.w	80046ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	4b66      	ldr	r3, [pc, #408]	; (80046ec <HAL_GPIO_Init+0x324>)
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	4a65      	ldr	r2, [pc, #404]	; (80046ec <HAL_GPIO_Init+0x324>)
 8004558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800455c:	6453      	str	r3, [r2, #68]	; 0x44
 800455e:	4b63      	ldr	r3, [pc, #396]	; (80046ec <HAL_GPIO_Init+0x324>)
 8004560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800456a:	4a61      	ldr	r2, [pc, #388]	; (80046f0 <HAL_GPIO_Init+0x328>)
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	089b      	lsrs	r3, r3, #2
 8004570:	3302      	adds	r3, #2
 8004572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	220f      	movs	r2, #15
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	43db      	mvns	r3, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4013      	ands	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a58      	ldr	r2, [pc, #352]	; (80046f4 <HAL_GPIO_Init+0x32c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d037      	beq.n	8004606 <HAL_GPIO_Init+0x23e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a57      	ldr	r2, [pc, #348]	; (80046f8 <HAL_GPIO_Init+0x330>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d031      	beq.n	8004602 <HAL_GPIO_Init+0x23a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a56      	ldr	r2, [pc, #344]	; (80046fc <HAL_GPIO_Init+0x334>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d02b      	beq.n	80045fe <HAL_GPIO_Init+0x236>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a55      	ldr	r2, [pc, #340]	; (8004700 <HAL_GPIO_Init+0x338>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d025      	beq.n	80045fa <HAL_GPIO_Init+0x232>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a54      	ldr	r2, [pc, #336]	; (8004704 <HAL_GPIO_Init+0x33c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d01f      	beq.n	80045f6 <HAL_GPIO_Init+0x22e>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a53      	ldr	r2, [pc, #332]	; (8004708 <HAL_GPIO_Init+0x340>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d019      	beq.n	80045f2 <HAL_GPIO_Init+0x22a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a52      	ldr	r2, [pc, #328]	; (800470c <HAL_GPIO_Init+0x344>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d013      	beq.n	80045ee <HAL_GPIO_Init+0x226>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a51      	ldr	r2, [pc, #324]	; (8004710 <HAL_GPIO_Init+0x348>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00d      	beq.n	80045ea <HAL_GPIO_Init+0x222>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a50      	ldr	r2, [pc, #320]	; (8004714 <HAL_GPIO_Init+0x34c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d007      	beq.n	80045e6 <HAL_GPIO_Init+0x21e>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a4f      	ldr	r2, [pc, #316]	; (8004718 <HAL_GPIO_Init+0x350>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d101      	bne.n	80045e2 <HAL_GPIO_Init+0x21a>
 80045de:	2309      	movs	r3, #9
 80045e0:	e012      	b.n	8004608 <HAL_GPIO_Init+0x240>
 80045e2:	230a      	movs	r3, #10
 80045e4:	e010      	b.n	8004608 <HAL_GPIO_Init+0x240>
 80045e6:	2308      	movs	r3, #8
 80045e8:	e00e      	b.n	8004608 <HAL_GPIO_Init+0x240>
 80045ea:	2307      	movs	r3, #7
 80045ec:	e00c      	b.n	8004608 <HAL_GPIO_Init+0x240>
 80045ee:	2306      	movs	r3, #6
 80045f0:	e00a      	b.n	8004608 <HAL_GPIO_Init+0x240>
 80045f2:	2305      	movs	r3, #5
 80045f4:	e008      	b.n	8004608 <HAL_GPIO_Init+0x240>
 80045f6:	2304      	movs	r3, #4
 80045f8:	e006      	b.n	8004608 <HAL_GPIO_Init+0x240>
 80045fa:	2303      	movs	r3, #3
 80045fc:	e004      	b.n	8004608 <HAL_GPIO_Init+0x240>
 80045fe:	2302      	movs	r3, #2
 8004600:	e002      	b.n	8004608 <HAL_GPIO_Init+0x240>
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <HAL_GPIO_Init+0x240>
 8004606:	2300      	movs	r3, #0
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	f002 0203 	and.w	r2, r2, #3
 800460e:	0092      	lsls	r2, r2, #2
 8004610:	4093      	lsls	r3, r2
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	4313      	orrs	r3, r2
 8004616:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004618:	4935      	ldr	r1, [pc, #212]	; (80046f0 <HAL_GPIO_Init+0x328>)
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	089b      	lsrs	r3, r3, #2
 800461e:	3302      	adds	r3, #2
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004626:	4b3d      	ldr	r3, [pc, #244]	; (800471c <HAL_GPIO_Init+0x354>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	43db      	mvns	r3, r3
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	4013      	ands	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800464a:	4a34      	ldr	r2, [pc, #208]	; (800471c <HAL_GPIO_Init+0x354>)
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004650:	4b32      	ldr	r3, [pc, #200]	; (800471c <HAL_GPIO_Init+0x354>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	43db      	mvns	r3, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4013      	ands	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004674:	4a29      	ldr	r2, [pc, #164]	; (800471c <HAL_GPIO_Init+0x354>)
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800467a:	4b28      	ldr	r3, [pc, #160]	; (800471c <HAL_GPIO_Init+0x354>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	43db      	mvns	r3, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4013      	ands	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	4313      	orrs	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800469e:	4a1f      	ldr	r2, [pc, #124]	; (800471c <HAL_GPIO_Init+0x354>)
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046a4:	4b1d      	ldr	r3, [pc, #116]	; (800471c <HAL_GPIO_Init+0x354>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	43db      	mvns	r3, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4013      	ands	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046c8:	4a14      	ldr	r2, [pc, #80]	; (800471c <HAL_GPIO_Init+0x354>)
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	3301      	adds	r3, #1
 80046d2:	61fb      	str	r3, [r7, #28]
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	2b0f      	cmp	r3, #15
 80046d8:	f67f ae84 	bls.w	80043e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046dc:	bf00      	nop
 80046de:	bf00      	nop
 80046e0:	3724      	adds	r7, #36	; 0x24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40023800 	.word	0x40023800
 80046f0:	40013800 	.word	0x40013800
 80046f4:	40020000 	.word	0x40020000
 80046f8:	40020400 	.word	0x40020400
 80046fc:	40020800 	.word	0x40020800
 8004700:	40020c00 	.word	0x40020c00
 8004704:	40021000 	.word	0x40021000
 8004708:	40021400 	.word	0x40021400
 800470c:	40021800 	.word	0x40021800
 8004710:	40021c00 	.word	0x40021c00
 8004714:	40022000 	.word	0x40022000
 8004718:	40022400 	.word	0x40022400
 800471c:	40013c00 	.word	0x40013c00

08004720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	807b      	strh	r3, [r7, #2]
 800472c:	4613      	mov	r3, r2
 800472e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004730:	787b      	ldrb	r3, [r7, #1]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004736:	887a      	ldrh	r2, [r7, #2]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800473c:	e003      	b.n	8004746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800473e:	887b      	ldrh	r3, [r7, #2]
 8004740:	041a      	lsls	r2, r3, #16
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	619a      	str	r2, [r3, #24]
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
	...

08004754 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e0c9      	b.n	8004902 <HAL_I2C_Init+0x1ae>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f005 fcf6 	bl	800a174 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2224      	movs	r2, #36	; 0x24
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0201 	bic.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047a0:	f001 fae6 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 80047a4:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4a58      	ldr	r2, [pc, #352]	; (800490c <HAL_I2C_Init+0x1b8>)
 80047aa:	fba2 2303 	umull	r2, r3, r2, r3
 80047ae:	0c9b      	lsrs	r3, r3, #18
 80047b0:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	4a54      	ldr	r2, [pc, #336]	; (8004910 <HAL_I2C_Init+0x1bc>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d802      	bhi.n	80047ca <HAL_I2C_Init+0x76>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	3301      	adds	r3, #1
 80047c8:	e009      	b.n	80047de <HAL_I2C_Init+0x8a>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047d0:	fb02 f303 	mul.w	r3, r2, r3
 80047d4:	4a4f      	ldr	r2, [pc, #316]	; (8004914 <HAL_I2C_Init+0x1c0>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	099b      	lsrs	r3, r3, #6
 80047dc:	3301      	adds	r3, #1
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4a49      	ldr	r2, [pc, #292]	; (8004910 <HAL_I2C_Init+0x1bc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d813      	bhi.n	8004816 <HAL_I2C_Init+0xc2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80047fa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d006      	beq.n	8004812 <HAL_I2C_Init+0xbe>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	e045      	b.n	800489e <HAL_I2C_Init+0x14a>
 8004812:	2304      	movs	r3, #4
 8004814:	e043      	b.n	800489e <HAL_I2C_Init+0x14a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10f      	bne.n	800483e <HAL_I2C_Init+0xea>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	4613      	mov	r3, r2
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	4413      	add	r3, r2
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	fbb2 f3f3 	udiv	r3, r2, r3
 800482e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004832:	2b00      	cmp	r3, #0
 8004834:	bf0c      	ite	eq
 8004836:	2301      	moveq	r3, #1
 8004838:	2300      	movne	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	e010      	b.n	8004860 <HAL_I2C_Init+0x10c>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	4613      	mov	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	009a      	lsls	r2, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004856:	2b00      	cmp	r3, #0
 8004858:	bf0c      	ite	eq
 800485a:	2301      	moveq	r3, #1
 800485c:	2300      	movne	r3, #0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <HAL_I2C_Init+0x114>
 8004864:	2301      	movs	r3, #1
 8004866:	e01a      	b.n	800489e <HAL_I2C_Init+0x14a>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10a      	bne.n	8004886 <HAL_I2C_Init+0x132>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	4613      	mov	r3, r2
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	4413      	add	r3, r2
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004884:	e00b      	b.n	800489e <HAL_I2C_Init+0x14a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	009a      	lsls	r2, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	fbb2 f3f3 	udiv	r3, r2, r3
 800489a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6812      	ldr	r2, [r2, #0]
 80048a2:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69d9      	ldr	r1, [r3, #28]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a1a      	ldr	r2, [r3, #32]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6919      	ldr	r1, [r3, #16]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6959      	ldr	r1, [r3, #20]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699a      	ldr	r2, [r3, #24]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	431bde83 	.word	0x431bde83
 8004910:	000186a0 	.word	0x000186a0
 8004914:	10624dd3 	.word	0x10624dd3

08004918 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af02      	add	r7, sp, #8
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	607a      	str	r2, [r7, #4]
 8004922:	461a      	mov	r2, r3
 8004924:	460b      	mov	r3, r1
 8004926:	817b      	strh	r3, [r7, #10]
 8004928:	4613      	mov	r3, r2
 800492a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004930:	f7ff fa46 	bl	8003dc0 <HAL_GetTick>
 8004934:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b20      	cmp	r3, #32
 8004940:	f040 80ee 	bne.w	8004b20 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	2319      	movs	r3, #25
 800494a:	2201      	movs	r2, #1
 800494c:	4977      	ldr	r1, [pc, #476]	; (8004b2c <HAL_I2C_Master_Transmit+0x214>)
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 fc6c 	bl	800522c <I2C_WaitOnFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 800495a:	2302      	movs	r3, #2
 800495c:	e0e1      	b.n	8004b22 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_I2C_Master_Transmit+0x54>
 8004968:	2302      	movs	r3, #2
 800496a:	e0da      	b.n	8004b22 <HAL_I2C_Master_Transmit+0x20a>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b01      	cmp	r3, #1
 8004980:	d007      	beq.n	8004992 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f042 0201 	orr.w	r2, r2, #1
 8004990:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049a0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2221      	movs	r2, #33	; 0x21
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2210      	movs	r2, #16
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	893a      	ldrh	r2, [r7, #8]
 80049c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4a5a      	ldr	r2, [pc, #360]	; (8004b30 <HAL_I2C_Master_Transmit+0x218>)
 80049c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049d4:	8979      	ldrh	r1, [r7, #10]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	6a3a      	ldr	r2, [r7, #32]
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 fadc 	bl	8004f98 <I2C_MasterRequestWrite>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00f      	beq.n	8004a06 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d105      	bne.n	80049fa <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR; //Error is happening here -Steven
 80049f6:	2301      	movs	r3, #1
 80049f8:	e093      	b.n	8004b22 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e08d      	b.n	8004b22 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a06:	2300      	movs	r3, #0
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8004a1c:	e066      	b.n	8004aec <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	6a39      	ldr	r1, [r7, #32]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 fcc1 	bl	80053aa <I2C_WaitOnTXEFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00f      	beq.n	8004a4e <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d109      	bne.n	8004a4a <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a44:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e06b      	b.n	8004b22 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e069      	b.n	8004b22 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	1c59      	adds	r1, r3, #1
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	6251      	str	r1, [r2, #36]	; 0x24
 8004a58:	781a      	ldrb	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d119      	bne.n	8004abc <HAL_I2C_Master_Transmit+0x1a4>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d015      	beq.n	8004abc <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	1c59      	adds	r1, r3, #1
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	6251      	str	r1, [r2, #36]	; 0x24
 8004a9a:	781a      	ldrb	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	6a39      	ldr	r1, [r7, #32]
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fcaf 	bl	8005424 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00f      	beq.n	8004aec <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d109      	bne.n	8004ae8 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae2:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e01c      	b.n	8004b22 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e01a      	b.n	8004b22 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d194      	bne.n	8004a1e <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	e000      	b.n	8004b22 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8004b20:	2302      	movs	r3, #2
  }
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	00100002 	.word	0x00100002
 8004b30:	ffff0000 	.word	0xffff0000

08004b34 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08c      	sub	sp, #48	; 0x30
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	607a      	str	r2, [r7, #4]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	460b      	mov	r3, r1
 8004b42:	817b      	strh	r3, [r7, #10]
 8004b44:	4613      	mov	r3, r2
 8004b46:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b4c:	f7ff f938 	bl	8003dc0 <HAL_GetTick>
 8004b50:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b20      	cmp	r3, #32
 8004b5c:	f040 8215 	bne.w	8004f8a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	2319      	movs	r3, #25
 8004b66:	2201      	movs	r2, #1
 8004b68:	4985      	ldr	r1, [pc, #532]	; (8004d80 <HAL_I2C_Master_Receive+0x24c>)
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 fb5e 	bl	800522c <I2C_WaitOnFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004b76:	2302      	movs	r3, #2
 8004b78:	e208      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_I2C_Master_Receive+0x54>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e201      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d007      	beq.n	8004bae <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f042 0201 	orr.w	r2, r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2222      	movs	r2, #34	; 0x22
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2210      	movs	r2, #16
 8004bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	893a      	ldrh	r2, [r7, #8]
 8004bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4a68      	ldr	r2, [pc, #416]	; (8004d84 <HAL_I2C_Master_Receive+0x250>)
 8004be4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004bf0:	8979      	ldrh	r1, [r7, #10]
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 fa50 	bl	800509c <I2C_MasterRequestRead>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00f      	beq.n	8004c22 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d105      	bne.n	8004c16 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e1ba      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e1b4      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d113      	bne.n	8004c52 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	623b      	str	r3, [r7, #32]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	623b      	str	r3, [r7, #32]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	623b      	str	r3, [r7, #32]
 8004c3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	e188      	b.n	8004f64 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d11b      	bne.n	8004c92 <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61fb      	str	r3, [r7, #28]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	61fb      	str	r3, [r7, #28]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	61fb      	str	r3, [r7, #28]
 8004c7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	e168      	b.n	8004f64 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d11b      	bne.n	8004cd2 <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61bb      	str	r3, [r7, #24]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	61bb      	str	r3, [r7, #24]
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	e148      	b.n	8004f64 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ce0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8004cf8:	e134      	b.n	8004f64 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	f200 80eb 	bhi.w	8004eda <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d127      	bne.n	8004d5c <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8004d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 fbc4 	bl	800549e <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d007      	beq.n	8004d2c <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	2b20      	cmp	r3, #32
 8004d22:	d101      	bne.n	8004d28 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e131      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e12f      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6918      	ldr	r0, [r3, #16]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	1c59      	adds	r1, r3, #1
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	6251      	str	r1, [r2, #36]	; 0x24
 8004d3c:	b2c2      	uxtb	r2, r0
 8004d3e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d5a:	e103      	b.n	8004f64 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d14a      	bne.n	8004dfa <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	4906      	ldr	r1, [pc, #24]	; (8004d88 <HAL_I2C_Master_Receive+0x254>)
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fa5c 	bl	800522c <I2C_WaitOnFlagUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d008      	beq.n	8004d8c <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e106      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
 8004d7e:	bf00      	nop
 8004d80:	00100002 	.word	0x00100002
 8004d84:	ffff0000 	.word	0xffff0000
 8004d88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6918      	ldr	r0, [r3, #16]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	1c59      	adds	r1, r3, #1
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	6251      	str	r1, [r2, #36]	; 0x24
 8004dac:	b2c2      	uxtb	r2, r0
 8004dae:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6918      	ldr	r0, [r3, #16]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	1c59      	adds	r1, r3, #1
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	6251      	str	r1, [r2, #36]	; 0x24
 8004dda:	b2c2      	uxtb	r2, r0
 8004ddc:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004df8:	e0b4      	b.n	8004f64 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	2200      	movs	r2, #0
 8004e02:	4964      	ldr	r1, [pc, #400]	; (8004f94 <HAL_I2C_Master_Receive+0x460>)
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 fa11 	bl	800522c <I2C_WaitOnFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e0bb      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6918      	ldr	r0, [r3, #16]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	1c59      	adds	r1, r3, #1
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	6251      	str	r1, [r2, #36]	; 0x24
 8004e34:	b2c2      	uxtb	r2, r0
 8004e36:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	2200      	movs	r2, #0
 8004e5a:	494e      	ldr	r1, [pc, #312]	; (8004f94 <HAL_I2C_Master_Receive+0x460>)
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 f9e5 	bl	800522c <I2C_WaitOnFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e08f      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6918      	ldr	r0, [r3, #16]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	1c59      	adds	r1, r3, #1
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	6251      	str	r1, [r2, #36]	; 0x24
 8004e8c:	b2c2      	uxtb	r2, r0
 8004e8e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6918      	ldr	r0, [r3, #16]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	1c59      	adds	r1, r3, #1
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	6251      	str	r1, [r2, #36]	; 0x24
 8004eba:	b2c2      	uxtb	r2, r0
 8004ebc:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ed8:	e044      	b.n	8004f64 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8004eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004edc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 fadd 	bl	800549e <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d007      	beq.n	8004efa <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d101      	bne.n	8004ef6 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e04a      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e048      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6918      	ldr	r0, [r3, #16]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	1c59      	adds	r1, r3, #1
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	6251      	str	r1, [r2, #36]	; 0x24
 8004f0a:	b2c2      	uxtb	r2, r0
 8004f0c:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d116      	bne.n	8004f64 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6918      	ldr	r0, [r3, #16]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	1c59      	adds	r1, r3, #1
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	6251      	str	r1, [r2, #36]	; 0x24
 8004f46:	b2c2      	uxtb	r2, r0
 8004f48:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f47f aec6 	bne.w	8004cfa <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	e000      	b.n	8004f8c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f8a:	2302      	movs	r3, #2
  }
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3728      	adds	r7, #40	; 0x28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	00010004 	.word	0x00010004

08004f98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	607a      	str	r2, [r7, #4]
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d006      	beq.n	8004fc2 <I2C_MasterRequestWrite+0x2a>
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d003      	beq.n	8004fc2 <I2C_MasterRequestWrite+0x2a>
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fc0:	d108      	bne.n	8004fd4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	e00b      	b.n	8004fec <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	2b12      	cmp	r3, #18
 8004fda:	d107      	bne.n	8004fec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fea:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 f917 	bl	800522c <I2C_WaitOnFlagUntilTimeout>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e041      	b.n	800508c <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005010:	d108      	bne.n	8005024 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005012:	897b      	ldrh	r3, [r7, #10]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	461a      	mov	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005020:	611a      	str	r2, [r3, #16]
 8005022:	e021      	b.n	8005068 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005024:	897b      	ldrh	r3, [r7, #10]
 8005026:	11db      	asrs	r3, r3, #7
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f003 0306 	and.w	r3, r3, #6
 800502e:	b2db      	uxtb	r3, r3
 8005030:	f063 030f 	orn	r3, r3, #15
 8005034:	b2da      	uxtb	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	4914      	ldr	r1, [pc, #80]	; (8005094 <I2C_MasterRequestWrite+0xfc>)
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f943 	bl	80052ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d007      	beq.n	800505e <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	2b04      	cmp	r3, #4
 8005054:	d101      	bne.n	800505a <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e018      	b.n	800508c <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e016      	b.n	800508c <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800505e:	897b      	ldrh	r3, [r7, #10]
 8005060:	b2da      	uxtb	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	490a      	ldr	r1, [pc, #40]	; (8005098 <I2C_MasterRequestWrite+0x100>)
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 f92d 	bl	80052ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d007      	beq.n	800508a <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	2b04      	cmp	r3, #4
 8005080:	d101      	bne.n	8005086 <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e002      	b.n	800508c <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e000      	b.n	800508c <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	00010008 	.word	0x00010008
 8005098:	00010002 	.word	0x00010002

0800509c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b088      	sub	sp, #32
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	607a      	str	r2, [r7, #4]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	460b      	mov	r3, r1
 80050aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	d006      	beq.n	80050d6 <I2C_MasterRequestRead+0x3a>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d003      	beq.n	80050d6 <I2C_MasterRequestRead+0x3a>
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050d4:	d108      	bne.n	80050e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	e00b      	b.n	8005100 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	2b11      	cmp	r3, #17
 80050ee:	d107      	bne.n	8005100 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050fe:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f88d 	bl	800522c <I2C_WaitOnFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e07f      	b.n	800521c <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005124:	d108      	bne.n	8005138 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005126:	897b      	ldrh	r3, [r7, #10]
 8005128:	b2db      	uxtb	r3, r3
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	b2da      	uxtb	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	611a      	str	r2, [r3, #16]
 8005136:	e05f      	b.n	80051f8 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005138:	897b      	ldrh	r3, [r7, #10]
 800513a:	11db      	asrs	r3, r3, #7
 800513c:	b2db      	uxtb	r3, r3
 800513e:	f003 0306 	and.w	r3, r3, #6
 8005142:	b2db      	uxtb	r3, r3
 8005144:	f063 030f 	orn	r3, r3, #15
 8005148:	b2da      	uxtb	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	4933      	ldr	r1, [pc, #204]	; (8005224 <I2C_MasterRequestRead+0x188>)
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f8b9 	bl	80052ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d007      	beq.n	8005172 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	2b04      	cmp	r3, #4
 8005168:	d101      	bne.n	800516e <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e056      	b.n	800521c <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e054      	b.n	800521c <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005172:	897b      	ldrh	r3, [r7, #10]
 8005174:	b2da      	uxtb	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	4929      	ldr	r1, [pc, #164]	; (8005228 <I2C_MasterRequestRead+0x18c>)
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f8a3 	bl	80052ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d007      	beq.n	800519e <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	2b04      	cmp	r3, #4
 8005194:	d101      	bne.n	800519a <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e040      	b.n	800521c <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e03e      	b.n	800521c <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800519e:	2300      	movs	r3, #0
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f82b 	bl	800522c <I2C_WaitOnFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e01d      	b.n	800521c <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80051e0:	897b      	ldrh	r3, [r7, #10]
 80051e2:	11db      	asrs	r3, r3, #7
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	f003 0306 	and.w	r3, r3, #6
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	f063 030e 	orn	r3, r3, #14
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	490a      	ldr	r1, [pc, #40]	; (8005228 <I2C_MasterRequestRead+0x18c>)
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 f865 	bl	80052ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d007      	beq.n	800521a <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	2b04      	cmp	r3, #4
 8005210:	d101      	bne.n	8005216 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e002      	b.n	800521c <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e000      	b.n	800521c <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	00010008 	.word	0x00010008
 8005228:	00010002 	.word	0x00010002

0800522c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800523c:	e01f      	b.n	800527e <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005244:	d01b      	beq.n	800527e <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d007      	beq.n	800525c <I2C_WaitOnFlagUntilTimeout+0x30>
 800524c:	f7fe fdb8 	bl	8003dc0 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d210      	bcs.n	800527e <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2220      	movs	r2, #32
 8005266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e023      	b.n	80052c6 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	0c1b      	lsrs	r3, r3, #16
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	d10d      	bne.n	80052a4 <I2C_WaitOnFlagUntilTimeout+0x78>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	43da      	mvns	r2, r3
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4013      	ands	r3, r2
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	bf0c      	ite	eq
 800529a:	2301      	moveq	r3, #1
 800529c:	2300      	movne	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	e00c      	b.n	80052be <I2C_WaitOnFlagUntilTimeout+0x92>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	43da      	mvns	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4013      	ands	r3, r2
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	bf0c      	ite	eq
 80052b6:	2301      	moveq	r3, #1
 80052b8:	2300      	movne	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	79fb      	ldrb	r3, [r7, #7]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d0bc      	beq.n	800523e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]
 80052da:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052dc:	e040      	b.n	8005360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ec:	d11c      	bne.n	8005328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005306:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2204      	movs	r2, #4
 800530c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e03c      	b.n	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532e:	d017      	beq.n	8005360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8005336:	f7fe fd43 	bl	8003dc0 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	429a      	cmp	r2, r3
 8005344:	d20c      	bcs.n	8005360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e020      	b.n	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	0c1b      	lsrs	r3, r3, #16
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b01      	cmp	r3, #1
 8005368:	d10c      	bne.n	8005384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	43da      	mvns	r2, r3
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	4013      	ands	r3, r2
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	bf14      	ite	ne
 800537c:	2301      	movne	r3, #1
 800537e:	2300      	moveq	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	e00b      	b.n	800539c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	43da      	mvns	r2, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4013      	ands	r3, r2
 8005390:	b29b      	uxth	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	bf14      	ite	ne
 8005396:	2301      	movne	r3, #1
 8005398:	2300      	moveq	r3, #0
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d19e      	bne.n	80052de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053b6:	e029      	b.n	800540c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f8ba 	bl	8005532 <I2C_IsAcknowledgeFailed>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e029      	b.n	800541c <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ce:	d01d      	beq.n	800540c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d007      	beq.n	80053e6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053d6:	f7fe fcf3 	bl	8003dc0 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d212      	bcs.n	800540c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	f043 0220 	orr.w	r2, r3, #32
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e007      	b.n	800541c <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005416:	2b80      	cmp	r3, #128	; 0x80
 8005418:	d1ce      	bne.n	80053b8 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005430:	e029      	b.n	8005486 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 f87d 	bl	8005532 <I2C_IsAcknowledgeFailed>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e029      	b.n	8005496 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005448:	d01d      	beq.n	8005486 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d007      	beq.n	8005460 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005450:	f7fe fcb6 	bl	8003dc0 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	429a      	cmp	r2, r3
 800545e:	d212      	bcs.n	8005486 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	f043 0220 	orr.w	r2, r3, #32
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2220      	movs	r2, #32
 8005476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e007      	b.n	8005496 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b04      	cmp	r3, #4
 8005492:	d1ce      	bne.n	8005432 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054aa:	e036      	b.n	800551a <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f003 0310 	and.w	r3, r3, #16
 80054b6:	2b10      	cmp	r3, #16
 80054b8:	d114      	bne.n	80054e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f06f 0210 	mvn.w	r2, #16
 80054c2:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e022      	b.n	800552a <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d007      	beq.n	80054fa <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 80054ea:	f7fe fc69 	bl	8003dc0 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d20f      	bcs.n	800551a <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	f043 0220 	orr.w	r2, r3, #32
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e007      	b.n	800552a <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d1c1      	bne.n	80054ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005548:	d114      	bne.n	8005574 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005552:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2204      	movs	r2, #4
 8005558:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e000      	b.n	8005576 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
	...

08005584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b08e      	sub	sp, #56	; 0x38
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 800558c:	2300      	movs	r3, #0
 800558e:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d075      	beq.n	8005688 <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800559c:	4b92      	ldr	r3, [pc, #584]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f003 030c 	and.w	r3, r3, #12
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d00c      	beq.n	80055c2 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055a8:	4b8f      	ldr	r3, [pc, #572]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d112      	bne.n	80055da <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055b4:	4b8c      	ldr	r3, [pc, #560]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c0:	d10b      	bne.n	80055da <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055c2:	4b89      	ldr	r3, [pc, #548]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d05b      	beq.n	8005686 <HAL_RCC_OscConfig+0x102>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d157      	bne.n	8005686 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e222      	b.n	8005a20 <HAL_RCC_OscConfig+0x49c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e2:	d106      	bne.n	80055f2 <HAL_RCC_OscConfig+0x6e>
 80055e4:	4b80      	ldr	r3, [pc, #512]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a7f      	ldr	r2, [pc, #508]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 80055ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	e01d      	b.n	800562e <HAL_RCC_OscConfig+0xaa>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055fa:	d10c      	bne.n	8005616 <HAL_RCC_OscConfig+0x92>
 80055fc:	4b7a      	ldr	r3, [pc, #488]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a79      	ldr	r2, [pc, #484]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 8005602:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005606:	6013      	str	r3, [r2, #0]
 8005608:	4b77      	ldr	r3, [pc, #476]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a76      	ldr	r2, [pc, #472]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 800560e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	e00b      	b.n	800562e <HAL_RCC_OscConfig+0xaa>
 8005616:	4b74      	ldr	r3, [pc, #464]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a73      	ldr	r2, [pc, #460]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 800561c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	4b71      	ldr	r3, [pc, #452]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a70      	ldr	r2, [pc, #448]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 8005628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800562c:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d013      	beq.n	800565e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005636:	f7fe fbc3 	bl	8003dc0 <HAL_GetTick>
 800563a:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800563e:	f7fe fbbf 	bl	8003dc0 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b64      	cmp	r3, #100	; 0x64
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e1e7      	b.n	8005a20 <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005650:	4b65      	ldr	r3, [pc, #404]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <HAL_RCC_OscConfig+0xba>
 800565c:	e014      	b.n	8005688 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565e:	f7fe fbaf 	bl	8003dc0 <HAL_GetTick>
 8005662:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005666:	f7fe fbab 	bl	8003dc0 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b64      	cmp	r3, #100	; 0x64
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e1d3      	b.n	8005a20 <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005678:	4b5b      	ldr	r3, [pc, #364]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1f0      	bne.n	8005666 <HAL_RCC_OscConfig+0xe2>
 8005684:	e000      	b.n	8005688 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005686:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d077      	beq.n	8005784 <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005694:	4b54      	ldr	r3, [pc, #336]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 030c 	and.w	r3, r3, #12
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00b      	beq.n	80056b8 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056a0:	4b51      	ldr	r3, [pc, #324]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d126      	bne.n	80056fa <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ac:	4b4e      	ldr	r3, [pc, #312]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d120      	bne.n	80056fa <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056b8:	4b4b      	ldr	r3, [pc, #300]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_RCC_OscConfig+0x14c>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d001      	beq.n	80056d0 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e1a7      	b.n	8005a20 <HAL_RCC_OscConfig+0x49c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d0:	4b45      	ldr	r3, [pc, #276]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6919      	ldr	r1, [r3, #16]
 80056dc:	23f8      	movs	r3, #248	; 0xf8
 80056de:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	fa93 f3a3 	rbit	r3, r3
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80056e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ea:	fab3 f383 	clz	r3, r3
 80056ee:	fa01 f303 	lsl.w	r3, r1, r3
 80056f2:	493d      	ldr	r1, [pc, #244]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056f8:	e044      	b.n	8005784 <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d02a      	beq.n	8005758 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005702:	4b3a      	ldr	r3, [pc, #232]	; (80057ec <HAL_RCC_OscConfig+0x268>)
 8005704:	2201      	movs	r2, #1
 8005706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005708:	f7fe fb5a 	bl	8003dc0 <HAL_GetTick>
 800570c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800570e:	e008      	b.n	8005722 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005710:	f7fe fb56 	bl	8003dc0 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e17e      	b.n	8005a20 <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005722:	4b31      	ldr	r3, [pc, #196]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d0f0      	beq.n	8005710 <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800572e:	4b2e      	ldr	r3, [pc, #184]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6919      	ldr	r1, [r3, #16]
 800573a:	23f8      	movs	r3, #248	; 0xf8
 800573c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	fa93 f3a3 	rbit	r3, r3
 8005744:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	fab3 f383 	clz	r3, r3
 800574c:	fa01 f303 	lsl.w	r3, r1, r3
 8005750:	4925      	ldr	r1, [pc, #148]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 8005752:	4313      	orrs	r3, r2
 8005754:	600b      	str	r3, [r1, #0]
 8005756:	e015      	b.n	8005784 <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005758:	4b24      	ldr	r3, [pc, #144]	; (80057ec <HAL_RCC_OscConfig+0x268>)
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575e:	f7fe fb2f 	bl	8003dc0 <HAL_GetTick>
 8005762:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005766:	f7fe fb2b 	bl	8003dc0 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e153      	b.n	8005a20 <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005778:	4b1b      	ldr	r3, [pc, #108]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f0      	bne.n	8005766 <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0308 	and.w	r3, r3, #8
 800578c:	2b00      	cmp	r3, #0
 800578e:	d037      	beq.n	8005800 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d016      	beq.n	80057c6 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005798:	4b15      	ldr	r3, [pc, #84]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 800579a:	2201      	movs	r2, #1
 800579c:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800579e:	f7fe fb0f 	bl	8003dc0 <HAL_GetTick>
 80057a2:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057a6:	f7fe fb0b 	bl	8003dc0 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e133      	b.n	8005a20 <HAL_RCC_OscConfig+0x49c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057b8:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <HAL_RCC_OscConfig+0x264>)
 80057ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f0      	beq.n	80057a6 <HAL_RCC_OscConfig+0x222>
 80057c4:	e01c      	b.n	8005800 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057c6:	4b0a      	ldr	r3, [pc, #40]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057cc:	f7fe faf8 	bl	8003dc0 <HAL_GetTick>
 80057d0:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057d2:	e00f      	b.n	80057f4 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057d4:	f7fe faf4 	bl	8003dc0 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d908      	bls.n	80057f4 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e11c      	b.n	8005a20 <HAL_RCC_OscConfig+0x49c>
 80057e6:	bf00      	nop
 80057e8:	40023800 	.word	0x40023800
 80057ec:	42470000 	.word	0x42470000
 80057f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057f4:	4b8c      	ldr	r3, [pc, #560]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 80057f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e9      	bne.n	80057d4 <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	d07d      	beq.n	8005908 <HAL_RCC_OscConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800580c:	2300      	movs	r3, #0
 800580e:	60bb      	str	r3, [r7, #8]
 8005810:	4b85      	ldr	r3, [pc, #532]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	4a84      	ldr	r2, [pc, #528]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 8005816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800581a:	6413      	str	r3, [r2, #64]	; 0x40
 800581c:	4b82      	ldr	r3, [pc, #520]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005824:	60bb      	str	r3, [r7, #8]
 8005826:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005828:	4b80      	ldr	r3, [pc, #512]	; (8005a2c <HAL_RCC_OscConfig+0x4a8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a7f      	ldr	r2, [pc, #508]	; (8005a2c <HAL_RCC_OscConfig+0x4a8>)
 800582e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005832:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8005834:	f7fe fac4 	bl	8003dc0 <HAL_GetTick>
 8005838:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x2ca>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800583c:	f7fe fac0 	bl	8003dc0 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x2ca>
      {
        return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e0e8      	b.n	8005a20 <HAL_RCC_OscConfig+0x49c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800584e:	4b77      	ldr	r3, [pc, #476]	; (8005a2c <HAL_RCC_OscConfig+0x4a8>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCC_OscConfig+0x2b8>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d106      	bne.n	8005870 <HAL_RCC_OscConfig+0x2ec>
 8005862:	4b71      	ldr	r3, [pc, #452]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 8005864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005866:	4a70      	ldr	r2, [pc, #448]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	6713      	str	r3, [r2, #112]	; 0x70
 800586e:	e01c      	b.n	80058aa <HAL_RCC_OscConfig+0x326>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b05      	cmp	r3, #5
 8005876:	d10c      	bne.n	8005892 <HAL_RCC_OscConfig+0x30e>
 8005878:	4b6b      	ldr	r3, [pc, #428]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 800587a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587c:	4a6a      	ldr	r2, [pc, #424]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 800587e:	f043 0304 	orr.w	r3, r3, #4
 8005882:	6713      	str	r3, [r2, #112]	; 0x70
 8005884:	4b68      	ldr	r3, [pc, #416]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 8005886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005888:	4a67      	ldr	r2, [pc, #412]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 800588a:	f043 0301 	orr.w	r3, r3, #1
 800588e:	6713      	str	r3, [r2, #112]	; 0x70
 8005890:	e00b      	b.n	80058aa <HAL_RCC_OscConfig+0x326>
 8005892:	4b65      	ldr	r3, [pc, #404]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 8005894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005896:	4a64      	ldr	r2, [pc, #400]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 8005898:	f023 0301 	bic.w	r3, r3, #1
 800589c:	6713      	str	r3, [r2, #112]	; 0x70
 800589e:	4b62      	ldr	r3, [pc, #392]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 80058a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a2:	4a61      	ldr	r2, [pc, #388]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 80058a4:	f023 0304 	bic.w	r3, r3, #4
 80058a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d015      	beq.n	80058de <HAL_RCC_OscConfig+0x35a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b2:	f7fe fa85 	bl	8003dc0 <HAL_GetTick>
 80058b6:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b8:	e00a      	b.n	80058d0 <HAL_RCC_OscConfig+0x34c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ba:	f7fe fa81 	bl	8003dc0 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x34c>
        {
          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e0a7      	b.n	8005a20 <HAL_RCC_OscConfig+0x49c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d0:	4b55      	ldr	r3, [pc, #340]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 80058d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0ee      	beq.n	80058ba <HAL_RCC_OscConfig+0x336>
 80058dc:	e014      	b.n	8005908 <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058de:	f7fe fa6f 	bl	8003dc0 <HAL_GetTick>
 80058e2:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058e4:	e00a      	b.n	80058fc <HAL_RCC_OscConfig+0x378>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058e6:	f7fe fa6b 	bl	8003dc0 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e091      	b.n	8005a20 <HAL_RCC_OscConfig+0x49c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058fc:	4b4a      	ldr	r3, [pc, #296]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1ee      	bne.n	80058e6 <HAL_RCC_OscConfig+0x362>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 8086 	beq.w	8005a1e <HAL_RCC_OscConfig+0x49a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005912:	4b45      	ldr	r3, [pc, #276]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 030c 	and.w	r3, r3, #12
 800591a:	2b08      	cmp	r3, #8
 800591c:	d07d      	beq.n	8005a1a <HAL_RCC_OscConfig+0x496>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d162      	bne.n	80059ec <HAL_RCC_OscConfig+0x468>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005926:	4b42      	ldr	r3, [pc, #264]	; (8005a30 <HAL_RCC_OscConfig+0x4ac>)
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592c:	f7fe fa48 	bl	8003dc0 <HAL_GetTick>
 8005930:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0x3c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005934:	f7fe fa44 	bl	8003dc0 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x3c2>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e06c      	b.n	8005a20 <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005946:	4b38      	ldr	r3, [pc, #224]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1f0      	bne.n	8005934 <HAL_RCC_OscConfig+0x3b0>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69da      	ldr	r2, [r3, #28]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005960:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005964:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	fa93 f3a3 	rbit	r3, r3
 800596c:	60fb      	str	r3, [r7, #12]
  return(result);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	fab3 f383 	clz	r3, r3
 8005974:	fa01 f303 	lsl.w	r3, r1, r3
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597e:	085b      	lsrs	r3, r3, #1
 8005980:	1e59      	subs	r1, r3, #1
 8005982:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005986:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	fa93 f3a3 	rbit	r3, r3
 800598e:	617b      	str	r3, [r7, #20]
  return(result);
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	fab3 f383 	clz	r3, r3
 8005996:	fa01 f303 	lsl.w	r3, r1, r3
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059a0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80059a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	fa93 f3a3 	rbit	r3, r3
 80059ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	fab3 f383 	clz	r3, r3
 80059b4:	fa01 f303 	lsl.w	r3, r1, r3
 80059b8:	491b      	ldr	r1, [pc, #108]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059be:	4b1c      	ldr	r3, [pc, #112]	; (8005a30 <HAL_RCC_OscConfig+0x4ac>)
 80059c0:	2201      	movs	r2, #1
 80059c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c4:	f7fe f9fc 	bl	8003dc0 <HAL_GetTick>
 80059c8:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059cc:	f7fe f9f8 	bl	8003dc0 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e020      	b.n	8005a20 <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0f0      	beq.n	80059cc <HAL_RCC_OscConfig+0x448>
 80059ea:	e018      	b.n	8005a1e <HAL_RCC_OscConfig+0x49a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ec:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <HAL_RCC_OscConfig+0x4ac>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f2:	f7fe f9e5 	bl	8003dc0 <HAL_GetTick>
 80059f6:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059fa:	f7fe f9e1 	bl	8003dc0 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e009      	b.n	8005a20 <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a0c:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <HAL_RCC_OscConfig+0x4a4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1f0      	bne.n	80059fa <HAL_RCC_OscConfig+0x476>
 8005a18:	e001      	b.n	8005a1e <HAL_RCC_OscConfig+0x49a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e000      	b.n	8005a20 <HAL_RCC_OscConfig+0x49c>
    }
  }
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3738      	adds	r7, #56	; 0x38
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	40007000 	.word	0x40007000
 8005a30:	42470060 	.word	0x42470060

08005a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8005a3e:	2300      	movs	r3, #0
 8005a40:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005a42:	4b81      	ldr	r3, [pc, #516]	; (8005c48 <HAL_RCC_ClockConfig+0x214>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d90c      	bls.n	8005a6a <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a50:	4b7d      	ldr	r3, [pc, #500]	; (8005c48 <HAL_RCC_ClockConfig+0x214>)
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a58:	4b7b      	ldr	r3, [pc, #492]	; (8005c48 <HAL_RCC_ClockConfig+0x214>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d001      	beq.n	8005a6a <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e0ea      	b.n	8005c40 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d008      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a76:	4b75      	ldr	r3, [pc, #468]	; (8005c4c <HAL_RCC_ClockConfig+0x218>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	4972      	ldr	r1, [pc, #456]	; (8005c4c <HAL_RCC_ClockConfig+0x218>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 8086 	beq.w	8005ba2 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d107      	bne.n	8005aae <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a9e:	4b6b      	ldr	r3, [pc, #428]	; (8005c4c <HAL_RCC_ClockConfig+0x218>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d119      	bne.n	8005ade <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e0c8      	b.n	8005c40 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d003      	beq.n	8005abe <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d107      	bne.n	8005ace <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005abe:	4b63      	ldr	r3, [pc, #396]	; (8005c4c <HAL_RCC_ClockConfig+0x218>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d109      	bne.n	8005ade <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e0b8      	b.n	8005c40 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ace:	4b5f      	ldr	r3, [pc, #380]	; (8005c4c <HAL_RCC_ClockConfig+0x218>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e0b0      	b.n	8005c40 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ade:	4b5b      	ldr	r3, [pc, #364]	; (8005c4c <HAL_RCC_ClockConfig+0x218>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f023 0203 	bic.w	r2, r3, #3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	4958      	ldr	r1, [pc, #352]	; (8005c4c <HAL_RCC_ClockConfig+0x218>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af0:	f7fe f966 	bl	8003dc0 <HAL_GetTick>
 8005af4:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d112      	bne.n	8005b24 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005afe:	e00a      	b.n	8005b16 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b00:	f7fe f95e 	bl	8003dc0 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e094      	b.n	8005c40 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b16:	4b4d      	ldr	r3, [pc, #308]	; (8005c4c <HAL_RCC_ClockConfig+0x218>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 030c 	and.w	r3, r3, #12
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d1ee      	bne.n	8005b00 <HAL_RCC_ClockConfig+0xcc>
 8005b22:	e03e      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d112      	bne.n	8005b52 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b2c:	e00a      	b.n	8005b44 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b2e:	f7fe f947 	bl	8003dc0 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d901      	bls.n	8005b44 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e07d      	b.n	8005c40 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b44:	4b41      	ldr	r3, [pc, #260]	; (8005c4c <HAL_RCC_ClockConfig+0x218>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f003 030c 	and.w	r3, r3, #12
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d1ee      	bne.n	8005b2e <HAL_RCC_ClockConfig+0xfa>
 8005b50:	e027      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d11d      	bne.n	8005b96 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8005b5a:	e00a      	b.n	8005b72 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b5c:	f7fe f930 	bl	8003dc0 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e066      	b.n	8005c40 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8005b72:	4b36      	ldr	r3, [pc, #216]	; (8005c4c <HAL_RCC_ClockConfig+0x218>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 030c 	and.w	r3, r3, #12
 8005b7a:	2b0c      	cmp	r3, #12
 8005b7c:	d1ee      	bne.n	8005b5c <HAL_RCC_ClockConfig+0x128>
 8005b7e:	e010      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b80:	f7fe f91e 	bl	8003dc0 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e054      	b.n	8005c40 <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b96:	4b2d      	ldr	r3, [pc, #180]	; (8005c4c <HAL_RCC_ClockConfig+0x218>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 030c 	and.w	r3, r3, #12
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1ee      	bne.n	8005b80 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8005ba2:	4b29      	ldr	r3, [pc, #164]	; (8005c48 <HAL_RCC_ClockConfig+0x214>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d20c      	bcs.n	8005bca <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bb0:	4b25      	ldr	r3, [pc, #148]	; (8005c48 <HAL_RCC_ClockConfig+0x214>)
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005bb8:	4b23      	ldr	r3, [pc, #140]	; (8005c48 <HAL_RCC_ClockConfig+0x214>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d001      	beq.n	8005bca <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e03a      	b.n	8005c40 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0304 	and.w	r3, r3, #4
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d008      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bd6:	4b1d      	ldr	r3, [pc, #116]	; (8005c4c <HAL_RCC_ClockConfig+0x218>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	491a      	ldr	r1, [pc, #104]	; (8005c4c <HAL_RCC_ClockConfig+0x218>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0308 	and.w	r3, r3, #8
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d009      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bf4:	4b15      	ldr	r3, [pc, #84]	; (8005c4c <HAL_RCC_ClockConfig+0x218>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	4912      	ldr	r1, [pc, #72]	; (8005c4c <HAL_RCC_ClockConfig+0x218>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8005c08:	f000 f826 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 8005c0c:	4601      	mov	r1, r0
 8005c0e:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <HAL_RCC_ClockConfig+0x218>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c16:	23f0      	movs	r3, #240	; 0xf0
 8005c18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	fa93 f3a3 	rbit	r3, r3
 8005c20:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	fab3 f383 	clz	r3, r3
 8005c28:	fa22 f303 	lsr.w	r3, r2, r3
 8005c2c:	4a08      	ldr	r2, [pc, #32]	; (8005c50 <HAL_RCC_ClockConfig+0x21c>)
 8005c2e:	5cd3      	ldrb	r3, [r2, r3]
 8005c30:	fa21 f303 	lsr.w	r3, r1, r3
 8005c34:	4a07      	ldr	r2, [pc, #28]	; (8005c54 <HAL_RCC_ClockConfig+0x220>)
 8005c36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005c38:	200f      	movs	r0, #15
 8005c3a:	f004 fc45 	bl	800a4c8 <HAL_InitTick>
  
  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40023c00 	.word	0x40023c00
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	080109e0 	.word	0x080109e0
 8005c54:	20000014 	.word	0x20000014

08005c58 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b08b      	sub	sp, #44	; 0x2c
 8005c5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61fb      	str	r3, [r7, #28]
 8005c62:	2300      	movs	r3, #0
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
 8005c66:	2300      	movs	r3, #0
 8005c68:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c6e:	4b38      	ldr	r3, [pc, #224]	; (8005d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 030c 	and.w	r3, r3, #12
 8005c76:	2b08      	cmp	r3, #8
 8005c78:	d00c      	beq.n	8005c94 <HAL_RCC_GetSysClockFreq+0x3c>
 8005c7a:	2b08      	cmp	r3, #8
 8005c7c:	d85d      	bhi.n	8005d3a <HAL_RCC_GetSysClockFreq+0xe2>
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <HAL_RCC_GetSysClockFreq+0x30>
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d003      	beq.n	8005c8e <HAL_RCC_GetSysClockFreq+0x36>
 8005c86:	e058      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c88:	4b32      	ldr	r3, [pc, #200]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005c8a:	623b      	str	r3, [r7, #32]
       break;
 8005c8c:	e058      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c8e:	4b31      	ldr	r3, [pc, #196]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005c90:	623b      	str	r3, [r7, #32]
      break;
 8005c92:	e055      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c94:	4b2e      	ldr	r3, [pc, #184]	; (8005d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c9c:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c9e:	4b2c      	ldr	r3, [pc, #176]	; (8005d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d017      	beq.n	8005cda <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8005caa:	4a2a      	ldr	r2, [pc, #168]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cb2:	4b27      	ldr	r3, [pc, #156]	; (8005d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cb4:	6859      	ldr	r1, [r3, #4]
 8005cb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cba:	400b      	ands	r3, r1
 8005cbc:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8005cc0:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc2:	6979      	ldr	r1, [r7, #20]
 8005cc4:	fa91 f1a1 	rbit	r1, r1
 8005cc8:	6139      	str	r1, [r7, #16]
  return(result);
 8005cca:	6939      	ldr	r1, [r7, #16]
 8005ccc:	fab1 f181 	clz	r1, r1
 8005cd0:	40cb      	lsrs	r3, r1
 8005cd2:	fb02 f303 	mul.w	r3, r2, r3
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd8:	e016      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8005cda:	4a1e      	ldr	r2, [pc, #120]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ce2:	4b1b      	ldr	r3, [pc, #108]	; (8005d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ce4:	6859      	ldr	r1, [r3, #4]
 8005ce6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cea:	400b      	ands	r3, r1
 8005cec:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8005cf0:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf2:	68f9      	ldr	r1, [r7, #12]
 8005cf4:	fa91 f1a1 	rbit	r1, r1
 8005cf8:	60b9      	str	r1, [r7, #8]
  return(result);
 8005cfa:	68b9      	ldr	r1, [r7, #8]
 8005cfc:	fab1 f181 	clz	r1, r1
 8005d00:	40cb      	lsrs	r3, r1
 8005d02:	fb02 f303 	mul.w	r3, r2, r3
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8005d08:	4b11      	ldr	r3, [pc, #68]	; (8005d50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d10:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005d14:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	fa93 f3a3 	rbit	r3, r3
 8005d1c:	603b      	str	r3, [r7, #0]
  return(result);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	fab3 f383 	clz	r3, r3
 8005d24:	fa22 f303 	lsr.w	r3, r2, r3
 8005d28:	3301      	adds	r3, #1
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8005d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d36:	623b      	str	r3, [r7, #32]
      break;
 8005d38:	e002      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d3a:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005d3c:	623b      	str	r3, [r7, #32]
      break;
 8005d3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d40:	6a3b      	ldr	r3, [r7, #32]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	372c      	adds	r7, #44	; 0x2c
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40023800 	.word	0x40023800
 8005d54:	00f42400 	.word	0x00f42400

08005d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d5c:	4b03      	ldr	r3, [pc, #12]	; (8005d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000014 	.word	0x20000014

08005d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8005d76:	f7ff ffef 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005d7a:	4601      	mov	r1, r0
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d84:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005d88:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	fa93 f3a3 	rbit	r3, r3
 8005d90:	603b      	str	r3, [r7, #0]
  return(result);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	fab3 f383 	clz	r3, r3
 8005d98:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9c:	4a04      	ldr	r2, [pc, #16]	; (8005db0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005d9e:	5cd3      	ldrb	r3, [r2, r3]
 8005da0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	40023800 	.word	0x40023800
 8005db0:	080109f0 	.word	0x080109f0

08005db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8005dba:	f7ff ffcd 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005dbe:	4601      	mov	r1, r0
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8005dc8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005dcc:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	fa93 f3a3 	rbit	r3, r3
 8005dd4:	603b      	str	r3, [r7, #0]
  return(result);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	fab3 f383 	clz	r3, r3
 8005ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8005de0:	4a04      	ldr	r2, [pc, #16]	; (8005df4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005de2:	5cd3      	ldrb	r3, [r2, r3]
 8005de4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40023800 	.word	0x40023800
 8005df4:	080109f0 	.word	0x080109f0

08005df8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	220f      	movs	r2, #15
 8005e06:	601a      	str	r2, [r3, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e08:	4b12      	ldr	r3, [pc, #72]	; (8005e54 <HAL_RCC_GetClockConfig+0x5c>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f003 0203 	and.w	r2, r3, #3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005e14:	4b0f      	ldr	r3, [pc, #60]	; (8005e54 <HAL_RCC_GetClockConfig+0x5c>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005e20:	4b0c      	ldr	r3, [pc, #48]	; (8005e54 <HAL_RCC_GetClockConfig+0x5c>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e2c:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <HAL_RCC_GetClockConfig+0x5c>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	08db      	lsrs	r3, r3, #3
 8005e32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005e3a:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <HAL_RCC_GetClockConfig+0x60>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 020f 	and.w	r2, r3, #15
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	601a      	str	r2, [r3, #0]
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	40023800 	.word	0x40023800
 8005e58:	40023c00 	.word	0x40023c00

08005e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b09c      	sub	sp, #112	; 0x70
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t tmpreg1 = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	66bb      	str	r3, [r7, #104]	; 0x68
  
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division   
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d106      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x2a>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 8082 	beq.w	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
        
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();    
 8005e86:	4bac      	ldr	r3, [pc, #688]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e8c:	f7fd ff98 	bl	8003dc0 <HAL_GetTick>
 8005e90:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e94:	f7fd ff94 	bl	8003dc0 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e1eb      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ea6:	4ba5      	ldr	r3, [pc, #660]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1f0      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x38>
    }
    
    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added   
      only for I2S configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d01e      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xa0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eca:	fa93 f3a3 	rbit	r3, r3
 8005ece:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 8005ed0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ed2:	fab3 f383 	clz	r3, r3
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6899      	ldr	r1, [r3, #8]
 8005edc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005ee0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ee4:	fa93 f3a3 	rbit	r3, r3
 8005ee8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eec:	fab3 f383 	clz	r3, r3
 8005ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef4:	4991      	ldr	r1, [pc, #580]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
  
    /*---------------------------- SAI configuration -------------------------*/ 
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d02a      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
      
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005f08:	4b8c      	ldr	r3, [pc, #560]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f0e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005f12:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005f16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f1a:	fa93 f3a3 	rbit	r3, r3
 8005f1e:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8005f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f22:	fab3 f383 	clz	r3, r3
 8005f26:	fa22 f303 	lsr.w	r3, r2, r3
 8005f2a:	66bb      	str	r3, [r7, #104]	; 0x68
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	019a      	lsls	r2, r3, #6
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	061b      	lsls	r3, r3, #24
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f3c:	071b      	lsls	r3, r3, #28
 8005f3e:	497f      	ldr	r1, [pc, #508]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005f46:	4b7d      	ldr	r3, [pc, #500]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f4c:	f023 021f 	bic.w	r2, r3, #31
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	3b01      	subs	r3, #1
 8005f56:	4979      	ldr	r1, [pc, #484]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f5e:	4b76      	ldr	r3, [pc, #472]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005f60:	2201      	movs	r2, #1
 8005f62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f64:	f7fd ff2c 	bl	8003dc0 <HAL_GetTick>
 8005f68:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f6c:	f7fd ff28 	bl	8003dc0 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e17f      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f7e:	4b6f      	ldr	r3, [pc, #444]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0f0      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x110>
    
  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0304 	and.w	r3, r3, #4
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x148>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 80d7 	beq.w	8006152 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8005fa4:	4b66      	ldr	r3, [pc, #408]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005faa:	f7fd ff09 	bl	8003dc0 <HAL_GetTick>
 8005fae:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fb0:	e008      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005fb2:	f7fd ff05 	bl	8003dc0 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      { 
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e15c      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fc4:	4b5d      	ldr	r3, [pc, #372]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fd0:	d0ef      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
    }
    
    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0304 	and.w	r3, r3, #4
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d04b      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8005fde:	4b57      	ldr	r3, [pc, #348]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005fe8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005fec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff0:	fa93 f3a3 	rbit	r3, r3
 8005ff4:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	fab3 f383 	clz	r3, r3
 8005ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8006000:	66bb      	str	r3, [r7, #104]	; 0x68
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691a      	ldr	r2, [r3, #16]
 8006006:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800600a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800600c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600e:	fa93 f3a3 	rbit	r3, r3
 8006012:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8006014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006016:	fab3 f383 	clz	r3, r3
 800601a:	409a      	lsls	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6959      	ldr	r1, [r3, #20]
 8006020:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8006024:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006028:	fa93 f3a3 	rbit	r3, r3
 800602c:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800602e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006030:	fab3 f383 	clz	r3, r3
 8006034:	fa01 f303 	lsl.w	r3, r1, r3
 8006038:	431a      	orrs	r2, r3
 800603a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800603e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006042:	fa93 f3a3 	rbit	r3, r3
 8006046:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800604a:	fab3 f383 	clz	r3, r3
 800604e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006050:	fa01 f303 	lsl.w	r3, r1, r3
 8006054:	4939      	ldr	r1, [pc, #228]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006056:	4313      	orrs	r3, r2
 8006058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800605c:	4b37      	ldr	r3, [pc, #220]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800605e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006062:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	3b01      	subs	r3, #1
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	4933      	ldr	r1, [pc, #204]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006070:	4313      	orrs	r3, r2
 8006072:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    
    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0308 	and.w	r3, r3, #8
 800607e:	2b00      	cmp	r3, #0
 8006080:	d049      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8006082:	4b2e      	ldr	r3, [pc, #184]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006088:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800608c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8006090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	fa93 f3a3 	rbit	r3, r3
 8006098:	613b      	str	r3, [r7, #16]
  return(result);
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	fab3 f383 	clz	r3, r3
 80060a0:	fa22 f303 	lsr.w	r3, r2, r3
 80060a4:	66bb      	str	r3, [r7, #104]	; 0x68
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691a      	ldr	r2, [r3, #16]
 80060aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	fa93 f3a3 	rbit	r3, r3
 80060b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	fab3 f383 	clz	r3, r3
 80060be:	409a      	lsls	r2, r3
 80060c0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80060c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	fa93 f3a3 	rbit	r3, r3
 80060cc:	623b      	str	r3, [r7, #32]
  return(result);
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	fab3 f383 	clz	r3, r3
 80060d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060d6:	fa01 f303 	lsl.w	r3, r1, r3
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6999      	ldr	r1, [r3, #24]
 80060e0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80060e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e8:	fa93 f3a3 	rbit	r3, r3
 80060ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	fab3 f383 	clz	r3, r3
 80060f4:	fa01 f303 	lsl.w	r3, r1, r3
 80060f8:	4910      	ldr	r1, [pc, #64]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006100:	4b0e      	ldr	r3, [pc, #56]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006102:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006106:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	490b      	ldr	r1, [pc, #44]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006110:	4313      	orrs	r3, r2
 8006112:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006116:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006118:	2201      	movs	r2, #1
 800611a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800611c:	f7fd fe50 	bl	8003dc0 <HAL_GetTick>
 8006120:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006122:	e00f      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006124:	f7fd fe4c 	bl	8003dc0 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b02      	cmp	r3, #2
 8006130:	d908      	bls.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      { 
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e0a3      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x422>
 8006136:	bf00      	nop
 8006138:	42470068 	.word	0x42470068
 800613c:	40023800 	.word	0x40023800
 8006140:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006144:	4b50      	ldr	r3, [pc, #320]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800614c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006150:	d1e8      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    }  
  }
  /*--------------------------------------------------------------------------*/
    
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0320 	and.w	r3, r3, #32
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 8083 	beq.w	8006266 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006160:	2300      	movs	r3, #0
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	4b48      	ldr	r3, [pc, #288]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006168:	4a47      	ldr	r2, [pc, #284]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800616a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800616e:	6413      	str	r3, [r2, #64]	; 0x40
 8006170:	4b45      	ldr	r3, [pc, #276]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	68fb      	ldr	r3, [r7, #12]
      
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800617c:	4b43      	ldr	r3, [pc, #268]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x430>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a42      	ldr	r2, [pc, #264]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8006182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006186:	6013      	str	r3, [r2, #0]
      
    /* Get tick */
    tickstart = HAL_GetTick();
 8006188:	f7fd fe1a 	bl	8003dc0 <HAL_GetTick>
 800618c:	66f8      	str	r0, [r7, #108]	; 0x6c
      
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800618e:	e008      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x346>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006190:	f7fd fe16 	bl	8003dc0 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x346>
      {
        return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e06d      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x422>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80061a2:	4b3a      	ldr	r3, [pc, #232]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x430>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0f0      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x334>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061ae:	4b36      	ldr	r3, [pc, #216]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80061b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b6:	66bb      	str	r3, [r7, #104]	; 0x68
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d02f      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d028      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061cc:	4b2e      	ldr	r3, [pc, #184]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80061ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d4:	66bb      	str	r3, [r7, #104]	; 0x68
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061d6:	4b2e      	ldr	r3, [pc, #184]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80061d8:	2201      	movs	r2, #1
 80061da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061dc:	4b2c      	ldr	r3, [pc, #176]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80061de:	2200      	movs	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80061e2:	4a29      	ldr	r2, [pc, #164]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80061e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061e8:	4b27      	ldr	r3, [pc, #156]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80061ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d014      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80061f4:	f7fd fde4 	bl	8003dc0 <HAL_GetTick>
 80061f8:	66f8      	str	r0, [r7, #108]	; 0x6c
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061fa:	e00a      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061fc:	f7fd fde0 	bl	8003dc0 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	f241 3288 	movw	r2, #5000	; 0x1388
 800620a:	4293      	cmp	r3, r2
 800620c:	d901      	bls.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e035      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006212:	4b1d      	ldr	r3, [pc, #116]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d0ee      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x3a0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800622a:	d10d      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800622c:	4b16      	ldr	r3, [pc, #88]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006238:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800623c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006240:	4911      	ldr	r1, [pc, #68]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006242:	4313      	orrs	r3, r2
 8006244:	608b      	str	r3, [r1, #8]
 8006246:	e005      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006248:	4b0f      	ldr	r3, [pc, #60]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	4a0e      	ldr	r2, [pc, #56]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800624e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006252:	6093      	str	r3, [r2, #8]
 8006254:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006256:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006260:	4909      	ldr	r1, [pc, #36]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006262:	4313      	orrs	r3, r2
 8006264:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0310 	and.w	r3, r3, #16
 800626e:	2b00      	cmp	r3, #0
 8006270:	d004      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006278:	4b06      	ldr	r3, [pc, #24]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800627a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3770      	adds	r7, #112	; 0x70
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	40023800 	.word	0x40023800
 800628c:	40007000 	.word	0x40007000
 8006290:	42470e40 	.word	0x42470e40
 8006294:	424711e0 	.word	0x424711e0

08006298 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e01d      	b.n	80062e6 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d105      	bne.n	80062c2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f003 ffdb 	bl	800a278 <HAL_SD_MspInit>
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2203      	movs	r2, #3
 80062c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f810 	bl	80062f0 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
	...

080062f0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80062f0:	b5b0      	push	{r4, r5, r7, lr}
 80062f2:	b08e      	sub	sp, #56	; 0x38
 80062f4:	af04      	add	r7, sp, #16
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80062f8:	2300      	movs	r3, #0
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006300:	2300      	movs	r3, #0
 8006302:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006304:	2300      	movs	r3, #0
 8006306:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006308:	2300      	movs	r3, #0
 800630a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800630c:	2300      	movs	r3, #0
 800630e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006310:	2376      	movs	r3, #118	; 0x76
 8006312:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681d      	ldr	r5, [r3, #0]
 8006318:	466c      	mov	r4, sp
 800631a:	f107 0318 	add.w	r3, r7, #24
 800631e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006322:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006326:	f107 030c 	add.w	r3, r7, #12
 800632a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800632c:	4628      	mov	r0, r5
 800632e:	f002 fc85 	bl	8008c3c <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8006332:	4b1c      	ldr	r3, [pc, #112]	; (80063a4 <HAL_SD_InitCard+0xb4>)
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4618      	mov	r0, r3
 800633e:	f002 fcc6 	bl	8008cce <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006342:	4b18      	ldr	r3, [pc, #96]	; (80063a4 <HAL_SD_InitCard+0xb4>)
 8006344:	2201      	movs	r2, #1
 8006346:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8006348:	2002      	movs	r0, #2
 800634a:	f7fd fd45 	bl	8003dd8 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f001 f90c 	bl	800756c <SD_PowerON>
 8006354:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00b      	beq.n	8006374 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e013      	b.n	800639c <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 f82f 	bl	80073d8 <SD_InitCard>
 800637a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00b      	beq.n	800639a <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	431a      	orrs	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e000      	b.n	800639c <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3728      	adds	r7, #40	; 0x28
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bdb0      	pop	{r4, r5, r7, pc}
 80063a4:	422580a0 	.word	0x422580a0

080063a8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80063a8:	b590      	push	{r4, r7, lr}
 80063aa:	b08f      	sub	sp, #60	; 0x3c
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80063b6:	2300      	movs	r3, #0
 80063b8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80063ba:	f7fd fd01 	bl	8003dc0 <HAL_GetTick>
 80063be:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 80063c0:	2300      	movs	r3, #0
 80063c2:	633b      	str	r3, [r7, #48]	; 0x30
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d107      	bne.n	80063de <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e177      	b.n	80066ce <HAL_SD_ReadBlocks+0x326>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	f040 816a 	bne.w	80066c0 <HAL_SD_ReadBlocks+0x318>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	441a      	add	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d907      	bls.n	8006410 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e15e      	b.n	80066ce <HAL_SD_ReadBlocks+0x326>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2203      	movs	r2, #3
 8006414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2200      	movs	r2, #0
 800641e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006424:	2b01      	cmp	r3, #1
 8006426:	d002      	beq.n	800642e <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	025b      	lsls	r3, r3, #9
 800642c:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006436:	4618      	mov	r0, r3
 8006438:	f002 fcdd 	bl	8008df6 <SDMMC_CmdBlockLength>
 800643c:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 800643e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006440:	2b00      	cmp	r3, #0
 8006442:	d010      	beq.n	8006466 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800644c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006454:	431a      	orrs	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e133      	b.n	80066ce <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006466:	f04f 33ff 	mov.w	r3, #4294967295
 800646a:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	025b      	lsls	r3, r3, #9
 8006470:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006472:	2390      	movs	r3, #144	; 0x90
 8006474:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006476:	2302      	movs	r3, #2
 8006478:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800647a:	2300      	movs	r3, #0
 800647c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800647e:	2301      	movs	r3, #1
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f107 0210 	add.w	r2, r7, #16
 800648a:	4611      	mov	r1, r2
 800648c:	4618      	mov	r0, r3
 800648e:	f002 fc86 	bl	8008d9e <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d90a      	bls.n	80064ae <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2202      	movs	r2, #2
 800649c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f002 fcee 	bl	8008e86 <SDMMC_CmdReadMultiBlock>
 80064aa:	6378      	str	r0, [r7, #52]	; 0x34
 80064ac:	e009      	b.n	80064c2 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2201      	movs	r2, #1
 80064b2:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f002 fcbf 	bl	8008e3e <SDMMC_CmdReadSingleBlock>
 80064c0:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80064c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d04a      	beq.n	800655e <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80064d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d8:	431a      	orrs	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e0f1      	b.n	80066ce <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d016      	beq.n	8006526 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80064f8:	2300      	movs	r3, #0
 80064fa:	633b      	str	r3, [r7, #48]	; 0x30
 80064fc:	e00d      	b.n	800651a <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6819      	ldr	r1, [r3, #0]
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006508:	18d4      	adds	r4, r2, r3
 800650a:	4608      	mov	r0, r1
 800650c:	f002 fbc1 	bl	8008c92 <SDIO_ReadFIFO>
 8006510:	4603      	mov	r3, r0
 8006512:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	3301      	adds	r3, #1
 8006518:	633b      	str	r3, [r7, #48]	; 0x30
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	2b07      	cmp	r3, #7
 800651e:	d9ee      	bls.n	80064fe <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8006520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006522:	3320      	adds	r3, #32
 8006524:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8006526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006528:	2b00      	cmp	r3, #0
 800652a:	d007      	beq.n	800653c <HAL_SD_ReadBlocks+0x194>
 800652c:	f7fd fc48 	bl	8003dc0 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006538:	429a      	cmp	r2, r3
 800653a:	d810      	bhi.n	800655e <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006544:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e0b7      	b.n	80066ce <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006564:	f240 332a 	movw	r3, #810	; 0x32a
 8006568:	4013      	ands	r3, r2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d0bd      	beq.n	80064ea <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006578:	2b00      	cmp	r3, #0
 800657a:	d020      	beq.n	80065be <HAL_SD_ReadBlocks+0x216>
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d91d      	bls.n	80065be <HAL_SD_ReadBlocks+0x216>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006586:	2b03      	cmp	r3, #3
 8006588:	d019      	beq.n	80065be <HAL_SD_ReadBlocks+0x216>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f002 fce6 	bl	8008f60 <SDMMC_CmdStopTransfer>
 8006594:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8006596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006598:	2b00      	cmp	r3, #0
 800659a:	d010      	beq.n	80065be <HAL_SD_ReadBlocks+0x216>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80065a4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ac:	431a      	orrs	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e087      	b.n	80066ce <HAL_SD_ReadBlocks+0x326>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c4:	f003 0308 	and.w	r3, r3, #8
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d010      	beq.n	80065ee <HAL_SD_ReadBlocks+0x246>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80065d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	f043 0208 	orr.w	r2, r3, #8
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e06f      	b.n	80066ce <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d010      	beq.n	800661e <HAL_SD_ReadBlocks+0x276>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006604:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660a:	f043 0202 	orr.w	r2, r3, #2
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e057      	b.n	80066ce <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006624:	f003 0320 	and.w	r3, r3, #32
 8006628:	2b00      	cmp	r3, #0
 800662a:	d037      	beq.n	800669c <HAL_SD_ReadBlocks+0x2f4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006634:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663a:	f043 0220 	orr.w	r2, r3, #32
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e03f      	b.n	80066ce <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4618      	mov	r0, r3
 8006654:	f002 fb1d 	bl	8008c92 <SDIO_ReadFIFO>
 8006658:	4602      	mov	r2, r0
 800665a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665c:	601a      	str	r2, [r3, #0]
      tempbuff++;
 800665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006660:	3304      	adds	r3, #4
 8006662:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8006664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006666:	2b00      	cmp	r3, #0
 8006668:	d007      	beq.n	800667a <HAL_SD_ReadBlocks+0x2d2>
 800666a:	f7fd fba9 	bl	8003dc0 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006676:	429a      	cmp	r2, r3
 8006678:	d810      	bhi.n	800669c <HAL_SD_ReadBlocks+0x2f4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006682:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e018      	b.n	80066ce <HAL_SD_ReadBlocks+0x326>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1d1      	bne.n	800664e <HAL_SD_ReadBlocks+0x2a6>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80066b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	e006      	b.n	80066ce <HAL_SD_ReadBlocks+0x326>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
  }
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	373c      	adds	r7, #60	; 0x3c
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd90      	pop	{r4, r7, pc}

080066d6 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b08e      	sub	sp, #56	; 0x38
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	607a      	str	r2, [r7, #4]
 80066e2:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80066e4:	2300      	movs	r3, #0
 80066e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80066e8:	f7fd fb6a 	bl	8003dc0 <HAL_GetTick>
 80066ec:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d107      	bne.n	800670c <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e160      	b.n	80069ce <HAL_SD_WriteBlocks+0x2f8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b01      	cmp	r3, #1
 8006716:	f040 8153 	bne.w	80069c0 <HAL_SD_WriteBlocks+0x2ea>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	441a      	add	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800672a:	429a      	cmp	r2, r3
 800672c:	d907      	bls.n	800673e <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006732:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e147      	b.n	80069ce <HAL_SD_WriteBlocks+0x2f8>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2203      	movs	r2, #3
 8006742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2200      	movs	r2, #0
 800674c:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006752:	2b01      	cmp	r3, #1
 8006754:	d002      	beq.n	800675c <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	025b      	lsls	r3, r3, #9
 800675a:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006764:	4618      	mov	r0, r3
 8006766:	f002 fb46 	bl	8008df6 <SDMMC_CmdBlockLength>
 800676a:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 800676c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676e:	2b00      	cmp	r3, #0
 8006770:	d010      	beq.n	8006794 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800677a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006782:	431a      	orrs	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e11c      	b.n	80069ce <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d90a      	bls.n	80067b0 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2220      	movs	r2, #32
 800679e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6879      	ldr	r1, [r7, #4]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f002 fbb5 	bl	8008f16 <SDMMC_CmdWriteMultiBlock>
 80067ac:	6378      	str	r0, [r7, #52]	; 0x34
 80067ae:	e009      	b.n	80067c4 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2210      	movs	r2, #16
 80067b4:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	4618      	mov	r0, r3
 80067be:	f002 fb86 	bl	8008ece <SDMMC_CmdWriteSingleBlock>
 80067c2:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80067c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d010      	beq.n	80067ec <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80067d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067da:	431a      	orrs	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e0f0      	b.n	80069ce <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80067ec:	f04f 33ff 	mov.w	r3, #4294967295
 80067f0:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	025b      	lsls	r3, r3, #9
 80067f6:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80067f8:	2390      	movs	r3, #144	; 0x90
 80067fa:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80067fc:	2300      	movs	r3, #0
 80067fe:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006800:	2300      	movs	r3, #0
 8006802:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006804:	2301      	movs	r3, #1
 8006806:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f107 0210 	add.w	r2, r7, #16
 8006810:	4611      	mov	r1, r2
 8006812:	4618      	mov	r0, r3
 8006814:	f002 fac3 	bl	8008d9e <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006818:	e037      	b.n	800688a <HAL_SD_WriteBlocks+0x1b4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, /*SDIO_FLAG_TXUNDERR |*/ SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d014      	beq.n	8006852 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006828:	2300      	movs	r3, #0
 800682a:	633b      	str	r3, [r7, #48]	; 0x30
 800682c:	e00b      	b.n	8006846 <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006838:	4413      	add	r3, r2
 800683a:	4619      	mov	r1, r3
 800683c:	f002 fa36 	bl	8008cac <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	3301      	adds	r3, #1
 8006844:	633b      	str	r3, [r7, #48]	; 0x30
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	2b07      	cmp	r3, #7
 800684a:	d9f0      	bls.n	800682e <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 800684c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684e:	3320      	adds	r3, #32
 8006850:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8006852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <HAL_SD_WriteBlocks+0x192>
 8006858:	f7fd fab2 	bl	8003dc0 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006864:	429a      	cmp	r2, r3
 8006866:	d810      	bhi.n	800688a <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006870:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006878:	431a      	orrs	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e0a1      	b.n	80069ce <HAL_SD_WriteBlocks+0x2f8>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006890:	f240 331a 	movw	r3, #794	; 0x31a
 8006894:	4013      	ands	r3, r2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d0bf      	beq.n	800681a <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d020      	beq.n	80068ea <HAL_SD_WriteBlocks+0x214>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d91d      	bls.n	80068ea <HAL_SD_WriteBlocks+0x214>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d019      	beq.n	80068ea <HAL_SD_WriteBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f002 fb50 	bl	8008f60 <SDMMC_CmdStopTransfer>
 80068c0:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 80068c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d010      	beq.n	80068ea <HAL_SD_WriteBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80068d0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d8:	431a      	orrs	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e071      	b.n	80069ce <HAL_SD_WriteBlocks+0x2f8>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f0:	f003 0308 	and.w	r3, r3, #8
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d010      	beq.n	800691a <HAL_SD_WriteBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006900:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006906:	f043 0208 	orr.w	r2, r3, #8
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e059      	b.n	80069ce <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d010      	beq.n	800694a <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006930:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006936:	f043 0202 	orr.w	r2, r3, #2
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e041      	b.n	80069ce <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006950:	f003 0310 	and.w	r3, r3, #16
 8006954:	2b00      	cmp	r3, #0
 8006956:	d010      	beq.n	800697a <HAL_SD_WriteBlocks+0x2a4>
    {
      // Clear all the static flags
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006960:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006966:	f043 0210 	orr.w	r2, r3, #16
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e029      	b.n	80069ce <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_STA_STBITERR))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006984:	2b00      	cmp	r3, #0
 8006986:	d010      	beq.n	80069aa <HAL_SD_WriteBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006990:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_GENERAL_UNKNOWN_ERR;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006996:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e011      	b.n	80069ce <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80069b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	e006      	b.n	80069ce <HAL_SD_WriteBlocks+0x2f8>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
  }
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3738      	adds	r7, #56	; 0x38
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
	...

080069d8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80069e0:	2300      	movs	r3, #0
 80069e2:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f000 808d 	beq.w	8006b0e <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069fc:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	6812      	ldr	r2, [r2, #0]
 8006a08:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006a0c:	f023 0302 	bic.w	r3, r3, #2
 8006a10:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a16:	f003 0308 	and.w	r3, r3, #8
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d03a      	beq.n	8006a94 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d105      	bne.n	8006a36 <HAL_SD_IRQHandler+0x5e>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d011      	beq.n	8006a5a <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f002 fa90 	bl	8008f60 <SDMMC_CmdStopTransfer>
 8006a40:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d008      	beq.n	8006a5a <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f939 	bl	8006ccc <HAL_SD_ErrorCallback>
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006a62:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d105      	bne.n	8006a84 <HAL_SD_IRQHandler+0xac>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7c:	f003 0302 	and.w	r3, r3, #2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <HAL_SD_IRQHandler+0xb4>
      {
        HAL_SD_RxCpltCallback(hsd);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f917 	bl	8006cb8 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 8006a8a:	e103      	b.n	8006c94 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f909 	bl	8006ca4 <HAL_SD_TxCpltCallback>
}
 8006a92:	e0ff      	b.n	8006c94 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 80f9 	beq.w	8006c94 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa6:	f003 0320 	and.w	r3, r3, #32
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d011      	beq.n	8006ad2 <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f002 fa54 	bl	8008f60 <SDMMC_CmdStopTransfer>
 8006ab8:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d008      	beq.n	8006ad2 <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f8fd 	bl	8006ccc <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f040 80da 	bne.w	8006c94 <HAL_SD_IRQHandler+0x2bc>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f040 80d3 	bne.w	8006c94 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 0208 	bic.w	r2, r2, #8
 8006afc:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f8cc 	bl	8006ca4 <HAL_SD_TxCpltCallback>
}
 8006b0c:	e0c2      	b.n	8006c94 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d008      	beq.n	8006b2e <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b24:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 ff7d 	bl	8007a26 <SD_Write_IT>
}
 8006b2c:	e0b2      	b.n	8006c94 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d008      	beq.n	8006b4e <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006b44:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 ff45 	bl	80079d6 <SD_Read_IT>
}
 8006b4c:	e0a2      	b.n	8006c94 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b54:	f240 233a 	movw	r3, #570	; 0x23a
 8006b58:	4013      	ands	r3, r2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 809a 	beq.w	8006c94 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d005      	beq.n	8006b7a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b72:	f043 0202 	orr.w	r2, r3, #2
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8c:	f043 0208 	orr.w	r2, r3, #8
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b9a:	f003 0320 	and.w	r3, r3, #32
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d005      	beq.n	8006bae <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba6:	f043 0220 	orr.w	r2, r3, #32
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	f043 0210 	orr.w	r2, r3, #16
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d005      	beq.n	8006be2 <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bda:	f043 0208 	orr.w	r2, r3, #8
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006bea:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	6812      	ldr	r2, [r2, #0]
 8006bf6:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006bfa:	f023 0302 	bic.w	r3, r3, #2
 8006bfe:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d036      	beq.n	8006c7a <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d011      	beq.n	8006c38 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c18:	4a20      	ldr	r2, [pc, #128]	; (8006c9c <HAL_SD_IRQHandler+0x2c4>)
 8006c1a:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7fd fa21 	bl	8004068 <HAL_DMA_Abort_IT>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d033      	beq.n	8006c94 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 fb55 	bl	80072e0 <SD_DMATxAbort>
}
 8006c36:	e02d      	b.n	8006c94 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d011      	beq.n	8006c64 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c44:	4a16      	ldr	r2, [pc, #88]	; (8006ca0 <HAL_SD_IRQHandler+0x2c8>)
 8006c46:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7fd fa0b 	bl	8004068 <HAL_DMA_Abort_IT>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d01d      	beq.n	8006c94 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 fb7d 	bl	800735c <SD_DMARxAbort>
}
 8006c62:	e017      	b.n	8006c94 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f834 	bl	8006ce0 <HAL_SD_AbortCallback>
}
 8006c78:	e00c      	b.n	8006c94 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d006      	beq.n	8006c94 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f81c 	bl	8006ccc <HAL_SD_ErrorCallback>
}
 8006c94:	bf00      	nop
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	080072e1 	.word	0x080072e1
 8006ca0:	0800735d 	.word	0x0800735d

08006ca4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
 __weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d06:	0e1b      	lsrs	r3, r3, #24
 8006d08:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	099b      	lsrs	r3, r3, #6
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	f003 0303 	and.w	r3, r3, #3
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	089b      	lsrs	r3, r3, #2
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	f003 030f 	and.w	r3, r3, #15
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d3c:	0c1b      	lsrs	r3, r3, #16
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d4e:	0a1b      	lsrs	r3, r3, #8
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d70:	0e1b      	lsrs	r3, r3, #24
 8006d72:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d84:	0c1b      	lsrs	r3, r3, #16
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	88db      	ldrh	r3, [r3, #6]
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	091b      	lsrs	r3, r3, #4
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	f003 030f 	and.w	r3, r3, #15
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	f003 030f 	and.w	r3, r3, #15
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006db6:	0a1b      	lsrs	r3, r3, #8
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	09db      	lsrs	r3, r3, #7
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	099b      	lsrs	r3, r3, #6
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	095b      	lsrs	r3, r3, #5
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	091b      	lsrs	r3, r3, #4
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f040 8087 	bne.w	8006f1a <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	029b      	lsls	r3, r3, #10
 8006e10:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	691a      	ldr	r2, [r3, #16]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e32:	0e1b      	lsrs	r3, r3, #24
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	691a      	ldr	r2, [r3, #16]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	099b      	lsrs	r3, r3, #6
 8006e40:	f003 0303 	and.w	r3, r3, #3
 8006e44:	431a      	orrs	r2, r3
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	08db      	lsrs	r3, r3, #3
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	f003 0307 	and.w	r3, r3, #7
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e6c:	0c1b      	lsrs	r3, r3, #16
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	f003 0307 	and.w	r3, r3, #7
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	089b      	lsrs	r3, r3, #2
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	f003 0307 	and.w	r3, r3, #7
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	f003 0306 	and.w	r3, r3, #6
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea8:	0a1b      	lsrs	r3, r3, #8
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	7e1b      	ldrb	r3, [r3, #24]
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	09db      	lsrs	r3, r3, #7
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	7e1b      	ldrb	r3, [r3, #24]
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	3302      	adds	r3, #2
 8006eda:	2201      	movs	r2, #1
 8006edc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006ee4:	fb03 f202 	mul.w	r2, r3, r2
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	7a1b      	ldrb	r3, [r3, #8]
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	fa03 f202 	lsl.w	r2, r3, r2
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006f06:	0a52      	lsrs	r2, r2, #9
 8006f08:	fb03 f202 	mul.w	r2, r3, r2
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f16:	661a      	str	r2, [r3, #96]	; 0x60
 8006f18:	e04d      	b.n	8006fb6 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d138      	bne.n	8006f94 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	041b      	lsls	r3, r3, #16
 8006f2e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f3a:	0e1b      	lsrs	r3, r3, #24
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	691a      	ldr	r2, [r3, #16]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	021b      	lsls	r3, r3, #8
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f52:	0c1b      	lsrs	r3, r3, #16
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	691a      	ldr	r2, [r3, #16]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f68:	0a1b      	lsrs	r3, r3, #8
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	3301      	adds	r3, #1
 8006f74:	029a      	lsls	r2, r3, #10
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	655a      	str	r2, [r3, #84]	; 0x54
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f88:	659a      	str	r2, [r3, #88]	; 0x58
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	661a      	str	r2, [r3, #96]	; 0x60
 8006f92:	e010      	b.n	8006fb6 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006f9c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e0c1      	b.n	800713a <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	099b      	lsrs	r3, r3, #6
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	7e9b      	ldrb	r3, [r3, #26]
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	09db      	lsrs	r3, r3, #7
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007002:	b2da      	uxtb	r2, r3
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700c:	0e1b      	lsrs	r3, r3, #24
 800700e:	b2db      	uxtb	r3, r3
 8007010:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	09db      	lsrs	r3, r3, #7
 8007016:	b2db      	uxtb	r3, r3
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	b2da      	uxtb	r2, r3
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	095b      	lsrs	r3, r3, #5
 8007026:	b2db      	uxtb	r3, r3
 8007028:	f003 0303 	and.w	r3, r3, #3
 800702c:	b2da      	uxtb	r2, r3
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	089b      	lsrs	r3, r3, #2
 8007036:	b2db      	uxtb	r3, r3
 8007038:	f003 0307 	and.w	r3, r3, #7
 800703c:	b2da      	uxtb	r2, r3
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	b2db      	uxtb	r3, r3
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	b2db      	uxtb	r3, r3
 800704a:	f003 030c 	and.w	r3, r3, #12
 800704e:	b2da      	uxtb	r2, r3
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007058:	0c1b      	lsrs	r3, r3, #16
 800705a:	b2db      	uxtb	r3, r3
 800705c:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	7fdb      	ldrb	r3, [r3, #31]
 8007062:	b2da      	uxtb	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	099b      	lsrs	r3, r3, #6
 8007068:	b2db      	uxtb	r3, r3
 800706a:	f003 0303 	and.w	r3, r3, #3
 800706e:	b2db      	uxtb	r3, r3
 8007070:	4313      	orrs	r3, r2
 8007072:	b2da      	uxtb	r2, r3
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	b2db      	uxtb	r3, r3
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	b2da      	uxtb	r2, r3
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	b2db      	uxtb	r3, r3
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	b2da      	uxtb	r2, r3
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a6:	0a1b      	lsrs	r3, r3, #8
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	09db      	lsrs	r3, r3, #7
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	099b      	lsrs	r3, r3, #6
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	095b      	lsrs	r3, r3, #5
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	091b      	lsrs	r3, r3, #4
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	089b      	lsrs	r3, r3, #2
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	f003 0303 	and.w	r3, r3, #3
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	b2db      	uxtb	r3, r3
 800710a:	f003 0303 	and.w	r3, r3, #3
 800710e:	b2da      	uxtb	r2, r3
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711a:	b2db      	uxtb	r3, r3
 800711c:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	085b      	lsrs	r3, r3, #1
 8007122:	b2db      	uxtb	r3, r3
 8007124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007128:	b2da      	uxtb	r2, r3
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007146:	b480      	push	{r7}
 8007148:	b083      	sub	sp, #12
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800719e:	b5b0      	push	{r4, r5, r7, lr}
 80071a0:	b08e      	sub	sp, #56	; 0x38
 80071a2:	af04      	add	r7, sp, #16
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80071a8:	2300      	movs	r3, #0
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2203      	movs	r2, #3
 80071b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d02e      	beq.n	800721a <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c2:	d106      	bne.n	80071d2 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	639a      	str	r2, [r3, #56]	; 0x38
 80071d0:	e029      	b.n	8007226 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071d8:	d10a      	bne.n	80071f0 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fa98 	bl	8007710 <SD_WideBus_Enable>
 80071e0:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e8:	431a      	orrs	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	639a      	str	r2, [r3, #56]	; 0x38
 80071ee:	e01a      	b.n	8007226 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10a      	bne.n	800720c <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fad7 	bl	80077aa <SD_WideBus_Disable>
 80071fc:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	431a      	orrs	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	639a      	str	r2, [r3, #56]	; 0x38
 800720a:	e00c      	b.n	8007226 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007210:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	639a      	str	r2, [r3, #56]	; 0x38
 8007218:	e005      	b.n	8007226 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00a      	beq.n	8007244 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007236:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e024      	b.n	800728e <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681d      	ldr	r5, [r3, #0]
 800726a:	466c      	mov	r4, sp
 800726c:	f107 0318 	add.w	r3, r7, #24
 8007270:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007274:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007278:	f107 030c 	add.w	r3, r7, #12
 800727c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800727e:	4628      	mov	r0, r5
 8007280:	f001 fcdc 	bl	8008c3c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3728      	adds	r7, #40	; 0x28
 8007292:	46bd      	mov	sp, r7
 8007294:	bdb0      	pop	{r4, r5, r7, pc}

08007296 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b086      	sub	sp, #24
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800729e:	2304      	movs	r3, #4
 80072a0:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80072a2:	2300      	movs	r3, #0
 80072a4:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80072aa:	f107 030c 	add.w	r3, r7, #12
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fa03 	bl	80076bc <SD_SendStatus>
 80072b6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d005      	beq.n	80072ca <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	431a      	orrs	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	0a5b      	lsrs	r3, r3, #9
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	f003 030f 	and.w	r3, r3, #15
 80072d4:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 80072d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007300:	2b00      	cmp	r3, #0
 8007302:	d127      	bne.n	8007354 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f7ff ffc6 	bl	8007296 <HAL_SD_GetCardState>
 800730a:	4603      	mov	r3, r0
 800730c:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800731c:	7afb      	ldrb	r3, [r7, #11]
 800731e:	2b06      	cmp	r3, #6
 8007320:	d002      	beq.n	8007328 <SD_DMATxAbort+0x48>
 8007322:	7afb      	ldrb	r3, [r7, #11]
 8007324:	2b05      	cmp	r3, #5
 8007326:	d115      	bne.n	8007354 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4618      	mov	r0, r3
 800732e:	f001 fe17 	bl	8008f60 <SDMMC_CmdStopTransfer>
 8007332:	4602      	mov	r2, r0
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	431a      	orrs	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <SD_DMATxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f7ff fcca 	bl	8006ce0 <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 800734c:	e002      	b.n	8007354 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f7ff fcbc 	bl	8006ccc <HAL_SD_ErrorCallback>
}
 8007354:	bf00      	nop
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007368:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736e:	2b00      	cmp	r3, #0
 8007370:	d002      	beq.n	8007378 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737c:	2b00      	cmp	r3, #0
 800737e:	d127      	bne.n	80073d0 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f7ff ff88 	bl	8007296 <HAL_SD_GetCardState>
 8007386:	4603      	mov	r3, r0
 8007388:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007398:	7afb      	ldrb	r3, [r7, #11]
 800739a:	2b06      	cmp	r3, #6
 800739c:	d002      	beq.n	80073a4 <SD_DMARxAbort+0x48>
 800739e:	7afb      	ldrb	r3, [r7, #11]
 80073a0:	2b05      	cmp	r3, #5
 80073a2:	d115      	bne.n	80073d0 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f001 fdd9 	bl	8008f60 <SDMMC_CmdStopTransfer>
 80073ae:	4602      	mov	r2, r0
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b4:	431a      	orrs	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <SD_DMARxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f7ff fc8c 	bl	8006ce0 <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 80073c8:	e002      	b.n	80073d0 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f7ff fc7e 	bl	8006ccc <HAL_SD_ErrorCallback>
}
 80073d0:	bf00      	nop
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80073d8:	b5b0      	push	{r4, r5, r7, lr}
 80073da:	b094      	sub	sp, #80	; 0x50
 80073dc:	af04      	add	r7, sp, #16
 80073de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80073e0:	2300      	movs	r3, #0
 80073e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 80073e4:	2301      	movs	r3, #1
 80073e6:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f001 fc7c 	bl	8008cea <SDIO_GetPowerState>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d102      	bne.n	80073fe <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80073f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80073fc:	e0b2      	b.n	8007564 <SD_InitCard+0x18c>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007402:	2b03      	cmp	r3, #3
 8007404:	d02f      	beq.n	8007466 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4618      	mov	r0, r3
 800740c:	f001 fec2 	bl	8009194 <SDMMC_CmdSendCID>
 8007410:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <SD_InitCard+0x44>
    {
      return errorstate;
 8007418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800741a:	e0a3      	b.n	8007564 <SD_InitCard+0x18c>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2100      	movs	r1, #0
 8007422:	4618      	mov	r0, r3
 8007424:	f001 fca6 	bl	8008d74 <SDIO_GetResponse>
 8007428:	4602      	mov	r2, r0
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2104      	movs	r1, #4
 8007434:	4618      	mov	r0, r3
 8007436:	f001 fc9d 	bl	8008d74 <SDIO_GetResponse>
 800743a:	4602      	mov	r2, r0
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2108      	movs	r1, #8
 8007446:	4618      	mov	r0, r3
 8007448:	f001 fc94 	bl	8008d74 <SDIO_GetResponse>
 800744c:	4602      	mov	r2, r0
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	210c      	movs	r1, #12
 8007458:	4618      	mov	r0, r3
 800745a:	f001 fc8b 	bl	8008d74 <SDIO_GetResponse>
 800745e:	4602      	mov	r2, r0
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800746a:	2b03      	cmp	r3, #3
 800746c:	d00d      	beq.n	800748a <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f107 020e 	add.w	r2, r7, #14
 8007476:	4611      	mov	r1, r2
 8007478:	4618      	mov	r0, r3
 800747a:	f001 fecc 	bl	8009216 <SDMMC_CmdSetRelAdd>
 800747e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <SD_InitCard+0xb2>
    {
      return errorstate;
 8007486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007488:	e06c      	b.n	8007564 <SD_InitCard+0x18c>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748e:	2b03      	cmp	r3, #3
 8007490:	d036      	beq.n	8007500 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007492:	89fb      	ldrh	r3, [r7, #14]
 8007494:	461a      	mov	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a2:	041b      	lsls	r3, r3, #16
 80074a4:	4619      	mov	r1, r3
 80074a6:	4610      	mov	r0, r2
 80074a8:	f001 fe94 	bl	80091d4 <SDMMC_CmdSendCSD>
 80074ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80074ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <SD_InitCard+0xe0>
    {
      return errorstate;
 80074b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b6:	e055      	b.n	8007564 <SD_InitCard+0x18c>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2100      	movs	r1, #0
 80074be:	4618      	mov	r0, r3
 80074c0:	f001 fc58 	bl	8008d74 <SDIO_GetResponse>
 80074c4:	4602      	mov	r2, r0
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2104      	movs	r1, #4
 80074d0:	4618      	mov	r0, r3
 80074d2:	f001 fc4f 	bl	8008d74 <SDIO_GetResponse>
 80074d6:	4602      	mov	r2, r0
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2108      	movs	r1, #8
 80074e2:	4618      	mov	r0, r3
 80074e4:	f001 fc46 	bl	8008d74 <SDIO_GetResponse>
 80074e8:	4602      	mov	r2, r0
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	210c      	movs	r1, #12
 80074f4:	4618      	mov	r0, r3
 80074f6:	f001 fc3d 	bl	8008d74 <SDIO_GetResponse>
 80074fa:	4602      	mov	r2, r0
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2104      	movs	r1, #4
 8007506:	4618      	mov	r0, r3
 8007508:	f001 fc34 	bl	8008d74 <SDIO_GetResponse>
 800750c:	4603      	mov	r3, r0
 800750e:	0d1a      	lsrs	r2, r3, #20
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8007514:	f107 0310 	add.w	r3, r7, #16
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7ff fbea 	bl	8006cf4 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6819      	ldr	r1, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007528:	041b      	lsls	r3, r3, #16
 800752a:	2200      	movs	r2, #0
 800752c:	461c      	mov	r4, r3
 800752e:	4615      	mov	r5, r2
 8007530:	4622      	mov	r2, r4
 8007532:	462b      	mov	r3, r5
 8007534:	4608      	mov	r0, r1
 8007536:	f001 fd37 	bl	8008fa8 <SDMMC_CmdSelDesel>
 800753a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800753c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <SD_InitCard+0x16e>
  {
    return errorstate;
 8007542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007544:	e00e      	b.n	8007564 <SD_InitCard+0x18c>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681d      	ldr	r5, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	466c      	mov	r4, sp
 800754e:	f103 0210 	add.w	r2, r3, #16
 8007552:	ca07      	ldmia	r2, {r0, r1, r2}
 8007554:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007558:	3304      	adds	r3, #4
 800755a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800755c:	4628      	mov	r0, r5
 800755e:	f001 fb6d 	bl	8008c3c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3740      	adds	r7, #64	; 0x40
 8007568:	46bd      	mov	sp, r7
 800756a:	bdb0      	pop	{r4, r5, r7, pc}

0800756c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007578:	2300      	movs	r3, #0
 800757a:	617b      	str	r3, [r7, #20]
 800757c:	2300      	movs	r3, #0
 800757e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007580:	2300      	movs	r3, #0
 8007582:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4618      	mov	r0, r3
 800758a:	f001 fd32 	bl	8008ff2 <SDMMC_CmdGoIdleState>
 800758e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <SD_PowerON+0x2e>
  {
    return errorstate;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	e08c      	b.n	80076b4 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4618      	mov	r0, r3
 80075a0:	f001 fd47 	bl	8009032 <SDMMC_CmdOperCond>
 80075a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d03d      	beq.n	8007628 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 80075b2:	e032      	b.n	800761a <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	60ba      	str	r2, [r7, #8]
 80075ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075be:	4293      	cmp	r3, r2
 80075c0:	d102      	bne.n	80075c8 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80075c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075c6:	e075      	b.n	80076b4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2100      	movs	r1, #0
 80075ce:	4618      	mov	r0, r3
 80075d0:	f001 fd50 	bl	8009074 <SDMMC_CmdAppCommand>
 80075d4:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075e0:	e068      	b.n	80076b4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2100      	movs	r1, #0
 80075e8:	4618      	mov	r0, r3
 80075ea:	f001 fd67 	bl	80090bc <SDMMC_CmdAppOperCommand>
 80075ee:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075fa:	e05b      	b.n	80076b4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2100      	movs	r1, #0
 8007602:	4618      	mov	r0, r3
 8007604:	f001 fbb6 	bl	8008d74 <SDIO_GetResponse>
 8007608:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	0fdb      	lsrs	r3, r3, #31
 800760e:	2b01      	cmp	r3, #1
 8007610:	d101      	bne.n	8007616 <SD_PowerON+0xaa>
 8007612:	2301      	movs	r3, #1
 8007614:	e000      	b.n	8007618 <SD_PowerON+0xac>
 8007616:	2300      	movs	r3, #0
 8007618:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d0c9      	beq.n	80075b4 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	645a      	str	r2, [r3, #68]	; 0x44
 8007626:	e044      	b.n	80076b2 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800762e:	e031      	b.n	8007694 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	60ba      	str	r2, [r7, #8]
 8007636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800763a:	4293      	cmp	r3, r2
 800763c:	d102      	bne.n	8007644 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800763e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007642:	e037      	b.n	80076b4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2100      	movs	r1, #0
 800764a:	4618      	mov	r0, r3
 800764c:	f001 fd12 	bl	8009074 <SDMMC_CmdAppCommand>
 8007650:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <SD_PowerON+0xf0>
      {
        return errorstate;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	e02b      	b.n	80076b4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007664:	4618      	mov	r0, r3
 8007666:	f001 fd29 	bl	80090bc <SDMMC_CmdAppOperCommand>
 800766a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <SD_PowerON+0x10a>
      {
        return errorstate;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	e01e      	b.n	80076b4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2100      	movs	r1, #0
 800767c:	4618      	mov	r0, r3
 800767e:	f001 fb79 	bl	8008d74 <SDIO_GetResponse>
 8007682:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	0fdb      	lsrs	r3, r3, #31
 8007688:	2b01      	cmp	r3, #1
 800768a:	d101      	bne.n	8007690 <SD_PowerON+0x124>
 800768c:	2301      	movs	r3, #1
 800768e:	e000      	b.n	8007692 <SD_PowerON+0x126>
 8007690:	2300      	movs	r3, #0
 8007692:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d0ca      	beq.n	8007630 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d003      	beq.n	80076ac <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	645a      	str	r2, [r3, #68]	; 0x44
 80076aa:	e002      	b.n	80076b2 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80076c6:	2300      	movs	r3, #0
 80076c8:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d102      	bne.n	80076d6 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 80076d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076d4:	e018      	b.n	8007708 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076de:	041b      	lsls	r3, r3, #16
 80076e0:	4619      	mov	r1, r3
 80076e2:	4610      	mov	r0, r2
 80076e4:	f001 fdba 	bl	800925c <SDMMC_CmdSendStatus>
 80076e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <SD_SendStatus+0x38>
  {
    return errorstate;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	e009      	b.n	8007708 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2100      	movs	r1, #0
 80076fa:	4618      	mov	r0, r3
 80076fc:	f001 fb3a 	bl	8008d74 <SDIO_GetResponse>
 8007700:	4602      	mov	r2, r0
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	2300      	movs	r3, #0
 800771e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007720:	2300      	movs	r3, #0
 8007722:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2100      	movs	r1, #0
 800772a:	4618      	mov	r0, r3
 800772c:	f001 fb22 	bl	8008d74 <SDIO_GetResponse>
 8007730:	4603      	mov	r3, r0
 8007732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007736:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800773a:	d102      	bne.n	8007742 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800773c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007740:	e02f      	b.n	80077a2 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007742:	f107 030c 	add.w	r3, r7, #12
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f87b 	bl	8007844 <SD_FindSCR>
 800774e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	e023      	b.n	80077a2 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d01c      	beq.n	800779e <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800776c:	041b      	lsls	r3, r3, #16
 800776e:	4619      	mov	r1, r3
 8007770:	4610      	mov	r0, r2
 8007772:	f001 fc7f 	bl	8009074 <SDMMC_CmdAppCommand>
 8007776:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	e00f      	b.n	80077a2 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2102      	movs	r1, #2
 8007788:	4618      	mov	r0, r3
 800778a:	f001 fcbc 	bl	8009106 <SDMMC_CmdBusWidth>
 800778e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	e003      	b.n	80077a2 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800779a:	2300      	movs	r3, #0
 800779c:	e001      	b.n	80077a2 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800779e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b086      	sub	sp, #24
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80077b2:	2300      	movs	r3, #0
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	2300      	movs	r3, #0
 80077b8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80077ba:	2300      	movs	r3, #0
 80077bc:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2100      	movs	r1, #0
 80077c4:	4618      	mov	r0, r3
 80077c6:	f001 fad5 	bl	8008d74 <SDIO_GetResponse>
 80077ca:	4603      	mov	r3, r0
 80077cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077d4:	d102      	bne.n	80077dc <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80077d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077da:	e02f      	b.n	800783c <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80077dc:	f107 030c 	add.w	r3, r7, #12
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f82e 	bl	8007844 <SD_FindSCR>
 80077e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d001      	beq.n	80077f4 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	e023      	b.n	800783c <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d01c      	beq.n	8007838 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007806:	041b      	lsls	r3, r3, #16
 8007808:	4619      	mov	r1, r3
 800780a:	4610      	mov	r0, r2
 800780c:	f001 fc32 	bl	8009074 <SDMMC_CmdAppCommand>
 8007810:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	e00f      	b.n	800783c <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2100      	movs	r1, #0
 8007822:	4618      	mov	r0, r3
 8007824:	f001 fc6f 	bl	8009106 <SDMMC_CmdBusWidth>
 8007828:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	e003      	b.n	800783c <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8007834:	2300      	movs	r3, #0
 8007836:	e001      	b.n	800783c <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007838:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800783c:	4618      	mov	r0, r3
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007844:	b590      	push	{r4, r7, lr}
 8007846:	b08f      	sub	sp, #60	; 0x3c
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800784e:	2300      	movs	r3, #0
 8007850:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8007852:	f7fc fab5 	bl	8003dc0 <HAL_GetTick>
 8007856:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800785c:	2300      	movs	r3, #0
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	2300      	movs	r3, #0
 8007862:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2108      	movs	r1, #8
 800786a:	4618      	mov	r0, r3
 800786c:	f001 fac3 	bl	8008df6 <SDMMC_CmdBlockLength>
 8007870:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787a:	e0a8      	b.n	80079ce <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007884:	041b      	lsls	r3, r3, #16
 8007886:	4619      	mov	r1, r3
 8007888:	4610      	mov	r0, r2
 800788a:	f001 fbf3 	bl	8009074 <SDMMC_CmdAppCommand>
 800788e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8007890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	e099      	b.n	80079ce <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800789a:	f04f 33ff 	mov.w	r3, #4294967295
 800789e:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 80078a0:	2308      	movs	r3, #8
 80078a2:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80078a4:	2330      	movs	r3, #48	; 0x30
 80078a6:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80078a8:	2302      	movs	r3, #2
 80078aa:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 80078b0:	2301      	movs	r3, #1
 80078b2:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f107 0214 	add.w	r2, r7, #20
 80078bc:	4611      	mov	r1, r2
 80078be:	4618      	mov	r0, r3
 80078c0:	f001 fa6d 	bl	8008d9e <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f001 fc40 	bl	800914e <SDMMC_CmdSendSCR>
 80078ce:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80078d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d022      	beq.n	800791c <SD_FindSCR+0xd8>
  {
    return errorstate;
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	e079      	b.n	80079ce <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00e      	beq.n	8007906 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6819      	ldr	r1, [r3, #0]
 80078ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	f107 020c 	add.w	r2, r7, #12
 80078f4:	18d4      	adds	r4, r2, r3
 80078f6:	4608      	mov	r0, r1
 80078f8:	f001 f9cb 	bl	8008c92 <SDIO_ReadFIFO>
 80078fc:	4603      	mov	r3, r0
 80078fe:	6023      	str	r3, [r4, #0]
      index++;
 8007900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007902:	3301      	adds	r3, #1
 8007904:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007906:	f7fc fa5b 	bl	8003dc0 <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007914:	d102      	bne.n	800791c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007916:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800791a:	e058      	b.n	80079ce <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007922:	f240 432a 	movw	r3, #1066	; 0x42a
 8007926:	4013      	ands	r3, r2
 8007928:	2b00      	cmp	r3, #0
 800792a:	d0d6      	beq.n	80078da <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007932:	f003 0308 	and.w	r3, r3, #8
 8007936:	2b00      	cmp	r3, #0
 8007938:	d005      	beq.n	8007946 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2208      	movs	r2, #8
 8007940:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007942:	2308      	movs	r3, #8
 8007944:	e043      	b.n	80079ce <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d005      	beq.n	8007960 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2202      	movs	r2, #2
 800795a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800795c:	2302      	movs	r3, #2
 800795e:	e036      	b.n	80079ce <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007966:	f003 0320 	and.w	r3, r3, #32
 800796a:	2b00      	cmp	r3, #0
 800796c:	d005      	beq.n	800797a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2220      	movs	r2, #32
 8007974:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8007976:	2320      	movs	r3, #32
 8007978:	e029      	b.n	80079ce <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007982:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	061a      	lsls	r2, r3, #24
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	021b      	lsls	r3, r3, #8
 800798c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007990:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	0a1b      	lsrs	r3, r3, #8
 8007996:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800799a:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80079a6:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80079a8:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	061a      	lsls	r2, r3, #24
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	021b      	lsls	r3, r3, #8
 80079b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079b6:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	0a1b      	lsrs	r3, r3, #8
 80079bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80079c0:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	0e1b      	lsrs	r3, r3, #24
 80079c6:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	373c      	adds	r7, #60	; 0x3c
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd90      	pop	{r4, r7, pc}

080079d6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80079d6:	b590      	push	{r4, r7, lr}
 80079d8:	b085      	sub	sp, #20
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80079de:	2300      	movs	r3, #0
 80079e0:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e6:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]
 80079ec:	e00d      	b.n	8007a0a <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6819      	ldr	r1, [r3, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	18d4      	adds	r4, r2, r3
 80079fa:	4608      	mov	r0, r1
 80079fc:	f001 f949 	bl	8008c92 <SDIO_ReadFIFO>
 8007a00:	4603      	mov	r3, r0
 8007a02:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	3301      	adds	r3, #1
 8007a08:	60fb      	str	r3, [r7, #12]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2b07      	cmp	r3, #7
 8007a0e:	d9ee      	bls.n	80079ee <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a14:	f103 0220 	add.w	r2, r3, #32
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd90      	pop	{r4, r7, pc}

08007a26 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b084      	sub	sp, #16
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	e00b      	b.n	8007a56 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	4413      	add	r3, r2
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	f001 f92e 	bl	8008cac <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	3301      	adds	r3, #1
 8007a54:	60fb      	str	r3, [r7, #12]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2b07      	cmp	r3, #7
 8007a5a:	d9f0      	bls.n	8007a3e <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	f103 0220 	add.w	r2, r3, #32
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b082      	sub	sp, #8
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e01d      	b.n	8007ac0 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d106      	bne.n	8007a9e <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f002 fc39 	bl	800a310 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	3304      	adds	r3, #4
 8007aae:	4619      	mov	r1, r3
 8007ab0:	4610      	mov	r0, r2
 8007ab2:	f000 f955 	bl	8007d60 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <HAL_TIM_Base_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f042 0201 	orr.w	r2, r2, #1
 8007ade:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0201 	orr.w	r2, r2, #1
 8007aee:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b082      	sub	sp, #8
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	f003 0302 	and.w	r3, r3, #2
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d122      	bne.n	8007b5a <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d11b      	bne.n	8007b5a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f06f 0202 	mvn.w	r2, #2
 8007b2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	f003 0303 	and.w	r3, r3, #3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d003      	beq.n	8007b48 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f8ee 	bl	8007d22 <HAL_TIM_IC_CaptureCallback>
 8007b46:	e005      	b.n	8007b54 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f8e0 	bl	8007d0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f8f1 	bl	8007d36 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	d122      	bne.n	8007bae <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	f003 0304 	and.w	r3, r3, #4
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	d11b      	bne.n	8007bae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f06f 0204 	mvn.w	r2, #4
 8007b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2202      	movs	r2, #2
 8007b84:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d003      	beq.n	8007b9c <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f8c4 	bl	8007d22 <HAL_TIM_IC_CaptureCallback>
 8007b9a:	e005      	b.n	8007ba8 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f8b6 	bl	8007d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f8c7 	bl	8007d36 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	f003 0308 	and.w	r3, r3, #8
 8007bb8:	2b08      	cmp	r3, #8
 8007bba:	d122      	bne.n	8007c02 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	f003 0308 	and.w	r3, r3, #8
 8007bc6:	2b08      	cmp	r3, #8
 8007bc8:	d11b      	bne.n	8007c02 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f06f 0208 	mvn.w	r2, #8
 8007bd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2204      	movs	r2, #4
 8007bd8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	f003 0303 	and.w	r3, r3, #3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f89a 	bl	8007d22 <HAL_TIM_IC_CaptureCallback>
 8007bee:	e005      	b.n	8007bfc <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f88c 	bl	8007d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f89d 	bl	8007d36 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	f003 0310 	and.w	r3, r3, #16
 8007c0c:	2b10      	cmp	r3, #16
 8007c0e:	d122      	bne.n	8007c56 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f003 0310 	and.w	r3, r3, #16
 8007c1a:	2b10      	cmp	r3, #16
 8007c1c:	d11b      	bne.n	8007c56 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f06f 0210 	mvn.w	r2, #16
 8007c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2208      	movs	r2, #8
 8007c2c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	69db      	ldr	r3, [r3, #28]
 8007c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f870 	bl	8007d22 <HAL_TIM_IC_CaptureCallback>
 8007c42:	e005      	b.n	8007c50 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f862 	bl	8007d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f873 	bl	8007d36 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d10e      	bne.n	8007c82 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d107      	bne.n	8007c82 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f06f 0201 	mvn.w	r2, #1
 8007c7a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7fc f80b 	bl	8003c98 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8c:	2b80      	cmp	r3, #128	; 0x80
 8007c8e:	d10e      	bne.n	8007cae <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9a:	2b80      	cmp	r3, #128	; 0x80
 8007c9c:	d107      	bne.n	8007cae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ca6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f90d 	bl	8007ec8 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb8:	2b40      	cmp	r3, #64	; 0x40
 8007cba:	d10e      	bne.n	8007cda <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc6:	2b40      	cmp	r3, #64	; 0x40
 8007cc8:	d107      	bne.n	8007cda <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007cd2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f838 	bl	8007d4a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	f003 0320 	and.w	r3, r3, #32
 8007ce4:	2b20      	cmp	r3, #32
 8007ce6:	d10e      	bne.n	8007d06 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	f003 0320 	and.w	r3, r3, #32
 8007cf2:	2b20      	cmp	r3, #32
 8007cf4:	d107      	bne.n	8007d06 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f06f 0220 	mvn.w	r2, #32
 8007cfe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f8d7 	bl	8007eb4 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8007d06:	bf00      	nop
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d16:	bf00      	nop
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d2a:	bf00      	nop
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d3e:	bf00      	nop
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d52:	bf00      	nop
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
	...

08007d60 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a44      	ldr	r2, [pc, #272]	; (8007e88 <TIM_Base_SetConfig+0x128>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d013      	beq.n	8007da4 <TIM_Base_SetConfig+0x44>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d82:	d00f      	beq.n	8007da4 <TIM_Base_SetConfig+0x44>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a41      	ldr	r2, [pc, #260]	; (8007e8c <TIM_Base_SetConfig+0x12c>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d00b      	beq.n	8007da4 <TIM_Base_SetConfig+0x44>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a40      	ldr	r2, [pc, #256]	; (8007e90 <TIM_Base_SetConfig+0x130>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d007      	beq.n	8007da4 <TIM_Base_SetConfig+0x44>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a3f      	ldr	r2, [pc, #252]	; (8007e94 <TIM_Base_SetConfig+0x134>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d003      	beq.n	8007da4 <TIM_Base_SetConfig+0x44>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a3e      	ldr	r2, [pc, #248]	; (8007e98 <TIM_Base_SetConfig+0x138>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d101      	bne.n	8007da8 <TIM_Base_SetConfig+0x48>
 8007da4:	2301      	movs	r3, #1
 8007da6:	e000      	b.n	8007daa <TIM_Base_SetConfig+0x4a>
 8007da8:	2300      	movs	r3, #0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d008      	beq.n	8007dc0 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a31      	ldr	r2, [pc, #196]	; (8007e88 <TIM_Base_SetConfig+0x128>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d02b      	beq.n	8007e20 <TIM_Base_SetConfig+0xc0>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dce:	d027      	beq.n	8007e20 <TIM_Base_SetConfig+0xc0>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a2e      	ldr	r2, [pc, #184]	; (8007e8c <TIM_Base_SetConfig+0x12c>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d023      	beq.n	8007e20 <TIM_Base_SetConfig+0xc0>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a2d      	ldr	r2, [pc, #180]	; (8007e90 <TIM_Base_SetConfig+0x130>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d01f      	beq.n	8007e20 <TIM_Base_SetConfig+0xc0>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a2c      	ldr	r2, [pc, #176]	; (8007e94 <TIM_Base_SetConfig+0x134>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d01b      	beq.n	8007e20 <TIM_Base_SetConfig+0xc0>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a2b      	ldr	r2, [pc, #172]	; (8007e98 <TIM_Base_SetConfig+0x138>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d017      	beq.n	8007e20 <TIM_Base_SetConfig+0xc0>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a2a      	ldr	r2, [pc, #168]	; (8007e9c <TIM_Base_SetConfig+0x13c>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d013      	beq.n	8007e20 <TIM_Base_SetConfig+0xc0>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a29      	ldr	r2, [pc, #164]	; (8007ea0 <TIM_Base_SetConfig+0x140>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d00f      	beq.n	8007e20 <TIM_Base_SetConfig+0xc0>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a28      	ldr	r2, [pc, #160]	; (8007ea4 <TIM_Base_SetConfig+0x144>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d00b      	beq.n	8007e20 <TIM_Base_SetConfig+0xc0>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a27      	ldr	r2, [pc, #156]	; (8007ea8 <TIM_Base_SetConfig+0x148>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d007      	beq.n	8007e20 <TIM_Base_SetConfig+0xc0>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a26      	ldr	r2, [pc, #152]	; (8007eac <TIM_Base_SetConfig+0x14c>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d003      	beq.n	8007e20 <TIM_Base_SetConfig+0xc0>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a25      	ldr	r2, [pc, #148]	; (8007eb0 <TIM_Base_SetConfig+0x150>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d101      	bne.n	8007e24 <TIM_Base_SetConfig+0xc4>
 8007e20:	2301      	movs	r3, #1
 8007e22:	e000      	b.n	8007e26 <TIM_Base_SetConfig+0xc6>
 8007e24:	2300      	movs	r3, #0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d008      	beq.n	8007e3c <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	689a      	ldr	r2, [r3, #8]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a0c      	ldr	r2, [pc, #48]	; (8007e88 <TIM_Base_SetConfig+0x128>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d003      	beq.n	8007e62 <TIM_Base_SetConfig+0x102>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a0e      	ldr	r2, [pc, #56]	; (8007e98 <TIM_Base_SetConfig+0x138>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d101      	bne.n	8007e66 <TIM_Base_SetConfig+0x106>
 8007e62:	2301      	movs	r3, #1
 8007e64:	e000      	b.n	8007e68 <TIM_Base_SetConfig+0x108>
 8007e66:	2300      	movs	r3, #0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d003      	beq.n	8007e74 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	691a      	ldr	r2, [r3, #16]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	615a      	str	r2, [r3, #20]
}
 8007e7a:	bf00      	nop
 8007e7c:	3714      	adds	r7, #20
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	40010000 	.word	0x40010000
 8007e8c:	40000400 	.word	0x40000400
 8007e90:	40000800 	.word	0x40000800
 8007e94:	40000c00 	.word	0x40000c00
 8007e98:	40010400 	.word	0x40010400
 8007e9c:	40014000 	.word	0x40014000
 8007ea0:	40014400 	.word	0x40014400
 8007ea4:	40014800 	.word	0x40014800
 8007ea8:	40001800 	.word	0x40001800
 8007eac:	40001c00 	.word	0x40001c00
 8007eb0:	40002000 	.word	0x40002000

08007eb4 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_UART_Init>:
  *         the UART_InitTypeDef and create the associated handle.
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
    /* Check the UART handle allocation */
    if (huart == NULL) {
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_UART_Init+0x12>
        return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e03f      	b.n	8007f6e <HAL_UART_Init+0x92>
        assert_param(IS_UART_INSTANCE(huart->Instance));
    }
    assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
    assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

    if (huart->gState == HAL_UART_STATE_RESET) {
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <HAL_UART_Init+0x2c>
        /* Allocate lock resource and initialize it */
        huart->Lock = HAL_UNLOCKED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        /* Init the low level hardware */
        HAL_UART_MspInit(huart);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f002 fa26 	bl	800a354 <HAL_UART_MspInit>
    }

    huart->gState = HAL_UART_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2224      	movs	r2, #36	; 0x24
 8007f0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Disable the peripheral */
    __HAL_UART_DISABLE(huart);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68da      	ldr	r2, [r3, #12]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f1e:	60da      	str	r2, [r3, #12]

    /* Set the UART Communication parameters */
    UART_SetConfig(huart);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fc4b 	bl	80087bc <UART_SetConfig>

    /* In asynchronous mode, the following bits must be kept cleared:
       - LINEN and CLKEN bits in the USART_CR2 register,
       - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
    CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	691a      	ldr	r2, [r3, #16]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f34:	611a      	str	r2, [r3, #16]
    CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	695a      	ldr	r2, [r3, #20]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f44:	615a      	str	r2, [r3, #20]

    /* Enable the peripheral */
    __HAL_UART_ENABLE(huart);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68da      	ldr	r2, [r3, #12]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f54:	60da      	str	r2, [r3, #12]

    /* Initialize the UART state */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    huart->RxState = HAL_UART_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2220      	movs	r2, #32
 8007f68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <HAL_UART_Transmit>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b088      	sub	sp, #32
 8007f7a:	af02      	add	r7, sp, #8
 8007f7c:	60f8      	str	r0, [r7, #12]
 8007f7e:	60b9      	str	r1, [r7, #8]
 8007f80:	603b      	str	r3, [r7, #0]
 8007f82:	4613      	mov	r3, r2
 8007f84:	80fb      	strh	r3, [r7, #6]
    uint16_t *tmp;
    uint32_t tickstart = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]

    /* Check that a Tx process is not already ongoing */
    if (huart->gState == HAL_UART_STATE_READY) {
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b20      	cmp	r3, #32
 8007f94:	f040 8083 	bne.w	800809e <HAL_UART_Transmit+0x128>
        if ((pData == NULL) || (Size == 0)) {
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d002      	beq.n	8007fa4 <HAL_UART_Transmit+0x2e>
 8007f9e:	88fb      	ldrh	r3, [r7, #6]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <HAL_UART_Transmit+0x32>
            return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e07b      	b.n	80080a0 <HAL_UART_Transmit+0x12a>
        }

        /* Process Locked */
        __HAL_LOCK(huart);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d101      	bne.n	8007fb6 <HAL_UART_Transmit+0x40>
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	e074      	b.n	80080a0 <HAL_UART_Transmit+0x12a>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	63da      	str	r2, [r3, #60]	; 0x3c
        huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2221      	movs	r2, #33	; 0x21
 8007fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Init tickstart for timeout managment */
        tickstart = HAL_GetTick();
 8007fcc:	f7fb fef8 	bl	8003dc0 <HAL_GetTick>
 8007fd0:	6178      	str	r0, [r7, #20]

        huart->TxXferSize = Size;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	88fa      	ldrh	r2, [r7, #6]
 8007fd6:	849a      	strh	r2, [r3, #36]	; 0x24
        huart->TxXferCount = Size;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	88fa      	ldrh	r2, [r7, #6]
 8007fdc:	84da      	strh	r2, [r3, #38]	; 0x26
        while (huart->TxXferCount > 0U) {
 8007fde:	e042      	b.n	8008066 <HAL_UART_Transmit+0xf0>
            huart->TxXferCount--;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	84da      	strh	r2, [r3, #38]	; 0x26
            if (huart->Init.WordLength == UART_WORDLENGTH_9B) {
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff6:	d122      	bne.n	800803e <HAL_UART_Transmit+0xc8>
                if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK) {
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	2200      	movs	r2, #0
 8008000:	2180      	movs	r1, #128	; 0x80
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f000 fa58 	bl	80084b8 <UART_WaitOnFlagUntilTimeout>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <HAL_UART_Transmit+0x9c>
                    return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e046      	b.n	80080a0 <HAL_UART_Transmit+0x12a>
                }
                tmp = (uint16_t *) pData;
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	613b      	str	r3, [r7, #16]
                huart->Instance->DR = (*tmp & (uint16_t) 0x01FF);
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008024:	605a      	str	r2, [r3, #4]
                if (huart->Init.Parity == UART_PARITY_NONE) {
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d103      	bne.n	8008036 <HAL_UART_Transmit+0xc0>
                    pData += 2U;
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	3302      	adds	r3, #2
 8008032:	60bb      	str	r3, [r7, #8]
 8008034:	e017      	b.n	8008066 <HAL_UART_Transmit+0xf0>
                } else {
                    pData += 1U;
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	3301      	adds	r3, #1
 800803a:	60bb      	str	r3, [r7, #8]
 800803c:	e013      	b.n	8008066 <HAL_UART_Transmit+0xf0>
                }
            } else {
                if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK) {
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	2200      	movs	r2, #0
 8008046:	2180      	movs	r1, #128	; 0x80
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f000 fa35 	bl	80084b8 <UART_WaitOnFlagUntilTimeout>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <HAL_UART_Transmit+0xe2>
                    return HAL_TIMEOUT;
 8008054:	2303      	movs	r3, #3
 8008056:	e023      	b.n	80080a0 <HAL_UART_Transmit+0x12a>
                }
                huart->Instance->DR = (*pData++ & (uint8_t) 0xFF);
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	1c5a      	adds	r2, r3, #1
 800805c:	60ba      	str	r2, [r7, #8]
 800805e:	781a      	ldrb	r2, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	605a      	str	r2, [r3, #4]
        while (huart->TxXferCount > 0U) {
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800806a:	b29b      	uxth	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1b7      	bne.n	8007fe0 <HAL_UART_Transmit+0x6a>
            }
        }

        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK) {
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	2200      	movs	r2, #0
 8008078:	2140      	movs	r1, #64	; 0x40
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 fa1c 	bl	80084b8 <UART_WaitOnFlagUntilTimeout>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <HAL_UART_Transmit+0x114>
            return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e00a      	b.n	80080a0 <HAL_UART_Transmit+0x12a>
        }

        /* At end of Tx process, restore huart->gState to Ready */
        huart->gState = HAL_UART_STATE_READY;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2220      	movs	r2, #32
 800808e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	e000      	b.n	80080a0 <HAL_UART_Transmit+0x12a>
    } else {
        return HAL_BUSY;
 800809e:	2302      	movs	r3, #2
    }
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3718      	adds	r7, #24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <HAL_UART_Receive>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b088      	sub	sp, #32
 80080ac:	af02      	add	r7, sp, #8
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	603b      	str	r3, [r7, #0]
 80080b4:	4613      	mov	r3, r2
 80080b6:	80fb      	strh	r3, [r7, #6]
    uint16_t *tmp;
    uint32_t tickstart = 0U;
 80080b8:	2300      	movs	r3, #0
 80080ba:	617b      	str	r3, [r7, #20]

    /* Check that a Rx process is not already ongoing */
    if (huart->RxState == HAL_UART_STATE_READY) {
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b20      	cmp	r3, #32
 80080c6:	f040 8094 	bne.w	80081f2 <HAL_UART_Receive+0x14a>
        if ((pData == NULL) || (Size == 0)) {
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <HAL_UART_Receive+0x2e>
 80080d0:	88fb      	ldrh	r3, [r7, #6]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <HAL_UART_Receive+0x32>
            return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e08c      	b.n	80081f4 <HAL_UART_Receive+0x14c>
        }

        /* Process Locked */
        __HAL_LOCK(huart);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d101      	bne.n	80080e8 <HAL_UART_Receive+0x40>
 80080e4:	2302      	movs	r3, #2
 80080e6:	e085      	b.n	80081f4 <HAL_UART_Receive+0x14c>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	63da      	str	r2, [r3, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2222      	movs	r2, #34	; 0x22
 80080fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Init tickstart for timeout managment */
        tickstart = HAL_GetTick();
 80080fe:	f7fb fe5f 	bl	8003dc0 <HAL_GetTick>
 8008102:	6178      	str	r0, [r7, #20]

        huart->RxXferSize = Size;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	88fa      	ldrh	r2, [r7, #6]
 8008108:	859a      	strh	r2, [r3, #44]	; 0x2c
        huart->RxXferCount = Size;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	88fa      	ldrh	r2, [r7, #6]
 800810e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* Check the remain data to be received */
        while (huart->RxXferCount > 0U) {
 8008110:	e05c      	b.n	80081cc <HAL_UART_Receive+0x124>
            huart->RxXferCount--;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008116:	b29b      	uxth	r3, r3
 8008118:	3b01      	subs	r3, #1
 800811a:	b29a      	uxth	r2, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	85da      	strh	r2, [r3, #46]	; 0x2e
            if (huart->Init.WordLength == UART_WORDLENGTH_9B) {
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008128:	d12b      	bne.n	8008182 <HAL_UART_Receive+0xda>
                if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK) {
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	2200      	movs	r2, #0
 8008132:	2120      	movs	r1, #32
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f000 f9bf 	bl	80084b8 <UART_WaitOnFlagUntilTimeout>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d001      	beq.n	8008144 <HAL_UART_Receive+0x9c>
                    return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e057      	b.n	80081f4 <HAL_UART_Receive+0x14c>
                }
                tmp = (uint16_t *) pData;
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	613b      	str	r3, [r7, #16]
                if (huart->Init.Parity == UART_PARITY_NONE) {
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10c      	bne.n	800816a <HAL_UART_Receive+0xc2>
                    *tmp = (uint16_t) (huart->Instance->DR & (uint16_t) 0x01FF);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	b29b      	uxth	r3, r3
 8008158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815c:	b29a      	uxth	r2, r3
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	801a      	strh	r2, [r3, #0]
                    pData += 2U;
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	3302      	adds	r3, #2
 8008166:	60bb      	str	r3, [r7, #8]
 8008168:	e030      	b.n	80081cc <HAL_UART_Receive+0x124>
                } else {
                    *tmp = (uint16_t) (huart->Instance->DR & (uint16_t) 0x00FF);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	b29b      	uxth	r3, r3
 8008172:	b2db      	uxtb	r3, r3
 8008174:	b29a      	uxth	r2, r3
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	801a      	strh	r2, [r3, #0]
                    pData += 1U;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	3301      	adds	r3, #1
 800817e:	60bb      	str	r3, [r7, #8]
 8008180:	e024      	b.n	80081cc <HAL_UART_Receive+0x124>
                }

            } else {
                if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK) {
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2200      	movs	r2, #0
 800818a:	2120      	movs	r1, #32
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f000 f993 	bl	80084b8 <UART_WaitOnFlagUntilTimeout>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <HAL_UART_Receive+0xf4>
                    return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e02b      	b.n	80081f4 <HAL_UART_Receive+0x14c>
                }
                if (huart->Init.Parity == UART_PARITY_NONE) {
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d108      	bne.n	80081b6 <HAL_UART_Receive+0x10e>
                    *pData++ = (uint8_t) (huart->Instance->DR & (uint8_t) 0x00FF);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	6859      	ldr	r1, [r3, #4]
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	1c5a      	adds	r2, r3, #1
 80081ae:	60ba      	str	r2, [r7, #8]
 80081b0:	b2ca      	uxtb	r2, r1
 80081b2:	701a      	strb	r2, [r3, #0]
 80081b4:	e00a      	b.n	80081cc <HAL_UART_Receive+0x124>
                } else {
                    *pData++ = (uint8_t) (huart->Instance->DR & (uint8_t) 0x007F);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	1c59      	adds	r1, r3, #1
 80081c2:	60b9      	str	r1, [r7, #8]
 80081c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80081c8:	b2d2      	uxtb	r2, r2
 80081ca:	701a      	strb	r2, [r3, #0]
        while (huart->RxXferCount > 0U) {
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d19d      	bne.n	8008112 <HAL_UART_Receive+0x6a>

            }
        }

        /* At end of Rx process, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2220      	movs	r2, #32
 80081da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        debug_printf("UART SUCCESS?!: %x", pData);
 80081e6:	68b9      	ldr	r1, [r7, #8]
 80081e8:	4804      	ldr	r0, [pc, #16]	; (80081fc <HAL_UART_Receive+0x154>)
 80081ea:	f7fb fbad 	bl	8003948 <debug_printf>
        return HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	e000      	b.n	80081f4 <HAL_UART_Receive+0x14c>
    } else {
        return HAL_BUSY;
 80081f2:	2302      	movs	r3, #2
    }
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3718      	adds	r7, #24
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	080109b8 	.word	0x080109b8

08008200 <HAL_UART_Receive_IT>:
  *                the configuration information for the specified UART module.
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size) {
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	4613      	mov	r3, r2
 800820c:	80fb      	strh	r3, [r7, #6]
    /* Check that a Rx process is not already ongoing */
    if (huart->RxState == HAL_UART_STATE_READY) {
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b20      	cmp	r3, #32
 8008218:	d138      	bne.n	800828c <HAL_UART_Receive_IT+0x8c>
        if ((pData == NULL) || (Size == 0)) {
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d002      	beq.n	8008226 <HAL_UART_Receive_IT+0x26>
 8008220:	88fb      	ldrh	r3, [r7, #6]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d101      	bne.n	800822a <HAL_UART_Receive_IT+0x2a>
            return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e031      	b.n	800828e <HAL_UART_Receive_IT+0x8e>
        }

        /* Process Locked */
        __HAL_LOCK(huart);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008230:	2b01      	cmp	r3, #1
 8008232:	d101      	bne.n	8008238 <HAL_UART_Receive_IT+0x38>
 8008234:	2302      	movs	r3, #2
 8008236:	e02a      	b.n	800828e <HAL_UART_Receive_IT+0x8e>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        huart->pRxBuffPtr = pData;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	629a      	str	r2, [r3, #40]	; 0x28
        huart->RxXferSize = Size;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	88fa      	ldrh	r2, [r7, #6]
 800824a:	859a      	strh	r2, [r3, #44]	; 0x2c
        huart->RxXferCount = Size;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	88fa      	ldrh	r2, [r7, #6]
 8008250:	85da      	strh	r2, [r3, #46]	; 0x2e

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	63da      	str	r2, [r3, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2222      	movs	r2, #34	; 0x22
 800825c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	695a      	ldr	r2, [r3, #20]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f042 0201 	orr.w	r2, r2, #1
 8008276:	615a      	str	r2, [r3, #20]

        /* Enable the UART Parity Error and Data Register not empty Interrupts */
        SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008286:	60da      	str	r2, [r3, #12]

        return HAL_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	e000      	b.n	800828e <HAL_UART_Receive_IT+0x8e>
    } else {
        return HAL_BUSY;
 800828c:	2302      	movs	r3, #2
    }
}
 800828e:	4618      	mov	r0, r3
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
	...

0800829c <HAL_UART_IRQHandler>:
  * @brief  This function handles UART interrupt request.
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart) {
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
    uint32_t isrflags = READ_REG(huart->Instance->SR);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	61fb      	str	r3, [r7, #28]
    uint32_t cr1its = READ_REG(huart->Instance->CR1);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	61bb      	str	r3, [r7, #24]
    uint32_t cr3its = READ_REG(huart->Instance->CR3);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	617b      	str	r3, [r7, #20]
    uint32_t errorflags = 0x00U;
 80082bc:	2300      	movs	r3, #0
 80082be:	613b      	str	r3, [r7, #16]
    uint32_t dmarequest = 0x00U;
 80082c0:	2300      	movs	r3, #0
 80082c2:	60fb      	str	r3, [r7, #12]

    /* If no error occurs */
    errorflags = (isrflags & (uint32_t) (USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	f003 030f 	and.w	r3, r3, #15
 80082ca:	613b      	str	r3, [r7, #16]
    if (errorflags == RESET) {
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10d      	bne.n	80082ee <HAL_UART_IRQHandler+0x52>
        /* UART in mode Receiver -------------------------------------------------*/
        if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	f003 0320 	and.w	r3, r3, #32
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d008      	beq.n	80082ee <HAL_UART_IRQHandler+0x52>
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	f003 0320 	and.w	r3, r3, #32
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <HAL_UART_IRQHandler+0x52>
            UART_Receive_IT(huart);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f9d0 	bl	800868c <UART_Receive_IT>
            return;
 80082ec:	e0cb      	b.n	8008486 <HAL_UART_IRQHandler+0x1ea>
        }
    }

    /* If some errors occur */
    if ((errorflags != RESET) &&
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 80ab 	beq.w	800844c <HAL_UART_IRQHandler+0x1b0>
        (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET))) {
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f003 0301 	and.w	r3, r3, #1
    if ((errorflags != RESET) &&
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d105      	bne.n	800830c <HAL_UART_IRQHandler+0x70>
        (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET))) {
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 80a0 	beq.w	800844c <HAL_UART_IRQHandler+0x1b0>
        /* UART parity error interrupt occurred ----------------------------------*/
        if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET)) {
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <HAL_UART_IRQHandler+0x90>
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800831c:	2b00      	cmp	r3, #0
 800831e:	d005      	beq.n	800832c <HAL_UART_IRQHandler+0x90>
            huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008324:	f043 0201 	orr.w	r2, r3, #1
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* UART noise error interrupt occurred -----------------------------------*/
        if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	f003 0304 	and.w	r3, r3, #4
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00a      	beq.n	800834c <HAL_UART_IRQHandler+0xb0>
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f003 0301 	and.w	r3, r3, #1
 800833c:	2b00      	cmp	r3, #0
 800833e:	d005      	beq.n	800834c <HAL_UART_IRQHandler+0xb0>
            huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008344:	f043 0202 	orr.w	r2, r3, #2
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* UART frame error interrupt occurred -----------------------------------*/
        if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	f003 0302 	and.w	r3, r3, #2
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00a      	beq.n	800836c <HAL_UART_IRQHandler+0xd0>
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	d005      	beq.n	800836c <HAL_UART_IRQHandler+0xd0>
            huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008364:	f043 0204 	orr.w	r2, r3, #4
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* UART Over-Run interrupt occurred --------------------------------------*/
        if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	f003 0308 	and.w	r3, r3, #8
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00a      	beq.n	800838c <HAL_UART_IRQHandler+0xf0>
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	2b00      	cmp	r3, #0
 800837e:	d005      	beq.n	800838c <HAL_UART_IRQHandler+0xf0>
            huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008384:	f043 0208 	orr.w	r2, r3, #8
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Call UART Error Call back function if need be --------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008390:	2b00      	cmp	r3, #0
 8008392:	d077      	beq.n	8008484 <HAL_UART_IRQHandler+0x1e8>
            /* UART in mode Receiver -----------------------------------------------*/
            if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	f003 0320 	and.w	r3, r3, #32
 800839a:	2b00      	cmp	r3, #0
 800839c:	d007      	beq.n	80083ae <HAL_UART_IRQHandler+0x112>
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	f003 0320 	and.w	r3, r3, #32
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <HAL_UART_IRQHandler+0x112>
                UART_Receive_IT(huart);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f96f 	bl	800868c <UART_Receive_IT>
            }

            /* If Overrun error occurs, or if any error occurs in DMA mode reception,
               consider error as blocking */
            dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	bf14      	ite	ne
 80083bc:	2301      	movne	r3, #1
 80083be:	2300      	moveq	r3, #0
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	60fb      	str	r3, [r7, #12]
            if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest) {
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c8:	f003 0308 	and.w	r3, r3, #8
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d102      	bne.n	80083d6 <HAL_UART_IRQHandler+0x13a>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d031      	beq.n	800843a <HAL_UART_IRQHandler+0x19e>
                /* Blocking error : transfer is aborted
                   Set the UART state ready to be able to start again the process,
                   Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
                UART_EndRxTransfer(huart);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f8b8 	bl	800854c <UART_EndRxTransfer>

                /* Disable the UART DMA Rx request if enabled */
                if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d023      	beq.n	8008432 <HAL_UART_IRQHandler+0x196>
                    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	695a      	ldr	r2, [r3, #20]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083f8:	615a      	str	r2, [r3, #20]

                    /* Abort the UART DMA Rx channel */
                    if (huart->hdmarx != NULL) {
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d013      	beq.n	800842a <HAL_UART_IRQHandler+0x18e>
                        /* Set the UART DMA Abort callback :
                           will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
                        huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008406:	4a21      	ldr	r2, [pc, #132]	; (800848c <HAL_UART_IRQHandler+0x1f0>)
 8008408:	651a      	str	r2, [r3, #80]	; 0x50
                        if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840e:	4618      	mov	r0, r3
 8008410:	f7fb fe2a 	bl	8004068 <HAL_DMA_Abort_IT>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d016      	beq.n	8008448 <HAL_UART_IRQHandler+0x1ac>
                            /* Call Directly XferAbortCallback function in case of error */
                            huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800841e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008424:	4610      	mov	r0, r2
 8008426:	4798      	blx	r3
                if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8008428:	e00e      	b.n	8008448 <HAL_UART_IRQHandler+0x1ac>
                        }
                    } else {
                        /* Call user error callback */
                        HAL_UART_ErrorCallback(huart);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f83a 	bl	80084a4 <HAL_UART_ErrorCallback>
                if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8008430:	e00a      	b.n	8008448 <HAL_UART_IRQHandler+0x1ac>
                    }
                } else {
                    /* Call user error callback */
                    HAL_UART_ErrorCallback(huart);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f836 	bl	80084a4 <HAL_UART_ErrorCallback>
                if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8008438:	e006      	b.n	8008448 <HAL_UART_IRQHandler+0x1ac>
                }
            } else {
                /* Non Blocking error : transfer could go on.
                   Error is notified to user through user error callback */
                HAL_UART_ErrorCallback(huart);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f832 	bl	80084a4 <HAL_UART_ErrorCallback>
                huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	63da      	str	r2, [r3, #60]	; 0x3c
            }
        }
        return;
 8008446:	e01d      	b.n	8008484 <HAL_UART_IRQHandler+0x1e8>
                if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8008448:	bf00      	nop
        return;
 800844a:	e01b      	b.n	8008484 <HAL_UART_IRQHandler+0x1e8>
    } /* End if some error occurs */

    /* UART in mode Transmitter ------------------------------------------------*/
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET)) {
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008452:	2b00      	cmp	r3, #0
 8008454:	d008      	beq.n	8008468 <HAL_UART_IRQHandler+0x1cc>
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845c:	2b00      	cmp	r3, #0
 800845e:	d003      	beq.n	8008468 <HAL_UART_IRQHandler+0x1cc>
        UART_Transmit_IT(huart);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f8a5 	bl	80085b0 <UART_Transmit_IT>
        return;
 8008466:	e00e      	b.n	8008486 <HAL_UART_IRQHandler+0x1ea>
    }

    /* UART in mode Transmitter end --------------------------------------------*/
    if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET)) {
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846e:	2b00      	cmp	r3, #0
 8008470:	d009      	beq.n	8008486 <HAL_UART_IRQHandler+0x1ea>
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008478:	2b00      	cmp	r3, #0
 800847a:	d004      	beq.n	8008486 <HAL_UART_IRQHandler+0x1ea>
        UART_EndTransmit_IT(huart);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f8ed 	bl	800865c <UART_EndTransmit_IT>
        return;
 8008482:	e000      	b.n	8008486 <HAL_UART_IRQHandler+0x1ea>
        return;
 8008484:	bf00      	nop
    }
}
 8008486:	3720      	adds	r7, #32
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	08008589 	.word	0x08008589

08008490 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    /* NOTE: This function Should not be modified, when the callback is needed,
             the HAL_UART_TxCpltCallback could be implemented in the user file
     */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks.
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    /* NOTE: This function Should not be modified, when the callback is needed,
             the HAL_UART_ErrorCallback could be implemented in the user file
     */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef
UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart,
                            uint32_t Timeout) {
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	603b      	str	r3, [r7, #0]
 80084c4:	4613      	mov	r3, r2
 80084c6:	71fb      	strb	r3, [r7, #7]
    /* Wait until flag is set */
    while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 80084c8:	e02c      	b.n	8008524 <UART_WaitOnFlagUntilTimeout+0x6c>
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d0:	d028      	beq.n	8008524 <UART_WaitOnFlagUntilTimeout+0x6c>
            if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d007      	beq.n	80084e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80084d8:	f7fb fc72 	bl	8003dc0 <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	69ba      	ldr	r2, [r7, #24]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d21d      	bcs.n	8008524 <UART_WaitOnFlagUntilTimeout+0x6c>
                /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
                CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68da      	ldr	r2, [r3, #12]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80084f6:	60da      	str	r2, [r3, #12]
                CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	695a      	ldr	r2, [r3, #20]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f022 0201 	bic.w	r2, r2, #1
 8008506:	615a      	str	r2, [r3, #20]

                huart->gState = HAL_UART_STATE_READY;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2220      	movs	r2, #32
 800850c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                huart->RxState = HAL_UART_STATE_READY;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2220      	movs	r2, #32
 8008514:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

                /* Process Unlocked */
                __HAL_UNLOCK(huart);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

                return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e00f      	b.n	8008544 <UART_WaitOnFlagUntilTimeout+0x8c>
    while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	4013      	ands	r3, r2
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	429a      	cmp	r2, r3
 8008532:	bf0c      	ite	eq
 8008534:	2301      	moveq	r3, #1
 8008536:	2300      	movne	r3, #0
 8008538:	b2db      	uxtb	r3, r3
 800853a:	461a      	mov	r2, r3
 800853c:	79fb      	ldrb	r3, [r7, #7]
 800853e:	429a      	cmp	r2, r3
 8008540:	d0c3      	beq.n	80084ca <UART_WaitOnFlagUntilTimeout+0x12>
            }
        }
    }

    return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <UART_EndRxTransfer>:
/**
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart) {
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68da      	ldr	r2, [r3, #12]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008562:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	695a      	ldr	r2, [r3, #20]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f022 0201 	bic.w	r2, r2, #1
 8008572:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2220      	movs	r2, #32
 8008578:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800857c:	bf00      	nop
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <UART_DMAAbortOnError>:
  * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef *huart = (UART_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008594:	60fb      	str	r3, [r7, #12]
    huart->RxXferCount = 0U;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	85da      	strh	r2, [r3, #46]	; 0x2e
    huart->TxXferCount = 0U;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	84da      	strh	r2, [r3, #38]	; 0x26

    HAL_UART_ErrorCallback(huart);
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f7ff ff7e 	bl	80084a4 <HAL_UART_ErrorCallback>
}
 80085a8:	bf00      	nop
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <UART_Transmit_IT>:
  * @brief  Sends an amount of data in non blocking mode.
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart) {
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
    uint16_t *tmp;

    /* Check that a Tx process is ongoing */
    if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b21      	cmp	r3, #33	; 0x21
 80085c2:	d144      	bne.n	800864e <UART_Transmit_IT+0x9e>
        if (huart->Init.WordLength == UART_WORDLENGTH_9B) {
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085cc:	d11a      	bne.n	8008604 <UART_Transmit_IT+0x54>
            tmp = (uint16_t *) huart->pTxBuffPtr;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	60fb      	str	r3, [r7, #12]
            huart->Instance->DR = (uint16_t) (*tmp & (uint16_t) 0x01FF);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	881b      	ldrh	r3, [r3, #0]
 80085d8:	461a      	mov	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085e2:	605a      	str	r2, [r3, #4]
            if (huart->Init.Parity == UART_PARITY_NONE) {
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d105      	bne.n	80085f8 <UART_Transmit_IT+0x48>
                huart->pTxBuffPtr += 2U;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a1b      	ldr	r3, [r3, #32]
 80085f0:	1c9a      	adds	r2, r3, #2
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	621a      	str	r2, [r3, #32]
 80085f6:	e00e      	b.n	8008616 <UART_Transmit_IT+0x66>
            } else {
                huart->pTxBuffPtr += 1U;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	621a      	str	r2, [r3, #32]
 8008602:	e008      	b.n	8008616 <UART_Transmit_IT+0x66>
            }
        } else {
            huart->Instance->DR = (uint8_t) (*huart->pTxBuffPtr++ & (uint8_t) 0x00FF);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	1c59      	adds	r1, r3, #1
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	6211      	str	r1, [r2, #32]
 800860e:	781a      	ldrb	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	605a      	str	r2, [r3, #4]
        }

        if (--huart->TxXferCount == 0U) {
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800861a:	b29b      	uxth	r3, r3
 800861c:	3b01      	subs	r3, #1
 800861e:	b29b      	uxth	r3, r3
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	4619      	mov	r1, r3
 8008624:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10f      	bne.n	800864a <UART_Transmit_IT+0x9a>
            /* Disable the UART Transmit Complete Interrupt */
            CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68da      	ldr	r2, [r3, #12]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008638:	60da      	str	r2, [r3, #12]

            /* Enable the UART Transmit Complete Interrupt */
            SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68da      	ldr	r2, [r3, #12]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008648:	60da      	str	r2, [r3, #12]
        }
        return HAL_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	e000      	b.n	8008650 <UART_Transmit_IT+0xa0>
    } else {
        return HAL_BUSY;
 800864e:	2302      	movs	r3, #2
    }
}
 8008650:	4618      	mov	r0, r3
 8008652:	3714      	adds	r7, #20
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <UART_EndTransmit_IT>:
  * @brief  Wraps up transmission in non blocking mode.
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart) {
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
    /* Disable the UART Transmit Complete Interrupt */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68da      	ldr	r2, [r3, #12]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008672:	60da      	str	r2, [r3, #12]

    /* Tx process is ended, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2220      	movs	r2, #32
 8008678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    HAL_UART_TxCpltCallback(huart);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f7ff ff07 	bl	8008490 <HAL_UART_TxCpltCallback>

    return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <UART_Receive_IT>:
  * @brief  Receives an amount of data in non blocking mode 
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart) {
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]


    uint16_t *tmp;

    /* Check that a Rx process is ongoing */
    if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b22      	cmp	r3, #34	; 0x22
 800869e:	f040 8088 	bne.w	80087b2 <UART_Receive_IT+0x126>
        if (huart->Init.WordLength == UART_WORDLENGTH_9B) {
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086aa:	d123      	bne.n	80086f4 <UART_Receive_IT+0x68>
            tmp = (uint16_t *) huart->pRxBuffPtr;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b0:	60fb      	str	r3, [r7, #12]
            if (huart->Init.Parity == UART_PARITY_NONE) {
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10e      	bne.n	80086d8 <UART_Receive_IT+0x4c>
                *tmp = (uint16_t) (huart->Instance->DR & (uint16_t) 0x01FF);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	801a      	strh	r2, [r3, #0]
                huart->pRxBuffPtr += 2U;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d0:	1c9a      	adds	r2, r3, #2
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	629a      	str	r2, [r3, #40]	; 0x28
 80086d6:	e029      	b.n	800872c <UART_Receive_IT+0xa0>
            } else {
                *tmp = (uint16_t) (huart->Instance->DR & (uint16_t) 0x00FF);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	801a      	strh	r2, [r3, #0]
                huart->pRxBuffPtr += 1U;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ec:	1c5a      	adds	r2, r3, #1
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	629a      	str	r2, [r3, #40]	; 0x28
 80086f2:	e01b      	b.n	800872c <UART_Receive_IT+0xa0>
            }
        } else {
            if (huart->Init.Parity == UART_PARITY_NONE) {
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10a      	bne.n	8008712 <UART_Receive_IT+0x86>
                *huart->pRxBuffPtr++ = (uint8_t) (huart->Instance->DR & (uint8_t) 0x00FF);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6858      	ldr	r0, [r3, #4]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008706:	1c59      	adds	r1, r3, #1
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	6291      	str	r1, [r2, #40]	; 0x28
 800870c:	b2c2      	uxtb	r2, r0
 800870e:	701a      	strb	r2, [r3, #0]
 8008710:	e00c      	b.n	800872c <UART_Receive_IT+0xa0>
            } else {
                *huart->pRxBuffPtr++ = (uint8_t) (huart->Instance->DR & (uint8_t) 0x007F);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	b2da      	uxtb	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871e:	1c58      	adds	r0, r3, #1
 8008720:	6879      	ldr	r1, [r7, #4]
 8008722:	6288      	str	r0, [r1, #40]	; 0x28
 8008724:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008728:	b2d2      	uxtb	r2, r2
 800872a:	701a      	strb	r2, [r3, #0]
            }
        }

        if (--huart->RxXferCount == 0U) {
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008730:	b29b      	uxth	r3, r3
 8008732:	3b01      	subs	r3, #1
 8008734:	b29b      	uxth	r3, r3
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	4619      	mov	r1, r3
 800873a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800873c:	2b00      	cmp	r3, #0
 800873e:	d136      	bne.n	80087ae <UART_Receive_IT+0x122>
            //This allows the buffer to resize based on length of the Ground Station commands over UART
            if ((*(huart->pRxBuffPtr - 1) != 0) && (huart->RxXferSize == 4)) {
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008744:	3b01      	subs	r3, #1
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d017      	beq.n	800877c <UART_Receive_IT+0xf0>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008750:	2b04      	cmp	r3, #4
 8008752:	d113      	bne.n	800877c <UART_Receive_IT+0xf0>
                huart->RxXferCount = *(huart->pRxBuffPtr - 1) + 1;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008758:	3b01      	subs	r3, #1
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	b29b      	uxth	r3, r3
 800875e:	3301      	adds	r3, #1
 8008760:	b29a      	uxth	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	85da      	strh	r2, [r3, #46]	; 0x2e
                huart->RxXferSize = *(huart->pRxBuffPtr - 1) + 5;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876a:	3b01      	subs	r3, #1
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	b29b      	uxth	r3, r3
 8008770:	3305      	adds	r3, #5
 8008772:	b29a      	uxth	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	859a      	strh	r2, [r3, #44]	; 0x2c
                return HAL_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	e01b      	b.n	80087b4 <UART_Receive_IT+0x128>
            }
            /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
            CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68da      	ldr	r2, [r3, #12]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800878a:	60da      	str	r2, [r3, #12]

            /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
            CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	695a      	ldr	r2, [r3, #20]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f022 0201 	bic.w	r2, r2, #1
 800879a:	615a      	str	r2, [r3, #20]

            /* Rx process is completed, restore huart->RxState to Ready */
            huart->RxState = HAL_UART_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2220      	movs	r2, #32
 80087a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

            HAL_UART_RxCpltCallback(huart);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f7fb fa97 	bl	8003cd8 <HAL_UART_RxCpltCallback>

            return HAL_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	e002      	b.n	80087b4 <UART_Receive_IT+0x128>
        }
        return HAL_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	e000      	b.n	80087b4 <UART_Receive_IT+0x128>
    } else {
        return HAL_BUSY;
 80087b2:	2302      	movs	r3, #2
    }

#endif
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <UART_SetConfig>:
  * @brief  Configures the UART peripheral. 
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart) {
 80087bc:	b5b0      	push	{r4, r5, r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
    uint32_t tmpreg = 0x00U;
 80087c4:	2300      	movs	r3, #0
 80087c6:	60fb      	str	r3, [r7, #12]
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
    assert_param(IS_UART_PARITY(huart->Init.Parity));
    assert_param(IS_UART_MODE(huart->Init.Mode));

    /*-------------------------- USART CR2 Configuration -----------------------*/
    tmpreg = huart->Instance->CR2;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	60fb      	str	r3, [r7, #12]

    /* Clear STOP[13:12] bits */
    tmpreg &= (uint32_t) ~((uint32_t) USART_CR2_STOP);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80087d6:	60fb      	str	r3, [r7, #12]

    /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
    tmpreg |= (uint32_t) huart->Init.StopBits;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	4313      	orrs	r3, r2
 80087e0:	60fb      	str	r3, [r7, #12]

    /* Write to USART CR2 */
    WRITE_REG(huart->Instance->CR2, (uint32_t) tmpreg);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	611a      	str	r2, [r3, #16]

    /*-------------------------- USART CR1 Configuration -----------------------*/
    tmpreg = huart->Instance->CR1;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	60fb      	str	r3, [r7, #12]

    /* Clear M, PCE, PS, TE and RE bits */
    tmpreg &= (uint32_t) ~((uint32_t) (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80087f8:	f023 030c 	bic.w	r3, r3, #12
 80087fc:	60fb      	str	r3, [r7, #12]
    /* Configure the UART Word Length, Parity and mode:
       Set the M bits according to huart->Init.WordLength value
       Set PCE and PS bits according to huart->Init.Parity value
       Set TE and RE bits according to huart->Init.Mode value
       Set OVER8 bit according to huart->Init.OverSampling value */
    tmpreg |= (uint32_t) huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	431a      	orrs	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	695b      	ldr	r3, [r3, #20]
 800880c:	431a      	orrs	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	4313      	orrs	r3, r2
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	4313      	orrs	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]

    /* Write to USART CR1 */
    WRITE_REG(huart->Instance->CR1, (uint32_t) tmpreg);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	60da      	str	r2, [r3, #12]

    /*-------------------------- USART CR3 Configuration -----------------------*/
    tmpreg = huart->Instance->CR3;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	60fb      	str	r3, [r7, #12]

    /* Clear CTSE and RTSE bits */
    tmpreg &= (uint32_t) ~((uint32_t) (USART_CR3_RTSE | USART_CR3_CTSE));
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008830:	60fb      	str	r3, [r7, #12]

    /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
    tmpreg |= huart->Init.HwFlowCtl;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	4313      	orrs	r3, r2
 800883a:	60fb      	str	r3, [r7, #12]

    /* Write to USART CR3 */
    WRITE_REG(huart->Instance->CR3, (uint32_t) tmpreg);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	615a      	str	r2, [r3, #20]

    /* Check the Over Sampling */
    if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	69db      	ldr	r3, [r3, #28]
 8008848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800884c:	f040 80e4 	bne.w	8008a18 <UART_SetConfig+0x25c>
        /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
        if((huart->Instance == USART1) || (huart->Instance == USART6))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4aab      	ldr	r2, [pc, #684]	; (8008b04 <UART_SetConfig+0x348>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d004      	beq.n	8008864 <UART_SetConfig+0xa8>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4aaa      	ldr	r2, [pc, #680]	; (8008b08 <UART_SetConfig+0x34c>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d16c      	bne.n	800893e <UART_SetConfig+0x182>
        {
          huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8008864:	f7fd faa6 	bl	8005db4 <HAL_RCC_GetPCLK2Freq>
 8008868:	4602      	mov	r2, r0
 800886a:	4613      	mov	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	009a      	lsls	r2, r3, #2
 8008872:	441a      	add	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	005b      	lsls	r3, r3, #1
 800887a:	fbb2 f3f3 	udiv	r3, r2, r3
 800887e:	4aa3      	ldr	r2, [pc, #652]	; (8008b0c <UART_SetConfig+0x350>)
 8008880:	fba2 2303 	umull	r2, r3, r2, r3
 8008884:	095b      	lsrs	r3, r3, #5
 8008886:	011c      	lsls	r4, r3, #4
 8008888:	f7fd fa94 	bl	8005db4 <HAL_RCC_GetPCLK2Freq>
 800888c:	4602      	mov	r2, r0
 800888e:	4613      	mov	r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	4413      	add	r3, r2
 8008894:	009a      	lsls	r2, r3, #2
 8008896:	441a      	add	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	005b      	lsls	r3, r3, #1
 800889e:	fbb2 f5f3 	udiv	r5, r2, r3
 80088a2:	f7fd fa87 	bl	8005db4 <HAL_RCC_GetPCLK2Freq>
 80088a6:	4602      	mov	r2, r0
 80088a8:	4613      	mov	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	009a      	lsls	r2, r3, #2
 80088b0:	441a      	add	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	005b      	lsls	r3, r3, #1
 80088b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088bc:	4a93      	ldr	r2, [pc, #588]	; (8008b0c <UART_SetConfig+0x350>)
 80088be:	fba2 2303 	umull	r2, r3, r2, r3
 80088c2:	095b      	lsrs	r3, r3, #5
 80088c4:	2264      	movs	r2, #100	; 0x64
 80088c6:	fb02 f303 	mul.w	r3, r2, r3
 80088ca:	1aeb      	subs	r3, r5, r3
 80088cc:	00db      	lsls	r3, r3, #3
 80088ce:	3332      	adds	r3, #50	; 0x32
 80088d0:	4a8e      	ldr	r2, [pc, #568]	; (8008b0c <UART_SetConfig+0x350>)
 80088d2:	fba2 2303 	umull	r2, r3, r2, r3
 80088d6:	095b      	lsrs	r3, r3, #5
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088de:	441c      	add	r4, r3
 80088e0:	f7fd fa68 	bl	8005db4 <HAL_RCC_GetPCLK2Freq>
 80088e4:	4602      	mov	r2, r0
 80088e6:	4613      	mov	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	009a      	lsls	r2, r3, #2
 80088ee:	441a      	add	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	005b      	lsls	r3, r3, #1
 80088f6:	fbb2 f5f3 	udiv	r5, r2, r3
 80088fa:	f7fd fa5b 	bl	8005db4 <HAL_RCC_GetPCLK2Freq>
 80088fe:	4602      	mov	r2, r0
 8008900:	4613      	mov	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	009a      	lsls	r2, r3, #2
 8008908:	441a      	add	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	005b      	lsls	r3, r3, #1
 8008910:	fbb2 f3f3 	udiv	r3, r2, r3
 8008914:	4a7d      	ldr	r2, [pc, #500]	; (8008b0c <UART_SetConfig+0x350>)
 8008916:	fba2 2303 	umull	r2, r3, r2, r3
 800891a:	095b      	lsrs	r3, r3, #5
 800891c:	2264      	movs	r2, #100	; 0x64
 800891e:	fb02 f303 	mul.w	r3, r2, r3
 8008922:	1aeb      	subs	r3, r5, r3
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	3332      	adds	r3, #50	; 0x32
 8008928:	4a78      	ldr	r2, [pc, #480]	; (8008b0c <UART_SetConfig+0x350>)
 800892a:	fba2 2303 	umull	r2, r3, r2, r3
 800892e:	095b      	lsrs	r3, r3, #5
 8008930:	f003 0207 	and.w	r2, r3, #7
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4422      	add	r2, r4
 800893a:	609a      	str	r2, [r3, #8]
 800893c:	e154      	b.n	8008be8 <UART_SetConfig+0x42c>
        if (huart->Instance == USART1) {
            huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
        }
#endif /* USART6 */
        else {
            huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800893e:	f7fd fa17 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8008942:	4602      	mov	r2, r0
 8008944:	4613      	mov	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4413      	add	r3, r2
 800894a:	009a      	lsls	r2, r3, #2
 800894c:	441a      	add	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	005b      	lsls	r3, r3, #1
 8008954:	fbb2 f3f3 	udiv	r3, r2, r3
 8008958:	4a6c      	ldr	r2, [pc, #432]	; (8008b0c <UART_SetConfig+0x350>)
 800895a:	fba2 2303 	umull	r2, r3, r2, r3
 800895e:	095b      	lsrs	r3, r3, #5
 8008960:	011c      	lsls	r4, r3, #4
 8008962:	f7fd fa05 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8008966:	4602      	mov	r2, r0
 8008968:	4613      	mov	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	4413      	add	r3, r2
 800896e:	009a      	lsls	r2, r3, #2
 8008970:	441a      	add	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	005b      	lsls	r3, r3, #1
 8008978:	fbb2 f5f3 	udiv	r5, r2, r3
 800897c:	f7fd f9f8 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8008980:	4602      	mov	r2, r0
 8008982:	4613      	mov	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	009a      	lsls	r2, r3, #2
 800898a:	441a      	add	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	005b      	lsls	r3, r3, #1
 8008992:	fbb2 f3f3 	udiv	r3, r2, r3
 8008996:	4a5d      	ldr	r2, [pc, #372]	; (8008b0c <UART_SetConfig+0x350>)
 8008998:	fba2 2303 	umull	r2, r3, r2, r3
 800899c:	095b      	lsrs	r3, r3, #5
 800899e:	2264      	movs	r2, #100	; 0x64
 80089a0:	fb02 f303 	mul.w	r3, r2, r3
 80089a4:	1aeb      	subs	r3, r5, r3
 80089a6:	00db      	lsls	r3, r3, #3
 80089a8:	3332      	adds	r3, #50	; 0x32
 80089aa:	4a58      	ldr	r2, [pc, #352]	; (8008b0c <UART_SetConfig+0x350>)
 80089ac:	fba2 2303 	umull	r2, r3, r2, r3
 80089b0:	095b      	lsrs	r3, r3, #5
 80089b2:	005b      	lsls	r3, r3, #1
 80089b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80089b8:	441c      	add	r4, r3
 80089ba:	f7fd f9d9 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 80089be:	4602      	mov	r2, r0
 80089c0:	4613      	mov	r3, r2
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4413      	add	r3, r2
 80089c6:	009a      	lsls	r2, r3, #2
 80089c8:	441a      	add	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	005b      	lsls	r3, r3, #1
 80089d0:	fbb2 f5f3 	udiv	r5, r2, r3
 80089d4:	f7fd f9cc 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 80089d8:	4602      	mov	r2, r0
 80089da:	4613      	mov	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	009a      	lsls	r2, r3, #2
 80089e2:	441a      	add	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	005b      	lsls	r3, r3, #1
 80089ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ee:	4a47      	ldr	r2, [pc, #284]	; (8008b0c <UART_SetConfig+0x350>)
 80089f0:	fba2 2303 	umull	r2, r3, r2, r3
 80089f4:	095b      	lsrs	r3, r3, #5
 80089f6:	2264      	movs	r2, #100	; 0x64
 80089f8:	fb02 f303 	mul.w	r3, r2, r3
 80089fc:	1aeb      	subs	r3, r5, r3
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	3332      	adds	r3, #50	; 0x32
 8008a02:	4a42      	ldr	r2, [pc, #264]	; (8008b0c <UART_SetConfig+0x350>)
 8008a04:	fba2 2303 	umull	r2, r3, r2, r3
 8008a08:	095b      	lsrs	r3, r3, #5
 8008a0a:	f003 0207 	and.w	r2, r3, #7
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4422      	add	r2, r4
 8008a14:	609a      	str	r2, [r3, #8]
#endif /* USART6 */
        else {
            huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
        }
    }
}
 8008a16:	e0e7      	b.n	8008be8 <UART_SetConfig+0x42c>
        if((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a39      	ldr	r2, [pc, #228]	; (8008b04 <UART_SetConfig+0x348>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d004      	beq.n	8008a2c <UART_SetConfig+0x270>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a38      	ldr	r2, [pc, #224]	; (8008b08 <UART_SetConfig+0x34c>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d171      	bne.n	8008b10 <UART_SetConfig+0x354>
          huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8008a2c:	f7fd f9c2 	bl	8005db4 <HAL_RCC_GetPCLK2Freq>
 8008a30:	4602      	mov	r2, r0
 8008a32:	4613      	mov	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	009a      	lsls	r2, r3, #2
 8008a3a:	441a      	add	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a46:	4a31      	ldr	r2, [pc, #196]	; (8008b0c <UART_SetConfig+0x350>)
 8008a48:	fba2 2303 	umull	r2, r3, r2, r3
 8008a4c:	095b      	lsrs	r3, r3, #5
 8008a4e:	011c      	lsls	r4, r3, #4
 8008a50:	f7fd f9b0 	bl	8005db4 <HAL_RCC_GetPCLK2Freq>
 8008a54:	4602      	mov	r2, r0
 8008a56:	4613      	mov	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	009a      	lsls	r2, r3, #2
 8008a5e:	441a      	add	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	fbb2 f5f3 	udiv	r5, r2, r3
 8008a6a:	f7fd f9a3 	bl	8005db4 <HAL_RCC_GetPCLK2Freq>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	4613      	mov	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	009a      	lsls	r2, r3, #2
 8008a78:	441a      	add	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a84:	4a21      	ldr	r2, [pc, #132]	; (8008b0c <UART_SetConfig+0x350>)
 8008a86:	fba2 2303 	umull	r2, r3, r2, r3
 8008a8a:	095b      	lsrs	r3, r3, #5
 8008a8c:	2264      	movs	r2, #100	; 0x64
 8008a8e:	fb02 f303 	mul.w	r3, r2, r3
 8008a92:	1aeb      	subs	r3, r5, r3
 8008a94:	011b      	lsls	r3, r3, #4
 8008a96:	3332      	adds	r3, #50	; 0x32
 8008a98:	4a1c      	ldr	r2, [pc, #112]	; (8008b0c <UART_SetConfig+0x350>)
 8008a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a9e:	095b      	lsrs	r3, r3, #5
 8008aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008aa4:	441c      	add	r4, r3
 8008aa6:	f7fd f985 	bl	8005db4 <HAL_RCC_GetPCLK2Freq>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	4613      	mov	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	009a      	lsls	r2, r3, #2
 8008ab4:	441a      	add	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	fbb2 f5f3 	udiv	r5, r2, r3
 8008ac0:	f7fd f978 	bl	8005db4 <HAL_RCC_GetPCLK2Freq>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	009a      	lsls	r2, r3, #2
 8008ace:	441a      	add	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ada:	4a0c      	ldr	r2, [pc, #48]	; (8008b0c <UART_SetConfig+0x350>)
 8008adc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae0:	095b      	lsrs	r3, r3, #5
 8008ae2:	2264      	movs	r2, #100	; 0x64
 8008ae4:	fb02 f303 	mul.w	r3, r2, r3
 8008ae8:	1aeb      	subs	r3, r5, r3
 8008aea:	011b      	lsls	r3, r3, #4
 8008aec:	3332      	adds	r3, #50	; 0x32
 8008aee:	4a07      	ldr	r2, [pc, #28]	; (8008b0c <UART_SetConfig+0x350>)
 8008af0:	fba2 2303 	umull	r2, r3, r2, r3
 8008af4:	095b      	lsrs	r3, r3, #5
 8008af6:	f003 020f 	and.w	r2, r3, #15
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4422      	add	r2, r4
 8008b00:	609a      	str	r2, [r3, #8]
 8008b02:	e071      	b.n	8008be8 <UART_SetConfig+0x42c>
 8008b04:	40011000 	.word	0x40011000
 8008b08:	40011400 	.word	0x40011400
 8008b0c:	51eb851f 	.word	0x51eb851f
            huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8008b10:	f7fd f92e 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8008b14:	4602      	mov	r2, r0
 8008b16:	4613      	mov	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	009a      	lsls	r2, r3, #2
 8008b1e:	441a      	add	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b2a:	4a31      	ldr	r2, [pc, #196]	; (8008bf0 <UART_SetConfig+0x434>)
 8008b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b30:	095b      	lsrs	r3, r3, #5
 8008b32:	011c      	lsls	r4, r3, #4
 8008b34:	f7fd f91c 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4413      	add	r3, r2
 8008b40:	009a      	lsls	r2, r3, #2
 8008b42:	441a      	add	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	fbb2 f5f3 	udiv	r5, r2, r3
 8008b4e:	f7fd f90f 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8008b52:	4602      	mov	r2, r0
 8008b54:	4613      	mov	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	009a      	lsls	r2, r3, #2
 8008b5c:	441a      	add	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b68:	4a21      	ldr	r2, [pc, #132]	; (8008bf0 <UART_SetConfig+0x434>)
 8008b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b6e:	095b      	lsrs	r3, r3, #5
 8008b70:	2264      	movs	r2, #100	; 0x64
 8008b72:	fb02 f303 	mul.w	r3, r2, r3
 8008b76:	1aeb      	subs	r3, r5, r3
 8008b78:	011b      	lsls	r3, r3, #4
 8008b7a:	3332      	adds	r3, #50	; 0x32
 8008b7c:	4a1c      	ldr	r2, [pc, #112]	; (8008bf0 <UART_SetConfig+0x434>)
 8008b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b82:	095b      	lsrs	r3, r3, #5
 8008b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b88:	441c      	add	r4, r3
 8008b8a:	f7fd f8f1 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	4613      	mov	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4413      	add	r3, r2
 8008b96:	009a      	lsls	r2, r3, #2
 8008b98:	441a      	add	r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	fbb2 f5f3 	udiv	r5, r2, r3
 8008ba4:	f7fd f8e4 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	4613      	mov	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	009a      	lsls	r2, r3, #2
 8008bb2:	441a      	add	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bbe:	4a0c      	ldr	r2, [pc, #48]	; (8008bf0 <UART_SetConfig+0x434>)
 8008bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc4:	095b      	lsrs	r3, r3, #5
 8008bc6:	2264      	movs	r2, #100	; 0x64
 8008bc8:	fb02 f303 	mul.w	r3, r2, r3
 8008bcc:	1aeb      	subs	r3, r5, r3
 8008bce:	011b      	lsls	r3, r3, #4
 8008bd0:	3332      	adds	r3, #50	; 0x32
 8008bd2:	4a07      	ldr	r2, [pc, #28]	; (8008bf0 <UART_SetConfig+0x434>)
 8008bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd8:	095b      	lsrs	r3, r3, #5
 8008bda:	f003 020f 	and.w	r2, r3, #15
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4422      	add	r2, r4
 8008be4:	609a      	str	r2, [r3, #8]
}
 8008be6:	e7ff      	b.n	8008be8 <UART_SetConfig+0x42c>
 8008be8:	bf00      	nop
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bdb0      	pop	{r4, r5, r7, pc}
 8008bf0:	51eb851f 	.word	0x51eb851f

08008bf4 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if(hwwdg == NULL)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e016      	b.n	8008c34 <HAL_WWDG_Init+0x40>
  assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));

  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f001 fc3c 	bl	800a484 <HAL_WWDG_MspInit>

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	68da      	ldr	r2, [r3, #12]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c18:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	691a      	ldr	r2, [r3, #16]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	ea42 0103 	orr.w	r1, r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	689a      	ldr	r2, [r3, #8]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008c3c:	b084      	sub	sp, #16
 8008c3e:	b480      	push	{r7}
 8008c40:	b085      	sub	sp, #20
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	f107 001c 	add.w	r0, r7, #28
 8008c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008c52:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008c54:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008c56:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008c5a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008c5e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008c62:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008c66:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008c76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	431a      	orrs	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3714      	adds	r7, #20
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	b004      	add	sp, #16
 8008c90:	4770      	bx	lr

08008c92 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b083      	sub	sp, #12
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008cce:	b480      	push	{r7}
 8008cd0:	b083      	sub	sp, #12
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2203      	movs	r2, #3
 8008cda:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	370c      	adds	r7, #12
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0303 	and.w	r3, r3, #3
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b085      	sub	sp, #20
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008d10:	2300      	movs	r3, #0
 8008d12:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d24:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008d2a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008d30:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008d40:	f023 030f 	bic.w	r3, r3, #15
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	431a      	orrs	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3714      	adds	r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b083      	sub	sp, #12
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	b2db      	uxtb	r3, r3
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	3314      	adds	r3, #20
 8008d86:	461a      	mov	r2, r3
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
}  
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b085      	sub	sp, #20
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008dc4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008dca:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008dd0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ddc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	431a      	orrs	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008de8:	2300      	movs	r3, #0

}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b088      	sub	sp, #32
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008e00:	2300      	movs	r3, #0
 8008e02:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008e08:	2310      	movs	r3, #16
 8008e0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e0c:	2340      	movs	r3, #64	; 0x40
 8008e0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e10:	2300      	movs	r3, #0
 8008e12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e18:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e1a:	f107 0308 	add.w	r3, r7, #8
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff ff70 	bl	8008d06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008e26:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008e2a:	2110      	movs	r1, #16
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fa63 	bl	80092f8 <SDMMC_GetCmdResp1>
 8008e32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e34:	69fb      	ldr	r3, [r7, #28]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3720      	adds	r7, #32
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b088      	sub	sp, #32
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008e50:	2311      	movs	r3, #17
 8008e52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e54:	2340      	movs	r3, #64	; 0x40
 8008e56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e60:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e62:	f107 0308 	add.w	r3, r7, #8
 8008e66:	4619      	mov	r1, r3
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f7ff ff4c 	bl	8008d06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008e6e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008e72:	2111      	movs	r1, #17
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fa3f 	bl	80092f8 <SDMMC_GetCmdResp1>
 8008e7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e7c:	69fb      	ldr	r3, [r7, #28]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3720      	adds	r7, #32
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b088      	sub	sp, #32
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008e90:	2300      	movs	r3, #0
 8008e92:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008e98:	2312      	movs	r3, #18
 8008e9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e9c:	2340      	movs	r3, #64	; 0x40
 8008e9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ea8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008eaa:	f107 0308 	add.w	r3, r7, #8
 8008eae:	4619      	mov	r1, r3
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f7ff ff28 	bl	8008d06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008eb6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008eba:	2112      	movs	r1, #18
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 fa1b 	bl	80092f8 <SDMMC_GetCmdResp1>
 8008ec2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ec4:	69fb      	ldr	r3, [r7, #28]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3720      	adds	r7, #32
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b088      	sub	sp, #32
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008ee0:	2318      	movs	r3, #24
 8008ee2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ee4:	2340      	movs	r3, #64	; 0x40
 8008ee6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ef0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ef2:	f107 0308 	add.w	r3, r7, #8
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7ff ff04 	bl	8008d06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008efe:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008f02:	2118      	movs	r1, #24
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 f9f7 	bl	80092f8 <SDMMC_GetCmdResp1>
 8008f0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f0c:	69fb      	ldr	r3, [r7, #28]
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3720      	adds	r7, #32
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b088      	sub	sp, #32
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008f20:	2300      	movs	r3, #0
 8008f22:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008f28:	2319      	movs	r3, #25
 8008f2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f2c:	2340      	movs	r3, #64	; 0x40
 8008f2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f30:	2300      	movs	r3, #0
 8008f32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f38:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f3a:	f107 0308 	add.w	r3, r7, #8
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7ff fee0 	bl	8008d06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008f46:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008f4a:	2119      	movs	r1, #25
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f9d3 	bl	80092f8 <SDMMC_GetCmdResp1>
 8008f52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f54:	69fb      	ldr	r3, [r7, #28]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3720      	adds	r7, #32
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
	...

08008f60 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b088      	sub	sp, #32
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008f70:	230c      	movs	r3, #12
 8008f72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f74:	2340      	movs	r3, #64	; 0x40
 8008f76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f80:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f82:	f107 0308 	add.w	r3, r7, #8
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7ff febc 	bl	8008d06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8008f8e:	4a05      	ldr	r2, [pc, #20]	; (8008fa4 <SDMMC_CmdStopTransfer+0x44>)
 8008f90:	210c      	movs	r1, #12
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f9b0 	bl	80092f8 <SDMMC_GetCmdResp1>
 8008f98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f9a:	69fb      	ldr	r3, [r7, #28]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3720      	adds	r7, #32
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	05f5e100 	.word	0x05f5e100

08008fa8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b08a      	sub	sp, #40	; 0x28
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008fbc:	2307      	movs	r3, #7
 8008fbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fc0:	2340      	movs	r3, #64	; 0x40
 8008fc2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fcc:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fce:	f107 0310 	add.w	r3, r7, #16
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f7ff fe96 	bl	8008d06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008fda:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008fde:	2107      	movs	r1, #7
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 f989 	bl	80092f8 <SDMMC_GetCmdResp1>
 8008fe6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3728      	adds	r7, #40	; 0x28
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b088      	sub	sp, #32
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009002:	2300      	movs	r3, #0
 8009004:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009006:	2300      	movs	r3, #0
 8009008:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800900a:	2300      	movs	r3, #0
 800900c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800900e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009012:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009014:	f107 0308 	add.w	r3, r7, #8
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7ff fe73 	bl	8008d06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 f93f 	bl	80092a4 <SDMMC_GetCmdError>
 8009026:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009028:	69fb      	ldr	r3, [r7, #28]
}
 800902a:	4618      	mov	r0, r3
 800902c:	3720      	adds	r7, #32
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b088      	sub	sp, #32
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800903a:	2300      	movs	r3, #0
 800903c:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800903e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009042:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009044:	2308      	movs	r3, #8
 8009046:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009048:	2340      	movs	r3, #64	; 0x40
 800904a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800904c:	2300      	movs	r3, #0
 800904e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009054:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009056:	f107 0308 	add.w	r3, r7, #8
 800905a:	4619      	mov	r1, r3
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f7ff fe52 	bl	8008d06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fb10 	bl	8009688 <SDMMC_GetCmdResp7>
 8009068:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800906a:	69fb      	ldr	r3, [r7, #28]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3720      	adds	r7, #32
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b088      	sub	sp, #32
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800907e:	2300      	movs	r3, #0
 8009080:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009086:	2337      	movs	r3, #55	; 0x37
 8009088:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800908a:	2340      	movs	r3, #64	; 0x40
 800908c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800908e:	2300      	movs	r3, #0
 8009090:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009096:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009098:	f107 0308 	add.w	r3, r7, #8
 800909c:	4619      	mov	r1, r3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff fe31 	bl	8008d06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80090a4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80090a8:	2137      	movs	r1, #55	; 0x37
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f924 	bl	80092f8 <SDMMC_GetCmdResp1>
 80090b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090b2:	69fb      	ldr	r3, [r7, #28]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3720      	adds	r7, #32
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b088      	sub	sp, #32
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80090c6:	2300      	movs	r3, #0
 80090c8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80090d6:	2329      	movs	r3, #41	; 0x29
 80090d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090da:	2340      	movs	r3, #64	; 0x40
 80090dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090de:	2300      	movs	r3, #0
 80090e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090e6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090e8:	f107 0308 	add.w	r3, r7, #8
 80090ec:	4619      	mov	r1, r3
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7ff fe09 	bl	8008d06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fa25 	bl	8009544 <SDMMC_GetCmdResp3>
 80090fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090fc:	69fb      	ldr	r3, [r7, #28]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3720      	adds	r7, #32
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b088      	sub	sp, #32
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009110:	2300      	movs	r3, #0
 8009112:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009118:	2306      	movs	r3, #6
 800911a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800911c:	2340      	movs	r3, #64	; 0x40
 800911e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009120:	2300      	movs	r3, #0
 8009122:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009128:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800912a:	f107 0308 	add.w	r3, r7, #8
 800912e:	4619      	mov	r1, r3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff fde8 	bl	8008d06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009136:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800913a:	2106      	movs	r1, #6
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f8db 	bl	80092f8 <SDMMC_GetCmdResp1>
 8009142:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009144:	69fb      	ldr	r3, [r7, #28]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3720      	adds	r7, #32
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b088      	sub	sp, #32
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009156:	2300      	movs	r3, #0
 8009158:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800915a:	2300      	movs	r3, #0
 800915c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800915e:	2333      	movs	r3, #51	; 0x33
 8009160:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009162:	2340      	movs	r3, #64	; 0x40
 8009164:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009166:	2300      	movs	r3, #0
 8009168:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800916a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800916e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009170:	f107 0308 	add.w	r3, r7, #8
 8009174:	4619      	mov	r1, r3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f7ff fdc5 	bl	8008d06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800917c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009180:	2133      	movs	r1, #51	; 0x33
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f8b8 	bl	80092f8 <SDMMC_GetCmdResp1>
 8009188:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800918a:	69fb      	ldr	r3, [r7, #28]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3720      	adds	r7, #32
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b088      	sub	sp, #32
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800919c:	2300      	movs	r3, #0
 800919e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80091a0:	2300      	movs	r3, #0
 80091a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80091a4:	2302      	movs	r3, #2
 80091a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80091a8:	23c0      	movs	r3, #192	; 0xc0
 80091aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091ac:	2300      	movs	r3, #0
 80091ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091b4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091b6:	f107 0308 	add.w	r3, r7, #8
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7ff fda2 	bl	8008d06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f97e 	bl	80094c4 <SDMMC_GetCmdResp2>
 80091c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091ca:	69fb      	ldr	r3, [r7, #28]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3720      	adds	r7, #32
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b088      	sub	sp, #32
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80091de:	2300      	movs	r3, #0
 80091e0:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80091e6:	2309      	movs	r3, #9
 80091e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80091ea:	23c0      	movs	r3, #192	; 0xc0
 80091ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091ee:	2300      	movs	r3, #0
 80091f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091f6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091f8:	f107 0308 	add.w	r3, r7, #8
 80091fc:	4619      	mov	r1, r3
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7ff fd81 	bl	8008d06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f95d 	bl	80094c4 <SDMMC_GetCmdResp2>
 800920a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800920c:	69fb      	ldr	r3, [r7, #28]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3720      	adds	r7, #32
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b088      	sub	sp, #32
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009220:	2300      	movs	r3, #0
 8009222:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009224:	2300      	movs	r3, #0
 8009226:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009228:	2303      	movs	r3, #3
 800922a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800922c:	2340      	movs	r3, #64	; 0x40
 800922e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009230:	2300      	movs	r3, #0
 8009232:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009238:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800923a:	f107 0308 	add.w	r3, r7, #8
 800923e:	4619      	mov	r1, r3
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7ff fd60 	bl	8008d06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	2103      	movs	r1, #3
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f9ae 	bl	80095ac <SDMMC_GetCmdResp6>
 8009250:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009252:	69fb      	ldr	r3, [r7, #28]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3720      	adds	r7, #32
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b088      	sub	sp, #32
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009266:	2300      	movs	r3, #0
 8009268:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800926e:	230d      	movs	r3, #13
 8009270:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009272:	2340      	movs	r3, #64	; 0x40
 8009274:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009276:	2300      	movs	r3, #0
 8009278:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800927a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800927e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009280:	f107 0308 	add.w	r3, r7, #8
 8009284:	4619      	mov	r1, r3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7ff fd3d 	bl	8008d06 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800928c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009290:	210d      	movs	r1, #13
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 f830 	bl	80092f8 <SDMMC_GetCmdResp1>
 8009298:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800929a:	69fb      	ldr	r3, [r7, #28]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3720      	adds	r7, #32
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80092a4:	b490      	push	{r4, r7}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80092ac:	4b10      	ldr	r3, [pc, #64]	; (80092f0 <SDMMC_GetCmdError+0x4c>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a10      	ldr	r2, [pc, #64]	; (80092f4 <SDMMC_GetCmdError+0x50>)
 80092b2:	fba2 2303 	umull	r2, r3, r2, r3
 80092b6:	0a5b      	lsrs	r3, r3, #9
 80092b8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80092bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80092c0:	4623      	mov	r3, r4
 80092c2:	1e5c      	subs	r4, r3, #1
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d102      	bne.n	80092ce <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092cc:	e00a      	b.n	80092e4 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d0f2      	beq.n	80092c0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80092e0:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bc90      	pop	{r4, r7}
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	20000014 	.word	0x20000014
 80092f4:	10624dd3 	.word	0x10624dd3

080092f8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80092f8:	b590      	push	{r4, r7, lr}
 80092fa:	b087      	sub	sp, #28
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	460b      	mov	r3, r1
 8009302:	607a      	str	r2, [r7, #4]
 8009304:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009306:	4b6c      	ldr	r3, [pc, #432]	; (80094b8 <SDMMC_GetCmdResp1+0x1c0>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a6c      	ldr	r2, [pc, #432]	; (80094bc <SDMMC_GetCmdResp1+0x1c4>)
 800930c:	fba2 2303 	umull	r2, r3, r2, r3
 8009310:	0a5b      	lsrs	r3, r3, #9
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009318:	4623      	mov	r3, r4
 800931a:	1e5c      	subs	r4, r3, #1
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009320:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009324:	e0c3      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800932a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800932e:	2b00      	cmp	r3, #0
 8009330:	d0f2      	beq.n	8009318 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009336:	f003 0304 	and.w	r3, r3, #4
 800933a:	2b00      	cmp	r3, #0
 800933c:	d004      	beq.n	8009348 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2204      	movs	r2, #4
 8009342:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009344:	2304      	movs	r3, #4
 8009346:	e0b2      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934c:	f003 0301 	and.w	r3, r3, #1
 8009350:	2b00      	cmp	r3, #0
 8009352:	d004      	beq.n	800935e <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2201      	movs	r2, #1
 8009358:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800935a:	2301      	movs	r3, #1
 800935c:	e0a7      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	f7ff fcfb 	bl	8008d5a <SDIO_GetCommandResponse>
 8009364:	4603      	mov	r3, r0
 8009366:	461a      	mov	r2, r3
 8009368:	7afb      	ldrb	r3, [r7, #11]
 800936a:	4293      	cmp	r3, r2
 800936c:	d001      	beq.n	8009372 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800936e:	2301      	movs	r3, #1
 8009370:	e09d      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009378:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800937a:	2100      	movs	r1, #0
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f7ff fcf9 	bl	8008d74 <SDIO_GetResponse>
 8009382:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	4b4e      	ldr	r3, [pc, #312]	; (80094c0 <SDMMC_GetCmdResp1+0x1c8>)
 8009388:	4013      	ands	r3, r2
 800938a:	2b00      	cmp	r3, #0
 800938c:	d101      	bne.n	8009392 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800938e:	2300      	movs	r3, #0
 8009390:	e08d      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	2b00      	cmp	r3, #0
 8009396:	da02      	bge.n	800939e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009398:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800939c:	e087      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d001      	beq.n	80093ac <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80093a8:	2340      	movs	r3, #64	; 0x40
 80093aa:	e080      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80093b6:	2380      	movs	r3, #128	; 0x80
 80093b8:	e079      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d002      	beq.n	80093ca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80093c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093c8:	e071      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d002      	beq.n	80093da <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80093d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093d8:	e069      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d002      	beq.n	80093ea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80093e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093e8:	e061      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d002      	beq.n	80093fa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80093f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093f8:	e059      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009400:	2b00      	cmp	r3, #0
 8009402:	d002      	beq.n	800940a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009408:	e051      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009418:	e049      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009420:	2b00      	cmp	r3, #0
 8009422:	d002      	beq.n	800942a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009424:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009428:	e041      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d002      	beq.n	800943a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8009434:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009438:	e039      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009448:	e031      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009454:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009458:	e029      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009464:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009468:	e021      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009474:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009478:	e019      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009484:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009488:	e011      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009490:	2b00      	cmp	r3, #0
 8009492:	d002      	beq.n	800949a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009494:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009498:	e009      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	f003 0308 	and.w	r3, r3, #8
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d002      	beq.n	80094aa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80094a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80094a8:	e001      	b.n	80094ae <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80094aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	371c      	adds	r7, #28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd90      	pop	{r4, r7, pc}
 80094b6:	bf00      	nop
 80094b8:	20000014 	.word	0x20000014
 80094bc:	10624dd3 	.word	0x10624dd3
 80094c0:	fdffe008 	.word	0xfdffe008

080094c4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80094c4:	b490      	push	{r4, r7}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094cc:	4b1b      	ldr	r3, [pc, #108]	; (800953c <SDMMC_GetCmdResp2+0x78>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a1b      	ldr	r2, [pc, #108]	; (8009540 <SDMMC_GetCmdResp2+0x7c>)
 80094d2:	fba2 2303 	umull	r2, r3, r2, r3
 80094d6:	0a5b      	lsrs	r3, r3, #9
 80094d8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80094dc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80094e0:	4623      	mov	r3, r4
 80094e2:	1e5c      	subs	r4, r3, #1
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d102      	bne.n	80094ee <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094ec:	e020      	b.n	8009530 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d0f2      	beq.n	80094e0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094fe:	f003 0304 	and.w	r3, r3, #4
 8009502:	2b00      	cmp	r3, #0
 8009504:	d004      	beq.n	8009510 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2204      	movs	r2, #4
 800950a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800950c:	2304      	movs	r3, #4
 800950e:	e00f      	b.n	8009530 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009514:	f003 0301 	and.w	r3, r3, #1
 8009518:	2b00      	cmp	r3, #0
 800951a:	d004      	beq.n	8009526 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009522:	2301      	movs	r3, #1
 8009524:	e004      	b.n	8009530 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800952c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bc90      	pop	{r4, r7}
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	20000014 	.word	0x20000014
 8009540:	10624dd3 	.word	0x10624dd3

08009544 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009544:	b490      	push	{r4, r7}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800954c:	4b15      	ldr	r3, [pc, #84]	; (80095a4 <SDMMC_GetCmdResp3+0x60>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a15      	ldr	r2, [pc, #84]	; (80095a8 <SDMMC_GetCmdResp3+0x64>)
 8009552:	fba2 2303 	umull	r2, r3, r2, r3
 8009556:	0a5b      	lsrs	r3, r3, #9
 8009558:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800955c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009560:	4623      	mov	r3, r4
 8009562:	1e5c      	subs	r4, r3, #1
 8009564:	2b00      	cmp	r3, #0
 8009566:	d102      	bne.n	800956e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009568:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800956c:	e015      	b.n	800959a <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009572:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009576:	2b00      	cmp	r3, #0
 8009578:	d0f2      	beq.n	8009560 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800957e:	f003 0304 	and.w	r3, r3, #4
 8009582:	2b00      	cmp	r3, #0
 8009584:	d004      	beq.n	8009590 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2204      	movs	r2, #4
 800958a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800958c:	2304      	movs	r3, #4
 800958e:	e004      	b.n	800959a <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009596:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bc90      	pop	{r4, r7}
 80095a2:	4770      	bx	lr
 80095a4:	20000014 	.word	0x20000014
 80095a8:	10624dd3 	.word	0x10624dd3

080095ac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80095ac:	b590      	push	{r4, r7, lr}
 80095ae:	b087      	sub	sp, #28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	460b      	mov	r3, r1
 80095b6:	607a      	str	r2, [r7, #4]
 80095b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095ba:	4b31      	ldr	r3, [pc, #196]	; (8009680 <SDMMC_GetCmdResp6+0xd4>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a31      	ldr	r2, [pc, #196]	; (8009684 <SDMMC_GetCmdResp6+0xd8>)
 80095c0:	fba2 2303 	umull	r2, r3, r2, r3
 80095c4:	0a5b      	lsrs	r3, r3, #9
 80095c6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80095ca:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80095ce:	4623      	mov	r3, r4
 80095d0:	1e5c      	subs	r4, r3, #1
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d102      	bne.n	80095dc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095da:	e04c      	b.n	8009676 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d0f2      	beq.n	80095ce <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ec:	f003 0304 	and.w	r3, r3, #4
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d004      	beq.n	80095fe <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2204      	movs	r2, #4
 80095f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095fa:	2304      	movs	r3, #4
 80095fc:	e03b      	b.n	8009676 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	2b00      	cmp	r3, #0
 8009608:	d004      	beq.n	8009614 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2201      	movs	r2, #1
 800960e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009610:	2301      	movs	r3, #1
 8009612:	e030      	b.n	8009676 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f7ff fba0 	bl	8008d5a <SDIO_GetCommandResponse>
 800961a:	4603      	mov	r3, r0
 800961c:	461a      	mov	r2, r3
 800961e:	7afb      	ldrb	r3, [r7, #11]
 8009620:	4293      	cmp	r3, r2
 8009622:	d001      	beq.n	8009628 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009624:	2301      	movs	r3, #1
 8009626:	e026      	b.n	8009676 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800962e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009630:	2100      	movs	r1, #0
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f7ff fb9e 	bl	8008d74 <SDIO_GetResponse>
 8009638:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d106      	bne.n	8009652 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	0c1b      	lsrs	r3, r3, #16
 8009648:	b29a      	uxth	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800964e:	2300      	movs	r3, #0
 8009650:	e011      	b.n	8009676 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800965c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009660:	e009      	b.n	8009676 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009668:	2b00      	cmp	r3, #0
 800966a:	d002      	beq.n	8009672 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800966c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009670:	e001      	b.n	8009676 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009676:	4618      	mov	r0, r3
 8009678:	371c      	adds	r7, #28
 800967a:	46bd      	mov	sp, r7
 800967c:	bd90      	pop	{r4, r7, pc}
 800967e:	bf00      	nop
 8009680:	20000014 	.word	0x20000014
 8009684:	10624dd3 	.word	0x10624dd3

08009688 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009688:	b490      	push	{r4, r7}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009690:	4b18      	ldr	r3, [pc, #96]	; (80096f4 <SDMMC_GetCmdResp7+0x6c>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a18      	ldr	r2, [pc, #96]	; (80096f8 <SDMMC_GetCmdResp7+0x70>)
 8009696:	fba2 2303 	umull	r2, r3, r2, r3
 800969a:	0a5b      	lsrs	r3, r3, #9
 800969c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80096a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80096a4:	4623      	mov	r3, r4
 80096a6:	1e5c      	subs	r4, r3, #1
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d102      	bne.n	80096b2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096b0:	e01a      	b.n	80096e8 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d0f2      	beq.n	80096a4 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c2:	f003 0304 	and.w	r3, r3, #4
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d004      	beq.n	80096d4 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2240      	movs	r2, #64	; 0x40
 80096ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096d0:	2304      	movs	r3, #4
 80096d2:	e009      	b.n	80096e8 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d002      	beq.n	80096e6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2240      	movs	r2, #64	; 0x40
 80096e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80096e6:	2300      	movs	r3, #0
  
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bc90      	pop	{r4, r7}
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	20000014 	.word	0x20000014
 80096f8:	10624dd3 	.word	0x10624dd3

080096fc <_write>:
//
//	return _n;
//}

int _write(int file, char *data, int len)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b086      	sub	sp, #24
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2b01      	cmp	r3, #1
 800970c:	d00a      	beq.n	8009724 <_write+0x28>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2b02      	cmp	r3, #2
 8009712:	d007      	beq.n	8009724 <_write+0x28>
   {
      errno = EBADF;
 8009714:	f003 fe64 	bl	800d3e0 <__errno>
 8009718:	4603      	mov	r3, r0
 800971a:	2209      	movs	r2, #9
 800971c:	601a      	str	r2, [r3, #0]
      return -1;
 800971e:	f04f 33ff 	mov.w	r3, #4294967295
 8009722:	e010      	b.n	8009746 <_write+0x4a>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit((UART_HandleTypeDef *)COMM, (uint8_t*)data, len, 1000);
 8009724:	4b0a      	ldr	r3, [pc, #40]	; (8009750 <_write+0x54>)
 8009726:	6818      	ldr	r0, [r3, #0]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	b29a      	uxth	r2, r3
 800972c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009730:	68b9      	ldr	r1, [r7, #8]
 8009732:	f7fe fc20 	bl	8007f76 <HAL_UART_Transmit>
 8009736:	4603      	mov	r3, r0
 8009738:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d101      	bne.n	8009744 <_write+0x48>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	e000      	b.n	8009746 <_write+0x4a>
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	20000004 	.word	0x20000004

08009754 <SystemClock_Config>:
*/

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b0a0      	sub	sp, #128	; 0x80
 8009758:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800975a:	2300      	movs	r3, #0
 800975c:	60bb      	str	r3, [r7, #8]
 800975e:	4b3b      	ldr	r3, [pc, #236]	; (800984c <SystemClock_Config+0xf8>)
 8009760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009762:	4a3a      	ldr	r2, [pc, #232]	; (800984c <SystemClock_Config+0xf8>)
 8009764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009768:	6413      	str	r3, [r2, #64]	; 0x40
 800976a:	4b38      	ldr	r3, [pc, #224]	; (800984c <SystemClock_Config+0xf8>)
 800976c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009772:	60bb      	str	r3, [r7, #8]
 8009774:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8009776:	2300      	movs	r3, #0
 8009778:	607b      	str	r3, [r7, #4]
 800977a:	4b35      	ldr	r3, [pc, #212]	; (8009850 <SystemClock_Config+0xfc>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009782:	4a33      	ldr	r2, [pc, #204]	; (8009850 <SystemClock_Config+0xfc>)
 8009784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	4b31      	ldr	r3, [pc, #196]	; (8009850 <SystemClock_Config+0xfc>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009792:	607b      	str	r3, [r7, #4]
 8009794:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8009796:	2305      	movs	r3, #5
 8009798:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800979a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800979e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80097a0:	2301      	movs	r3, #1
 80097a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80097a4:	2302      	movs	r3, #2
 80097a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80097a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80097ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80097ae:	2310      	movs	r3, #16
 80097b0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 192;
 80097b2:	23c0      	movs	r3, #192	; 0xc0
 80097b4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80097b6:	2302      	movs	r3, #2
 80097b8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80097ba:	2304      	movs	r3, #4
 80097bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80097be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fb fede 	bl	8005584 <HAL_RCC_OscConfig>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80097ce:	f7fa fa75 	bl	8003cbc <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80097d2:	230f      	movs	r3, #15
 80097d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80097d6:	2302      	movs	r3, #2
 80097d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80097da:	2300      	movs	r3, #0
 80097dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80097de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80097e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80097e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097e8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80097ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80097ee:	2103      	movs	r1, #3
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fc f91f 	bl	8005a34 <HAL_RCC_ClockConfig>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d001      	beq.n	8009800 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80097fc:	f7fa fa5e 	bl	8003cbc <Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009800:	2320      	movs	r3, #32
 8009802:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009808:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800980a:	f107 030c 	add.w	r3, r7, #12
 800980e:	4618      	mov	r0, r3
 8009810:	f7fc fb24 	bl	8005e5c <HAL_RCCEx_PeriphCLKConfig>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800981a:	f7fa fa4f 	bl	8003cbc <Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800981e:	f7fc fa9b 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8009822:	4603      	mov	r3, r0
 8009824:	4a0b      	ldr	r2, [pc, #44]	; (8009854 <SystemClock_Config+0x100>)
 8009826:	fba2 2303 	umull	r2, r3, r2, r3
 800982a:	099b      	lsrs	r3, r3, #6
 800982c:	4618      	mov	r0, r3
 800982e:	f7fa fbf2 	bl	8004016 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8009832:	2004      	movs	r0, #4
 8009834:	f7fa fbfc 	bl	8004030 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8009838:	2200      	movs	r2, #0
 800983a:	210f      	movs	r1, #15
 800983c:	f04f 30ff 	mov.w	r0, #4294967295
 8009840:	f7fa fbbf 	bl	8003fc2 <HAL_NVIC_SetPriority>
}
 8009844:	bf00      	nop
 8009846:	3780      	adds	r7, #128	; 0x80
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	40023800 	.word	0x40023800
 8009850:	40007000 	.word	0x40007000
 8009854:	10624dd3 	.word	0x10624dd3

08009858 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b08e      	sub	sp, #56	; 0x38
 800985c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800985e:	2300      	movs	r3, #0
 8009860:	623b      	str	r3, [r7, #32]
 8009862:	4bb2      	ldr	r3, [pc, #712]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 8009864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009866:	4ab1      	ldr	r2, [pc, #708]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 8009868:	f043 0310 	orr.w	r3, r3, #16
 800986c:	6313      	str	r3, [r2, #48]	; 0x30
 800986e:	4baf      	ldr	r3, [pc, #700]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 8009870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009872:	f003 0310 	and.w	r3, r3, #16
 8009876:	623b      	str	r3, [r7, #32]
 8009878:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800987a:	2300      	movs	r3, #0
 800987c:	61fb      	str	r3, [r7, #28]
 800987e:	4bab      	ldr	r3, [pc, #684]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 8009880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009882:	4aaa      	ldr	r2, [pc, #680]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 8009884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009888:	6313      	str	r3, [r2, #48]	; 0x30
 800988a:	4ba8      	ldr	r3, [pc, #672]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 800988c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009892:	61fb      	str	r3, [r7, #28]
 8009894:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009896:	2300      	movs	r3, #0
 8009898:	61bb      	str	r3, [r7, #24]
 800989a:	4ba4      	ldr	r3, [pc, #656]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 800989c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989e:	4aa3      	ldr	r2, [pc, #652]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 80098a0:	f043 0304 	orr.w	r3, r3, #4
 80098a4:	6313      	str	r3, [r2, #48]	; 0x30
 80098a6:	4ba1      	ldr	r3, [pc, #644]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 80098a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098aa:	f003 0304 	and.w	r3, r3, #4
 80098ae:	61bb      	str	r3, [r7, #24]
 80098b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80098b2:	2300      	movs	r3, #0
 80098b4:	617b      	str	r3, [r7, #20]
 80098b6:	4b9d      	ldr	r3, [pc, #628]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 80098b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ba:	4a9c      	ldr	r2, [pc, #624]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 80098bc:	f043 0320 	orr.w	r3, r3, #32
 80098c0:	6313      	str	r3, [r2, #48]	; 0x30
 80098c2:	4b9a      	ldr	r3, [pc, #616]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 80098c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c6:	f003 0320 	and.w	r3, r3, #32
 80098ca:	617b      	str	r3, [r7, #20]
 80098cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80098ce:	2300      	movs	r3, #0
 80098d0:	613b      	str	r3, [r7, #16]
 80098d2:	4b96      	ldr	r3, [pc, #600]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 80098d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d6:	4a95      	ldr	r2, [pc, #596]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 80098d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098dc:	6313      	str	r3, [r2, #48]	; 0x30
 80098de:	4b93      	ldr	r3, [pc, #588]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 80098e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098e6:	613b      	str	r3, [r7, #16]
 80098e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80098ea:	2300      	movs	r3, #0
 80098ec:	60fb      	str	r3, [r7, #12]
 80098ee:	4b8f      	ldr	r3, [pc, #572]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 80098f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f2:	4a8e      	ldr	r2, [pc, #568]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 80098f4:	f043 0301 	orr.w	r3, r3, #1
 80098f8:	6313      	str	r3, [r2, #48]	; 0x30
 80098fa:	4b8c      	ldr	r3, [pc, #560]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 80098fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fe:	f003 0301 	and.w	r3, r3, #1
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009906:	2300      	movs	r3, #0
 8009908:	60bb      	str	r3, [r7, #8]
 800990a:	4b88      	ldr	r3, [pc, #544]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 800990c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800990e:	4a87      	ldr	r2, [pc, #540]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 8009910:	f043 0302 	orr.w	r3, r3, #2
 8009914:	6313      	str	r3, [r2, #48]	; 0x30
 8009916:	4b85      	ldr	r3, [pc, #532]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 8009918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800991a:	f003 0302 	and.w	r3, r3, #2
 800991e:	60bb      	str	r3, [r7, #8]
 8009920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009922:	2300      	movs	r3, #0
 8009924:	607b      	str	r3, [r7, #4]
 8009926:	4b81      	ldr	r3, [pc, #516]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 8009928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800992a:	4a80      	ldr	r2, [pc, #512]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 800992c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009930:	6313      	str	r3, [r2, #48]	; 0x30
 8009932:	4b7e      	ldr	r3, [pc, #504]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 8009934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800993a:	607b      	str	r3, [r7, #4]
 800993c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800993e:	2300      	movs	r3, #0
 8009940:	603b      	str	r3, [r7, #0]
 8009942:	4b7a      	ldr	r3, [pc, #488]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 8009944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009946:	4a79      	ldr	r2, [pc, #484]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 8009948:	f043 0308 	orr.w	r3, r3, #8
 800994c:	6313      	str	r3, [r2, #48]	; 0x30
 800994e:	4b77      	ldr	r3, [pc, #476]	; (8009b2c <MX_GPIO_Init+0x2d4>)
 8009950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009952:	f003 0308 	and.w	r3, r3, #8
 8009956:	603b      	str	r3, [r7, #0]
 8009958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PAN4_VGY_GPIO_Port, PAN4_VGY_Pin, GPIO_PIN_RESET);
 800995a:	2200      	movs	r2, #0
 800995c:	2104      	movs	r1, #4
 800995e:	4874      	ldr	r0, [pc, #464]	; (8009b30 <MX_GPIO_Init+0x2d8>)
 8009960:	f7fa fede 	bl	8004720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PAN5_CS2_Pin|LED_G_Pin|LED_Y_Pin, GPIO_PIN_SET);
 8009964:	2201      	movs	r2, #1
 8009966:	f242 0130 	movw	r1, #8240	; 0x2030
 800996a:	4872      	ldr	r0, [pc, #456]	; (8009b34 <MX_GPIO_Init+0x2dc>)
 800996c:	f7fa fed8 	bl	8004720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, PAN5_CS1_Pin|PAN6_CS2_Pin|PAN6_CS1_Pin|PAN1_CS2_Pin
 8009970:	2201      	movs	r2, #1
 8009972:	f640 61ff 	movw	r1, #3839	; 0xeff
 8009976:	4870      	ldr	r0, [pc, #448]	; (8009b38 <MX_GPIO_Init+0x2e0>)
 8009978:	f7fa fed2 	bl	8004720 <HAL_GPIO_WritePin>
                          |PAN1_CS1_Pin|PAN2_CS2_Pin|PAN2_CS1_Pin|PAN3_CS2_Pin
                          |PAN3_CS1_Pin|PAN4_CS2_Pin|PAN4_CS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SBAND_CS_GPIO_Port, SBAND_CS_Pin, GPIO_PIN_RESET);
 800997c:	2200      	movs	r2, #0
 800997e:	2140      	movs	r1, #64	; 0x40
 8009980:	486e      	ldr	r0, [pc, #440]	; (8009b3c <MX_GPIO_Init+0x2e4>)
 8009982:	f7fa fecd 	bl	8004720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PAN5_DIR1_Pin|PAN5_DIR2_Pin|PAN6_DIR1_Pin|PAN6_DIR2_Pin
 8009986:	2200      	movs	r2, #0
 8009988:	f24e 217c 	movw	r1, #57980	; 0xe27c
 800998c:	486c      	ldr	r0, [pc, #432]	; (8009b40 <MX_GPIO_Init+0x2e8>)
 800998e:	f7fa fec7 	bl	8004720 <HAL_GPIO_WritePin>
  // Turn-off the second MAG sensor due lack of I2C arbitration MAG1/MAG2
  HAL_GPIO_WritePin(GPIOH, MAG1_EN_Pin|MAG2_EN_Pin, GPIO_PIN_SET);
#endif

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8009992:	2201      	movs	r2, #1
 8009994:	2110      	movs	r1, #16
 8009996:	486b      	ldr	r0, [pc, #428]	; (8009b44 <MX_GPIO_Init+0x2ec>)
 8009998:	f7fa fec2 	bl	8004720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PAN5_VGY_Pin|PAN6_VGY_Pin|PAN1_VGY_Pin|PAN2_VGY_Pin
 800999c:	2200      	movs	r2, #0
 800999e:	21e6      	movs	r1, #230	; 0xe6
 80099a0:	4869      	ldr	r0, [pc, #420]	; (8009b48 <MX_GPIO_Init+0x2f0>)
 80099a2:	f7fa febd 	bl	8004720 <HAL_GPIO_WritePin>
                          |PAN3_VGY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OBC_OUT5_Pin|PAN4_DIR1_Pin|FLASH_NCS_Pin|OBC_OUT3_Pin
 80099a6:	2200      	movs	r2, #0
 80099a8:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 80099ac:	4867      	ldr	r0, [pc, #412]	; (8009b4c <MX_GPIO_Init+0x2f4>)
 80099ae:	f7fa feb7 	bl	8004720 <HAL_GPIO_WritePin>
                          |OBC_OUT2_Pin|OBC_OUT1_Pin, GPIO_PIN_RESET);

  /* Camera power supply disable by default */
  HAL_GPIO_WritePin(GPIOG, OBC_OUT1_Pin, GPIO_PIN_RESET);
 80099b2:	2200      	movs	r2, #0
 80099b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80099b8:	4864      	ldr	r0, [pc, #400]	; (8009b4c <MX_GPIO_Init+0x2f4>)
 80099ba:	f7fa feb1 	bl	8004720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_EN_Pin|OBC_OUT4_Pin, GPIO_PIN_RESET);
 80099be:	2200      	movs	r2, #0
 80099c0:	2148      	movs	r1, #72	; 0x48
 80099c2:	4863      	ldr	r0, [pc, #396]	; (8009b50 <MX_GPIO_Init+0x2f8>)
 80099c4:	f7fa feac 	bl	8004720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PAN4_VGY_Pin */
  GPIO_InitStruct.Pin = PAN4_VGY_Pin;
 80099c8:	2304      	movs	r3, #4
 80099ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80099cc:	2311      	movs	r3, #17
 80099ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099d0:	2300      	movs	r3, #0
 80099d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099d4:	2300      	movs	r3, #0
 80099d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PAN4_VGY_GPIO_Port, &GPIO_InitStruct);
 80099d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099dc:	4619      	mov	r1, r3
 80099de:	4854      	ldr	r0, [pc, #336]	; (8009b30 <MX_GPIO_Init+0x2d8>)
 80099e0:	f7fa fcf2 	bl	80043c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IRQ_Pin */
  GPIO_InitStruct.Pin = M2_IRQ_Pin;
 80099e4:	2340      	movs	r3, #64	; 0x40
 80099e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80099e8:	4b5a      	ldr	r3, [pc, #360]	; (8009b54 <MX_GPIO_Init+0x2fc>)
 80099ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099ec:	2300      	movs	r3, #0
 80099ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M2_IRQ_GPIO_Port, &GPIO_InitStruct);
 80099f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099f4:	4619      	mov	r1, r3
 80099f6:	484e      	ldr	r0, [pc, #312]	; (8009b30 <MX_GPIO_Init+0x2d8>)
 80099f8:	f7fa fce6 	bl	80043c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_IRQ_Pin */
  GPIO_InitStruct.Pin = M1_IRQ_Pin;
 80099fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009a02:	4b54      	ldr	r3, [pc, #336]	; (8009b54 <MX_GPIO_Init+0x2fc>)
 8009a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a06:	2300      	movs	r3, #0
 8009a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8009a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a0e:	4619      	mov	r1, r3
 8009a10:	4849      	ldr	r0, [pc, #292]	; (8009b38 <MX_GPIO_Init+0x2e0>)
 8009a12:	f7fa fcd9 	bl	80043c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_CS2_Pin LED_G_Pin LED_Y_Pin */
  GPIO_InitStruct.Pin = PAN5_CS2_Pin|LED_G_Pin|LED_Y_Pin;
 8009a16:	f242 0330 	movw	r3, #8240	; 0x2030
 8009a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a20:	2300      	movs	r3, #0
 8009a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a24:	2300      	movs	r3, #0
 8009a26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	4841      	ldr	r0, [pc, #260]	; (8009b34 <MX_GPIO_Init+0x2dc>)
 8009a30:	f7fa fcca 	bl	80043c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_CS1_Pin PAN6_CS2_Pin PAN6_CS1_Pin PAN1_CS2_Pin
                           PAN1_CS1_Pin PAN2_CS2_Pin PAN2_CS1_Pin PAN3_CS2_Pin
                           PAN3_CS1_Pin PAN4_CS2_Pin PAN4_CS1_Pin */
  GPIO_InitStruct.Pin = PAN5_CS1_Pin|PAN6_CS2_Pin|PAN6_CS1_Pin|PAN1_CS2_Pin
 8009a34:	f640 63ff 	movw	r3, #3839	; 0xeff
 8009a38:	627b      	str	r3, [r7, #36]	; 0x24
                          |PAN1_CS1_Pin|PAN2_CS2_Pin|PAN2_CS1_Pin|PAN3_CS2_Pin
                          |PAN3_CS1_Pin|PAN4_CS2_Pin|PAN4_CS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a42:	2300      	movs	r3, #0
 8009a44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	483a      	ldr	r0, [pc, #232]	; (8009b38 <MX_GPIO_Init+0x2e0>)
 8009a4e:	f7fa fcbb 	bl	80043c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SBAND_CS_Pin */
  GPIO_InitStruct.Pin = SBAND_CS_Pin;
 8009a52:	2340      	movs	r3, #64	; 0x40
 8009a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a56:	2301      	movs	r3, #1
 8009a58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SBAND_CS_GPIO_Port, &GPIO_InitStruct);
 8009a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a66:	4619      	mov	r1, r3
 8009a68:	4834      	ldr	r0, [pc, #208]	; (8009b3c <MX_GPIO_Init+0x2e4>)
 8009a6a:	f7fa fcad 	bl	80043c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SBAND_IRQ_Pin */
  GPIO_InitStruct.Pin = SBAND_IRQ_Pin;
 8009a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009a74:	4b37      	ldr	r3, [pc, #220]	; (8009b54 <MX_GPIO_Init+0x2fc>)
 8009a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SBAND_IRQ_GPIO_Port, &GPIO_InitStruct);
 8009a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a80:	4619      	mov	r1, r3
 8009a82:	482e      	ldr	r0, [pc, #184]	; (8009b3c <MX_GPIO_Init+0x2e4>)
 8009a84:	f7fa fca0 	bl	80043c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_DIR1_Pin PAN5_DIR2_Pin PAN6_DIR1_Pin PAN6_DIR2_Pin
                           ACC1_EN_Pin ACC2_EN_Pin MAG1_EN_Pin MAG2_EN_Pin
                           PAN4_DIR2_Pin */
  GPIO_InitStruct.Pin = PAN5_DIR1_Pin|PAN5_DIR2_Pin|PAN6_DIR1_Pin|PAN6_DIR2_Pin
 8009a88:	f24e 033c 	movw	r3, #57404	; 0xe03c
 8009a8c:	627b      	str	r3, [r7, #36]	; 0x24
                          |MAG1_EN_Pin|MAG2_EN_Pin
                          |PAN4_DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a92:	2300      	movs	r3, #0
 8009a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a96:	2300      	movs	r3, #0
 8009a98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	4827      	ldr	r0, [pc, #156]	; (8009b40 <MX_GPIO_Init+0x2e8>)
 8009aa2:	f7fa fc91 	bl	80043c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ACC1_EN_Pin|ACC2_EN_Pin;
 8009aa6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8009aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8009aac:	2311      	movs	r3, #17
 8009aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009abc:	4619      	mov	r1, r3
 8009abe:	4820      	ldr	r0, [pc, #128]	; (8009b40 <MX_GPIO_Init+0x2e8>)
 8009ac0:	f7fa fc82 	bl	80043c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8009ac4:	2310      	movs	r3, #16
 8009ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009acc:	2300      	movs	r3, #0
 8009ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8009ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ad8:	4619      	mov	r1, r3
 8009ada:	481a      	ldr	r0, [pc, #104]	; (8009b44 <MX_GPIO_Init+0x2ec>)
 8009adc:	f7fa fc74 	bl	80043c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_VGY_Pin PAN6_VGY_Pin PAN1_VGY_Pin PAN2_VGY_Pin
                           PAN3_VGY_Pin */
  GPIO_InitStruct.Pin = PAN5_VGY_Pin|PAN6_VGY_Pin|PAN1_VGY_Pin|PAN2_VGY_Pin
 8009ae0:	23e6      	movs	r3, #230	; 0xe6
 8009ae2:	627b      	str	r3, [r7, #36]	; 0x24
                          |PAN3_VGY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8009ae4:	2311      	movs	r3, #17
 8009ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009aec:	2300      	movs	r3, #0
 8009aee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009af4:	4619      	mov	r1, r3
 8009af6:	4814      	ldr	r0, [pc, #80]	; (8009b48 <MX_GPIO_Init+0x2f0>)
 8009af8:	f7fa fc66 	bl	80043c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OBC_OUT5_Pin PAN4_DIR1_Pin FLASH_NCS_Pin OBC_OUT3_Pin
                           OBC_OUT2_Pin OBC_OUT1_Pin */
  GPIO_InitStruct.Pin = OBC_OUT5_Pin|PAN4_DIR1_Pin|FLASH_NCS_Pin|OBC_OUT3_Pin
 8009afc:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 8009b00:	627b      	str	r3, [r7, #36]	; 0x24
                          |OBC_OUT2_Pin|OBC_OUT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b02:	2301      	movs	r3, #1
 8009b04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b06:	2300      	movs	r3, #0
 8009b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b12:	4619      	mov	r1, r3
 8009b14:	480d      	ldr	r0, [pc, #52]	; (8009b4c <MX_GPIO_Init+0x2f4>)
 8009b16:	f7fa fc57 	bl	80043c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_EN_Pin OBC_OUT4_Pin */
  GPIO_InitStruct.Pin = SD_EN_Pin|OBC_OUT4_Pin;
 8009b1a:	2348      	movs	r3, #72	; 0x48
 8009b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b22:	2300      	movs	r3, #0
 8009b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b26:	2300      	movs	r3, #0
 8009b28:	e016      	b.n	8009b58 <MX_GPIO_Init+0x300>
 8009b2a:	bf00      	nop
 8009b2c:	40023800 	.word	0x40023800
 8009b30:	40021000 	.word	0x40021000
 8009b34:	40020800 	.word	0x40020800
 8009b38:	40022000 	.word	0x40022000
 8009b3c:	40021400 	.word	0x40021400
 8009b40:	40021c00 	.word	0x40021c00
 8009b44:	40020000 	.word	0x40020000
 8009b48:	40020400 	.word	0x40020400
 8009b4c:	40021800 	.word	0x40021800
 8009b50:	40020c00 	.word	0x40020c00
 8009b54:	10110000 	.word	0x10110000
 8009b58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b5e:	4619      	mov	r1, r3
 8009b60:	4809      	ldr	r0, [pc, #36]	; (8009b88 <MX_GPIO_Init+0x330>)
 8009b62:	f7fa fc31 	bl	80043c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 8009b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b70:	2300      	movs	r3, #0
 8009b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8009b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b78:	4619      	mov	r1, r3
 8009b7a:	4804      	ldr	r0, [pc, #16]	; (8009b8c <MX_GPIO_Init+0x334>)
 8009b7c:	f7fa fc24 	bl	80043c8 <HAL_GPIO_Init>

}
 8009b80:	bf00      	nop
 8009b82:	3738      	adds	r7, #56	; 0x38
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	40020c00 	.word	0x40020c00
 8009b8c:	40021800 	.word	0x40021800

08009b90 <MX_I2C1_Init>:

}

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8009b94:	4b12      	ldr	r3, [pc, #72]	; (8009be0 <MX_I2C1_Init+0x50>)
 8009b96:	4a13      	ldr	r2, [pc, #76]	; (8009be4 <MX_I2C1_Init+0x54>)
 8009b98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8009b9a:	4b11      	ldr	r3, [pc, #68]	; (8009be0 <MX_I2C1_Init+0x50>)
 8009b9c:	4a12      	ldr	r2, [pc, #72]	; (8009be8 <MX_I2C1_Init+0x58>)
 8009b9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009ba0:	4b0f      	ldr	r3, [pc, #60]	; (8009be0 <MX_I2C1_Init+0x50>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009ba6:	4b0e      	ldr	r3, [pc, #56]	; (8009be0 <MX_I2C1_Init+0x50>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009bac:	4b0c      	ldr	r3, [pc, #48]	; (8009be0 <MX_I2C1_Init+0x50>)
 8009bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009bb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009bb4:	4b0a      	ldr	r3, [pc, #40]	; (8009be0 <MX_I2C1_Init+0x50>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009bba:	4b09      	ldr	r3, [pc, #36]	; (8009be0 <MX_I2C1_Init+0x50>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009bc0:	4b07      	ldr	r3, [pc, #28]	; (8009be0 <MX_I2C1_Init+0x50>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009bc6:	4b06      	ldr	r3, [pc, #24]	; (8009be0 <MX_I2C1_Init+0x50>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009bcc:	4804      	ldr	r0, [pc, #16]	; (8009be0 <MX_I2C1_Init+0x50>)
 8009bce:	f7fa fdc1 	bl	8004754 <HAL_I2C_Init>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d001      	beq.n	8009bdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009bd8:	f7fa f870 	bl	8003cbc <Error_Handler>
  }

}
 8009bdc:	bf00      	nop
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	200002a0 	.word	0x200002a0
 8009be4:	40005400 	.word	0x40005400
 8009be8:	00061a80 	.word	0x00061a80

08009bec <MX_SDIO_SD_Init>:

}

/* SDIO init function */
void MX_SDIO_SD_Init(void)
{
 8009bec:	b480      	push	{r7}
 8009bee:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8009bf0:	4b0c      	ldr	r3, [pc, #48]	; (8009c24 <MX_SDIO_SD_Init+0x38>)
 8009bf2:	4a0d      	ldr	r2, [pc, #52]	; (8009c28 <MX_SDIO_SD_Init+0x3c>)
 8009bf4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8009bf6:	4b0b      	ldr	r3, [pc, #44]	; (8009c24 <MX_SDIO_SD_Init+0x38>)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8009bfc:	4b09      	ldr	r3, [pc, #36]	; (8009c24 <MX_SDIO_SD_Init+0x38>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009c02:	4b08      	ldr	r3, [pc, #32]	; (8009c24 <MX_SDIO_SD_Init+0x38>)
 8009c04:	2200      	movs	r2, #0
 8009c06:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8009c08:	4b06      	ldr	r3, [pc, #24]	; (8009c24 <MX_SDIO_SD_Init+0x38>)
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009c0e:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <MX_SDIO_SD_Init+0x38>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = SDIO_TRANSFER_CLK_DIV;
 8009c14:	4b03      	ldr	r3, [pc, #12]	; (8009c24 <MX_SDIO_SD_Init+0x38>)
 8009c16:	2203      	movs	r2, #3
 8009c18:	619a      	str	r2, [r3, #24]

}
 8009c1a:	bf00      	nop
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	2000039c 	.word	0x2000039c
 8009c28:	40012c00 	.word	0x40012c00

08009c2c <MX_UART4_Init>:

}

/* UART4 init function */
void MX_UART4_Init(void)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8009c30:	4b11      	ldr	r3, [pc, #68]	; (8009c78 <MX_UART4_Init+0x4c>)
 8009c32:	4a12      	ldr	r2, [pc, #72]	; (8009c7c <MX_UART4_Init+0x50>)
 8009c34:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8009c36:	4b10      	ldr	r3, [pc, #64]	; (8009c78 <MX_UART4_Init+0x4c>)
 8009c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009c3c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8009c3e:	4b0e      	ldr	r3, [pc, #56]	; (8009c78 <MX_UART4_Init+0x4c>)
 8009c40:	2200      	movs	r2, #0
 8009c42:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8009c44:	4b0c      	ldr	r3, [pc, #48]	; (8009c78 <MX_UART4_Init+0x4c>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8009c4a:	4b0b      	ldr	r3, [pc, #44]	; (8009c78 <MX_UART4_Init+0x4c>)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8009c50:	4b09      	ldr	r3, [pc, #36]	; (8009c78 <MX_UART4_Init+0x4c>)
 8009c52:	220c      	movs	r2, #12
 8009c54:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009c56:	4b08      	ldr	r3, [pc, #32]	; (8009c78 <MX_UART4_Init+0x4c>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8009c5c:	4b06      	ldr	r3, [pc, #24]	; (8009c78 <MX_UART4_Init+0x4c>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8009c62:	4805      	ldr	r0, [pc, #20]	; (8009c78 <MX_UART4_Init+0x4c>)
 8009c64:	f7fe f93a 	bl	8007edc <HAL_UART_Init>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8009c6e:	f7fa f825 	bl	8003cbc <Error_Handler>
  }

}
 8009c72:	bf00      	nop
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	2000067c 	.word	0x2000067c
 8009c7c:	40004c00 	.word	0x40004c00

08009c80 <MX_USART1_UART_Init>:

/* USART1 init function */
void MX_USART1_UART_Init(void)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8009c84:	4b11      	ldr	r3, [pc, #68]	; (8009ccc <MX_USART1_UART_Init+0x4c>)
 8009c86:	4a12      	ldr	r2, [pc, #72]	; (8009cd0 <MX_USART1_UART_Init+0x50>)
 8009c88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009c8a:	4b10      	ldr	r3, [pc, #64]	; (8009ccc <MX_USART1_UART_Init+0x4c>)
 8009c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009c90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009c92:	4b0e      	ldr	r3, [pc, #56]	; (8009ccc <MX_USART1_UART_Init+0x4c>)
 8009c94:	2200      	movs	r2, #0
 8009c96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009c98:	4b0c      	ldr	r3, [pc, #48]	; (8009ccc <MX_USART1_UART_Init+0x4c>)
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009c9e:	4b0b      	ldr	r3, [pc, #44]	; (8009ccc <MX_USART1_UART_Init+0x4c>)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009ca4:	4b09      	ldr	r3, [pc, #36]	; (8009ccc <MX_USART1_UART_Init+0x4c>)
 8009ca6:	220c      	movs	r2, #12
 8009ca8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009caa:	4b08      	ldr	r3, [pc, #32]	; (8009ccc <MX_USART1_UART_Init+0x4c>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009cb0:	4b06      	ldr	r3, [pc, #24]	; (8009ccc <MX_USART1_UART_Init+0x4c>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009cb6:	4805      	ldr	r0, [pc, #20]	; (8009ccc <MX_USART1_UART_Init+0x4c>)
 8009cb8:	f7fe f910 	bl	8007edc <HAL_UART_Init>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009cc2:	f7f9 fffb 	bl	8003cbc <Error_Handler>
  }

}
 8009cc6:	bf00      	nop
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	200006bc 	.word	0x200006bc
 8009cd0:	40011000 	.word	0x40011000

08009cd4 <MX_USART6_UART_Init>:

/* USART6 init function */
void MX_USART6_UART_Init(void)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8009cd8:	4b15      	ldr	r3, [pc, #84]	; (8009d30 <MX_USART6_UART_Init+0x5c>)
 8009cda:	4a16      	ldr	r2, [pc, #88]	; (8009d34 <MX_USART6_UART_Init+0x60>)
 8009cdc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8009cde:	4b14      	ldr	r3, [pc, #80]	; (8009d30 <MX_USART6_UART_Init+0x5c>)
 8009ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009ce4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8009ce6:	4b12      	ldr	r3, [pc, #72]	; (8009d30 <MX_USART6_UART_Init+0x5c>)
 8009ce8:	2200      	movs	r2, #0
 8009cea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8009cec:	4b10      	ldr	r3, [pc, #64]	; (8009d30 <MX_USART6_UART_Init+0x5c>)
 8009cee:	2200      	movs	r2, #0
 8009cf0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8009cf2:	4b0f      	ldr	r3, [pc, #60]	; (8009d30 <MX_USART6_UART_Init+0x5c>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8009cf8:	4b0d      	ldr	r3, [pc, #52]	; (8009d30 <MX_USART6_UART_Init+0x5c>)
 8009cfa:	220c      	movs	r2, #12
 8009cfc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009cfe:	4b0c      	ldr	r3, [pc, #48]	; (8009d30 <MX_USART6_UART_Init+0x5c>)
 8009d00:	2200      	movs	r2, #0
 8009d02:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8009d04:	4b0a      	ldr	r3, [pc, #40]	; (8009d30 <MX_USART6_UART_Init+0x5c>)
 8009d06:	2200      	movs	r2, #0
 8009d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8009d0a:	4809      	ldr	r0, [pc, #36]	; (8009d30 <MX_USART6_UART_Init+0x5c>)
 8009d0c:	f7fe f8e6 	bl	8007edc <HAL_UART_Init>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8009d16:	f7f9 ffd1 	bl	8003cbc <Error_Handler>
  }
  //Enable interrupts
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	2047      	movs	r0, #71	; 0x47
 8009d20:	f7fa f94f 	bl	8003fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8009d24:	2047      	movs	r0, #71	; 0x47
 8009d26:	f7fa f968 	bl	8003ffa <HAL_NVIC_EnableIRQ>
}
 8009d2a:	bf00      	nop
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	200006fc 	.word	0x200006fc
 8009d34:	40011400 	.word	0x40011400

08009d38 <MX_WWDG_Init>:

}

/* WWDG init function */
void MX_WWDG_Init(void)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	af00      	add	r7, sp, #0

  hwwdg.Instance = WWDG;
 8009d3c:	4b0d      	ldr	r3, [pc, #52]	; (8009d74 <MX_WWDG_Init+0x3c>)
 8009d3e:	4a0e      	ldr	r2, [pc, #56]	; (8009d78 <MX_WWDG_Init+0x40>)
 8009d40:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 8009d42:	4b0c      	ldr	r3, [pc, #48]	; (8009d74 <MX_WWDG_Init+0x3c>)
 8009d44:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8009d48:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8009d4a:	4b0a      	ldr	r3, [pc, #40]	; (8009d74 <MX_WWDG_Init+0x3c>)
 8009d4c:	2240      	movs	r2, #64	; 0x40
 8009d4e:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 8009d50:	4b08      	ldr	r3, [pc, #32]	; (8009d74 <MX_WWDG_Init+0x3c>)
 8009d52:	2240      	movs	r2, #64	; 0x40
 8009d54:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_ENABLE;
 8009d56:	4b07      	ldr	r3, [pc, #28]	; (8009d74 <MX_WWDG_Init+0x3c>)
 8009d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d5c:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8009d5e:	4805      	ldr	r0, [pc, #20]	; (8009d74 <MX_WWDG_Init+0x3c>)
 8009d60:	f7fe ff48 	bl	8008bf4 <HAL_WWDG_Init>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d001      	beq.n	8009d6e <MX_WWDG_Init+0x36>
  {
    Error_Handler();
 8009d6a:	f7f9 ffa7 	bl	8003cbc <Error_Handler>
  }

}
 8009d6e:	bf00      	nop
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	2000073c 	.word	0x2000073c
 8009d78:	40002c00 	.word	0x40002c00

08009d7c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009d86:	f000 f89d 	bl	8009ec4 <BSP_SD_IsDetected>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d001      	beq.n	8009d94 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	e012      	b.n	8009dba <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009d94:	480b      	ldr	r0, [pc, #44]	; (8009dc4 <BSP_SD_Init+0x48>)
 8009d96:	f7fc fa7f 	bl	8006298 <HAL_SD_Init>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	71fb      	strb	r3, [r7, #7]
#ifdef BUS_4BITS
  /* Configure SD Bus width */
  if (sd_state == MSD_OK)
 8009d9e:	79fb      	ldrb	r3, [r7, #7]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d109      	bne.n	8009db8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009da4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009da8:	4806      	ldr	r0, [pc, #24]	; (8009dc4 <BSP_SD_Init+0x48>)
 8009daa:	f7fd f9f8 	bl	800719e <HAL_SD_ConfigWideBusOperation>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif
  return sd_state;
 8009db8:	79fb      	ldrb	r3, [r7, #7]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	2000039c 	.word	0x2000039c

08009dc8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b088      	sub	sp, #32
 8009dcc:	af02      	add	r7, sp, #8
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
 8009dd4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state;

  __HAL_LOCK(&hsd);
 8009dd6:	4b0d      	ldr	r3, [pc, #52]	; (8009e0c <BSP_SD_ReadBlocks+0x44>)
 8009dd8:	7f1b      	ldrb	r3, [r3, #28]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d101      	bne.n	8009de2 <BSP_SD_ReadBlocks+0x1a>
 8009dde:	2302      	movs	r3, #2
 8009de0:	e010      	b.n	8009e04 <BSP_SD_ReadBlocks+0x3c>
 8009de2:	4b0a      	ldr	r3, [pc, #40]	; (8009e0c <BSP_SD_ReadBlocks+0x44>)
 8009de4:	2201      	movs	r2, #1
 8009de6:	771a      	strb	r2, [r3, #28]
  sd_state = HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout);
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	68f9      	ldr	r1, [r7, #12]
 8009df2:	4806      	ldr	r0, [pc, #24]	; (8009e0c <BSP_SD_ReadBlocks+0x44>)
 8009df4:	f7fc fad8 	bl	80063a8 <HAL_SD_ReadBlocks>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	75fb      	strb	r3, [r7, #23]
  __HAL_UNLOCK(&hsd);
 8009dfc:	4b03      	ldr	r3, [pc, #12]	; (8009e0c <BSP_SD_ReadBlocks+0x44>)
 8009dfe:	2200      	movs	r2, #0
 8009e00:	771a      	strb	r2, [r3, #28]
  
  return sd_state;  
 8009e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3718      	adds	r7, #24
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	2000039c 	.word	0x2000039c

08009e10 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b088      	sub	sp, #32
 8009e14:	af02      	add	r7, sp, #8
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
 8009e1c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	75fb      	strb	r3, [r7, #23]

  __HAL_LOCK(&hsd);
 8009e22:	4b0d      	ldr	r3, [pc, #52]	; (8009e58 <BSP_SD_WriteBlocks+0x48>)
 8009e24:	7f1b      	ldrb	r3, [r3, #28]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d101      	bne.n	8009e2e <BSP_SD_WriteBlocks+0x1e>
 8009e2a:	2302      	movs	r3, #2
 8009e2c:	e010      	b.n	8009e50 <BSP_SD_WriteBlocks+0x40>
 8009e2e:	4b0a      	ldr	r3, [pc, #40]	; (8009e58 <BSP_SD_WriteBlocks+0x48>)
 8009e30:	2201      	movs	r2, #1
 8009e32:	771a      	strb	r2, [r3, #28]
  sd_state = HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout);
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	68f9      	ldr	r1, [r7, #12]
 8009e3e:	4806      	ldr	r0, [pc, #24]	; (8009e58 <BSP_SD_WriteBlocks+0x48>)
 8009e40:	f7fc fc49 	bl	80066d6 <HAL_SD_WriteBlocks>
 8009e44:	4603      	mov	r3, r0
 8009e46:	75fb      	strb	r3, [r7, #23]
  __HAL_UNLOCK(&hsd);
 8009e48:	4b03      	ldr	r3, [pc, #12]	; (8009e58 <BSP_SD_WriteBlocks+0x48>)
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	771a      	strb	r2, [r3, #28]

  return sd_state;  
 8009e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3718      	adds	r7, #24
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	2000039c 	.word	0x2000039c

08009e5c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
  uint8_t sd_state;  

  __HAL_LOCK(&hsd);
 8009e62:	4b0e      	ldr	r3, [pc, #56]	; (8009e9c <BSP_SD_GetCardState+0x40>)
 8009e64:	7f1b      	ldrb	r3, [r3, #28]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d101      	bne.n	8009e6e <BSP_SD_GetCardState+0x12>
 8009e6a:	2302      	movs	r3, #2
 8009e6c:	e011      	b.n	8009e92 <BSP_SD_GetCardState+0x36>
 8009e6e:	4b0b      	ldr	r3, [pc, #44]	; (8009e9c <BSP_SD_GetCardState+0x40>)
 8009e70:	2201      	movs	r2, #1
 8009e72:	771a      	strb	r2, [r3, #28]
  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER)
 8009e74:	4809      	ldr	r0, [pc, #36]	; (8009e9c <BSP_SD_GetCardState+0x40>)
 8009e76:	f7fd fa0e 	bl	8007296 <HAL_SD_GetCardState>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	d102      	bne.n	8009e86 <BSP_SD_GetCardState+0x2a>
    sd_state = HAL_OK;
 8009e80:	2300      	movs	r3, #0
 8009e82:	71fb      	strb	r3, [r7, #7]
 8009e84:	e001      	b.n	8009e8a <BSP_SD_GetCardState+0x2e>
  else
    sd_state = HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	71fb      	strb	r3, [r7, #7]
  __HAL_UNLOCK(&hsd);
 8009e8a:	4b04      	ldr	r3, [pc, #16]	; (8009e9c <BSP_SD_GetCardState+0x40>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	771a      	strb	r2, [r3, #28]
  
  return sd_state;
 8009e90:	79fb      	ldrb	r3, [r7, #7]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	2000039c 	.word	0x2000039c

08009ea0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ea8:	b672      	cpsid	i
}
 8009eaa:	bf00      	nop
  /* Get SD card Information */
    __disable_irq();
    HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009eac:	6879      	ldr	r1, [r7, #4]
 8009eae:	4804      	ldr	r0, [pc, #16]	; (8009ec0 <BSP_SD_GetCardInfo+0x20>)
 8009eb0:	f7fd f949 	bl	8007146 <HAL_SD_GetCardInfo>
  __ASM volatile ("cpsie i" : : : "memory");
 8009eb4:	b662      	cpsie	i
}
 8009eb6:	bf00      	nop
    __enable_irq();
}
 8009eb8:	bf00      	nop
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	2000039c 	.word	0x2000039c

08009ec4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8009ece:	79fb      	ldrb	r3, [r7, #7]
 8009ed0:	b2db      	uxtb	r3, r3
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	370c      	adds	r7, #12
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
	...

08009ee0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver((Diskio_drvTypeDef*)&SD_Driver, SD_Path);
 8009ee4:	4904      	ldr	r1, [pc, #16]	; (8009ef8 <MX_FATFS_Init+0x18>)
 8009ee6:	4805      	ldr	r0, [pc, #20]	; (8009efc <MX_FATFS_Init+0x1c>)
 8009ee8:	f000 fc3c 	bl	800a764 <FATFS_LinkDriver>
 8009eec:	4603      	mov	r3, r0
 8009eee:	461a      	mov	r2, r3
 8009ef0:	4b03      	ldr	r3, [pc, #12]	; (8009f00 <MX_FATFS_Init+0x20>)
 8009ef2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009ef4:	bf00      	nop
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	200007dc 	.word	0x200007dc
 8009efc:	080109cc 	.word	0x080109cc
 8009f00:	200007d8 	.word	0x200007d8

08009f04 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009f0e:	4b0b      	ldr	r3, [pc, #44]	; (8009f3c <SD_initialize+0x38>)
 8009f10:	2201      	movs	r2, #1
 8009f12:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8009f14:	f7ff ff32 	bl	8009d7c <BSP_SD_Init>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d107      	bne.n	8009f2e <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009f1e:	4b07      	ldr	r3, [pc, #28]	; (8009f3c <SD_initialize+0x38>)
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	f023 0301 	bic.w	r3, r3, #1
 8009f28:	b2da      	uxtb	r2, r3
 8009f2a:	4b04      	ldr	r3, [pc, #16]	; (8009f3c <SD_initialize+0x38>)
 8009f2c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009f2e:	4b03      	ldr	r3, [pc, #12]	; (8009f3c <SD_initialize+0x38>)
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	b2db      	uxtb	r3, r3
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	20000010 	.word	0x20000010

08009f40 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	4603      	mov	r3, r0
 8009f48:	71fb      	strb	r3, [r7, #7]
  
  if(BSP_SD_GetCardState() != SD_TRANSFER_BUSY)
 8009f4a:	f7ff ff87 	bl	8009e5c <BSP_SD_GetCardState>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d008      	beq.n	8009f66 <SD_status+0x26>
    Stat &= ~STA_BUSY;
 8009f54:	4b0b      	ldr	r3, [pc, #44]	; (8009f84 <SD_status+0x44>)
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	f023 0308 	bic.w	r3, r3, #8
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	4b08      	ldr	r3, [pc, #32]	; (8009f84 <SD_status+0x44>)
 8009f62:	701a      	strb	r2, [r3, #0]
 8009f64:	e007      	b.n	8009f76 <SD_status+0x36>
  else
    Stat |= STA_BUSY;
 8009f66:	4b07      	ldr	r3, [pc, #28]	; (8009f84 <SD_status+0x44>)
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	f043 0308 	orr.w	r3, r3, #8
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	4b04      	ldr	r3, [pc, #16]	; (8009f84 <SD_status+0x44>)
 8009f74:	701a      	strb	r2, [r3, #0]
  
  return Stat;
 8009f76:	4b03      	ldr	r3, [pc, #12]	; (8009f84 <SD_status+0x44>)
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	b2db      	uxtb	r3, r3
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3708      	adds	r7, #8
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}
 8009f84:	20000010 	.word	0x20000010

08009f88 <SD_read>:
  */
    
#define MMC_RDWR_TRIES       20
#define MMC_STATUS_TRIES     500
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b086      	sub	sp, #24
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60b9      	str	r1, [r7, #8]
 8009f90:	607a      	str	r2, [r7, #4]
 8009f92:	603b      	str	r3, [r7, #0]
 8009f94:	4603      	mov	r3, r0
 8009f96:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = MMC_RDWR_TRIES;
 8009f98:	2314      	movs	r3, #20
 8009f9a:	617b      	str	r3, [r7, #20]

  while (BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t) (sector), count, SD_DATATIMEOUT) != HAL_OK)
 8009f9c:	e009      	b.n	8009fb2 <SD_read+0x2a>
  {
    if (timeout-- == 0)
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	1e5a      	subs	r2, r3, #1
 8009fa2:	617a      	str	r2, [r7, #20]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d101      	bne.n	8009fac <SD_read+0x24>
    {
      return RES_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e020      	b.n	8009fee <SD_read+0x66>
    }
    osDelay(1);
 8009fac:	2001      	movs	r0, #1
 8009fae:	f000 fc50 	bl	800a852 <osDelay>
  while (BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t) (sector), count, SD_DATATIMEOUT) != HAL_OK)
 8009fb2:	f241 3388 	movw	r3, #5000	; 0x1388
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	6879      	ldr	r1, [r7, #4]
 8009fba:	68b8      	ldr	r0, [r7, #8]
 8009fbc:	f7ff ff04 	bl	8009dc8 <BSP_SD_ReadBlocks>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1eb      	bne.n	8009f9e <SD_read+0x16>
  }
  timeout = MMC_STATUS_TRIES;
 8009fc6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009fca:	617b      	str	r3, [r7, #20]
  while (BSP_SD_GetCardState() != HAL_OK)
 8009fcc:	e009      	b.n	8009fe2 <SD_read+0x5a>
  {
    if (timeout-- == 0)
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	1e5a      	subs	r2, r3, #1
 8009fd2:	617a      	str	r2, [r7, #20]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d101      	bne.n	8009fdc <SD_read+0x54>
    {
      return RES_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e008      	b.n	8009fee <SD_read+0x66>
    }
    osDelay(1);
 8009fdc:	2001      	movs	r0, #1
 8009fde:	f000 fc38 	bl	800a852 <osDelay>
  while (BSP_SD_GetCardState() != HAL_OK)
 8009fe2:	f7ff ff3b 	bl	8009e5c <BSP_SD_GetCardState>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1f0      	bne.n	8009fce <SD_read+0x46>
  }
  return RES_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3718      	adds	r7, #24
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b086      	sub	sp, #24
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
 800a000:	603b      	str	r3, [r7, #0]
 800a002:	4603      	mov	r3, r0
 800a004:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = MMC_RDWR_TRIES;
 800a006:	2314      	movs	r3, #20
 800a008:	617b      	str	r3, [r7, #20]

  while (BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_DATATIMEOUT) != HAL_OK)
 800a00a:	e009      	b.n	800a020 <SD_write+0x2a>
  {
    if (timeout-- == 0)
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	1e5a      	subs	r2, r3, #1
 800a010:	617a      	str	r2, [r7, #20]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d101      	bne.n	800a01a <SD_write+0x24>
    {
      return RES_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e020      	b.n	800a05c <SD_write+0x66>
    }
    osDelay(1);
 800a01a:	2001      	movs	r0, #1
 800a01c:	f000 fc19 	bl	800a852 <osDelay>
  while (BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_DATATIMEOUT) != HAL_OK)
 800a020:	f241 3388 	movw	r3, #5000	; 0x1388
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	6879      	ldr	r1, [r7, #4]
 800a028:	68b8      	ldr	r0, [r7, #8]
 800a02a:	f7ff fef1 	bl	8009e10 <BSP_SD_WriteBlocks>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1eb      	bne.n	800a00c <SD_write+0x16>
  }
  timeout = MMC_STATUS_TRIES;
 800a034:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a038:	617b      	str	r3, [r7, #20]
  while(BSP_SD_GetCardState() != HAL_OK)
 800a03a:	e009      	b.n	800a050 <SD_write+0x5a>
  {
    if (timeout-- == 0)
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	1e5a      	subs	r2, r3, #1
 800a040:	617a      	str	r2, [r7, #20]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d101      	bne.n	800a04a <SD_write+0x54>
    {
      return RES_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e008      	b.n	800a05c <SD_write+0x66>
    }
    osDelay(1);
 800a04a:	2001      	movs	r0, #1
 800a04c:	f000 fc01 	bl	800a852 <osDelay>
  while(BSP_SD_GetCardState() != HAL_OK)
 800a050:	f7ff ff04 	bl	8009e5c <BSP_SD_GetCardState>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1f0      	bne.n	800a03c <SD_write+0x46>
  }    
  return RES_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3718      	adds	r7, #24
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b08c      	sub	sp, #48	; 0x30
 800a068:	af00      	add	r7, sp, #0
 800a06a:	4603      	mov	r3, r0
 800a06c:	603a      	str	r2, [r7, #0]
 800a06e:	71fb      	strb	r3, [r7, #7]
 800a070:	460b      	mov	r3, r1
 800a072:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) 
 800a07a:	4b24      	ldr	r3, [pc, #144]	; (800a10c <SD_ioctl+0xa8>)
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	f003 0301 	and.w	r3, r3, #1
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <SD_ioctl+0x28>
    return RES_NOTRDY;
 800a088:	2303      	movs	r3, #3
 800a08a:	e03b      	b.n	800a104 <SD_ioctl+0xa0>
  
  switch (cmd)
 800a08c:	79bb      	ldrb	r3, [r7, #6]
 800a08e:	2b03      	cmp	r3, #3
 800a090:	d833      	bhi.n	800a0fa <SD_ioctl+0x96>
 800a092:	a201      	add	r2, pc, #4	; (adr r2, 800a098 <SD_ioctl+0x34>)
 800a094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a098:	0800a0a9 	.word	0x0800a0a9
 800a09c:	0800a0b1 	.word	0x0800a0b1
 800a0a0:	0800a0c9 	.word	0x0800a0c9
 800a0a4:	0800a0e3 	.word	0x0800a0e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a0ae:	e027      	b.n	800a100 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a0b0:	f107 030c 	add.w	r3, r7, #12
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7ff fef3 	bl	8009ea0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a0ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a0c6:	e01b      	b.n	800a100 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a0c8:	f107 030c 	add.w	r3, r7, #12
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7ff fee7 	bl	8009ea0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a0e0:	e00e      	b.n	800a100 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a0e2:	f107 030c 	add.w	r3, r7, #12
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7ff feda 	bl	8009ea0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800a0ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a0f8:	e002      	b.n	800a100 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800a0fa:	2304      	movs	r3, #4
 800a0fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800a100:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a104:	4618      	mov	r0, r3
 800a106:	3730      	adds	r7, #48	; 0x30
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	20000010 	.word	0x20000010

0800a110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a114:	2003      	movs	r0, #3
 800a116:	f7f9 ff49 	bl	8003fac <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800a11a:	2200      	movs	r2, #0
 800a11c:	2100      	movs	r1, #0
 800a11e:	f06f 000b 	mvn.w	r0, #11
 800a122:	f7f9 ff4e 	bl	8003fc2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800a126:	2200      	movs	r2, #0
 800a128:	2100      	movs	r1, #0
 800a12a:	f06f 000a 	mvn.w	r0, #10
 800a12e:	f7f9 ff48 	bl	8003fc2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800a132:	2200      	movs	r2, #0
 800a134:	2100      	movs	r1, #0
 800a136:	f06f 0009 	mvn.w	r0, #9
 800a13a:	f7f9 ff42 	bl	8003fc2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800a13e:	2200      	movs	r2, #0
 800a140:	2100      	movs	r1, #0
 800a142:	f06f 0004 	mvn.w	r0, #4
 800a146:	f7f9 ff3c 	bl	8003fc2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800a14a:	2200      	movs	r2, #0
 800a14c:	2100      	movs	r1, #0
 800a14e:	f06f 0003 	mvn.w	r0, #3
 800a152:	f7f9 ff36 	bl	8003fc2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a156:	2200      	movs	r2, #0
 800a158:	210f      	movs	r1, #15
 800a15a:	f06f 0001 	mvn.w	r0, #1
 800a15e:	f7f9 ff30 	bl	8003fc2 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800a162:	2200      	movs	r2, #0
 800a164:	210f      	movs	r1, #15
 800a166:	f04f 30ff 	mov.w	r0, #4294967295
 800a16a:	f7f9 ff2a 	bl	8003fc2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a16e:	bf00      	nop
 800a170:	bd80      	pop	{r7, pc}
	...

0800a174 <HAL_I2C_MspInit>:
  /* USER CODE END CAN1_MspDeInit 1 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b08a      	sub	sp, #40	; 0x28
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a37      	ldr	r2, [pc, #220]	; (800a260 <HAL_I2C_MspInit+0xec>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d11f      	bne.n	800a1c6 <HAL_I2C_MspInit+0x52>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SYS_SCL_Pin|SYS_SDA_Pin;
 800a186:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a18a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a18c:	2312      	movs	r3, #18
 800a18e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a190:	2301      	movs	r3, #1
 800a192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a194:	2303      	movs	r3, #3
 800a196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a198:	2304      	movs	r3, #4
 800a19a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a19c:	f107 0314 	add.w	r3, r7, #20
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	4830      	ldr	r0, [pc, #192]	; (800a264 <HAL_I2C_MspInit+0xf0>)
 800a1a4:	f7fa f910 	bl	80043c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	613b      	str	r3, [r7, #16]
 800a1ac:	4b2e      	ldr	r3, [pc, #184]	; (800a268 <HAL_I2C_MspInit+0xf4>)
 800a1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b0:	4a2d      	ldr	r2, [pc, #180]	; (800a268 <HAL_I2C_MspInit+0xf4>)
 800a1b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1b6:	6413      	str	r3, [r2, #64]	; 0x40
 800a1b8:	4b2b      	ldr	r3, [pc, #172]	; (800a268 <HAL_I2C_MspInit+0xf4>)
 800a1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1c0:	613b      	str	r3, [r7, #16]
 800a1c2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800a1c4:	e048      	b.n	800a258 <HAL_I2C_MspInit+0xe4>
  else if(hi2c->Instance==I2C2)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a28      	ldr	r2, [pc, #160]	; (800a26c <HAL_I2C_MspInit+0xf8>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d11f      	bne.n	800a210 <HAL_I2C_MspInit+0x9c>
    GPIO_InitStruct.Pin = SEN_SCL_Pin|SEN_SDA_Pin;
 800a1d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a1d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a1d6:	2312      	movs	r3, #18
 800a1d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a1e2:	2304      	movs	r3, #4
 800a1e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a1e6:	f107 0314 	add.w	r3, r7, #20
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	481d      	ldr	r0, [pc, #116]	; (800a264 <HAL_I2C_MspInit+0xf0>)
 800a1ee:	f7fa f8eb 	bl	80043c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	60fb      	str	r3, [r7, #12]
 800a1f6:	4b1c      	ldr	r3, [pc, #112]	; (800a268 <HAL_I2C_MspInit+0xf4>)
 800a1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fa:	4a1b      	ldr	r2, [pc, #108]	; (800a268 <HAL_I2C_MspInit+0xf4>)
 800a1fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a200:	6413      	str	r3, [r2, #64]	; 0x40
 800a202:	4b19      	ldr	r3, [pc, #100]	; (800a268 <HAL_I2C_MspInit+0xf4>)
 800a204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a20a:	60fb      	str	r3, [r7, #12]
 800a20c:	68fb      	ldr	r3, [r7, #12]
}
 800a20e:	e023      	b.n	800a258 <HAL_I2C_MspInit+0xe4>
  else if(hi2c->Instance==I2C3)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a16      	ldr	r2, [pc, #88]	; (800a270 <HAL_I2C_MspInit+0xfc>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d11e      	bne.n	800a258 <HAL_I2C_MspInit+0xe4>
    GPIO_InitStruct.Pin = PAY_SCL_Pin|PAY_SDA_Pin;
 800a21a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800a21e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a220:	2312      	movs	r3, #18
 800a222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a224:	2301      	movs	r3, #1
 800a226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a228:	2303      	movs	r3, #3
 800a22a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800a22c:	2304      	movs	r3, #4
 800a22e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a230:	f107 0314 	add.w	r3, r7, #20
 800a234:	4619      	mov	r1, r3
 800a236:	480f      	ldr	r0, [pc, #60]	; (800a274 <HAL_I2C_MspInit+0x100>)
 800a238:	f7fa f8c6 	bl	80043c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800a23c:	2300      	movs	r3, #0
 800a23e:	60bb      	str	r3, [r7, #8]
 800a240:	4b09      	ldr	r3, [pc, #36]	; (800a268 <HAL_I2C_MspInit+0xf4>)
 800a242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a244:	4a08      	ldr	r2, [pc, #32]	; (800a268 <HAL_I2C_MspInit+0xf4>)
 800a246:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a24a:	6413      	str	r3, [r2, #64]	; 0x40
 800a24c:	4b06      	ldr	r3, [pc, #24]	; (800a268 <HAL_I2C_MspInit+0xf4>)
 800a24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a250:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a254:	60bb      	str	r3, [r7, #8]
 800a256:	68bb      	ldr	r3, [r7, #8]
}
 800a258:	bf00      	nop
 800a25a:	3728      	adds	r7, #40	; 0x28
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	40005400 	.word	0x40005400
 800a264:	40020400 	.word	0x40020400
 800a268:	40023800 	.word	0x40023800
 800a26c:	40005800 	.word	0x40005800
 800a270:	40005c00 	.word	0x40005c00
 800a274:	40021c00 	.word	0x40021c00

0800a278 <HAL_SD_MspInit>:
  /* USER CODE END RTC_MspDeInit 1 */

}

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b088      	sub	sp, #32
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDIO)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a1e      	ldr	r2, [pc, #120]	; (800a300 <HAL_SD_MspInit+0x88>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d136      	bne.n	800a2f8 <HAL_SD_MspInit+0x80>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800a28a:	2300      	movs	r3, #0
 800a28c:	60bb      	str	r3, [r7, #8]
 800a28e:	4b1d      	ldr	r3, [pc, #116]	; (800a304 <HAL_SD_MspInit+0x8c>)
 800a290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a292:	4a1c      	ldr	r2, [pc, #112]	; (800a304 <HAL_SD_MspInit+0x8c>)
 800a294:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a298:	6453      	str	r3, [r2, #68]	; 0x44
 800a29a:	4b1a      	ldr	r3, [pc, #104]	; (800a304 <HAL_SD_MspInit+0x8c>)
 800a29c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a29e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2a2:	60bb      	str	r3, [r7, #8]
 800a2a4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800a2a6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800a2aa:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a2b8:	230c      	movs	r3, #12
 800a2ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a2bc:	f107 030c 	add.w	r3, r7, #12
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4811      	ldr	r0, [pc, #68]	; (800a308 <HAL_SD_MspInit+0x90>)
 800a2c4:	f7fa f880 	bl	80043c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a2c8:	2304      	movs	r3, #4
 800a2ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a2d8:	230c      	movs	r3, #12
 800a2da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a2dc:	f107 030c 	add.w	r3, r7, #12
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	480a      	ldr	r0, [pc, #40]	; (800a30c <HAL_SD_MspInit+0x94>)
 800a2e4:	f7fa f870 	bl	80043c8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SDIO_IRQn, USER_INT_PRIORITY, 0);
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	2106      	movs	r1, #6
 800a2ec:	2031      	movs	r0, #49	; 0x31
 800a2ee:	f7f9 fe68 	bl	8003fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800a2f2:	2031      	movs	r0, #49	; 0x31
 800a2f4:	f7f9 fe81 	bl	8003ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800a2f8:	bf00      	nop
 800a2fa:	3720      	adds	r7, #32
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	40012c00 	.word	0x40012c00
 800a304:	40023800 	.word	0x40023800
 800a308:	40020800 	.word	0x40020800
 800a30c:	40020c00 	.word	0x40020c00

0800a310 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a310:	b480      	push	{r7}
 800a312:	b085      	sub	sp, #20
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM5)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a0b      	ldr	r2, [pc, #44]	; (800a34c <HAL_TIM_Base_MspInit+0x3c>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d10d      	bne.n	800a33e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a322:	2300      	movs	r3, #0
 800a324:	60fb      	str	r3, [r7, #12]
 800a326:	4b0a      	ldr	r3, [pc, #40]	; (800a350 <HAL_TIM_Base_MspInit+0x40>)
 800a328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32a:	4a09      	ldr	r2, [pc, #36]	; (800a350 <HAL_TIM_Base_MspInit+0x40>)
 800a32c:	f043 0308 	orr.w	r3, r3, #8
 800a330:	6413      	str	r3, [r2, #64]	; 0x40
 800a332:	4b07      	ldr	r3, [pc, #28]	; (800a350 <HAL_TIM_Base_MspInit+0x40>)
 800a334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a336:	f003 0308 	and.w	r3, r3, #8
 800a33a:	60fb      	str	r3, [r7, #12]
 800a33c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800a33e:	bf00      	nop
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	40000c00 	.word	0x40000c00
 800a350:	40023800 	.word	0x40023800

0800a354 <HAL_UART_MspInit>:
  /* USER CODE END TIM5_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b08a      	sub	sp, #40	; 0x28
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a42      	ldr	r2, [pc, #264]	; (800a46c <HAL_UART_MspInit+0x118>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d126      	bne.n	800a3b4 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a366:	2300      	movs	r3, #0
 800a368:	613b      	str	r3, [r7, #16]
 800a36a:	4b41      	ldr	r3, [pc, #260]	; (800a470 <HAL_UART_MspInit+0x11c>)
 800a36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36e:	4a40      	ldr	r2, [pc, #256]	; (800a470 <HAL_UART_MspInit+0x11c>)
 800a370:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a374:	6413      	str	r3, [r2, #64]	; 0x40
 800a376:	4b3e      	ldr	r3, [pc, #248]	; (800a470 <HAL_UART_MspInit+0x11c>)
 800a378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a37e:	613b      	str	r3, [r7, #16]
 800a380:	693b      	ldr	r3, [r7, #16]
  
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a382:	2303      	movs	r3, #3
 800a384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a386:	2302      	movs	r3, #2
 800a388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a38a:	2301      	movs	r3, #1
 800a38c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a38e:	2303      	movs	r3, #3
 800a390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a392:	2308      	movs	r3, #8
 800a394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a396:	f107 0314 	add.w	r3, r7, #20
 800a39a:	4619      	mov	r1, r3
 800a39c:	4835      	ldr	r0, [pc, #212]	; (800a474 <HAL_UART_MspInit+0x120>)
 800a39e:	f7fa f813 	bl	80043c8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(UART4_IRQn, USER_INT_PRIORITY, 0);
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	2106      	movs	r1, #6
 800a3a6:	2034      	movs	r0, #52	; 0x34
 800a3a8:	f7f9 fe0b 	bl	8003fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800a3ac:	2034      	movs	r0, #52	; 0x34
 800a3ae:	f7f9 fe24 	bl	8003ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800a3b2:	e057      	b.n	800a464 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART1)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a2f      	ldr	r2, [pc, #188]	; (800a478 <HAL_UART_MspInit+0x124>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d127      	bne.n	800a40e <HAL_UART_MspInit+0xba>
    __HAL_RCC_USART1_CLK_ENABLE();
 800a3be:	2300      	movs	r3, #0
 800a3c0:	60fb      	str	r3, [r7, #12]
 800a3c2:	4b2b      	ldr	r3, [pc, #172]	; (800a470 <HAL_UART_MspInit+0x11c>)
 800a3c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3c6:	4a2a      	ldr	r2, [pc, #168]	; (800a470 <HAL_UART_MspInit+0x11c>)
 800a3c8:	f043 0310 	orr.w	r3, r3, #16
 800a3cc:	6453      	str	r3, [r2, #68]	; 0x44
 800a3ce:	4b28      	ldr	r3, [pc, #160]	; (800a470 <HAL_UART_MspInit+0x11c>)
 800a3d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3d2:	f003 0310 	and.w	r3, r3, #16
 800a3d6:	60fb      	str	r3, [r7, #12]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800a3da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a3de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a3ec:	2307      	movs	r3, #7
 800a3ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3f0:	f107 0314 	add.w	r3, r7, #20
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	481f      	ldr	r0, [pc, #124]	; (800a474 <HAL_UART_MspInit+0x120>)
 800a3f8:	f7f9 ffe6 	bl	80043c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, USER_INT_PRIORITY, 0);
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	2106      	movs	r1, #6
 800a400:	2025      	movs	r0, #37	; 0x25
 800a402:	f7f9 fdde 	bl	8003fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);    
 800a406:	2025      	movs	r0, #37	; 0x25
 800a408:	f7f9 fdf7 	bl	8003ffa <HAL_NVIC_EnableIRQ>
}
 800a40c:	e02a      	b.n	800a464 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART6)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a1a      	ldr	r2, [pc, #104]	; (800a47c <HAL_UART_MspInit+0x128>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d125      	bne.n	800a464 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART6_CLK_ENABLE();
 800a418:	2300      	movs	r3, #0
 800a41a:	60bb      	str	r3, [r7, #8]
 800a41c:	4b14      	ldr	r3, [pc, #80]	; (800a470 <HAL_UART_MspInit+0x11c>)
 800a41e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a420:	4a13      	ldr	r2, [pc, #76]	; (800a470 <HAL_UART_MspInit+0x11c>)
 800a422:	f043 0320 	orr.w	r3, r3, #32
 800a426:	6453      	str	r3, [r2, #68]	; 0x44
 800a428:	4b11      	ldr	r3, [pc, #68]	; (800a470 <HAL_UART_MspInit+0x11c>)
 800a42a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a42c:	f003 0320 	and.w	r3, r3, #32
 800a430:	60bb      	str	r3, [r7, #8]
 800a432:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PAY_TX_Pin|PAY_RX_Pin;
 800a434:	23c0      	movs	r3, #192	; 0xc0
 800a436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a438:	2302      	movs	r3, #2
 800a43a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a43c:	2301      	movs	r3, #1
 800a43e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a440:	2303      	movs	r3, #3
 800a442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a444:	2308      	movs	r3, #8
 800a446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a448:	f107 0314 	add.w	r3, r7, #20
 800a44c:	4619      	mov	r1, r3
 800a44e:	480c      	ldr	r0, [pc, #48]	; (800a480 <HAL_UART_MspInit+0x12c>)
 800a450:	f7f9 ffba 	bl	80043c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, USER_INT_PRIORITY, 0);
 800a454:	2200      	movs	r2, #0
 800a456:	2106      	movs	r1, #6
 800a458:	2047      	movs	r0, #71	; 0x47
 800a45a:	f7f9 fdb2 	bl	8003fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800a45e:	2047      	movs	r0, #71	; 0x47
 800a460:	f7f9 fdcb 	bl	8003ffa <HAL_NVIC_EnableIRQ>
}
 800a464:	bf00      	nop
 800a466:	3728      	adds	r7, #40	; 0x28
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	40004c00 	.word	0x40004c00
 800a470:	40023800 	.word	0x40023800
 800a474:	40020000 	.word	0x40020000
 800a478:	40011000 	.word	0x40011000
 800a47c:	40011400 	.word	0x40011400
 800a480:	40020800 	.word	0x40020800

0800a484 <HAL_WWDG_MspInit>:
  }

}

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 800a484:	b480      	push	{r7}
 800a486:	b085      	sub	sp, #20
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]

  if(hwwdg->Instance==WWDG)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a0b      	ldr	r2, [pc, #44]	; (800a4c0 <HAL_WWDG_MspInit+0x3c>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d10d      	bne.n	800a4b2 <HAL_WWDG_MspInit+0x2e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 800a496:	2300      	movs	r3, #0
 800a498:	60fb      	str	r3, [r7, #12]
 800a49a:	4b0a      	ldr	r3, [pc, #40]	; (800a4c4 <HAL_WWDG_MspInit+0x40>)
 800a49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49e:	4a09      	ldr	r2, [pc, #36]	; (800a4c4 <HAL_WWDG_MspInit+0x40>)
 800a4a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a4a4:	6413      	str	r3, [r2, #64]	; 0x40
 800a4a6:	4b07      	ldr	r3, [pc, #28]	; (800a4c4 <HAL_WWDG_MspInit+0x40>)
 800a4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4ae:	60fb      	str	r3, [r7, #12]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 800a4b2:	bf00      	nop
 800a4b4:	3714      	adds	r7, #20
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	40002c00 	.word	0x40002c00
 800a4c4:	40023800 	.word	0x40023800

0800a4c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b08c      	sub	sp, #48	; 0x30
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800a4d8:	2200      	movs	r2, #0
 800a4da:	6879      	ldr	r1, [r7, #4]
 800a4dc:	2019      	movs	r0, #25
 800a4de:	f7f9 fd70 	bl	8003fc2 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800a4e2:	2019      	movs	r0, #25
 800a4e4:	f7f9 fd89 	bl	8003ffa <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	60fb      	str	r3, [r7, #12]
 800a4ec:	4b1f      	ldr	r3, [pc, #124]	; (800a56c <HAL_InitTick+0xa4>)
 800a4ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4f0:	4a1e      	ldr	r2, [pc, #120]	; (800a56c <HAL_InitTick+0xa4>)
 800a4f2:	f043 0301 	orr.w	r3, r3, #1
 800a4f6:	6453      	str	r3, [r2, #68]	; 0x44
 800a4f8:	4b1c      	ldr	r3, [pc, #112]	; (800a56c <HAL_InitTick+0xa4>)
 800a4fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4fc:	f003 0301 	and.w	r3, r3, #1
 800a500:	60fb      	str	r3, [r7, #12]
 800a502:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a504:	f107 0210 	add.w	r2, r7, #16
 800a508:	f107 0314 	add.w	r3, r7, #20
 800a50c:	4611      	mov	r1, r2
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fb fc72 	bl	8005df8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800a514:	f7fb fc4e 	bl	8005db4 <HAL_RCC_GetPCLK2Freq>
 800a518:	4603      	mov	r3, r0
 800a51a:	005b      	lsls	r3, r3, #1
 800a51c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800a51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a520:	4a13      	ldr	r2, [pc, #76]	; (800a570 <HAL_InitTick+0xa8>)
 800a522:	fba2 2303 	umull	r2, r3, r2, r3
 800a526:	0c9b      	lsrs	r3, r3, #18
 800a528:	3b01      	subs	r3, #1
 800a52a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800a52c:	4b11      	ldr	r3, [pc, #68]	; (800a574 <HAL_InitTick+0xac>)
 800a52e:	4a12      	ldr	r2, [pc, #72]	; (800a578 <HAL_InitTick+0xb0>)
 800a530:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800a532:	4b10      	ldr	r3, [pc, #64]	; (800a574 <HAL_InitTick+0xac>)
 800a534:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a538:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800a53a:	4a0e      	ldr	r2, [pc, #56]	; (800a574 <HAL_InitTick+0xac>)
 800a53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800a540:	4b0c      	ldr	r3, [pc, #48]	; (800a574 <HAL_InitTick+0xac>)
 800a542:	2200      	movs	r2, #0
 800a544:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a546:	4b0b      	ldr	r3, [pc, #44]	; (800a574 <HAL_InitTick+0xac>)
 800a548:	2200      	movs	r2, #0
 800a54a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800a54c:	4809      	ldr	r0, [pc, #36]	; (800a574 <HAL_InitTick+0xac>)
 800a54e:	f7fd fa90 	bl	8007a72 <HAL_TIM_Base_Init>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d104      	bne.n	800a562 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800a558:	4806      	ldr	r0, [pc, #24]	; (800a574 <HAL_InitTick+0xac>)
 800a55a:	f7fd fab5 	bl	8007ac8 <HAL_TIM_Base_Start_IT>
 800a55e:	4603      	mov	r3, r0
 800a560:	e000      	b.n	800a564 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800a562:	2301      	movs	r3, #1
}
 800a564:	4618      	mov	r0, r3
 800a566:	3730      	adds	r7, #48	; 0x30
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	40023800 	.word	0x40023800
 800a570:	431bde83 	.word	0x431bde83
 800a574:	200007e0 	.word	0x200007e0
 800a578:	40010000 	.word	0x40010000

0800a57c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800a57c:	b480      	push	{r7}
 800a57e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a580:	bf00      	nop
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
	...

0800a58c <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  *((__IO uint32_t*)MAILBOX_ADDRESS) = MAILBOX_VAL_HARD;
 800a590:	4b03      	ldr	r3, [pc, #12]	; (800a5a0 <HardFault_Handler+0x14>)
 800a592:	4a04      	ldr	r2, [pc, #16]	; (800a5a4 <HardFault_Handler+0x18>)
 800a594:	601a      	str	r2, [r3, #0]
  MX_WWDG_Init();
 800a596:	f7ff fbcf 	bl	8009d38 <MX_WWDG_Init>
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	Error_Handler();
 800a59a:	f7f9 fb8f 	bl	8003cbc <Error_Handler>
 800a59e:	e7fc      	b.n	800a59a <HardFault_Handler+0xe>
 800a5a0:	40002854 	.word	0x40002854
 800a5a4:	0bad0bad 	.word	0x0bad0bad

0800a5a8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a5ac:	e7fe      	b.n	800a5ac <MemManage_Handler+0x4>

0800a5ae <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a5b2:	e7fe      	b.n	800a5b2 <BusFault_Handler+0x4>

0800a5b4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a5b8:	e7fe      	b.n	800a5b8 <UsageFault_Handler+0x4>

0800a5ba <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a5be:	bf00      	nop
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800a5cc:	f000 f9e8 	bl	800a9a0 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a5d0:	bf00      	nop
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <SDIO_IRQHandler>:

/**
* @brief This function handles SDIO global interrupt.
*/
void SDIO_IRQHandler(void)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800a5d8:	4802      	ldr	r0, [pc, #8]	; (800a5e4 <SDIO_IRQHandler+0x10>)
 800a5da:	f7fc f9fd 	bl	80069d8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800a5de:	bf00      	nop
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	2000039c 	.word	0x2000039c

0800a5e8 <USART1_IRQHandler>:

void  USART1_IRQHandler(void)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 800a5ec:	4802      	ldr	r0, [pc, #8]	; (800a5f8 <USART1_IRQHandler+0x10>)
 800a5ee:	f7fd fe55 	bl	800829c <HAL_UART_IRQHandler>
}
 800a5f2:	bf00      	nop
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	200006bc 	.word	0x200006bc

0800a5fc <UART4_IRQHandler>:
void  UART4_IRQHandler(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart4);
 800a600:	4802      	ldr	r0, [pc, #8]	; (800a60c <UART4_IRQHandler+0x10>)
 800a602:	f7fd fe4b 	bl	800829c <HAL_UART_IRQHandler>
}
 800a606:	bf00      	nop
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	2000067c 	.word	0x2000067c

0800a610 <USART6_IRQHandler>:
void  USART6_IRQHandler(void)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart6);
 800a614:	4802      	ldr	r0, [pc, #8]	; (800a620 <USART6_IRQHandler+0x10>)
 800a616:	f7fd fe41 	bl	800829c <HAL_UART_IRQHandler>
}
 800a61a:	bf00      	nop
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	200006fc 	.word	0x200006fc

0800a624 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a628:	4802      	ldr	r0, [pc, #8]	; (800a634 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800a62a:	f7fd fa68 	bl	8007afe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800a62e:	bf00      	nop
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	200007e0 	.word	0x200007e0

0800a638 <DMA2_Stream3_IRQHandler>:

/**
* @brief This function handles DMA2 stream3 global interrupt.
*/
void DMA2_Stream3_IRQHandler(void)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800a63c:	4802      	ldr	r0, [pc, #8]	; (800a648 <DMA2_Stream3_IRQHandler+0x10>)
 800a63e:	f7f9 fd35 	bl	80040ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800a642:	bf00      	nop
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	20000420 	.word	0x20000420

0800a64c <DMA2_Stream6_IRQHandler>:

/**
* @brief This function handles DMA2 stream6 global interrupt.
*/
void DMA2_Stream6_IRQHandler(void)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800a650:	4802      	ldr	r0, [pc, #8]	; (800a65c <DMA2_Stream6_IRQHandler+0x10>)
 800a652:	f7f9 fd2b 	bl	80040ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800a656:	bf00      	nop
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	20000480 	.word	0x20000480

0800a660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a660:	b480      	push	{r7}
 800a662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a664:	4b16      	ldr	r3, [pc, #88]	; (800a6c0 <SystemInit+0x60>)
 800a666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a66a:	4a15      	ldr	r2, [pc, #84]	; (800a6c0 <SystemInit+0x60>)
 800a66c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a674:	4b13      	ldr	r3, [pc, #76]	; (800a6c4 <SystemInit+0x64>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a12      	ldr	r2, [pc, #72]	; (800a6c4 <SystemInit+0x64>)
 800a67a:	f043 0301 	orr.w	r3, r3, #1
 800a67e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a680:	4b10      	ldr	r3, [pc, #64]	; (800a6c4 <SystemInit+0x64>)
 800a682:	2200      	movs	r2, #0
 800a684:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a686:	4b0f      	ldr	r3, [pc, #60]	; (800a6c4 <SystemInit+0x64>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a0e      	ldr	r2, [pc, #56]	; (800a6c4 <SystemInit+0x64>)
 800a68c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a694:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a696:	4b0b      	ldr	r3, [pc, #44]	; (800a6c4 <SystemInit+0x64>)
 800a698:	4a0b      	ldr	r2, [pc, #44]	; (800a6c8 <SystemInit+0x68>)
 800a69a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a69c:	4b09      	ldr	r3, [pc, #36]	; (800a6c4 <SystemInit+0x64>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a08      	ldr	r2, [pc, #32]	; (800a6c4 <SystemInit+0x64>)
 800a6a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a6a8:	4b06      	ldr	r3, [pc, #24]	; (800a6c4 <SystemInit+0x64>)
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a6ae:	4b04      	ldr	r3, [pc, #16]	; (800a6c0 <SystemInit+0x60>)
 800a6b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a6b4:	609a      	str	r2, [r3, #8]
#endif
}
 800a6b6:	bf00      	nop
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr
 800a6c0:	e000ed00 	.word	0xe000ed00
 800a6c4:	40023800 	.word	0x40023800
 800a6c8:	24003010 	.word	0x24003010

0800a6cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b087      	sub	sp, #28
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800a6e2:	4b1f      	ldr	r3, [pc, #124]	; (800a760 <FATFS_LinkDriverEx+0x94>)
 800a6e4:	7a5b      	ldrb	r3, [r3, #9]
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d831      	bhi.n	800a750 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a6ec:	4b1c      	ldr	r3, [pc, #112]	; (800a760 <FATFS_LinkDriverEx+0x94>)
 800a6ee:	7a5b      	ldrb	r3, [r3, #9]
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	4b1a      	ldr	r3, [pc, #104]	; (800a760 <FATFS_LinkDriverEx+0x94>)
 800a6f6:	2100      	movs	r1, #0
 800a6f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800a6fa:	4b19      	ldr	r3, [pc, #100]	; (800a760 <FATFS_LinkDriverEx+0x94>)
 800a6fc:	7a5b      	ldrb	r3, [r3, #9]
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	4a17      	ldr	r2, [pc, #92]	; (800a760 <FATFS_LinkDriverEx+0x94>)
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	4413      	add	r3, r2
 800a706:	68fa      	ldr	r2, [r7, #12]
 800a708:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800a70a:	4b15      	ldr	r3, [pc, #84]	; (800a760 <FATFS_LinkDriverEx+0x94>)
 800a70c:	7a5b      	ldrb	r3, [r3, #9]
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	461a      	mov	r2, r3
 800a712:	4b13      	ldr	r3, [pc, #76]	; (800a760 <FATFS_LinkDriverEx+0x94>)
 800a714:	4413      	add	r3, r2
 800a716:	79fa      	ldrb	r2, [r7, #7]
 800a718:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a71a:	4b11      	ldr	r3, [pc, #68]	; (800a760 <FATFS_LinkDriverEx+0x94>)
 800a71c:	7a5b      	ldrb	r3, [r3, #9]
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	1c5a      	adds	r2, r3, #1
 800a722:	b2d1      	uxtb	r1, r2
 800a724:	4a0e      	ldr	r2, [pc, #56]	; (800a760 <FATFS_LinkDriverEx+0x94>)
 800a726:	7251      	strb	r1, [r2, #9]
 800a728:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a72a:	7dbb      	ldrb	r3, [r7, #22]
 800a72c:	3330      	adds	r3, #48	; 0x30
 800a72e:	b2da      	uxtb	r2, r3
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	3301      	adds	r3, #1
 800a738:	223a      	movs	r2, #58	; 0x3a
 800a73a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	3302      	adds	r3, #2
 800a740:	222f      	movs	r2, #47	; 0x2f
 800a742:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	3303      	adds	r3, #3
 800a748:	2200      	movs	r2, #0
 800a74a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a74c:	2300      	movs	r3, #0
 800a74e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800a750:	7dfb      	ldrb	r3, [r7, #23]
}
 800a752:	4618      	mov	r0, r3
 800a754:	371c      	adds	r7, #28
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	20000820 	.word	0x20000820

0800a764 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a76e:	2200      	movs	r2, #0
 800a770:	6839      	ldr	r1, [r7, #0]
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff ffaa 	bl	800a6cc <FATFS_LinkDriverEx>
 800a778:	4603      	mov	r3, r0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3708      	adds	r7, #8
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a782:	b480      	push	{r7}
 800a784:	b085      	sub	sp, #20
 800a786:	af00      	add	r7, sp, #0
 800a788:	4603      	mov	r3, r0
 800a78a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a78c:	2300      	movs	r3, #0
 800a78e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a790:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a794:	2b84      	cmp	r3, #132	; 0x84
 800a796:	d005      	beq.n	800a7a4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a798:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	4413      	add	r3, r2
 800a7a0:	3303      	adds	r3, #3
 800a7a2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b083      	sub	sp, #12
 800a7b6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7b8:	f3ef 8305 	mrs	r3, IPSR
 800a7bc:	607b      	str	r3, [r7, #4]
  return(result);
 800a7be:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	bf14      	ite	ne
 800a7c4:	2301      	movne	r3, #1
 800a7c6:	2300      	moveq	r3, #0
 800a7c8:	b2db      	uxtb	r3, r3
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	370c      	adds	r7, #12
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr

0800a7d6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a7da:	f001 f937 	bl	800ba4c <vTaskStartScheduler>
  
  return osOK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a7e8:	f7ff ffe3 	bl	800a7b2 <inHandlerMode>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d003      	beq.n	800a7fa <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a7f2:	f001 fa33 	bl	800bc5c <xTaskGetTickCountFromISR>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	e002      	b.n	800a800 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a7fa:	f001 fa1f 	bl	800bc3c <xTaskGetTickCount>
 800a7fe:	4603      	mov	r3, r0
  }
}
 800a800:	4618      	mov	r0, r3
 800a802:	bd80      	pop	{r7, pc}

0800a804 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a804:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a806:	b087      	sub	sp, #28
 800a808:	af02      	add	r7, sp, #8
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	685c      	ldr	r4, [r3, #4]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a81a:	b29e      	uxth	r6, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a822:	4618      	mov	r0, r3
 800a824:	f7ff ffad 	bl	800a782 <makeFreeRtosPriority>
 800a828:	4602      	mov	r2, r0
 800a82a:	f107 030c 	add.w	r3, r7, #12
 800a82e:	9301      	str	r3, [sp, #4]
 800a830:	9200      	str	r2, [sp, #0]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	4632      	mov	r2, r6
 800a836:	4629      	mov	r1, r5
 800a838:	4620      	mov	r0, r4
 800a83a:	f000 ff9d 	bl	800b778 <xTaskCreate>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b01      	cmp	r3, #1
 800a842:	d001      	beq.n	800a848 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800a844:	2300      	movs	r3, #0
 800a846:	e000      	b.n	800a84a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800a848:	68fb      	ldr	r3, [r7, #12]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3714      	adds	r7, #20
 800a84e:	46bd      	mov	sp, r7
 800a850:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a852 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b084      	sub	sp, #16
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d001      	beq.n	800a868 <osDelay+0x16>
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	e000      	b.n	800a86a <osDelay+0x18>
 800a868:	2301      	movs	r3, #1
 800a86a:	4618      	mov	r0, r3
 800a86c:	f001 f8ba 	bl	800b9e4 <vTaskDelay>
  
  return osOK;
 800a870:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a872:	4618      	mov	r0, r3
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b082      	sub	sp, #8
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800a882:	2001      	movs	r0, #1
 800a884:	f000 fa37 	bl	800acf6 <xQueueCreateMutex>
 800a888:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3708      	adds	r7, #8
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
	...

0800a894 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a89e:	2300      	movs	r3, #0
 800a8a0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d101      	bne.n	800a8ac <osMutexWait+0x18>
    return osErrorParameter;
 800a8a8:	2380      	movs	r3, #128	; 0x80
 800a8aa:	e03c      	b.n	800a926 <osMutexWait+0x92>
  }
  
  ticks = 0;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b6:	d103      	bne.n	800a8c0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a8bc:	60fb      	str	r3, [r7, #12]
 800a8be:	e009      	b.n	800a8d4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d006      	beq.n	800a8d4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d101      	bne.n	800a8d4 <osMutexWait+0x40>
      ticks = 1;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a8d4:	f7ff ff6d 	bl	800a7b2 <inHandlerMode>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d017      	beq.n	800a90e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a8de:	f107 0308 	add.w	r3, r7, #8
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 fd58 	bl	800b39c <xQueueReceiveFromISR>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d001      	beq.n	800a8f6 <osMutexWait+0x62>
      return osErrorOS;
 800a8f2:	23ff      	movs	r3, #255	; 0xff
 800a8f4:	e017      	b.n	800a926 <osMutexWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d013      	beq.n	800a924 <osMutexWait+0x90>
 800a8fc:	4b0c      	ldr	r3, [pc, #48]	; (800a930 <osMutexWait+0x9c>)
 800a8fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	e00a      	b.n	800a924 <osMutexWait+0x90>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a90e:	2300      	movs	r3, #0
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	2100      	movs	r1, #0
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 fc2b 	bl	800b170 <xQueueGenericReceive>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d001      	beq.n	800a924 <osMutexWait+0x90>
    return osErrorOS;
 800a920:	23ff      	movs	r3, #255	; 0xff
 800a922:	e000      	b.n	800a926 <osMutexWait+0x92>
  }
  
  return osOK;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	e000ed04 	.word	0xe000ed04

0800a934 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a93c:	2300      	movs	r3, #0
 800a93e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a940:	2300      	movs	r3, #0
 800a942:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a944:	f7ff ff35 	bl	800a7b2 <inHandlerMode>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d016      	beq.n	800a97c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a94e:	f107 0308 	add.w	r3, r7, #8
 800a952:	4619      	mov	r1, r3
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 fb7d 	bl	800b054 <xQueueGiveFromISR>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d001      	beq.n	800a964 <osMutexRelease+0x30>
      return osErrorOS;
 800a960:	23ff      	movs	r3, #255	; 0xff
 800a962:	e017      	b.n	800a994 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d013      	beq.n	800a992 <osMutexRelease+0x5e>
 800a96a:	4b0c      	ldr	r3, [pc, #48]	; (800a99c <osMutexRelease+0x68>)
 800a96c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a970:	601a      	str	r2, [r3, #0]
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	e00a      	b.n	800a992 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a97c:	2300      	movs	r3, #0
 800a97e:	2200      	movs	r2, #0
 800a980:	2100      	movs	r1, #0
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f9d0 	bl	800ad28 <xQueueGenericSend>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d001      	beq.n	800a992 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a98e:	23ff      	movs	r3, #255	; 0xff
 800a990:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a992:	68fb      	ldr	r3, [r7, #12]
}
 800a994:	4618      	mov	r0, r3
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	e000ed04 	.word	0xe000ed04

0800a9a0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800a9a4:	f001 fc92 	bl	800c2cc <xTaskGetSchedulerState>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d001      	beq.n	800a9b2 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800a9ae:	f002 fa8b 	bl	800cec8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800a9b2:	bf00      	nop
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	b083      	sub	sp, #12
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 800a9c0:	2381      	movs	r3, #129	; 0x81
#endif
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	370c      	adds	r7, #12
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	b083      	sub	sp, #12
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f103 0208 	add.w	r2, r3, #8
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f103 0208 	add.w	r2, r3, #8
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f103 0208 	add.w	r2, r3, #8
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa02:	bf00      	nop
 800aa04:	370c      	adds	r7, #12
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr

0800aa0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa0e:	b480      	push	{r7}
 800aa10:	b083      	sub	sp, #12
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa1c:	bf00      	nop
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	68fa      	ldr	r2, [r7, #12]
 800aa3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	689a      	ldr	r2, [r3, #8]
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	683a      	ldr	r2, [r7, #0]
 800aa52:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	1c5a      	adds	r2, r3, #1
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	601a      	str	r2, [r3, #0]
}
 800aa64:	bf00      	nop
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa70:	b480      	push	{r7}
 800aa72:	b085      	sub	sp, #20
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa86:	d103      	bne.n	800aa90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	60fb      	str	r3, [r7, #12]
 800aa8e:	e00c      	b.n	800aaaa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	3308      	adds	r3, #8
 800aa94:	60fb      	str	r3, [r7, #12]
 800aa96:	e002      	b.n	800aa9e <vListInsert+0x2e>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	60fb      	str	r3, [r7, #12]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d2f6      	bcs.n	800aa98 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	685a      	ldr	r2, [r3, #4]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	1c5a      	adds	r2, r3, #1
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	601a      	str	r2, [r3, #0]
}
 800aad6:	bf00      	nop
 800aad8:	3714      	adds	r7, #20
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr

0800aae2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aae2:	b480      	push	{r7}
 800aae4:	b085      	sub	sp, #20
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	6892      	ldr	r2, [r2, #8]
 800aaf8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	689b      	ldr	r3, [r3, #8]
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	6852      	ldr	r2, [r2, #4]
 800ab02:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d103      	bne.n	800ab16 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	689a      	ldr	r2, [r3, #8]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	1e5a      	subs	r2, r3, #1
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3714      	adds	r7, #20
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr
	...

0800ab38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10a      	bne.n	800ab62 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800ab5e:	bf00      	nop
 800ab60:	e7fe      	b.n	800ab60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab62:	f002 f91f 	bl	800cda4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6e:	68f9      	ldr	r1, [r7, #12]
 800ab70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab72:	fb01 f303 	mul.w	r3, r1, r3
 800ab76:	441a      	add	r2, r3
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab92:	3b01      	subs	r3, #1
 800ab94:	68f9      	ldr	r1, [r7, #12]
 800ab96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab98:	fb01 f303 	mul.w	r3, r1, r3
 800ab9c:	441a      	add	r2, r3
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	22ff      	movs	r2, #255	; 0xff
 800aba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	22ff      	movs	r2, #255	; 0xff
 800abae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d114      	bne.n	800abe2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d01a      	beq.n	800abf6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	3310      	adds	r3, #16
 800abc4:	4618      	mov	r0, r3
 800abc6:	f001 f9c5 	bl	800bf54 <xTaskRemoveFromEventList>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d012      	beq.n	800abf6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800abd0:	4b0c      	ldr	r3, [pc, #48]	; (800ac04 <xQueueGenericReset+0xcc>)
 800abd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abd6:	601a      	str	r2, [r3, #0]
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	e009      	b.n	800abf6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	3310      	adds	r3, #16
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7ff fef1 	bl	800a9ce <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	3324      	adds	r3, #36	; 0x24
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7ff feec 	bl	800a9ce <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800abf6:	f002 f905 	bl	800ce04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800abfa:	2301      	movs	r3, #1
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3710      	adds	r7, #16
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}
 800ac04:	e000ed04 	.word	0xe000ed04

0800ac08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b08a      	sub	sp, #40	; 0x28
 800ac0c:	af02      	add	r7, sp, #8
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	4613      	mov	r3, r2
 800ac14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10a      	bne.n	800ac32 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ac1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	613b      	str	r3, [r7, #16]
}
 800ac2e:	bf00      	nop
 800ac30:	e7fe      	b.n	800ac30 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d102      	bne.n	800ac3e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	61fb      	str	r3, [r7, #28]
 800ac3c:	e004      	b.n	800ac48 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	fb02 f303 	mul.w	r3, r2, r3
 800ac46:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	3350      	adds	r3, #80	; 0x50
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f002 f9c3 	bl	800cfd8 <pvPortMalloc>
 800ac52:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00b      	beq.n	800ac72 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	3350      	adds	r3, #80	; 0x50
 800ac5e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac60:	79fa      	ldrb	r2, [r7, #7]
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	9300      	str	r3, [sp, #0]
 800ac66:	4613      	mov	r3, r2
 800ac68:	697a      	ldr	r2, [r7, #20]
 800ac6a:	68b9      	ldr	r1, [r7, #8]
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f000 f805 	bl	800ac7c <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800ac72:	69bb      	ldr	r3, [r7, #24]
	}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3720      	adds	r7, #32
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
 800ac88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d103      	bne.n	800ac98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	69ba      	ldr	r2, [r7, #24]
 800ac94:	601a      	str	r2, [r3, #0]
 800ac96:	e002      	b.n	800ac9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800acaa:	2101      	movs	r1, #1
 800acac:	69b8      	ldr	r0, [r7, #24]
 800acae:	f7ff ff43 	bl	800ab38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	78fa      	ldrb	r2, [r7, #3]
 800acb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800acba:	bf00      	nop
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b082      	sub	sp, #8
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00e      	beq.n	800acee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2200      	movs	r2, #0
 800acda:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ace2:	2300      	movs	r3, #0
 800ace4:	2200      	movs	r2, #0
 800ace6:	2100      	movs	r1, #0
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 f81d 	bl	800ad28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800acee:	bf00      	nop
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b086      	sub	sp, #24
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	4603      	mov	r3, r0
 800acfe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ad00:	2301      	movs	r3, #1
 800ad02:	617b      	str	r3, [r7, #20]
 800ad04:	2300      	movs	r3, #0
 800ad06:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ad08:	79fb      	ldrb	r3, [r7, #7]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	6939      	ldr	r1, [r7, #16]
 800ad0e:	6978      	ldr	r0, [r7, #20]
 800ad10:	f7ff ff7a 	bl	800ac08 <xQueueGenericCreate>
 800ad14:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f7ff ffd3 	bl	800acc2 <prvInitialiseMutex>

		return pxNewQueue;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
	}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3718      	adds	r7, #24
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
	...

0800ad28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b08e      	sub	sp, #56	; 0x38
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
 800ad34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad36:	2300      	movs	r3, #0
 800ad38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10a      	bne.n	800ad5a <xQueueGenericSend+0x32>
	__asm volatile
 800ad44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad48:	f383 8811 	msr	BASEPRI, r3
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	f3bf 8f4f 	dsb	sy
 800ad54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad56:	bf00      	nop
 800ad58:	e7fe      	b.n	800ad58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d103      	bne.n	800ad68 <xQueueGenericSend+0x40>
 800ad60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d101      	bne.n	800ad6c <xQueueGenericSend+0x44>
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e000      	b.n	800ad6e <xQueueGenericSend+0x46>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d10a      	bne.n	800ad88 <xQueueGenericSend+0x60>
	__asm volatile
 800ad72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad76:	f383 8811 	msr	BASEPRI, r3
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	f3bf 8f4f 	dsb	sy
 800ad82:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad84:	bf00      	nop
 800ad86:	e7fe      	b.n	800ad86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d103      	bne.n	800ad96 <xQueueGenericSend+0x6e>
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d101      	bne.n	800ad9a <xQueueGenericSend+0x72>
 800ad96:	2301      	movs	r3, #1
 800ad98:	e000      	b.n	800ad9c <xQueueGenericSend+0x74>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10a      	bne.n	800adb6 <xQueueGenericSend+0x8e>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	623b      	str	r3, [r7, #32]
}
 800adb2:	bf00      	nop
 800adb4:	e7fe      	b.n	800adb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adb6:	f001 fa89 	bl	800c2cc <xTaskGetSchedulerState>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d102      	bne.n	800adc6 <xQueueGenericSend+0x9e>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d101      	bne.n	800adca <xQueueGenericSend+0xa2>
 800adc6:	2301      	movs	r3, #1
 800adc8:	e000      	b.n	800adcc <xQueueGenericSend+0xa4>
 800adca:	2300      	movs	r3, #0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d10a      	bne.n	800ade6 <xQueueGenericSend+0xbe>
	__asm volatile
 800add0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add4:	f383 8811 	msr	BASEPRI, r3
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	61fb      	str	r3, [r7, #28]
}
 800ade2:	bf00      	nop
 800ade4:	e7fe      	b.n	800ade4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ade6:	f001 ffdd 	bl	800cda4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d302      	bcc.n	800adfc <xQueueGenericSend+0xd4>
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d129      	bne.n	800ae50 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800adfc:	683a      	ldr	r2, [r7, #0]
 800adfe:	68b9      	ldr	r1, [r7, #8]
 800ae00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae02:	f000 fb4b 	bl	800b49c <prvCopyDataToQueue>
 800ae06:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d010      	beq.n	800ae32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae12:	3324      	adds	r3, #36	; 0x24
 800ae14:	4618      	mov	r0, r3
 800ae16:	f001 f89d 	bl	800bf54 <xTaskRemoveFromEventList>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d013      	beq.n	800ae48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae20:	4b3f      	ldr	r3, [pc, #252]	; (800af20 <xQueueGenericSend+0x1f8>)
 800ae22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae26:	601a      	str	r2, [r3, #0]
 800ae28:	f3bf 8f4f 	dsb	sy
 800ae2c:	f3bf 8f6f 	isb	sy
 800ae30:	e00a      	b.n	800ae48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d007      	beq.n	800ae48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae38:	4b39      	ldr	r3, [pc, #228]	; (800af20 <xQueueGenericSend+0x1f8>)
 800ae3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae3e:	601a      	str	r2, [r3, #0]
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae48:	f001 ffdc 	bl	800ce04 <vPortExitCritical>
				return pdPASS;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e063      	b.n	800af18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d103      	bne.n	800ae5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae56:	f001 ffd5 	bl	800ce04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	e05c      	b.n	800af18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d106      	bne.n	800ae72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800ae64:	f107 0314 	add.w	r3, r7, #20
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f001 f8d5 	bl	800c018 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae72:	f001 ffc7 	bl	800ce04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae76:	f000 fe37 	bl	800bae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae7a:	f001 ff93 	bl	800cda4 <vPortEnterCritical>
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae84:	b25b      	sxtb	r3, r3
 800ae86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8a:	d103      	bne.n	800ae94 <xQueueGenericSend+0x16c>
 800ae8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae9a:	b25b      	sxtb	r3, r3
 800ae9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aea0:	d103      	bne.n	800aeaa <xQueueGenericSend+0x182>
 800aea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea4:	2200      	movs	r2, #0
 800aea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aeaa:	f001 ffab 	bl	800ce04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aeae:	1d3a      	adds	r2, r7, #4
 800aeb0:	f107 0314 	add.w	r3, r7, #20
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f001 f8d2 	bl	800c060 <xTaskCheckForTimeOut>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d124      	bne.n	800af0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aec4:	f000 fbe2 	bl	800b68c <prvIsQueueFull>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d018      	beq.n	800af00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed0:	3310      	adds	r3, #16
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	4611      	mov	r1, r2
 800aed6:	4618      	mov	r0, r3
 800aed8:	f000 ffec 	bl	800beb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aedc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aede:	f000 fb6d 	bl	800b5bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aee2:	f000 fe0f 	bl	800bb04 <xTaskResumeAll>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f47f af7c 	bne.w	800ade6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aeee:	4b0c      	ldr	r3, [pc, #48]	; (800af20 <xQueueGenericSend+0x1f8>)
 800aef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aef4:	601a      	str	r2, [r3, #0]
 800aef6:	f3bf 8f4f 	dsb	sy
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	e772      	b.n	800ade6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af02:	f000 fb5b 	bl	800b5bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af06:	f000 fdfd 	bl	800bb04 <xTaskResumeAll>
 800af0a:	e76c      	b.n	800ade6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af0e:	f000 fb55 	bl	800b5bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af12:	f000 fdf7 	bl	800bb04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af16:	2300      	movs	r3, #0
		}
	}
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3738      	adds	r7, #56	; 0x38
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	e000ed04 	.word	0xe000ed04

0800af24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b08e      	sub	sp, #56	; 0x38
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
 800af30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d10a      	bne.n	800af52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800af3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af40:	f383 8811 	msr	BASEPRI, r3
 800af44:	f3bf 8f6f 	isb	sy
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af4e:	bf00      	nop
 800af50:	e7fe      	b.n	800af50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d103      	bne.n	800af60 <xQueueGenericSendFromISR+0x3c>
 800af58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d101      	bne.n	800af64 <xQueueGenericSendFromISR+0x40>
 800af60:	2301      	movs	r3, #1
 800af62:	e000      	b.n	800af66 <xQueueGenericSendFromISR+0x42>
 800af64:	2300      	movs	r3, #0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10a      	bne.n	800af80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800af6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	623b      	str	r3, [r7, #32]
}
 800af7c:	bf00      	nop
 800af7e:	e7fe      	b.n	800af7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	2b02      	cmp	r3, #2
 800af84:	d103      	bne.n	800af8e <xQueueGenericSendFromISR+0x6a>
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d101      	bne.n	800af92 <xQueueGenericSendFromISR+0x6e>
 800af8e:	2301      	movs	r3, #1
 800af90:	e000      	b.n	800af94 <xQueueGenericSendFromISR+0x70>
 800af92:	2300      	movs	r3, #0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10a      	bne.n	800afae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800af98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	61fb      	str	r3, [r7, #28]
}
 800afaa:	bf00      	nop
 800afac:	e7fe      	b.n	800afac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afae:	f001 ffd3 	bl	800cf58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800afb2:	f3ef 8211 	mrs	r2, BASEPRI
 800afb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afba:	f383 8811 	msr	BASEPRI, r3
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	61ba      	str	r2, [r7, #24]
 800afc8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800afca:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d302      	bcc.n	800afe0 <xQueueGenericSendFromISR+0xbc>
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d12c      	bne.n	800b03a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800afe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afea:	683a      	ldr	r2, [r7, #0]
 800afec:	68b9      	ldr	r1, [r7, #8]
 800afee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aff0:	f000 fa54 	bl	800b49c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aff4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800aff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800affc:	d112      	bne.n	800b024 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800affe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b002:	2b00      	cmp	r3, #0
 800b004:	d016      	beq.n	800b034 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b008:	3324      	adds	r3, #36	; 0x24
 800b00a:	4618      	mov	r0, r3
 800b00c:	f000 ffa2 	bl	800bf54 <xTaskRemoveFromEventList>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00e      	beq.n	800b034 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00b      	beq.n	800b034 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	601a      	str	r2, [r3, #0]
 800b022:	e007      	b.n	800b034 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b024:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b028:	3301      	adds	r3, #1
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	b25a      	sxtb	r2, r3
 800b02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b034:	2301      	movs	r3, #1
 800b036:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b038:	e001      	b.n	800b03e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b03a:	2300      	movs	r3, #0
 800b03c:	637b      	str	r3, [r7, #52]	; 0x34
 800b03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b040:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
	);
}
 800b048:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b04a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3738      	adds	r7, #56	; 0x38
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b08e      	sub	sp, #56	; 0x38
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b064:	2b00      	cmp	r3, #0
 800b066:	d10a      	bne.n	800b07e <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06c:	f383 8811 	msr	BASEPRI, r3
 800b070:	f3bf 8f6f 	isb	sy
 800b074:	f3bf 8f4f 	dsb	sy
 800b078:	623b      	str	r3, [r7, #32]
}
 800b07a:	bf00      	nop
 800b07c:	e7fe      	b.n	800b07c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00a      	beq.n	800b09c <xQueueGiveFromISR+0x48>
	__asm volatile
 800b086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08a:	f383 8811 	msr	BASEPRI, r3
 800b08e:	f3bf 8f6f 	isb	sy
 800b092:	f3bf 8f4f 	dsb	sy
 800b096:	61fb      	str	r3, [r7, #28]
}
 800b098:	bf00      	nop
 800b09a:	e7fe      	b.n	800b09a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800b09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d103      	bne.n	800b0ac <xQueueGiveFromISR+0x58>
 800b0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d101      	bne.n	800b0b0 <xQueueGiveFromISR+0x5c>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e000      	b.n	800b0b2 <xQueueGiveFromISR+0x5e>
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d10a      	bne.n	800b0cc <xQueueGiveFromISR+0x78>
	__asm volatile
 800b0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ba:	f383 8811 	msr	BASEPRI, r3
 800b0be:	f3bf 8f6f 	isb	sy
 800b0c2:	f3bf 8f4f 	dsb	sy
 800b0c6:	61bb      	str	r3, [r7, #24]
}
 800b0c8:	bf00      	nop
 800b0ca:	e7fe      	b.n	800b0ca <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0cc:	f001 ff44 	bl	800cf58 <vPortValidateInterruptPriority>
	__asm volatile
 800b0d0:	f3ef 8211 	mrs	r2, BASEPRI
 800b0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d8:	f383 8811 	msr	BASEPRI, r3
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	617a      	str	r2, [r7, #20]
 800b0e6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b0e8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d22b      	bcs.n	800b154 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800b106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b108:	1c5a      	adds	r2, r3, #1
 800b10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b10e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b116:	d112      	bne.n	800b13e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d016      	beq.n	800b14e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b122:	3324      	adds	r3, #36	; 0x24
 800b124:	4618      	mov	r0, r3
 800b126:	f000 ff15 	bl	800bf54 <xTaskRemoveFromEventList>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00e      	beq.n	800b14e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00b      	beq.n	800b14e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	2201      	movs	r2, #1
 800b13a:	601a      	str	r2, [r3, #0]
 800b13c:	e007      	b.n	800b14e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b13e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b142:	3301      	adds	r3, #1
 800b144:	b2db      	uxtb	r3, r3
 800b146:	b25a      	sxtb	r2, r3
 800b148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b14e:	2301      	movs	r3, #1
 800b150:	637b      	str	r3, [r7, #52]	; 0x34
 800b152:	e001      	b.n	800b158 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b154:	2300      	movs	r3, #0
 800b156:	637b      	str	r3, [r7, #52]	; 0x34
 800b158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b15a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f383 8811 	msr	BASEPRI, r3
}
 800b162:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b166:	4618      	mov	r0, r3
 800b168:	3738      	adds	r7, #56	; 0x38
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
	...

0800b170 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b08e      	sub	sp, #56	; 0x38
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
 800b17c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b17e:	2300      	movs	r3, #0
 800b180:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d10a      	bne.n	800b1a2 <xQueueGenericReceive+0x32>
	__asm volatile
 800b18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b190:	f383 8811 	msr	BASEPRI, r3
 800b194:	f3bf 8f6f 	isb	sy
 800b198:	f3bf 8f4f 	dsb	sy
 800b19c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b19e:	bf00      	nop
 800b1a0:	e7fe      	b.n	800b1a0 <xQueueGenericReceive+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d103      	bne.n	800b1b0 <xQueueGenericReceive+0x40>
 800b1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d101      	bne.n	800b1b4 <xQueueGenericReceive+0x44>
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e000      	b.n	800b1b6 <xQueueGenericReceive+0x46>
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10a      	bne.n	800b1d0 <xQueueGenericReceive+0x60>
	__asm volatile
 800b1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1be:	f383 8811 	msr	BASEPRI, r3
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	f3bf 8f4f 	dsb	sy
 800b1ca:	623b      	str	r3, [r7, #32]
}
 800b1cc:	bf00      	nop
 800b1ce:	e7fe      	b.n	800b1ce <xQueueGenericReceive+0x5e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1d0:	f001 f87c 	bl	800c2cc <xTaskGetSchedulerState>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d102      	bne.n	800b1e0 <xQueueGenericReceive+0x70>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d101      	bne.n	800b1e4 <xQueueGenericReceive+0x74>
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e000      	b.n	800b1e6 <xQueueGenericReceive+0x76>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10a      	bne.n	800b200 <xQueueGenericReceive+0x90>
	__asm volatile
 800b1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ee:	f383 8811 	msr	BASEPRI, r3
 800b1f2:	f3bf 8f6f 	isb	sy
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	61fb      	str	r3, [r7, #28]
}
 800b1fc:	bf00      	nop
 800b1fe:	e7fe      	b.n	800b1fe <xQueueGenericReceive+0x8e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b200:	f001 fdd0 	bl	800cda4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b208:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d046      	beq.n	800b29e <xQueueGenericReceive+0x12e>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800b210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b216:	68b9      	ldr	r1, [r7, #8]
 800b218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b21a:	f000 f9a9 	bl	800b570 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d121      	bne.n	800b268 <xQueueGenericReceive+0xf8>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800b224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b226:	1e5a      	subs	r2, r3, #1
 800b228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22a:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d104      	bne.n	800b23e <xQueueGenericReceive+0xce>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800b234:	f001 f964 	bl	800c500 <pvTaskIncrementMutexHeldCount>
 800b238:	4602      	mov	r2, r0
 800b23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23c:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d027      	beq.n	800b296 <xQueueGenericReceive+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b248:	3310      	adds	r3, #16
 800b24a:	4618      	mov	r0, r3
 800b24c:	f000 fe82 	bl	800bf54 <xTaskRemoveFromEventList>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d01f      	beq.n	800b296 <xQueueGenericReceive+0x126>
						{
							queueYIELD_IF_USING_PREEMPTION();
 800b256:	4b50      	ldr	r3, [pc, #320]	; (800b398 <xQueueGenericReceive+0x228>)
 800b258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b25c:	601a      	str	r2, [r3, #0]
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	e016      	b.n	800b296 <xQueueGenericReceive+0x126>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800b268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b26c:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00f      	beq.n	800b296 <xQueueGenericReceive+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b278:	3324      	adds	r3, #36	; 0x24
 800b27a:	4618      	mov	r0, r3
 800b27c:	f000 fe6a 	bl	800bf54 <xTaskRemoveFromEventList>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d007      	beq.n	800b296 <xQueueGenericReceive+0x126>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800b286:	4b44      	ldr	r3, [pc, #272]	; (800b398 <xQueueGenericReceive+0x228>)
 800b288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b28c:	601a      	str	r2, [r3, #0]
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800b296:	f001 fdb5 	bl	800ce04 <vPortExitCritical>
				return pdPASS;
 800b29a:	2301      	movs	r3, #1
 800b29c:	e077      	b.n	800b38e <xQueueGenericReceive+0x21e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d103      	bne.n	800b2ac <xQueueGenericReceive+0x13c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b2a4:	f001 fdae 	bl	800ce04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	e070      	b.n	800b38e <xQueueGenericReceive+0x21e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d106      	bne.n	800b2c0 <xQueueGenericReceive+0x150>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800b2b2:	f107 0314 	add.w	r3, r7, #20
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f000 feae 	bl	800c018 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b2c0:	f001 fda0 	bl	800ce04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b2c4:	f000 fc10 	bl	800bae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b2c8:	f001 fd6c 	bl	800cda4 <vPortEnterCritical>
 800b2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2d2:	b25b      	sxtb	r3, r3
 800b2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d8:	d103      	bne.n	800b2e2 <xQueueGenericReceive+0x172>
 800b2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2e8:	b25b      	sxtb	r3, r3
 800b2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ee:	d103      	bne.n	800b2f8 <xQueueGenericReceive+0x188>
 800b2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2f8:	f001 fd84 	bl	800ce04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b2fc:	1d3a      	adds	r2, r7, #4
 800b2fe:	f107 0314 	add.w	r3, r7, #20
 800b302:	4611      	mov	r1, r2
 800b304:	4618      	mov	r0, r3
 800b306:	f000 feab 	bl	800c060 <xTaskCheckForTimeOut>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d131      	bne.n	800b374 <xQueueGenericReceive+0x204>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b312:	f000 f9a5 	bl	800b660 <prvIsQueueEmpty>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d025      	beq.n	800b368 <xQueueGenericReceive+0x1f8>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d108      	bne.n	800b336 <xQueueGenericReceive+0x1c6>
					{
						taskENTER_CRITICAL();
 800b324:	f001 fd3e 	bl	800cda4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800b328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	4618      	mov	r0, r3
 800b32e:	f000 ffeb 	bl	800c308 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800b332:	f001 fd67 	bl	800ce04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b338:	3324      	adds	r3, #36	; 0x24
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	4611      	mov	r1, r2
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 fdb8 	bl	800beb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b346:	f000 f939 	bl	800b5bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b34a:	f000 fbdb 	bl	800bb04 <xTaskResumeAll>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	f47f af55 	bne.w	800b200 <xQueueGenericReceive+0x90>
				{
					portYIELD_WITHIN_API();
 800b356:	4b10      	ldr	r3, [pc, #64]	; (800b398 <xQueueGenericReceive+0x228>)
 800b358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b35c:	601a      	str	r2, [r3, #0]
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	f3bf 8f6f 	isb	sy
 800b366:	e74b      	b.n	800b200 <xQueueGenericReceive+0x90>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b36a:	f000 f927 	bl	800b5bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b36e:	f000 fbc9 	bl	800bb04 <xTaskResumeAll>
 800b372:	e745      	b.n	800b200 <xQueueGenericReceive+0x90>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800b374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b376:	f000 f921 	bl	800b5bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b37a:	f000 fbc3 	bl	800bb04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b37e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b380:	f000 f96e 	bl	800b660 <prvIsQueueEmpty>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	f43f af3a 	beq.w	800b200 <xQueueGenericReceive+0x90>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b38c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3738      	adds	r7, #56	; 0x38
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	e000ed04 	.word	0xe000ed04

0800b39c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b08e      	sub	sp, #56	; 0x38
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d10a      	bne.n	800b3c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b6:	f383 8811 	msr	BASEPRI, r3
 800b3ba:	f3bf 8f6f 	isb	sy
 800b3be:	f3bf 8f4f 	dsb	sy
 800b3c2:	623b      	str	r3, [r7, #32]
}
 800b3c4:	bf00      	nop
 800b3c6:	e7fe      	b.n	800b3c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d103      	bne.n	800b3d6 <xQueueReceiveFromISR+0x3a>
 800b3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d101      	bne.n	800b3da <xQueueReceiveFromISR+0x3e>
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	e000      	b.n	800b3dc <xQueueReceiveFromISR+0x40>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d10a      	bne.n	800b3f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e4:	f383 8811 	msr	BASEPRI, r3
 800b3e8:	f3bf 8f6f 	isb	sy
 800b3ec:	f3bf 8f4f 	dsb	sy
 800b3f0:	61fb      	str	r3, [r7, #28]
}
 800b3f2:	bf00      	nop
 800b3f4:	e7fe      	b.n	800b3f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b3f6:	f001 fdaf 	bl	800cf58 <vPortValidateInterruptPriority>
	__asm volatile
 800b3fa:	f3ef 8211 	mrs	r2, BASEPRI
 800b3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b402:	f383 8811 	msr	BASEPRI, r3
 800b406:	f3bf 8f6f 	isb	sy
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	61ba      	str	r2, [r7, #24]
 800b410:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b412:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b414:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b41a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d02f      	beq.n	800b482 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b424:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b42c:	68b9      	ldr	r1, [r7, #8]
 800b42e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b430:	f000 f89e 	bl	800b570 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800b434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b436:	1e5a      	subs	r2, r3, #1
 800b438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b43c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b444:	d112      	bne.n	800b46c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d016      	beq.n	800b47c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b450:	3310      	adds	r3, #16
 800b452:	4618      	mov	r0, r3
 800b454:	f000 fd7e 	bl	800bf54 <xTaskRemoveFromEventList>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00e      	beq.n	800b47c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00b      	beq.n	800b47c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	601a      	str	r2, [r3, #0]
 800b46a:	e007      	b.n	800b47c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b46c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b470:	3301      	adds	r3, #1
 800b472:	b2db      	uxtb	r3, r3
 800b474:	b25a      	sxtb	r2, r3
 800b476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b47c:	2301      	movs	r3, #1
 800b47e:	637b      	str	r3, [r7, #52]	; 0x34
 800b480:	e001      	b.n	800b486 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b482:	2300      	movs	r3, #0
 800b484:	637b      	str	r3, [r7, #52]	; 0x34
 800b486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b488:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	f383 8811 	msr	BASEPRI, r3
}
 800b490:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b494:	4618      	mov	r0, r3
 800b496:	3738      	adds	r7, #56	; 0x38
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b086      	sub	sp, #24
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d10d      	bne.n	800b4d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d14d      	bne.n	800b55e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f000 ff94 	bl	800c3f4 <xTaskPriorityDisinherit>
 800b4cc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	605a      	str	r2, [r3, #4]
 800b4d4:	e043      	b.n	800b55e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d119      	bne.n	800b510 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6898      	ldr	r0, [r3, #8]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	68b9      	ldr	r1, [r7, #8]
 800b4e8:	f001 ffb4 	bl	800d454 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	689a      	ldr	r2, [r3, #8]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f4:	441a      	add	r2, r3
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	689a      	ldr	r2, [r3, #8]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	429a      	cmp	r2, r3
 800b504:	d32b      	bcc.n	800b55e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	609a      	str	r2, [r3, #8]
 800b50e:	e026      	b.n	800b55e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	68d8      	ldr	r0, [r3, #12]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b518:	461a      	mov	r2, r3
 800b51a:	68b9      	ldr	r1, [r7, #8]
 800b51c:	f001 ff9a 	bl	800d454 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	68da      	ldr	r2, [r3, #12]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b528:	425b      	negs	r3, r3
 800b52a:	441a      	add	r2, r3
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	68da      	ldr	r2, [r3, #12]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d207      	bcs.n	800b54c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	685a      	ldr	r2, [r3, #4]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b544:	425b      	negs	r3, r3
 800b546:	441a      	add	r2, r3
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d105      	bne.n	800b55e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	3b01      	subs	r3, #1
 800b55c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	1c5a      	adds	r2, r3, #1
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b566:	697b      	ldr	r3, [r7, #20]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3718      	adds	r7, #24
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d018      	beq.n	800b5b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	68da      	ldr	r2, [r3, #12]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b58a:	441a      	add	r2, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	68da      	ldr	r2, [r3, #12]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d303      	bcc.n	800b5a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	68d9      	ldr	r1, [r3, #12]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	6838      	ldr	r0, [r7, #0]
 800b5b0:	f001 ff50 	bl	800d454 <memcpy>
	}
}
 800b5b4:	bf00      	nop
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b5c4:	f001 fbee 	bl	800cda4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5d0:	e011      	b.n	800b5f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d012      	beq.n	800b600 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	3324      	adds	r3, #36	; 0x24
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f000 fcb8 	bl	800bf54 <xTaskRemoveFromEventList>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d001      	beq.n	800b5ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b5ea:	f000 fd99 	bl	800c120 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b5ee:	7bfb      	ldrb	r3, [r7, #15]
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	dce9      	bgt.n	800b5d2 <prvUnlockQueue+0x16>
 800b5fe:	e000      	b.n	800b602 <prvUnlockQueue+0x46>
					break;
 800b600:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	22ff      	movs	r2, #255	; 0xff
 800b606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b60a:	f001 fbfb 	bl	800ce04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b60e:	f001 fbc9 	bl	800cda4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b618:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b61a:	e011      	b.n	800b640 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	691b      	ldr	r3, [r3, #16]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d012      	beq.n	800b64a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	3310      	adds	r3, #16
 800b628:	4618      	mov	r0, r3
 800b62a:	f000 fc93 	bl	800bf54 <xTaskRemoveFromEventList>
 800b62e:	4603      	mov	r3, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d001      	beq.n	800b638 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b634:	f000 fd74 	bl	800c120 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b638:	7bbb      	ldrb	r3, [r7, #14]
 800b63a:	3b01      	subs	r3, #1
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b640:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b644:	2b00      	cmp	r3, #0
 800b646:	dce9      	bgt.n	800b61c <prvUnlockQueue+0x60>
 800b648:	e000      	b.n	800b64c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b64a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	22ff      	movs	r2, #255	; 0xff
 800b650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b654:	f001 fbd6 	bl	800ce04 <vPortExitCritical>
}
 800b658:	bf00      	nop
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b668:	f001 fb9c 	bl	800cda4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b670:	2b00      	cmp	r3, #0
 800b672:	d102      	bne.n	800b67a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b674:	2301      	movs	r3, #1
 800b676:	60fb      	str	r3, [r7, #12]
 800b678:	e001      	b.n	800b67e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b67a:	2300      	movs	r3, #0
 800b67c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b67e:	f001 fbc1 	bl	800ce04 <vPortExitCritical>

	return xReturn;
 800b682:	68fb      	ldr	r3, [r7, #12]
}
 800b684:	4618      	mov	r0, r3
 800b686:	3710      	adds	r7, #16
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b694:	f001 fb86 	bl	800cda4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d102      	bne.n	800b6aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	60fb      	str	r3, [r7, #12]
 800b6a8:	e001      	b.n	800b6ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b6ae:	f001 fba9 	bl	800ce04 <vPortExitCritical>

	return xReturn;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b6bc:	b480      	push	{r7}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	60fb      	str	r3, [r7, #12]
 800b6ca:	e014      	b.n	800b6f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b6cc:	4a0f      	ldr	r2, [pc, #60]	; (800b70c <vQueueAddToRegistry+0x50>)
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d10b      	bne.n	800b6f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b6d8:	490c      	ldr	r1, [pc, #48]	; (800b70c <vQueueAddToRegistry+0x50>)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	683a      	ldr	r2, [r7, #0]
 800b6de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b6e2:	4a0a      	ldr	r2, [pc, #40]	; (800b70c <vQueueAddToRegistry+0x50>)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	00db      	lsls	r3, r3, #3
 800b6e8:	4413      	add	r3, r2
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b6ee:	e006      	b.n	800b6fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	60fb      	str	r3, [r7, #12]
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2b07      	cmp	r3, #7
 800b6fa:	d9e7      	bls.n	800b6cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b6fc:	bf00      	nop
 800b6fe:	bf00      	nop
 800b700:	3714      	adds	r7, #20
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	2000082c 	.word	0x2000082c

0800b710 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b710:	b580      	push	{r7, lr}
 800b712:	b086      	sub	sp, #24
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b720:	f001 fb40 	bl	800cda4 <vPortEnterCritical>
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b72a:	b25b      	sxtb	r3, r3
 800b72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b730:	d103      	bne.n	800b73a <vQueueWaitForMessageRestricted+0x2a>
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	2200      	movs	r2, #0
 800b736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b740:	b25b      	sxtb	r3, r3
 800b742:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b746:	d103      	bne.n	800b750 <vQueueWaitForMessageRestricted+0x40>
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b750:	f001 fb58 	bl	800ce04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d106      	bne.n	800b76a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	3324      	adds	r3, #36	; 0x24
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	68b9      	ldr	r1, [r7, #8]
 800b764:	4618      	mov	r0, r3
 800b766:	f000 fbc9 	bl	800befc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b76a:	6978      	ldr	r0, [r7, #20]
 800b76c:	f7ff ff26 	bl	800b5bc <prvUnlockQueue>
	}
 800b770:	bf00      	nop
 800b772:	3718      	adds	r7, #24
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b08c      	sub	sp, #48	; 0x30
 800b77c:	af04      	add	r7, sp, #16
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	603b      	str	r3, [r7, #0]
 800b784:	4613      	mov	r3, r2
 800b786:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b788:	88fb      	ldrh	r3, [r7, #6]
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	4618      	mov	r0, r3
 800b78e:	f001 fc23 	bl	800cfd8 <pvPortMalloc>
 800b792:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00e      	beq.n	800b7b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b79a:	205c      	movs	r0, #92	; 0x5c
 800b79c:	f001 fc1c 	bl	800cfd8 <pvPortMalloc>
 800b7a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d003      	beq.n	800b7b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b7a8:	69fb      	ldr	r3, [r7, #28]
 800b7aa:	697a      	ldr	r2, [r7, #20]
 800b7ac:	631a      	str	r2, [r3, #48]	; 0x30
 800b7ae:	e005      	b.n	800b7bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b7b0:	6978      	ldr	r0, [r7, #20]
 800b7b2:	f001 fcd5 	bl	800d160 <vPortFree>
 800b7b6:	e001      	b.n	800b7bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d013      	beq.n	800b7ea <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b7c2:	88fa      	ldrh	r2, [r7, #6]
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	9303      	str	r3, [sp, #12]
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	9302      	str	r3, [sp, #8]
 800b7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ce:	9301      	str	r3, [sp, #4]
 800b7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d2:	9300      	str	r3, [sp, #0]
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	68b9      	ldr	r1, [r7, #8]
 800b7d8:	68f8      	ldr	r0, [r7, #12]
 800b7da:	f000 f80e 	bl	800b7fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b7de:	69f8      	ldr	r0, [r7, #28]
 800b7e0:	f000 f892 	bl	800b908 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	61bb      	str	r3, [r7, #24]
 800b7e8:	e002      	b.n	800b7f0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b7ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b7f0:	69bb      	ldr	r3, [r7, #24]
	}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3720      	adds	r7, #32
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b088      	sub	sp, #32
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	60f8      	str	r0, [r7, #12]
 800b802:	60b9      	str	r1, [r7, #8]
 800b804:	607a      	str	r2, [r7, #4]
 800b806:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	461a      	mov	r2, r3
 800b812:	21a5      	movs	r1, #165	; 0xa5
 800b814:	f001 fe2c 	bl	800d470 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b822:	3b01      	subs	r3, #1
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	4413      	add	r3, r2
 800b828:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	f023 0307 	bic.w	r3, r3, #7
 800b830:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	f003 0307 	and.w	r3, r3, #7
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00a      	beq.n	800b852 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	617b      	str	r3, [r7, #20]
}
 800b84e:	bf00      	nop
 800b850:	e7fe      	b.n	800b850 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b852:	2300      	movs	r3, #0
 800b854:	61fb      	str	r3, [r7, #28]
 800b856:	e012      	b.n	800b87e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	4413      	add	r3, r2
 800b85e:	7819      	ldrb	r1, [r3, #0]
 800b860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	4413      	add	r3, r2
 800b866:	3334      	adds	r3, #52	; 0x34
 800b868:	460a      	mov	r2, r1
 800b86a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b86c:	68ba      	ldr	r2, [r7, #8]
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	4413      	add	r3, r2
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d006      	beq.n	800b886 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	3301      	adds	r3, #1
 800b87c:	61fb      	str	r3, [r7, #28]
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	2b0f      	cmp	r3, #15
 800b882:	d9e9      	bls.n	800b858 <prvInitialiseNewTask+0x5e>
 800b884:	e000      	b.n	800b888 <prvInitialiseNewTask+0x8e>
		{
			break;
 800b886:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b892:	2b06      	cmp	r3, #6
 800b894:	d901      	bls.n	800b89a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b896:	2306      	movs	r3, #6
 800b898:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b89e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ae:	3304      	adds	r3, #4
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7ff f8ac 	bl	800aa0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b8:	3318      	adds	r3, #24
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7ff f8a7 	bl	800aa0e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c8:	f1c3 0207 	rsb	r2, r3, #7
 800b8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8d4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d8:	2200      	movs	r2, #0
 800b8da:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b8e4:	683a      	ldr	r2, [r7, #0]
 800b8e6:	68f9      	ldr	r1, [r7, #12]
 800b8e8:	69b8      	ldr	r0, [r7, #24]
 800b8ea:	f001 f955 	bl	800cb98 <pxPortInitialiseStack>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d002      	beq.n	800b900 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b900:	bf00      	nop
 800b902:	3720      	adds	r7, #32
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b910:	f001 fa48 	bl	800cda4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b914:	4b2c      	ldr	r3, [pc, #176]	; (800b9c8 <prvAddNewTaskToReadyList+0xc0>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	3301      	adds	r3, #1
 800b91a:	4a2b      	ldr	r2, [pc, #172]	; (800b9c8 <prvAddNewTaskToReadyList+0xc0>)
 800b91c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b91e:	4b2b      	ldr	r3, [pc, #172]	; (800b9cc <prvAddNewTaskToReadyList+0xc4>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d109      	bne.n	800b93a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b926:	4a29      	ldr	r2, [pc, #164]	; (800b9cc <prvAddNewTaskToReadyList+0xc4>)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b92c:	4b26      	ldr	r3, [pc, #152]	; (800b9c8 <prvAddNewTaskToReadyList+0xc0>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d110      	bne.n	800b956 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b934:	f000 fc18 	bl	800c168 <prvInitialiseTaskLists>
 800b938:	e00d      	b.n	800b956 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b93a:	4b25      	ldr	r3, [pc, #148]	; (800b9d0 <prvAddNewTaskToReadyList+0xc8>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d109      	bne.n	800b956 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b942:	4b22      	ldr	r3, [pc, #136]	; (800b9cc <prvAddNewTaskToReadyList+0xc4>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d802      	bhi.n	800b956 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b950:	4a1e      	ldr	r2, [pc, #120]	; (800b9cc <prvAddNewTaskToReadyList+0xc4>)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b956:	4b1f      	ldr	r3, [pc, #124]	; (800b9d4 <prvAddNewTaskToReadyList+0xcc>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	3301      	adds	r3, #1
 800b95c:	4a1d      	ldr	r2, [pc, #116]	; (800b9d4 <prvAddNewTaskToReadyList+0xcc>)
 800b95e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b960:	4b1c      	ldr	r3, [pc, #112]	; (800b9d4 <prvAddNewTaskToReadyList+0xcc>)
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96c:	2201      	movs	r2, #1
 800b96e:	409a      	lsls	r2, r3
 800b970:	4b19      	ldr	r3, [pc, #100]	; (800b9d8 <prvAddNewTaskToReadyList+0xd0>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4313      	orrs	r3, r2
 800b976:	4a18      	ldr	r2, [pc, #96]	; (800b9d8 <prvAddNewTaskToReadyList+0xd0>)
 800b978:	6013      	str	r3, [r2, #0]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97e:	4613      	mov	r3, r2
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4413      	add	r3, r2
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	4a15      	ldr	r2, [pc, #84]	; (800b9dc <prvAddNewTaskToReadyList+0xd4>)
 800b988:	441a      	add	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	3304      	adds	r3, #4
 800b98e:	4619      	mov	r1, r3
 800b990:	4610      	mov	r0, r2
 800b992:	f7ff f849 	bl	800aa28 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b996:	f001 fa35 	bl	800ce04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b99a:	4b0d      	ldr	r3, [pc, #52]	; (800b9d0 <prvAddNewTaskToReadyList+0xc8>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00e      	beq.n	800b9c0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b9a2:	4b0a      	ldr	r3, [pc, #40]	; (800b9cc <prvAddNewTaskToReadyList+0xc4>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d207      	bcs.n	800b9c0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b9b0:	4b0b      	ldr	r3, [pc, #44]	; (800b9e0 <prvAddNewTaskToReadyList+0xd8>)
 800b9b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9b6:	601a      	str	r2, [r3, #0]
 800b9b8:	f3bf 8f4f 	dsb	sy
 800b9bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9c0:	bf00      	nop
 800b9c2:	3708      	adds	r7, #8
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	2000096c 	.word	0x2000096c
 800b9cc:	2000086c 	.word	0x2000086c
 800b9d0:	20000978 	.word	0x20000978
 800b9d4:	20000988 	.word	0x20000988
 800b9d8:	20000974 	.word	0x20000974
 800b9dc:	20000870 	.word	0x20000870
 800b9e0:	e000ed04 	.word	0xe000ed04

0800b9e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d017      	beq.n	800ba26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b9f6:	4b13      	ldr	r3, [pc, #76]	; (800ba44 <vTaskDelay+0x60>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00a      	beq.n	800ba14 <vTaskDelay+0x30>
	__asm volatile
 800b9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba02:	f383 8811 	msr	BASEPRI, r3
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	60bb      	str	r3, [r7, #8]
}
 800ba10:	bf00      	nop
 800ba12:	e7fe      	b.n	800ba12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ba14:	f000 f868 	bl	800bae8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ba18:	2100      	movs	r1, #0
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 fd84 	bl	800c528 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ba20:	f000 f870 	bl	800bb04 <xTaskResumeAll>
 800ba24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d107      	bne.n	800ba3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ba2c:	4b06      	ldr	r3, [pc, #24]	; (800ba48 <vTaskDelay+0x64>)
 800ba2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba32:	601a      	str	r2, [r3, #0]
 800ba34:	f3bf 8f4f 	dsb	sy
 800ba38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba3c:	bf00      	nop
 800ba3e:	3710      	adds	r7, #16
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	20000994 	.word	0x20000994
 800ba48:	e000ed04 	.word	0xe000ed04

0800ba4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b086      	sub	sp, #24
 800ba50:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800ba52:	4b1f      	ldr	r3, [pc, #124]	; (800bad0 <vTaskStartScheduler+0x84>)
 800ba54:	9301      	str	r3, [sp, #4]
 800ba56:	2300      	movs	r3, #0
 800ba58:	9300      	str	r3, [sp, #0]
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba60:	491c      	ldr	r1, [pc, #112]	; (800bad4 <vTaskStartScheduler+0x88>)
 800ba62:	481d      	ldr	r0, [pc, #116]	; (800bad8 <vTaskStartScheduler+0x8c>)
 800ba64:	f7ff fe88 	bl	800b778 <xTaskCreate>
 800ba68:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d102      	bne.n	800ba76 <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 800ba70:	f000 fdc0 	bl	800c5f4 <xTimerCreateTimerTask>
 800ba74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d116      	bne.n	800baaa <vTaskStartScheduler+0x5e>
	__asm volatile
 800ba7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba80:	f383 8811 	msr	BASEPRI, r3
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	60bb      	str	r3, [r7, #8]
}
 800ba8e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ba90:	4b12      	ldr	r3, [pc, #72]	; (800badc <vTaskStartScheduler+0x90>)
 800ba92:	f04f 32ff 	mov.w	r2, #4294967295
 800ba96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ba98:	4b11      	ldr	r3, [pc, #68]	; (800bae0 <vTaskStartScheduler+0x94>)
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ba9e:	4b11      	ldr	r3, [pc, #68]	; (800bae4 <vTaskStartScheduler+0x98>)
 800baa0:	2200      	movs	r2, #0
 800baa2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800baa4:	f001 f8f0 	bl	800cc88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800baa8:	e00e      	b.n	800bac8 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab0:	d10a      	bne.n	800bac8 <vTaskStartScheduler+0x7c>
	__asm volatile
 800bab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab6:	f383 8811 	msr	BASEPRI, r3
 800baba:	f3bf 8f6f 	isb	sy
 800babe:	f3bf 8f4f 	dsb	sy
 800bac2:	607b      	str	r3, [r7, #4]
}
 800bac4:	bf00      	nop
 800bac6:	e7fe      	b.n	800bac6 <vTaskStartScheduler+0x7a>
}
 800bac8:	bf00      	nop
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	20000990 	.word	0x20000990
 800bad4:	080109f8 	.word	0x080109f8
 800bad8:	0800c139 	.word	0x0800c139
 800badc:	2000098c 	.word	0x2000098c
 800bae0:	20000978 	.word	0x20000978
 800bae4:	20000970 	.word	0x20000970

0800bae8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bae8:	b480      	push	{r7}
 800baea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800baec:	4b04      	ldr	r3, [pc, #16]	; (800bb00 <vTaskSuspendAll+0x18>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	3301      	adds	r3, #1
 800baf2:	4a03      	ldr	r2, [pc, #12]	; (800bb00 <vTaskSuspendAll+0x18>)
 800baf4:	6013      	str	r3, [r2, #0]
}
 800baf6:	bf00      	nop
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr
 800bb00:	20000994 	.word	0x20000994

0800bb04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bb12:	4b41      	ldr	r3, [pc, #260]	; (800bc18 <xTaskResumeAll+0x114>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d10a      	bne.n	800bb30 <xTaskResumeAll+0x2c>
	__asm volatile
 800bb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1e:	f383 8811 	msr	BASEPRI, r3
 800bb22:	f3bf 8f6f 	isb	sy
 800bb26:	f3bf 8f4f 	dsb	sy
 800bb2a:	603b      	str	r3, [r7, #0]
}
 800bb2c:	bf00      	nop
 800bb2e:	e7fe      	b.n	800bb2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bb30:	f001 f938 	bl	800cda4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bb34:	4b38      	ldr	r3, [pc, #224]	; (800bc18 <xTaskResumeAll+0x114>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	4a37      	ldr	r2, [pc, #220]	; (800bc18 <xTaskResumeAll+0x114>)
 800bb3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb3e:	4b36      	ldr	r3, [pc, #216]	; (800bc18 <xTaskResumeAll+0x114>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d161      	bne.n	800bc0a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bb46:	4b35      	ldr	r3, [pc, #212]	; (800bc1c <xTaskResumeAll+0x118>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d05d      	beq.n	800bc0a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb4e:	e02e      	b.n	800bbae <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800bb50:	4b33      	ldr	r3, [pc, #204]	; (800bc20 <xTaskResumeAll+0x11c>)
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	3318      	adds	r3, #24
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7fe ffc0 	bl	800aae2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	3304      	adds	r3, #4
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7fe ffbb 	bl	800aae2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb70:	2201      	movs	r2, #1
 800bb72:	409a      	lsls	r2, r3
 800bb74:	4b2b      	ldr	r3, [pc, #172]	; (800bc24 <xTaskResumeAll+0x120>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	4a2a      	ldr	r2, [pc, #168]	; (800bc24 <xTaskResumeAll+0x120>)
 800bb7c:	6013      	str	r3, [r2, #0]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb82:	4613      	mov	r3, r2
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	4413      	add	r3, r2
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	4a27      	ldr	r2, [pc, #156]	; (800bc28 <xTaskResumeAll+0x124>)
 800bb8c:	441a      	add	r2, r3
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	3304      	adds	r3, #4
 800bb92:	4619      	mov	r1, r3
 800bb94:	4610      	mov	r0, r2
 800bb96:	f7fe ff47 	bl	800aa28 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb9e:	4b23      	ldr	r3, [pc, #140]	; (800bc2c <xTaskResumeAll+0x128>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d302      	bcc.n	800bbae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bba8:	4b21      	ldr	r3, [pc, #132]	; (800bc30 <xTaskResumeAll+0x12c>)
 800bbaa:	2201      	movs	r2, #1
 800bbac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bbae:	4b1c      	ldr	r3, [pc, #112]	; (800bc20 <xTaskResumeAll+0x11c>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d1cc      	bne.n	800bb50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d001      	beq.n	800bbc0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bbbc:	f000 fb60 	bl	800c280 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bbc0:	4b1c      	ldr	r3, [pc, #112]	; (800bc34 <xTaskResumeAll+0x130>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d010      	beq.n	800bbee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bbcc:	f000 f858 	bl	800bc80 <xTaskIncrementTick>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d002      	beq.n	800bbdc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bbd6:	4b16      	ldr	r3, [pc, #88]	; (800bc30 <xTaskResumeAll+0x12c>)
 800bbd8:	2201      	movs	r2, #1
 800bbda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d1f1      	bne.n	800bbcc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800bbe8:	4b12      	ldr	r3, [pc, #72]	; (800bc34 <xTaskResumeAll+0x130>)
 800bbea:	2200      	movs	r2, #0
 800bbec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bbee:	4b10      	ldr	r3, [pc, #64]	; (800bc30 <xTaskResumeAll+0x12c>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d009      	beq.n	800bc0a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bbfa:	4b0f      	ldr	r3, [pc, #60]	; (800bc38 <xTaskResumeAll+0x134>)
 800bbfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc00:	601a      	str	r2, [r3, #0]
 800bc02:	f3bf 8f4f 	dsb	sy
 800bc06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc0a:	f001 f8fb 	bl	800ce04 <vPortExitCritical>

	return xAlreadyYielded;
 800bc0e:	68bb      	ldr	r3, [r7, #8]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	20000994 	.word	0x20000994
 800bc1c:	2000096c 	.word	0x2000096c
 800bc20:	2000092c 	.word	0x2000092c
 800bc24:	20000974 	.word	0x20000974
 800bc28:	20000870 	.word	0x20000870
 800bc2c:	2000086c 	.word	0x2000086c
 800bc30:	20000980 	.word	0x20000980
 800bc34:	2000097c 	.word	0x2000097c
 800bc38:	e000ed04 	.word	0xe000ed04

0800bc3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bc42:	4b05      	ldr	r3, [pc, #20]	; (800bc58 <xTaskGetTickCount+0x1c>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bc48:	687b      	ldr	r3, [r7, #4]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	370c      	adds	r7, #12
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	20000970 	.word	0x20000970

0800bc5c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc62:	f001 f979 	bl	800cf58 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bc66:	2300      	movs	r3, #0
 800bc68:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bc6a:	4b04      	ldr	r3, [pc, #16]	; (800bc7c <xTaskGetTickCountFromISR+0x20>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc70:	683b      	ldr	r3, [r7, #0]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3708      	adds	r7, #8
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	20000970 	.word	0x20000970

0800bc80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bc86:	2300      	movs	r3, #0
 800bc88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc8a:	4b51      	ldr	r3, [pc, #324]	; (800bdd0 <xTaskIncrementTick+0x150>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	f040 808d 	bne.w	800bdae <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 800bc94:	4b4f      	ldr	r3, [pc, #316]	; (800bdd4 <xTaskIncrementTick+0x154>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bc9c:	4a4d      	ldr	r2, [pc, #308]	; (800bdd4 <xTaskIncrementTick+0x154>)
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d120      	bne.n	800bcea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bca8:	4b4b      	ldr	r3, [pc, #300]	; (800bdd8 <xTaskIncrementTick+0x158>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d00a      	beq.n	800bcc8 <xTaskIncrementTick+0x48>
	__asm volatile
 800bcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb6:	f383 8811 	msr	BASEPRI, r3
 800bcba:	f3bf 8f6f 	isb	sy
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	603b      	str	r3, [r7, #0]
}
 800bcc4:	bf00      	nop
 800bcc6:	e7fe      	b.n	800bcc6 <xTaskIncrementTick+0x46>
 800bcc8:	4b43      	ldr	r3, [pc, #268]	; (800bdd8 <xTaskIncrementTick+0x158>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	60fb      	str	r3, [r7, #12]
 800bcce:	4b43      	ldr	r3, [pc, #268]	; (800bddc <xTaskIncrementTick+0x15c>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4a41      	ldr	r2, [pc, #260]	; (800bdd8 <xTaskIncrementTick+0x158>)
 800bcd4:	6013      	str	r3, [r2, #0]
 800bcd6:	4a41      	ldr	r2, [pc, #260]	; (800bddc <xTaskIncrementTick+0x15c>)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6013      	str	r3, [r2, #0]
 800bcdc:	4b40      	ldr	r3, [pc, #256]	; (800bde0 <xTaskIncrementTick+0x160>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	3301      	adds	r3, #1
 800bce2:	4a3f      	ldr	r2, [pc, #252]	; (800bde0 <xTaskIncrementTick+0x160>)
 800bce4:	6013      	str	r3, [r2, #0]
 800bce6:	f000 facb 	bl	800c280 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bcea:	4b3e      	ldr	r3, [pc, #248]	; (800bde4 <xTaskIncrementTick+0x164>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	693a      	ldr	r2, [r7, #16]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d34d      	bcc.n	800bd90 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcf4:	4b38      	ldr	r3, [pc, #224]	; (800bdd8 <xTaskIncrementTick+0x158>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d101      	bne.n	800bd02 <xTaskIncrementTick+0x82>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	e000      	b.n	800bd04 <xTaskIncrementTick+0x84>
 800bd02:	2300      	movs	r3, #0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d004      	beq.n	800bd12 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd08:	4b36      	ldr	r3, [pc, #216]	; (800bde4 <xTaskIncrementTick+0x164>)
 800bd0a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd0e:	601a      	str	r2, [r3, #0]
					break;
 800bd10:	e03e      	b.n	800bd90 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bd12:	4b31      	ldr	r3, [pc, #196]	; (800bdd8 <xTaskIncrementTick+0x158>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bd22:	693a      	ldr	r2, [r7, #16]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d203      	bcs.n	800bd32 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bd2a:	4a2e      	ldr	r2, [pc, #184]	; (800bde4 <xTaskIncrementTick+0x164>)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6013      	str	r3, [r2, #0]
						break;
 800bd30:	e02e      	b.n	800bd90 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	3304      	adds	r3, #4
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fe fed3 	bl	800aae2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d004      	beq.n	800bd4e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	3318      	adds	r3, #24
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7fe feca 	bl	800aae2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd52:	2201      	movs	r2, #1
 800bd54:	409a      	lsls	r2, r3
 800bd56:	4b24      	ldr	r3, [pc, #144]	; (800bde8 <xTaskIncrementTick+0x168>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	4a22      	ldr	r2, [pc, #136]	; (800bde8 <xTaskIncrementTick+0x168>)
 800bd5e:	6013      	str	r3, [r2, #0]
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd64:	4613      	mov	r3, r2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	4413      	add	r3, r2
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	4a1f      	ldr	r2, [pc, #124]	; (800bdec <xTaskIncrementTick+0x16c>)
 800bd6e:	441a      	add	r2, r3
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	3304      	adds	r3, #4
 800bd74:	4619      	mov	r1, r3
 800bd76:	4610      	mov	r0, r2
 800bd78:	f7fe fe56 	bl	800aa28 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd80:	4b1b      	ldr	r3, [pc, #108]	; (800bdf0 <xTaskIncrementTick+0x170>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d3b4      	bcc.n	800bcf4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd8e:	e7b1      	b.n	800bcf4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bd90:	4b17      	ldr	r3, [pc, #92]	; (800bdf0 <xTaskIncrementTick+0x170>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd96:	4915      	ldr	r1, [pc, #84]	; (800bdec <xTaskIncrementTick+0x16c>)
 800bd98:	4613      	mov	r3, r2
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	4413      	add	r3, r2
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	440b      	add	r3, r1
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d907      	bls.n	800bdb8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	617b      	str	r3, [r7, #20]
 800bdac:	e004      	b.n	800bdb8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bdae:	4b11      	ldr	r3, [pc, #68]	; (800bdf4 <xTaskIncrementTick+0x174>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	4a0f      	ldr	r2, [pc, #60]	; (800bdf4 <xTaskIncrementTick+0x174>)
 800bdb6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bdb8:	4b0f      	ldr	r3, [pc, #60]	; (800bdf8 <xTaskIncrementTick+0x178>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d001      	beq.n	800bdc4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bdc4:	697b      	ldr	r3, [r7, #20]
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3718      	adds	r7, #24
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	20000994 	.word	0x20000994
 800bdd4:	20000970 	.word	0x20000970
 800bdd8:	20000924 	.word	0x20000924
 800bddc:	20000928 	.word	0x20000928
 800bde0:	20000984 	.word	0x20000984
 800bde4:	2000098c 	.word	0x2000098c
 800bde8:	20000974 	.word	0x20000974
 800bdec:	20000870 	.word	0x20000870
 800bdf0:	2000086c 	.word	0x2000086c
 800bdf4:	2000097c 	.word	0x2000097c
 800bdf8:	20000980 	.word	0x20000980

0800bdfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b087      	sub	sp, #28
 800be00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800be02:	4b27      	ldr	r3, [pc, #156]	; (800bea0 <vTaskSwitchContext+0xa4>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d003      	beq.n	800be12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800be0a:	4b26      	ldr	r3, [pc, #152]	; (800bea4 <vTaskSwitchContext+0xa8>)
 800be0c:	2201      	movs	r2, #1
 800be0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800be10:	e03f      	b.n	800be92 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800be12:	4b24      	ldr	r3, [pc, #144]	; (800bea4 <vTaskSwitchContext+0xa8>)
 800be14:	2200      	movs	r2, #0
 800be16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800be18:	4b23      	ldr	r3, [pc, #140]	; (800bea8 <vTaskSwitchContext+0xac>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	fab3 f383 	clz	r3, r3
 800be24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800be26:	7afb      	ldrb	r3, [r7, #11]
 800be28:	f1c3 031f 	rsb	r3, r3, #31
 800be2c:	617b      	str	r3, [r7, #20]
 800be2e:	491f      	ldr	r1, [pc, #124]	; (800beac <vTaskSwitchContext+0xb0>)
 800be30:	697a      	ldr	r2, [r7, #20]
 800be32:	4613      	mov	r3, r2
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	4413      	add	r3, r2
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	440b      	add	r3, r1
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d10a      	bne.n	800be58 <vTaskSwitchContext+0x5c>
	__asm volatile
 800be42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be46:	f383 8811 	msr	BASEPRI, r3
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	607b      	str	r3, [r7, #4]
}
 800be54:	bf00      	nop
 800be56:	e7fe      	b.n	800be56 <vTaskSwitchContext+0x5a>
 800be58:	697a      	ldr	r2, [r7, #20]
 800be5a:	4613      	mov	r3, r2
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	4413      	add	r3, r2
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	4a12      	ldr	r2, [pc, #72]	; (800beac <vTaskSwitchContext+0xb0>)
 800be64:	4413      	add	r3, r2
 800be66:	613b      	str	r3, [r7, #16]
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	685a      	ldr	r2, [r3, #4]
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	605a      	str	r2, [r3, #4]
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	685a      	ldr	r2, [r3, #4]
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	3308      	adds	r3, #8
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d104      	bne.n	800be88 <vTaskSwitchContext+0x8c>
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	685a      	ldr	r2, [r3, #4]
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	605a      	str	r2, [r3, #4]
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	4a08      	ldr	r2, [pc, #32]	; (800beb0 <vTaskSwitchContext+0xb4>)
 800be90:	6013      	str	r3, [r2, #0]
}
 800be92:	bf00      	nop
 800be94:	371c      	adds	r7, #28
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	20000994 	.word	0x20000994
 800bea4:	20000980 	.word	0x20000980
 800bea8:	20000974 	.word	0x20000974
 800beac:	20000870 	.word	0x20000870
 800beb0:	2000086c 	.word	0x2000086c

0800beb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d10a      	bne.n	800beda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec8:	f383 8811 	msr	BASEPRI, r3
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	f3bf 8f4f 	dsb	sy
 800bed4:	60fb      	str	r3, [r7, #12]
}
 800bed6:	bf00      	nop
 800bed8:	e7fe      	b.n	800bed8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800beda:	4b07      	ldr	r3, [pc, #28]	; (800bef8 <vTaskPlaceOnEventList+0x44>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	3318      	adds	r3, #24
 800bee0:	4619      	mov	r1, r3
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f7fe fdc4 	bl	800aa70 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bee8:	2101      	movs	r1, #1
 800beea:	6838      	ldr	r0, [r7, #0]
 800beec:	f000 fb1c 	bl	800c528 <prvAddCurrentTaskToDelayedList>
}
 800bef0:	bf00      	nop
 800bef2:	3710      	adds	r7, #16
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	2000086c 	.word	0x2000086c

0800befc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800befc:	b580      	push	{r7, lr}
 800befe:	b086      	sub	sp, #24
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d10a      	bne.n	800bf24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bf0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf12:	f383 8811 	msr	BASEPRI, r3
 800bf16:	f3bf 8f6f 	isb	sy
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	617b      	str	r3, [r7, #20]
}
 800bf20:	bf00      	nop
 800bf22:	e7fe      	b.n	800bf22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf24:	4b0a      	ldr	r3, [pc, #40]	; (800bf50 <vTaskPlaceOnEventListRestricted+0x54>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	3318      	adds	r3, #24
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	68f8      	ldr	r0, [r7, #12]
 800bf2e:	f7fe fd7b 	bl	800aa28 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d002      	beq.n	800bf3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bf38:	f04f 33ff 	mov.w	r3, #4294967295
 800bf3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bf3e:	6879      	ldr	r1, [r7, #4]
 800bf40:	68b8      	ldr	r0, [r7, #8]
 800bf42:	f000 faf1 	bl	800c528 <prvAddCurrentTaskToDelayedList>
	}
 800bf46:	bf00      	nop
 800bf48:	3718      	adds	r7, #24
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	2000086c 	.word	0x2000086c

0800bf54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b086      	sub	sp, #24
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d10a      	bne.n	800bf80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6e:	f383 8811 	msr	BASEPRI, r3
 800bf72:	f3bf 8f6f 	isb	sy
 800bf76:	f3bf 8f4f 	dsb	sy
 800bf7a:	60fb      	str	r3, [r7, #12]
}
 800bf7c:	bf00      	nop
 800bf7e:	e7fe      	b.n	800bf7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	3318      	adds	r3, #24
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7fe fdac 	bl	800aae2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf8a:	4b1d      	ldr	r3, [pc, #116]	; (800c000 <xTaskRemoveFromEventList+0xac>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d11c      	bne.n	800bfcc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	3304      	adds	r3, #4
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7fe fda3 	bl	800aae2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	409a      	lsls	r2, r3
 800bfa4:	4b17      	ldr	r3, [pc, #92]	; (800c004 <xTaskRemoveFromEventList+0xb0>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	4a16      	ldr	r2, [pc, #88]	; (800c004 <xTaskRemoveFromEventList+0xb0>)
 800bfac:	6013      	str	r3, [r2, #0]
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb2:	4613      	mov	r3, r2
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	4413      	add	r3, r2
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	4a13      	ldr	r2, [pc, #76]	; (800c008 <xTaskRemoveFromEventList+0xb4>)
 800bfbc:	441a      	add	r2, r3
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	3304      	adds	r3, #4
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	4610      	mov	r0, r2
 800bfc6:	f7fe fd2f 	bl	800aa28 <vListInsertEnd>
 800bfca:	e005      	b.n	800bfd8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	3318      	adds	r3, #24
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	480e      	ldr	r0, [pc, #56]	; (800c00c <xTaskRemoveFromEventList+0xb8>)
 800bfd4:	f7fe fd28 	bl	800aa28 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfdc:	4b0c      	ldr	r3, [pc, #48]	; (800c010 <xTaskRemoveFromEventList+0xbc>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d905      	bls.n	800bff2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bfea:	4b0a      	ldr	r3, [pc, #40]	; (800c014 <xTaskRemoveFromEventList+0xc0>)
 800bfec:	2201      	movs	r2, #1
 800bfee:	601a      	str	r2, [r3, #0]
 800bff0:	e001      	b.n	800bff6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bff2:	2300      	movs	r3, #0
 800bff4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800bff6:	697b      	ldr	r3, [r7, #20]
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3718      	adds	r7, #24
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	20000994 	.word	0x20000994
 800c004:	20000974 	.word	0x20000974
 800c008:	20000870 	.word	0x20000870
 800c00c:	2000092c 	.word	0x2000092c
 800c010:	2000086c 	.word	0x2000086c
 800c014:	20000980 	.word	0x20000980

0800c018 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c018:	b480      	push	{r7}
 800c01a:	b085      	sub	sp, #20
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d10a      	bne.n	800c03c <vTaskSetTimeOutState+0x24>
	__asm volatile
 800c026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02a:	f383 8811 	msr	BASEPRI, r3
 800c02e:	f3bf 8f6f 	isb	sy
 800c032:	f3bf 8f4f 	dsb	sy
 800c036:	60fb      	str	r3, [r7, #12]
}
 800c038:	bf00      	nop
 800c03a:	e7fe      	b.n	800c03a <vTaskSetTimeOutState+0x22>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c03c:	4b06      	ldr	r3, [pc, #24]	; (800c058 <vTaskSetTimeOutState+0x40>)
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c044:	4b05      	ldr	r3, [pc, #20]	; (800c05c <vTaskSetTimeOutState+0x44>)
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	605a      	str	r2, [r3, #4]
}
 800c04c:	bf00      	nop
 800c04e:	3714      	adds	r7, #20
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr
 800c058:	20000984 	.word	0x20000984
 800c05c:	20000970 	.word	0x20000970

0800c060 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d10a      	bne.n	800c086 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c074:	f383 8811 	msr	BASEPRI, r3
 800c078:	f3bf 8f6f 	isb	sy
 800c07c:	f3bf 8f4f 	dsb	sy
 800c080:	60fb      	str	r3, [r7, #12]
}
 800c082:	bf00      	nop
 800c084:	e7fe      	b.n	800c084 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d10a      	bne.n	800c0a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c090:	f383 8811 	msr	BASEPRI, r3
 800c094:	f3bf 8f6f 	isb	sy
 800c098:	f3bf 8f4f 	dsb	sy
 800c09c:	60bb      	str	r3, [r7, #8]
}
 800c09e:	bf00      	nop
 800c0a0:	e7fe      	b.n	800c0a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c0a2:	f000 fe7f 	bl	800cda4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c0a6:	4b1c      	ldr	r3, [pc, #112]	; (800c118 <xTaskCheckForTimeOut+0xb8>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b4:	d102      	bne.n	800c0bc <xTaskCheckForTimeOut+0x5c>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	617b      	str	r3, [r7, #20]
 800c0ba:	e026      	b.n	800c10a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	4b16      	ldr	r3, [pc, #88]	; (800c11c <xTaskCheckForTimeOut+0xbc>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d007      	beq.n	800c0d8 <xTaskCheckForTimeOut+0x78>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	693a      	ldr	r2, [r7, #16]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d302      	bcc.n	800c0d8 <xTaskCheckForTimeOut+0x78>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	617b      	str	r3, [r7, #20]
 800c0d6:	e018      	b.n	800c10a <xTaskCheckForTimeOut+0xaa>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	693a      	ldr	r2, [r7, #16]
 800c0de:	1ad2      	subs	r2, r2, r3
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d20e      	bcs.n	800c106 <xTaskCheckForTimeOut+0xa6>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	681a      	ldr	r2, [r3, #0]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6859      	ldr	r1, [r3, #4]
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	1acb      	subs	r3, r1, r3
 800c0f4:	441a      	add	r2, r3
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f7ff ff8c 	bl	800c018 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800c100:	2300      	movs	r3, #0
 800c102:	617b      	str	r3, [r7, #20]
 800c104:	e001      	b.n	800c10a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			xReturn = pdTRUE;
 800c106:	2301      	movs	r3, #1
 800c108:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800c10a:	f000 fe7b 	bl	800ce04 <vPortExitCritical>

	return xReturn;
 800c10e:	697b      	ldr	r3, [r7, #20]
}
 800c110:	4618      	mov	r0, r3
 800c112:	3718      	adds	r7, #24
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	20000970 	.word	0x20000970
 800c11c:	20000984 	.word	0x20000984

0800c120 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c120:	b480      	push	{r7}
 800c122:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c124:	4b03      	ldr	r3, [pc, #12]	; (800c134 <vTaskMissedYield+0x14>)
 800c126:	2201      	movs	r2, #1
 800c128:	601a      	str	r2, [r3, #0]
}
 800c12a:	bf00      	nop
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr
 800c134:	20000980 	.word	0x20000980

0800c138 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c140:	f000 f852 	bl	800c1e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c144:	4b06      	ldr	r3, [pc, #24]	; (800c160 <prvIdleTask+0x28>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d9f9      	bls.n	800c140 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c14c:	4b05      	ldr	r3, [pc, #20]	; (800c164 <prvIdleTask+0x2c>)
 800c14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c152:	601a      	str	r2, [r3, #0]
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c15c:	e7f0      	b.n	800c140 <prvIdleTask+0x8>
 800c15e:	bf00      	nop
 800c160:	20000870 	.word	0x20000870
 800c164:	e000ed04 	.word	0xe000ed04

0800c168 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c16e:	2300      	movs	r3, #0
 800c170:	607b      	str	r3, [r7, #4]
 800c172:	e00c      	b.n	800c18e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	4613      	mov	r3, r2
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	4413      	add	r3, r2
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	4a12      	ldr	r2, [pc, #72]	; (800c1c8 <prvInitialiseTaskLists+0x60>)
 800c180:	4413      	add	r3, r2
 800c182:	4618      	mov	r0, r3
 800c184:	f7fe fc23 	bl	800a9ce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	3301      	adds	r3, #1
 800c18c:	607b      	str	r3, [r7, #4]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2b06      	cmp	r3, #6
 800c192:	d9ef      	bls.n	800c174 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c194:	480d      	ldr	r0, [pc, #52]	; (800c1cc <prvInitialiseTaskLists+0x64>)
 800c196:	f7fe fc1a 	bl	800a9ce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c19a:	480d      	ldr	r0, [pc, #52]	; (800c1d0 <prvInitialiseTaskLists+0x68>)
 800c19c:	f7fe fc17 	bl	800a9ce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c1a0:	480c      	ldr	r0, [pc, #48]	; (800c1d4 <prvInitialiseTaskLists+0x6c>)
 800c1a2:	f7fe fc14 	bl	800a9ce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c1a6:	480c      	ldr	r0, [pc, #48]	; (800c1d8 <prvInitialiseTaskLists+0x70>)
 800c1a8:	f7fe fc11 	bl	800a9ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c1ac:	480b      	ldr	r0, [pc, #44]	; (800c1dc <prvInitialiseTaskLists+0x74>)
 800c1ae:	f7fe fc0e 	bl	800a9ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c1b2:	4b0b      	ldr	r3, [pc, #44]	; (800c1e0 <prvInitialiseTaskLists+0x78>)
 800c1b4:	4a05      	ldr	r2, [pc, #20]	; (800c1cc <prvInitialiseTaskLists+0x64>)
 800c1b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c1b8:	4b0a      	ldr	r3, [pc, #40]	; (800c1e4 <prvInitialiseTaskLists+0x7c>)
 800c1ba:	4a05      	ldr	r2, [pc, #20]	; (800c1d0 <prvInitialiseTaskLists+0x68>)
 800c1bc:	601a      	str	r2, [r3, #0]
}
 800c1be:	bf00      	nop
 800c1c0:	3708      	adds	r7, #8
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	20000870 	.word	0x20000870
 800c1cc:	200008fc 	.word	0x200008fc
 800c1d0:	20000910 	.word	0x20000910
 800c1d4:	2000092c 	.word	0x2000092c
 800c1d8:	20000940 	.word	0x20000940
 800c1dc:	20000958 	.word	0x20000958
 800c1e0:	20000924 	.word	0x20000924
 800c1e4:	20000928 	.word	0x20000928

0800c1e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1ee:	e028      	b.n	800c242 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800c1f0:	f7ff fc7a 	bl	800bae8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800c1f4:	4b17      	ldr	r3, [pc, #92]	; (800c254 <prvCheckTasksWaitingTermination+0x6c>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	bf0c      	ite	eq
 800c1fc:	2301      	moveq	r3, #1
 800c1fe:	2300      	movne	r3, #0
 800c200:	b2db      	uxtb	r3, r3
 800c202:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800c204:	f7ff fc7e 	bl	800bb04 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d119      	bne.n	800c242 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800c20e:	f000 fdc9 	bl	800cda4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c212:	4b10      	ldr	r3, [pc, #64]	; (800c254 <prvCheckTasksWaitingTermination+0x6c>)
 800c214:	68db      	ldr	r3, [r3, #12]
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	3304      	adds	r3, #4
 800c21e:	4618      	mov	r0, r3
 800c220:	f7fe fc5f 	bl	800aae2 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800c224:	4b0c      	ldr	r3, [pc, #48]	; (800c258 <prvCheckTasksWaitingTermination+0x70>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	3b01      	subs	r3, #1
 800c22a:	4a0b      	ldr	r2, [pc, #44]	; (800c258 <prvCheckTasksWaitingTermination+0x70>)
 800c22c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800c22e:	4b0b      	ldr	r3, [pc, #44]	; (800c25c <prvCheckTasksWaitingTermination+0x74>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	3b01      	subs	r3, #1
 800c234:	4a09      	ldr	r2, [pc, #36]	; (800c25c <prvCheckTasksWaitingTermination+0x74>)
 800c236:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800c238:	f000 fde4 	bl	800ce04 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800c23c:	6838      	ldr	r0, [r7, #0]
 800c23e:	f000 f80f 	bl	800c260 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c242:	4b06      	ldr	r3, [pc, #24]	; (800c25c <prvCheckTasksWaitingTermination+0x74>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1d2      	bne.n	800c1f0 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c24a:	bf00      	nop
 800c24c:	bf00      	nop
 800c24e:	3708      	adds	r7, #8
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}
 800c254:	20000940 	.word	0x20000940
 800c258:	2000096c 	.word	0x2000096c
 800c25c:	20000954 	.word	0x20000954

0800c260 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c26c:	4618      	mov	r0, r3
 800c26e:	f000 ff77 	bl	800d160 <vPortFree>
			vPortFree( pxTCB );
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 ff74 	bl	800d160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c278:	bf00      	nop
 800c27a:	3708      	adds	r7, #8
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c286:	4b0f      	ldr	r3, [pc, #60]	; (800c2c4 <prvResetNextTaskUnblockTime+0x44>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d101      	bne.n	800c294 <prvResetNextTaskUnblockTime+0x14>
 800c290:	2301      	movs	r3, #1
 800c292:	e000      	b.n	800c296 <prvResetNextTaskUnblockTime+0x16>
 800c294:	2300      	movs	r3, #0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d004      	beq.n	800c2a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c29a:	4b0b      	ldr	r3, [pc, #44]	; (800c2c8 <prvResetNextTaskUnblockTime+0x48>)
 800c29c:	f04f 32ff 	mov.w	r2, #4294967295
 800c2a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c2a2:	e008      	b.n	800c2b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c2a4:	4b07      	ldr	r3, [pc, #28]	; (800c2c4 <prvResetNextTaskUnblockTime+0x44>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	68db      	ldr	r3, [r3, #12]
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	4a05      	ldr	r2, [pc, #20]	; (800c2c8 <prvResetNextTaskUnblockTime+0x48>)
 800c2b4:	6013      	str	r3, [r2, #0]
}
 800c2b6:	bf00      	nop
 800c2b8:	370c      	adds	r7, #12
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	20000924 	.word	0x20000924
 800c2c8:	2000098c 	.word	0x2000098c

0800c2cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c2d2:	4b0b      	ldr	r3, [pc, #44]	; (800c300 <xTaskGetSchedulerState+0x34>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d102      	bne.n	800c2e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	607b      	str	r3, [r7, #4]
 800c2de:	e008      	b.n	800c2f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2e0:	4b08      	ldr	r3, [pc, #32]	; (800c304 <xTaskGetSchedulerState+0x38>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d102      	bne.n	800c2ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	607b      	str	r3, [r7, #4]
 800c2ec:	e001      	b.n	800c2f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c2f2:	687b      	ldr	r3, [r7, #4]
	}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	370c      	adds	r7, #12
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr
 800c300:	20000978 	.word	0x20000978
 800c304:	20000994 	.word	0x20000994

0800c308 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d062      	beq.n	800c3e0 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c31e:	4b32      	ldr	r3, [pc, #200]	; (800c3e8 <vTaskPriorityInherit+0xe0>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c324:	429a      	cmp	r2, r3
 800c326:	d25b      	bcs.n	800c3e0 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	699b      	ldr	r3, [r3, #24]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	db06      	blt.n	800c33e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c330:	4b2d      	ldr	r3, [pc, #180]	; (800c3e8 <vTaskPriorityInherit+0xe0>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c336:	f1c3 0207 	rsb	r2, r3, #7
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	6959      	ldr	r1, [r3, #20]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c346:	4613      	mov	r3, r2
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	4413      	add	r3, r2
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	4a27      	ldr	r2, [pc, #156]	; (800c3ec <vTaskPriorityInherit+0xe4>)
 800c350:	4413      	add	r3, r2
 800c352:	4299      	cmp	r1, r3
 800c354:	d101      	bne.n	800c35a <vTaskPriorityInherit+0x52>
 800c356:	2301      	movs	r3, #1
 800c358:	e000      	b.n	800c35c <vTaskPriorityInherit+0x54>
 800c35a:	2300      	movs	r3, #0
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d03a      	beq.n	800c3d6 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	3304      	adds	r3, #4
 800c364:	4618      	mov	r0, r3
 800c366:	f7fe fbbc 	bl	800aae2 <uxListRemove>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d115      	bne.n	800c39c <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c374:	491d      	ldr	r1, [pc, #116]	; (800c3ec <vTaskPriorityInherit+0xe4>)
 800c376:	4613      	mov	r3, r2
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	4413      	add	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	440b      	add	r3, r1
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d10a      	bne.n	800c39c <vTaskPriorityInherit+0x94>
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c38a:	2201      	movs	r2, #1
 800c38c:	fa02 f303 	lsl.w	r3, r2, r3
 800c390:	43da      	mvns	r2, r3
 800c392:	4b17      	ldr	r3, [pc, #92]	; (800c3f0 <vTaskPriorityInherit+0xe8>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4013      	ands	r3, r2
 800c398:	4a15      	ldr	r2, [pc, #84]	; (800c3f0 <vTaskPriorityInherit+0xe8>)
 800c39a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c39c:	4b12      	ldr	r3, [pc, #72]	; (800c3e8 <vTaskPriorityInherit+0xe0>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	409a      	lsls	r2, r3
 800c3ae:	4b10      	ldr	r3, [pc, #64]	; (800c3f0 <vTaskPriorityInherit+0xe8>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	4a0e      	ldr	r2, [pc, #56]	; (800c3f0 <vTaskPriorityInherit+0xe8>)
 800c3b6:	6013      	str	r3, [r2, #0]
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3bc:	4613      	mov	r3, r2
 800c3be:	009b      	lsls	r3, r3, #2
 800c3c0:	4413      	add	r3, r2
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	4a09      	ldr	r2, [pc, #36]	; (800c3ec <vTaskPriorityInherit+0xe4>)
 800c3c6:	441a      	add	r2, r3
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	3304      	adds	r3, #4
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	4610      	mov	r0, r2
 800c3d0:	f7fe fb2a 	bl	800aa28 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c3d4:	e004      	b.n	800c3e0 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c3d6:	4b04      	ldr	r3, [pc, #16]	; (800c3e8 <vTaskPriorityInherit+0xe0>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800c3e0:	bf00      	nop
 800c3e2:	3710      	adds	r7, #16
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	2000086c 	.word	0x2000086c
 800c3ec:	20000870 	.word	0x20000870
 800c3f0:	20000974 	.word	0x20000974

0800c3f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b086      	sub	sp, #24
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c400:	2300      	movs	r3, #0
 800c402:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d06e      	beq.n	800c4e8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c40a:	4b3a      	ldr	r3, [pc, #232]	; (800c4f4 <xTaskPriorityDisinherit+0x100>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	693a      	ldr	r2, [r7, #16]
 800c410:	429a      	cmp	r2, r3
 800c412:	d00a      	beq.n	800c42a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c418:	f383 8811 	msr	BASEPRI, r3
 800c41c:	f3bf 8f6f 	isb	sy
 800c420:	f3bf 8f4f 	dsb	sy
 800c424:	60fb      	str	r3, [r7, #12]
}
 800c426:	bf00      	nop
 800c428:	e7fe      	b.n	800c428 <xTaskPriorityDisinherit+0x34>

			configASSERT( pxTCB->uxMutexesHeld );
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d10a      	bne.n	800c448 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c436:	f383 8811 	msr	BASEPRI, r3
 800c43a:	f3bf 8f6f 	isb	sy
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	60bb      	str	r3, [r7, #8]
}
 800c444:	bf00      	nop
 800c446:	e7fe      	b.n	800c446 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c44c:	1e5a      	subs	r2, r3, #1
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d044      	beq.n	800c4e8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c462:	2b00      	cmp	r3, #0
 800c464:	d140      	bne.n	800c4e8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	3304      	adds	r3, #4
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7fe fb39 	bl	800aae2 <uxListRemove>
 800c470:	4603      	mov	r3, r0
 800c472:	2b00      	cmp	r3, #0
 800c474:	d115      	bne.n	800c4a2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c47a:	491f      	ldr	r1, [pc, #124]	; (800c4f8 <xTaskPriorityDisinherit+0x104>)
 800c47c:	4613      	mov	r3, r2
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	4413      	add	r3, r2
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	440b      	add	r3, r1
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10a      	bne.n	800c4a2 <xTaskPriorityDisinherit+0xae>
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c490:	2201      	movs	r2, #1
 800c492:	fa02 f303 	lsl.w	r3, r2, r3
 800c496:	43da      	mvns	r2, r3
 800c498:	4b18      	ldr	r3, [pc, #96]	; (800c4fc <xTaskPriorityDisinherit+0x108>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4013      	ands	r3, r2
 800c49e:	4a17      	ldr	r2, [pc, #92]	; (800c4fc <xTaskPriorityDisinherit+0x108>)
 800c4a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ae:	f1c3 0207 	rsb	r2, r3, #7
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	409a      	lsls	r2, r3
 800c4be:	4b0f      	ldr	r3, [pc, #60]	; (800c4fc <xTaskPriorityDisinherit+0x108>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	4a0d      	ldr	r2, [pc, #52]	; (800c4fc <xTaskPriorityDisinherit+0x108>)
 800c4c6:	6013      	str	r3, [r2, #0]
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4cc:	4613      	mov	r3, r2
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	4413      	add	r3, r2
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	4a08      	ldr	r2, [pc, #32]	; (800c4f8 <xTaskPriorityDisinherit+0x104>)
 800c4d6:	441a      	add	r2, r3
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	3304      	adds	r3, #4
 800c4dc:	4619      	mov	r1, r3
 800c4de:	4610      	mov	r0, r2
 800c4e0:	f7fe faa2 	bl	800aa28 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c4e8:	697b      	ldr	r3, [r7, #20]
	}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3718      	adds	r7, #24
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	2000086c 	.word	0x2000086c
 800c4f8:	20000870 	.word	0x20000870
 800c4fc:	20000974 	.word	0x20000974

0800c500 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800c500:	b480      	push	{r7}
 800c502:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c504:	4b07      	ldr	r3, [pc, #28]	; (800c524 <pvTaskIncrementMutexHeldCount+0x24>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d004      	beq.n	800c516 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c50c:	4b05      	ldr	r3, [pc, #20]	; (800c524 <pvTaskIncrementMutexHeldCount+0x24>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c512:	3201      	adds	r2, #1
 800c514:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c516:	4b03      	ldr	r3, [pc, #12]	; (800c524 <pvTaskIncrementMutexHeldCount+0x24>)
 800c518:	681b      	ldr	r3, [r3, #0]
	}
 800c51a:	4618      	mov	r0, r3
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr
 800c524:	2000086c 	.word	0x2000086c

0800c528 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c532:	4b29      	ldr	r3, [pc, #164]	; (800c5d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c538:	4b28      	ldr	r3, [pc, #160]	; (800c5dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	3304      	adds	r3, #4
 800c53e:	4618      	mov	r0, r3
 800c540:	f7fe facf 	bl	800aae2 <uxListRemove>
 800c544:	4603      	mov	r3, r0
 800c546:	2b00      	cmp	r3, #0
 800c548:	d10b      	bne.n	800c562 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c54a:	4b24      	ldr	r3, [pc, #144]	; (800c5dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c550:	2201      	movs	r2, #1
 800c552:	fa02 f303 	lsl.w	r3, r2, r3
 800c556:	43da      	mvns	r2, r3
 800c558:	4b21      	ldr	r3, [pc, #132]	; (800c5e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4013      	ands	r3, r2
 800c55e:	4a20      	ldr	r2, [pc, #128]	; (800c5e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c560:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c568:	d10a      	bne.n	800c580 <prvAddCurrentTaskToDelayedList+0x58>
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d007      	beq.n	800c580 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c570:	4b1a      	ldr	r3, [pc, #104]	; (800c5dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	3304      	adds	r3, #4
 800c576:	4619      	mov	r1, r3
 800c578:	481a      	ldr	r0, [pc, #104]	; (800c5e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c57a:	f7fe fa55 	bl	800aa28 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c57e:	e026      	b.n	800c5ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c580:	68fa      	ldr	r2, [r7, #12]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	4413      	add	r3, r2
 800c586:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c588:	4b14      	ldr	r3, [pc, #80]	; (800c5dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	68ba      	ldr	r2, [r7, #8]
 800c58e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c590:	68ba      	ldr	r2, [r7, #8]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	429a      	cmp	r2, r3
 800c596:	d209      	bcs.n	800c5ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c598:	4b13      	ldr	r3, [pc, #76]	; (800c5e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	4b0f      	ldr	r3, [pc, #60]	; (800c5dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	3304      	adds	r3, #4
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	4610      	mov	r0, r2
 800c5a6:	f7fe fa63 	bl	800aa70 <vListInsert>
}
 800c5aa:	e010      	b.n	800c5ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5ac:	4b0f      	ldr	r3, [pc, #60]	; (800c5ec <prvAddCurrentTaskToDelayedList+0xc4>)
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	4b0a      	ldr	r3, [pc, #40]	; (800c5dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	3304      	adds	r3, #4
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	4610      	mov	r0, r2
 800c5ba:	f7fe fa59 	bl	800aa70 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c5be:	4b0c      	ldr	r3, [pc, #48]	; (800c5f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	68ba      	ldr	r2, [r7, #8]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d202      	bcs.n	800c5ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c5c8:	4a09      	ldr	r2, [pc, #36]	; (800c5f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	6013      	str	r3, [r2, #0]
}
 800c5ce:	bf00      	nop
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	20000970 	.word	0x20000970
 800c5dc:	2000086c 	.word	0x2000086c
 800c5e0:	20000974 	.word	0x20000974
 800c5e4:	20000958 	.word	0x20000958
 800c5e8:	20000928 	.word	0x20000928
 800c5ec:	20000924 	.word	0x20000924
 800c5f0:	2000098c 	.word	0x2000098c

0800c5f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c5fe:	f000 fa95 	bl	800cb2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c602:	4b11      	ldr	r3, [pc, #68]	; (800c648 <xTimerCreateTimerTask+0x54>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00b      	beq.n	800c622 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800c60a:	4b10      	ldr	r3, [pc, #64]	; (800c64c <xTimerCreateTimerTask+0x58>)
 800c60c:	9301      	str	r3, [sp, #4]
 800c60e:	2303      	movs	r3, #3
 800c610:	9300      	str	r3, [sp, #0]
 800c612:	2300      	movs	r3, #0
 800c614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c618:	490d      	ldr	r1, [pc, #52]	; (800c650 <xTimerCreateTimerTask+0x5c>)
 800c61a:	480e      	ldr	r0, [pc, #56]	; (800c654 <xTimerCreateTimerTask+0x60>)
 800c61c:	f7ff f8ac 	bl	800b778 <xTaskCreate>
 800c620:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d10a      	bne.n	800c63e <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800c628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62c:	f383 8811 	msr	BASEPRI, r3
 800c630:	f3bf 8f6f 	isb	sy
 800c634:	f3bf 8f4f 	dsb	sy
 800c638:	603b      	str	r3, [r7, #0]
}
 800c63a:	bf00      	nop
 800c63c:	e7fe      	b.n	800c63c <xTimerCreateTimerTask+0x48>
	return xReturn;
 800c63e:	687b      	ldr	r3, [r7, #4]
}
 800c640:	4618      	mov	r0, r3
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	200009c8 	.word	0x200009c8
 800c64c:	200009cc 	.word	0x200009cc
 800c650:	08010a00 	.word	0x08010a00
 800c654:	0800c775 	.word	0x0800c775

0800c658 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b08a      	sub	sp, #40	; 0x28
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	607a      	str	r2, [r7, #4]
 800c664:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c666:	2300      	movs	r3, #0
 800c668:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d10a      	bne.n	800c686 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c674:	f383 8811 	msr	BASEPRI, r3
 800c678:	f3bf 8f6f 	isb	sy
 800c67c:	f3bf 8f4f 	dsb	sy
 800c680:	623b      	str	r3, [r7, #32]
}
 800c682:	bf00      	nop
 800c684:	e7fe      	b.n	800c684 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c686:	4b1a      	ldr	r3, [pc, #104]	; (800c6f0 <xTimerGenericCommand+0x98>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d02a      	beq.n	800c6e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	2b05      	cmp	r3, #5
 800c69e:	dc18      	bgt.n	800c6d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c6a0:	f7ff fe14 	bl	800c2cc <xTaskGetSchedulerState>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b02      	cmp	r3, #2
 800c6a8:	d109      	bne.n	800c6be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c6aa:	4b11      	ldr	r3, [pc, #68]	; (800c6f0 <xTimerGenericCommand+0x98>)
 800c6ac:	6818      	ldr	r0, [r3, #0]
 800c6ae:	f107 0114 	add.w	r1, r7, #20
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6b6:	f7fe fb37 	bl	800ad28 <xQueueGenericSend>
 800c6ba:	6278      	str	r0, [r7, #36]	; 0x24
 800c6bc:	e012      	b.n	800c6e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c6be:	4b0c      	ldr	r3, [pc, #48]	; (800c6f0 <xTimerGenericCommand+0x98>)
 800c6c0:	6818      	ldr	r0, [r3, #0]
 800c6c2:	f107 0114 	add.w	r1, r7, #20
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f7fe fb2d 	bl	800ad28 <xQueueGenericSend>
 800c6ce:	6278      	str	r0, [r7, #36]	; 0x24
 800c6d0:	e008      	b.n	800c6e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c6d2:	4b07      	ldr	r3, [pc, #28]	; (800c6f0 <xTimerGenericCommand+0x98>)
 800c6d4:	6818      	ldr	r0, [r3, #0]
 800c6d6:	f107 0114 	add.w	r1, r7, #20
 800c6da:	2300      	movs	r3, #0
 800c6dc:	683a      	ldr	r2, [r7, #0]
 800c6de:	f7fe fc21 	bl	800af24 <xQueueGenericSendFromISR>
 800c6e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3728      	adds	r7, #40	; 0x28
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	200009c8 	.word	0x200009c8

0800c6f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b088      	sub	sp, #32
 800c6f8:	af02      	add	r7, sp, #8
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6fe:	4b1c      	ldr	r3, [pc, #112]	; (800c770 <prvProcessExpiredTimer+0x7c>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	3304      	adds	r3, #4
 800c70c:	4618      	mov	r0, r3
 800c70e:	f7fe f9e8 	bl	800aae2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	69db      	ldr	r3, [r3, #28]
 800c716:	2b01      	cmp	r3, #1
 800c718:	d122      	bne.n	800c760 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	699a      	ldr	r2, [r3, #24]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	18d1      	adds	r1, r2, r3
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	683a      	ldr	r2, [r7, #0]
 800c726:	6978      	ldr	r0, [r7, #20]
 800c728:	f000 f8c8 	bl	800c8bc <prvInsertTimerInActiveList>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d016      	beq.n	800c760 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c732:	2300      	movs	r3, #0
 800c734:	9300      	str	r3, [sp, #0]
 800c736:	2300      	movs	r3, #0
 800c738:	687a      	ldr	r2, [r7, #4]
 800c73a:	2100      	movs	r1, #0
 800c73c:	6978      	ldr	r0, [r7, #20]
 800c73e:	f7ff ff8b 	bl	800c658 <xTimerGenericCommand>
 800c742:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d10a      	bne.n	800c760 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74e:	f383 8811 	msr	BASEPRI, r3
 800c752:	f3bf 8f6f 	isb	sy
 800c756:	f3bf 8f4f 	dsb	sy
 800c75a:	60fb      	str	r3, [r7, #12]
}
 800c75c:	bf00      	nop
 800c75e:	e7fe      	b.n	800c75e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c764:	6978      	ldr	r0, [r7, #20]
 800c766:	4798      	blx	r3
}
 800c768:	bf00      	nop
 800c76a:	3718      	adds	r7, #24
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	200009c0 	.word	0x200009c0

0800c774 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c77c:	f107 0308 	add.w	r3, r7, #8
 800c780:	4618      	mov	r0, r3
 800c782:	f000 f857 	bl	800c834 <prvGetNextExpireTime>
 800c786:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	4619      	mov	r1, r3
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f000 f803 	bl	800c798 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c792:	f000 f8d5 	bl	800c940 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c796:	e7f1      	b.n	800c77c <prvTimerTask+0x8>

0800c798 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c7a2:	f7ff f9a1 	bl	800bae8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7a6:	f107 0308 	add.w	r3, r7, #8
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f000 f866 	bl	800c87c <prvSampleTimeNow>
 800c7b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d130      	bne.n	800c81a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d10a      	bne.n	800c7d4 <prvProcessTimerOrBlockTask+0x3c>
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d806      	bhi.n	800c7d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c7c6:	f7ff f99d 	bl	800bb04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c7ca:	68f9      	ldr	r1, [r7, #12]
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7ff ff91 	bl	800c6f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c7d2:	e024      	b.n	800c81e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d008      	beq.n	800c7ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c7da:	4b13      	ldr	r3, [pc, #76]	; (800c828 <prvProcessTimerOrBlockTask+0x90>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	bf0c      	ite	eq
 800c7e4:	2301      	moveq	r3, #1
 800c7e6:	2300      	movne	r3, #0
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c7ec:	4b0f      	ldr	r3, [pc, #60]	; (800c82c <prvProcessTimerOrBlockTask+0x94>)
 800c7ee:	6818      	ldr	r0, [r3, #0]
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	1ad3      	subs	r3, r2, r3
 800c7f6:	683a      	ldr	r2, [r7, #0]
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	f7fe ff89 	bl	800b710 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c7fe:	f7ff f981 	bl	800bb04 <xTaskResumeAll>
 800c802:	4603      	mov	r3, r0
 800c804:	2b00      	cmp	r3, #0
 800c806:	d10a      	bne.n	800c81e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c808:	4b09      	ldr	r3, [pc, #36]	; (800c830 <prvProcessTimerOrBlockTask+0x98>)
 800c80a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c80e:	601a      	str	r2, [r3, #0]
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	f3bf 8f6f 	isb	sy
}
 800c818:	e001      	b.n	800c81e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c81a:	f7ff f973 	bl	800bb04 <xTaskResumeAll>
}
 800c81e:	bf00      	nop
 800c820:	3710      	adds	r7, #16
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	200009c4 	.word	0x200009c4
 800c82c:	200009c8 	.word	0x200009c8
 800c830:	e000ed04 	.word	0xe000ed04

0800c834 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c834:	b480      	push	{r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c83c:	4b0e      	ldr	r3, [pc, #56]	; (800c878 <prvGetNextExpireTime+0x44>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	bf0c      	ite	eq
 800c846:	2301      	moveq	r3, #1
 800c848:	2300      	movne	r3, #0
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	461a      	mov	r2, r3
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d105      	bne.n	800c866 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c85a:	4b07      	ldr	r3, [pc, #28]	; (800c878 <prvGetNextExpireTime+0x44>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	60fb      	str	r3, [r7, #12]
 800c864:	e001      	b.n	800c86a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c866:	2300      	movs	r3, #0
 800c868:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c86a:	68fb      	ldr	r3, [r7, #12]
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3714      	adds	r7, #20
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	200009c0 	.word	0x200009c0

0800c87c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c884:	f7ff f9da 	bl	800bc3c <xTaskGetTickCount>
 800c888:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c88a:	4b0b      	ldr	r3, [pc, #44]	; (800c8b8 <prvSampleTimeNow+0x3c>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	68fa      	ldr	r2, [r7, #12]
 800c890:	429a      	cmp	r2, r3
 800c892:	d205      	bcs.n	800c8a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c894:	f000 f8e8 	bl	800ca68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2201      	movs	r2, #1
 800c89c:	601a      	str	r2, [r3, #0]
 800c89e:	e002      	b.n	800c8a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c8a6:	4a04      	ldr	r2, [pc, #16]	; (800c8b8 <prvSampleTimeNow+0x3c>)
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3710      	adds	r7, #16
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	200009d0 	.word	0x200009d0

0800c8bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b086      	sub	sp, #24
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	607a      	str	r2, [r7, #4]
 800c8c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	68ba      	ldr	r2, [r7, #8]
 800c8d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	68fa      	ldr	r2, [r7, #12]
 800c8d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c8da:	68ba      	ldr	r2, [r7, #8]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d812      	bhi.n	800c908 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	1ad2      	subs	r2, r2, r3
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	699b      	ldr	r3, [r3, #24]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d302      	bcc.n	800c8f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	617b      	str	r3, [r7, #20]
 800c8f4:	e01b      	b.n	800c92e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c8f6:	4b10      	ldr	r3, [pc, #64]	; (800c938 <prvInsertTimerInActiveList+0x7c>)
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	3304      	adds	r3, #4
 800c8fe:	4619      	mov	r1, r3
 800c900:	4610      	mov	r0, r2
 800c902:	f7fe f8b5 	bl	800aa70 <vListInsert>
 800c906:	e012      	b.n	800c92e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c908:	687a      	ldr	r2, [r7, #4]
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d206      	bcs.n	800c91e <prvInsertTimerInActiveList+0x62>
 800c910:	68ba      	ldr	r2, [r7, #8]
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	429a      	cmp	r2, r3
 800c916:	d302      	bcc.n	800c91e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c918:	2301      	movs	r3, #1
 800c91a:	617b      	str	r3, [r7, #20]
 800c91c:	e007      	b.n	800c92e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c91e:	4b07      	ldr	r3, [pc, #28]	; (800c93c <prvInsertTimerInActiveList+0x80>)
 800c920:	681a      	ldr	r2, [r3, #0]
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	3304      	adds	r3, #4
 800c926:	4619      	mov	r1, r3
 800c928:	4610      	mov	r0, r2
 800c92a:	f7fe f8a1 	bl	800aa70 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c92e:	697b      	ldr	r3, [r7, #20]
}
 800c930:	4618      	mov	r0, r3
 800c932:	3718      	adds	r7, #24
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}
 800c938:	200009c4 	.word	0x200009c4
 800c93c:	200009c0 	.word	0x200009c0

0800c940 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b08c      	sub	sp, #48	; 0x30
 800c944:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c946:	e07c      	b.n	800ca42 <prvProcessReceivedCommands+0x102>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	db78      	blt.n	800ca40 <prvProcessReceivedCommands+0x100>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800c952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c954:	695b      	ldr	r3, [r3, #20]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d004      	beq.n	800c964 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95c:	3304      	adds	r3, #4
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fe f8bf 	bl	800aae2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c964:	1d3b      	adds	r3, r7, #4
 800c966:	4618      	mov	r0, r3
 800c968:	f7ff ff88 	bl	800c87c <prvSampleTimeNow>
 800c96c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	2b09      	cmp	r3, #9
 800c972:	d866      	bhi.n	800ca42 <prvProcessReceivedCommands+0x102>
 800c974:	a201      	add	r2, pc, #4	; (adr r2, 800c97c <prvProcessReceivedCommands+0x3c>)
 800c976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c97a:	bf00      	nop
 800c97c:	0800c9a5 	.word	0x0800c9a5
 800c980:	0800c9a5 	.word	0x0800c9a5
 800c984:	0800c9a5 	.word	0x0800c9a5
 800c988:	0800ca43 	.word	0x0800ca43
 800c98c:	0800ca01 	.word	0x0800ca01
 800c990:	0800ca39 	.word	0x0800ca39
 800c994:	0800c9a5 	.word	0x0800c9a5
 800c998:	0800c9a5 	.word	0x0800c9a5
 800c99c:	0800ca43 	.word	0x0800ca43
 800c9a0:	0800ca01 	.word	0x0800ca01
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c9a4:	68fa      	ldr	r2, [r7, #12]
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a8:	699b      	ldr	r3, [r3, #24]
 800c9aa:	18d1      	adds	r1, r2, r3
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	6a3a      	ldr	r2, [r7, #32]
 800c9b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9b2:	f7ff ff83 	bl	800c8bc <prvInsertTimerInActiveList>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d042      	beq.n	800ca42 <prvProcessReceivedCommands+0x102>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9c2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c6:	69db      	ldr	r3, [r3, #28]
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d13a      	bne.n	800ca42 <prvProcessReceivedCommands+0x102>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c9cc:	68fa      	ldr	r2, [r7, #12]
 800c9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d0:	699b      	ldr	r3, [r3, #24]
 800c9d2:	441a      	add	r2, r3
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	2300      	movs	r3, #0
 800c9da:	2100      	movs	r1, #0
 800c9dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9de:	f7ff fe3b 	bl	800c658 <xTimerGenericCommand>
 800c9e2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d12b      	bne.n	800ca42 <prvProcessReceivedCommands+0x102>
	__asm volatile
 800c9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ee:	f383 8811 	msr	BASEPRI, r3
 800c9f2:	f3bf 8f6f 	isb	sy
 800c9f6:	f3bf 8f4f 	dsb	sy
 800c9fa:	61bb      	str	r3, [r7, #24]
}
 800c9fc:	bf00      	nop
 800c9fe:	e7fe      	b.n	800c9fe <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ca00:	68fa      	ldr	r2, [r7, #12]
 800ca02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca04:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ca06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca08:	699b      	ldr	r3, [r3, #24]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d10a      	bne.n	800ca24 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800ca0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca12:	f383 8811 	msr	BASEPRI, r3
 800ca16:	f3bf 8f6f 	isb	sy
 800ca1a:	f3bf 8f4f 	dsb	sy
 800ca1e:	617b      	str	r3, [r7, #20]
}
 800ca20:	bf00      	nop
 800ca22:	e7fe      	b.n	800ca22 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ca24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca26:	699a      	ldr	r2, [r3, #24]
 800ca28:	6a3b      	ldr	r3, [r7, #32]
 800ca2a:	18d1      	adds	r1, r2, r3
 800ca2c:	6a3b      	ldr	r3, [r7, #32]
 800ca2e:	6a3a      	ldr	r2, [r7, #32]
 800ca30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca32:	f7ff ff43 	bl	800c8bc <prvInsertTimerInActiveList>
					break;
 800ca36:	e004      	b.n	800ca42 <prvProcessReceivedCommands+0x102>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 800ca38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca3a:	f000 fb91 	bl	800d160 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ca3e:	e000      	b.n	800ca42 <prvProcessReceivedCommands+0x102>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ca40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca42:	4b08      	ldr	r3, [pc, #32]	; (800ca64 <prvProcessReceivedCommands+0x124>)
 800ca44:	6818      	ldr	r0, [r3, #0]
 800ca46:	f107 0108 	add.w	r1, r7, #8
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f7fe fb8f 	bl	800b170 <xQueueGenericReceive>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	f47f af77 	bne.w	800c948 <prvProcessReceivedCommands+0x8>
	}
}
 800ca5a:	bf00      	nop
 800ca5c:	bf00      	nop
 800ca5e:	3728      	adds	r7, #40	; 0x28
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	200009c8 	.word	0x200009c8

0800ca68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b088      	sub	sp, #32
 800ca6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca6e:	e045      	b.n	800cafc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca70:	4b2c      	ldr	r3, [pc, #176]	; (800cb24 <prvSwitchTimerLists+0xbc>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca7a:	4b2a      	ldr	r3, [pc, #168]	; (800cb24 <prvSwitchTimerLists+0xbc>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	3304      	adds	r3, #4
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7fe f82a 	bl	800aae2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca92:	68f8      	ldr	r0, [r7, #12]
 800ca94:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	69db      	ldr	r3, [r3, #28]
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d12e      	bne.n	800cafc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	699b      	ldr	r3, [r3, #24]
 800caa2:	693a      	ldr	r2, [r7, #16]
 800caa4:	4413      	add	r3, r2
 800caa6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800caa8:	68ba      	ldr	r2, [r7, #8]
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	429a      	cmp	r2, r3
 800caae:	d90e      	bls.n	800cace <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	68ba      	ldr	r2, [r7, #8]
 800cab4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	68fa      	ldr	r2, [r7, #12]
 800caba:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cabc:	4b19      	ldr	r3, [pc, #100]	; (800cb24 <prvSwitchTimerLists+0xbc>)
 800cabe:	681a      	ldr	r2, [r3, #0]
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	3304      	adds	r3, #4
 800cac4:	4619      	mov	r1, r3
 800cac6:	4610      	mov	r0, r2
 800cac8:	f7fd ffd2 	bl	800aa70 <vListInsert>
 800cacc:	e016      	b.n	800cafc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cace:	2300      	movs	r3, #0
 800cad0:	9300      	str	r3, [sp, #0]
 800cad2:	2300      	movs	r3, #0
 800cad4:	693a      	ldr	r2, [r7, #16]
 800cad6:	2100      	movs	r1, #0
 800cad8:	68f8      	ldr	r0, [r7, #12]
 800cada:	f7ff fdbd 	bl	800c658 <xTimerGenericCommand>
 800cade:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d10a      	bne.n	800cafc <prvSwitchTimerLists+0x94>
	__asm volatile
 800cae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caea:	f383 8811 	msr	BASEPRI, r3
 800caee:	f3bf 8f6f 	isb	sy
 800caf2:	f3bf 8f4f 	dsb	sy
 800caf6:	603b      	str	r3, [r7, #0]
}
 800caf8:	bf00      	nop
 800cafa:	e7fe      	b.n	800cafa <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cafc:	4b09      	ldr	r3, [pc, #36]	; (800cb24 <prvSwitchTimerLists+0xbc>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d1b4      	bne.n	800ca70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cb06:	4b07      	ldr	r3, [pc, #28]	; (800cb24 <prvSwitchTimerLists+0xbc>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cb0c:	4b06      	ldr	r3, [pc, #24]	; (800cb28 <prvSwitchTimerLists+0xc0>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a04      	ldr	r2, [pc, #16]	; (800cb24 <prvSwitchTimerLists+0xbc>)
 800cb12:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cb14:	4a04      	ldr	r2, [pc, #16]	; (800cb28 <prvSwitchTimerLists+0xc0>)
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	6013      	str	r3, [r2, #0]
}
 800cb1a:	bf00      	nop
 800cb1c:	3718      	adds	r7, #24
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	200009c0 	.word	0x200009c0
 800cb28:	200009c4 	.word	0x200009c4

0800cb2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cb30:	f000 f938 	bl	800cda4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cb34:	4b12      	ldr	r3, [pc, #72]	; (800cb80 <prvCheckForValidListAndQueue+0x54>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d11d      	bne.n	800cb78 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800cb3c:	4811      	ldr	r0, [pc, #68]	; (800cb84 <prvCheckForValidListAndQueue+0x58>)
 800cb3e:	f7fd ff46 	bl	800a9ce <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cb42:	4811      	ldr	r0, [pc, #68]	; (800cb88 <prvCheckForValidListAndQueue+0x5c>)
 800cb44:	f7fd ff43 	bl	800a9ce <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cb48:	4b10      	ldr	r3, [pc, #64]	; (800cb8c <prvCheckForValidListAndQueue+0x60>)
 800cb4a:	4a0e      	ldr	r2, [pc, #56]	; (800cb84 <prvCheckForValidListAndQueue+0x58>)
 800cb4c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cb4e:	4b10      	ldr	r3, [pc, #64]	; (800cb90 <prvCheckForValidListAndQueue+0x64>)
 800cb50:	4a0d      	ldr	r2, [pc, #52]	; (800cb88 <prvCheckForValidListAndQueue+0x5c>)
 800cb52:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800cb54:	2200      	movs	r2, #0
 800cb56:	210c      	movs	r1, #12
 800cb58:	200a      	movs	r0, #10
 800cb5a:	f7fe f855 	bl	800ac08 <xQueueGenericCreate>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	4a07      	ldr	r2, [pc, #28]	; (800cb80 <prvCheckForValidListAndQueue+0x54>)
 800cb62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cb64:	4b06      	ldr	r3, [pc, #24]	; (800cb80 <prvCheckForValidListAndQueue+0x54>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d005      	beq.n	800cb78 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cb6c:	4b04      	ldr	r3, [pc, #16]	; (800cb80 <prvCheckForValidListAndQueue+0x54>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4908      	ldr	r1, [pc, #32]	; (800cb94 <prvCheckForValidListAndQueue+0x68>)
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7fe fda2 	bl	800b6bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb78:	f000 f944 	bl	800ce04 <vPortExitCritical>
}
 800cb7c:	bf00      	nop
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	200009c8 	.word	0x200009c8
 800cb84:	20000998 	.word	0x20000998
 800cb88:	200009ac 	.word	0x200009ac
 800cb8c:	200009c0 	.word	0x200009c0
 800cb90:	200009c4 	.word	0x200009c4
 800cb94:	08010a08 	.word	0x08010a08

0800cb98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	60b9      	str	r1, [r7, #8]
 800cba2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	3b04      	subs	r3, #4
 800cba8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cbb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	3b04      	subs	r3, #4
 800cbb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	f023 0201 	bic.w	r2, r3, #1
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	3b04      	subs	r3, #4
 800cbc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cbc8:	4a0c      	ldr	r2, [pc, #48]	; (800cbfc <pxPortInitialiseStack+0x64>)
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	3b14      	subs	r3, #20
 800cbd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cbd4:	687a      	ldr	r2, [r7, #4]
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	3b04      	subs	r3, #4
 800cbde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f06f 0202 	mvn.w	r2, #2
 800cbe6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	3b20      	subs	r3, #32
 800cbec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cbee:	68fb      	ldr	r3, [r7, #12]
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3714      	adds	r7, #20
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr
 800cbfc:	0800cc01 	.word	0x0800cc01

0800cc00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cc06:	4b0d      	ldr	r3, [pc, #52]	; (800cc3c <prvTaskExitError+0x3c>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc0e:	d00a      	beq.n	800cc26 <prvTaskExitError+0x26>
	__asm volatile
 800cc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	607b      	str	r3, [r7, #4]
}
 800cc22:	bf00      	nop
 800cc24:	e7fe      	b.n	800cc24 <prvTaskExitError+0x24>
	__asm volatile
 800cc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2a:	f383 8811 	msr	BASEPRI, r3
 800cc2e:	f3bf 8f6f 	isb	sy
 800cc32:	f3bf 8f4f 	dsb	sy
 800cc36:	603b      	str	r3, [r7, #0]
}
 800cc38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	for( ;; );
 800cc3a:	e7fe      	b.n	800cc3a <prvTaskExitError+0x3a>
 800cc3c:	20000018 	.word	0x20000018

0800cc40 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc40:	4b07      	ldr	r3, [pc, #28]	; (800cc60 <pxCurrentTCBConst2>)
 800cc42:	6819      	ldr	r1, [r3, #0]
 800cc44:	6808      	ldr	r0, [r1, #0]
 800cc46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc4a:	f380 8809 	msr	PSP, r0
 800cc4e:	f3bf 8f6f 	isb	sy
 800cc52:	f04f 0000 	mov.w	r0, #0
 800cc56:	f380 8811 	msr	BASEPRI, r0
 800cc5a:	4770      	bx	lr
 800cc5c:	f3af 8000 	nop.w

0800cc60 <pxCurrentTCBConst2>:
 800cc60:	2000086c 	.word	0x2000086c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cc64:	bf00      	nop
 800cc66:	bf00      	nop

0800cc68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800cc68:	4806      	ldr	r0, [pc, #24]	; (800cc84 <prvPortStartFirstTask+0x1c>)
 800cc6a:	6800      	ldr	r0, [r0, #0]
 800cc6c:	6800      	ldr	r0, [r0, #0]
 800cc6e:	f380 8808 	msr	MSP, r0
 800cc72:	b662      	cpsie	i
 800cc74:	b661      	cpsie	f
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	f3bf 8f6f 	isb	sy
 800cc7e:	df00      	svc	0
 800cc80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc82:	bf00      	nop
 800cc84:	e000ed08 	.word	0xe000ed08

0800cc88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b086      	sub	sp, #24
 800cc8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc8e:	4b3c      	ldr	r3, [pc, #240]	; (800cd80 <xPortStartScheduler+0xf8>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4a3c      	ldr	r2, [pc, #240]	; (800cd84 <xPortStartScheduler+0xfc>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d10a      	bne.n	800ccae <xPortStartScheduler+0x26>
	__asm volatile
 800cc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9c:	f383 8811 	msr	BASEPRI, r3
 800cca0:	f3bf 8f6f 	isb	sy
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	613b      	str	r3, [r7, #16]
}
 800ccaa:	bf00      	nop
 800ccac:	e7fe      	b.n	800ccac <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ccae:	4b34      	ldr	r3, [pc, #208]	; (800cd80 <xPortStartScheduler+0xf8>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4a35      	ldr	r2, [pc, #212]	; (800cd88 <xPortStartScheduler+0x100>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d10a      	bne.n	800ccce <xPortStartScheduler+0x46>
	__asm volatile
 800ccb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbc:	f383 8811 	msr	BASEPRI, r3
 800ccc0:	f3bf 8f6f 	isb	sy
 800ccc4:	f3bf 8f4f 	dsb	sy
 800ccc8:	60fb      	str	r3, [r7, #12]
}
 800ccca:	bf00      	nop
 800cccc:	e7fe      	b.n	800cccc <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ccce:	4b2f      	ldr	r3, [pc, #188]	; (800cd8c <xPortStartScheduler+0x104>)
 800ccd0:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	22ff      	movs	r2, #255	; 0xff
 800ccde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cce8:	79fb      	ldrb	r3, [r7, #7]
 800ccea:	b2db      	uxtb	r3, r3
 800ccec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ccf0:	b2da      	uxtb	r2, r3
 800ccf2:	4b27      	ldr	r3, [pc, #156]	; (800cd90 <xPortStartScheduler+0x108>)
 800ccf4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ccf6:	4b27      	ldr	r3, [pc, #156]	; (800cd94 <xPortStartScheduler+0x10c>)
 800ccf8:	2207      	movs	r2, #7
 800ccfa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccfc:	e009      	b.n	800cd12 <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ccfe:	4b25      	ldr	r3, [pc, #148]	; (800cd94 <xPortStartScheduler+0x10c>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	3b01      	subs	r3, #1
 800cd04:	4a23      	ldr	r2, [pc, #140]	; (800cd94 <xPortStartScheduler+0x10c>)
 800cd06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cd08:	79fb      	ldrb	r3, [r7, #7]
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	005b      	lsls	r3, r3, #1
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd12:	79fb      	ldrb	r3, [r7, #7]
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd1a:	2b80      	cmp	r3, #128	; 0x80
 800cd1c:	d0ef      	beq.n	800ccfe <xPortStartScheduler+0x76>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd1e:	4b1d      	ldr	r3, [pc, #116]	; (800cd94 <xPortStartScheduler+0x10c>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	021b      	lsls	r3, r3, #8
 800cd24:	4a1b      	ldr	r2, [pc, #108]	; (800cd94 <xPortStartScheduler+0x10c>)
 800cd26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd28:	4b1a      	ldr	r3, [pc, #104]	; (800cd94 <xPortStartScheduler+0x10c>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cd30:	4a18      	ldr	r2, [pc, #96]	; (800cd94 <xPortStartScheduler+0x10c>)
 800cd32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	b2da      	uxtb	r2, r3
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd3c:	4b16      	ldr	r3, [pc, #88]	; (800cd98 <xPortStartScheduler+0x110>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a15      	ldr	r2, [pc, #84]	; (800cd98 <xPortStartScheduler+0x110>)
 800cd42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cd46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cd48:	4b13      	ldr	r3, [pc, #76]	; (800cd98 <xPortStartScheduler+0x110>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a12      	ldr	r2, [pc, #72]	; (800cd98 <xPortStartScheduler+0x110>)
 800cd4e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cd52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cd54:	f000 f8da 	bl	800cf0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd58:	4b10      	ldr	r3, [pc, #64]	; (800cd9c <xPortStartScheduler+0x114>)
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd5e:	f000 f8f1 	bl	800cf44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd62:	4b0f      	ldr	r3, [pc, #60]	; (800cda0 <xPortStartScheduler+0x118>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4a0e      	ldr	r2, [pc, #56]	; (800cda0 <xPortStartScheduler+0x118>)
 800cd68:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd6e:	f7ff ff7b 	bl	800cc68 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800cd72:	f7ff ff45 	bl	800cc00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd76:	2300      	movs	r3, #0
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3718      	adds	r7, #24
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	e000ed00 	.word	0xe000ed00
 800cd84:	410fc271 	.word	0x410fc271
 800cd88:	410fc270 	.word	0x410fc270
 800cd8c:	e000e400 	.word	0xe000e400
 800cd90:	200009d4 	.word	0x200009d4
 800cd94:	200009d8 	.word	0x200009d8
 800cd98:	e000ed20 	.word	0xe000ed20
 800cd9c:	20000018 	.word	0x20000018
 800cda0:	e000ef34 	.word	0xe000ef34

0800cda4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
	__asm volatile
 800cdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdae:	f383 8811 	msr	BASEPRI, r3
 800cdb2:	f3bf 8f6f 	isb	sy
 800cdb6:	f3bf 8f4f 	dsb	sy
 800cdba:	607b      	str	r3, [r7, #4]
}
 800cdbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cdbe:	4b0f      	ldr	r3, [pc, #60]	; (800cdfc <vPortEnterCritical+0x58>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	4a0d      	ldr	r2, [pc, #52]	; (800cdfc <vPortEnterCritical+0x58>)
 800cdc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cdc8:	4b0c      	ldr	r3, [pc, #48]	; (800cdfc <vPortEnterCritical+0x58>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d10f      	bne.n	800cdf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cdd0:	4b0b      	ldr	r3, [pc, #44]	; (800ce00 <vPortEnterCritical+0x5c>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	b2db      	uxtb	r3, r3
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00a      	beq.n	800cdf0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdde:	f383 8811 	msr	BASEPRI, r3
 800cde2:	f3bf 8f6f 	isb	sy
 800cde6:	f3bf 8f4f 	dsb	sy
 800cdea:	603b      	str	r3, [r7, #0]
}
 800cdec:	bf00      	nop
 800cdee:	e7fe      	b.n	800cdee <vPortEnterCritical+0x4a>
	}
}
 800cdf0:	bf00      	nop
 800cdf2:	370c      	adds	r7, #12
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr
 800cdfc:	20000018 	.word	0x20000018
 800ce00:	e000ed04 	.word	0xe000ed04

0800ce04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ce04:	b480      	push	{r7}
 800ce06:	b083      	sub	sp, #12
 800ce08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce0a:	4b12      	ldr	r3, [pc, #72]	; (800ce54 <vPortExitCritical+0x50>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d10a      	bne.n	800ce28 <vPortExitCritical+0x24>
	__asm volatile
 800ce12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce16:	f383 8811 	msr	BASEPRI, r3
 800ce1a:	f3bf 8f6f 	isb	sy
 800ce1e:	f3bf 8f4f 	dsb	sy
 800ce22:	607b      	str	r3, [r7, #4]
}
 800ce24:	bf00      	nop
 800ce26:	e7fe      	b.n	800ce26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ce28:	4b0a      	ldr	r3, [pc, #40]	; (800ce54 <vPortExitCritical+0x50>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	3b01      	subs	r3, #1
 800ce2e:	4a09      	ldr	r2, [pc, #36]	; (800ce54 <vPortExitCritical+0x50>)
 800ce30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce32:	4b08      	ldr	r3, [pc, #32]	; (800ce54 <vPortExitCritical+0x50>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d105      	bne.n	800ce46 <vPortExitCritical+0x42>
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	f383 8811 	msr	BASEPRI, r3
}
 800ce44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce46:	bf00      	nop
 800ce48:	370c      	adds	r7, #12
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	20000018 	.word	0x20000018
	...

0800ce60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce60:	f3ef 8009 	mrs	r0, PSP
 800ce64:	f3bf 8f6f 	isb	sy
 800ce68:	4b15      	ldr	r3, [pc, #84]	; (800cec0 <pxCurrentTCBConst>)
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	f01e 0f10 	tst.w	lr, #16
 800ce70:	bf08      	it	eq
 800ce72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce7a:	6010      	str	r0, [r2, #0]
 800ce7c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 800ce80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce84:	f380 8811 	msr	BASEPRI, r0
 800ce88:	f3bf 8f4f 	dsb	sy
 800ce8c:	f3bf 8f6f 	isb	sy
 800ce90:	f7fe ffb4 	bl	800bdfc <vTaskSwitchContext>
 800ce94:	f04f 0000 	mov.w	r0, #0
 800ce98:	f380 8811 	msr	BASEPRI, r0
 800ce9c:	bc08      	pop	{r3}
 800ce9e:	6819      	ldr	r1, [r3, #0]
 800cea0:	6808      	ldr	r0, [r1, #0]
 800cea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea6:	f01e 0f10 	tst.w	lr, #16
 800ceaa:	bf08      	it	eq
 800ceac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ceb0:	f380 8809 	msr	PSP, r0
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	4770      	bx	lr
 800ceba:	bf00      	nop
 800cebc:	f3af 8000 	nop.w

0800cec0 <pxCurrentTCBConst>:
 800cec0:	2000086c 	.word	0x2000086c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cec4:	bf00      	nop
 800cec6:	bf00      	nop

0800cec8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
	__asm volatile
 800cece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced2:	f383 8811 	msr	BASEPRI, r3
 800ced6:	f3bf 8f6f 	isb	sy
 800ceda:	f3bf 8f4f 	dsb	sy
 800cede:	607b      	str	r3, [r7, #4]
}
 800cee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cee2:	f7fe fecd 	bl	800bc80 <xTaskIncrementTick>
 800cee6:	4603      	mov	r3, r0
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d003      	beq.n	800cef4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ceec:	4b06      	ldr	r3, [pc, #24]	; (800cf08 <xPortSysTickHandler+0x40>)
 800ceee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cef2:	601a      	str	r2, [r3, #0]
 800cef4:	2300      	movs	r3, #0
 800cef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	f383 8811 	msr	BASEPRI, r3
}
 800cefe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cf00:	bf00      	nop
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	e000ed04 	.word	0xe000ed04

0800cf0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf10:	4b08      	ldr	r3, [pc, #32]	; (800cf34 <vPortSetupTimerInterrupt+0x28>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a08      	ldr	r2, [pc, #32]	; (800cf38 <vPortSetupTimerInterrupt+0x2c>)
 800cf16:	fba2 2303 	umull	r2, r3, r2, r3
 800cf1a:	099b      	lsrs	r3, r3, #6
 800cf1c:	4a07      	ldr	r2, [pc, #28]	; (800cf3c <vPortSetupTimerInterrupt+0x30>)
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf22:	4b07      	ldr	r3, [pc, #28]	; (800cf40 <vPortSetupTimerInterrupt+0x34>)
 800cf24:	2207      	movs	r2, #7
 800cf26:	601a      	str	r2, [r3, #0]
}
 800cf28:	bf00      	nop
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf30:	4770      	bx	lr
 800cf32:	bf00      	nop
 800cf34:	20000014 	.word	0x20000014
 800cf38:	10624dd3 	.word	0x10624dd3
 800cf3c:	e000e014 	.word	0xe000e014
 800cf40:	e000e010 	.word	0xe000e010

0800cf44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cf54 <vPortEnableVFP+0x10>
 800cf48:	6801      	ldr	r1, [r0, #0]
 800cf4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cf4e:	6001      	str	r1, [r0, #0]
 800cf50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf52:	bf00      	nop
 800cf54:	e000ed88 	.word	0xe000ed88

0800cf58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800cf5e:	f3ef 8305 	mrs	r3, IPSR
 800cf62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2b0f      	cmp	r3, #15
 800cf68:	d914      	bls.n	800cf94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf6a:	4a17      	ldr	r2, [pc, #92]	; (800cfc8 <vPortValidateInterruptPriority+0x70>)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	4413      	add	r3, r2
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf74:	4b15      	ldr	r3, [pc, #84]	; (800cfcc <vPortValidateInterruptPriority+0x74>)
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	7afa      	ldrb	r2, [r7, #11]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d20a      	bcs.n	800cf94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	607b      	str	r3, [r7, #4]
}
 800cf90:	bf00      	nop
 800cf92:	e7fe      	b.n	800cf92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf94:	4b0e      	ldr	r3, [pc, #56]	; (800cfd0 <vPortValidateInterruptPriority+0x78>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf9c:	4b0d      	ldr	r3, [pc, #52]	; (800cfd4 <vPortValidateInterruptPriority+0x7c>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d90a      	bls.n	800cfba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa8:	f383 8811 	msr	BASEPRI, r3
 800cfac:	f3bf 8f6f 	isb	sy
 800cfb0:	f3bf 8f4f 	dsb	sy
 800cfb4:	603b      	str	r3, [r7, #0]
}
 800cfb6:	bf00      	nop
 800cfb8:	e7fe      	b.n	800cfb8 <vPortValidateInterruptPriority+0x60>
	}
 800cfba:	bf00      	nop
 800cfbc:	3714      	adds	r7, #20
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop
 800cfc8:	e000e3f0 	.word	0xe000e3f0
 800cfcc:	200009d4 	.word	0x200009d4
 800cfd0:	e000ed0c 	.word	0xe000ed0c
 800cfd4:	200009d8 	.word	0x200009d8

0800cfd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b08a      	sub	sp, #40	; 0x28
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cfe4:	f7fe fd80 	bl	800bae8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cfe8:	4b58      	ldr	r3, [pc, #352]	; (800d14c <pvPortMalloc+0x174>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d101      	bne.n	800cff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cff0:	f000 f910 	bl	800d214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cff4:	4b56      	ldr	r3, [pc, #344]	; (800d150 <pvPortMalloc+0x178>)
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	4013      	ands	r3, r2
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	f040 808e 	bne.w	800d11e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d01d      	beq.n	800d044 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d008:	2208      	movs	r2, #8
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	4413      	add	r3, r2
 800d00e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f003 0307 	and.w	r3, r3, #7
 800d016:	2b00      	cmp	r3, #0
 800d018:	d014      	beq.n	800d044 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f023 0307 	bic.w	r3, r3, #7
 800d020:	3308      	adds	r3, #8
 800d022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f003 0307 	and.w	r3, r3, #7
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00a      	beq.n	800d044 <pvPortMalloc+0x6c>
	__asm volatile
 800d02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d032:	f383 8811 	msr	BASEPRI, r3
 800d036:	f3bf 8f6f 	isb	sy
 800d03a:	f3bf 8f4f 	dsb	sy
 800d03e:	617b      	str	r3, [r7, #20]
}
 800d040:	bf00      	nop
 800d042:	e7fe      	b.n	800d042 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d069      	beq.n	800d11e <pvPortMalloc+0x146>
 800d04a:	4b42      	ldr	r3, [pc, #264]	; (800d154 <pvPortMalloc+0x17c>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	429a      	cmp	r2, r3
 800d052:	d864      	bhi.n	800d11e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d054:	4b40      	ldr	r3, [pc, #256]	; (800d158 <pvPortMalloc+0x180>)
 800d056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d058:	4b3f      	ldr	r3, [pc, #252]	; (800d158 <pvPortMalloc+0x180>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d05e:	e004      	b.n	800d06a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	429a      	cmp	r2, r3
 800d072:	d903      	bls.n	800d07c <pvPortMalloc+0xa4>
 800d074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d1f1      	bne.n	800d060 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d07c:	4b33      	ldr	r3, [pc, #204]	; (800d14c <pvPortMalloc+0x174>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d082:	429a      	cmp	r2, r3
 800d084:	d04b      	beq.n	800d11e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2208      	movs	r2, #8
 800d08c:	4413      	add	r3, r2
 800d08e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	6a3b      	ldr	r3, [r7, #32]
 800d096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09a:	685a      	ldr	r2, [r3, #4]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	1ad2      	subs	r2, r2, r3
 800d0a0:	2308      	movs	r3, #8
 800d0a2:	005b      	lsls	r3, r3, #1
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d91f      	bls.n	800d0e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d0a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	4413      	add	r3, r2
 800d0ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	f003 0307 	and.w	r3, r3, #7
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d00a      	beq.n	800d0d0 <pvPortMalloc+0xf8>
	__asm volatile
 800d0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0be:	f383 8811 	msr	BASEPRI, r3
 800d0c2:	f3bf 8f6f 	isb	sy
 800d0c6:	f3bf 8f4f 	dsb	sy
 800d0ca:	613b      	str	r3, [r7, #16]
}
 800d0cc:	bf00      	nop
 800d0ce:	e7fe      	b.n	800d0ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d2:	685a      	ldr	r2, [r3, #4]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	1ad2      	subs	r2, r2, r3
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d0e2:	69b8      	ldr	r0, [r7, #24]
 800d0e4:	f000 f8f8 	bl	800d2d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d0e8:	4b1a      	ldr	r3, [pc, #104]	; (800d154 <pvPortMalloc+0x17c>)
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	4a18      	ldr	r2, [pc, #96]	; (800d154 <pvPortMalloc+0x17c>)
 800d0f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d0f6:	4b17      	ldr	r3, [pc, #92]	; (800d154 <pvPortMalloc+0x17c>)
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	4b18      	ldr	r3, [pc, #96]	; (800d15c <pvPortMalloc+0x184>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d203      	bcs.n	800d10a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d102:	4b14      	ldr	r3, [pc, #80]	; (800d154 <pvPortMalloc+0x17c>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4a15      	ldr	r2, [pc, #84]	; (800d15c <pvPortMalloc+0x184>)
 800d108:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10c:	685a      	ldr	r2, [r3, #4]
 800d10e:	4b10      	ldr	r3, [pc, #64]	; (800d150 <pvPortMalloc+0x178>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	431a      	orrs	r2, r3
 800d114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d116:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11a:	2200      	movs	r2, #0
 800d11c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d11e:	f7fe fcf1 	bl	800bb04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d122:	69fb      	ldr	r3, [r7, #28]
 800d124:	f003 0307 	and.w	r3, r3, #7
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00a      	beq.n	800d142 <pvPortMalloc+0x16a>
	__asm volatile
 800d12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d130:	f383 8811 	msr	BASEPRI, r3
 800d134:	f3bf 8f6f 	isb	sy
 800d138:	f3bf 8f4f 	dsb	sy
 800d13c:	60fb      	str	r3, [r7, #12]
}
 800d13e:	bf00      	nop
 800d140:	e7fe      	b.n	800d140 <pvPortMalloc+0x168>
	return pvReturn;
 800d142:	69fb      	ldr	r3, [r7, #28]
}
 800d144:	4618      	mov	r0, r3
 800d146:	3728      	adds	r7, #40	; 0x28
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	200081e4 	.word	0x200081e4
 800d150:	200081f0 	.word	0x200081f0
 800d154:	200081e8 	.word	0x200081e8
 800d158:	200081dc 	.word	0x200081dc
 800d15c:	200081ec 	.word	0x200081ec

0800d160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d048      	beq.n	800d204 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d172:	2308      	movs	r3, #8
 800d174:	425b      	negs	r3, r3
 800d176:	697a      	ldr	r2, [r7, #20]
 800d178:	4413      	add	r3, r2
 800d17a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	685a      	ldr	r2, [r3, #4]
 800d184:	4b21      	ldr	r3, [pc, #132]	; (800d20c <vPortFree+0xac>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4013      	ands	r3, r2
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d10a      	bne.n	800d1a4 <vPortFree+0x44>
	__asm volatile
 800d18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d192:	f383 8811 	msr	BASEPRI, r3
 800d196:	f3bf 8f6f 	isb	sy
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	60fb      	str	r3, [r7, #12]
}
 800d1a0:	bf00      	nop
 800d1a2:	e7fe      	b.n	800d1a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00a      	beq.n	800d1c2 <vPortFree+0x62>
	__asm volatile
 800d1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b0:	f383 8811 	msr	BASEPRI, r3
 800d1b4:	f3bf 8f6f 	isb	sy
 800d1b8:	f3bf 8f4f 	dsb	sy
 800d1bc:	60bb      	str	r3, [r7, #8]
}
 800d1be:	bf00      	nop
 800d1c0:	e7fe      	b.n	800d1c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	685a      	ldr	r2, [r3, #4]
 800d1c6:	4b11      	ldr	r3, [pc, #68]	; (800d20c <vPortFree+0xac>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4013      	ands	r3, r2
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d019      	beq.n	800d204 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d115      	bne.n	800d204 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	685a      	ldr	r2, [r3, #4]
 800d1dc:	4b0b      	ldr	r3, [pc, #44]	; (800d20c <vPortFree+0xac>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	43db      	mvns	r3, r3
 800d1e2:	401a      	ands	r2, r3
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d1e8:	f7fe fc7e 	bl	800bae8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	685a      	ldr	r2, [r3, #4]
 800d1f0:	4b07      	ldr	r3, [pc, #28]	; (800d210 <vPortFree+0xb0>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4413      	add	r3, r2
 800d1f6:	4a06      	ldr	r2, [pc, #24]	; (800d210 <vPortFree+0xb0>)
 800d1f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d1fa:	6938      	ldr	r0, [r7, #16]
 800d1fc:	f000 f86c 	bl	800d2d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d200:	f7fe fc80 	bl	800bb04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d204:	bf00      	nop
 800d206:	3718      	adds	r7, #24
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	200081f0 	.word	0x200081f0
 800d210:	200081e8 	.word	0x200081e8

0800d214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d214:	b480      	push	{r7}
 800d216:	b085      	sub	sp, #20
 800d218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d21a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800d21e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d220:	4b27      	ldr	r3, [pc, #156]	; (800d2c0 <prvHeapInit+0xac>)
 800d222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f003 0307 	and.w	r3, r3, #7
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00c      	beq.n	800d248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	3307      	adds	r3, #7
 800d232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f023 0307 	bic.w	r3, r3, #7
 800d23a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d23c:	68ba      	ldr	r2, [r7, #8]
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	1ad3      	subs	r3, r2, r3
 800d242:	4a1f      	ldr	r2, [pc, #124]	; (800d2c0 <prvHeapInit+0xac>)
 800d244:	4413      	add	r3, r2
 800d246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d24c:	4a1d      	ldr	r2, [pc, #116]	; (800d2c4 <prvHeapInit+0xb0>)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d252:	4b1c      	ldr	r3, [pc, #112]	; (800d2c4 <prvHeapInit+0xb0>)
 800d254:	2200      	movs	r2, #0
 800d256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	68ba      	ldr	r2, [r7, #8]
 800d25c:	4413      	add	r3, r2
 800d25e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d260:	2208      	movs	r2, #8
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	1a9b      	subs	r3, r3, r2
 800d266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f023 0307 	bic.w	r3, r3, #7
 800d26e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	4a15      	ldr	r2, [pc, #84]	; (800d2c8 <prvHeapInit+0xb4>)
 800d274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d276:	4b14      	ldr	r3, [pc, #80]	; (800d2c8 <prvHeapInit+0xb4>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	2200      	movs	r2, #0
 800d27c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d27e:	4b12      	ldr	r3, [pc, #72]	; (800d2c8 <prvHeapInit+0xb4>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2200      	movs	r2, #0
 800d284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	68fa      	ldr	r2, [r7, #12]
 800d28e:	1ad2      	subs	r2, r2, r3
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d294:	4b0c      	ldr	r3, [pc, #48]	; (800d2c8 <prvHeapInit+0xb4>)
 800d296:	681a      	ldr	r2, [r3, #0]
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	4a0a      	ldr	r2, [pc, #40]	; (800d2cc <prvHeapInit+0xb8>)
 800d2a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	4a09      	ldr	r2, [pc, #36]	; (800d2d0 <prvHeapInit+0xbc>)
 800d2aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d2ac:	4b09      	ldr	r3, [pc, #36]	; (800d2d4 <prvHeapInit+0xc0>)
 800d2ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d2b2:	601a      	str	r2, [r3, #0]
}
 800d2b4:	bf00      	nop
 800d2b6:	3714      	adds	r7, #20
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr
 800d2c0:	200009dc 	.word	0x200009dc
 800d2c4:	200081dc 	.word	0x200081dc
 800d2c8:	200081e4 	.word	0x200081e4
 800d2cc:	200081ec 	.word	0x200081ec
 800d2d0:	200081e8 	.word	0x200081e8
 800d2d4:	200081f0 	.word	0x200081f0

0800d2d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b085      	sub	sp, #20
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d2e0:	4b28      	ldr	r3, [pc, #160]	; (800d384 <prvInsertBlockIntoFreeList+0xac>)
 800d2e2:	60fb      	str	r3, [r7, #12]
 800d2e4:	e002      	b.n	800d2ec <prvInsertBlockIntoFreeList+0x14>
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	60fb      	str	r3, [r7, #12]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d8f7      	bhi.n	800d2e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	68ba      	ldr	r2, [r7, #8]
 800d300:	4413      	add	r3, r2
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	429a      	cmp	r2, r3
 800d306:	d108      	bne.n	800d31a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	685a      	ldr	r2, [r3, #4]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	441a      	add	r2, r3
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	68ba      	ldr	r2, [r7, #8]
 800d324:	441a      	add	r2, r3
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d118      	bne.n	800d360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	4b15      	ldr	r3, [pc, #84]	; (800d388 <prvInsertBlockIntoFreeList+0xb0>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	429a      	cmp	r2, r3
 800d338:	d00d      	beq.n	800d356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	685a      	ldr	r2, [r3, #4]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	441a      	add	r2, r3
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	601a      	str	r2, [r3, #0]
 800d354:	e008      	b.n	800d368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d356:	4b0c      	ldr	r3, [pc, #48]	; (800d388 <prvInsertBlockIntoFreeList+0xb0>)
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	601a      	str	r2, [r3, #0]
 800d35e:	e003      	b.n	800d368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d368:	68fa      	ldr	r2, [r7, #12]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d002      	beq.n	800d376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d376:	bf00      	nop
 800d378:	3714      	adds	r7, #20
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr
 800d382:	bf00      	nop
 800d384:	200081dc 	.word	0x200081dc
 800d388:	200081e4 	.word	0x200081e4

0800d38c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800d38c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d3c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d390:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d392:	e003      	b.n	800d39c <LoopCopyDataInit>

0800d394 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d394:	4b0c      	ldr	r3, [pc, #48]	; (800d3c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d396:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d398:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d39a:	3104      	adds	r1, #4

0800d39c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d39c:	480b      	ldr	r0, [pc, #44]	; (800d3cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d39e:	4b0c      	ldr	r3, [pc, #48]	; (800d3d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d3a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d3a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d3a4:	d3f6      	bcc.n	800d394 <CopyDataInit>
  ldr  r2, =_sbss
 800d3a6:	4a0b      	ldr	r2, [pc, #44]	; (800d3d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d3a8:	e002      	b.n	800d3b0 <LoopFillZerobss>

0800d3aa <FillZerobss>:

/* Zero fill the bss segment. */  
 FillZerobss:
  movs  r3, #0
 800d3aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d3ac:	f842 3b04 	str.w	r3, [r2], #4

0800d3b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d3b0:	4b09      	ldr	r3, [pc, #36]	; (800d3d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d3b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d3b4:	d3f9      	bcc.n	800d3aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d3b6:	f7fd f953 	bl	800a660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d3ba:	f000 f817 	bl	800d3ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d3be:	f7f6 fbe9 	bl	8003b94 <main>
  bx  lr    
 800d3c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d3c4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800d3c8:	08010df4 	.word	0x08010df4
  ldr  r0, =_sdata
 800d3cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d3d0:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 800d3d4:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 800d3d8:	20008208 	.word	0x20008208

0800d3dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d3dc:	e7fe      	b.n	800d3dc <ADC_IRQHandler>
	...

0800d3e0 <__errno>:
 800d3e0:	4b01      	ldr	r3, [pc, #4]	; (800d3e8 <__errno+0x8>)
 800d3e2:	6818      	ldr	r0, [r3, #0]
 800d3e4:	4770      	bx	lr
 800d3e6:	bf00      	nop
 800d3e8:	2000001c 	.word	0x2000001c

0800d3ec <__libc_init_array>:
 800d3ec:	b570      	push	{r4, r5, r6, lr}
 800d3ee:	4d0d      	ldr	r5, [pc, #52]	; (800d424 <__libc_init_array+0x38>)
 800d3f0:	4c0d      	ldr	r4, [pc, #52]	; (800d428 <__libc_init_array+0x3c>)
 800d3f2:	1b64      	subs	r4, r4, r5
 800d3f4:	10a4      	asrs	r4, r4, #2
 800d3f6:	2600      	movs	r6, #0
 800d3f8:	42a6      	cmp	r6, r4
 800d3fa:	d109      	bne.n	800d410 <__libc_init_array+0x24>
 800d3fc:	4d0b      	ldr	r5, [pc, #44]	; (800d42c <__libc_init_array+0x40>)
 800d3fe:	4c0c      	ldr	r4, [pc, #48]	; (800d430 <__libc_init_array+0x44>)
 800d400:	f002 ff8e 	bl	8010320 <_init>
 800d404:	1b64      	subs	r4, r4, r5
 800d406:	10a4      	asrs	r4, r4, #2
 800d408:	2600      	movs	r6, #0
 800d40a:	42a6      	cmp	r6, r4
 800d40c:	d105      	bne.n	800d41a <__libc_init_array+0x2e>
 800d40e:	bd70      	pop	{r4, r5, r6, pc}
 800d410:	f855 3b04 	ldr.w	r3, [r5], #4
 800d414:	4798      	blx	r3
 800d416:	3601      	adds	r6, #1
 800d418:	e7ee      	b.n	800d3f8 <__libc_init_array+0xc>
 800d41a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d41e:	4798      	blx	r3
 800d420:	3601      	adds	r6, #1
 800d422:	e7f2      	b.n	800d40a <__libc_init_array+0x1e>
 800d424:	08010dec 	.word	0x08010dec
 800d428:	08010dec 	.word	0x08010dec
 800d42c:	08010dec 	.word	0x08010dec
 800d430:	08010df0 	.word	0x08010df0

0800d434 <malloc>:
 800d434:	4b02      	ldr	r3, [pc, #8]	; (800d440 <malloc+0xc>)
 800d436:	4601      	mov	r1, r0
 800d438:	6818      	ldr	r0, [r3, #0]
 800d43a:	f000 b88d 	b.w	800d558 <_malloc_r>
 800d43e:	bf00      	nop
 800d440:	2000001c 	.word	0x2000001c

0800d444 <free>:
 800d444:	4b02      	ldr	r3, [pc, #8]	; (800d450 <free+0xc>)
 800d446:	4601      	mov	r1, r0
 800d448:	6818      	ldr	r0, [r3, #0]
 800d44a:	f000 b819 	b.w	800d480 <_free_r>
 800d44e:	bf00      	nop
 800d450:	2000001c 	.word	0x2000001c

0800d454 <memcpy>:
 800d454:	440a      	add	r2, r1
 800d456:	4291      	cmp	r1, r2
 800d458:	f100 33ff 	add.w	r3, r0, #4294967295
 800d45c:	d100      	bne.n	800d460 <memcpy+0xc>
 800d45e:	4770      	bx	lr
 800d460:	b510      	push	{r4, lr}
 800d462:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d46a:	4291      	cmp	r1, r2
 800d46c:	d1f9      	bne.n	800d462 <memcpy+0xe>
 800d46e:	bd10      	pop	{r4, pc}

0800d470 <memset>:
 800d470:	4402      	add	r2, r0
 800d472:	4603      	mov	r3, r0
 800d474:	4293      	cmp	r3, r2
 800d476:	d100      	bne.n	800d47a <memset+0xa>
 800d478:	4770      	bx	lr
 800d47a:	f803 1b01 	strb.w	r1, [r3], #1
 800d47e:	e7f9      	b.n	800d474 <memset+0x4>

0800d480 <_free_r>:
 800d480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d482:	2900      	cmp	r1, #0
 800d484:	d044      	beq.n	800d510 <_free_r+0x90>
 800d486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d48a:	9001      	str	r0, [sp, #4]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f1a1 0404 	sub.w	r4, r1, #4
 800d492:	bfb8      	it	lt
 800d494:	18e4      	addlt	r4, r4, r3
 800d496:	f001 fd1f 	bl	800eed8 <__malloc_lock>
 800d49a:	4a1e      	ldr	r2, [pc, #120]	; (800d514 <_free_r+0x94>)
 800d49c:	9801      	ldr	r0, [sp, #4]
 800d49e:	6813      	ldr	r3, [r2, #0]
 800d4a0:	b933      	cbnz	r3, 800d4b0 <_free_r+0x30>
 800d4a2:	6063      	str	r3, [r4, #4]
 800d4a4:	6014      	str	r4, [r2, #0]
 800d4a6:	b003      	add	sp, #12
 800d4a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d4ac:	f001 bd1a 	b.w	800eee4 <__malloc_unlock>
 800d4b0:	42a3      	cmp	r3, r4
 800d4b2:	d908      	bls.n	800d4c6 <_free_r+0x46>
 800d4b4:	6825      	ldr	r5, [r4, #0]
 800d4b6:	1961      	adds	r1, r4, r5
 800d4b8:	428b      	cmp	r3, r1
 800d4ba:	bf01      	itttt	eq
 800d4bc:	6819      	ldreq	r1, [r3, #0]
 800d4be:	685b      	ldreq	r3, [r3, #4]
 800d4c0:	1949      	addeq	r1, r1, r5
 800d4c2:	6021      	streq	r1, [r4, #0]
 800d4c4:	e7ed      	b.n	800d4a2 <_free_r+0x22>
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	b10b      	cbz	r3, 800d4d0 <_free_r+0x50>
 800d4cc:	42a3      	cmp	r3, r4
 800d4ce:	d9fa      	bls.n	800d4c6 <_free_r+0x46>
 800d4d0:	6811      	ldr	r1, [r2, #0]
 800d4d2:	1855      	adds	r5, r2, r1
 800d4d4:	42a5      	cmp	r5, r4
 800d4d6:	d10b      	bne.n	800d4f0 <_free_r+0x70>
 800d4d8:	6824      	ldr	r4, [r4, #0]
 800d4da:	4421      	add	r1, r4
 800d4dc:	1854      	adds	r4, r2, r1
 800d4de:	42a3      	cmp	r3, r4
 800d4e0:	6011      	str	r1, [r2, #0]
 800d4e2:	d1e0      	bne.n	800d4a6 <_free_r+0x26>
 800d4e4:	681c      	ldr	r4, [r3, #0]
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	6053      	str	r3, [r2, #4]
 800d4ea:	4421      	add	r1, r4
 800d4ec:	6011      	str	r1, [r2, #0]
 800d4ee:	e7da      	b.n	800d4a6 <_free_r+0x26>
 800d4f0:	d902      	bls.n	800d4f8 <_free_r+0x78>
 800d4f2:	230c      	movs	r3, #12
 800d4f4:	6003      	str	r3, [r0, #0]
 800d4f6:	e7d6      	b.n	800d4a6 <_free_r+0x26>
 800d4f8:	6825      	ldr	r5, [r4, #0]
 800d4fa:	1961      	adds	r1, r4, r5
 800d4fc:	428b      	cmp	r3, r1
 800d4fe:	bf04      	itt	eq
 800d500:	6819      	ldreq	r1, [r3, #0]
 800d502:	685b      	ldreq	r3, [r3, #4]
 800d504:	6063      	str	r3, [r4, #4]
 800d506:	bf04      	itt	eq
 800d508:	1949      	addeq	r1, r1, r5
 800d50a:	6021      	streq	r1, [r4, #0]
 800d50c:	6054      	str	r4, [r2, #4]
 800d50e:	e7ca      	b.n	800d4a6 <_free_r+0x26>
 800d510:	b003      	add	sp, #12
 800d512:	bd30      	pop	{r4, r5, pc}
 800d514:	200081f4 	.word	0x200081f4

0800d518 <sbrk_aligned>:
 800d518:	b570      	push	{r4, r5, r6, lr}
 800d51a:	4e0e      	ldr	r6, [pc, #56]	; (800d554 <sbrk_aligned+0x3c>)
 800d51c:	460c      	mov	r4, r1
 800d51e:	6831      	ldr	r1, [r6, #0]
 800d520:	4605      	mov	r5, r0
 800d522:	b911      	cbnz	r1, 800d52a <sbrk_aligned+0x12>
 800d524:	f000 fcf6 	bl	800df14 <_sbrk_r>
 800d528:	6030      	str	r0, [r6, #0]
 800d52a:	4621      	mov	r1, r4
 800d52c:	4628      	mov	r0, r5
 800d52e:	f000 fcf1 	bl	800df14 <_sbrk_r>
 800d532:	1c43      	adds	r3, r0, #1
 800d534:	d00a      	beq.n	800d54c <sbrk_aligned+0x34>
 800d536:	1cc4      	adds	r4, r0, #3
 800d538:	f024 0403 	bic.w	r4, r4, #3
 800d53c:	42a0      	cmp	r0, r4
 800d53e:	d007      	beq.n	800d550 <sbrk_aligned+0x38>
 800d540:	1a21      	subs	r1, r4, r0
 800d542:	4628      	mov	r0, r5
 800d544:	f000 fce6 	bl	800df14 <_sbrk_r>
 800d548:	3001      	adds	r0, #1
 800d54a:	d101      	bne.n	800d550 <sbrk_aligned+0x38>
 800d54c:	f04f 34ff 	mov.w	r4, #4294967295
 800d550:	4620      	mov	r0, r4
 800d552:	bd70      	pop	{r4, r5, r6, pc}
 800d554:	200081f8 	.word	0x200081f8

0800d558 <_malloc_r>:
 800d558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d55c:	1ccd      	adds	r5, r1, #3
 800d55e:	f025 0503 	bic.w	r5, r5, #3
 800d562:	3508      	adds	r5, #8
 800d564:	2d0c      	cmp	r5, #12
 800d566:	bf38      	it	cc
 800d568:	250c      	movcc	r5, #12
 800d56a:	2d00      	cmp	r5, #0
 800d56c:	4607      	mov	r7, r0
 800d56e:	db01      	blt.n	800d574 <_malloc_r+0x1c>
 800d570:	42a9      	cmp	r1, r5
 800d572:	d905      	bls.n	800d580 <_malloc_r+0x28>
 800d574:	230c      	movs	r3, #12
 800d576:	603b      	str	r3, [r7, #0]
 800d578:	2600      	movs	r6, #0
 800d57a:	4630      	mov	r0, r6
 800d57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d580:	4e2e      	ldr	r6, [pc, #184]	; (800d63c <_malloc_r+0xe4>)
 800d582:	f001 fca9 	bl	800eed8 <__malloc_lock>
 800d586:	6833      	ldr	r3, [r6, #0]
 800d588:	461c      	mov	r4, r3
 800d58a:	bb34      	cbnz	r4, 800d5da <_malloc_r+0x82>
 800d58c:	4629      	mov	r1, r5
 800d58e:	4638      	mov	r0, r7
 800d590:	f7ff ffc2 	bl	800d518 <sbrk_aligned>
 800d594:	1c43      	adds	r3, r0, #1
 800d596:	4604      	mov	r4, r0
 800d598:	d14d      	bne.n	800d636 <_malloc_r+0xde>
 800d59a:	6834      	ldr	r4, [r6, #0]
 800d59c:	4626      	mov	r6, r4
 800d59e:	2e00      	cmp	r6, #0
 800d5a0:	d140      	bne.n	800d624 <_malloc_r+0xcc>
 800d5a2:	6823      	ldr	r3, [r4, #0]
 800d5a4:	4631      	mov	r1, r6
 800d5a6:	4638      	mov	r0, r7
 800d5a8:	eb04 0803 	add.w	r8, r4, r3
 800d5ac:	f000 fcb2 	bl	800df14 <_sbrk_r>
 800d5b0:	4580      	cmp	r8, r0
 800d5b2:	d13a      	bne.n	800d62a <_malloc_r+0xd2>
 800d5b4:	6821      	ldr	r1, [r4, #0]
 800d5b6:	3503      	adds	r5, #3
 800d5b8:	1a6d      	subs	r5, r5, r1
 800d5ba:	f025 0503 	bic.w	r5, r5, #3
 800d5be:	3508      	adds	r5, #8
 800d5c0:	2d0c      	cmp	r5, #12
 800d5c2:	bf38      	it	cc
 800d5c4:	250c      	movcc	r5, #12
 800d5c6:	4629      	mov	r1, r5
 800d5c8:	4638      	mov	r0, r7
 800d5ca:	f7ff ffa5 	bl	800d518 <sbrk_aligned>
 800d5ce:	3001      	adds	r0, #1
 800d5d0:	d02b      	beq.n	800d62a <_malloc_r+0xd2>
 800d5d2:	6823      	ldr	r3, [r4, #0]
 800d5d4:	442b      	add	r3, r5
 800d5d6:	6023      	str	r3, [r4, #0]
 800d5d8:	e00e      	b.n	800d5f8 <_malloc_r+0xa0>
 800d5da:	6822      	ldr	r2, [r4, #0]
 800d5dc:	1b52      	subs	r2, r2, r5
 800d5de:	d41e      	bmi.n	800d61e <_malloc_r+0xc6>
 800d5e0:	2a0b      	cmp	r2, #11
 800d5e2:	d916      	bls.n	800d612 <_malloc_r+0xba>
 800d5e4:	1961      	adds	r1, r4, r5
 800d5e6:	42a3      	cmp	r3, r4
 800d5e8:	6025      	str	r5, [r4, #0]
 800d5ea:	bf18      	it	ne
 800d5ec:	6059      	strne	r1, [r3, #4]
 800d5ee:	6863      	ldr	r3, [r4, #4]
 800d5f0:	bf08      	it	eq
 800d5f2:	6031      	streq	r1, [r6, #0]
 800d5f4:	5162      	str	r2, [r4, r5]
 800d5f6:	604b      	str	r3, [r1, #4]
 800d5f8:	4638      	mov	r0, r7
 800d5fa:	f104 060b 	add.w	r6, r4, #11
 800d5fe:	f001 fc71 	bl	800eee4 <__malloc_unlock>
 800d602:	f026 0607 	bic.w	r6, r6, #7
 800d606:	1d23      	adds	r3, r4, #4
 800d608:	1af2      	subs	r2, r6, r3
 800d60a:	d0b6      	beq.n	800d57a <_malloc_r+0x22>
 800d60c:	1b9b      	subs	r3, r3, r6
 800d60e:	50a3      	str	r3, [r4, r2]
 800d610:	e7b3      	b.n	800d57a <_malloc_r+0x22>
 800d612:	6862      	ldr	r2, [r4, #4]
 800d614:	42a3      	cmp	r3, r4
 800d616:	bf0c      	ite	eq
 800d618:	6032      	streq	r2, [r6, #0]
 800d61a:	605a      	strne	r2, [r3, #4]
 800d61c:	e7ec      	b.n	800d5f8 <_malloc_r+0xa0>
 800d61e:	4623      	mov	r3, r4
 800d620:	6864      	ldr	r4, [r4, #4]
 800d622:	e7b2      	b.n	800d58a <_malloc_r+0x32>
 800d624:	4634      	mov	r4, r6
 800d626:	6876      	ldr	r6, [r6, #4]
 800d628:	e7b9      	b.n	800d59e <_malloc_r+0x46>
 800d62a:	230c      	movs	r3, #12
 800d62c:	603b      	str	r3, [r7, #0]
 800d62e:	4638      	mov	r0, r7
 800d630:	f001 fc58 	bl	800eee4 <__malloc_unlock>
 800d634:	e7a1      	b.n	800d57a <_malloc_r+0x22>
 800d636:	6025      	str	r5, [r4, #0]
 800d638:	e7de      	b.n	800d5f8 <_malloc_r+0xa0>
 800d63a:	bf00      	nop
 800d63c:	200081f4 	.word	0x200081f4

0800d640 <__cvt>:
 800d640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d644:	ec55 4b10 	vmov	r4, r5, d0
 800d648:	2d00      	cmp	r5, #0
 800d64a:	460e      	mov	r6, r1
 800d64c:	4619      	mov	r1, r3
 800d64e:	462b      	mov	r3, r5
 800d650:	bfbb      	ittet	lt
 800d652:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d656:	461d      	movlt	r5, r3
 800d658:	2300      	movge	r3, #0
 800d65a:	232d      	movlt	r3, #45	; 0x2d
 800d65c:	700b      	strb	r3, [r1, #0]
 800d65e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d660:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d664:	4691      	mov	r9, r2
 800d666:	f023 0820 	bic.w	r8, r3, #32
 800d66a:	bfbc      	itt	lt
 800d66c:	4622      	movlt	r2, r4
 800d66e:	4614      	movlt	r4, r2
 800d670:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d674:	d005      	beq.n	800d682 <__cvt+0x42>
 800d676:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d67a:	d100      	bne.n	800d67e <__cvt+0x3e>
 800d67c:	3601      	adds	r6, #1
 800d67e:	2102      	movs	r1, #2
 800d680:	e000      	b.n	800d684 <__cvt+0x44>
 800d682:	2103      	movs	r1, #3
 800d684:	ab03      	add	r3, sp, #12
 800d686:	9301      	str	r3, [sp, #4]
 800d688:	ab02      	add	r3, sp, #8
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	ec45 4b10 	vmov	d0, r4, r5
 800d690:	4653      	mov	r3, sl
 800d692:	4632      	mov	r2, r6
 800d694:	f000 fd34 	bl	800e100 <_dtoa_r>
 800d698:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d69c:	4607      	mov	r7, r0
 800d69e:	d102      	bne.n	800d6a6 <__cvt+0x66>
 800d6a0:	f019 0f01 	tst.w	r9, #1
 800d6a4:	d022      	beq.n	800d6ec <__cvt+0xac>
 800d6a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d6aa:	eb07 0906 	add.w	r9, r7, r6
 800d6ae:	d110      	bne.n	800d6d2 <__cvt+0x92>
 800d6b0:	783b      	ldrb	r3, [r7, #0]
 800d6b2:	2b30      	cmp	r3, #48	; 0x30
 800d6b4:	d10a      	bne.n	800d6cc <__cvt+0x8c>
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	4629      	mov	r1, r5
 800d6be:	f7f3 fa13 	bl	8000ae8 <__aeabi_dcmpeq>
 800d6c2:	b918      	cbnz	r0, 800d6cc <__cvt+0x8c>
 800d6c4:	f1c6 0601 	rsb	r6, r6, #1
 800d6c8:	f8ca 6000 	str.w	r6, [sl]
 800d6cc:	f8da 3000 	ldr.w	r3, [sl]
 800d6d0:	4499      	add	r9, r3
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	4629      	mov	r1, r5
 800d6da:	f7f3 fa05 	bl	8000ae8 <__aeabi_dcmpeq>
 800d6de:	b108      	cbz	r0, 800d6e4 <__cvt+0xa4>
 800d6e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d6e4:	2230      	movs	r2, #48	; 0x30
 800d6e6:	9b03      	ldr	r3, [sp, #12]
 800d6e8:	454b      	cmp	r3, r9
 800d6ea:	d307      	bcc.n	800d6fc <__cvt+0xbc>
 800d6ec:	9b03      	ldr	r3, [sp, #12]
 800d6ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6f0:	1bdb      	subs	r3, r3, r7
 800d6f2:	4638      	mov	r0, r7
 800d6f4:	6013      	str	r3, [r2, #0]
 800d6f6:	b004      	add	sp, #16
 800d6f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6fc:	1c59      	adds	r1, r3, #1
 800d6fe:	9103      	str	r1, [sp, #12]
 800d700:	701a      	strb	r2, [r3, #0]
 800d702:	e7f0      	b.n	800d6e6 <__cvt+0xa6>

0800d704 <__exponent>:
 800d704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d706:	4603      	mov	r3, r0
 800d708:	2900      	cmp	r1, #0
 800d70a:	bfb8      	it	lt
 800d70c:	4249      	neglt	r1, r1
 800d70e:	f803 2b02 	strb.w	r2, [r3], #2
 800d712:	bfb4      	ite	lt
 800d714:	222d      	movlt	r2, #45	; 0x2d
 800d716:	222b      	movge	r2, #43	; 0x2b
 800d718:	2909      	cmp	r1, #9
 800d71a:	7042      	strb	r2, [r0, #1]
 800d71c:	dd2a      	ble.n	800d774 <__exponent+0x70>
 800d71e:	f10d 0407 	add.w	r4, sp, #7
 800d722:	46a4      	mov	ip, r4
 800d724:	270a      	movs	r7, #10
 800d726:	46a6      	mov	lr, r4
 800d728:	460a      	mov	r2, r1
 800d72a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d72e:	fb07 1516 	mls	r5, r7, r6, r1
 800d732:	3530      	adds	r5, #48	; 0x30
 800d734:	2a63      	cmp	r2, #99	; 0x63
 800d736:	f104 34ff 	add.w	r4, r4, #4294967295
 800d73a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d73e:	4631      	mov	r1, r6
 800d740:	dcf1      	bgt.n	800d726 <__exponent+0x22>
 800d742:	3130      	adds	r1, #48	; 0x30
 800d744:	f1ae 0502 	sub.w	r5, lr, #2
 800d748:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d74c:	1c44      	adds	r4, r0, #1
 800d74e:	4629      	mov	r1, r5
 800d750:	4561      	cmp	r1, ip
 800d752:	d30a      	bcc.n	800d76a <__exponent+0x66>
 800d754:	f10d 0209 	add.w	r2, sp, #9
 800d758:	eba2 020e 	sub.w	r2, r2, lr
 800d75c:	4565      	cmp	r5, ip
 800d75e:	bf88      	it	hi
 800d760:	2200      	movhi	r2, #0
 800d762:	4413      	add	r3, r2
 800d764:	1a18      	subs	r0, r3, r0
 800d766:	b003      	add	sp, #12
 800d768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d76a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d76e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d772:	e7ed      	b.n	800d750 <__exponent+0x4c>
 800d774:	2330      	movs	r3, #48	; 0x30
 800d776:	3130      	adds	r1, #48	; 0x30
 800d778:	7083      	strb	r3, [r0, #2]
 800d77a:	70c1      	strb	r1, [r0, #3]
 800d77c:	1d03      	adds	r3, r0, #4
 800d77e:	e7f1      	b.n	800d764 <__exponent+0x60>

0800d780 <_printf_float>:
 800d780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d784:	ed2d 8b02 	vpush	{d8}
 800d788:	b08d      	sub	sp, #52	; 0x34
 800d78a:	460c      	mov	r4, r1
 800d78c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d790:	4616      	mov	r6, r2
 800d792:	461f      	mov	r7, r3
 800d794:	4605      	mov	r5, r0
 800d796:	f001 fb97 	bl	800eec8 <_localeconv_r>
 800d79a:	f8d0 a000 	ldr.w	sl, [r0]
 800d79e:	4650      	mov	r0, sl
 800d7a0:	f7f2 fd26 	bl	80001f0 <strlen>
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	930a      	str	r3, [sp, #40]	; 0x28
 800d7a8:	6823      	ldr	r3, [r4, #0]
 800d7aa:	9305      	str	r3, [sp, #20]
 800d7ac:	f8d8 3000 	ldr.w	r3, [r8]
 800d7b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d7b4:	3307      	adds	r3, #7
 800d7b6:	f023 0307 	bic.w	r3, r3, #7
 800d7ba:	f103 0208 	add.w	r2, r3, #8
 800d7be:	f8c8 2000 	str.w	r2, [r8]
 800d7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d7ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d7ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d7d2:	9307      	str	r3, [sp, #28]
 800d7d4:	f8cd 8018 	str.w	r8, [sp, #24]
 800d7d8:	ee08 0a10 	vmov	s16, r0
 800d7dc:	4b9f      	ldr	r3, [pc, #636]	; (800da5c <_printf_float+0x2dc>)
 800d7de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d7e6:	f7f3 f9b1 	bl	8000b4c <__aeabi_dcmpun>
 800d7ea:	bb88      	cbnz	r0, 800d850 <_printf_float+0xd0>
 800d7ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7f0:	4b9a      	ldr	r3, [pc, #616]	; (800da5c <_printf_float+0x2dc>)
 800d7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d7f6:	f7f3 f98b 	bl	8000b10 <__aeabi_dcmple>
 800d7fa:	bb48      	cbnz	r0, 800d850 <_printf_float+0xd0>
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	2300      	movs	r3, #0
 800d800:	4640      	mov	r0, r8
 800d802:	4649      	mov	r1, r9
 800d804:	f7f3 f97a 	bl	8000afc <__aeabi_dcmplt>
 800d808:	b110      	cbz	r0, 800d810 <_printf_float+0x90>
 800d80a:	232d      	movs	r3, #45	; 0x2d
 800d80c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d810:	4b93      	ldr	r3, [pc, #588]	; (800da60 <_printf_float+0x2e0>)
 800d812:	4894      	ldr	r0, [pc, #592]	; (800da64 <_printf_float+0x2e4>)
 800d814:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d818:	bf94      	ite	ls
 800d81a:	4698      	movls	r8, r3
 800d81c:	4680      	movhi	r8, r0
 800d81e:	2303      	movs	r3, #3
 800d820:	6123      	str	r3, [r4, #16]
 800d822:	9b05      	ldr	r3, [sp, #20]
 800d824:	f023 0204 	bic.w	r2, r3, #4
 800d828:	6022      	str	r2, [r4, #0]
 800d82a:	f04f 0900 	mov.w	r9, #0
 800d82e:	9700      	str	r7, [sp, #0]
 800d830:	4633      	mov	r3, r6
 800d832:	aa0b      	add	r2, sp, #44	; 0x2c
 800d834:	4621      	mov	r1, r4
 800d836:	4628      	mov	r0, r5
 800d838:	f000 f9d8 	bl	800dbec <_printf_common>
 800d83c:	3001      	adds	r0, #1
 800d83e:	f040 8090 	bne.w	800d962 <_printf_float+0x1e2>
 800d842:	f04f 30ff 	mov.w	r0, #4294967295
 800d846:	b00d      	add	sp, #52	; 0x34
 800d848:	ecbd 8b02 	vpop	{d8}
 800d84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d850:	4642      	mov	r2, r8
 800d852:	464b      	mov	r3, r9
 800d854:	4640      	mov	r0, r8
 800d856:	4649      	mov	r1, r9
 800d858:	f7f3 f978 	bl	8000b4c <__aeabi_dcmpun>
 800d85c:	b140      	cbz	r0, 800d870 <_printf_float+0xf0>
 800d85e:	464b      	mov	r3, r9
 800d860:	2b00      	cmp	r3, #0
 800d862:	bfbc      	itt	lt
 800d864:	232d      	movlt	r3, #45	; 0x2d
 800d866:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d86a:	487f      	ldr	r0, [pc, #508]	; (800da68 <_printf_float+0x2e8>)
 800d86c:	4b7f      	ldr	r3, [pc, #508]	; (800da6c <_printf_float+0x2ec>)
 800d86e:	e7d1      	b.n	800d814 <_printf_float+0x94>
 800d870:	6863      	ldr	r3, [r4, #4]
 800d872:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d876:	9206      	str	r2, [sp, #24]
 800d878:	1c5a      	adds	r2, r3, #1
 800d87a:	d13f      	bne.n	800d8fc <_printf_float+0x17c>
 800d87c:	2306      	movs	r3, #6
 800d87e:	6063      	str	r3, [r4, #4]
 800d880:	9b05      	ldr	r3, [sp, #20]
 800d882:	6861      	ldr	r1, [r4, #4]
 800d884:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d888:	2300      	movs	r3, #0
 800d88a:	9303      	str	r3, [sp, #12]
 800d88c:	ab0a      	add	r3, sp, #40	; 0x28
 800d88e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d892:	ab09      	add	r3, sp, #36	; 0x24
 800d894:	ec49 8b10 	vmov	d0, r8, r9
 800d898:	9300      	str	r3, [sp, #0]
 800d89a:	6022      	str	r2, [r4, #0]
 800d89c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d8a0:	4628      	mov	r0, r5
 800d8a2:	f7ff fecd 	bl	800d640 <__cvt>
 800d8a6:	9b06      	ldr	r3, [sp, #24]
 800d8a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d8aa:	2b47      	cmp	r3, #71	; 0x47
 800d8ac:	4680      	mov	r8, r0
 800d8ae:	d108      	bne.n	800d8c2 <_printf_float+0x142>
 800d8b0:	1cc8      	adds	r0, r1, #3
 800d8b2:	db02      	blt.n	800d8ba <_printf_float+0x13a>
 800d8b4:	6863      	ldr	r3, [r4, #4]
 800d8b6:	4299      	cmp	r1, r3
 800d8b8:	dd41      	ble.n	800d93e <_printf_float+0x1be>
 800d8ba:	f1ab 0b02 	sub.w	fp, fp, #2
 800d8be:	fa5f fb8b 	uxtb.w	fp, fp
 800d8c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d8c6:	d820      	bhi.n	800d90a <_printf_float+0x18a>
 800d8c8:	3901      	subs	r1, #1
 800d8ca:	465a      	mov	r2, fp
 800d8cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d8d0:	9109      	str	r1, [sp, #36]	; 0x24
 800d8d2:	f7ff ff17 	bl	800d704 <__exponent>
 800d8d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8d8:	1813      	adds	r3, r2, r0
 800d8da:	2a01      	cmp	r2, #1
 800d8dc:	4681      	mov	r9, r0
 800d8de:	6123      	str	r3, [r4, #16]
 800d8e0:	dc02      	bgt.n	800d8e8 <_printf_float+0x168>
 800d8e2:	6822      	ldr	r2, [r4, #0]
 800d8e4:	07d2      	lsls	r2, r2, #31
 800d8e6:	d501      	bpl.n	800d8ec <_printf_float+0x16c>
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	6123      	str	r3, [r4, #16]
 800d8ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d09c      	beq.n	800d82e <_printf_float+0xae>
 800d8f4:	232d      	movs	r3, #45	; 0x2d
 800d8f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8fa:	e798      	b.n	800d82e <_printf_float+0xae>
 800d8fc:	9a06      	ldr	r2, [sp, #24]
 800d8fe:	2a47      	cmp	r2, #71	; 0x47
 800d900:	d1be      	bne.n	800d880 <_printf_float+0x100>
 800d902:	2b00      	cmp	r3, #0
 800d904:	d1bc      	bne.n	800d880 <_printf_float+0x100>
 800d906:	2301      	movs	r3, #1
 800d908:	e7b9      	b.n	800d87e <_printf_float+0xfe>
 800d90a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d90e:	d118      	bne.n	800d942 <_printf_float+0x1c2>
 800d910:	2900      	cmp	r1, #0
 800d912:	6863      	ldr	r3, [r4, #4]
 800d914:	dd0b      	ble.n	800d92e <_printf_float+0x1ae>
 800d916:	6121      	str	r1, [r4, #16]
 800d918:	b913      	cbnz	r3, 800d920 <_printf_float+0x1a0>
 800d91a:	6822      	ldr	r2, [r4, #0]
 800d91c:	07d0      	lsls	r0, r2, #31
 800d91e:	d502      	bpl.n	800d926 <_printf_float+0x1a6>
 800d920:	3301      	adds	r3, #1
 800d922:	440b      	add	r3, r1
 800d924:	6123      	str	r3, [r4, #16]
 800d926:	65a1      	str	r1, [r4, #88]	; 0x58
 800d928:	f04f 0900 	mov.w	r9, #0
 800d92c:	e7de      	b.n	800d8ec <_printf_float+0x16c>
 800d92e:	b913      	cbnz	r3, 800d936 <_printf_float+0x1b6>
 800d930:	6822      	ldr	r2, [r4, #0]
 800d932:	07d2      	lsls	r2, r2, #31
 800d934:	d501      	bpl.n	800d93a <_printf_float+0x1ba>
 800d936:	3302      	adds	r3, #2
 800d938:	e7f4      	b.n	800d924 <_printf_float+0x1a4>
 800d93a:	2301      	movs	r3, #1
 800d93c:	e7f2      	b.n	800d924 <_printf_float+0x1a4>
 800d93e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d944:	4299      	cmp	r1, r3
 800d946:	db05      	blt.n	800d954 <_printf_float+0x1d4>
 800d948:	6823      	ldr	r3, [r4, #0]
 800d94a:	6121      	str	r1, [r4, #16]
 800d94c:	07d8      	lsls	r0, r3, #31
 800d94e:	d5ea      	bpl.n	800d926 <_printf_float+0x1a6>
 800d950:	1c4b      	adds	r3, r1, #1
 800d952:	e7e7      	b.n	800d924 <_printf_float+0x1a4>
 800d954:	2900      	cmp	r1, #0
 800d956:	bfd4      	ite	le
 800d958:	f1c1 0202 	rsble	r2, r1, #2
 800d95c:	2201      	movgt	r2, #1
 800d95e:	4413      	add	r3, r2
 800d960:	e7e0      	b.n	800d924 <_printf_float+0x1a4>
 800d962:	6823      	ldr	r3, [r4, #0]
 800d964:	055a      	lsls	r2, r3, #21
 800d966:	d407      	bmi.n	800d978 <_printf_float+0x1f8>
 800d968:	6923      	ldr	r3, [r4, #16]
 800d96a:	4642      	mov	r2, r8
 800d96c:	4631      	mov	r1, r6
 800d96e:	4628      	mov	r0, r5
 800d970:	47b8      	blx	r7
 800d972:	3001      	adds	r0, #1
 800d974:	d12c      	bne.n	800d9d0 <_printf_float+0x250>
 800d976:	e764      	b.n	800d842 <_printf_float+0xc2>
 800d978:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d97c:	f240 80e0 	bls.w	800db40 <_printf_float+0x3c0>
 800d980:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d984:	2200      	movs	r2, #0
 800d986:	2300      	movs	r3, #0
 800d988:	f7f3 f8ae 	bl	8000ae8 <__aeabi_dcmpeq>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	d034      	beq.n	800d9fa <_printf_float+0x27a>
 800d990:	4a37      	ldr	r2, [pc, #220]	; (800da70 <_printf_float+0x2f0>)
 800d992:	2301      	movs	r3, #1
 800d994:	4631      	mov	r1, r6
 800d996:	4628      	mov	r0, r5
 800d998:	47b8      	blx	r7
 800d99a:	3001      	adds	r0, #1
 800d99c:	f43f af51 	beq.w	800d842 <_printf_float+0xc2>
 800d9a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	db02      	blt.n	800d9ae <_printf_float+0x22e>
 800d9a8:	6823      	ldr	r3, [r4, #0]
 800d9aa:	07d8      	lsls	r0, r3, #31
 800d9ac:	d510      	bpl.n	800d9d0 <_printf_float+0x250>
 800d9ae:	ee18 3a10 	vmov	r3, s16
 800d9b2:	4652      	mov	r2, sl
 800d9b4:	4631      	mov	r1, r6
 800d9b6:	4628      	mov	r0, r5
 800d9b8:	47b8      	blx	r7
 800d9ba:	3001      	adds	r0, #1
 800d9bc:	f43f af41 	beq.w	800d842 <_printf_float+0xc2>
 800d9c0:	f04f 0800 	mov.w	r8, #0
 800d9c4:	f104 091a 	add.w	r9, r4, #26
 800d9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9ca:	3b01      	subs	r3, #1
 800d9cc:	4543      	cmp	r3, r8
 800d9ce:	dc09      	bgt.n	800d9e4 <_printf_float+0x264>
 800d9d0:	6823      	ldr	r3, [r4, #0]
 800d9d2:	079b      	lsls	r3, r3, #30
 800d9d4:	f100 8105 	bmi.w	800dbe2 <_printf_float+0x462>
 800d9d8:	68e0      	ldr	r0, [r4, #12]
 800d9da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9dc:	4298      	cmp	r0, r3
 800d9de:	bfb8      	it	lt
 800d9e0:	4618      	movlt	r0, r3
 800d9e2:	e730      	b.n	800d846 <_printf_float+0xc6>
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	464a      	mov	r2, r9
 800d9e8:	4631      	mov	r1, r6
 800d9ea:	4628      	mov	r0, r5
 800d9ec:	47b8      	blx	r7
 800d9ee:	3001      	adds	r0, #1
 800d9f0:	f43f af27 	beq.w	800d842 <_printf_float+0xc2>
 800d9f4:	f108 0801 	add.w	r8, r8, #1
 800d9f8:	e7e6      	b.n	800d9c8 <_printf_float+0x248>
 800d9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	dc39      	bgt.n	800da74 <_printf_float+0x2f4>
 800da00:	4a1b      	ldr	r2, [pc, #108]	; (800da70 <_printf_float+0x2f0>)
 800da02:	2301      	movs	r3, #1
 800da04:	4631      	mov	r1, r6
 800da06:	4628      	mov	r0, r5
 800da08:	47b8      	blx	r7
 800da0a:	3001      	adds	r0, #1
 800da0c:	f43f af19 	beq.w	800d842 <_printf_float+0xc2>
 800da10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da14:	4313      	orrs	r3, r2
 800da16:	d102      	bne.n	800da1e <_printf_float+0x29e>
 800da18:	6823      	ldr	r3, [r4, #0]
 800da1a:	07d9      	lsls	r1, r3, #31
 800da1c:	d5d8      	bpl.n	800d9d0 <_printf_float+0x250>
 800da1e:	ee18 3a10 	vmov	r3, s16
 800da22:	4652      	mov	r2, sl
 800da24:	4631      	mov	r1, r6
 800da26:	4628      	mov	r0, r5
 800da28:	47b8      	blx	r7
 800da2a:	3001      	adds	r0, #1
 800da2c:	f43f af09 	beq.w	800d842 <_printf_float+0xc2>
 800da30:	f04f 0900 	mov.w	r9, #0
 800da34:	f104 0a1a 	add.w	sl, r4, #26
 800da38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da3a:	425b      	negs	r3, r3
 800da3c:	454b      	cmp	r3, r9
 800da3e:	dc01      	bgt.n	800da44 <_printf_float+0x2c4>
 800da40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da42:	e792      	b.n	800d96a <_printf_float+0x1ea>
 800da44:	2301      	movs	r3, #1
 800da46:	4652      	mov	r2, sl
 800da48:	4631      	mov	r1, r6
 800da4a:	4628      	mov	r0, r5
 800da4c:	47b8      	blx	r7
 800da4e:	3001      	adds	r0, #1
 800da50:	f43f aef7 	beq.w	800d842 <_printf_float+0xc2>
 800da54:	f109 0901 	add.w	r9, r9, #1
 800da58:	e7ee      	b.n	800da38 <_printf_float+0x2b8>
 800da5a:	bf00      	nop
 800da5c:	7fefffff 	.word	0x7fefffff
 800da60:	08010a14 	.word	0x08010a14
 800da64:	08010a18 	.word	0x08010a18
 800da68:	08010a20 	.word	0x08010a20
 800da6c:	08010a1c 	.word	0x08010a1c
 800da70:	08010a24 	.word	0x08010a24
 800da74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da78:	429a      	cmp	r2, r3
 800da7a:	bfa8      	it	ge
 800da7c:	461a      	movge	r2, r3
 800da7e:	2a00      	cmp	r2, #0
 800da80:	4691      	mov	r9, r2
 800da82:	dc37      	bgt.n	800daf4 <_printf_float+0x374>
 800da84:	f04f 0b00 	mov.w	fp, #0
 800da88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da8c:	f104 021a 	add.w	r2, r4, #26
 800da90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da92:	9305      	str	r3, [sp, #20]
 800da94:	eba3 0309 	sub.w	r3, r3, r9
 800da98:	455b      	cmp	r3, fp
 800da9a:	dc33      	bgt.n	800db04 <_printf_float+0x384>
 800da9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800daa0:	429a      	cmp	r2, r3
 800daa2:	db3b      	blt.n	800db1c <_printf_float+0x39c>
 800daa4:	6823      	ldr	r3, [r4, #0]
 800daa6:	07da      	lsls	r2, r3, #31
 800daa8:	d438      	bmi.n	800db1c <_printf_float+0x39c>
 800daaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daac:	9a05      	ldr	r2, [sp, #20]
 800daae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dab0:	1a9a      	subs	r2, r3, r2
 800dab2:	eba3 0901 	sub.w	r9, r3, r1
 800dab6:	4591      	cmp	r9, r2
 800dab8:	bfa8      	it	ge
 800daba:	4691      	movge	r9, r2
 800dabc:	f1b9 0f00 	cmp.w	r9, #0
 800dac0:	dc35      	bgt.n	800db2e <_printf_float+0x3ae>
 800dac2:	f04f 0800 	mov.w	r8, #0
 800dac6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800daca:	f104 0a1a 	add.w	sl, r4, #26
 800dace:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dad2:	1a9b      	subs	r3, r3, r2
 800dad4:	eba3 0309 	sub.w	r3, r3, r9
 800dad8:	4543      	cmp	r3, r8
 800dada:	f77f af79 	ble.w	800d9d0 <_printf_float+0x250>
 800dade:	2301      	movs	r3, #1
 800dae0:	4652      	mov	r2, sl
 800dae2:	4631      	mov	r1, r6
 800dae4:	4628      	mov	r0, r5
 800dae6:	47b8      	blx	r7
 800dae8:	3001      	adds	r0, #1
 800daea:	f43f aeaa 	beq.w	800d842 <_printf_float+0xc2>
 800daee:	f108 0801 	add.w	r8, r8, #1
 800daf2:	e7ec      	b.n	800dace <_printf_float+0x34e>
 800daf4:	4613      	mov	r3, r2
 800daf6:	4631      	mov	r1, r6
 800daf8:	4642      	mov	r2, r8
 800dafa:	4628      	mov	r0, r5
 800dafc:	47b8      	blx	r7
 800dafe:	3001      	adds	r0, #1
 800db00:	d1c0      	bne.n	800da84 <_printf_float+0x304>
 800db02:	e69e      	b.n	800d842 <_printf_float+0xc2>
 800db04:	2301      	movs	r3, #1
 800db06:	4631      	mov	r1, r6
 800db08:	4628      	mov	r0, r5
 800db0a:	9205      	str	r2, [sp, #20]
 800db0c:	47b8      	blx	r7
 800db0e:	3001      	adds	r0, #1
 800db10:	f43f ae97 	beq.w	800d842 <_printf_float+0xc2>
 800db14:	9a05      	ldr	r2, [sp, #20]
 800db16:	f10b 0b01 	add.w	fp, fp, #1
 800db1a:	e7b9      	b.n	800da90 <_printf_float+0x310>
 800db1c:	ee18 3a10 	vmov	r3, s16
 800db20:	4652      	mov	r2, sl
 800db22:	4631      	mov	r1, r6
 800db24:	4628      	mov	r0, r5
 800db26:	47b8      	blx	r7
 800db28:	3001      	adds	r0, #1
 800db2a:	d1be      	bne.n	800daaa <_printf_float+0x32a>
 800db2c:	e689      	b.n	800d842 <_printf_float+0xc2>
 800db2e:	9a05      	ldr	r2, [sp, #20]
 800db30:	464b      	mov	r3, r9
 800db32:	4442      	add	r2, r8
 800db34:	4631      	mov	r1, r6
 800db36:	4628      	mov	r0, r5
 800db38:	47b8      	blx	r7
 800db3a:	3001      	adds	r0, #1
 800db3c:	d1c1      	bne.n	800dac2 <_printf_float+0x342>
 800db3e:	e680      	b.n	800d842 <_printf_float+0xc2>
 800db40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db42:	2a01      	cmp	r2, #1
 800db44:	dc01      	bgt.n	800db4a <_printf_float+0x3ca>
 800db46:	07db      	lsls	r3, r3, #31
 800db48:	d538      	bpl.n	800dbbc <_printf_float+0x43c>
 800db4a:	2301      	movs	r3, #1
 800db4c:	4642      	mov	r2, r8
 800db4e:	4631      	mov	r1, r6
 800db50:	4628      	mov	r0, r5
 800db52:	47b8      	blx	r7
 800db54:	3001      	adds	r0, #1
 800db56:	f43f ae74 	beq.w	800d842 <_printf_float+0xc2>
 800db5a:	ee18 3a10 	vmov	r3, s16
 800db5e:	4652      	mov	r2, sl
 800db60:	4631      	mov	r1, r6
 800db62:	4628      	mov	r0, r5
 800db64:	47b8      	blx	r7
 800db66:	3001      	adds	r0, #1
 800db68:	f43f ae6b 	beq.w	800d842 <_printf_float+0xc2>
 800db6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800db70:	2200      	movs	r2, #0
 800db72:	2300      	movs	r3, #0
 800db74:	f7f2 ffb8 	bl	8000ae8 <__aeabi_dcmpeq>
 800db78:	b9d8      	cbnz	r0, 800dbb2 <_printf_float+0x432>
 800db7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db7c:	f108 0201 	add.w	r2, r8, #1
 800db80:	3b01      	subs	r3, #1
 800db82:	4631      	mov	r1, r6
 800db84:	4628      	mov	r0, r5
 800db86:	47b8      	blx	r7
 800db88:	3001      	adds	r0, #1
 800db8a:	d10e      	bne.n	800dbaa <_printf_float+0x42a>
 800db8c:	e659      	b.n	800d842 <_printf_float+0xc2>
 800db8e:	2301      	movs	r3, #1
 800db90:	4652      	mov	r2, sl
 800db92:	4631      	mov	r1, r6
 800db94:	4628      	mov	r0, r5
 800db96:	47b8      	blx	r7
 800db98:	3001      	adds	r0, #1
 800db9a:	f43f ae52 	beq.w	800d842 <_printf_float+0xc2>
 800db9e:	f108 0801 	add.w	r8, r8, #1
 800dba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dba4:	3b01      	subs	r3, #1
 800dba6:	4543      	cmp	r3, r8
 800dba8:	dcf1      	bgt.n	800db8e <_printf_float+0x40e>
 800dbaa:	464b      	mov	r3, r9
 800dbac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dbb0:	e6dc      	b.n	800d96c <_printf_float+0x1ec>
 800dbb2:	f04f 0800 	mov.w	r8, #0
 800dbb6:	f104 0a1a 	add.w	sl, r4, #26
 800dbba:	e7f2      	b.n	800dba2 <_printf_float+0x422>
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	4642      	mov	r2, r8
 800dbc0:	e7df      	b.n	800db82 <_printf_float+0x402>
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	464a      	mov	r2, r9
 800dbc6:	4631      	mov	r1, r6
 800dbc8:	4628      	mov	r0, r5
 800dbca:	47b8      	blx	r7
 800dbcc:	3001      	adds	r0, #1
 800dbce:	f43f ae38 	beq.w	800d842 <_printf_float+0xc2>
 800dbd2:	f108 0801 	add.w	r8, r8, #1
 800dbd6:	68e3      	ldr	r3, [r4, #12]
 800dbd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dbda:	1a5b      	subs	r3, r3, r1
 800dbdc:	4543      	cmp	r3, r8
 800dbde:	dcf0      	bgt.n	800dbc2 <_printf_float+0x442>
 800dbe0:	e6fa      	b.n	800d9d8 <_printf_float+0x258>
 800dbe2:	f04f 0800 	mov.w	r8, #0
 800dbe6:	f104 0919 	add.w	r9, r4, #25
 800dbea:	e7f4      	b.n	800dbd6 <_printf_float+0x456>

0800dbec <_printf_common>:
 800dbec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbf0:	4616      	mov	r6, r2
 800dbf2:	4699      	mov	r9, r3
 800dbf4:	688a      	ldr	r2, [r1, #8]
 800dbf6:	690b      	ldr	r3, [r1, #16]
 800dbf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	bfb8      	it	lt
 800dc00:	4613      	movlt	r3, r2
 800dc02:	6033      	str	r3, [r6, #0]
 800dc04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc08:	4607      	mov	r7, r0
 800dc0a:	460c      	mov	r4, r1
 800dc0c:	b10a      	cbz	r2, 800dc12 <_printf_common+0x26>
 800dc0e:	3301      	adds	r3, #1
 800dc10:	6033      	str	r3, [r6, #0]
 800dc12:	6823      	ldr	r3, [r4, #0]
 800dc14:	0699      	lsls	r1, r3, #26
 800dc16:	bf42      	ittt	mi
 800dc18:	6833      	ldrmi	r3, [r6, #0]
 800dc1a:	3302      	addmi	r3, #2
 800dc1c:	6033      	strmi	r3, [r6, #0]
 800dc1e:	6825      	ldr	r5, [r4, #0]
 800dc20:	f015 0506 	ands.w	r5, r5, #6
 800dc24:	d106      	bne.n	800dc34 <_printf_common+0x48>
 800dc26:	f104 0a19 	add.w	sl, r4, #25
 800dc2a:	68e3      	ldr	r3, [r4, #12]
 800dc2c:	6832      	ldr	r2, [r6, #0]
 800dc2e:	1a9b      	subs	r3, r3, r2
 800dc30:	42ab      	cmp	r3, r5
 800dc32:	dc26      	bgt.n	800dc82 <_printf_common+0x96>
 800dc34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dc38:	1e13      	subs	r3, r2, #0
 800dc3a:	6822      	ldr	r2, [r4, #0]
 800dc3c:	bf18      	it	ne
 800dc3e:	2301      	movne	r3, #1
 800dc40:	0692      	lsls	r2, r2, #26
 800dc42:	d42b      	bmi.n	800dc9c <_printf_common+0xb0>
 800dc44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc48:	4649      	mov	r1, r9
 800dc4a:	4638      	mov	r0, r7
 800dc4c:	47c0      	blx	r8
 800dc4e:	3001      	adds	r0, #1
 800dc50:	d01e      	beq.n	800dc90 <_printf_common+0xa4>
 800dc52:	6823      	ldr	r3, [r4, #0]
 800dc54:	68e5      	ldr	r5, [r4, #12]
 800dc56:	6832      	ldr	r2, [r6, #0]
 800dc58:	f003 0306 	and.w	r3, r3, #6
 800dc5c:	2b04      	cmp	r3, #4
 800dc5e:	bf08      	it	eq
 800dc60:	1aad      	subeq	r5, r5, r2
 800dc62:	68a3      	ldr	r3, [r4, #8]
 800dc64:	6922      	ldr	r2, [r4, #16]
 800dc66:	bf0c      	ite	eq
 800dc68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc6c:	2500      	movne	r5, #0
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	bfc4      	itt	gt
 800dc72:	1a9b      	subgt	r3, r3, r2
 800dc74:	18ed      	addgt	r5, r5, r3
 800dc76:	2600      	movs	r6, #0
 800dc78:	341a      	adds	r4, #26
 800dc7a:	42b5      	cmp	r5, r6
 800dc7c:	d11a      	bne.n	800dcb4 <_printf_common+0xc8>
 800dc7e:	2000      	movs	r0, #0
 800dc80:	e008      	b.n	800dc94 <_printf_common+0xa8>
 800dc82:	2301      	movs	r3, #1
 800dc84:	4652      	mov	r2, sl
 800dc86:	4649      	mov	r1, r9
 800dc88:	4638      	mov	r0, r7
 800dc8a:	47c0      	blx	r8
 800dc8c:	3001      	adds	r0, #1
 800dc8e:	d103      	bne.n	800dc98 <_printf_common+0xac>
 800dc90:	f04f 30ff 	mov.w	r0, #4294967295
 800dc94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc98:	3501      	adds	r5, #1
 800dc9a:	e7c6      	b.n	800dc2a <_printf_common+0x3e>
 800dc9c:	18e1      	adds	r1, r4, r3
 800dc9e:	1c5a      	adds	r2, r3, #1
 800dca0:	2030      	movs	r0, #48	; 0x30
 800dca2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dca6:	4422      	add	r2, r4
 800dca8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dcac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dcb0:	3302      	adds	r3, #2
 800dcb2:	e7c7      	b.n	800dc44 <_printf_common+0x58>
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	4622      	mov	r2, r4
 800dcb8:	4649      	mov	r1, r9
 800dcba:	4638      	mov	r0, r7
 800dcbc:	47c0      	blx	r8
 800dcbe:	3001      	adds	r0, #1
 800dcc0:	d0e6      	beq.n	800dc90 <_printf_common+0xa4>
 800dcc2:	3601      	adds	r6, #1
 800dcc4:	e7d9      	b.n	800dc7a <_printf_common+0x8e>
	...

0800dcc8 <_printf_i>:
 800dcc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dccc:	7e0f      	ldrb	r7, [r1, #24]
 800dcce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dcd0:	2f78      	cmp	r7, #120	; 0x78
 800dcd2:	4691      	mov	r9, r2
 800dcd4:	4680      	mov	r8, r0
 800dcd6:	460c      	mov	r4, r1
 800dcd8:	469a      	mov	sl, r3
 800dcda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dcde:	d807      	bhi.n	800dcf0 <_printf_i+0x28>
 800dce0:	2f62      	cmp	r7, #98	; 0x62
 800dce2:	d80a      	bhi.n	800dcfa <_printf_i+0x32>
 800dce4:	2f00      	cmp	r7, #0
 800dce6:	f000 80d8 	beq.w	800de9a <_printf_i+0x1d2>
 800dcea:	2f58      	cmp	r7, #88	; 0x58
 800dcec:	f000 80a3 	beq.w	800de36 <_printf_i+0x16e>
 800dcf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dcf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dcf8:	e03a      	b.n	800dd70 <_printf_i+0xa8>
 800dcfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dcfe:	2b15      	cmp	r3, #21
 800dd00:	d8f6      	bhi.n	800dcf0 <_printf_i+0x28>
 800dd02:	a101      	add	r1, pc, #4	; (adr r1, 800dd08 <_printf_i+0x40>)
 800dd04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd08:	0800dd61 	.word	0x0800dd61
 800dd0c:	0800dd75 	.word	0x0800dd75
 800dd10:	0800dcf1 	.word	0x0800dcf1
 800dd14:	0800dcf1 	.word	0x0800dcf1
 800dd18:	0800dcf1 	.word	0x0800dcf1
 800dd1c:	0800dcf1 	.word	0x0800dcf1
 800dd20:	0800dd75 	.word	0x0800dd75
 800dd24:	0800dcf1 	.word	0x0800dcf1
 800dd28:	0800dcf1 	.word	0x0800dcf1
 800dd2c:	0800dcf1 	.word	0x0800dcf1
 800dd30:	0800dcf1 	.word	0x0800dcf1
 800dd34:	0800de81 	.word	0x0800de81
 800dd38:	0800dda5 	.word	0x0800dda5
 800dd3c:	0800de63 	.word	0x0800de63
 800dd40:	0800dcf1 	.word	0x0800dcf1
 800dd44:	0800dcf1 	.word	0x0800dcf1
 800dd48:	0800dea3 	.word	0x0800dea3
 800dd4c:	0800dcf1 	.word	0x0800dcf1
 800dd50:	0800dda5 	.word	0x0800dda5
 800dd54:	0800dcf1 	.word	0x0800dcf1
 800dd58:	0800dcf1 	.word	0x0800dcf1
 800dd5c:	0800de6b 	.word	0x0800de6b
 800dd60:	682b      	ldr	r3, [r5, #0]
 800dd62:	1d1a      	adds	r2, r3, #4
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	602a      	str	r2, [r5, #0]
 800dd68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd70:	2301      	movs	r3, #1
 800dd72:	e0a3      	b.n	800debc <_printf_i+0x1f4>
 800dd74:	6820      	ldr	r0, [r4, #0]
 800dd76:	6829      	ldr	r1, [r5, #0]
 800dd78:	0606      	lsls	r6, r0, #24
 800dd7a:	f101 0304 	add.w	r3, r1, #4
 800dd7e:	d50a      	bpl.n	800dd96 <_printf_i+0xce>
 800dd80:	680e      	ldr	r6, [r1, #0]
 800dd82:	602b      	str	r3, [r5, #0]
 800dd84:	2e00      	cmp	r6, #0
 800dd86:	da03      	bge.n	800dd90 <_printf_i+0xc8>
 800dd88:	232d      	movs	r3, #45	; 0x2d
 800dd8a:	4276      	negs	r6, r6
 800dd8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd90:	485e      	ldr	r0, [pc, #376]	; (800df0c <_printf_i+0x244>)
 800dd92:	230a      	movs	r3, #10
 800dd94:	e019      	b.n	800ddca <_printf_i+0x102>
 800dd96:	680e      	ldr	r6, [r1, #0]
 800dd98:	602b      	str	r3, [r5, #0]
 800dd9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dd9e:	bf18      	it	ne
 800dda0:	b236      	sxthne	r6, r6
 800dda2:	e7ef      	b.n	800dd84 <_printf_i+0xbc>
 800dda4:	682b      	ldr	r3, [r5, #0]
 800dda6:	6820      	ldr	r0, [r4, #0]
 800dda8:	1d19      	adds	r1, r3, #4
 800ddaa:	6029      	str	r1, [r5, #0]
 800ddac:	0601      	lsls	r1, r0, #24
 800ddae:	d501      	bpl.n	800ddb4 <_printf_i+0xec>
 800ddb0:	681e      	ldr	r6, [r3, #0]
 800ddb2:	e002      	b.n	800ddba <_printf_i+0xf2>
 800ddb4:	0646      	lsls	r6, r0, #25
 800ddb6:	d5fb      	bpl.n	800ddb0 <_printf_i+0xe8>
 800ddb8:	881e      	ldrh	r6, [r3, #0]
 800ddba:	4854      	ldr	r0, [pc, #336]	; (800df0c <_printf_i+0x244>)
 800ddbc:	2f6f      	cmp	r7, #111	; 0x6f
 800ddbe:	bf0c      	ite	eq
 800ddc0:	2308      	moveq	r3, #8
 800ddc2:	230a      	movne	r3, #10
 800ddc4:	2100      	movs	r1, #0
 800ddc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ddca:	6865      	ldr	r5, [r4, #4]
 800ddcc:	60a5      	str	r5, [r4, #8]
 800ddce:	2d00      	cmp	r5, #0
 800ddd0:	bfa2      	ittt	ge
 800ddd2:	6821      	ldrge	r1, [r4, #0]
 800ddd4:	f021 0104 	bicge.w	r1, r1, #4
 800ddd8:	6021      	strge	r1, [r4, #0]
 800ddda:	b90e      	cbnz	r6, 800dde0 <_printf_i+0x118>
 800dddc:	2d00      	cmp	r5, #0
 800ddde:	d04d      	beq.n	800de7c <_printf_i+0x1b4>
 800dde0:	4615      	mov	r5, r2
 800dde2:	fbb6 f1f3 	udiv	r1, r6, r3
 800dde6:	fb03 6711 	mls	r7, r3, r1, r6
 800ddea:	5dc7      	ldrb	r7, [r0, r7]
 800ddec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ddf0:	4637      	mov	r7, r6
 800ddf2:	42bb      	cmp	r3, r7
 800ddf4:	460e      	mov	r6, r1
 800ddf6:	d9f4      	bls.n	800dde2 <_printf_i+0x11a>
 800ddf8:	2b08      	cmp	r3, #8
 800ddfa:	d10b      	bne.n	800de14 <_printf_i+0x14c>
 800ddfc:	6823      	ldr	r3, [r4, #0]
 800ddfe:	07de      	lsls	r6, r3, #31
 800de00:	d508      	bpl.n	800de14 <_printf_i+0x14c>
 800de02:	6923      	ldr	r3, [r4, #16]
 800de04:	6861      	ldr	r1, [r4, #4]
 800de06:	4299      	cmp	r1, r3
 800de08:	bfde      	ittt	le
 800de0a:	2330      	movle	r3, #48	; 0x30
 800de0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800de10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800de14:	1b52      	subs	r2, r2, r5
 800de16:	6122      	str	r2, [r4, #16]
 800de18:	f8cd a000 	str.w	sl, [sp]
 800de1c:	464b      	mov	r3, r9
 800de1e:	aa03      	add	r2, sp, #12
 800de20:	4621      	mov	r1, r4
 800de22:	4640      	mov	r0, r8
 800de24:	f7ff fee2 	bl	800dbec <_printf_common>
 800de28:	3001      	adds	r0, #1
 800de2a:	d14c      	bne.n	800dec6 <_printf_i+0x1fe>
 800de2c:	f04f 30ff 	mov.w	r0, #4294967295
 800de30:	b004      	add	sp, #16
 800de32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de36:	4835      	ldr	r0, [pc, #212]	; (800df0c <_printf_i+0x244>)
 800de38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800de3c:	6829      	ldr	r1, [r5, #0]
 800de3e:	6823      	ldr	r3, [r4, #0]
 800de40:	f851 6b04 	ldr.w	r6, [r1], #4
 800de44:	6029      	str	r1, [r5, #0]
 800de46:	061d      	lsls	r5, r3, #24
 800de48:	d514      	bpl.n	800de74 <_printf_i+0x1ac>
 800de4a:	07df      	lsls	r7, r3, #31
 800de4c:	bf44      	itt	mi
 800de4e:	f043 0320 	orrmi.w	r3, r3, #32
 800de52:	6023      	strmi	r3, [r4, #0]
 800de54:	b91e      	cbnz	r6, 800de5e <_printf_i+0x196>
 800de56:	6823      	ldr	r3, [r4, #0]
 800de58:	f023 0320 	bic.w	r3, r3, #32
 800de5c:	6023      	str	r3, [r4, #0]
 800de5e:	2310      	movs	r3, #16
 800de60:	e7b0      	b.n	800ddc4 <_printf_i+0xfc>
 800de62:	6823      	ldr	r3, [r4, #0]
 800de64:	f043 0320 	orr.w	r3, r3, #32
 800de68:	6023      	str	r3, [r4, #0]
 800de6a:	2378      	movs	r3, #120	; 0x78
 800de6c:	4828      	ldr	r0, [pc, #160]	; (800df10 <_printf_i+0x248>)
 800de6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800de72:	e7e3      	b.n	800de3c <_printf_i+0x174>
 800de74:	0659      	lsls	r1, r3, #25
 800de76:	bf48      	it	mi
 800de78:	b2b6      	uxthmi	r6, r6
 800de7a:	e7e6      	b.n	800de4a <_printf_i+0x182>
 800de7c:	4615      	mov	r5, r2
 800de7e:	e7bb      	b.n	800ddf8 <_printf_i+0x130>
 800de80:	682b      	ldr	r3, [r5, #0]
 800de82:	6826      	ldr	r6, [r4, #0]
 800de84:	6961      	ldr	r1, [r4, #20]
 800de86:	1d18      	adds	r0, r3, #4
 800de88:	6028      	str	r0, [r5, #0]
 800de8a:	0635      	lsls	r5, r6, #24
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	d501      	bpl.n	800de94 <_printf_i+0x1cc>
 800de90:	6019      	str	r1, [r3, #0]
 800de92:	e002      	b.n	800de9a <_printf_i+0x1d2>
 800de94:	0670      	lsls	r0, r6, #25
 800de96:	d5fb      	bpl.n	800de90 <_printf_i+0x1c8>
 800de98:	8019      	strh	r1, [r3, #0]
 800de9a:	2300      	movs	r3, #0
 800de9c:	6123      	str	r3, [r4, #16]
 800de9e:	4615      	mov	r5, r2
 800dea0:	e7ba      	b.n	800de18 <_printf_i+0x150>
 800dea2:	682b      	ldr	r3, [r5, #0]
 800dea4:	1d1a      	adds	r2, r3, #4
 800dea6:	602a      	str	r2, [r5, #0]
 800dea8:	681d      	ldr	r5, [r3, #0]
 800deaa:	6862      	ldr	r2, [r4, #4]
 800deac:	2100      	movs	r1, #0
 800deae:	4628      	mov	r0, r5
 800deb0:	f7f2 f9a6 	bl	8000200 <memchr>
 800deb4:	b108      	cbz	r0, 800deba <_printf_i+0x1f2>
 800deb6:	1b40      	subs	r0, r0, r5
 800deb8:	6060      	str	r0, [r4, #4]
 800deba:	6863      	ldr	r3, [r4, #4]
 800debc:	6123      	str	r3, [r4, #16]
 800debe:	2300      	movs	r3, #0
 800dec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dec4:	e7a8      	b.n	800de18 <_printf_i+0x150>
 800dec6:	6923      	ldr	r3, [r4, #16]
 800dec8:	462a      	mov	r2, r5
 800deca:	4649      	mov	r1, r9
 800decc:	4640      	mov	r0, r8
 800dece:	47d0      	blx	sl
 800ded0:	3001      	adds	r0, #1
 800ded2:	d0ab      	beq.n	800de2c <_printf_i+0x164>
 800ded4:	6823      	ldr	r3, [r4, #0]
 800ded6:	079b      	lsls	r3, r3, #30
 800ded8:	d413      	bmi.n	800df02 <_printf_i+0x23a>
 800deda:	68e0      	ldr	r0, [r4, #12]
 800dedc:	9b03      	ldr	r3, [sp, #12]
 800dede:	4298      	cmp	r0, r3
 800dee0:	bfb8      	it	lt
 800dee2:	4618      	movlt	r0, r3
 800dee4:	e7a4      	b.n	800de30 <_printf_i+0x168>
 800dee6:	2301      	movs	r3, #1
 800dee8:	4632      	mov	r2, r6
 800deea:	4649      	mov	r1, r9
 800deec:	4640      	mov	r0, r8
 800deee:	47d0      	blx	sl
 800def0:	3001      	adds	r0, #1
 800def2:	d09b      	beq.n	800de2c <_printf_i+0x164>
 800def4:	3501      	adds	r5, #1
 800def6:	68e3      	ldr	r3, [r4, #12]
 800def8:	9903      	ldr	r1, [sp, #12]
 800defa:	1a5b      	subs	r3, r3, r1
 800defc:	42ab      	cmp	r3, r5
 800defe:	dcf2      	bgt.n	800dee6 <_printf_i+0x21e>
 800df00:	e7eb      	b.n	800deda <_printf_i+0x212>
 800df02:	2500      	movs	r5, #0
 800df04:	f104 0619 	add.w	r6, r4, #25
 800df08:	e7f5      	b.n	800def6 <_printf_i+0x22e>
 800df0a:	bf00      	nop
 800df0c:	08010a26 	.word	0x08010a26
 800df10:	08010a37 	.word	0x08010a37

0800df14 <_sbrk_r>:
 800df14:	b538      	push	{r3, r4, r5, lr}
 800df16:	4d06      	ldr	r5, [pc, #24]	; (800df30 <_sbrk_r+0x1c>)
 800df18:	2300      	movs	r3, #0
 800df1a:	4604      	mov	r4, r0
 800df1c:	4608      	mov	r0, r1
 800df1e:	602b      	str	r3, [r5, #0]
 800df20:	f002 f9ee 	bl	8010300 <_sbrk>
 800df24:	1c43      	adds	r3, r0, #1
 800df26:	d102      	bne.n	800df2e <_sbrk_r+0x1a>
 800df28:	682b      	ldr	r3, [r5, #0]
 800df2a:	b103      	cbz	r3, 800df2e <_sbrk_r+0x1a>
 800df2c:	6023      	str	r3, [r4, #0]
 800df2e:	bd38      	pop	{r3, r4, r5, pc}
 800df30:	20008200 	.word	0x20008200

0800df34 <siprintf>:
 800df34:	b40e      	push	{r1, r2, r3}
 800df36:	b500      	push	{lr}
 800df38:	b09c      	sub	sp, #112	; 0x70
 800df3a:	ab1d      	add	r3, sp, #116	; 0x74
 800df3c:	9002      	str	r0, [sp, #8]
 800df3e:	9006      	str	r0, [sp, #24]
 800df40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800df44:	4809      	ldr	r0, [pc, #36]	; (800df6c <siprintf+0x38>)
 800df46:	9107      	str	r1, [sp, #28]
 800df48:	9104      	str	r1, [sp, #16]
 800df4a:	4909      	ldr	r1, [pc, #36]	; (800df70 <siprintf+0x3c>)
 800df4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800df50:	9105      	str	r1, [sp, #20]
 800df52:	6800      	ldr	r0, [r0, #0]
 800df54:	9301      	str	r3, [sp, #4]
 800df56:	a902      	add	r1, sp, #8
 800df58:	f001 fbc0 	bl	800f6dc <_svfiprintf_r>
 800df5c:	9b02      	ldr	r3, [sp, #8]
 800df5e:	2200      	movs	r2, #0
 800df60:	701a      	strb	r2, [r3, #0]
 800df62:	b01c      	add	sp, #112	; 0x70
 800df64:	f85d eb04 	ldr.w	lr, [sp], #4
 800df68:	b003      	add	sp, #12
 800df6a:	4770      	bx	lr
 800df6c:	2000001c 	.word	0x2000001c
 800df70:	ffff0208 	.word	0xffff0208

0800df74 <_vsniprintf_r>:
 800df74:	b530      	push	{r4, r5, lr}
 800df76:	4614      	mov	r4, r2
 800df78:	2c00      	cmp	r4, #0
 800df7a:	b09b      	sub	sp, #108	; 0x6c
 800df7c:	4605      	mov	r5, r0
 800df7e:	461a      	mov	r2, r3
 800df80:	da05      	bge.n	800df8e <_vsniprintf_r+0x1a>
 800df82:	238b      	movs	r3, #139	; 0x8b
 800df84:	6003      	str	r3, [r0, #0]
 800df86:	f04f 30ff 	mov.w	r0, #4294967295
 800df8a:	b01b      	add	sp, #108	; 0x6c
 800df8c:	bd30      	pop	{r4, r5, pc}
 800df8e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800df92:	f8ad 300c 	strh.w	r3, [sp, #12]
 800df96:	bf14      	ite	ne
 800df98:	f104 33ff 	addne.w	r3, r4, #4294967295
 800df9c:	4623      	moveq	r3, r4
 800df9e:	9302      	str	r3, [sp, #8]
 800dfa0:	9305      	str	r3, [sp, #20]
 800dfa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dfa6:	9100      	str	r1, [sp, #0]
 800dfa8:	9104      	str	r1, [sp, #16]
 800dfaa:	f8ad 300e 	strh.w	r3, [sp, #14]
 800dfae:	4669      	mov	r1, sp
 800dfb0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dfb2:	f001 fb93 	bl	800f6dc <_svfiprintf_r>
 800dfb6:	1c43      	adds	r3, r0, #1
 800dfb8:	bfbc      	itt	lt
 800dfba:	238b      	movlt	r3, #139	; 0x8b
 800dfbc:	602b      	strlt	r3, [r5, #0]
 800dfbe:	2c00      	cmp	r4, #0
 800dfc0:	d0e3      	beq.n	800df8a <_vsniprintf_r+0x16>
 800dfc2:	9b00      	ldr	r3, [sp, #0]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	701a      	strb	r2, [r3, #0]
 800dfc8:	e7df      	b.n	800df8a <_vsniprintf_r+0x16>
	...

0800dfcc <vsniprintf>:
 800dfcc:	b507      	push	{r0, r1, r2, lr}
 800dfce:	9300      	str	r3, [sp, #0]
 800dfd0:	4613      	mov	r3, r2
 800dfd2:	460a      	mov	r2, r1
 800dfd4:	4601      	mov	r1, r0
 800dfd6:	4803      	ldr	r0, [pc, #12]	; (800dfe4 <vsniprintf+0x18>)
 800dfd8:	6800      	ldr	r0, [r0, #0]
 800dfda:	f7ff ffcb 	bl	800df74 <_vsniprintf_r>
 800dfde:	b003      	add	sp, #12
 800dfe0:	f85d fb04 	ldr.w	pc, [sp], #4
 800dfe4:	2000001c 	.word	0x2000001c

0800dfe8 <quorem>:
 800dfe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfec:	6903      	ldr	r3, [r0, #16]
 800dfee:	690c      	ldr	r4, [r1, #16]
 800dff0:	42a3      	cmp	r3, r4
 800dff2:	4607      	mov	r7, r0
 800dff4:	f2c0 8081 	blt.w	800e0fa <quorem+0x112>
 800dff8:	3c01      	subs	r4, #1
 800dffa:	f101 0814 	add.w	r8, r1, #20
 800dffe:	f100 0514 	add.w	r5, r0, #20
 800e002:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e006:	9301      	str	r3, [sp, #4]
 800e008:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e00c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e010:	3301      	adds	r3, #1
 800e012:	429a      	cmp	r2, r3
 800e014:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e018:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e01c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e020:	d331      	bcc.n	800e086 <quorem+0x9e>
 800e022:	f04f 0e00 	mov.w	lr, #0
 800e026:	4640      	mov	r0, r8
 800e028:	46ac      	mov	ip, r5
 800e02a:	46f2      	mov	sl, lr
 800e02c:	f850 2b04 	ldr.w	r2, [r0], #4
 800e030:	b293      	uxth	r3, r2
 800e032:	fb06 e303 	mla	r3, r6, r3, lr
 800e036:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e03a:	b29b      	uxth	r3, r3
 800e03c:	ebaa 0303 	sub.w	r3, sl, r3
 800e040:	f8dc a000 	ldr.w	sl, [ip]
 800e044:	0c12      	lsrs	r2, r2, #16
 800e046:	fa13 f38a 	uxtah	r3, r3, sl
 800e04a:	fb06 e202 	mla	r2, r6, r2, lr
 800e04e:	9300      	str	r3, [sp, #0]
 800e050:	9b00      	ldr	r3, [sp, #0]
 800e052:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e056:	b292      	uxth	r2, r2
 800e058:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e05c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e060:	f8bd 3000 	ldrh.w	r3, [sp]
 800e064:	4581      	cmp	r9, r0
 800e066:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e06a:	f84c 3b04 	str.w	r3, [ip], #4
 800e06e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e072:	d2db      	bcs.n	800e02c <quorem+0x44>
 800e074:	f855 300b 	ldr.w	r3, [r5, fp]
 800e078:	b92b      	cbnz	r3, 800e086 <quorem+0x9e>
 800e07a:	9b01      	ldr	r3, [sp, #4]
 800e07c:	3b04      	subs	r3, #4
 800e07e:	429d      	cmp	r5, r3
 800e080:	461a      	mov	r2, r3
 800e082:	d32e      	bcc.n	800e0e2 <quorem+0xfa>
 800e084:	613c      	str	r4, [r7, #16]
 800e086:	4638      	mov	r0, r7
 800e088:	f001 f9b4 	bl	800f3f4 <__mcmp>
 800e08c:	2800      	cmp	r0, #0
 800e08e:	db24      	blt.n	800e0da <quorem+0xf2>
 800e090:	3601      	adds	r6, #1
 800e092:	4628      	mov	r0, r5
 800e094:	f04f 0c00 	mov.w	ip, #0
 800e098:	f858 2b04 	ldr.w	r2, [r8], #4
 800e09c:	f8d0 e000 	ldr.w	lr, [r0]
 800e0a0:	b293      	uxth	r3, r2
 800e0a2:	ebac 0303 	sub.w	r3, ip, r3
 800e0a6:	0c12      	lsrs	r2, r2, #16
 800e0a8:	fa13 f38e 	uxtah	r3, r3, lr
 800e0ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e0b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e0ba:	45c1      	cmp	r9, r8
 800e0bc:	f840 3b04 	str.w	r3, [r0], #4
 800e0c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e0c4:	d2e8      	bcs.n	800e098 <quorem+0xb0>
 800e0c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0ce:	b922      	cbnz	r2, 800e0da <quorem+0xf2>
 800e0d0:	3b04      	subs	r3, #4
 800e0d2:	429d      	cmp	r5, r3
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	d30a      	bcc.n	800e0ee <quorem+0x106>
 800e0d8:	613c      	str	r4, [r7, #16]
 800e0da:	4630      	mov	r0, r6
 800e0dc:	b003      	add	sp, #12
 800e0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0e2:	6812      	ldr	r2, [r2, #0]
 800e0e4:	3b04      	subs	r3, #4
 800e0e6:	2a00      	cmp	r2, #0
 800e0e8:	d1cc      	bne.n	800e084 <quorem+0x9c>
 800e0ea:	3c01      	subs	r4, #1
 800e0ec:	e7c7      	b.n	800e07e <quorem+0x96>
 800e0ee:	6812      	ldr	r2, [r2, #0]
 800e0f0:	3b04      	subs	r3, #4
 800e0f2:	2a00      	cmp	r2, #0
 800e0f4:	d1f0      	bne.n	800e0d8 <quorem+0xf0>
 800e0f6:	3c01      	subs	r4, #1
 800e0f8:	e7eb      	b.n	800e0d2 <quorem+0xea>
 800e0fa:	2000      	movs	r0, #0
 800e0fc:	e7ee      	b.n	800e0dc <quorem+0xf4>
	...

0800e100 <_dtoa_r>:
 800e100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e104:	ed2d 8b04 	vpush	{d8-d9}
 800e108:	ec57 6b10 	vmov	r6, r7, d0
 800e10c:	b093      	sub	sp, #76	; 0x4c
 800e10e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e110:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e114:	9106      	str	r1, [sp, #24]
 800e116:	ee10 aa10 	vmov	sl, s0
 800e11a:	4604      	mov	r4, r0
 800e11c:	9209      	str	r2, [sp, #36]	; 0x24
 800e11e:	930c      	str	r3, [sp, #48]	; 0x30
 800e120:	46bb      	mov	fp, r7
 800e122:	b975      	cbnz	r5, 800e142 <_dtoa_r+0x42>
 800e124:	2010      	movs	r0, #16
 800e126:	f7ff f985 	bl	800d434 <malloc>
 800e12a:	4602      	mov	r2, r0
 800e12c:	6260      	str	r0, [r4, #36]	; 0x24
 800e12e:	b920      	cbnz	r0, 800e13a <_dtoa_r+0x3a>
 800e130:	4ba7      	ldr	r3, [pc, #668]	; (800e3d0 <_dtoa_r+0x2d0>)
 800e132:	21ea      	movs	r1, #234	; 0xea
 800e134:	48a7      	ldr	r0, [pc, #668]	; (800e3d4 <_dtoa_r+0x2d4>)
 800e136:	f001 fe41 	bl	800fdbc <__assert_func>
 800e13a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e13e:	6005      	str	r5, [r0, #0]
 800e140:	60c5      	str	r5, [r0, #12]
 800e142:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e144:	6819      	ldr	r1, [r3, #0]
 800e146:	b151      	cbz	r1, 800e15e <_dtoa_r+0x5e>
 800e148:	685a      	ldr	r2, [r3, #4]
 800e14a:	604a      	str	r2, [r1, #4]
 800e14c:	2301      	movs	r3, #1
 800e14e:	4093      	lsls	r3, r2
 800e150:	608b      	str	r3, [r1, #8]
 800e152:	4620      	mov	r0, r4
 800e154:	f000 ff0c 	bl	800ef70 <_Bfree>
 800e158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e15a:	2200      	movs	r2, #0
 800e15c:	601a      	str	r2, [r3, #0]
 800e15e:	1e3b      	subs	r3, r7, #0
 800e160:	bfaa      	itet	ge
 800e162:	2300      	movge	r3, #0
 800e164:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e168:	f8c8 3000 	strge.w	r3, [r8]
 800e16c:	4b9a      	ldr	r3, [pc, #616]	; (800e3d8 <_dtoa_r+0x2d8>)
 800e16e:	bfbc      	itt	lt
 800e170:	2201      	movlt	r2, #1
 800e172:	f8c8 2000 	strlt.w	r2, [r8]
 800e176:	ea33 030b 	bics.w	r3, r3, fp
 800e17a:	d11b      	bne.n	800e1b4 <_dtoa_r+0xb4>
 800e17c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e17e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e182:	6013      	str	r3, [r2, #0]
 800e184:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e188:	4333      	orrs	r3, r6
 800e18a:	f000 8592 	beq.w	800ecb2 <_dtoa_r+0xbb2>
 800e18e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e190:	b963      	cbnz	r3, 800e1ac <_dtoa_r+0xac>
 800e192:	4b92      	ldr	r3, [pc, #584]	; (800e3dc <_dtoa_r+0x2dc>)
 800e194:	e022      	b.n	800e1dc <_dtoa_r+0xdc>
 800e196:	4b92      	ldr	r3, [pc, #584]	; (800e3e0 <_dtoa_r+0x2e0>)
 800e198:	9301      	str	r3, [sp, #4]
 800e19a:	3308      	adds	r3, #8
 800e19c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e19e:	6013      	str	r3, [r2, #0]
 800e1a0:	9801      	ldr	r0, [sp, #4]
 800e1a2:	b013      	add	sp, #76	; 0x4c
 800e1a4:	ecbd 8b04 	vpop	{d8-d9}
 800e1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ac:	4b8b      	ldr	r3, [pc, #556]	; (800e3dc <_dtoa_r+0x2dc>)
 800e1ae:	9301      	str	r3, [sp, #4]
 800e1b0:	3303      	adds	r3, #3
 800e1b2:	e7f3      	b.n	800e19c <_dtoa_r+0x9c>
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	4650      	mov	r0, sl
 800e1ba:	4659      	mov	r1, fp
 800e1bc:	f7f2 fc94 	bl	8000ae8 <__aeabi_dcmpeq>
 800e1c0:	ec4b ab19 	vmov	d9, sl, fp
 800e1c4:	4680      	mov	r8, r0
 800e1c6:	b158      	cbz	r0, 800e1e0 <_dtoa_r+0xe0>
 800e1c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	6013      	str	r3, [r2, #0]
 800e1ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	f000 856b 	beq.w	800ecac <_dtoa_r+0xbac>
 800e1d6:	4883      	ldr	r0, [pc, #524]	; (800e3e4 <_dtoa_r+0x2e4>)
 800e1d8:	6018      	str	r0, [r3, #0]
 800e1da:	1e43      	subs	r3, r0, #1
 800e1dc:	9301      	str	r3, [sp, #4]
 800e1de:	e7df      	b.n	800e1a0 <_dtoa_r+0xa0>
 800e1e0:	ec4b ab10 	vmov	d0, sl, fp
 800e1e4:	aa10      	add	r2, sp, #64	; 0x40
 800e1e6:	a911      	add	r1, sp, #68	; 0x44
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	f001 f9a9 	bl	800f540 <__d2b>
 800e1ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e1f2:	ee08 0a10 	vmov	s16, r0
 800e1f6:	2d00      	cmp	r5, #0
 800e1f8:	f000 8084 	beq.w	800e304 <_dtoa_r+0x204>
 800e1fc:	ee19 3a90 	vmov	r3, s19
 800e200:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e204:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e208:	4656      	mov	r6, sl
 800e20a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e20e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e212:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e216:	4b74      	ldr	r3, [pc, #464]	; (800e3e8 <_dtoa_r+0x2e8>)
 800e218:	2200      	movs	r2, #0
 800e21a:	4630      	mov	r0, r6
 800e21c:	4639      	mov	r1, r7
 800e21e:	f7f2 f843 	bl	80002a8 <__aeabi_dsub>
 800e222:	a365      	add	r3, pc, #404	; (adr r3, 800e3b8 <_dtoa_r+0x2b8>)
 800e224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e228:	f7f2 f9f6 	bl	8000618 <__aeabi_dmul>
 800e22c:	a364      	add	r3, pc, #400	; (adr r3, 800e3c0 <_dtoa_r+0x2c0>)
 800e22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e232:	f7f2 f83b 	bl	80002ac <__adddf3>
 800e236:	4606      	mov	r6, r0
 800e238:	4628      	mov	r0, r5
 800e23a:	460f      	mov	r7, r1
 800e23c:	f7f2 f982 	bl	8000544 <__aeabi_i2d>
 800e240:	a361      	add	r3, pc, #388	; (adr r3, 800e3c8 <_dtoa_r+0x2c8>)
 800e242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e246:	f7f2 f9e7 	bl	8000618 <__aeabi_dmul>
 800e24a:	4602      	mov	r2, r0
 800e24c:	460b      	mov	r3, r1
 800e24e:	4630      	mov	r0, r6
 800e250:	4639      	mov	r1, r7
 800e252:	f7f2 f82b 	bl	80002ac <__adddf3>
 800e256:	4606      	mov	r6, r0
 800e258:	460f      	mov	r7, r1
 800e25a:	f7f2 fc8d 	bl	8000b78 <__aeabi_d2iz>
 800e25e:	2200      	movs	r2, #0
 800e260:	9000      	str	r0, [sp, #0]
 800e262:	2300      	movs	r3, #0
 800e264:	4630      	mov	r0, r6
 800e266:	4639      	mov	r1, r7
 800e268:	f7f2 fc48 	bl	8000afc <__aeabi_dcmplt>
 800e26c:	b150      	cbz	r0, 800e284 <_dtoa_r+0x184>
 800e26e:	9800      	ldr	r0, [sp, #0]
 800e270:	f7f2 f968 	bl	8000544 <__aeabi_i2d>
 800e274:	4632      	mov	r2, r6
 800e276:	463b      	mov	r3, r7
 800e278:	f7f2 fc36 	bl	8000ae8 <__aeabi_dcmpeq>
 800e27c:	b910      	cbnz	r0, 800e284 <_dtoa_r+0x184>
 800e27e:	9b00      	ldr	r3, [sp, #0]
 800e280:	3b01      	subs	r3, #1
 800e282:	9300      	str	r3, [sp, #0]
 800e284:	9b00      	ldr	r3, [sp, #0]
 800e286:	2b16      	cmp	r3, #22
 800e288:	d85a      	bhi.n	800e340 <_dtoa_r+0x240>
 800e28a:	9a00      	ldr	r2, [sp, #0]
 800e28c:	4b57      	ldr	r3, [pc, #348]	; (800e3ec <_dtoa_r+0x2ec>)
 800e28e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e296:	ec51 0b19 	vmov	r0, r1, d9
 800e29a:	f7f2 fc2f 	bl	8000afc <__aeabi_dcmplt>
 800e29e:	2800      	cmp	r0, #0
 800e2a0:	d050      	beq.n	800e344 <_dtoa_r+0x244>
 800e2a2:	9b00      	ldr	r3, [sp, #0]
 800e2a4:	3b01      	subs	r3, #1
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e2ae:	1b5d      	subs	r5, r3, r5
 800e2b0:	1e6b      	subs	r3, r5, #1
 800e2b2:	9305      	str	r3, [sp, #20]
 800e2b4:	bf45      	ittet	mi
 800e2b6:	f1c5 0301 	rsbmi	r3, r5, #1
 800e2ba:	9304      	strmi	r3, [sp, #16]
 800e2bc:	2300      	movpl	r3, #0
 800e2be:	2300      	movmi	r3, #0
 800e2c0:	bf4c      	ite	mi
 800e2c2:	9305      	strmi	r3, [sp, #20]
 800e2c4:	9304      	strpl	r3, [sp, #16]
 800e2c6:	9b00      	ldr	r3, [sp, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	db3d      	blt.n	800e348 <_dtoa_r+0x248>
 800e2cc:	9b05      	ldr	r3, [sp, #20]
 800e2ce:	9a00      	ldr	r2, [sp, #0]
 800e2d0:	920a      	str	r2, [sp, #40]	; 0x28
 800e2d2:	4413      	add	r3, r2
 800e2d4:	9305      	str	r3, [sp, #20]
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	9307      	str	r3, [sp, #28]
 800e2da:	9b06      	ldr	r3, [sp, #24]
 800e2dc:	2b09      	cmp	r3, #9
 800e2de:	f200 8089 	bhi.w	800e3f4 <_dtoa_r+0x2f4>
 800e2e2:	2b05      	cmp	r3, #5
 800e2e4:	bfc4      	itt	gt
 800e2e6:	3b04      	subgt	r3, #4
 800e2e8:	9306      	strgt	r3, [sp, #24]
 800e2ea:	9b06      	ldr	r3, [sp, #24]
 800e2ec:	f1a3 0302 	sub.w	r3, r3, #2
 800e2f0:	bfcc      	ite	gt
 800e2f2:	2500      	movgt	r5, #0
 800e2f4:	2501      	movle	r5, #1
 800e2f6:	2b03      	cmp	r3, #3
 800e2f8:	f200 8087 	bhi.w	800e40a <_dtoa_r+0x30a>
 800e2fc:	e8df f003 	tbb	[pc, r3]
 800e300:	59383a2d 	.word	0x59383a2d
 800e304:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e308:	441d      	add	r5, r3
 800e30a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e30e:	2b20      	cmp	r3, #32
 800e310:	bfc1      	itttt	gt
 800e312:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e316:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e31a:	fa0b f303 	lslgt.w	r3, fp, r3
 800e31e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e322:	bfda      	itte	le
 800e324:	f1c3 0320 	rsble	r3, r3, #32
 800e328:	fa06 f003 	lslle.w	r0, r6, r3
 800e32c:	4318      	orrgt	r0, r3
 800e32e:	f7f2 f8f9 	bl	8000524 <__aeabi_ui2d>
 800e332:	2301      	movs	r3, #1
 800e334:	4606      	mov	r6, r0
 800e336:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e33a:	3d01      	subs	r5, #1
 800e33c:	930e      	str	r3, [sp, #56]	; 0x38
 800e33e:	e76a      	b.n	800e216 <_dtoa_r+0x116>
 800e340:	2301      	movs	r3, #1
 800e342:	e7b2      	b.n	800e2aa <_dtoa_r+0x1aa>
 800e344:	900b      	str	r0, [sp, #44]	; 0x2c
 800e346:	e7b1      	b.n	800e2ac <_dtoa_r+0x1ac>
 800e348:	9b04      	ldr	r3, [sp, #16]
 800e34a:	9a00      	ldr	r2, [sp, #0]
 800e34c:	1a9b      	subs	r3, r3, r2
 800e34e:	9304      	str	r3, [sp, #16]
 800e350:	4253      	negs	r3, r2
 800e352:	9307      	str	r3, [sp, #28]
 800e354:	2300      	movs	r3, #0
 800e356:	930a      	str	r3, [sp, #40]	; 0x28
 800e358:	e7bf      	b.n	800e2da <_dtoa_r+0x1da>
 800e35a:	2300      	movs	r3, #0
 800e35c:	9308      	str	r3, [sp, #32]
 800e35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e360:	2b00      	cmp	r3, #0
 800e362:	dc55      	bgt.n	800e410 <_dtoa_r+0x310>
 800e364:	2301      	movs	r3, #1
 800e366:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e36a:	461a      	mov	r2, r3
 800e36c:	9209      	str	r2, [sp, #36]	; 0x24
 800e36e:	e00c      	b.n	800e38a <_dtoa_r+0x28a>
 800e370:	2301      	movs	r3, #1
 800e372:	e7f3      	b.n	800e35c <_dtoa_r+0x25c>
 800e374:	2300      	movs	r3, #0
 800e376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e378:	9308      	str	r3, [sp, #32]
 800e37a:	9b00      	ldr	r3, [sp, #0]
 800e37c:	4413      	add	r3, r2
 800e37e:	9302      	str	r3, [sp, #8]
 800e380:	3301      	adds	r3, #1
 800e382:	2b01      	cmp	r3, #1
 800e384:	9303      	str	r3, [sp, #12]
 800e386:	bfb8      	it	lt
 800e388:	2301      	movlt	r3, #1
 800e38a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e38c:	2200      	movs	r2, #0
 800e38e:	6042      	str	r2, [r0, #4]
 800e390:	2204      	movs	r2, #4
 800e392:	f102 0614 	add.w	r6, r2, #20
 800e396:	429e      	cmp	r6, r3
 800e398:	6841      	ldr	r1, [r0, #4]
 800e39a:	d93d      	bls.n	800e418 <_dtoa_r+0x318>
 800e39c:	4620      	mov	r0, r4
 800e39e:	f000 fda7 	bl	800eef0 <_Balloc>
 800e3a2:	9001      	str	r0, [sp, #4]
 800e3a4:	2800      	cmp	r0, #0
 800e3a6:	d13b      	bne.n	800e420 <_dtoa_r+0x320>
 800e3a8:	4b11      	ldr	r3, [pc, #68]	; (800e3f0 <_dtoa_r+0x2f0>)
 800e3aa:	4602      	mov	r2, r0
 800e3ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e3b0:	e6c0      	b.n	800e134 <_dtoa_r+0x34>
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e7df      	b.n	800e376 <_dtoa_r+0x276>
 800e3b6:	bf00      	nop
 800e3b8:	636f4361 	.word	0x636f4361
 800e3bc:	3fd287a7 	.word	0x3fd287a7
 800e3c0:	8b60c8b3 	.word	0x8b60c8b3
 800e3c4:	3fc68a28 	.word	0x3fc68a28
 800e3c8:	509f79fb 	.word	0x509f79fb
 800e3cc:	3fd34413 	.word	0x3fd34413
 800e3d0:	08010a55 	.word	0x08010a55
 800e3d4:	08010a6c 	.word	0x08010a6c
 800e3d8:	7ff00000 	.word	0x7ff00000
 800e3dc:	08010a51 	.word	0x08010a51
 800e3e0:	08010a48 	.word	0x08010a48
 800e3e4:	08010a25 	.word	0x08010a25
 800e3e8:	3ff80000 	.word	0x3ff80000
 800e3ec:	08010bc0 	.word	0x08010bc0
 800e3f0:	08010ac7 	.word	0x08010ac7
 800e3f4:	2501      	movs	r5, #1
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	9306      	str	r3, [sp, #24]
 800e3fa:	9508      	str	r5, [sp, #32]
 800e3fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e400:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e404:	2200      	movs	r2, #0
 800e406:	2312      	movs	r3, #18
 800e408:	e7b0      	b.n	800e36c <_dtoa_r+0x26c>
 800e40a:	2301      	movs	r3, #1
 800e40c:	9308      	str	r3, [sp, #32]
 800e40e:	e7f5      	b.n	800e3fc <_dtoa_r+0x2fc>
 800e410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e412:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e416:	e7b8      	b.n	800e38a <_dtoa_r+0x28a>
 800e418:	3101      	adds	r1, #1
 800e41a:	6041      	str	r1, [r0, #4]
 800e41c:	0052      	lsls	r2, r2, #1
 800e41e:	e7b8      	b.n	800e392 <_dtoa_r+0x292>
 800e420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e422:	9a01      	ldr	r2, [sp, #4]
 800e424:	601a      	str	r2, [r3, #0]
 800e426:	9b03      	ldr	r3, [sp, #12]
 800e428:	2b0e      	cmp	r3, #14
 800e42a:	f200 809d 	bhi.w	800e568 <_dtoa_r+0x468>
 800e42e:	2d00      	cmp	r5, #0
 800e430:	f000 809a 	beq.w	800e568 <_dtoa_r+0x468>
 800e434:	9b00      	ldr	r3, [sp, #0]
 800e436:	2b00      	cmp	r3, #0
 800e438:	dd32      	ble.n	800e4a0 <_dtoa_r+0x3a0>
 800e43a:	4ab7      	ldr	r2, [pc, #732]	; (800e718 <_dtoa_r+0x618>)
 800e43c:	f003 030f 	and.w	r3, r3, #15
 800e440:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e444:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e448:	9b00      	ldr	r3, [sp, #0]
 800e44a:	05d8      	lsls	r0, r3, #23
 800e44c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e450:	d516      	bpl.n	800e480 <_dtoa_r+0x380>
 800e452:	4bb2      	ldr	r3, [pc, #712]	; (800e71c <_dtoa_r+0x61c>)
 800e454:	ec51 0b19 	vmov	r0, r1, d9
 800e458:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e45c:	f7f2 fa06 	bl	800086c <__aeabi_ddiv>
 800e460:	f007 070f 	and.w	r7, r7, #15
 800e464:	4682      	mov	sl, r0
 800e466:	468b      	mov	fp, r1
 800e468:	2503      	movs	r5, #3
 800e46a:	4eac      	ldr	r6, [pc, #688]	; (800e71c <_dtoa_r+0x61c>)
 800e46c:	b957      	cbnz	r7, 800e484 <_dtoa_r+0x384>
 800e46e:	4642      	mov	r2, r8
 800e470:	464b      	mov	r3, r9
 800e472:	4650      	mov	r0, sl
 800e474:	4659      	mov	r1, fp
 800e476:	f7f2 f9f9 	bl	800086c <__aeabi_ddiv>
 800e47a:	4682      	mov	sl, r0
 800e47c:	468b      	mov	fp, r1
 800e47e:	e028      	b.n	800e4d2 <_dtoa_r+0x3d2>
 800e480:	2502      	movs	r5, #2
 800e482:	e7f2      	b.n	800e46a <_dtoa_r+0x36a>
 800e484:	07f9      	lsls	r1, r7, #31
 800e486:	d508      	bpl.n	800e49a <_dtoa_r+0x39a>
 800e488:	4640      	mov	r0, r8
 800e48a:	4649      	mov	r1, r9
 800e48c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e490:	f7f2 f8c2 	bl	8000618 <__aeabi_dmul>
 800e494:	3501      	adds	r5, #1
 800e496:	4680      	mov	r8, r0
 800e498:	4689      	mov	r9, r1
 800e49a:	107f      	asrs	r7, r7, #1
 800e49c:	3608      	adds	r6, #8
 800e49e:	e7e5      	b.n	800e46c <_dtoa_r+0x36c>
 800e4a0:	f000 809b 	beq.w	800e5da <_dtoa_r+0x4da>
 800e4a4:	9b00      	ldr	r3, [sp, #0]
 800e4a6:	4f9d      	ldr	r7, [pc, #628]	; (800e71c <_dtoa_r+0x61c>)
 800e4a8:	425e      	negs	r6, r3
 800e4aa:	4b9b      	ldr	r3, [pc, #620]	; (800e718 <_dtoa_r+0x618>)
 800e4ac:	f006 020f 	and.w	r2, r6, #15
 800e4b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b8:	ec51 0b19 	vmov	r0, r1, d9
 800e4bc:	f7f2 f8ac 	bl	8000618 <__aeabi_dmul>
 800e4c0:	1136      	asrs	r6, r6, #4
 800e4c2:	4682      	mov	sl, r0
 800e4c4:	468b      	mov	fp, r1
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	2502      	movs	r5, #2
 800e4ca:	2e00      	cmp	r6, #0
 800e4cc:	d17a      	bne.n	800e5c4 <_dtoa_r+0x4c4>
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1d3      	bne.n	800e47a <_dtoa_r+0x37a>
 800e4d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	f000 8082 	beq.w	800e5de <_dtoa_r+0x4de>
 800e4da:	4b91      	ldr	r3, [pc, #580]	; (800e720 <_dtoa_r+0x620>)
 800e4dc:	2200      	movs	r2, #0
 800e4de:	4650      	mov	r0, sl
 800e4e0:	4659      	mov	r1, fp
 800e4e2:	f7f2 fb0b 	bl	8000afc <__aeabi_dcmplt>
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	d079      	beq.n	800e5de <_dtoa_r+0x4de>
 800e4ea:	9b03      	ldr	r3, [sp, #12]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d076      	beq.n	800e5de <_dtoa_r+0x4de>
 800e4f0:	9b02      	ldr	r3, [sp, #8]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	dd36      	ble.n	800e564 <_dtoa_r+0x464>
 800e4f6:	9b00      	ldr	r3, [sp, #0]
 800e4f8:	4650      	mov	r0, sl
 800e4fa:	4659      	mov	r1, fp
 800e4fc:	1e5f      	subs	r7, r3, #1
 800e4fe:	2200      	movs	r2, #0
 800e500:	4b88      	ldr	r3, [pc, #544]	; (800e724 <_dtoa_r+0x624>)
 800e502:	f7f2 f889 	bl	8000618 <__aeabi_dmul>
 800e506:	9e02      	ldr	r6, [sp, #8]
 800e508:	4682      	mov	sl, r0
 800e50a:	468b      	mov	fp, r1
 800e50c:	3501      	adds	r5, #1
 800e50e:	4628      	mov	r0, r5
 800e510:	f7f2 f818 	bl	8000544 <__aeabi_i2d>
 800e514:	4652      	mov	r2, sl
 800e516:	465b      	mov	r3, fp
 800e518:	f7f2 f87e 	bl	8000618 <__aeabi_dmul>
 800e51c:	4b82      	ldr	r3, [pc, #520]	; (800e728 <_dtoa_r+0x628>)
 800e51e:	2200      	movs	r2, #0
 800e520:	f7f1 fec4 	bl	80002ac <__adddf3>
 800e524:	46d0      	mov	r8, sl
 800e526:	46d9      	mov	r9, fp
 800e528:	4682      	mov	sl, r0
 800e52a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e52e:	2e00      	cmp	r6, #0
 800e530:	d158      	bne.n	800e5e4 <_dtoa_r+0x4e4>
 800e532:	4b7e      	ldr	r3, [pc, #504]	; (800e72c <_dtoa_r+0x62c>)
 800e534:	2200      	movs	r2, #0
 800e536:	4640      	mov	r0, r8
 800e538:	4649      	mov	r1, r9
 800e53a:	f7f1 feb5 	bl	80002a8 <__aeabi_dsub>
 800e53e:	4652      	mov	r2, sl
 800e540:	465b      	mov	r3, fp
 800e542:	4680      	mov	r8, r0
 800e544:	4689      	mov	r9, r1
 800e546:	f7f2 faf7 	bl	8000b38 <__aeabi_dcmpgt>
 800e54a:	2800      	cmp	r0, #0
 800e54c:	f040 8295 	bne.w	800ea7a <_dtoa_r+0x97a>
 800e550:	4652      	mov	r2, sl
 800e552:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e556:	4640      	mov	r0, r8
 800e558:	4649      	mov	r1, r9
 800e55a:	f7f2 facf 	bl	8000afc <__aeabi_dcmplt>
 800e55e:	2800      	cmp	r0, #0
 800e560:	f040 8289 	bne.w	800ea76 <_dtoa_r+0x976>
 800e564:	ec5b ab19 	vmov	sl, fp, d9
 800e568:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	f2c0 8148 	blt.w	800e800 <_dtoa_r+0x700>
 800e570:	9a00      	ldr	r2, [sp, #0]
 800e572:	2a0e      	cmp	r2, #14
 800e574:	f300 8144 	bgt.w	800e800 <_dtoa_r+0x700>
 800e578:	4b67      	ldr	r3, [pc, #412]	; (800e718 <_dtoa_r+0x618>)
 800e57a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e57e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e584:	2b00      	cmp	r3, #0
 800e586:	f280 80d5 	bge.w	800e734 <_dtoa_r+0x634>
 800e58a:	9b03      	ldr	r3, [sp, #12]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	f300 80d1 	bgt.w	800e734 <_dtoa_r+0x634>
 800e592:	f040 826f 	bne.w	800ea74 <_dtoa_r+0x974>
 800e596:	4b65      	ldr	r3, [pc, #404]	; (800e72c <_dtoa_r+0x62c>)
 800e598:	2200      	movs	r2, #0
 800e59a:	4640      	mov	r0, r8
 800e59c:	4649      	mov	r1, r9
 800e59e:	f7f2 f83b 	bl	8000618 <__aeabi_dmul>
 800e5a2:	4652      	mov	r2, sl
 800e5a4:	465b      	mov	r3, fp
 800e5a6:	f7f2 fabd 	bl	8000b24 <__aeabi_dcmpge>
 800e5aa:	9e03      	ldr	r6, [sp, #12]
 800e5ac:	4637      	mov	r7, r6
 800e5ae:	2800      	cmp	r0, #0
 800e5b0:	f040 8245 	bne.w	800ea3e <_dtoa_r+0x93e>
 800e5b4:	9d01      	ldr	r5, [sp, #4]
 800e5b6:	2331      	movs	r3, #49	; 0x31
 800e5b8:	f805 3b01 	strb.w	r3, [r5], #1
 800e5bc:	9b00      	ldr	r3, [sp, #0]
 800e5be:	3301      	adds	r3, #1
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	e240      	b.n	800ea46 <_dtoa_r+0x946>
 800e5c4:	07f2      	lsls	r2, r6, #31
 800e5c6:	d505      	bpl.n	800e5d4 <_dtoa_r+0x4d4>
 800e5c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5cc:	f7f2 f824 	bl	8000618 <__aeabi_dmul>
 800e5d0:	3501      	adds	r5, #1
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	1076      	asrs	r6, r6, #1
 800e5d6:	3708      	adds	r7, #8
 800e5d8:	e777      	b.n	800e4ca <_dtoa_r+0x3ca>
 800e5da:	2502      	movs	r5, #2
 800e5dc:	e779      	b.n	800e4d2 <_dtoa_r+0x3d2>
 800e5de:	9f00      	ldr	r7, [sp, #0]
 800e5e0:	9e03      	ldr	r6, [sp, #12]
 800e5e2:	e794      	b.n	800e50e <_dtoa_r+0x40e>
 800e5e4:	9901      	ldr	r1, [sp, #4]
 800e5e6:	4b4c      	ldr	r3, [pc, #304]	; (800e718 <_dtoa_r+0x618>)
 800e5e8:	4431      	add	r1, r6
 800e5ea:	910d      	str	r1, [sp, #52]	; 0x34
 800e5ec:	9908      	ldr	r1, [sp, #32]
 800e5ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e5f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e5f6:	2900      	cmp	r1, #0
 800e5f8:	d043      	beq.n	800e682 <_dtoa_r+0x582>
 800e5fa:	494d      	ldr	r1, [pc, #308]	; (800e730 <_dtoa_r+0x630>)
 800e5fc:	2000      	movs	r0, #0
 800e5fe:	f7f2 f935 	bl	800086c <__aeabi_ddiv>
 800e602:	4652      	mov	r2, sl
 800e604:	465b      	mov	r3, fp
 800e606:	f7f1 fe4f 	bl	80002a8 <__aeabi_dsub>
 800e60a:	9d01      	ldr	r5, [sp, #4]
 800e60c:	4682      	mov	sl, r0
 800e60e:	468b      	mov	fp, r1
 800e610:	4649      	mov	r1, r9
 800e612:	4640      	mov	r0, r8
 800e614:	f7f2 fab0 	bl	8000b78 <__aeabi_d2iz>
 800e618:	4606      	mov	r6, r0
 800e61a:	f7f1 ff93 	bl	8000544 <__aeabi_i2d>
 800e61e:	4602      	mov	r2, r0
 800e620:	460b      	mov	r3, r1
 800e622:	4640      	mov	r0, r8
 800e624:	4649      	mov	r1, r9
 800e626:	f7f1 fe3f 	bl	80002a8 <__aeabi_dsub>
 800e62a:	3630      	adds	r6, #48	; 0x30
 800e62c:	f805 6b01 	strb.w	r6, [r5], #1
 800e630:	4652      	mov	r2, sl
 800e632:	465b      	mov	r3, fp
 800e634:	4680      	mov	r8, r0
 800e636:	4689      	mov	r9, r1
 800e638:	f7f2 fa60 	bl	8000afc <__aeabi_dcmplt>
 800e63c:	2800      	cmp	r0, #0
 800e63e:	d163      	bne.n	800e708 <_dtoa_r+0x608>
 800e640:	4642      	mov	r2, r8
 800e642:	464b      	mov	r3, r9
 800e644:	4936      	ldr	r1, [pc, #216]	; (800e720 <_dtoa_r+0x620>)
 800e646:	2000      	movs	r0, #0
 800e648:	f7f1 fe2e 	bl	80002a8 <__aeabi_dsub>
 800e64c:	4652      	mov	r2, sl
 800e64e:	465b      	mov	r3, fp
 800e650:	f7f2 fa54 	bl	8000afc <__aeabi_dcmplt>
 800e654:	2800      	cmp	r0, #0
 800e656:	f040 80b5 	bne.w	800e7c4 <_dtoa_r+0x6c4>
 800e65a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e65c:	429d      	cmp	r5, r3
 800e65e:	d081      	beq.n	800e564 <_dtoa_r+0x464>
 800e660:	4b30      	ldr	r3, [pc, #192]	; (800e724 <_dtoa_r+0x624>)
 800e662:	2200      	movs	r2, #0
 800e664:	4650      	mov	r0, sl
 800e666:	4659      	mov	r1, fp
 800e668:	f7f1 ffd6 	bl	8000618 <__aeabi_dmul>
 800e66c:	4b2d      	ldr	r3, [pc, #180]	; (800e724 <_dtoa_r+0x624>)
 800e66e:	4682      	mov	sl, r0
 800e670:	468b      	mov	fp, r1
 800e672:	4640      	mov	r0, r8
 800e674:	4649      	mov	r1, r9
 800e676:	2200      	movs	r2, #0
 800e678:	f7f1 ffce 	bl	8000618 <__aeabi_dmul>
 800e67c:	4680      	mov	r8, r0
 800e67e:	4689      	mov	r9, r1
 800e680:	e7c6      	b.n	800e610 <_dtoa_r+0x510>
 800e682:	4650      	mov	r0, sl
 800e684:	4659      	mov	r1, fp
 800e686:	f7f1 ffc7 	bl	8000618 <__aeabi_dmul>
 800e68a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e68c:	9d01      	ldr	r5, [sp, #4]
 800e68e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e690:	4682      	mov	sl, r0
 800e692:	468b      	mov	fp, r1
 800e694:	4649      	mov	r1, r9
 800e696:	4640      	mov	r0, r8
 800e698:	f7f2 fa6e 	bl	8000b78 <__aeabi_d2iz>
 800e69c:	4606      	mov	r6, r0
 800e69e:	f7f1 ff51 	bl	8000544 <__aeabi_i2d>
 800e6a2:	3630      	adds	r6, #48	; 0x30
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	4640      	mov	r0, r8
 800e6aa:	4649      	mov	r1, r9
 800e6ac:	f7f1 fdfc 	bl	80002a8 <__aeabi_dsub>
 800e6b0:	f805 6b01 	strb.w	r6, [r5], #1
 800e6b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6b6:	429d      	cmp	r5, r3
 800e6b8:	4680      	mov	r8, r0
 800e6ba:	4689      	mov	r9, r1
 800e6bc:	f04f 0200 	mov.w	r2, #0
 800e6c0:	d124      	bne.n	800e70c <_dtoa_r+0x60c>
 800e6c2:	4b1b      	ldr	r3, [pc, #108]	; (800e730 <_dtoa_r+0x630>)
 800e6c4:	4650      	mov	r0, sl
 800e6c6:	4659      	mov	r1, fp
 800e6c8:	f7f1 fdf0 	bl	80002ac <__adddf3>
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	4640      	mov	r0, r8
 800e6d2:	4649      	mov	r1, r9
 800e6d4:	f7f2 fa30 	bl	8000b38 <__aeabi_dcmpgt>
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	d173      	bne.n	800e7c4 <_dtoa_r+0x6c4>
 800e6dc:	4652      	mov	r2, sl
 800e6de:	465b      	mov	r3, fp
 800e6e0:	4913      	ldr	r1, [pc, #76]	; (800e730 <_dtoa_r+0x630>)
 800e6e2:	2000      	movs	r0, #0
 800e6e4:	f7f1 fde0 	bl	80002a8 <__aeabi_dsub>
 800e6e8:	4602      	mov	r2, r0
 800e6ea:	460b      	mov	r3, r1
 800e6ec:	4640      	mov	r0, r8
 800e6ee:	4649      	mov	r1, r9
 800e6f0:	f7f2 fa04 	bl	8000afc <__aeabi_dcmplt>
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	f43f af35 	beq.w	800e564 <_dtoa_r+0x464>
 800e6fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e6fc:	1e6b      	subs	r3, r5, #1
 800e6fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800e700:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e704:	2b30      	cmp	r3, #48	; 0x30
 800e706:	d0f8      	beq.n	800e6fa <_dtoa_r+0x5fa>
 800e708:	9700      	str	r7, [sp, #0]
 800e70a:	e049      	b.n	800e7a0 <_dtoa_r+0x6a0>
 800e70c:	4b05      	ldr	r3, [pc, #20]	; (800e724 <_dtoa_r+0x624>)
 800e70e:	f7f1 ff83 	bl	8000618 <__aeabi_dmul>
 800e712:	4680      	mov	r8, r0
 800e714:	4689      	mov	r9, r1
 800e716:	e7bd      	b.n	800e694 <_dtoa_r+0x594>
 800e718:	08010bc0 	.word	0x08010bc0
 800e71c:	08010b98 	.word	0x08010b98
 800e720:	3ff00000 	.word	0x3ff00000
 800e724:	40240000 	.word	0x40240000
 800e728:	401c0000 	.word	0x401c0000
 800e72c:	40140000 	.word	0x40140000
 800e730:	3fe00000 	.word	0x3fe00000
 800e734:	9d01      	ldr	r5, [sp, #4]
 800e736:	4656      	mov	r6, sl
 800e738:	465f      	mov	r7, fp
 800e73a:	4642      	mov	r2, r8
 800e73c:	464b      	mov	r3, r9
 800e73e:	4630      	mov	r0, r6
 800e740:	4639      	mov	r1, r7
 800e742:	f7f2 f893 	bl	800086c <__aeabi_ddiv>
 800e746:	f7f2 fa17 	bl	8000b78 <__aeabi_d2iz>
 800e74a:	4682      	mov	sl, r0
 800e74c:	f7f1 fefa 	bl	8000544 <__aeabi_i2d>
 800e750:	4642      	mov	r2, r8
 800e752:	464b      	mov	r3, r9
 800e754:	f7f1 ff60 	bl	8000618 <__aeabi_dmul>
 800e758:	4602      	mov	r2, r0
 800e75a:	460b      	mov	r3, r1
 800e75c:	4630      	mov	r0, r6
 800e75e:	4639      	mov	r1, r7
 800e760:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e764:	f7f1 fda0 	bl	80002a8 <__aeabi_dsub>
 800e768:	f805 6b01 	strb.w	r6, [r5], #1
 800e76c:	9e01      	ldr	r6, [sp, #4]
 800e76e:	9f03      	ldr	r7, [sp, #12]
 800e770:	1bae      	subs	r6, r5, r6
 800e772:	42b7      	cmp	r7, r6
 800e774:	4602      	mov	r2, r0
 800e776:	460b      	mov	r3, r1
 800e778:	d135      	bne.n	800e7e6 <_dtoa_r+0x6e6>
 800e77a:	f7f1 fd97 	bl	80002ac <__adddf3>
 800e77e:	4642      	mov	r2, r8
 800e780:	464b      	mov	r3, r9
 800e782:	4606      	mov	r6, r0
 800e784:	460f      	mov	r7, r1
 800e786:	f7f2 f9d7 	bl	8000b38 <__aeabi_dcmpgt>
 800e78a:	b9d0      	cbnz	r0, 800e7c2 <_dtoa_r+0x6c2>
 800e78c:	4642      	mov	r2, r8
 800e78e:	464b      	mov	r3, r9
 800e790:	4630      	mov	r0, r6
 800e792:	4639      	mov	r1, r7
 800e794:	f7f2 f9a8 	bl	8000ae8 <__aeabi_dcmpeq>
 800e798:	b110      	cbz	r0, 800e7a0 <_dtoa_r+0x6a0>
 800e79a:	f01a 0f01 	tst.w	sl, #1
 800e79e:	d110      	bne.n	800e7c2 <_dtoa_r+0x6c2>
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	ee18 1a10 	vmov	r1, s16
 800e7a6:	f000 fbe3 	bl	800ef70 <_Bfree>
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	9800      	ldr	r0, [sp, #0]
 800e7ae:	702b      	strb	r3, [r5, #0]
 800e7b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e7b2:	3001      	adds	r0, #1
 800e7b4:	6018      	str	r0, [r3, #0]
 800e7b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	f43f acf1 	beq.w	800e1a0 <_dtoa_r+0xa0>
 800e7be:	601d      	str	r5, [r3, #0]
 800e7c0:	e4ee      	b.n	800e1a0 <_dtoa_r+0xa0>
 800e7c2:	9f00      	ldr	r7, [sp, #0]
 800e7c4:	462b      	mov	r3, r5
 800e7c6:	461d      	mov	r5, r3
 800e7c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e7cc:	2a39      	cmp	r2, #57	; 0x39
 800e7ce:	d106      	bne.n	800e7de <_dtoa_r+0x6de>
 800e7d0:	9a01      	ldr	r2, [sp, #4]
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d1f7      	bne.n	800e7c6 <_dtoa_r+0x6c6>
 800e7d6:	9901      	ldr	r1, [sp, #4]
 800e7d8:	2230      	movs	r2, #48	; 0x30
 800e7da:	3701      	adds	r7, #1
 800e7dc:	700a      	strb	r2, [r1, #0]
 800e7de:	781a      	ldrb	r2, [r3, #0]
 800e7e0:	3201      	adds	r2, #1
 800e7e2:	701a      	strb	r2, [r3, #0]
 800e7e4:	e790      	b.n	800e708 <_dtoa_r+0x608>
 800e7e6:	4ba6      	ldr	r3, [pc, #664]	; (800ea80 <_dtoa_r+0x980>)
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	f7f1 ff15 	bl	8000618 <__aeabi_dmul>
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	4606      	mov	r6, r0
 800e7f4:	460f      	mov	r7, r1
 800e7f6:	f7f2 f977 	bl	8000ae8 <__aeabi_dcmpeq>
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	d09d      	beq.n	800e73a <_dtoa_r+0x63a>
 800e7fe:	e7cf      	b.n	800e7a0 <_dtoa_r+0x6a0>
 800e800:	9a08      	ldr	r2, [sp, #32]
 800e802:	2a00      	cmp	r2, #0
 800e804:	f000 80d7 	beq.w	800e9b6 <_dtoa_r+0x8b6>
 800e808:	9a06      	ldr	r2, [sp, #24]
 800e80a:	2a01      	cmp	r2, #1
 800e80c:	f300 80ba 	bgt.w	800e984 <_dtoa_r+0x884>
 800e810:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e812:	2a00      	cmp	r2, #0
 800e814:	f000 80b2 	beq.w	800e97c <_dtoa_r+0x87c>
 800e818:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e81c:	9e07      	ldr	r6, [sp, #28]
 800e81e:	9d04      	ldr	r5, [sp, #16]
 800e820:	9a04      	ldr	r2, [sp, #16]
 800e822:	441a      	add	r2, r3
 800e824:	9204      	str	r2, [sp, #16]
 800e826:	9a05      	ldr	r2, [sp, #20]
 800e828:	2101      	movs	r1, #1
 800e82a:	441a      	add	r2, r3
 800e82c:	4620      	mov	r0, r4
 800e82e:	9205      	str	r2, [sp, #20]
 800e830:	f000 fc56 	bl	800f0e0 <__i2b>
 800e834:	4607      	mov	r7, r0
 800e836:	2d00      	cmp	r5, #0
 800e838:	dd0c      	ble.n	800e854 <_dtoa_r+0x754>
 800e83a:	9b05      	ldr	r3, [sp, #20]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	dd09      	ble.n	800e854 <_dtoa_r+0x754>
 800e840:	42ab      	cmp	r3, r5
 800e842:	9a04      	ldr	r2, [sp, #16]
 800e844:	bfa8      	it	ge
 800e846:	462b      	movge	r3, r5
 800e848:	1ad2      	subs	r2, r2, r3
 800e84a:	9204      	str	r2, [sp, #16]
 800e84c:	9a05      	ldr	r2, [sp, #20]
 800e84e:	1aed      	subs	r5, r5, r3
 800e850:	1ad3      	subs	r3, r2, r3
 800e852:	9305      	str	r3, [sp, #20]
 800e854:	9b07      	ldr	r3, [sp, #28]
 800e856:	b31b      	cbz	r3, 800e8a0 <_dtoa_r+0x7a0>
 800e858:	9b08      	ldr	r3, [sp, #32]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	f000 80af 	beq.w	800e9be <_dtoa_r+0x8be>
 800e860:	2e00      	cmp	r6, #0
 800e862:	dd13      	ble.n	800e88c <_dtoa_r+0x78c>
 800e864:	4639      	mov	r1, r7
 800e866:	4632      	mov	r2, r6
 800e868:	4620      	mov	r0, r4
 800e86a:	f000 fcf9 	bl	800f260 <__pow5mult>
 800e86e:	ee18 2a10 	vmov	r2, s16
 800e872:	4601      	mov	r1, r0
 800e874:	4607      	mov	r7, r0
 800e876:	4620      	mov	r0, r4
 800e878:	f000 fc48 	bl	800f10c <__multiply>
 800e87c:	ee18 1a10 	vmov	r1, s16
 800e880:	4680      	mov	r8, r0
 800e882:	4620      	mov	r0, r4
 800e884:	f000 fb74 	bl	800ef70 <_Bfree>
 800e888:	ee08 8a10 	vmov	s16, r8
 800e88c:	9b07      	ldr	r3, [sp, #28]
 800e88e:	1b9a      	subs	r2, r3, r6
 800e890:	d006      	beq.n	800e8a0 <_dtoa_r+0x7a0>
 800e892:	ee18 1a10 	vmov	r1, s16
 800e896:	4620      	mov	r0, r4
 800e898:	f000 fce2 	bl	800f260 <__pow5mult>
 800e89c:	ee08 0a10 	vmov	s16, r0
 800e8a0:	2101      	movs	r1, #1
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	f000 fc1c 	bl	800f0e0 <__i2b>
 800e8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	4606      	mov	r6, r0
 800e8ae:	f340 8088 	ble.w	800e9c2 <_dtoa_r+0x8c2>
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	4601      	mov	r1, r0
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	f000 fcd2 	bl	800f260 <__pow5mult>
 800e8bc:	9b06      	ldr	r3, [sp, #24]
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	4606      	mov	r6, r0
 800e8c2:	f340 8081 	ble.w	800e9c8 <_dtoa_r+0x8c8>
 800e8c6:	f04f 0800 	mov.w	r8, #0
 800e8ca:	6933      	ldr	r3, [r6, #16]
 800e8cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e8d0:	6918      	ldr	r0, [r3, #16]
 800e8d2:	f000 fbb5 	bl	800f040 <__hi0bits>
 800e8d6:	f1c0 0020 	rsb	r0, r0, #32
 800e8da:	9b05      	ldr	r3, [sp, #20]
 800e8dc:	4418      	add	r0, r3
 800e8de:	f010 001f 	ands.w	r0, r0, #31
 800e8e2:	f000 8092 	beq.w	800ea0a <_dtoa_r+0x90a>
 800e8e6:	f1c0 0320 	rsb	r3, r0, #32
 800e8ea:	2b04      	cmp	r3, #4
 800e8ec:	f340 808a 	ble.w	800ea04 <_dtoa_r+0x904>
 800e8f0:	f1c0 001c 	rsb	r0, r0, #28
 800e8f4:	9b04      	ldr	r3, [sp, #16]
 800e8f6:	4403      	add	r3, r0
 800e8f8:	9304      	str	r3, [sp, #16]
 800e8fa:	9b05      	ldr	r3, [sp, #20]
 800e8fc:	4403      	add	r3, r0
 800e8fe:	4405      	add	r5, r0
 800e900:	9305      	str	r3, [sp, #20]
 800e902:	9b04      	ldr	r3, [sp, #16]
 800e904:	2b00      	cmp	r3, #0
 800e906:	dd07      	ble.n	800e918 <_dtoa_r+0x818>
 800e908:	ee18 1a10 	vmov	r1, s16
 800e90c:	461a      	mov	r2, r3
 800e90e:	4620      	mov	r0, r4
 800e910:	f000 fd00 	bl	800f314 <__lshift>
 800e914:	ee08 0a10 	vmov	s16, r0
 800e918:	9b05      	ldr	r3, [sp, #20]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	dd05      	ble.n	800e92a <_dtoa_r+0x82a>
 800e91e:	4631      	mov	r1, r6
 800e920:	461a      	mov	r2, r3
 800e922:	4620      	mov	r0, r4
 800e924:	f000 fcf6 	bl	800f314 <__lshift>
 800e928:	4606      	mov	r6, r0
 800e92a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d06e      	beq.n	800ea0e <_dtoa_r+0x90e>
 800e930:	ee18 0a10 	vmov	r0, s16
 800e934:	4631      	mov	r1, r6
 800e936:	f000 fd5d 	bl	800f3f4 <__mcmp>
 800e93a:	2800      	cmp	r0, #0
 800e93c:	da67      	bge.n	800ea0e <_dtoa_r+0x90e>
 800e93e:	9b00      	ldr	r3, [sp, #0]
 800e940:	3b01      	subs	r3, #1
 800e942:	ee18 1a10 	vmov	r1, s16
 800e946:	9300      	str	r3, [sp, #0]
 800e948:	220a      	movs	r2, #10
 800e94a:	2300      	movs	r3, #0
 800e94c:	4620      	mov	r0, r4
 800e94e:	f000 fb31 	bl	800efb4 <__multadd>
 800e952:	9b08      	ldr	r3, [sp, #32]
 800e954:	ee08 0a10 	vmov	s16, r0
 800e958:	2b00      	cmp	r3, #0
 800e95a:	f000 81b1 	beq.w	800ecc0 <_dtoa_r+0xbc0>
 800e95e:	2300      	movs	r3, #0
 800e960:	4639      	mov	r1, r7
 800e962:	220a      	movs	r2, #10
 800e964:	4620      	mov	r0, r4
 800e966:	f000 fb25 	bl	800efb4 <__multadd>
 800e96a:	9b02      	ldr	r3, [sp, #8]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	4607      	mov	r7, r0
 800e970:	f300 808e 	bgt.w	800ea90 <_dtoa_r+0x990>
 800e974:	9b06      	ldr	r3, [sp, #24]
 800e976:	2b02      	cmp	r3, #2
 800e978:	dc51      	bgt.n	800ea1e <_dtoa_r+0x91e>
 800e97a:	e089      	b.n	800ea90 <_dtoa_r+0x990>
 800e97c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e97e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e982:	e74b      	b.n	800e81c <_dtoa_r+0x71c>
 800e984:	9b03      	ldr	r3, [sp, #12]
 800e986:	1e5e      	subs	r6, r3, #1
 800e988:	9b07      	ldr	r3, [sp, #28]
 800e98a:	42b3      	cmp	r3, r6
 800e98c:	bfbf      	itttt	lt
 800e98e:	9b07      	ldrlt	r3, [sp, #28]
 800e990:	9607      	strlt	r6, [sp, #28]
 800e992:	1af2      	sublt	r2, r6, r3
 800e994:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e996:	bfb6      	itet	lt
 800e998:	189b      	addlt	r3, r3, r2
 800e99a:	1b9e      	subge	r6, r3, r6
 800e99c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e99e:	9b03      	ldr	r3, [sp, #12]
 800e9a0:	bfb8      	it	lt
 800e9a2:	2600      	movlt	r6, #0
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	bfb7      	itett	lt
 800e9a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e9ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e9b0:	1a9d      	sublt	r5, r3, r2
 800e9b2:	2300      	movlt	r3, #0
 800e9b4:	e734      	b.n	800e820 <_dtoa_r+0x720>
 800e9b6:	9e07      	ldr	r6, [sp, #28]
 800e9b8:	9d04      	ldr	r5, [sp, #16]
 800e9ba:	9f08      	ldr	r7, [sp, #32]
 800e9bc:	e73b      	b.n	800e836 <_dtoa_r+0x736>
 800e9be:	9a07      	ldr	r2, [sp, #28]
 800e9c0:	e767      	b.n	800e892 <_dtoa_r+0x792>
 800e9c2:	9b06      	ldr	r3, [sp, #24]
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	dc18      	bgt.n	800e9fa <_dtoa_r+0x8fa>
 800e9c8:	f1ba 0f00 	cmp.w	sl, #0
 800e9cc:	d115      	bne.n	800e9fa <_dtoa_r+0x8fa>
 800e9ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e9d2:	b993      	cbnz	r3, 800e9fa <_dtoa_r+0x8fa>
 800e9d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e9d8:	0d1b      	lsrs	r3, r3, #20
 800e9da:	051b      	lsls	r3, r3, #20
 800e9dc:	b183      	cbz	r3, 800ea00 <_dtoa_r+0x900>
 800e9de:	9b04      	ldr	r3, [sp, #16]
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	9304      	str	r3, [sp, #16]
 800e9e4:	9b05      	ldr	r3, [sp, #20]
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	9305      	str	r3, [sp, #20]
 800e9ea:	f04f 0801 	mov.w	r8, #1
 800e9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	f47f af6a 	bne.w	800e8ca <_dtoa_r+0x7ca>
 800e9f6:	2001      	movs	r0, #1
 800e9f8:	e76f      	b.n	800e8da <_dtoa_r+0x7da>
 800e9fa:	f04f 0800 	mov.w	r8, #0
 800e9fe:	e7f6      	b.n	800e9ee <_dtoa_r+0x8ee>
 800ea00:	4698      	mov	r8, r3
 800ea02:	e7f4      	b.n	800e9ee <_dtoa_r+0x8ee>
 800ea04:	f43f af7d 	beq.w	800e902 <_dtoa_r+0x802>
 800ea08:	4618      	mov	r0, r3
 800ea0a:	301c      	adds	r0, #28
 800ea0c:	e772      	b.n	800e8f4 <_dtoa_r+0x7f4>
 800ea0e:	9b03      	ldr	r3, [sp, #12]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	dc37      	bgt.n	800ea84 <_dtoa_r+0x984>
 800ea14:	9b06      	ldr	r3, [sp, #24]
 800ea16:	2b02      	cmp	r3, #2
 800ea18:	dd34      	ble.n	800ea84 <_dtoa_r+0x984>
 800ea1a:	9b03      	ldr	r3, [sp, #12]
 800ea1c:	9302      	str	r3, [sp, #8]
 800ea1e:	9b02      	ldr	r3, [sp, #8]
 800ea20:	b96b      	cbnz	r3, 800ea3e <_dtoa_r+0x93e>
 800ea22:	4631      	mov	r1, r6
 800ea24:	2205      	movs	r2, #5
 800ea26:	4620      	mov	r0, r4
 800ea28:	f000 fac4 	bl	800efb4 <__multadd>
 800ea2c:	4601      	mov	r1, r0
 800ea2e:	4606      	mov	r6, r0
 800ea30:	ee18 0a10 	vmov	r0, s16
 800ea34:	f000 fcde 	bl	800f3f4 <__mcmp>
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	f73f adbb 	bgt.w	800e5b4 <_dtoa_r+0x4b4>
 800ea3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea40:	9d01      	ldr	r5, [sp, #4]
 800ea42:	43db      	mvns	r3, r3
 800ea44:	9300      	str	r3, [sp, #0]
 800ea46:	f04f 0800 	mov.w	r8, #0
 800ea4a:	4631      	mov	r1, r6
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	f000 fa8f 	bl	800ef70 <_Bfree>
 800ea52:	2f00      	cmp	r7, #0
 800ea54:	f43f aea4 	beq.w	800e7a0 <_dtoa_r+0x6a0>
 800ea58:	f1b8 0f00 	cmp.w	r8, #0
 800ea5c:	d005      	beq.n	800ea6a <_dtoa_r+0x96a>
 800ea5e:	45b8      	cmp	r8, r7
 800ea60:	d003      	beq.n	800ea6a <_dtoa_r+0x96a>
 800ea62:	4641      	mov	r1, r8
 800ea64:	4620      	mov	r0, r4
 800ea66:	f000 fa83 	bl	800ef70 <_Bfree>
 800ea6a:	4639      	mov	r1, r7
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	f000 fa7f 	bl	800ef70 <_Bfree>
 800ea72:	e695      	b.n	800e7a0 <_dtoa_r+0x6a0>
 800ea74:	2600      	movs	r6, #0
 800ea76:	4637      	mov	r7, r6
 800ea78:	e7e1      	b.n	800ea3e <_dtoa_r+0x93e>
 800ea7a:	9700      	str	r7, [sp, #0]
 800ea7c:	4637      	mov	r7, r6
 800ea7e:	e599      	b.n	800e5b4 <_dtoa_r+0x4b4>
 800ea80:	40240000 	.word	0x40240000
 800ea84:	9b08      	ldr	r3, [sp, #32]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	f000 80ca 	beq.w	800ec20 <_dtoa_r+0xb20>
 800ea8c:	9b03      	ldr	r3, [sp, #12]
 800ea8e:	9302      	str	r3, [sp, #8]
 800ea90:	2d00      	cmp	r5, #0
 800ea92:	dd05      	ble.n	800eaa0 <_dtoa_r+0x9a0>
 800ea94:	4639      	mov	r1, r7
 800ea96:	462a      	mov	r2, r5
 800ea98:	4620      	mov	r0, r4
 800ea9a:	f000 fc3b 	bl	800f314 <__lshift>
 800ea9e:	4607      	mov	r7, r0
 800eaa0:	f1b8 0f00 	cmp.w	r8, #0
 800eaa4:	d05b      	beq.n	800eb5e <_dtoa_r+0xa5e>
 800eaa6:	6879      	ldr	r1, [r7, #4]
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	f000 fa21 	bl	800eef0 <_Balloc>
 800eaae:	4605      	mov	r5, r0
 800eab0:	b928      	cbnz	r0, 800eabe <_dtoa_r+0x9be>
 800eab2:	4b87      	ldr	r3, [pc, #540]	; (800ecd0 <_dtoa_r+0xbd0>)
 800eab4:	4602      	mov	r2, r0
 800eab6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eaba:	f7ff bb3b 	b.w	800e134 <_dtoa_r+0x34>
 800eabe:	693a      	ldr	r2, [r7, #16]
 800eac0:	3202      	adds	r2, #2
 800eac2:	0092      	lsls	r2, r2, #2
 800eac4:	f107 010c 	add.w	r1, r7, #12
 800eac8:	300c      	adds	r0, #12
 800eaca:	f7fe fcc3 	bl	800d454 <memcpy>
 800eace:	2201      	movs	r2, #1
 800ead0:	4629      	mov	r1, r5
 800ead2:	4620      	mov	r0, r4
 800ead4:	f000 fc1e 	bl	800f314 <__lshift>
 800ead8:	9b01      	ldr	r3, [sp, #4]
 800eada:	f103 0901 	add.w	r9, r3, #1
 800eade:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800eae2:	4413      	add	r3, r2
 800eae4:	9305      	str	r3, [sp, #20]
 800eae6:	f00a 0301 	and.w	r3, sl, #1
 800eaea:	46b8      	mov	r8, r7
 800eaec:	9304      	str	r3, [sp, #16]
 800eaee:	4607      	mov	r7, r0
 800eaf0:	4631      	mov	r1, r6
 800eaf2:	ee18 0a10 	vmov	r0, s16
 800eaf6:	f7ff fa77 	bl	800dfe8 <quorem>
 800eafa:	4641      	mov	r1, r8
 800eafc:	9002      	str	r0, [sp, #8]
 800eafe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800eb02:	ee18 0a10 	vmov	r0, s16
 800eb06:	f000 fc75 	bl	800f3f4 <__mcmp>
 800eb0a:	463a      	mov	r2, r7
 800eb0c:	9003      	str	r0, [sp, #12]
 800eb0e:	4631      	mov	r1, r6
 800eb10:	4620      	mov	r0, r4
 800eb12:	f000 fc8b 	bl	800f42c <__mdiff>
 800eb16:	68c2      	ldr	r2, [r0, #12]
 800eb18:	f109 3bff 	add.w	fp, r9, #4294967295
 800eb1c:	4605      	mov	r5, r0
 800eb1e:	bb02      	cbnz	r2, 800eb62 <_dtoa_r+0xa62>
 800eb20:	4601      	mov	r1, r0
 800eb22:	ee18 0a10 	vmov	r0, s16
 800eb26:	f000 fc65 	bl	800f3f4 <__mcmp>
 800eb2a:	4602      	mov	r2, r0
 800eb2c:	4629      	mov	r1, r5
 800eb2e:	4620      	mov	r0, r4
 800eb30:	9207      	str	r2, [sp, #28]
 800eb32:	f000 fa1d 	bl	800ef70 <_Bfree>
 800eb36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800eb3a:	ea43 0102 	orr.w	r1, r3, r2
 800eb3e:	9b04      	ldr	r3, [sp, #16]
 800eb40:	430b      	orrs	r3, r1
 800eb42:	464d      	mov	r5, r9
 800eb44:	d10f      	bne.n	800eb66 <_dtoa_r+0xa66>
 800eb46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800eb4a:	d02a      	beq.n	800eba2 <_dtoa_r+0xaa2>
 800eb4c:	9b03      	ldr	r3, [sp, #12]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	dd02      	ble.n	800eb58 <_dtoa_r+0xa58>
 800eb52:	9b02      	ldr	r3, [sp, #8]
 800eb54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800eb58:	f88b a000 	strb.w	sl, [fp]
 800eb5c:	e775      	b.n	800ea4a <_dtoa_r+0x94a>
 800eb5e:	4638      	mov	r0, r7
 800eb60:	e7ba      	b.n	800ead8 <_dtoa_r+0x9d8>
 800eb62:	2201      	movs	r2, #1
 800eb64:	e7e2      	b.n	800eb2c <_dtoa_r+0xa2c>
 800eb66:	9b03      	ldr	r3, [sp, #12]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	db04      	blt.n	800eb76 <_dtoa_r+0xa76>
 800eb6c:	9906      	ldr	r1, [sp, #24]
 800eb6e:	430b      	orrs	r3, r1
 800eb70:	9904      	ldr	r1, [sp, #16]
 800eb72:	430b      	orrs	r3, r1
 800eb74:	d122      	bne.n	800ebbc <_dtoa_r+0xabc>
 800eb76:	2a00      	cmp	r2, #0
 800eb78:	ddee      	ble.n	800eb58 <_dtoa_r+0xa58>
 800eb7a:	ee18 1a10 	vmov	r1, s16
 800eb7e:	2201      	movs	r2, #1
 800eb80:	4620      	mov	r0, r4
 800eb82:	f000 fbc7 	bl	800f314 <__lshift>
 800eb86:	4631      	mov	r1, r6
 800eb88:	ee08 0a10 	vmov	s16, r0
 800eb8c:	f000 fc32 	bl	800f3f4 <__mcmp>
 800eb90:	2800      	cmp	r0, #0
 800eb92:	dc03      	bgt.n	800eb9c <_dtoa_r+0xa9c>
 800eb94:	d1e0      	bne.n	800eb58 <_dtoa_r+0xa58>
 800eb96:	f01a 0f01 	tst.w	sl, #1
 800eb9a:	d0dd      	beq.n	800eb58 <_dtoa_r+0xa58>
 800eb9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800eba0:	d1d7      	bne.n	800eb52 <_dtoa_r+0xa52>
 800eba2:	2339      	movs	r3, #57	; 0x39
 800eba4:	f88b 3000 	strb.w	r3, [fp]
 800eba8:	462b      	mov	r3, r5
 800ebaa:	461d      	mov	r5, r3
 800ebac:	3b01      	subs	r3, #1
 800ebae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ebb2:	2a39      	cmp	r2, #57	; 0x39
 800ebb4:	d071      	beq.n	800ec9a <_dtoa_r+0xb9a>
 800ebb6:	3201      	adds	r2, #1
 800ebb8:	701a      	strb	r2, [r3, #0]
 800ebba:	e746      	b.n	800ea4a <_dtoa_r+0x94a>
 800ebbc:	2a00      	cmp	r2, #0
 800ebbe:	dd07      	ble.n	800ebd0 <_dtoa_r+0xad0>
 800ebc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ebc4:	d0ed      	beq.n	800eba2 <_dtoa_r+0xaa2>
 800ebc6:	f10a 0301 	add.w	r3, sl, #1
 800ebca:	f88b 3000 	strb.w	r3, [fp]
 800ebce:	e73c      	b.n	800ea4a <_dtoa_r+0x94a>
 800ebd0:	9b05      	ldr	r3, [sp, #20]
 800ebd2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ebd6:	4599      	cmp	r9, r3
 800ebd8:	d047      	beq.n	800ec6a <_dtoa_r+0xb6a>
 800ebda:	ee18 1a10 	vmov	r1, s16
 800ebde:	2300      	movs	r3, #0
 800ebe0:	220a      	movs	r2, #10
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	f000 f9e6 	bl	800efb4 <__multadd>
 800ebe8:	45b8      	cmp	r8, r7
 800ebea:	ee08 0a10 	vmov	s16, r0
 800ebee:	f04f 0300 	mov.w	r3, #0
 800ebf2:	f04f 020a 	mov.w	r2, #10
 800ebf6:	4641      	mov	r1, r8
 800ebf8:	4620      	mov	r0, r4
 800ebfa:	d106      	bne.n	800ec0a <_dtoa_r+0xb0a>
 800ebfc:	f000 f9da 	bl	800efb4 <__multadd>
 800ec00:	4680      	mov	r8, r0
 800ec02:	4607      	mov	r7, r0
 800ec04:	f109 0901 	add.w	r9, r9, #1
 800ec08:	e772      	b.n	800eaf0 <_dtoa_r+0x9f0>
 800ec0a:	f000 f9d3 	bl	800efb4 <__multadd>
 800ec0e:	4639      	mov	r1, r7
 800ec10:	4680      	mov	r8, r0
 800ec12:	2300      	movs	r3, #0
 800ec14:	220a      	movs	r2, #10
 800ec16:	4620      	mov	r0, r4
 800ec18:	f000 f9cc 	bl	800efb4 <__multadd>
 800ec1c:	4607      	mov	r7, r0
 800ec1e:	e7f1      	b.n	800ec04 <_dtoa_r+0xb04>
 800ec20:	9b03      	ldr	r3, [sp, #12]
 800ec22:	9302      	str	r3, [sp, #8]
 800ec24:	9d01      	ldr	r5, [sp, #4]
 800ec26:	ee18 0a10 	vmov	r0, s16
 800ec2a:	4631      	mov	r1, r6
 800ec2c:	f7ff f9dc 	bl	800dfe8 <quorem>
 800ec30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ec34:	9b01      	ldr	r3, [sp, #4]
 800ec36:	f805 ab01 	strb.w	sl, [r5], #1
 800ec3a:	1aea      	subs	r2, r5, r3
 800ec3c:	9b02      	ldr	r3, [sp, #8]
 800ec3e:	4293      	cmp	r3, r2
 800ec40:	dd09      	ble.n	800ec56 <_dtoa_r+0xb56>
 800ec42:	ee18 1a10 	vmov	r1, s16
 800ec46:	2300      	movs	r3, #0
 800ec48:	220a      	movs	r2, #10
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f000 f9b2 	bl	800efb4 <__multadd>
 800ec50:	ee08 0a10 	vmov	s16, r0
 800ec54:	e7e7      	b.n	800ec26 <_dtoa_r+0xb26>
 800ec56:	9b02      	ldr	r3, [sp, #8]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	bfc8      	it	gt
 800ec5c:	461d      	movgt	r5, r3
 800ec5e:	9b01      	ldr	r3, [sp, #4]
 800ec60:	bfd8      	it	le
 800ec62:	2501      	movle	r5, #1
 800ec64:	441d      	add	r5, r3
 800ec66:	f04f 0800 	mov.w	r8, #0
 800ec6a:	ee18 1a10 	vmov	r1, s16
 800ec6e:	2201      	movs	r2, #1
 800ec70:	4620      	mov	r0, r4
 800ec72:	f000 fb4f 	bl	800f314 <__lshift>
 800ec76:	4631      	mov	r1, r6
 800ec78:	ee08 0a10 	vmov	s16, r0
 800ec7c:	f000 fbba 	bl	800f3f4 <__mcmp>
 800ec80:	2800      	cmp	r0, #0
 800ec82:	dc91      	bgt.n	800eba8 <_dtoa_r+0xaa8>
 800ec84:	d102      	bne.n	800ec8c <_dtoa_r+0xb8c>
 800ec86:	f01a 0f01 	tst.w	sl, #1
 800ec8a:	d18d      	bne.n	800eba8 <_dtoa_r+0xaa8>
 800ec8c:	462b      	mov	r3, r5
 800ec8e:	461d      	mov	r5, r3
 800ec90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec94:	2a30      	cmp	r2, #48	; 0x30
 800ec96:	d0fa      	beq.n	800ec8e <_dtoa_r+0xb8e>
 800ec98:	e6d7      	b.n	800ea4a <_dtoa_r+0x94a>
 800ec9a:	9a01      	ldr	r2, [sp, #4]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d184      	bne.n	800ebaa <_dtoa_r+0xaaa>
 800eca0:	9b00      	ldr	r3, [sp, #0]
 800eca2:	3301      	adds	r3, #1
 800eca4:	9300      	str	r3, [sp, #0]
 800eca6:	2331      	movs	r3, #49	; 0x31
 800eca8:	7013      	strb	r3, [r2, #0]
 800ecaa:	e6ce      	b.n	800ea4a <_dtoa_r+0x94a>
 800ecac:	4b09      	ldr	r3, [pc, #36]	; (800ecd4 <_dtoa_r+0xbd4>)
 800ecae:	f7ff ba95 	b.w	800e1dc <_dtoa_r+0xdc>
 800ecb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	f47f aa6e 	bne.w	800e196 <_dtoa_r+0x96>
 800ecba:	4b07      	ldr	r3, [pc, #28]	; (800ecd8 <_dtoa_r+0xbd8>)
 800ecbc:	f7ff ba8e 	b.w	800e1dc <_dtoa_r+0xdc>
 800ecc0:	9b02      	ldr	r3, [sp, #8]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	dcae      	bgt.n	800ec24 <_dtoa_r+0xb24>
 800ecc6:	9b06      	ldr	r3, [sp, #24]
 800ecc8:	2b02      	cmp	r3, #2
 800ecca:	f73f aea8 	bgt.w	800ea1e <_dtoa_r+0x91e>
 800ecce:	e7a9      	b.n	800ec24 <_dtoa_r+0xb24>
 800ecd0:	08010ac7 	.word	0x08010ac7
 800ecd4:	08010a24 	.word	0x08010a24
 800ecd8:	08010a48 	.word	0x08010a48

0800ecdc <std>:
 800ecdc:	2300      	movs	r3, #0
 800ecde:	b510      	push	{r4, lr}
 800ece0:	4604      	mov	r4, r0
 800ece2:	e9c0 3300 	strd	r3, r3, [r0]
 800ece6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ecea:	6083      	str	r3, [r0, #8]
 800ecec:	8181      	strh	r1, [r0, #12]
 800ecee:	6643      	str	r3, [r0, #100]	; 0x64
 800ecf0:	81c2      	strh	r2, [r0, #14]
 800ecf2:	6183      	str	r3, [r0, #24]
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	2208      	movs	r2, #8
 800ecf8:	305c      	adds	r0, #92	; 0x5c
 800ecfa:	f7fe fbb9 	bl	800d470 <memset>
 800ecfe:	4b05      	ldr	r3, [pc, #20]	; (800ed14 <std+0x38>)
 800ed00:	6263      	str	r3, [r4, #36]	; 0x24
 800ed02:	4b05      	ldr	r3, [pc, #20]	; (800ed18 <std+0x3c>)
 800ed04:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed06:	4b05      	ldr	r3, [pc, #20]	; (800ed1c <std+0x40>)
 800ed08:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed0a:	4b05      	ldr	r3, [pc, #20]	; (800ed20 <std+0x44>)
 800ed0c:	6224      	str	r4, [r4, #32]
 800ed0e:	6323      	str	r3, [r4, #48]	; 0x30
 800ed10:	bd10      	pop	{r4, pc}
 800ed12:	bf00      	nop
 800ed14:	0800fb91 	.word	0x0800fb91
 800ed18:	0800fbb3 	.word	0x0800fbb3
 800ed1c:	0800fbeb 	.word	0x0800fbeb
 800ed20:	0800fc0f 	.word	0x0800fc0f

0800ed24 <_cleanup_r>:
 800ed24:	4901      	ldr	r1, [pc, #4]	; (800ed2c <_cleanup_r+0x8>)
 800ed26:	f000 b8af 	b.w	800ee88 <_fwalk_reent>
 800ed2a:	bf00      	nop
 800ed2c:	0800ff25 	.word	0x0800ff25

0800ed30 <__sfmoreglue>:
 800ed30:	b570      	push	{r4, r5, r6, lr}
 800ed32:	2268      	movs	r2, #104	; 0x68
 800ed34:	1e4d      	subs	r5, r1, #1
 800ed36:	4355      	muls	r5, r2
 800ed38:	460e      	mov	r6, r1
 800ed3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed3e:	f7fe fc0b 	bl	800d558 <_malloc_r>
 800ed42:	4604      	mov	r4, r0
 800ed44:	b140      	cbz	r0, 800ed58 <__sfmoreglue+0x28>
 800ed46:	2100      	movs	r1, #0
 800ed48:	e9c0 1600 	strd	r1, r6, [r0]
 800ed4c:	300c      	adds	r0, #12
 800ed4e:	60a0      	str	r0, [r4, #8]
 800ed50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed54:	f7fe fb8c 	bl	800d470 <memset>
 800ed58:	4620      	mov	r0, r4
 800ed5a:	bd70      	pop	{r4, r5, r6, pc}

0800ed5c <__sfp_lock_acquire>:
 800ed5c:	4801      	ldr	r0, [pc, #4]	; (800ed64 <__sfp_lock_acquire+0x8>)
 800ed5e:	f000 b8b8 	b.w	800eed2 <__retarget_lock_acquire_recursive>
 800ed62:	bf00      	nop
 800ed64:	200081fd 	.word	0x200081fd

0800ed68 <__sfp_lock_release>:
 800ed68:	4801      	ldr	r0, [pc, #4]	; (800ed70 <__sfp_lock_release+0x8>)
 800ed6a:	f000 b8b3 	b.w	800eed4 <__retarget_lock_release_recursive>
 800ed6e:	bf00      	nop
 800ed70:	200081fd 	.word	0x200081fd

0800ed74 <__sinit_lock_acquire>:
 800ed74:	4801      	ldr	r0, [pc, #4]	; (800ed7c <__sinit_lock_acquire+0x8>)
 800ed76:	f000 b8ac 	b.w	800eed2 <__retarget_lock_acquire_recursive>
 800ed7a:	bf00      	nop
 800ed7c:	200081fe 	.word	0x200081fe

0800ed80 <__sinit_lock_release>:
 800ed80:	4801      	ldr	r0, [pc, #4]	; (800ed88 <__sinit_lock_release+0x8>)
 800ed82:	f000 b8a7 	b.w	800eed4 <__retarget_lock_release_recursive>
 800ed86:	bf00      	nop
 800ed88:	200081fe 	.word	0x200081fe

0800ed8c <__sinit>:
 800ed8c:	b510      	push	{r4, lr}
 800ed8e:	4604      	mov	r4, r0
 800ed90:	f7ff fff0 	bl	800ed74 <__sinit_lock_acquire>
 800ed94:	69a3      	ldr	r3, [r4, #24]
 800ed96:	b11b      	cbz	r3, 800eda0 <__sinit+0x14>
 800ed98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed9c:	f7ff bff0 	b.w	800ed80 <__sinit_lock_release>
 800eda0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eda4:	6523      	str	r3, [r4, #80]	; 0x50
 800eda6:	4b13      	ldr	r3, [pc, #76]	; (800edf4 <__sinit+0x68>)
 800eda8:	4a13      	ldr	r2, [pc, #76]	; (800edf8 <__sinit+0x6c>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	62a2      	str	r2, [r4, #40]	; 0x28
 800edae:	42a3      	cmp	r3, r4
 800edb0:	bf04      	itt	eq
 800edb2:	2301      	moveq	r3, #1
 800edb4:	61a3      	streq	r3, [r4, #24]
 800edb6:	4620      	mov	r0, r4
 800edb8:	f000 f820 	bl	800edfc <__sfp>
 800edbc:	6060      	str	r0, [r4, #4]
 800edbe:	4620      	mov	r0, r4
 800edc0:	f000 f81c 	bl	800edfc <__sfp>
 800edc4:	60a0      	str	r0, [r4, #8]
 800edc6:	4620      	mov	r0, r4
 800edc8:	f000 f818 	bl	800edfc <__sfp>
 800edcc:	2200      	movs	r2, #0
 800edce:	60e0      	str	r0, [r4, #12]
 800edd0:	2104      	movs	r1, #4
 800edd2:	6860      	ldr	r0, [r4, #4]
 800edd4:	f7ff ff82 	bl	800ecdc <std>
 800edd8:	68a0      	ldr	r0, [r4, #8]
 800edda:	2201      	movs	r2, #1
 800eddc:	2109      	movs	r1, #9
 800edde:	f7ff ff7d 	bl	800ecdc <std>
 800ede2:	68e0      	ldr	r0, [r4, #12]
 800ede4:	2202      	movs	r2, #2
 800ede6:	2112      	movs	r1, #18
 800ede8:	f7ff ff78 	bl	800ecdc <std>
 800edec:	2301      	movs	r3, #1
 800edee:	61a3      	str	r3, [r4, #24]
 800edf0:	e7d2      	b.n	800ed98 <__sinit+0xc>
 800edf2:	bf00      	nop
 800edf4:	08010a10 	.word	0x08010a10
 800edf8:	0800ed25 	.word	0x0800ed25

0800edfc <__sfp>:
 800edfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edfe:	4607      	mov	r7, r0
 800ee00:	f7ff ffac 	bl	800ed5c <__sfp_lock_acquire>
 800ee04:	4b1e      	ldr	r3, [pc, #120]	; (800ee80 <__sfp+0x84>)
 800ee06:	681e      	ldr	r6, [r3, #0]
 800ee08:	69b3      	ldr	r3, [r6, #24]
 800ee0a:	b913      	cbnz	r3, 800ee12 <__sfp+0x16>
 800ee0c:	4630      	mov	r0, r6
 800ee0e:	f7ff ffbd 	bl	800ed8c <__sinit>
 800ee12:	3648      	adds	r6, #72	; 0x48
 800ee14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ee18:	3b01      	subs	r3, #1
 800ee1a:	d503      	bpl.n	800ee24 <__sfp+0x28>
 800ee1c:	6833      	ldr	r3, [r6, #0]
 800ee1e:	b30b      	cbz	r3, 800ee64 <__sfp+0x68>
 800ee20:	6836      	ldr	r6, [r6, #0]
 800ee22:	e7f7      	b.n	800ee14 <__sfp+0x18>
 800ee24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ee28:	b9d5      	cbnz	r5, 800ee60 <__sfp+0x64>
 800ee2a:	4b16      	ldr	r3, [pc, #88]	; (800ee84 <__sfp+0x88>)
 800ee2c:	60e3      	str	r3, [r4, #12]
 800ee2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee32:	6665      	str	r5, [r4, #100]	; 0x64
 800ee34:	f000 f84c 	bl	800eed0 <__retarget_lock_init_recursive>
 800ee38:	f7ff ff96 	bl	800ed68 <__sfp_lock_release>
 800ee3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ee40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ee44:	6025      	str	r5, [r4, #0]
 800ee46:	61a5      	str	r5, [r4, #24]
 800ee48:	2208      	movs	r2, #8
 800ee4a:	4629      	mov	r1, r5
 800ee4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee50:	f7fe fb0e 	bl	800d470 <memset>
 800ee54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ee58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee60:	3468      	adds	r4, #104	; 0x68
 800ee62:	e7d9      	b.n	800ee18 <__sfp+0x1c>
 800ee64:	2104      	movs	r1, #4
 800ee66:	4638      	mov	r0, r7
 800ee68:	f7ff ff62 	bl	800ed30 <__sfmoreglue>
 800ee6c:	4604      	mov	r4, r0
 800ee6e:	6030      	str	r0, [r6, #0]
 800ee70:	2800      	cmp	r0, #0
 800ee72:	d1d5      	bne.n	800ee20 <__sfp+0x24>
 800ee74:	f7ff ff78 	bl	800ed68 <__sfp_lock_release>
 800ee78:	230c      	movs	r3, #12
 800ee7a:	603b      	str	r3, [r7, #0]
 800ee7c:	e7ee      	b.n	800ee5c <__sfp+0x60>
 800ee7e:	bf00      	nop
 800ee80:	08010a10 	.word	0x08010a10
 800ee84:	ffff0001 	.word	0xffff0001

0800ee88 <_fwalk_reent>:
 800ee88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee8c:	4606      	mov	r6, r0
 800ee8e:	4688      	mov	r8, r1
 800ee90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ee94:	2700      	movs	r7, #0
 800ee96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee9a:	f1b9 0901 	subs.w	r9, r9, #1
 800ee9e:	d505      	bpl.n	800eeac <_fwalk_reent+0x24>
 800eea0:	6824      	ldr	r4, [r4, #0]
 800eea2:	2c00      	cmp	r4, #0
 800eea4:	d1f7      	bne.n	800ee96 <_fwalk_reent+0xe>
 800eea6:	4638      	mov	r0, r7
 800eea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eeac:	89ab      	ldrh	r3, [r5, #12]
 800eeae:	2b01      	cmp	r3, #1
 800eeb0:	d907      	bls.n	800eec2 <_fwalk_reent+0x3a>
 800eeb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	d003      	beq.n	800eec2 <_fwalk_reent+0x3a>
 800eeba:	4629      	mov	r1, r5
 800eebc:	4630      	mov	r0, r6
 800eebe:	47c0      	blx	r8
 800eec0:	4307      	orrs	r7, r0
 800eec2:	3568      	adds	r5, #104	; 0x68
 800eec4:	e7e9      	b.n	800ee9a <_fwalk_reent+0x12>
	...

0800eec8 <_localeconv_r>:
 800eec8:	4800      	ldr	r0, [pc, #0]	; (800eecc <_localeconv_r+0x4>)
 800eeca:	4770      	bx	lr
 800eecc:	20000170 	.word	0x20000170

0800eed0 <__retarget_lock_init_recursive>:
 800eed0:	4770      	bx	lr

0800eed2 <__retarget_lock_acquire_recursive>:
 800eed2:	4770      	bx	lr

0800eed4 <__retarget_lock_release_recursive>:
 800eed4:	4770      	bx	lr
	...

0800eed8 <__malloc_lock>:
 800eed8:	4801      	ldr	r0, [pc, #4]	; (800eee0 <__malloc_lock+0x8>)
 800eeda:	f7ff bffa 	b.w	800eed2 <__retarget_lock_acquire_recursive>
 800eede:	bf00      	nop
 800eee0:	200081fc 	.word	0x200081fc

0800eee4 <__malloc_unlock>:
 800eee4:	4801      	ldr	r0, [pc, #4]	; (800eeec <__malloc_unlock+0x8>)
 800eee6:	f7ff bff5 	b.w	800eed4 <__retarget_lock_release_recursive>
 800eeea:	bf00      	nop
 800eeec:	200081fc 	.word	0x200081fc

0800eef0 <_Balloc>:
 800eef0:	b570      	push	{r4, r5, r6, lr}
 800eef2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eef4:	4604      	mov	r4, r0
 800eef6:	460d      	mov	r5, r1
 800eef8:	b976      	cbnz	r6, 800ef18 <_Balloc+0x28>
 800eefa:	2010      	movs	r0, #16
 800eefc:	f7fe fa9a 	bl	800d434 <malloc>
 800ef00:	4602      	mov	r2, r0
 800ef02:	6260      	str	r0, [r4, #36]	; 0x24
 800ef04:	b920      	cbnz	r0, 800ef10 <_Balloc+0x20>
 800ef06:	4b18      	ldr	r3, [pc, #96]	; (800ef68 <_Balloc+0x78>)
 800ef08:	4818      	ldr	r0, [pc, #96]	; (800ef6c <_Balloc+0x7c>)
 800ef0a:	2166      	movs	r1, #102	; 0x66
 800ef0c:	f000 ff56 	bl	800fdbc <__assert_func>
 800ef10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef14:	6006      	str	r6, [r0, #0]
 800ef16:	60c6      	str	r6, [r0, #12]
 800ef18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ef1a:	68f3      	ldr	r3, [r6, #12]
 800ef1c:	b183      	cbz	r3, 800ef40 <_Balloc+0x50>
 800ef1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef20:	68db      	ldr	r3, [r3, #12]
 800ef22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ef26:	b9b8      	cbnz	r0, 800ef58 <_Balloc+0x68>
 800ef28:	2101      	movs	r1, #1
 800ef2a:	fa01 f605 	lsl.w	r6, r1, r5
 800ef2e:	1d72      	adds	r2, r6, #5
 800ef30:	0092      	lsls	r2, r2, #2
 800ef32:	4620      	mov	r0, r4
 800ef34:	f000 fb60 	bl	800f5f8 <_calloc_r>
 800ef38:	b160      	cbz	r0, 800ef54 <_Balloc+0x64>
 800ef3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ef3e:	e00e      	b.n	800ef5e <_Balloc+0x6e>
 800ef40:	2221      	movs	r2, #33	; 0x21
 800ef42:	2104      	movs	r1, #4
 800ef44:	4620      	mov	r0, r4
 800ef46:	f000 fb57 	bl	800f5f8 <_calloc_r>
 800ef4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef4c:	60f0      	str	r0, [r6, #12]
 800ef4e:	68db      	ldr	r3, [r3, #12]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d1e4      	bne.n	800ef1e <_Balloc+0x2e>
 800ef54:	2000      	movs	r0, #0
 800ef56:	bd70      	pop	{r4, r5, r6, pc}
 800ef58:	6802      	ldr	r2, [r0, #0]
 800ef5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ef5e:	2300      	movs	r3, #0
 800ef60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ef64:	e7f7      	b.n	800ef56 <_Balloc+0x66>
 800ef66:	bf00      	nop
 800ef68:	08010a55 	.word	0x08010a55
 800ef6c:	08010b38 	.word	0x08010b38

0800ef70 <_Bfree>:
 800ef70:	b570      	push	{r4, r5, r6, lr}
 800ef72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ef74:	4605      	mov	r5, r0
 800ef76:	460c      	mov	r4, r1
 800ef78:	b976      	cbnz	r6, 800ef98 <_Bfree+0x28>
 800ef7a:	2010      	movs	r0, #16
 800ef7c:	f7fe fa5a 	bl	800d434 <malloc>
 800ef80:	4602      	mov	r2, r0
 800ef82:	6268      	str	r0, [r5, #36]	; 0x24
 800ef84:	b920      	cbnz	r0, 800ef90 <_Bfree+0x20>
 800ef86:	4b09      	ldr	r3, [pc, #36]	; (800efac <_Bfree+0x3c>)
 800ef88:	4809      	ldr	r0, [pc, #36]	; (800efb0 <_Bfree+0x40>)
 800ef8a:	218a      	movs	r1, #138	; 0x8a
 800ef8c:	f000 ff16 	bl	800fdbc <__assert_func>
 800ef90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef94:	6006      	str	r6, [r0, #0]
 800ef96:	60c6      	str	r6, [r0, #12]
 800ef98:	b13c      	cbz	r4, 800efaa <_Bfree+0x3a>
 800ef9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ef9c:	6862      	ldr	r2, [r4, #4]
 800ef9e:	68db      	ldr	r3, [r3, #12]
 800efa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800efa4:	6021      	str	r1, [r4, #0]
 800efa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800efaa:	bd70      	pop	{r4, r5, r6, pc}
 800efac:	08010a55 	.word	0x08010a55
 800efb0:	08010b38 	.word	0x08010b38

0800efb4 <__multadd>:
 800efb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb8:	690d      	ldr	r5, [r1, #16]
 800efba:	4607      	mov	r7, r0
 800efbc:	460c      	mov	r4, r1
 800efbe:	461e      	mov	r6, r3
 800efc0:	f101 0c14 	add.w	ip, r1, #20
 800efc4:	2000      	movs	r0, #0
 800efc6:	f8dc 3000 	ldr.w	r3, [ip]
 800efca:	b299      	uxth	r1, r3
 800efcc:	fb02 6101 	mla	r1, r2, r1, r6
 800efd0:	0c1e      	lsrs	r6, r3, #16
 800efd2:	0c0b      	lsrs	r3, r1, #16
 800efd4:	fb02 3306 	mla	r3, r2, r6, r3
 800efd8:	b289      	uxth	r1, r1
 800efda:	3001      	adds	r0, #1
 800efdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800efe0:	4285      	cmp	r5, r0
 800efe2:	f84c 1b04 	str.w	r1, [ip], #4
 800efe6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800efea:	dcec      	bgt.n	800efc6 <__multadd+0x12>
 800efec:	b30e      	cbz	r6, 800f032 <__multadd+0x7e>
 800efee:	68a3      	ldr	r3, [r4, #8]
 800eff0:	42ab      	cmp	r3, r5
 800eff2:	dc19      	bgt.n	800f028 <__multadd+0x74>
 800eff4:	6861      	ldr	r1, [r4, #4]
 800eff6:	4638      	mov	r0, r7
 800eff8:	3101      	adds	r1, #1
 800effa:	f7ff ff79 	bl	800eef0 <_Balloc>
 800effe:	4680      	mov	r8, r0
 800f000:	b928      	cbnz	r0, 800f00e <__multadd+0x5a>
 800f002:	4602      	mov	r2, r0
 800f004:	4b0c      	ldr	r3, [pc, #48]	; (800f038 <__multadd+0x84>)
 800f006:	480d      	ldr	r0, [pc, #52]	; (800f03c <__multadd+0x88>)
 800f008:	21b5      	movs	r1, #181	; 0xb5
 800f00a:	f000 fed7 	bl	800fdbc <__assert_func>
 800f00e:	6922      	ldr	r2, [r4, #16]
 800f010:	3202      	adds	r2, #2
 800f012:	f104 010c 	add.w	r1, r4, #12
 800f016:	0092      	lsls	r2, r2, #2
 800f018:	300c      	adds	r0, #12
 800f01a:	f7fe fa1b 	bl	800d454 <memcpy>
 800f01e:	4621      	mov	r1, r4
 800f020:	4638      	mov	r0, r7
 800f022:	f7ff ffa5 	bl	800ef70 <_Bfree>
 800f026:	4644      	mov	r4, r8
 800f028:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f02c:	3501      	adds	r5, #1
 800f02e:	615e      	str	r6, [r3, #20]
 800f030:	6125      	str	r5, [r4, #16]
 800f032:	4620      	mov	r0, r4
 800f034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f038:	08010ac7 	.word	0x08010ac7
 800f03c:	08010b38 	.word	0x08010b38

0800f040 <__hi0bits>:
 800f040:	0c03      	lsrs	r3, r0, #16
 800f042:	041b      	lsls	r3, r3, #16
 800f044:	b9d3      	cbnz	r3, 800f07c <__hi0bits+0x3c>
 800f046:	0400      	lsls	r0, r0, #16
 800f048:	2310      	movs	r3, #16
 800f04a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f04e:	bf04      	itt	eq
 800f050:	0200      	lsleq	r0, r0, #8
 800f052:	3308      	addeq	r3, #8
 800f054:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f058:	bf04      	itt	eq
 800f05a:	0100      	lsleq	r0, r0, #4
 800f05c:	3304      	addeq	r3, #4
 800f05e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f062:	bf04      	itt	eq
 800f064:	0080      	lsleq	r0, r0, #2
 800f066:	3302      	addeq	r3, #2
 800f068:	2800      	cmp	r0, #0
 800f06a:	db05      	blt.n	800f078 <__hi0bits+0x38>
 800f06c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f070:	f103 0301 	add.w	r3, r3, #1
 800f074:	bf08      	it	eq
 800f076:	2320      	moveq	r3, #32
 800f078:	4618      	mov	r0, r3
 800f07a:	4770      	bx	lr
 800f07c:	2300      	movs	r3, #0
 800f07e:	e7e4      	b.n	800f04a <__hi0bits+0xa>

0800f080 <__lo0bits>:
 800f080:	6803      	ldr	r3, [r0, #0]
 800f082:	f013 0207 	ands.w	r2, r3, #7
 800f086:	4601      	mov	r1, r0
 800f088:	d00b      	beq.n	800f0a2 <__lo0bits+0x22>
 800f08a:	07da      	lsls	r2, r3, #31
 800f08c:	d423      	bmi.n	800f0d6 <__lo0bits+0x56>
 800f08e:	0798      	lsls	r0, r3, #30
 800f090:	bf49      	itett	mi
 800f092:	085b      	lsrmi	r3, r3, #1
 800f094:	089b      	lsrpl	r3, r3, #2
 800f096:	2001      	movmi	r0, #1
 800f098:	600b      	strmi	r3, [r1, #0]
 800f09a:	bf5c      	itt	pl
 800f09c:	600b      	strpl	r3, [r1, #0]
 800f09e:	2002      	movpl	r0, #2
 800f0a0:	4770      	bx	lr
 800f0a2:	b298      	uxth	r0, r3
 800f0a4:	b9a8      	cbnz	r0, 800f0d2 <__lo0bits+0x52>
 800f0a6:	0c1b      	lsrs	r3, r3, #16
 800f0a8:	2010      	movs	r0, #16
 800f0aa:	b2da      	uxtb	r2, r3
 800f0ac:	b90a      	cbnz	r2, 800f0b2 <__lo0bits+0x32>
 800f0ae:	3008      	adds	r0, #8
 800f0b0:	0a1b      	lsrs	r3, r3, #8
 800f0b2:	071a      	lsls	r2, r3, #28
 800f0b4:	bf04      	itt	eq
 800f0b6:	091b      	lsreq	r3, r3, #4
 800f0b8:	3004      	addeq	r0, #4
 800f0ba:	079a      	lsls	r2, r3, #30
 800f0bc:	bf04      	itt	eq
 800f0be:	089b      	lsreq	r3, r3, #2
 800f0c0:	3002      	addeq	r0, #2
 800f0c2:	07da      	lsls	r2, r3, #31
 800f0c4:	d403      	bmi.n	800f0ce <__lo0bits+0x4e>
 800f0c6:	085b      	lsrs	r3, r3, #1
 800f0c8:	f100 0001 	add.w	r0, r0, #1
 800f0cc:	d005      	beq.n	800f0da <__lo0bits+0x5a>
 800f0ce:	600b      	str	r3, [r1, #0]
 800f0d0:	4770      	bx	lr
 800f0d2:	4610      	mov	r0, r2
 800f0d4:	e7e9      	b.n	800f0aa <__lo0bits+0x2a>
 800f0d6:	2000      	movs	r0, #0
 800f0d8:	4770      	bx	lr
 800f0da:	2020      	movs	r0, #32
 800f0dc:	4770      	bx	lr
	...

0800f0e0 <__i2b>:
 800f0e0:	b510      	push	{r4, lr}
 800f0e2:	460c      	mov	r4, r1
 800f0e4:	2101      	movs	r1, #1
 800f0e6:	f7ff ff03 	bl	800eef0 <_Balloc>
 800f0ea:	4602      	mov	r2, r0
 800f0ec:	b928      	cbnz	r0, 800f0fa <__i2b+0x1a>
 800f0ee:	4b05      	ldr	r3, [pc, #20]	; (800f104 <__i2b+0x24>)
 800f0f0:	4805      	ldr	r0, [pc, #20]	; (800f108 <__i2b+0x28>)
 800f0f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f0f6:	f000 fe61 	bl	800fdbc <__assert_func>
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	6144      	str	r4, [r0, #20]
 800f0fe:	6103      	str	r3, [r0, #16]
 800f100:	bd10      	pop	{r4, pc}
 800f102:	bf00      	nop
 800f104:	08010ac7 	.word	0x08010ac7
 800f108:	08010b38 	.word	0x08010b38

0800f10c <__multiply>:
 800f10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f110:	4691      	mov	r9, r2
 800f112:	690a      	ldr	r2, [r1, #16]
 800f114:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f118:	429a      	cmp	r2, r3
 800f11a:	bfb8      	it	lt
 800f11c:	460b      	movlt	r3, r1
 800f11e:	460c      	mov	r4, r1
 800f120:	bfbc      	itt	lt
 800f122:	464c      	movlt	r4, r9
 800f124:	4699      	movlt	r9, r3
 800f126:	6927      	ldr	r7, [r4, #16]
 800f128:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f12c:	68a3      	ldr	r3, [r4, #8]
 800f12e:	6861      	ldr	r1, [r4, #4]
 800f130:	eb07 060a 	add.w	r6, r7, sl
 800f134:	42b3      	cmp	r3, r6
 800f136:	b085      	sub	sp, #20
 800f138:	bfb8      	it	lt
 800f13a:	3101      	addlt	r1, #1
 800f13c:	f7ff fed8 	bl	800eef0 <_Balloc>
 800f140:	b930      	cbnz	r0, 800f150 <__multiply+0x44>
 800f142:	4602      	mov	r2, r0
 800f144:	4b44      	ldr	r3, [pc, #272]	; (800f258 <__multiply+0x14c>)
 800f146:	4845      	ldr	r0, [pc, #276]	; (800f25c <__multiply+0x150>)
 800f148:	f240 115d 	movw	r1, #349	; 0x15d
 800f14c:	f000 fe36 	bl	800fdbc <__assert_func>
 800f150:	f100 0514 	add.w	r5, r0, #20
 800f154:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f158:	462b      	mov	r3, r5
 800f15a:	2200      	movs	r2, #0
 800f15c:	4543      	cmp	r3, r8
 800f15e:	d321      	bcc.n	800f1a4 <__multiply+0x98>
 800f160:	f104 0314 	add.w	r3, r4, #20
 800f164:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f168:	f109 0314 	add.w	r3, r9, #20
 800f16c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f170:	9202      	str	r2, [sp, #8]
 800f172:	1b3a      	subs	r2, r7, r4
 800f174:	3a15      	subs	r2, #21
 800f176:	f022 0203 	bic.w	r2, r2, #3
 800f17a:	3204      	adds	r2, #4
 800f17c:	f104 0115 	add.w	r1, r4, #21
 800f180:	428f      	cmp	r7, r1
 800f182:	bf38      	it	cc
 800f184:	2204      	movcc	r2, #4
 800f186:	9201      	str	r2, [sp, #4]
 800f188:	9a02      	ldr	r2, [sp, #8]
 800f18a:	9303      	str	r3, [sp, #12]
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d80c      	bhi.n	800f1aa <__multiply+0x9e>
 800f190:	2e00      	cmp	r6, #0
 800f192:	dd03      	ble.n	800f19c <__multiply+0x90>
 800f194:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d05a      	beq.n	800f252 <__multiply+0x146>
 800f19c:	6106      	str	r6, [r0, #16]
 800f19e:	b005      	add	sp, #20
 800f1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1a4:	f843 2b04 	str.w	r2, [r3], #4
 800f1a8:	e7d8      	b.n	800f15c <__multiply+0x50>
 800f1aa:	f8b3 a000 	ldrh.w	sl, [r3]
 800f1ae:	f1ba 0f00 	cmp.w	sl, #0
 800f1b2:	d024      	beq.n	800f1fe <__multiply+0xf2>
 800f1b4:	f104 0e14 	add.w	lr, r4, #20
 800f1b8:	46a9      	mov	r9, r5
 800f1ba:	f04f 0c00 	mov.w	ip, #0
 800f1be:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f1c2:	f8d9 1000 	ldr.w	r1, [r9]
 800f1c6:	fa1f fb82 	uxth.w	fp, r2
 800f1ca:	b289      	uxth	r1, r1
 800f1cc:	fb0a 110b 	mla	r1, sl, fp, r1
 800f1d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f1d4:	f8d9 2000 	ldr.w	r2, [r9]
 800f1d8:	4461      	add	r1, ip
 800f1da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f1de:	fb0a c20b 	mla	r2, sl, fp, ip
 800f1e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f1e6:	b289      	uxth	r1, r1
 800f1e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f1ec:	4577      	cmp	r7, lr
 800f1ee:	f849 1b04 	str.w	r1, [r9], #4
 800f1f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f1f6:	d8e2      	bhi.n	800f1be <__multiply+0xb2>
 800f1f8:	9a01      	ldr	r2, [sp, #4]
 800f1fa:	f845 c002 	str.w	ip, [r5, r2]
 800f1fe:	9a03      	ldr	r2, [sp, #12]
 800f200:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f204:	3304      	adds	r3, #4
 800f206:	f1b9 0f00 	cmp.w	r9, #0
 800f20a:	d020      	beq.n	800f24e <__multiply+0x142>
 800f20c:	6829      	ldr	r1, [r5, #0]
 800f20e:	f104 0c14 	add.w	ip, r4, #20
 800f212:	46ae      	mov	lr, r5
 800f214:	f04f 0a00 	mov.w	sl, #0
 800f218:	f8bc b000 	ldrh.w	fp, [ip]
 800f21c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f220:	fb09 220b 	mla	r2, r9, fp, r2
 800f224:	4492      	add	sl, r2
 800f226:	b289      	uxth	r1, r1
 800f228:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f22c:	f84e 1b04 	str.w	r1, [lr], #4
 800f230:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f234:	f8be 1000 	ldrh.w	r1, [lr]
 800f238:	0c12      	lsrs	r2, r2, #16
 800f23a:	fb09 1102 	mla	r1, r9, r2, r1
 800f23e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f242:	4567      	cmp	r7, ip
 800f244:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f248:	d8e6      	bhi.n	800f218 <__multiply+0x10c>
 800f24a:	9a01      	ldr	r2, [sp, #4]
 800f24c:	50a9      	str	r1, [r5, r2]
 800f24e:	3504      	adds	r5, #4
 800f250:	e79a      	b.n	800f188 <__multiply+0x7c>
 800f252:	3e01      	subs	r6, #1
 800f254:	e79c      	b.n	800f190 <__multiply+0x84>
 800f256:	bf00      	nop
 800f258:	08010ac7 	.word	0x08010ac7
 800f25c:	08010b38 	.word	0x08010b38

0800f260 <__pow5mult>:
 800f260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f264:	4615      	mov	r5, r2
 800f266:	f012 0203 	ands.w	r2, r2, #3
 800f26a:	4606      	mov	r6, r0
 800f26c:	460f      	mov	r7, r1
 800f26e:	d007      	beq.n	800f280 <__pow5mult+0x20>
 800f270:	4c25      	ldr	r4, [pc, #148]	; (800f308 <__pow5mult+0xa8>)
 800f272:	3a01      	subs	r2, #1
 800f274:	2300      	movs	r3, #0
 800f276:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f27a:	f7ff fe9b 	bl	800efb4 <__multadd>
 800f27e:	4607      	mov	r7, r0
 800f280:	10ad      	asrs	r5, r5, #2
 800f282:	d03d      	beq.n	800f300 <__pow5mult+0xa0>
 800f284:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f286:	b97c      	cbnz	r4, 800f2a8 <__pow5mult+0x48>
 800f288:	2010      	movs	r0, #16
 800f28a:	f7fe f8d3 	bl	800d434 <malloc>
 800f28e:	4602      	mov	r2, r0
 800f290:	6270      	str	r0, [r6, #36]	; 0x24
 800f292:	b928      	cbnz	r0, 800f2a0 <__pow5mult+0x40>
 800f294:	4b1d      	ldr	r3, [pc, #116]	; (800f30c <__pow5mult+0xac>)
 800f296:	481e      	ldr	r0, [pc, #120]	; (800f310 <__pow5mult+0xb0>)
 800f298:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f29c:	f000 fd8e 	bl	800fdbc <__assert_func>
 800f2a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f2a4:	6004      	str	r4, [r0, #0]
 800f2a6:	60c4      	str	r4, [r0, #12]
 800f2a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f2ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f2b0:	b94c      	cbnz	r4, 800f2c6 <__pow5mult+0x66>
 800f2b2:	f240 2171 	movw	r1, #625	; 0x271
 800f2b6:	4630      	mov	r0, r6
 800f2b8:	f7ff ff12 	bl	800f0e0 <__i2b>
 800f2bc:	2300      	movs	r3, #0
 800f2be:	f8c8 0008 	str.w	r0, [r8, #8]
 800f2c2:	4604      	mov	r4, r0
 800f2c4:	6003      	str	r3, [r0, #0]
 800f2c6:	f04f 0900 	mov.w	r9, #0
 800f2ca:	07eb      	lsls	r3, r5, #31
 800f2cc:	d50a      	bpl.n	800f2e4 <__pow5mult+0x84>
 800f2ce:	4639      	mov	r1, r7
 800f2d0:	4622      	mov	r2, r4
 800f2d2:	4630      	mov	r0, r6
 800f2d4:	f7ff ff1a 	bl	800f10c <__multiply>
 800f2d8:	4639      	mov	r1, r7
 800f2da:	4680      	mov	r8, r0
 800f2dc:	4630      	mov	r0, r6
 800f2de:	f7ff fe47 	bl	800ef70 <_Bfree>
 800f2e2:	4647      	mov	r7, r8
 800f2e4:	106d      	asrs	r5, r5, #1
 800f2e6:	d00b      	beq.n	800f300 <__pow5mult+0xa0>
 800f2e8:	6820      	ldr	r0, [r4, #0]
 800f2ea:	b938      	cbnz	r0, 800f2fc <__pow5mult+0x9c>
 800f2ec:	4622      	mov	r2, r4
 800f2ee:	4621      	mov	r1, r4
 800f2f0:	4630      	mov	r0, r6
 800f2f2:	f7ff ff0b 	bl	800f10c <__multiply>
 800f2f6:	6020      	str	r0, [r4, #0]
 800f2f8:	f8c0 9000 	str.w	r9, [r0]
 800f2fc:	4604      	mov	r4, r0
 800f2fe:	e7e4      	b.n	800f2ca <__pow5mult+0x6a>
 800f300:	4638      	mov	r0, r7
 800f302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f306:	bf00      	nop
 800f308:	08010c88 	.word	0x08010c88
 800f30c:	08010a55 	.word	0x08010a55
 800f310:	08010b38 	.word	0x08010b38

0800f314 <__lshift>:
 800f314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f318:	460c      	mov	r4, r1
 800f31a:	6849      	ldr	r1, [r1, #4]
 800f31c:	6923      	ldr	r3, [r4, #16]
 800f31e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f322:	68a3      	ldr	r3, [r4, #8]
 800f324:	4607      	mov	r7, r0
 800f326:	4691      	mov	r9, r2
 800f328:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f32c:	f108 0601 	add.w	r6, r8, #1
 800f330:	42b3      	cmp	r3, r6
 800f332:	db0b      	blt.n	800f34c <__lshift+0x38>
 800f334:	4638      	mov	r0, r7
 800f336:	f7ff fddb 	bl	800eef0 <_Balloc>
 800f33a:	4605      	mov	r5, r0
 800f33c:	b948      	cbnz	r0, 800f352 <__lshift+0x3e>
 800f33e:	4602      	mov	r2, r0
 800f340:	4b2a      	ldr	r3, [pc, #168]	; (800f3ec <__lshift+0xd8>)
 800f342:	482b      	ldr	r0, [pc, #172]	; (800f3f0 <__lshift+0xdc>)
 800f344:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f348:	f000 fd38 	bl	800fdbc <__assert_func>
 800f34c:	3101      	adds	r1, #1
 800f34e:	005b      	lsls	r3, r3, #1
 800f350:	e7ee      	b.n	800f330 <__lshift+0x1c>
 800f352:	2300      	movs	r3, #0
 800f354:	f100 0114 	add.w	r1, r0, #20
 800f358:	f100 0210 	add.w	r2, r0, #16
 800f35c:	4618      	mov	r0, r3
 800f35e:	4553      	cmp	r3, sl
 800f360:	db37      	blt.n	800f3d2 <__lshift+0xbe>
 800f362:	6920      	ldr	r0, [r4, #16]
 800f364:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f368:	f104 0314 	add.w	r3, r4, #20
 800f36c:	f019 091f 	ands.w	r9, r9, #31
 800f370:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f374:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f378:	d02f      	beq.n	800f3da <__lshift+0xc6>
 800f37a:	f1c9 0e20 	rsb	lr, r9, #32
 800f37e:	468a      	mov	sl, r1
 800f380:	f04f 0c00 	mov.w	ip, #0
 800f384:	681a      	ldr	r2, [r3, #0]
 800f386:	fa02 f209 	lsl.w	r2, r2, r9
 800f38a:	ea42 020c 	orr.w	r2, r2, ip
 800f38e:	f84a 2b04 	str.w	r2, [sl], #4
 800f392:	f853 2b04 	ldr.w	r2, [r3], #4
 800f396:	4298      	cmp	r0, r3
 800f398:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f39c:	d8f2      	bhi.n	800f384 <__lshift+0x70>
 800f39e:	1b03      	subs	r3, r0, r4
 800f3a0:	3b15      	subs	r3, #21
 800f3a2:	f023 0303 	bic.w	r3, r3, #3
 800f3a6:	3304      	adds	r3, #4
 800f3a8:	f104 0215 	add.w	r2, r4, #21
 800f3ac:	4290      	cmp	r0, r2
 800f3ae:	bf38      	it	cc
 800f3b0:	2304      	movcc	r3, #4
 800f3b2:	f841 c003 	str.w	ip, [r1, r3]
 800f3b6:	f1bc 0f00 	cmp.w	ip, #0
 800f3ba:	d001      	beq.n	800f3c0 <__lshift+0xac>
 800f3bc:	f108 0602 	add.w	r6, r8, #2
 800f3c0:	3e01      	subs	r6, #1
 800f3c2:	4638      	mov	r0, r7
 800f3c4:	612e      	str	r6, [r5, #16]
 800f3c6:	4621      	mov	r1, r4
 800f3c8:	f7ff fdd2 	bl	800ef70 <_Bfree>
 800f3cc:	4628      	mov	r0, r5
 800f3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800f3d6:	3301      	adds	r3, #1
 800f3d8:	e7c1      	b.n	800f35e <__lshift+0x4a>
 800f3da:	3904      	subs	r1, #4
 800f3dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f3e4:	4298      	cmp	r0, r3
 800f3e6:	d8f9      	bhi.n	800f3dc <__lshift+0xc8>
 800f3e8:	e7ea      	b.n	800f3c0 <__lshift+0xac>
 800f3ea:	bf00      	nop
 800f3ec:	08010ac7 	.word	0x08010ac7
 800f3f0:	08010b38 	.word	0x08010b38

0800f3f4 <__mcmp>:
 800f3f4:	b530      	push	{r4, r5, lr}
 800f3f6:	6902      	ldr	r2, [r0, #16]
 800f3f8:	690c      	ldr	r4, [r1, #16]
 800f3fa:	1b12      	subs	r2, r2, r4
 800f3fc:	d10e      	bne.n	800f41c <__mcmp+0x28>
 800f3fe:	f100 0314 	add.w	r3, r0, #20
 800f402:	3114      	adds	r1, #20
 800f404:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f408:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f40c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f410:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f414:	42a5      	cmp	r5, r4
 800f416:	d003      	beq.n	800f420 <__mcmp+0x2c>
 800f418:	d305      	bcc.n	800f426 <__mcmp+0x32>
 800f41a:	2201      	movs	r2, #1
 800f41c:	4610      	mov	r0, r2
 800f41e:	bd30      	pop	{r4, r5, pc}
 800f420:	4283      	cmp	r3, r0
 800f422:	d3f3      	bcc.n	800f40c <__mcmp+0x18>
 800f424:	e7fa      	b.n	800f41c <__mcmp+0x28>
 800f426:	f04f 32ff 	mov.w	r2, #4294967295
 800f42a:	e7f7      	b.n	800f41c <__mcmp+0x28>

0800f42c <__mdiff>:
 800f42c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f430:	460c      	mov	r4, r1
 800f432:	4606      	mov	r6, r0
 800f434:	4611      	mov	r1, r2
 800f436:	4620      	mov	r0, r4
 800f438:	4690      	mov	r8, r2
 800f43a:	f7ff ffdb 	bl	800f3f4 <__mcmp>
 800f43e:	1e05      	subs	r5, r0, #0
 800f440:	d110      	bne.n	800f464 <__mdiff+0x38>
 800f442:	4629      	mov	r1, r5
 800f444:	4630      	mov	r0, r6
 800f446:	f7ff fd53 	bl	800eef0 <_Balloc>
 800f44a:	b930      	cbnz	r0, 800f45a <__mdiff+0x2e>
 800f44c:	4b3a      	ldr	r3, [pc, #232]	; (800f538 <__mdiff+0x10c>)
 800f44e:	4602      	mov	r2, r0
 800f450:	f240 2132 	movw	r1, #562	; 0x232
 800f454:	4839      	ldr	r0, [pc, #228]	; (800f53c <__mdiff+0x110>)
 800f456:	f000 fcb1 	bl	800fdbc <__assert_func>
 800f45a:	2301      	movs	r3, #1
 800f45c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f464:	bfa4      	itt	ge
 800f466:	4643      	movge	r3, r8
 800f468:	46a0      	movge	r8, r4
 800f46a:	4630      	mov	r0, r6
 800f46c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f470:	bfa6      	itte	ge
 800f472:	461c      	movge	r4, r3
 800f474:	2500      	movge	r5, #0
 800f476:	2501      	movlt	r5, #1
 800f478:	f7ff fd3a 	bl	800eef0 <_Balloc>
 800f47c:	b920      	cbnz	r0, 800f488 <__mdiff+0x5c>
 800f47e:	4b2e      	ldr	r3, [pc, #184]	; (800f538 <__mdiff+0x10c>)
 800f480:	4602      	mov	r2, r0
 800f482:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f486:	e7e5      	b.n	800f454 <__mdiff+0x28>
 800f488:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f48c:	6926      	ldr	r6, [r4, #16]
 800f48e:	60c5      	str	r5, [r0, #12]
 800f490:	f104 0914 	add.w	r9, r4, #20
 800f494:	f108 0514 	add.w	r5, r8, #20
 800f498:	f100 0e14 	add.w	lr, r0, #20
 800f49c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f4a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f4a4:	f108 0210 	add.w	r2, r8, #16
 800f4a8:	46f2      	mov	sl, lr
 800f4aa:	2100      	movs	r1, #0
 800f4ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800f4b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f4b4:	fa1f f883 	uxth.w	r8, r3
 800f4b8:	fa11 f18b 	uxtah	r1, r1, fp
 800f4bc:	0c1b      	lsrs	r3, r3, #16
 800f4be:	eba1 0808 	sub.w	r8, r1, r8
 800f4c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f4c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f4ca:	fa1f f888 	uxth.w	r8, r8
 800f4ce:	1419      	asrs	r1, r3, #16
 800f4d0:	454e      	cmp	r6, r9
 800f4d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f4d6:	f84a 3b04 	str.w	r3, [sl], #4
 800f4da:	d8e7      	bhi.n	800f4ac <__mdiff+0x80>
 800f4dc:	1b33      	subs	r3, r6, r4
 800f4de:	3b15      	subs	r3, #21
 800f4e0:	f023 0303 	bic.w	r3, r3, #3
 800f4e4:	3304      	adds	r3, #4
 800f4e6:	3415      	adds	r4, #21
 800f4e8:	42a6      	cmp	r6, r4
 800f4ea:	bf38      	it	cc
 800f4ec:	2304      	movcc	r3, #4
 800f4ee:	441d      	add	r5, r3
 800f4f0:	4473      	add	r3, lr
 800f4f2:	469e      	mov	lr, r3
 800f4f4:	462e      	mov	r6, r5
 800f4f6:	4566      	cmp	r6, ip
 800f4f8:	d30e      	bcc.n	800f518 <__mdiff+0xec>
 800f4fa:	f10c 0203 	add.w	r2, ip, #3
 800f4fe:	1b52      	subs	r2, r2, r5
 800f500:	f022 0203 	bic.w	r2, r2, #3
 800f504:	3d03      	subs	r5, #3
 800f506:	45ac      	cmp	ip, r5
 800f508:	bf38      	it	cc
 800f50a:	2200      	movcc	r2, #0
 800f50c:	441a      	add	r2, r3
 800f50e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f512:	b17b      	cbz	r3, 800f534 <__mdiff+0x108>
 800f514:	6107      	str	r7, [r0, #16]
 800f516:	e7a3      	b.n	800f460 <__mdiff+0x34>
 800f518:	f856 8b04 	ldr.w	r8, [r6], #4
 800f51c:	fa11 f288 	uxtah	r2, r1, r8
 800f520:	1414      	asrs	r4, r2, #16
 800f522:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f526:	b292      	uxth	r2, r2
 800f528:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f52c:	f84e 2b04 	str.w	r2, [lr], #4
 800f530:	1421      	asrs	r1, r4, #16
 800f532:	e7e0      	b.n	800f4f6 <__mdiff+0xca>
 800f534:	3f01      	subs	r7, #1
 800f536:	e7ea      	b.n	800f50e <__mdiff+0xe2>
 800f538:	08010ac7 	.word	0x08010ac7
 800f53c:	08010b38 	.word	0x08010b38

0800f540 <__d2b>:
 800f540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f544:	4689      	mov	r9, r1
 800f546:	2101      	movs	r1, #1
 800f548:	ec57 6b10 	vmov	r6, r7, d0
 800f54c:	4690      	mov	r8, r2
 800f54e:	f7ff fccf 	bl	800eef0 <_Balloc>
 800f552:	4604      	mov	r4, r0
 800f554:	b930      	cbnz	r0, 800f564 <__d2b+0x24>
 800f556:	4602      	mov	r2, r0
 800f558:	4b25      	ldr	r3, [pc, #148]	; (800f5f0 <__d2b+0xb0>)
 800f55a:	4826      	ldr	r0, [pc, #152]	; (800f5f4 <__d2b+0xb4>)
 800f55c:	f240 310a 	movw	r1, #778	; 0x30a
 800f560:	f000 fc2c 	bl	800fdbc <__assert_func>
 800f564:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f568:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f56c:	bb35      	cbnz	r5, 800f5bc <__d2b+0x7c>
 800f56e:	2e00      	cmp	r6, #0
 800f570:	9301      	str	r3, [sp, #4]
 800f572:	d028      	beq.n	800f5c6 <__d2b+0x86>
 800f574:	4668      	mov	r0, sp
 800f576:	9600      	str	r6, [sp, #0]
 800f578:	f7ff fd82 	bl	800f080 <__lo0bits>
 800f57c:	9900      	ldr	r1, [sp, #0]
 800f57e:	b300      	cbz	r0, 800f5c2 <__d2b+0x82>
 800f580:	9a01      	ldr	r2, [sp, #4]
 800f582:	f1c0 0320 	rsb	r3, r0, #32
 800f586:	fa02 f303 	lsl.w	r3, r2, r3
 800f58a:	430b      	orrs	r3, r1
 800f58c:	40c2      	lsrs	r2, r0
 800f58e:	6163      	str	r3, [r4, #20]
 800f590:	9201      	str	r2, [sp, #4]
 800f592:	9b01      	ldr	r3, [sp, #4]
 800f594:	61a3      	str	r3, [r4, #24]
 800f596:	2b00      	cmp	r3, #0
 800f598:	bf14      	ite	ne
 800f59a:	2202      	movne	r2, #2
 800f59c:	2201      	moveq	r2, #1
 800f59e:	6122      	str	r2, [r4, #16]
 800f5a0:	b1d5      	cbz	r5, 800f5d8 <__d2b+0x98>
 800f5a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f5a6:	4405      	add	r5, r0
 800f5a8:	f8c9 5000 	str.w	r5, [r9]
 800f5ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f5b0:	f8c8 0000 	str.w	r0, [r8]
 800f5b4:	4620      	mov	r0, r4
 800f5b6:	b003      	add	sp, #12
 800f5b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f5c0:	e7d5      	b.n	800f56e <__d2b+0x2e>
 800f5c2:	6161      	str	r1, [r4, #20]
 800f5c4:	e7e5      	b.n	800f592 <__d2b+0x52>
 800f5c6:	a801      	add	r0, sp, #4
 800f5c8:	f7ff fd5a 	bl	800f080 <__lo0bits>
 800f5cc:	9b01      	ldr	r3, [sp, #4]
 800f5ce:	6163      	str	r3, [r4, #20]
 800f5d0:	2201      	movs	r2, #1
 800f5d2:	6122      	str	r2, [r4, #16]
 800f5d4:	3020      	adds	r0, #32
 800f5d6:	e7e3      	b.n	800f5a0 <__d2b+0x60>
 800f5d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f5dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f5e0:	f8c9 0000 	str.w	r0, [r9]
 800f5e4:	6918      	ldr	r0, [r3, #16]
 800f5e6:	f7ff fd2b 	bl	800f040 <__hi0bits>
 800f5ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f5ee:	e7df      	b.n	800f5b0 <__d2b+0x70>
 800f5f0:	08010ac7 	.word	0x08010ac7
 800f5f4:	08010b38 	.word	0x08010b38

0800f5f8 <_calloc_r>:
 800f5f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5fa:	fba1 2402 	umull	r2, r4, r1, r2
 800f5fe:	b94c      	cbnz	r4, 800f614 <_calloc_r+0x1c>
 800f600:	4611      	mov	r1, r2
 800f602:	9201      	str	r2, [sp, #4]
 800f604:	f7fd ffa8 	bl	800d558 <_malloc_r>
 800f608:	9a01      	ldr	r2, [sp, #4]
 800f60a:	4605      	mov	r5, r0
 800f60c:	b930      	cbnz	r0, 800f61c <_calloc_r+0x24>
 800f60e:	4628      	mov	r0, r5
 800f610:	b003      	add	sp, #12
 800f612:	bd30      	pop	{r4, r5, pc}
 800f614:	220c      	movs	r2, #12
 800f616:	6002      	str	r2, [r0, #0]
 800f618:	2500      	movs	r5, #0
 800f61a:	e7f8      	b.n	800f60e <_calloc_r+0x16>
 800f61c:	4621      	mov	r1, r4
 800f61e:	f7fd ff27 	bl	800d470 <memset>
 800f622:	e7f4      	b.n	800f60e <_calloc_r+0x16>

0800f624 <__ssputs_r>:
 800f624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f628:	688e      	ldr	r6, [r1, #8]
 800f62a:	429e      	cmp	r6, r3
 800f62c:	4682      	mov	sl, r0
 800f62e:	460c      	mov	r4, r1
 800f630:	4690      	mov	r8, r2
 800f632:	461f      	mov	r7, r3
 800f634:	d838      	bhi.n	800f6a8 <__ssputs_r+0x84>
 800f636:	898a      	ldrh	r2, [r1, #12]
 800f638:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f63c:	d032      	beq.n	800f6a4 <__ssputs_r+0x80>
 800f63e:	6825      	ldr	r5, [r4, #0]
 800f640:	6909      	ldr	r1, [r1, #16]
 800f642:	eba5 0901 	sub.w	r9, r5, r1
 800f646:	6965      	ldr	r5, [r4, #20]
 800f648:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f64c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f650:	3301      	adds	r3, #1
 800f652:	444b      	add	r3, r9
 800f654:	106d      	asrs	r5, r5, #1
 800f656:	429d      	cmp	r5, r3
 800f658:	bf38      	it	cc
 800f65a:	461d      	movcc	r5, r3
 800f65c:	0553      	lsls	r3, r2, #21
 800f65e:	d531      	bpl.n	800f6c4 <__ssputs_r+0xa0>
 800f660:	4629      	mov	r1, r5
 800f662:	f7fd ff79 	bl	800d558 <_malloc_r>
 800f666:	4606      	mov	r6, r0
 800f668:	b950      	cbnz	r0, 800f680 <__ssputs_r+0x5c>
 800f66a:	230c      	movs	r3, #12
 800f66c:	f8ca 3000 	str.w	r3, [sl]
 800f670:	89a3      	ldrh	r3, [r4, #12]
 800f672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f676:	81a3      	strh	r3, [r4, #12]
 800f678:	f04f 30ff 	mov.w	r0, #4294967295
 800f67c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f680:	6921      	ldr	r1, [r4, #16]
 800f682:	464a      	mov	r2, r9
 800f684:	f7fd fee6 	bl	800d454 <memcpy>
 800f688:	89a3      	ldrh	r3, [r4, #12]
 800f68a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f68e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f692:	81a3      	strh	r3, [r4, #12]
 800f694:	6126      	str	r6, [r4, #16]
 800f696:	6165      	str	r5, [r4, #20]
 800f698:	444e      	add	r6, r9
 800f69a:	eba5 0509 	sub.w	r5, r5, r9
 800f69e:	6026      	str	r6, [r4, #0]
 800f6a0:	60a5      	str	r5, [r4, #8]
 800f6a2:	463e      	mov	r6, r7
 800f6a4:	42be      	cmp	r6, r7
 800f6a6:	d900      	bls.n	800f6aa <__ssputs_r+0x86>
 800f6a8:	463e      	mov	r6, r7
 800f6aa:	6820      	ldr	r0, [r4, #0]
 800f6ac:	4632      	mov	r2, r6
 800f6ae:	4641      	mov	r1, r8
 800f6b0:	f000 fd10 	bl	80100d4 <memmove>
 800f6b4:	68a3      	ldr	r3, [r4, #8]
 800f6b6:	1b9b      	subs	r3, r3, r6
 800f6b8:	60a3      	str	r3, [r4, #8]
 800f6ba:	6823      	ldr	r3, [r4, #0]
 800f6bc:	4433      	add	r3, r6
 800f6be:	6023      	str	r3, [r4, #0]
 800f6c0:	2000      	movs	r0, #0
 800f6c2:	e7db      	b.n	800f67c <__ssputs_r+0x58>
 800f6c4:	462a      	mov	r2, r5
 800f6c6:	f000 fd1f 	bl	8010108 <_realloc_r>
 800f6ca:	4606      	mov	r6, r0
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	d1e1      	bne.n	800f694 <__ssputs_r+0x70>
 800f6d0:	6921      	ldr	r1, [r4, #16]
 800f6d2:	4650      	mov	r0, sl
 800f6d4:	f7fd fed4 	bl	800d480 <_free_r>
 800f6d8:	e7c7      	b.n	800f66a <__ssputs_r+0x46>
	...

0800f6dc <_svfiprintf_r>:
 800f6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e0:	4698      	mov	r8, r3
 800f6e2:	898b      	ldrh	r3, [r1, #12]
 800f6e4:	061b      	lsls	r3, r3, #24
 800f6e6:	b09d      	sub	sp, #116	; 0x74
 800f6e8:	4607      	mov	r7, r0
 800f6ea:	460d      	mov	r5, r1
 800f6ec:	4614      	mov	r4, r2
 800f6ee:	d50e      	bpl.n	800f70e <_svfiprintf_r+0x32>
 800f6f0:	690b      	ldr	r3, [r1, #16]
 800f6f2:	b963      	cbnz	r3, 800f70e <_svfiprintf_r+0x32>
 800f6f4:	2140      	movs	r1, #64	; 0x40
 800f6f6:	f7fd ff2f 	bl	800d558 <_malloc_r>
 800f6fa:	6028      	str	r0, [r5, #0]
 800f6fc:	6128      	str	r0, [r5, #16]
 800f6fe:	b920      	cbnz	r0, 800f70a <_svfiprintf_r+0x2e>
 800f700:	230c      	movs	r3, #12
 800f702:	603b      	str	r3, [r7, #0]
 800f704:	f04f 30ff 	mov.w	r0, #4294967295
 800f708:	e0d1      	b.n	800f8ae <_svfiprintf_r+0x1d2>
 800f70a:	2340      	movs	r3, #64	; 0x40
 800f70c:	616b      	str	r3, [r5, #20]
 800f70e:	2300      	movs	r3, #0
 800f710:	9309      	str	r3, [sp, #36]	; 0x24
 800f712:	2320      	movs	r3, #32
 800f714:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f718:	f8cd 800c 	str.w	r8, [sp, #12]
 800f71c:	2330      	movs	r3, #48	; 0x30
 800f71e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f8c8 <_svfiprintf_r+0x1ec>
 800f722:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f726:	f04f 0901 	mov.w	r9, #1
 800f72a:	4623      	mov	r3, r4
 800f72c:	469a      	mov	sl, r3
 800f72e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f732:	b10a      	cbz	r2, 800f738 <_svfiprintf_r+0x5c>
 800f734:	2a25      	cmp	r2, #37	; 0x25
 800f736:	d1f9      	bne.n	800f72c <_svfiprintf_r+0x50>
 800f738:	ebba 0b04 	subs.w	fp, sl, r4
 800f73c:	d00b      	beq.n	800f756 <_svfiprintf_r+0x7a>
 800f73e:	465b      	mov	r3, fp
 800f740:	4622      	mov	r2, r4
 800f742:	4629      	mov	r1, r5
 800f744:	4638      	mov	r0, r7
 800f746:	f7ff ff6d 	bl	800f624 <__ssputs_r>
 800f74a:	3001      	adds	r0, #1
 800f74c:	f000 80aa 	beq.w	800f8a4 <_svfiprintf_r+0x1c8>
 800f750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f752:	445a      	add	r2, fp
 800f754:	9209      	str	r2, [sp, #36]	; 0x24
 800f756:	f89a 3000 	ldrb.w	r3, [sl]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	f000 80a2 	beq.w	800f8a4 <_svfiprintf_r+0x1c8>
 800f760:	2300      	movs	r3, #0
 800f762:	f04f 32ff 	mov.w	r2, #4294967295
 800f766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f76a:	f10a 0a01 	add.w	sl, sl, #1
 800f76e:	9304      	str	r3, [sp, #16]
 800f770:	9307      	str	r3, [sp, #28]
 800f772:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f776:	931a      	str	r3, [sp, #104]	; 0x68
 800f778:	4654      	mov	r4, sl
 800f77a:	2205      	movs	r2, #5
 800f77c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f780:	4851      	ldr	r0, [pc, #324]	; (800f8c8 <_svfiprintf_r+0x1ec>)
 800f782:	f7f0 fd3d 	bl	8000200 <memchr>
 800f786:	9a04      	ldr	r2, [sp, #16]
 800f788:	b9d8      	cbnz	r0, 800f7c2 <_svfiprintf_r+0xe6>
 800f78a:	06d0      	lsls	r0, r2, #27
 800f78c:	bf44      	itt	mi
 800f78e:	2320      	movmi	r3, #32
 800f790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f794:	0711      	lsls	r1, r2, #28
 800f796:	bf44      	itt	mi
 800f798:	232b      	movmi	r3, #43	; 0x2b
 800f79a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f79e:	f89a 3000 	ldrb.w	r3, [sl]
 800f7a2:	2b2a      	cmp	r3, #42	; 0x2a
 800f7a4:	d015      	beq.n	800f7d2 <_svfiprintf_r+0xf6>
 800f7a6:	9a07      	ldr	r2, [sp, #28]
 800f7a8:	4654      	mov	r4, sl
 800f7aa:	2000      	movs	r0, #0
 800f7ac:	f04f 0c0a 	mov.w	ip, #10
 800f7b0:	4621      	mov	r1, r4
 800f7b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7b6:	3b30      	subs	r3, #48	; 0x30
 800f7b8:	2b09      	cmp	r3, #9
 800f7ba:	d94e      	bls.n	800f85a <_svfiprintf_r+0x17e>
 800f7bc:	b1b0      	cbz	r0, 800f7ec <_svfiprintf_r+0x110>
 800f7be:	9207      	str	r2, [sp, #28]
 800f7c0:	e014      	b.n	800f7ec <_svfiprintf_r+0x110>
 800f7c2:	eba0 0308 	sub.w	r3, r0, r8
 800f7c6:	fa09 f303 	lsl.w	r3, r9, r3
 800f7ca:	4313      	orrs	r3, r2
 800f7cc:	9304      	str	r3, [sp, #16]
 800f7ce:	46a2      	mov	sl, r4
 800f7d0:	e7d2      	b.n	800f778 <_svfiprintf_r+0x9c>
 800f7d2:	9b03      	ldr	r3, [sp, #12]
 800f7d4:	1d19      	adds	r1, r3, #4
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	9103      	str	r1, [sp, #12]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	bfbb      	ittet	lt
 800f7de:	425b      	neglt	r3, r3
 800f7e0:	f042 0202 	orrlt.w	r2, r2, #2
 800f7e4:	9307      	strge	r3, [sp, #28]
 800f7e6:	9307      	strlt	r3, [sp, #28]
 800f7e8:	bfb8      	it	lt
 800f7ea:	9204      	strlt	r2, [sp, #16]
 800f7ec:	7823      	ldrb	r3, [r4, #0]
 800f7ee:	2b2e      	cmp	r3, #46	; 0x2e
 800f7f0:	d10c      	bne.n	800f80c <_svfiprintf_r+0x130>
 800f7f2:	7863      	ldrb	r3, [r4, #1]
 800f7f4:	2b2a      	cmp	r3, #42	; 0x2a
 800f7f6:	d135      	bne.n	800f864 <_svfiprintf_r+0x188>
 800f7f8:	9b03      	ldr	r3, [sp, #12]
 800f7fa:	1d1a      	adds	r2, r3, #4
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	9203      	str	r2, [sp, #12]
 800f800:	2b00      	cmp	r3, #0
 800f802:	bfb8      	it	lt
 800f804:	f04f 33ff 	movlt.w	r3, #4294967295
 800f808:	3402      	adds	r4, #2
 800f80a:	9305      	str	r3, [sp, #20]
 800f80c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f8d8 <_svfiprintf_r+0x1fc>
 800f810:	7821      	ldrb	r1, [r4, #0]
 800f812:	2203      	movs	r2, #3
 800f814:	4650      	mov	r0, sl
 800f816:	f7f0 fcf3 	bl	8000200 <memchr>
 800f81a:	b140      	cbz	r0, 800f82e <_svfiprintf_r+0x152>
 800f81c:	2340      	movs	r3, #64	; 0x40
 800f81e:	eba0 000a 	sub.w	r0, r0, sl
 800f822:	fa03 f000 	lsl.w	r0, r3, r0
 800f826:	9b04      	ldr	r3, [sp, #16]
 800f828:	4303      	orrs	r3, r0
 800f82a:	3401      	adds	r4, #1
 800f82c:	9304      	str	r3, [sp, #16]
 800f82e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f832:	4826      	ldr	r0, [pc, #152]	; (800f8cc <_svfiprintf_r+0x1f0>)
 800f834:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f838:	2206      	movs	r2, #6
 800f83a:	f7f0 fce1 	bl	8000200 <memchr>
 800f83e:	2800      	cmp	r0, #0
 800f840:	d038      	beq.n	800f8b4 <_svfiprintf_r+0x1d8>
 800f842:	4b23      	ldr	r3, [pc, #140]	; (800f8d0 <_svfiprintf_r+0x1f4>)
 800f844:	bb1b      	cbnz	r3, 800f88e <_svfiprintf_r+0x1b2>
 800f846:	9b03      	ldr	r3, [sp, #12]
 800f848:	3307      	adds	r3, #7
 800f84a:	f023 0307 	bic.w	r3, r3, #7
 800f84e:	3308      	adds	r3, #8
 800f850:	9303      	str	r3, [sp, #12]
 800f852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f854:	4433      	add	r3, r6
 800f856:	9309      	str	r3, [sp, #36]	; 0x24
 800f858:	e767      	b.n	800f72a <_svfiprintf_r+0x4e>
 800f85a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f85e:	460c      	mov	r4, r1
 800f860:	2001      	movs	r0, #1
 800f862:	e7a5      	b.n	800f7b0 <_svfiprintf_r+0xd4>
 800f864:	2300      	movs	r3, #0
 800f866:	3401      	adds	r4, #1
 800f868:	9305      	str	r3, [sp, #20]
 800f86a:	4619      	mov	r1, r3
 800f86c:	f04f 0c0a 	mov.w	ip, #10
 800f870:	4620      	mov	r0, r4
 800f872:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f876:	3a30      	subs	r2, #48	; 0x30
 800f878:	2a09      	cmp	r2, #9
 800f87a:	d903      	bls.n	800f884 <_svfiprintf_r+0x1a8>
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d0c5      	beq.n	800f80c <_svfiprintf_r+0x130>
 800f880:	9105      	str	r1, [sp, #20]
 800f882:	e7c3      	b.n	800f80c <_svfiprintf_r+0x130>
 800f884:	fb0c 2101 	mla	r1, ip, r1, r2
 800f888:	4604      	mov	r4, r0
 800f88a:	2301      	movs	r3, #1
 800f88c:	e7f0      	b.n	800f870 <_svfiprintf_r+0x194>
 800f88e:	ab03      	add	r3, sp, #12
 800f890:	9300      	str	r3, [sp, #0]
 800f892:	462a      	mov	r2, r5
 800f894:	4b0f      	ldr	r3, [pc, #60]	; (800f8d4 <_svfiprintf_r+0x1f8>)
 800f896:	a904      	add	r1, sp, #16
 800f898:	4638      	mov	r0, r7
 800f89a:	f7fd ff71 	bl	800d780 <_printf_float>
 800f89e:	1c42      	adds	r2, r0, #1
 800f8a0:	4606      	mov	r6, r0
 800f8a2:	d1d6      	bne.n	800f852 <_svfiprintf_r+0x176>
 800f8a4:	89ab      	ldrh	r3, [r5, #12]
 800f8a6:	065b      	lsls	r3, r3, #25
 800f8a8:	f53f af2c 	bmi.w	800f704 <_svfiprintf_r+0x28>
 800f8ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f8ae:	b01d      	add	sp, #116	; 0x74
 800f8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b4:	ab03      	add	r3, sp, #12
 800f8b6:	9300      	str	r3, [sp, #0]
 800f8b8:	462a      	mov	r2, r5
 800f8ba:	4b06      	ldr	r3, [pc, #24]	; (800f8d4 <_svfiprintf_r+0x1f8>)
 800f8bc:	a904      	add	r1, sp, #16
 800f8be:	4638      	mov	r0, r7
 800f8c0:	f7fe fa02 	bl	800dcc8 <_printf_i>
 800f8c4:	e7eb      	b.n	800f89e <_svfiprintf_r+0x1c2>
 800f8c6:	bf00      	nop
 800f8c8:	08010c94 	.word	0x08010c94
 800f8cc:	08010c9e 	.word	0x08010c9e
 800f8d0:	0800d781 	.word	0x0800d781
 800f8d4:	0800f625 	.word	0x0800f625
 800f8d8:	08010c9a 	.word	0x08010c9a

0800f8dc <__sfputc_r>:
 800f8dc:	6893      	ldr	r3, [r2, #8]
 800f8de:	3b01      	subs	r3, #1
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	b410      	push	{r4}
 800f8e4:	6093      	str	r3, [r2, #8]
 800f8e6:	da08      	bge.n	800f8fa <__sfputc_r+0x1e>
 800f8e8:	6994      	ldr	r4, [r2, #24]
 800f8ea:	42a3      	cmp	r3, r4
 800f8ec:	db01      	blt.n	800f8f2 <__sfputc_r+0x16>
 800f8ee:	290a      	cmp	r1, #10
 800f8f0:	d103      	bne.n	800f8fa <__sfputc_r+0x1e>
 800f8f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8f6:	f000 b98f 	b.w	800fc18 <__swbuf_r>
 800f8fa:	6813      	ldr	r3, [r2, #0]
 800f8fc:	1c58      	adds	r0, r3, #1
 800f8fe:	6010      	str	r0, [r2, #0]
 800f900:	7019      	strb	r1, [r3, #0]
 800f902:	4608      	mov	r0, r1
 800f904:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f908:	4770      	bx	lr

0800f90a <__sfputs_r>:
 800f90a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f90c:	4606      	mov	r6, r0
 800f90e:	460f      	mov	r7, r1
 800f910:	4614      	mov	r4, r2
 800f912:	18d5      	adds	r5, r2, r3
 800f914:	42ac      	cmp	r4, r5
 800f916:	d101      	bne.n	800f91c <__sfputs_r+0x12>
 800f918:	2000      	movs	r0, #0
 800f91a:	e007      	b.n	800f92c <__sfputs_r+0x22>
 800f91c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f920:	463a      	mov	r2, r7
 800f922:	4630      	mov	r0, r6
 800f924:	f7ff ffda 	bl	800f8dc <__sfputc_r>
 800f928:	1c43      	adds	r3, r0, #1
 800f92a:	d1f3      	bne.n	800f914 <__sfputs_r+0xa>
 800f92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f930 <_vfiprintf_r>:
 800f930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f934:	460d      	mov	r5, r1
 800f936:	b09d      	sub	sp, #116	; 0x74
 800f938:	4614      	mov	r4, r2
 800f93a:	4698      	mov	r8, r3
 800f93c:	4606      	mov	r6, r0
 800f93e:	b118      	cbz	r0, 800f948 <_vfiprintf_r+0x18>
 800f940:	6983      	ldr	r3, [r0, #24]
 800f942:	b90b      	cbnz	r3, 800f948 <_vfiprintf_r+0x18>
 800f944:	f7ff fa22 	bl	800ed8c <__sinit>
 800f948:	4b89      	ldr	r3, [pc, #548]	; (800fb70 <_vfiprintf_r+0x240>)
 800f94a:	429d      	cmp	r5, r3
 800f94c:	d11b      	bne.n	800f986 <_vfiprintf_r+0x56>
 800f94e:	6875      	ldr	r5, [r6, #4]
 800f950:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f952:	07d9      	lsls	r1, r3, #31
 800f954:	d405      	bmi.n	800f962 <_vfiprintf_r+0x32>
 800f956:	89ab      	ldrh	r3, [r5, #12]
 800f958:	059a      	lsls	r2, r3, #22
 800f95a:	d402      	bmi.n	800f962 <_vfiprintf_r+0x32>
 800f95c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f95e:	f7ff fab8 	bl	800eed2 <__retarget_lock_acquire_recursive>
 800f962:	89ab      	ldrh	r3, [r5, #12]
 800f964:	071b      	lsls	r3, r3, #28
 800f966:	d501      	bpl.n	800f96c <_vfiprintf_r+0x3c>
 800f968:	692b      	ldr	r3, [r5, #16]
 800f96a:	b9eb      	cbnz	r3, 800f9a8 <_vfiprintf_r+0x78>
 800f96c:	4629      	mov	r1, r5
 800f96e:	4630      	mov	r0, r6
 800f970:	f000 f9b6 	bl	800fce0 <__swsetup_r>
 800f974:	b1c0      	cbz	r0, 800f9a8 <_vfiprintf_r+0x78>
 800f976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f978:	07dc      	lsls	r4, r3, #31
 800f97a:	d50e      	bpl.n	800f99a <_vfiprintf_r+0x6a>
 800f97c:	f04f 30ff 	mov.w	r0, #4294967295
 800f980:	b01d      	add	sp, #116	; 0x74
 800f982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f986:	4b7b      	ldr	r3, [pc, #492]	; (800fb74 <_vfiprintf_r+0x244>)
 800f988:	429d      	cmp	r5, r3
 800f98a:	d101      	bne.n	800f990 <_vfiprintf_r+0x60>
 800f98c:	68b5      	ldr	r5, [r6, #8]
 800f98e:	e7df      	b.n	800f950 <_vfiprintf_r+0x20>
 800f990:	4b79      	ldr	r3, [pc, #484]	; (800fb78 <_vfiprintf_r+0x248>)
 800f992:	429d      	cmp	r5, r3
 800f994:	bf08      	it	eq
 800f996:	68f5      	ldreq	r5, [r6, #12]
 800f998:	e7da      	b.n	800f950 <_vfiprintf_r+0x20>
 800f99a:	89ab      	ldrh	r3, [r5, #12]
 800f99c:	0598      	lsls	r0, r3, #22
 800f99e:	d4ed      	bmi.n	800f97c <_vfiprintf_r+0x4c>
 800f9a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9a2:	f7ff fa97 	bl	800eed4 <__retarget_lock_release_recursive>
 800f9a6:	e7e9      	b.n	800f97c <_vfiprintf_r+0x4c>
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	9309      	str	r3, [sp, #36]	; 0x24
 800f9ac:	2320      	movs	r3, #32
 800f9ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9b6:	2330      	movs	r3, #48	; 0x30
 800f9b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fb7c <_vfiprintf_r+0x24c>
 800f9bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9c0:	f04f 0901 	mov.w	r9, #1
 800f9c4:	4623      	mov	r3, r4
 800f9c6:	469a      	mov	sl, r3
 800f9c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9cc:	b10a      	cbz	r2, 800f9d2 <_vfiprintf_r+0xa2>
 800f9ce:	2a25      	cmp	r2, #37	; 0x25
 800f9d0:	d1f9      	bne.n	800f9c6 <_vfiprintf_r+0x96>
 800f9d2:	ebba 0b04 	subs.w	fp, sl, r4
 800f9d6:	d00b      	beq.n	800f9f0 <_vfiprintf_r+0xc0>
 800f9d8:	465b      	mov	r3, fp
 800f9da:	4622      	mov	r2, r4
 800f9dc:	4629      	mov	r1, r5
 800f9de:	4630      	mov	r0, r6
 800f9e0:	f7ff ff93 	bl	800f90a <__sfputs_r>
 800f9e4:	3001      	adds	r0, #1
 800f9e6:	f000 80aa 	beq.w	800fb3e <_vfiprintf_r+0x20e>
 800f9ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9ec:	445a      	add	r2, fp
 800f9ee:	9209      	str	r2, [sp, #36]	; 0x24
 800f9f0:	f89a 3000 	ldrb.w	r3, [sl]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	f000 80a2 	beq.w	800fb3e <_vfiprintf_r+0x20e>
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	f04f 32ff 	mov.w	r2, #4294967295
 800fa00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa04:	f10a 0a01 	add.w	sl, sl, #1
 800fa08:	9304      	str	r3, [sp, #16]
 800fa0a:	9307      	str	r3, [sp, #28]
 800fa0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa10:	931a      	str	r3, [sp, #104]	; 0x68
 800fa12:	4654      	mov	r4, sl
 800fa14:	2205      	movs	r2, #5
 800fa16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa1a:	4858      	ldr	r0, [pc, #352]	; (800fb7c <_vfiprintf_r+0x24c>)
 800fa1c:	f7f0 fbf0 	bl	8000200 <memchr>
 800fa20:	9a04      	ldr	r2, [sp, #16]
 800fa22:	b9d8      	cbnz	r0, 800fa5c <_vfiprintf_r+0x12c>
 800fa24:	06d1      	lsls	r1, r2, #27
 800fa26:	bf44      	itt	mi
 800fa28:	2320      	movmi	r3, #32
 800fa2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa2e:	0713      	lsls	r3, r2, #28
 800fa30:	bf44      	itt	mi
 800fa32:	232b      	movmi	r3, #43	; 0x2b
 800fa34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa38:	f89a 3000 	ldrb.w	r3, [sl]
 800fa3c:	2b2a      	cmp	r3, #42	; 0x2a
 800fa3e:	d015      	beq.n	800fa6c <_vfiprintf_r+0x13c>
 800fa40:	9a07      	ldr	r2, [sp, #28]
 800fa42:	4654      	mov	r4, sl
 800fa44:	2000      	movs	r0, #0
 800fa46:	f04f 0c0a 	mov.w	ip, #10
 800fa4a:	4621      	mov	r1, r4
 800fa4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa50:	3b30      	subs	r3, #48	; 0x30
 800fa52:	2b09      	cmp	r3, #9
 800fa54:	d94e      	bls.n	800faf4 <_vfiprintf_r+0x1c4>
 800fa56:	b1b0      	cbz	r0, 800fa86 <_vfiprintf_r+0x156>
 800fa58:	9207      	str	r2, [sp, #28]
 800fa5a:	e014      	b.n	800fa86 <_vfiprintf_r+0x156>
 800fa5c:	eba0 0308 	sub.w	r3, r0, r8
 800fa60:	fa09 f303 	lsl.w	r3, r9, r3
 800fa64:	4313      	orrs	r3, r2
 800fa66:	9304      	str	r3, [sp, #16]
 800fa68:	46a2      	mov	sl, r4
 800fa6a:	e7d2      	b.n	800fa12 <_vfiprintf_r+0xe2>
 800fa6c:	9b03      	ldr	r3, [sp, #12]
 800fa6e:	1d19      	adds	r1, r3, #4
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	9103      	str	r1, [sp, #12]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	bfbb      	ittet	lt
 800fa78:	425b      	neglt	r3, r3
 800fa7a:	f042 0202 	orrlt.w	r2, r2, #2
 800fa7e:	9307      	strge	r3, [sp, #28]
 800fa80:	9307      	strlt	r3, [sp, #28]
 800fa82:	bfb8      	it	lt
 800fa84:	9204      	strlt	r2, [sp, #16]
 800fa86:	7823      	ldrb	r3, [r4, #0]
 800fa88:	2b2e      	cmp	r3, #46	; 0x2e
 800fa8a:	d10c      	bne.n	800faa6 <_vfiprintf_r+0x176>
 800fa8c:	7863      	ldrb	r3, [r4, #1]
 800fa8e:	2b2a      	cmp	r3, #42	; 0x2a
 800fa90:	d135      	bne.n	800fafe <_vfiprintf_r+0x1ce>
 800fa92:	9b03      	ldr	r3, [sp, #12]
 800fa94:	1d1a      	adds	r2, r3, #4
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	9203      	str	r2, [sp, #12]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	bfb8      	it	lt
 800fa9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800faa2:	3402      	adds	r4, #2
 800faa4:	9305      	str	r3, [sp, #20]
 800faa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fb8c <_vfiprintf_r+0x25c>
 800faaa:	7821      	ldrb	r1, [r4, #0]
 800faac:	2203      	movs	r2, #3
 800faae:	4650      	mov	r0, sl
 800fab0:	f7f0 fba6 	bl	8000200 <memchr>
 800fab4:	b140      	cbz	r0, 800fac8 <_vfiprintf_r+0x198>
 800fab6:	2340      	movs	r3, #64	; 0x40
 800fab8:	eba0 000a 	sub.w	r0, r0, sl
 800fabc:	fa03 f000 	lsl.w	r0, r3, r0
 800fac0:	9b04      	ldr	r3, [sp, #16]
 800fac2:	4303      	orrs	r3, r0
 800fac4:	3401      	adds	r4, #1
 800fac6:	9304      	str	r3, [sp, #16]
 800fac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800facc:	482c      	ldr	r0, [pc, #176]	; (800fb80 <_vfiprintf_r+0x250>)
 800face:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fad2:	2206      	movs	r2, #6
 800fad4:	f7f0 fb94 	bl	8000200 <memchr>
 800fad8:	2800      	cmp	r0, #0
 800fada:	d03f      	beq.n	800fb5c <_vfiprintf_r+0x22c>
 800fadc:	4b29      	ldr	r3, [pc, #164]	; (800fb84 <_vfiprintf_r+0x254>)
 800fade:	bb1b      	cbnz	r3, 800fb28 <_vfiprintf_r+0x1f8>
 800fae0:	9b03      	ldr	r3, [sp, #12]
 800fae2:	3307      	adds	r3, #7
 800fae4:	f023 0307 	bic.w	r3, r3, #7
 800fae8:	3308      	adds	r3, #8
 800faea:	9303      	str	r3, [sp, #12]
 800faec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faee:	443b      	add	r3, r7
 800faf0:	9309      	str	r3, [sp, #36]	; 0x24
 800faf2:	e767      	b.n	800f9c4 <_vfiprintf_r+0x94>
 800faf4:	fb0c 3202 	mla	r2, ip, r2, r3
 800faf8:	460c      	mov	r4, r1
 800fafa:	2001      	movs	r0, #1
 800fafc:	e7a5      	b.n	800fa4a <_vfiprintf_r+0x11a>
 800fafe:	2300      	movs	r3, #0
 800fb00:	3401      	adds	r4, #1
 800fb02:	9305      	str	r3, [sp, #20]
 800fb04:	4619      	mov	r1, r3
 800fb06:	f04f 0c0a 	mov.w	ip, #10
 800fb0a:	4620      	mov	r0, r4
 800fb0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb10:	3a30      	subs	r2, #48	; 0x30
 800fb12:	2a09      	cmp	r2, #9
 800fb14:	d903      	bls.n	800fb1e <_vfiprintf_r+0x1ee>
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d0c5      	beq.n	800faa6 <_vfiprintf_r+0x176>
 800fb1a:	9105      	str	r1, [sp, #20]
 800fb1c:	e7c3      	b.n	800faa6 <_vfiprintf_r+0x176>
 800fb1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb22:	4604      	mov	r4, r0
 800fb24:	2301      	movs	r3, #1
 800fb26:	e7f0      	b.n	800fb0a <_vfiprintf_r+0x1da>
 800fb28:	ab03      	add	r3, sp, #12
 800fb2a:	9300      	str	r3, [sp, #0]
 800fb2c:	462a      	mov	r2, r5
 800fb2e:	4b16      	ldr	r3, [pc, #88]	; (800fb88 <_vfiprintf_r+0x258>)
 800fb30:	a904      	add	r1, sp, #16
 800fb32:	4630      	mov	r0, r6
 800fb34:	f7fd fe24 	bl	800d780 <_printf_float>
 800fb38:	4607      	mov	r7, r0
 800fb3a:	1c78      	adds	r0, r7, #1
 800fb3c:	d1d6      	bne.n	800faec <_vfiprintf_r+0x1bc>
 800fb3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb40:	07d9      	lsls	r1, r3, #31
 800fb42:	d405      	bmi.n	800fb50 <_vfiprintf_r+0x220>
 800fb44:	89ab      	ldrh	r3, [r5, #12]
 800fb46:	059a      	lsls	r2, r3, #22
 800fb48:	d402      	bmi.n	800fb50 <_vfiprintf_r+0x220>
 800fb4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb4c:	f7ff f9c2 	bl	800eed4 <__retarget_lock_release_recursive>
 800fb50:	89ab      	ldrh	r3, [r5, #12]
 800fb52:	065b      	lsls	r3, r3, #25
 800fb54:	f53f af12 	bmi.w	800f97c <_vfiprintf_r+0x4c>
 800fb58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb5a:	e711      	b.n	800f980 <_vfiprintf_r+0x50>
 800fb5c:	ab03      	add	r3, sp, #12
 800fb5e:	9300      	str	r3, [sp, #0]
 800fb60:	462a      	mov	r2, r5
 800fb62:	4b09      	ldr	r3, [pc, #36]	; (800fb88 <_vfiprintf_r+0x258>)
 800fb64:	a904      	add	r1, sp, #16
 800fb66:	4630      	mov	r0, r6
 800fb68:	f7fe f8ae 	bl	800dcc8 <_printf_i>
 800fb6c:	e7e4      	b.n	800fb38 <_vfiprintf_r+0x208>
 800fb6e:	bf00      	nop
 800fb70:	08010af8 	.word	0x08010af8
 800fb74:	08010b18 	.word	0x08010b18
 800fb78:	08010ad8 	.word	0x08010ad8
 800fb7c:	08010c94 	.word	0x08010c94
 800fb80:	08010c9e 	.word	0x08010c9e
 800fb84:	0800d781 	.word	0x0800d781
 800fb88:	0800f90b 	.word	0x0800f90b
 800fb8c:	08010c9a 	.word	0x08010c9a

0800fb90 <__sread>:
 800fb90:	b510      	push	{r4, lr}
 800fb92:	460c      	mov	r4, r1
 800fb94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb98:	f000 fae6 	bl	8010168 <_read_r>
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	bfab      	itete	ge
 800fba0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fba2:	89a3      	ldrhlt	r3, [r4, #12]
 800fba4:	181b      	addge	r3, r3, r0
 800fba6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fbaa:	bfac      	ite	ge
 800fbac:	6563      	strge	r3, [r4, #84]	; 0x54
 800fbae:	81a3      	strhlt	r3, [r4, #12]
 800fbb0:	bd10      	pop	{r4, pc}

0800fbb2 <__swrite>:
 800fbb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbb6:	461f      	mov	r7, r3
 800fbb8:	898b      	ldrh	r3, [r1, #12]
 800fbba:	05db      	lsls	r3, r3, #23
 800fbbc:	4605      	mov	r5, r0
 800fbbe:	460c      	mov	r4, r1
 800fbc0:	4616      	mov	r6, r2
 800fbc2:	d505      	bpl.n	800fbd0 <__swrite+0x1e>
 800fbc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbc8:	2302      	movs	r3, #2
 800fbca:	2200      	movs	r2, #0
 800fbcc:	f000 f9f8 	bl	800ffc0 <_lseek_r>
 800fbd0:	89a3      	ldrh	r3, [r4, #12]
 800fbd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fbda:	81a3      	strh	r3, [r4, #12]
 800fbdc:	4632      	mov	r2, r6
 800fbde:	463b      	mov	r3, r7
 800fbe0:	4628      	mov	r0, r5
 800fbe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbe6:	f000 b869 	b.w	800fcbc <_write_r>

0800fbea <__sseek>:
 800fbea:	b510      	push	{r4, lr}
 800fbec:	460c      	mov	r4, r1
 800fbee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbf2:	f000 f9e5 	bl	800ffc0 <_lseek_r>
 800fbf6:	1c43      	adds	r3, r0, #1
 800fbf8:	89a3      	ldrh	r3, [r4, #12]
 800fbfa:	bf15      	itete	ne
 800fbfc:	6560      	strne	r0, [r4, #84]	; 0x54
 800fbfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fc02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fc06:	81a3      	strheq	r3, [r4, #12]
 800fc08:	bf18      	it	ne
 800fc0a:	81a3      	strhne	r3, [r4, #12]
 800fc0c:	bd10      	pop	{r4, pc}

0800fc0e <__sclose>:
 800fc0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc12:	f000 b8f1 	b.w	800fdf8 <_close_r>
	...

0800fc18 <__swbuf_r>:
 800fc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc1a:	460e      	mov	r6, r1
 800fc1c:	4614      	mov	r4, r2
 800fc1e:	4605      	mov	r5, r0
 800fc20:	b118      	cbz	r0, 800fc2a <__swbuf_r+0x12>
 800fc22:	6983      	ldr	r3, [r0, #24]
 800fc24:	b90b      	cbnz	r3, 800fc2a <__swbuf_r+0x12>
 800fc26:	f7ff f8b1 	bl	800ed8c <__sinit>
 800fc2a:	4b21      	ldr	r3, [pc, #132]	; (800fcb0 <__swbuf_r+0x98>)
 800fc2c:	429c      	cmp	r4, r3
 800fc2e:	d12b      	bne.n	800fc88 <__swbuf_r+0x70>
 800fc30:	686c      	ldr	r4, [r5, #4]
 800fc32:	69a3      	ldr	r3, [r4, #24]
 800fc34:	60a3      	str	r3, [r4, #8]
 800fc36:	89a3      	ldrh	r3, [r4, #12]
 800fc38:	071a      	lsls	r2, r3, #28
 800fc3a:	d52f      	bpl.n	800fc9c <__swbuf_r+0x84>
 800fc3c:	6923      	ldr	r3, [r4, #16]
 800fc3e:	b36b      	cbz	r3, 800fc9c <__swbuf_r+0x84>
 800fc40:	6923      	ldr	r3, [r4, #16]
 800fc42:	6820      	ldr	r0, [r4, #0]
 800fc44:	1ac0      	subs	r0, r0, r3
 800fc46:	6963      	ldr	r3, [r4, #20]
 800fc48:	b2f6      	uxtb	r6, r6
 800fc4a:	4283      	cmp	r3, r0
 800fc4c:	4637      	mov	r7, r6
 800fc4e:	dc04      	bgt.n	800fc5a <__swbuf_r+0x42>
 800fc50:	4621      	mov	r1, r4
 800fc52:	4628      	mov	r0, r5
 800fc54:	f000 f966 	bl	800ff24 <_fflush_r>
 800fc58:	bb30      	cbnz	r0, 800fca8 <__swbuf_r+0x90>
 800fc5a:	68a3      	ldr	r3, [r4, #8]
 800fc5c:	3b01      	subs	r3, #1
 800fc5e:	60a3      	str	r3, [r4, #8]
 800fc60:	6823      	ldr	r3, [r4, #0]
 800fc62:	1c5a      	adds	r2, r3, #1
 800fc64:	6022      	str	r2, [r4, #0]
 800fc66:	701e      	strb	r6, [r3, #0]
 800fc68:	6963      	ldr	r3, [r4, #20]
 800fc6a:	3001      	adds	r0, #1
 800fc6c:	4283      	cmp	r3, r0
 800fc6e:	d004      	beq.n	800fc7a <__swbuf_r+0x62>
 800fc70:	89a3      	ldrh	r3, [r4, #12]
 800fc72:	07db      	lsls	r3, r3, #31
 800fc74:	d506      	bpl.n	800fc84 <__swbuf_r+0x6c>
 800fc76:	2e0a      	cmp	r6, #10
 800fc78:	d104      	bne.n	800fc84 <__swbuf_r+0x6c>
 800fc7a:	4621      	mov	r1, r4
 800fc7c:	4628      	mov	r0, r5
 800fc7e:	f000 f951 	bl	800ff24 <_fflush_r>
 800fc82:	b988      	cbnz	r0, 800fca8 <__swbuf_r+0x90>
 800fc84:	4638      	mov	r0, r7
 800fc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc88:	4b0a      	ldr	r3, [pc, #40]	; (800fcb4 <__swbuf_r+0x9c>)
 800fc8a:	429c      	cmp	r4, r3
 800fc8c:	d101      	bne.n	800fc92 <__swbuf_r+0x7a>
 800fc8e:	68ac      	ldr	r4, [r5, #8]
 800fc90:	e7cf      	b.n	800fc32 <__swbuf_r+0x1a>
 800fc92:	4b09      	ldr	r3, [pc, #36]	; (800fcb8 <__swbuf_r+0xa0>)
 800fc94:	429c      	cmp	r4, r3
 800fc96:	bf08      	it	eq
 800fc98:	68ec      	ldreq	r4, [r5, #12]
 800fc9a:	e7ca      	b.n	800fc32 <__swbuf_r+0x1a>
 800fc9c:	4621      	mov	r1, r4
 800fc9e:	4628      	mov	r0, r5
 800fca0:	f000 f81e 	bl	800fce0 <__swsetup_r>
 800fca4:	2800      	cmp	r0, #0
 800fca6:	d0cb      	beq.n	800fc40 <__swbuf_r+0x28>
 800fca8:	f04f 37ff 	mov.w	r7, #4294967295
 800fcac:	e7ea      	b.n	800fc84 <__swbuf_r+0x6c>
 800fcae:	bf00      	nop
 800fcb0:	08010af8 	.word	0x08010af8
 800fcb4:	08010b18 	.word	0x08010b18
 800fcb8:	08010ad8 	.word	0x08010ad8

0800fcbc <_write_r>:
 800fcbc:	b538      	push	{r3, r4, r5, lr}
 800fcbe:	4d07      	ldr	r5, [pc, #28]	; (800fcdc <_write_r+0x20>)
 800fcc0:	4604      	mov	r4, r0
 800fcc2:	4608      	mov	r0, r1
 800fcc4:	4611      	mov	r1, r2
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	602a      	str	r2, [r5, #0]
 800fcca:	461a      	mov	r2, r3
 800fccc:	f7f9 fd16 	bl	80096fc <_write>
 800fcd0:	1c43      	adds	r3, r0, #1
 800fcd2:	d102      	bne.n	800fcda <_write_r+0x1e>
 800fcd4:	682b      	ldr	r3, [r5, #0]
 800fcd6:	b103      	cbz	r3, 800fcda <_write_r+0x1e>
 800fcd8:	6023      	str	r3, [r4, #0]
 800fcda:	bd38      	pop	{r3, r4, r5, pc}
 800fcdc:	20008200 	.word	0x20008200

0800fce0 <__swsetup_r>:
 800fce0:	4b32      	ldr	r3, [pc, #200]	; (800fdac <__swsetup_r+0xcc>)
 800fce2:	b570      	push	{r4, r5, r6, lr}
 800fce4:	681d      	ldr	r5, [r3, #0]
 800fce6:	4606      	mov	r6, r0
 800fce8:	460c      	mov	r4, r1
 800fcea:	b125      	cbz	r5, 800fcf6 <__swsetup_r+0x16>
 800fcec:	69ab      	ldr	r3, [r5, #24]
 800fcee:	b913      	cbnz	r3, 800fcf6 <__swsetup_r+0x16>
 800fcf0:	4628      	mov	r0, r5
 800fcf2:	f7ff f84b 	bl	800ed8c <__sinit>
 800fcf6:	4b2e      	ldr	r3, [pc, #184]	; (800fdb0 <__swsetup_r+0xd0>)
 800fcf8:	429c      	cmp	r4, r3
 800fcfa:	d10f      	bne.n	800fd1c <__swsetup_r+0x3c>
 800fcfc:	686c      	ldr	r4, [r5, #4]
 800fcfe:	89a3      	ldrh	r3, [r4, #12]
 800fd00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd04:	0719      	lsls	r1, r3, #28
 800fd06:	d42c      	bmi.n	800fd62 <__swsetup_r+0x82>
 800fd08:	06dd      	lsls	r5, r3, #27
 800fd0a:	d411      	bmi.n	800fd30 <__swsetup_r+0x50>
 800fd0c:	2309      	movs	r3, #9
 800fd0e:	6033      	str	r3, [r6, #0]
 800fd10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fd14:	81a3      	strh	r3, [r4, #12]
 800fd16:	f04f 30ff 	mov.w	r0, #4294967295
 800fd1a:	e03e      	b.n	800fd9a <__swsetup_r+0xba>
 800fd1c:	4b25      	ldr	r3, [pc, #148]	; (800fdb4 <__swsetup_r+0xd4>)
 800fd1e:	429c      	cmp	r4, r3
 800fd20:	d101      	bne.n	800fd26 <__swsetup_r+0x46>
 800fd22:	68ac      	ldr	r4, [r5, #8]
 800fd24:	e7eb      	b.n	800fcfe <__swsetup_r+0x1e>
 800fd26:	4b24      	ldr	r3, [pc, #144]	; (800fdb8 <__swsetup_r+0xd8>)
 800fd28:	429c      	cmp	r4, r3
 800fd2a:	bf08      	it	eq
 800fd2c:	68ec      	ldreq	r4, [r5, #12]
 800fd2e:	e7e6      	b.n	800fcfe <__swsetup_r+0x1e>
 800fd30:	0758      	lsls	r0, r3, #29
 800fd32:	d512      	bpl.n	800fd5a <__swsetup_r+0x7a>
 800fd34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd36:	b141      	cbz	r1, 800fd4a <__swsetup_r+0x6a>
 800fd38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd3c:	4299      	cmp	r1, r3
 800fd3e:	d002      	beq.n	800fd46 <__swsetup_r+0x66>
 800fd40:	4630      	mov	r0, r6
 800fd42:	f7fd fb9d 	bl	800d480 <_free_r>
 800fd46:	2300      	movs	r3, #0
 800fd48:	6363      	str	r3, [r4, #52]	; 0x34
 800fd4a:	89a3      	ldrh	r3, [r4, #12]
 800fd4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fd50:	81a3      	strh	r3, [r4, #12]
 800fd52:	2300      	movs	r3, #0
 800fd54:	6063      	str	r3, [r4, #4]
 800fd56:	6923      	ldr	r3, [r4, #16]
 800fd58:	6023      	str	r3, [r4, #0]
 800fd5a:	89a3      	ldrh	r3, [r4, #12]
 800fd5c:	f043 0308 	orr.w	r3, r3, #8
 800fd60:	81a3      	strh	r3, [r4, #12]
 800fd62:	6923      	ldr	r3, [r4, #16]
 800fd64:	b94b      	cbnz	r3, 800fd7a <__swsetup_r+0x9a>
 800fd66:	89a3      	ldrh	r3, [r4, #12]
 800fd68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fd6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd70:	d003      	beq.n	800fd7a <__swsetup_r+0x9a>
 800fd72:	4621      	mov	r1, r4
 800fd74:	4630      	mov	r0, r6
 800fd76:	f000 f95b 	bl	8010030 <__smakebuf_r>
 800fd7a:	89a0      	ldrh	r0, [r4, #12]
 800fd7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd80:	f010 0301 	ands.w	r3, r0, #1
 800fd84:	d00a      	beq.n	800fd9c <__swsetup_r+0xbc>
 800fd86:	2300      	movs	r3, #0
 800fd88:	60a3      	str	r3, [r4, #8]
 800fd8a:	6963      	ldr	r3, [r4, #20]
 800fd8c:	425b      	negs	r3, r3
 800fd8e:	61a3      	str	r3, [r4, #24]
 800fd90:	6923      	ldr	r3, [r4, #16]
 800fd92:	b943      	cbnz	r3, 800fda6 <__swsetup_r+0xc6>
 800fd94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fd98:	d1ba      	bne.n	800fd10 <__swsetup_r+0x30>
 800fd9a:	bd70      	pop	{r4, r5, r6, pc}
 800fd9c:	0781      	lsls	r1, r0, #30
 800fd9e:	bf58      	it	pl
 800fda0:	6963      	ldrpl	r3, [r4, #20]
 800fda2:	60a3      	str	r3, [r4, #8]
 800fda4:	e7f4      	b.n	800fd90 <__swsetup_r+0xb0>
 800fda6:	2000      	movs	r0, #0
 800fda8:	e7f7      	b.n	800fd9a <__swsetup_r+0xba>
 800fdaa:	bf00      	nop
 800fdac:	2000001c 	.word	0x2000001c
 800fdb0:	08010af8 	.word	0x08010af8
 800fdb4:	08010b18 	.word	0x08010b18
 800fdb8:	08010ad8 	.word	0x08010ad8

0800fdbc <__assert_func>:
 800fdbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fdbe:	4614      	mov	r4, r2
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	4b09      	ldr	r3, [pc, #36]	; (800fde8 <__assert_func+0x2c>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	4605      	mov	r5, r0
 800fdc8:	68d8      	ldr	r0, [r3, #12]
 800fdca:	b14c      	cbz	r4, 800fde0 <__assert_func+0x24>
 800fdcc:	4b07      	ldr	r3, [pc, #28]	; (800fdec <__assert_func+0x30>)
 800fdce:	9100      	str	r1, [sp, #0]
 800fdd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fdd4:	4906      	ldr	r1, [pc, #24]	; (800fdf0 <__assert_func+0x34>)
 800fdd6:	462b      	mov	r3, r5
 800fdd8:	f000 f8e0 	bl	800ff9c <fiprintf>
 800fddc:	f000 f9e3 	bl	80101a6 <abort>
 800fde0:	4b04      	ldr	r3, [pc, #16]	; (800fdf4 <__assert_func+0x38>)
 800fde2:	461c      	mov	r4, r3
 800fde4:	e7f3      	b.n	800fdce <__assert_func+0x12>
 800fde6:	bf00      	nop
 800fde8:	2000001c 	.word	0x2000001c
 800fdec:	08010ca5 	.word	0x08010ca5
 800fdf0:	08010cb2 	.word	0x08010cb2
 800fdf4:	08010ce0 	.word	0x08010ce0

0800fdf8 <_close_r>:
 800fdf8:	b538      	push	{r3, r4, r5, lr}
 800fdfa:	4d06      	ldr	r5, [pc, #24]	; (800fe14 <_close_r+0x1c>)
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	4604      	mov	r4, r0
 800fe00:	4608      	mov	r0, r1
 800fe02:	602b      	str	r3, [r5, #0]
 800fe04:	f000 fa44 	bl	8010290 <_close>
 800fe08:	1c43      	adds	r3, r0, #1
 800fe0a:	d102      	bne.n	800fe12 <_close_r+0x1a>
 800fe0c:	682b      	ldr	r3, [r5, #0]
 800fe0e:	b103      	cbz	r3, 800fe12 <_close_r+0x1a>
 800fe10:	6023      	str	r3, [r4, #0]
 800fe12:	bd38      	pop	{r3, r4, r5, pc}
 800fe14:	20008200 	.word	0x20008200

0800fe18 <__sflush_r>:
 800fe18:	898a      	ldrh	r2, [r1, #12]
 800fe1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe1e:	4605      	mov	r5, r0
 800fe20:	0710      	lsls	r0, r2, #28
 800fe22:	460c      	mov	r4, r1
 800fe24:	d458      	bmi.n	800fed8 <__sflush_r+0xc0>
 800fe26:	684b      	ldr	r3, [r1, #4]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	dc05      	bgt.n	800fe38 <__sflush_r+0x20>
 800fe2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	dc02      	bgt.n	800fe38 <__sflush_r+0x20>
 800fe32:	2000      	movs	r0, #0
 800fe34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe3a:	2e00      	cmp	r6, #0
 800fe3c:	d0f9      	beq.n	800fe32 <__sflush_r+0x1a>
 800fe3e:	2300      	movs	r3, #0
 800fe40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fe44:	682f      	ldr	r7, [r5, #0]
 800fe46:	602b      	str	r3, [r5, #0]
 800fe48:	d032      	beq.n	800feb0 <__sflush_r+0x98>
 800fe4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fe4c:	89a3      	ldrh	r3, [r4, #12]
 800fe4e:	075a      	lsls	r2, r3, #29
 800fe50:	d505      	bpl.n	800fe5e <__sflush_r+0x46>
 800fe52:	6863      	ldr	r3, [r4, #4]
 800fe54:	1ac0      	subs	r0, r0, r3
 800fe56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe58:	b10b      	cbz	r3, 800fe5e <__sflush_r+0x46>
 800fe5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe5c:	1ac0      	subs	r0, r0, r3
 800fe5e:	2300      	movs	r3, #0
 800fe60:	4602      	mov	r2, r0
 800fe62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe64:	6a21      	ldr	r1, [r4, #32]
 800fe66:	4628      	mov	r0, r5
 800fe68:	47b0      	blx	r6
 800fe6a:	1c43      	adds	r3, r0, #1
 800fe6c:	89a3      	ldrh	r3, [r4, #12]
 800fe6e:	d106      	bne.n	800fe7e <__sflush_r+0x66>
 800fe70:	6829      	ldr	r1, [r5, #0]
 800fe72:	291d      	cmp	r1, #29
 800fe74:	d82c      	bhi.n	800fed0 <__sflush_r+0xb8>
 800fe76:	4a2a      	ldr	r2, [pc, #168]	; (800ff20 <__sflush_r+0x108>)
 800fe78:	40ca      	lsrs	r2, r1
 800fe7a:	07d6      	lsls	r6, r2, #31
 800fe7c:	d528      	bpl.n	800fed0 <__sflush_r+0xb8>
 800fe7e:	2200      	movs	r2, #0
 800fe80:	6062      	str	r2, [r4, #4]
 800fe82:	04d9      	lsls	r1, r3, #19
 800fe84:	6922      	ldr	r2, [r4, #16]
 800fe86:	6022      	str	r2, [r4, #0]
 800fe88:	d504      	bpl.n	800fe94 <__sflush_r+0x7c>
 800fe8a:	1c42      	adds	r2, r0, #1
 800fe8c:	d101      	bne.n	800fe92 <__sflush_r+0x7a>
 800fe8e:	682b      	ldr	r3, [r5, #0]
 800fe90:	b903      	cbnz	r3, 800fe94 <__sflush_r+0x7c>
 800fe92:	6560      	str	r0, [r4, #84]	; 0x54
 800fe94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe96:	602f      	str	r7, [r5, #0]
 800fe98:	2900      	cmp	r1, #0
 800fe9a:	d0ca      	beq.n	800fe32 <__sflush_r+0x1a>
 800fe9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fea0:	4299      	cmp	r1, r3
 800fea2:	d002      	beq.n	800feaa <__sflush_r+0x92>
 800fea4:	4628      	mov	r0, r5
 800fea6:	f7fd faeb 	bl	800d480 <_free_r>
 800feaa:	2000      	movs	r0, #0
 800feac:	6360      	str	r0, [r4, #52]	; 0x34
 800feae:	e7c1      	b.n	800fe34 <__sflush_r+0x1c>
 800feb0:	6a21      	ldr	r1, [r4, #32]
 800feb2:	2301      	movs	r3, #1
 800feb4:	4628      	mov	r0, r5
 800feb6:	47b0      	blx	r6
 800feb8:	1c41      	adds	r1, r0, #1
 800feba:	d1c7      	bne.n	800fe4c <__sflush_r+0x34>
 800febc:	682b      	ldr	r3, [r5, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d0c4      	beq.n	800fe4c <__sflush_r+0x34>
 800fec2:	2b1d      	cmp	r3, #29
 800fec4:	d001      	beq.n	800feca <__sflush_r+0xb2>
 800fec6:	2b16      	cmp	r3, #22
 800fec8:	d101      	bne.n	800fece <__sflush_r+0xb6>
 800feca:	602f      	str	r7, [r5, #0]
 800fecc:	e7b1      	b.n	800fe32 <__sflush_r+0x1a>
 800fece:	89a3      	ldrh	r3, [r4, #12]
 800fed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fed4:	81a3      	strh	r3, [r4, #12]
 800fed6:	e7ad      	b.n	800fe34 <__sflush_r+0x1c>
 800fed8:	690f      	ldr	r7, [r1, #16]
 800feda:	2f00      	cmp	r7, #0
 800fedc:	d0a9      	beq.n	800fe32 <__sflush_r+0x1a>
 800fede:	0793      	lsls	r3, r2, #30
 800fee0:	680e      	ldr	r6, [r1, #0]
 800fee2:	bf08      	it	eq
 800fee4:	694b      	ldreq	r3, [r1, #20]
 800fee6:	600f      	str	r7, [r1, #0]
 800fee8:	bf18      	it	ne
 800feea:	2300      	movne	r3, #0
 800feec:	eba6 0807 	sub.w	r8, r6, r7
 800fef0:	608b      	str	r3, [r1, #8]
 800fef2:	f1b8 0f00 	cmp.w	r8, #0
 800fef6:	dd9c      	ble.n	800fe32 <__sflush_r+0x1a>
 800fef8:	6a21      	ldr	r1, [r4, #32]
 800fefa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fefc:	4643      	mov	r3, r8
 800fefe:	463a      	mov	r2, r7
 800ff00:	4628      	mov	r0, r5
 800ff02:	47b0      	blx	r6
 800ff04:	2800      	cmp	r0, #0
 800ff06:	dc06      	bgt.n	800ff16 <__sflush_r+0xfe>
 800ff08:	89a3      	ldrh	r3, [r4, #12]
 800ff0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff0e:	81a3      	strh	r3, [r4, #12]
 800ff10:	f04f 30ff 	mov.w	r0, #4294967295
 800ff14:	e78e      	b.n	800fe34 <__sflush_r+0x1c>
 800ff16:	4407      	add	r7, r0
 800ff18:	eba8 0800 	sub.w	r8, r8, r0
 800ff1c:	e7e9      	b.n	800fef2 <__sflush_r+0xda>
 800ff1e:	bf00      	nop
 800ff20:	20400001 	.word	0x20400001

0800ff24 <_fflush_r>:
 800ff24:	b538      	push	{r3, r4, r5, lr}
 800ff26:	690b      	ldr	r3, [r1, #16]
 800ff28:	4605      	mov	r5, r0
 800ff2a:	460c      	mov	r4, r1
 800ff2c:	b913      	cbnz	r3, 800ff34 <_fflush_r+0x10>
 800ff2e:	2500      	movs	r5, #0
 800ff30:	4628      	mov	r0, r5
 800ff32:	bd38      	pop	{r3, r4, r5, pc}
 800ff34:	b118      	cbz	r0, 800ff3e <_fflush_r+0x1a>
 800ff36:	6983      	ldr	r3, [r0, #24]
 800ff38:	b90b      	cbnz	r3, 800ff3e <_fflush_r+0x1a>
 800ff3a:	f7fe ff27 	bl	800ed8c <__sinit>
 800ff3e:	4b14      	ldr	r3, [pc, #80]	; (800ff90 <_fflush_r+0x6c>)
 800ff40:	429c      	cmp	r4, r3
 800ff42:	d11b      	bne.n	800ff7c <_fflush_r+0x58>
 800ff44:	686c      	ldr	r4, [r5, #4]
 800ff46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d0ef      	beq.n	800ff2e <_fflush_r+0xa>
 800ff4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ff50:	07d0      	lsls	r0, r2, #31
 800ff52:	d404      	bmi.n	800ff5e <_fflush_r+0x3a>
 800ff54:	0599      	lsls	r1, r3, #22
 800ff56:	d402      	bmi.n	800ff5e <_fflush_r+0x3a>
 800ff58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff5a:	f7fe ffba 	bl	800eed2 <__retarget_lock_acquire_recursive>
 800ff5e:	4628      	mov	r0, r5
 800ff60:	4621      	mov	r1, r4
 800ff62:	f7ff ff59 	bl	800fe18 <__sflush_r>
 800ff66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff68:	07da      	lsls	r2, r3, #31
 800ff6a:	4605      	mov	r5, r0
 800ff6c:	d4e0      	bmi.n	800ff30 <_fflush_r+0xc>
 800ff6e:	89a3      	ldrh	r3, [r4, #12]
 800ff70:	059b      	lsls	r3, r3, #22
 800ff72:	d4dd      	bmi.n	800ff30 <_fflush_r+0xc>
 800ff74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff76:	f7fe ffad 	bl	800eed4 <__retarget_lock_release_recursive>
 800ff7a:	e7d9      	b.n	800ff30 <_fflush_r+0xc>
 800ff7c:	4b05      	ldr	r3, [pc, #20]	; (800ff94 <_fflush_r+0x70>)
 800ff7e:	429c      	cmp	r4, r3
 800ff80:	d101      	bne.n	800ff86 <_fflush_r+0x62>
 800ff82:	68ac      	ldr	r4, [r5, #8]
 800ff84:	e7df      	b.n	800ff46 <_fflush_r+0x22>
 800ff86:	4b04      	ldr	r3, [pc, #16]	; (800ff98 <_fflush_r+0x74>)
 800ff88:	429c      	cmp	r4, r3
 800ff8a:	bf08      	it	eq
 800ff8c:	68ec      	ldreq	r4, [r5, #12]
 800ff8e:	e7da      	b.n	800ff46 <_fflush_r+0x22>
 800ff90:	08010af8 	.word	0x08010af8
 800ff94:	08010b18 	.word	0x08010b18
 800ff98:	08010ad8 	.word	0x08010ad8

0800ff9c <fiprintf>:
 800ff9c:	b40e      	push	{r1, r2, r3}
 800ff9e:	b503      	push	{r0, r1, lr}
 800ffa0:	4601      	mov	r1, r0
 800ffa2:	ab03      	add	r3, sp, #12
 800ffa4:	4805      	ldr	r0, [pc, #20]	; (800ffbc <fiprintf+0x20>)
 800ffa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffaa:	6800      	ldr	r0, [r0, #0]
 800ffac:	9301      	str	r3, [sp, #4]
 800ffae:	f7ff fcbf 	bl	800f930 <_vfiprintf_r>
 800ffb2:	b002      	add	sp, #8
 800ffb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffb8:	b003      	add	sp, #12
 800ffba:	4770      	bx	lr
 800ffbc:	2000001c 	.word	0x2000001c

0800ffc0 <_lseek_r>:
 800ffc0:	b538      	push	{r3, r4, r5, lr}
 800ffc2:	4d07      	ldr	r5, [pc, #28]	; (800ffe0 <_lseek_r+0x20>)
 800ffc4:	4604      	mov	r4, r0
 800ffc6:	4608      	mov	r0, r1
 800ffc8:	4611      	mov	r1, r2
 800ffca:	2200      	movs	r2, #0
 800ffcc:	602a      	str	r2, [r5, #0]
 800ffce:	461a      	mov	r2, r3
 800ffd0:	f000 f986 	bl	80102e0 <_lseek>
 800ffd4:	1c43      	adds	r3, r0, #1
 800ffd6:	d102      	bne.n	800ffde <_lseek_r+0x1e>
 800ffd8:	682b      	ldr	r3, [r5, #0]
 800ffda:	b103      	cbz	r3, 800ffde <_lseek_r+0x1e>
 800ffdc:	6023      	str	r3, [r4, #0]
 800ffde:	bd38      	pop	{r3, r4, r5, pc}
 800ffe0:	20008200 	.word	0x20008200

0800ffe4 <__swhatbuf_r>:
 800ffe4:	b570      	push	{r4, r5, r6, lr}
 800ffe6:	460e      	mov	r6, r1
 800ffe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffec:	2900      	cmp	r1, #0
 800ffee:	b096      	sub	sp, #88	; 0x58
 800fff0:	4614      	mov	r4, r2
 800fff2:	461d      	mov	r5, r3
 800fff4:	da08      	bge.n	8010008 <__swhatbuf_r+0x24>
 800fff6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fffa:	2200      	movs	r2, #0
 800fffc:	602a      	str	r2, [r5, #0]
 800fffe:	061a      	lsls	r2, r3, #24
 8010000:	d410      	bmi.n	8010024 <__swhatbuf_r+0x40>
 8010002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010006:	e00e      	b.n	8010026 <__swhatbuf_r+0x42>
 8010008:	466a      	mov	r2, sp
 801000a:	f000 f8d3 	bl	80101b4 <_fstat_r>
 801000e:	2800      	cmp	r0, #0
 8010010:	dbf1      	blt.n	800fff6 <__swhatbuf_r+0x12>
 8010012:	9a01      	ldr	r2, [sp, #4]
 8010014:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010018:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801001c:	425a      	negs	r2, r3
 801001e:	415a      	adcs	r2, r3
 8010020:	602a      	str	r2, [r5, #0]
 8010022:	e7ee      	b.n	8010002 <__swhatbuf_r+0x1e>
 8010024:	2340      	movs	r3, #64	; 0x40
 8010026:	2000      	movs	r0, #0
 8010028:	6023      	str	r3, [r4, #0]
 801002a:	b016      	add	sp, #88	; 0x58
 801002c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010030 <__smakebuf_r>:
 8010030:	898b      	ldrh	r3, [r1, #12]
 8010032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010034:	079d      	lsls	r5, r3, #30
 8010036:	4606      	mov	r6, r0
 8010038:	460c      	mov	r4, r1
 801003a:	d507      	bpl.n	801004c <__smakebuf_r+0x1c>
 801003c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010040:	6023      	str	r3, [r4, #0]
 8010042:	6123      	str	r3, [r4, #16]
 8010044:	2301      	movs	r3, #1
 8010046:	6163      	str	r3, [r4, #20]
 8010048:	b002      	add	sp, #8
 801004a:	bd70      	pop	{r4, r5, r6, pc}
 801004c:	ab01      	add	r3, sp, #4
 801004e:	466a      	mov	r2, sp
 8010050:	f7ff ffc8 	bl	800ffe4 <__swhatbuf_r>
 8010054:	9900      	ldr	r1, [sp, #0]
 8010056:	4605      	mov	r5, r0
 8010058:	4630      	mov	r0, r6
 801005a:	f7fd fa7d 	bl	800d558 <_malloc_r>
 801005e:	b948      	cbnz	r0, 8010074 <__smakebuf_r+0x44>
 8010060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010064:	059a      	lsls	r2, r3, #22
 8010066:	d4ef      	bmi.n	8010048 <__smakebuf_r+0x18>
 8010068:	f023 0303 	bic.w	r3, r3, #3
 801006c:	f043 0302 	orr.w	r3, r3, #2
 8010070:	81a3      	strh	r3, [r4, #12]
 8010072:	e7e3      	b.n	801003c <__smakebuf_r+0xc>
 8010074:	4b0d      	ldr	r3, [pc, #52]	; (80100ac <__smakebuf_r+0x7c>)
 8010076:	62b3      	str	r3, [r6, #40]	; 0x28
 8010078:	89a3      	ldrh	r3, [r4, #12]
 801007a:	6020      	str	r0, [r4, #0]
 801007c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010080:	81a3      	strh	r3, [r4, #12]
 8010082:	9b00      	ldr	r3, [sp, #0]
 8010084:	6163      	str	r3, [r4, #20]
 8010086:	9b01      	ldr	r3, [sp, #4]
 8010088:	6120      	str	r0, [r4, #16]
 801008a:	b15b      	cbz	r3, 80100a4 <__smakebuf_r+0x74>
 801008c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010090:	4630      	mov	r0, r6
 8010092:	f000 f8a1 	bl	80101d8 <_isatty_r>
 8010096:	b128      	cbz	r0, 80100a4 <__smakebuf_r+0x74>
 8010098:	89a3      	ldrh	r3, [r4, #12]
 801009a:	f023 0303 	bic.w	r3, r3, #3
 801009e:	f043 0301 	orr.w	r3, r3, #1
 80100a2:	81a3      	strh	r3, [r4, #12]
 80100a4:	89a0      	ldrh	r0, [r4, #12]
 80100a6:	4305      	orrs	r5, r0
 80100a8:	81a5      	strh	r5, [r4, #12]
 80100aa:	e7cd      	b.n	8010048 <__smakebuf_r+0x18>
 80100ac:	0800ed25 	.word	0x0800ed25

080100b0 <__ascii_mbtowc>:
 80100b0:	b082      	sub	sp, #8
 80100b2:	b901      	cbnz	r1, 80100b6 <__ascii_mbtowc+0x6>
 80100b4:	a901      	add	r1, sp, #4
 80100b6:	b142      	cbz	r2, 80100ca <__ascii_mbtowc+0x1a>
 80100b8:	b14b      	cbz	r3, 80100ce <__ascii_mbtowc+0x1e>
 80100ba:	7813      	ldrb	r3, [r2, #0]
 80100bc:	600b      	str	r3, [r1, #0]
 80100be:	7812      	ldrb	r2, [r2, #0]
 80100c0:	1e10      	subs	r0, r2, #0
 80100c2:	bf18      	it	ne
 80100c4:	2001      	movne	r0, #1
 80100c6:	b002      	add	sp, #8
 80100c8:	4770      	bx	lr
 80100ca:	4610      	mov	r0, r2
 80100cc:	e7fb      	b.n	80100c6 <__ascii_mbtowc+0x16>
 80100ce:	f06f 0001 	mvn.w	r0, #1
 80100d2:	e7f8      	b.n	80100c6 <__ascii_mbtowc+0x16>

080100d4 <memmove>:
 80100d4:	4288      	cmp	r0, r1
 80100d6:	b510      	push	{r4, lr}
 80100d8:	eb01 0402 	add.w	r4, r1, r2
 80100dc:	d902      	bls.n	80100e4 <memmove+0x10>
 80100de:	4284      	cmp	r4, r0
 80100e0:	4623      	mov	r3, r4
 80100e2:	d807      	bhi.n	80100f4 <memmove+0x20>
 80100e4:	1e43      	subs	r3, r0, #1
 80100e6:	42a1      	cmp	r1, r4
 80100e8:	d008      	beq.n	80100fc <memmove+0x28>
 80100ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80100f2:	e7f8      	b.n	80100e6 <memmove+0x12>
 80100f4:	4402      	add	r2, r0
 80100f6:	4601      	mov	r1, r0
 80100f8:	428a      	cmp	r2, r1
 80100fa:	d100      	bne.n	80100fe <memmove+0x2a>
 80100fc:	bd10      	pop	{r4, pc}
 80100fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010102:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010106:	e7f7      	b.n	80100f8 <memmove+0x24>

08010108 <_realloc_r>:
 8010108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801010c:	4680      	mov	r8, r0
 801010e:	4614      	mov	r4, r2
 8010110:	460e      	mov	r6, r1
 8010112:	b921      	cbnz	r1, 801011e <_realloc_r+0x16>
 8010114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010118:	4611      	mov	r1, r2
 801011a:	f7fd ba1d 	b.w	800d558 <_malloc_r>
 801011e:	b92a      	cbnz	r2, 801012c <_realloc_r+0x24>
 8010120:	f7fd f9ae 	bl	800d480 <_free_r>
 8010124:	4625      	mov	r5, r4
 8010126:	4628      	mov	r0, r5
 8010128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801012c:	f000 f864 	bl	80101f8 <_malloc_usable_size_r>
 8010130:	4284      	cmp	r4, r0
 8010132:	4607      	mov	r7, r0
 8010134:	d802      	bhi.n	801013c <_realloc_r+0x34>
 8010136:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801013a:	d812      	bhi.n	8010162 <_realloc_r+0x5a>
 801013c:	4621      	mov	r1, r4
 801013e:	4640      	mov	r0, r8
 8010140:	f7fd fa0a 	bl	800d558 <_malloc_r>
 8010144:	4605      	mov	r5, r0
 8010146:	2800      	cmp	r0, #0
 8010148:	d0ed      	beq.n	8010126 <_realloc_r+0x1e>
 801014a:	42bc      	cmp	r4, r7
 801014c:	4622      	mov	r2, r4
 801014e:	4631      	mov	r1, r6
 8010150:	bf28      	it	cs
 8010152:	463a      	movcs	r2, r7
 8010154:	f7fd f97e 	bl	800d454 <memcpy>
 8010158:	4631      	mov	r1, r6
 801015a:	4640      	mov	r0, r8
 801015c:	f7fd f990 	bl	800d480 <_free_r>
 8010160:	e7e1      	b.n	8010126 <_realloc_r+0x1e>
 8010162:	4635      	mov	r5, r6
 8010164:	e7df      	b.n	8010126 <_realloc_r+0x1e>
	...

08010168 <_read_r>:
 8010168:	b538      	push	{r3, r4, r5, lr}
 801016a:	4d07      	ldr	r5, [pc, #28]	; (8010188 <_read_r+0x20>)
 801016c:	4604      	mov	r4, r0
 801016e:	4608      	mov	r0, r1
 8010170:	4611      	mov	r1, r2
 8010172:	2200      	movs	r2, #0
 8010174:	602a      	str	r2, [r5, #0]
 8010176:	461a      	mov	r2, r3
 8010178:	f000 f8ba 	bl	80102f0 <_read>
 801017c:	1c43      	adds	r3, r0, #1
 801017e:	d102      	bne.n	8010186 <_read_r+0x1e>
 8010180:	682b      	ldr	r3, [r5, #0]
 8010182:	b103      	cbz	r3, 8010186 <_read_r+0x1e>
 8010184:	6023      	str	r3, [r4, #0]
 8010186:	bd38      	pop	{r3, r4, r5, pc}
 8010188:	20008200 	.word	0x20008200

0801018c <__ascii_wctomb>:
 801018c:	b149      	cbz	r1, 80101a2 <__ascii_wctomb+0x16>
 801018e:	2aff      	cmp	r2, #255	; 0xff
 8010190:	bf85      	ittet	hi
 8010192:	238a      	movhi	r3, #138	; 0x8a
 8010194:	6003      	strhi	r3, [r0, #0]
 8010196:	700a      	strbls	r2, [r1, #0]
 8010198:	f04f 30ff 	movhi.w	r0, #4294967295
 801019c:	bf98      	it	ls
 801019e:	2001      	movls	r0, #1
 80101a0:	4770      	bx	lr
 80101a2:	4608      	mov	r0, r1
 80101a4:	4770      	bx	lr

080101a6 <abort>:
 80101a6:	b508      	push	{r3, lr}
 80101a8:	2006      	movs	r0, #6
 80101aa:	f000 f855 	bl	8010258 <raise>
 80101ae:	2001      	movs	r0, #1
 80101b0:	f000 f8b4 	bl	801031c <_exit>

080101b4 <_fstat_r>:
 80101b4:	b538      	push	{r3, r4, r5, lr}
 80101b6:	4d07      	ldr	r5, [pc, #28]	; (80101d4 <_fstat_r+0x20>)
 80101b8:	2300      	movs	r3, #0
 80101ba:	4604      	mov	r4, r0
 80101bc:	4608      	mov	r0, r1
 80101be:	4611      	mov	r1, r2
 80101c0:	602b      	str	r3, [r5, #0]
 80101c2:	f000 f86d 	bl	80102a0 <_fstat>
 80101c6:	1c43      	adds	r3, r0, #1
 80101c8:	d102      	bne.n	80101d0 <_fstat_r+0x1c>
 80101ca:	682b      	ldr	r3, [r5, #0]
 80101cc:	b103      	cbz	r3, 80101d0 <_fstat_r+0x1c>
 80101ce:	6023      	str	r3, [r4, #0]
 80101d0:	bd38      	pop	{r3, r4, r5, pc}
 80101d2:	bf00      	nop
 80101d4:	20008200 	.word	0x20008200

080101d8 <_isatty_r>:
 80101d8:	b538      	push	{r3, r4, r5, lr}
 80101da:	4d06      	ldr	r5, [pc, #24]	; (80101f4 <_isatty_r+0x1c>)
 80101dc:	2300      	movs	r3, #0
 80101de:	4604      	mov	r4, r0
 80101e0:	4608      	mov	r0, r1
 80101e2:	602b      	str	r3, [r5, #0]
 80101e4:	f000 f86c 	bl	80102c0 <_isatty>
 80101e8:	1c43      	adds	r3, r0, #1
 80101ea:	d102      	bne.n	80101f2 <_isatty_r+0x1a>
 80101ec:	682b      	ldr	r3, [r5, #0]
 80101ee:	b103      	cbz	r3, 80101f2 <_isatty_r+0x1a>
 80101f0:	6023      	str	r3, [r4, #0]
 80101f2:	bd38      	pop	{r3, r4, r5, pc}
 80101f4:	20008200 	.word	0x20008200

080101f8 <_malloc_usable_size_r>:
 80101f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101fc:	1f18      	subs	r0, r3, #4
 80101fe:	2b00      	cmp	r3, #0
 8010200:	bfbc      	itt	lt
 8010202:	580b      	ldrlt	r3, [r1, r0]
 8010204:	18c0      	addlt	r0, r0, r3
 8010206:	4770      	bx	lr

08010208 <_raise_r>:
 8010208:	291f      	cmp	r1, #31
 801020a:	b538      	push	{r3, r4, r5, lr}
 801020c:	4604      	mov	r4, r0
 801020e:	460d      	mov	r5, r1
 8010210:	d904      	bls.n	801021c <_raise_r+0x14>
 8010212:	2316      	movs	r3, #22
 8010214:	6003      	str	r3, [r0, #0]
 8010216:	f04f 30ff 	mov.w	r0, #4294967295
 801021a:	bd38      	pop	{r3, r4, r5, pc}
 801021c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801021e:	b112      	cbz	r2, 8010226 <_raise_r+0x1e>
 8010220:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010224:	b94b      	cbnz	r3, 801023a <_raise_r+0x32>
 8010226:	4620      	mov	r0, r4
 8010228:	f000 f830 	bl	801028c <_getpid_r>
 801022c:	462a      	mov	r2, r5
 801022e:	4601      	mov	r1, r0
 8010230:	4620      	mov	r0, r4
 8010232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010236:	f000 b817 	b.w	8010268 <_kill_r>
 801023a:	2b01      	cmp	r3, #1
 801023c:	d00a      	beq.n	8010254 <_raise_r+0x4c>
 801023e:	1c59      	adds	r1, r3, #1
 8010240:	d103      	bne.n	801024a <_raise_r+0x42>
 8010242:	2316      	movs	r3, #22
 8010244:	6003      	str	r3, [r0, #0]
 8010246:	2001      	movs	r0, #1
 8010248:	e7e7      	b.n	801021a <_raise_r+0x12>
 801024a:	2400      	movs	r4, #0
 801024c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010250:	4628      	mov	r0, r5
 8010252:	4798      	blx	r3
 8010254:	2000      	movs	r0, #0
 8010256:	e7e0      	b.n	801021a <_raise_r+0x12>

08010258 <raise>:
 8010258:	4b02      	ldr	r3, [pc, #8]	; (8010264 <raise+0xc>)
 801025a:	4601      	mov	r1, r0
 801025c:	6818      	ldr	r0, [r3, #0]
 801025e:	f7ff bfd3 	b.w	8010208 <_raise_r>
 8010262:	bf00      	nop
 8010264:	2000001c 	.word	0x2000001c

08010268 <_kill_r>:
 8010268:	b538      	push	{r3, r4, r5, lr}
 801026a:	4d07      	ldr	r5, [pc, #28]	; (8010288 <_kill_r+0x20>)
 801026c:	2300      	movs	r3, #0
 801026e:	4604      	mov	r4, r0
 8010270:	4608      	mov	r0, r1
 8010272:	4611      	mov	r1, r2
 8010274:	602b      	str	r3, [r5, #0]
 8010276:	f000 f82b 	bl	80102d0 <_kill>
 801027a:	1c43      	adds	r3, r0, #1
 801027c:	d102      	bne.n	8010284 <_kill_r+0x1c>
 801027e:	682b      	ldr	r3, [r5, #0]
 8010280:	b103      	cbz	r3, 8010284 <_kill_r+0x1c>
 8010282:	6023      	str	r3, [r4, #0]
 8010284:	bd38      	pop	{r3, r4, r5, pc}
 8010286:	bf00      	nop
 8010288:	20008200 	.word	0x20008200

0801028c <_getpid_r>:
 801028c:	f000 b810 	b.w	80102b0 <_getpid>

08010290 <_close>:
 8010290:	4b02      	ldr	r3, [pc, #8]	; (801029c <_close+0xc>)
 8010292:	2258      	movs	r2, #88	; 0x58
 8010294:	601a      	str	r2, [r3, #0]
 8010296:	f04f 30ff 	mov.w	r0, #4294967295
 801029a:	4770      	bx	lr
 801029c:	20008200 	.word	0x20008200

080102a0 <_fstat>:
 80102a0:	4b02      	ldr	r3, [pc, #8]	; (80102ac <_fstat+0xc>)
 80102a2:	2258      	movs	r2, #88	; 0x58
 80102a4:	601a      	str	r2, [r3, #0]
 80102a6:	f04f 30ff 	mov.w	r0, #4294967295
 80102aa:	4770      	bx	lr
 80102ac:	20008200 	.word	0x20008200

080102b0 <_getpid>:
 80102b0:	4b02      	ldr	r3, [pc, #8]	; (80102bc <_getpid+0xc>)
 80102b2:	2258      	movs	r2, #88	; 0x58
 80102b4:	601a      	str	r2, [r3, #0]
 80102b6:	f04f 30ff 	mov.w	r0, #4294967295
 80102ba:	4770      	bx	lr
 80102bc:	20008200 	.word	0x20008200

080102c0 <_isatty>:
 80102c0:	4b02      	ldr	r3, [pc, #8]	; (80102cc <_isatty+0xc>)
 80102c2:	2258      	movs	r2, #88	; 0x58
 80102c4:	601a      	str	r2, [r3, #0]
 80102c6:	2000      	movs	r0, #0
 80102c8:	4770      	bx	lr
 80102ca:	bf00      	nop
 80102cc:	20008200 	.word	0x20008200

080102d0 <_kill>:
 80102d0:	4b02      	ldr	r3, [pc, #8]	; (80102dc <_kill+0xc>)
 80102d2:	2258      	movs	r2, #88	; 0x58
 80102d4:	601a      	str	r2, [r3, #0]
 80102d6:	f04f 30ff 	mov.w	r0, #4294967295
 80102da:	4770      	bx	lr
 80102dc:	20008200 	.word	0x20008200

080102e0 <_lseek>:
 80102e0:	4b02      	ldr	r3, [pc, #8]	; (80102ec <_lseek+0xc>)
 80102e2:	2258      	movs	r2, #88	; 0x58
 80102e4:	601a      	str	r2, [r3, #0]
 80102e6:	f04f 30ff 	mov.w	r0, #4294967295
 80102ea:	4770      	bx	lr
 80102ec:	20008200 	.word	0x20008200

080102f0 <_read>:
 80102f0:	4b02      	ldr	r3, [pc, #8]	; (80102fc <_read+0xc>)
 80102f2:	2258      	movs	r2, #88	; 0x58
 80102f4:	601a      	str	r2, [r3, #0]
 80102f6:	f04f 30ff 	mov.w	r0, #4294967295
 80102fa:	4770      	bx	lr
 80102fc:	20008200 	.word	0x20008200

08010300 <_sbrk>:
 8010300:	4a04      	ldr	r2, [pc, #16]	; (8010314 <_sbrk+0x14>)
 8010302:	6811      	ldr	r1, [r2, #0]
 8010304:	4603      	mov	r3, r0
 8010306:	b909      	cbnz	r1, 801030c <_sbrk+0xc>
 8010308:	4903      	ldr	r1, [pc, #12]	; (8010318 <_sbrk+0x18>)
 801030a:	6011      	str	r1, [r2, #0]
 801030c:	6810      	ldr	r0, [r2, #0]
 801030e:	4403      	add	r3, r0
 8010310:	6013      	str	r3, [r2, #0]
 8010312:	4770      	bx	lr
 8010314:	20008204 	.word	0x20008204
 8010318:	20008208 	.word	0x20008208

0801031c <_exit>:
 801031c:	e7fe      	b.n	801031c <_exit>
	...

08010320 <_init>:
 8010320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010322:	bf00      	nop
 8010324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010326:	bc08      	pop	{r3}
 8010328:	469e      	mov	lr, r3
 801032a:	4770      	bx	lr

0801032c <_fini>:
 801032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801032e:	bf00      	nop
 8010330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010332:	bc08      	pop	{r3}
 8010334:	469e      	mov	lr, r3
 8010336:	4770      	bx	lr


OBC_SDK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010198  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa4  08010348  08010348  00020348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08010dec  08010dec  00020dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08010df0  08010df0  00020df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  20000000  08010df4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000301ec  2**0
                  CONTENTS
  7 .bss          0000801c  200001ec  200001ec  000301ec  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  20008208  20008208  000301ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023964  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000051c7  00000000  00000000  00053b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001de0  00000000  00000000  00058d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001b88  00000000  00000000  0005ab28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000b8d2  00000000  00000000  0005c6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a5f6  00000000  00000000  00067f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f5b4b  00000000  00000000  00092578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001880c3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008da8  00000000  00000000  00188114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000b4  00000000  00000000  00190ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001c7  00000000  00000000  00190f70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010330 	.word	0x08010330

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	08010330 	.word	0x08010330

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <Main_Task>:
bool LOW_POWER_MODE = 0;

/*
 * @brief Main Task/Thread
 */
void Main_Task(void const * argument){
 8000c68:	b5b0      	push	{r4, r5, r7, lr}
 8000c6a:	b092      	sub	sp, #72	; 0x48
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
    debug_printf("Starting Main function.\r\n");
 8000c70:	488d      	ldr	r0, [pc, #564]	; (8000ea8 <Main_Task+0x240>)
 8000c72:	f002 fe69 	bl	8003948 <debug_printf>

    debug_led_green(5,500);
 8000c76:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c7a:	2005      	movs	r0, #5
 8000c7c:	f002 feca 	bl	8003a14 <debug_led_green>
    //Initialize Mutexes with CMSIS RTOS
    // EPS I2C
    osMutexDef(EPS_I2C_Mutex);
 8000c80:	2300      	movs	r3, #0
 8000c82:	643b      	str	r3, [r7, #64]	; 0x40
    EPS_I2C_Mutex = osMutexCreate(osMutex(EPS_I2C_Mutex));
 8000c84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f009 fdfc 	bl	800a886 <osMutexCreate>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a86      	ldr	r2, [pc, #536]	; (8000eac <Main_Task+0x244>)
 8000c92:	6013      	str	r3, [r2, #0]

    // UART
    osMutexDef(UART_Mutex);
 8000c94:	2300      	movs	r3, #0
 8000c96:	63fb      	str	r3, [r7, #60]	; 0x3c
    UART_Mutex = osMutexCreate(osMutex(UART_Mutex));
 8000c98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f009 fdf2 	bl	800a886 <osMutexCreate>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	4a82      	ldr	r2, [pc, #520]	; (8000eb0 <Main_Task+0x248>)
 8000ca6:	6013      	str	r3, [r2, #0]

    // I2C Errors
    osMutexDef(Num_I2C_Errors_Mutex);
 8000ca8:	2300      	movs	r3, #0
 8000caa:	63bb      	str	r3, [r7, #56]	; 0x38
    Num_I2C_Errors_Mutex = osMutexCreate(osMutex(Num_I2C_Errors_Mutex));
 8000cac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f009 fde8 	bl	800a886 <osMutexCreate>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4a7e      	ldr	r2, [pc, #504]	; (8000eb4 <Main_Task+0x24c>)
 8000cba:	6013      	str	r3, [r2, #0]

    // Battery
    osMutexDef(Battery_Capacity_Mutex);
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
    Battery_Capacity_Mutex = osMutexCreate(osMutex(Battery_Capacity_Mutex));
 8000cc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f009 fdde 	bl	800a886 <osMutexCreate>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a7a      	ldr	r2, [pc, #488]	; (8000eb8 <Main_Task+0x250>)
 8000cce:	6013      	str	r3, [r2, #0]

    // ADCS
    osMutexDef(ADCS_Active_Mutex);
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
    ADCS_Active_Mutex = osMutexCreate(osMutex(ADCS_Active_Mutex));
 8000cd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f009 fdd4 	bl	800a886 <osMutexCreate>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	4a76      	ldr	r2, [pc, #472]	; (8000ebc <Main_Task+0x254>)
 8000ce2:	6013      	str	r3, [r2, #0]

    // Low Power
    osMutexDef(Low_Power_Mode_Mutex);
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Low_Power_Mode_Mutex = osMutexCreate(osMutex(Low_Power_Mode_Mutex));
 8000ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cec:	4618      	mov	r0, r3
 8000cee:	f009 fdca 	bl	800a886 <osMutexCreate>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4a72      	ldr	r2, [pc, #456]	; (8000ec0 <Main_Task+0x258>)
 8000cf6:	6013      	str	r3, [r2, #0]

    // UHF
    osMutexDef(UHF_UART_Mutex);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    UHF_UART_Mutex = osMutexCreate(osMutex(UHF_UART_Mutex));
 8000cfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d00:	4618      	mov	r0, r3
 8000d02:	f009 fdc0 	bl	800a886 <osMutexCreate>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a6e      	ldr	r2, [pc, #440]	; (8000ec4 <Main_Task+0x25c>)
 8000d0a:	6013      	str	r3, [r2, #0]

    // Power on UHF code goes here
    HAL_StatusTypeDef status2 = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    status2 = enable_UHF();
 8000d12:	f001 f935 	bl	8001f80 <enable_UHF>
 8000d16:	4603      	mov	r3, r0
 8000d18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    debug_printf("Commanding EPS to enable UHF");
 8000d1c:	486a      	ldr	r0, [pc, #424]	; (8000ec8 <Main_Task+0x260>)
 8000d1e:	f002 fe13 	bl	8003948 <debug_printf>
    if(status2 != HAL_OK){
 8000d22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <Main_Task+0xca>
        debug_printf("EPS UHF Enable Error");
 8000d2a:	4868      	ldr	r0, [pc, #416]	; (8000ecc <Main_Task+0x264>)
 8000d2c:	f002 fe0c 	bl	8003948 <debug_printf>
 8000d30:	e002      	b.n	8000d38 <Main_Task+0xd0>
    }else{
        debug_printf("Power to UHF Enabled");
 8000d32:	4867      	ldr	r0, [pc, #412]	; (8000ed0 <Main_Task+0x268>)
 8000d34:	f002 fe08 	bl	8003948 <debug_printf>
    }
    osDelay(2000); //Delay to allow the UHF to turn on properly (not the problem but probably good practice)
 8000d38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d3c:	f009 fd8f 	bl	800a85e <osDelay>

    // Turns on SDR/Payload
    debug_printf("Commanding EPS to enable payload");
 8000d40:	4864      	ldr	r0, [pc, #400]	; (8000ed4 <Main_Task+0x26c>)
 8000d42:	f002 fe01 	bl	8003948 <debug_printf>
    status2=enable_Payload();
 8000d46:	f001 f8f7 	bl	8001f38 <enable_Payload>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if(status2 != HAL_OK){
 8000d50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <Main_Task+0xf8>
        debug_printf("EPS Payload Enable Error");
 8000d58:	485f      	ldr	r0, [pc, #380]	; (8000ed8 <Main_Task+0x270>)
 8000d5a:	f002 fdf5 	bl	8003948 <debug_printf>
 8000d5e:	e002      	b.n	8000d66 <Main_Task+0xfe>
    }else{
        debug_printf("Power to Payload Enabled");
 8000d60:	485e      	ldr	r0, [pc, #376]	; (8000edc <Main_Task+0x274>)
 8000d62:	f002 fdf1 	bl	8003948 <debug_printf>
    }

    // Turns on Boost Board
    debug_printf("Commanding EPS to enable Boost Board");
 8000d66:	485e      	ldr	r0, [pc, #376]	; (8000ee0 <Main_Task+0x278>)
 8000d68:	f002 fdee 	bl	8003948 <debug_printf>
    enable_Boost_Board();
 8000d6c:	f001 f8d2 	bl	8001f14 <enable_Boost_Board>
    if(status2 != HAL_OK){
 8000d70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <Main_Task+0x118>
        debug_printf("EPS Boost Board Enable Error");
 8000d78:	485a      	ldr	r0, [pc, #360]	; (8000ee4 <Main_Task+0x27c>)
 8000d7a:	f002 fde5 	bl	8003948 <debug_printf>
 8000d7e:	e002      	b.n	8000d86 <Main_Task+0x11e>
    }else{
        debug_printf("Power to Boost Board Enabled");
 8000d80:	4859      	ldr	r0, [pc, #356]	; (8000ee8 <Main_Task+0x280>)
 8000d82:	f002 fde1 	bl	8003948 <debug_printf>
    // Magnetometer Deployment is done by the ADCS function

    // Antenna Deployment
    // TODO: Antenna Deployment Function Goes Here (DO NOT RUN WITH ACTUAL ANTENNA UNTIL FLIGHT, IT IS SINGLE USE)
    //DEPLOY_ANTENNA(30);
    debug_printf("Sending 0x1F to I2C slave address 0x33");
 8000d86:	4859      	ldr	r0, [pc, #356]	; (8000eec <Main_Task+0x284>)
 8000d88:	f002 fdde 	bl	8003948 <debug_printf>

    // Beacon Configuration
    debug_printf("Starting UHF Beacon Configuration");
 8000d8c:	4858      	ldr	r0, [pc, #352]	; (8000ef0 <Main_Task+0x288>)
 8000d8e:	f002 fddb 	bl	8003948 <debug_printf>
    uint8_t initial_beacon_text[] = "Hello I Am Space Core"; // Beacon Message
 8000d92:	4b58      	ldr	r3, [pc, #352]	; (8000ef4 <Main_Task+0x28c>)
 8000d94:	f107 0410 	add.w	r4, r7, #16
 8000d98:	461d      	mov	r5, r3
 8000d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000da2:	6020      	str	r0, [r4, #0]
 8000da4:	3404      	adds	r4, #4
 8000da6:	8021      	strh	r1, [r4, #0]

    // Beacon Period
    debug_printf("Commanding UHF to set beacon period.");
 8000da8:	4853      	ldr	r0, [pc, #332]	; (8000ef8 <Main_Task+0x290>)
 8000daa:	f002 fdcd 	bl	8003948 <debug_printf>
    status2 = SET_BEACON_PERIOD(3);
 8000dae:	2003      	movs	r0, #3
 8000db0:	f002 fb36 	bl	8003420 <SET_BEACON_PERIOD>
 8000db4:	4603      	mov	r3, r0
 8000db6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (status2 != HAL_OK){
 8000dba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <Main_Task+0x162>
        debug_printf("Beacon period set error");
 8000dc2:	484e      	ldr	r0, [pc, #312]	; (8000efc <Main_Task+0x294>)
 8000dc4:	f002 fdc0 	bl	8003948 <debug_printf>
 8000dc8:	e002      	b.n	8000dd0 <Main_Task+0x168>
    } else{
        debug_printf("Beacon period set successfully");
 8000dca:	484d      	ldr	r0, [pc, #308]	; (8000f00 <Main_Task+0x298>)
 8000dcc:	f002 fdbc 	bl	8003948 <debug_printf>
    }
    osDelay(500);
 8000dd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dd4:	f009 fd43 	bl	800a85e <osDelay>

    // Beacon Text
    debug_printf("Commanding UHF to set beacon text.");
 8000dd8:	484a      	ldr	r0, [pc, #296]	; (8000f04 <Main_Task+0x29c>)
 8000dda:	f002 fdb5 	bl	8003948 <debug_printf>
    status2 = SET_BEACON_TEXT(initial_beacon_text, 21);
 8000dde:	f107 0310 	add.w	r3, r7, #16
 8000de2:	2115      	movs	r1, #21
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 fb5f 	bl	80034a8 <SET_BEACON_TEXT>
 8000dea:	4603      	mov	r3, r0
 8000dec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if (status2 != HAL_OK) {
 8000df0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <Main_Task+0x198>
        debug_printf("Beacon text set error");
 8000df8:	4843      	ldr	r0, [pc, #268]	; (8000f08 <Main_Task+0x2a0>)
 8000dfa:	f002 fda5 	bl	8003948 <debug_printf>
 8000dfe:	e008      	b.n	8000e12 <Main_Task+0x1aa>
    } else{
        debug_printf("Beacon text successfully set to: ");
 8000e00:	4842      	ldr	r0, [pc, #264]	; (8000f0c <Main_Task+0x2a4>)
 8000e02:	f002 fda1 	bl	8003948 <debug_printf>
        debug_printf("%s", initial_beacon_text);
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4840      	ldr	r0, [pc, #256]	; (8000f10 <Main_Task+0x2a8>)
 8000e0e:	f002 fd9b 	bl	8003948 <debug_printf>
    }
    osDelay(1000);
 8000e12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e16:	f009 fd22 	bl	800a85e <osDelay>


    debug_printf("Commanding UHF to start beacon.");
 8000e1a:	483e      	ldr	r0, [pc, #248]	; (8000f14 <Main_Task+0x2ac>)
 8000e1c:	f002 fd94 	bl	8003948 <debug_printf>
    status2 = START_BEACON();
 8000e20:	f002 fa50 	bl	80032c4 <START_BEACON>
 8000e24:	4603      	mov	r3, r0
 8000e26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (status2 != HAL_OK) {
 8000e2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <Main_Task+0x1d2>
        debug_printf("Beacon start error");
 8000e32:	4839      	ldr	r0, [pc, #228]	; (8000f18 <Main_Task+0x2b0>)
 8000e34:	f002 fd88 	bl	8003948 <debug_printf>
 8000e38:	e002      	b.n	8000e40 <Main_Task+0x1d8>
    } else {
        debug_printf("Beacon successfully started");
 8000e3a:	4838      	ldr	r0, [pc, #224]	; (8000f1c <Main_Task+0x2b4>)
 8000e3c:	f002 fd84 	bl	8003948 <debug_printf>
    }
    osDelay(1000);
 8000e40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e44:	f009 fd0b 	bl	800a85e <osDelay>
    //status2 = END_BEACON();
    //debug_printf("Beacon should be off");
    //osDelay(1000);

    float temperaturevalue;
    debug_printf("Getting UHF temperature");
 8000e48:	4835      	ldr	r0, [pc, #212]	; (8000f20 <Main_Task+0x2b8>)
 8000e4a:	f002 fd7d 	bl	8003948 <debug_printf>
    GET_UHF_TEMP(&temperaturevalue);
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fbf8 	bl	8003648 <GET_UHF_TEMP>
    debug_printf("%lf",temperaturevalue);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fb84 	bl	8000568 <__aeabi_f2d>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	482f      	ldr	r0, [pc, #188]	; (8000f24 <Main_Task+0x2bc>)
 8000e66:	f002 fd6f 	bl	8003948 <debug_printf>
    // Enable Transparent Mode
    // TODO: Send command to UHF transceiver to enable transparent mode

    // Detumbling Sequence
    // TODO: Detumbling functions (ADCS) go here
    debug_printf("Beginning detumbling sequence");
 8000e6a:	482f      	ldr	r0, [pc, #188]	; (8000f28 <Main_Task+0x2c0>)
 8000e6c:	f002 fd6c 	bl	8003948 <debug_printf>
    * TODO: Create health checks:
    * EPS, ADCS, SDR, OBC, UHF transceiver
    */

    // Flashes the lights to let you know that the startup sequence completed, then starts other threads
    debug_led_green(10,50);
 8000e70:	2132      	movs	r1, #50	; 0x32
 8000e72:	200a      	movs	r0, #10
 8000e74:	f002 fdce 	bl	8003a14 <debug_led_green>
    debug_led_amber(10,50);
 8000e78:	2132      	movs	r1, #50	; 0x32
 8000e7a:	200a      	movs	r0, #10
 8000e7c:	f002 fdf4 	bl	8003a68 <debug_led_amber>

    while(1){
        GREEN_LED_ON();
 8000e80:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <Main_Task+0x2c4>)
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	4a29      	ldr	r2, [pc, #164]	; (8000f2c <Main_Task+0x2c4>)
 8000e86:	f043 0310 	orr.w	r3, r3, #16
 8000e8a:	6153      	str	r3, [r2, #20]
        osDelay(150);
 8000e8c:	2096      	movs	r0, #150	; 0x96
 8000e8e:	f009 fce6 	bl	800a85e <osDelay>
        GREEN_LED_OFF();
 8000e92:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <Main_Task+0x2c4>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	4a25      	ldr	r2, [pc, #148]	; (8000f2c <Main_Task+0x2c4>)
 8000e98:	f023 0310 	bic.w	r3, r3, #16
 8000e9c:	6153      	str	r3, [r2, #20]
        osDelay(150);
 8000e9e:	2096      	movs	r0, #150	; 0x96
 8000ea0:	f009 fcdd 	bl	800a85e <osDelay>
        GREEN_LED_ON();
 8000ea4:	e7ec      	b.n	8000e80 <Main_Task+0x218>
 8000ea6:	bf00      	nop
 8000ea8:	0801034c 	.word	0x0801034c
 8000eac:	20000228 	.word	0x20000228
 8000eb0:	2000022c 	.word	0x2000022c
 8000eb4:	20000230 	.word	0x20000230
 8000eb8:	20000234 	.word	0x20000234
 8000ebc:	20000238 	.word	0x20000238
 8000ec0:	2000023c 	.word	0x2000023c
 8000ec4:	20000240 	.word	0x20000240
 8000ec8:	08010368 	.word	0x08010368
 8000ecc:	08010388 	.word	0x08010388
 8000ed0:	080103a0 	.word	0x080103a0
 8000ed4:	080103b8 	.word	0x080103b8
 8000ed8:	080103dc 	.word	0x080103dc
 8000edc:	080103f8 	.word	0x080103f8
 8000ee0:	08010414 	.word	0x08010414
 8000ee4:	0801043c 	.word	0x0801043c
 8000ee8:	0801045c 	.word	0x0801045c
 8000eec:	0801047c 	.word	0x0801047c
 8000ef0:	080104a4 	.word	0x080104a4
 8000ef4:	08010618 	.word	0x08010618
 8000ef8:	080104c8 	.word	0x080104c8
 8000efc:	080104f0 	.word	0x080104f0
 8000f00:	08010508 	.word	0x08010508
 8000f04:	08010528 	.word	0x08010528
 8000f08:	0801054c 	.word	0x0801054c
 8000f0c:	08010564 	.word	0x08010564
 8000f10:	08010588 	.word	0x08010588
 8000f14:	0801058c 	.word	0x0801058c
 8000f18:	080105ac 	.word	0x080105ac
 8000f1c:	080105c0 	.word	0x080105c0
 8000f20:	080105dc 	.word	0x080105dc
 8000f24:	080105f4 	.word	0x080105f4
 8000f28:	080105f8 	.word	0x080105f8
 8000f2c:	40020800 	.word	0x40020800

08000f30 <UHF_Rx_Task>:
}

/*
 * @brief main UHF Task/Thread
 */
void UHF_Rx_Task(void const * argument){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    debug_printf("Starting UHF reception function.\r\n");
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <UHF_Rx_Task+0x18>)
 8000f3a:	f002 fd05 	bl	8003948 <debug_printf>

    //HAL_UART_Receive_IT(&huart6,GroundStationRxBuffer, 4); //These have been moved to main.c where they are declared and defined
    //HAL_UART_Receive_IT(&huart1,GroundStationRxBuffer, 4);

    while(1){
        osDelay(10000); //The actual handleCySatPacket stuff should run in the callback so we shouldn't need this thread at all
 8000f3e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f42:	f009 fc8c 	bl	800a85e <osDelay>
 8000f46:	e7fa      	b.n	8000f3e <UHF_Rx_Task+0xe>
 8000f48:	08010630 	.word	0x08010630

08000f4c <UHF_Tx_Task>:
}

/*
 * @brief main UHF Task/Thread
 */
void UHF_Tx_Task(void const * argument){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    debug_printf("Starting UHF function.\r\n");
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <UHF_Tx_Task+0x18>)
 8000f56:	f002 fcf7 	bl	8003948 <debug_printf>

    while(1){
        //AMBER_LED_ON();
        //HAL_UART_Transmit(&huart6, 1234567890123456789012345678901234567890, 40, 1000);
        //AMBER_LED_OFF();
        osDelay(5000);
 8000f5a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f5e:	f009 fc7e 	bl	800a85e <osDelay>
 8000f62:	e7fa      	b.n	8000f5a <UHF_Tx_Task+0xe>
 8000f64:	08010654 	.word	0x08010654

08000f68 <ADCS_Task>:


/*
 * @brief main ADCS Task/Thread
 */
void ADCS_Task(void const * argument){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
    osDelay(999999999999); //TODO: Remove, this is for testing
 8000f70:	481a      	ldr	r0, [pc, #104]	; (8000fdc <ADCS_Task+0x74>)
 8000f72:	f009 fc74 	bl	800a85e <osDelay>
    debug_printf("Starting ADCS function.\r\n");
 8000f76:	481a      	ldr	r0, [pc, #104]	; (8000fe0 <ADCS_Task+0x78>)
 8000f78:	f002 fce6 	bl	8003948 <debug_printf>

    HAL_StatusTypeDef status;
    //status = enable_EPS_Output_1(); //Enabling the boost board is done in the main task
    status = enable_EPS_5v_Bus();
 8000f7c:	f000 ff82 	bl	8001e84 <enable_EPS_5v_Bus>
 8000f80:	4603      	mov	r3, r0
 8000f82:	73fb      	strb	r3, [r7, #15]
    status = enable_EPS_LUP_3v();
 8000f84:	f000 ff90 	bl	8001ea8 <enable_EPS_LUP_3v>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
    status = enable_EPS_LUP_5v();
 8000f8c:	f000 ff95 	bl	8001eba <enable_EPS_LUP_5v>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
        debug_printf("Pitch did not stay constant!\r\n");
    else if(result == FAULT_Y_RATE)
        debug_printf("Did not go to 0 y-rate and then back up to Y-Thompson rate.\r\n");
        */ //Ask Lexi about this stuff

    osMutexWait(ADCS_Active_Mutex, 500);
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <ADCS_Task+0x7c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f009 fc7f 	bl	800a8a0 <osMutexWait>
    ADCS_ACTIVE = 1;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <ADCS_Task+0x80>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ADCS_Active_Mutex);
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <ADCS_Task+0x7c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f009 fcc7 	bl	800a940 <osMutexRelease>
    while(1){
        GREEN_LED_ON();
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <ADCS_Task+0x84>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <ADCS_Task+0x84>)
 8000fb8:	f043 0310 	orr.w	r3, r3, #16
 8000fbc:	6153      	str	r3, [r2, #20]
        osDelay(1000);
 8000fbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc2:	f009 fc4c 	bl	800a85e <osDelay>
        GREEN_LED_OFF();
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <ADCS_Task+0x84>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4a08      	ldr	r2, [pc, #32]	; (8000fec <ADCS_Task+0x84>)
 8000fcc:	f023 0310 	bic.w	r3, r3, #16
 8000fd0:	6153      	str	r3, [r2, #20]
        osDelay(1000);
 8000fd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd6:	f009 fc42 	bl	800a85e <osDelay>
        GREEN_LED_ON();
 8000fda:	e7ea      	b.n	8000fb2 <ADCS_Task+0x4a>
 8000fdc:	d4a50fff 	.word	0xd4a50fff
 8000fe0:	08010670 	.word	0x08010670
 8000fe4:	20000238 	.word	0x20000238
 8000fe8:	2000020c 	.word	0x2000020c
 8000fec:	40020800 	.word	0x40020800

08000ff0 <BatteryCapacity_Task>:
}

/*
 * @brief Task/Thread responsible for calculating battery capacity
 */
void BatteryCapacity_Task(void const * argument){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b092      	sub	sp, #72	; 0x48
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    osDelay(999999999999); //TODO: Remove, this is for testing
 8000ff8:	4881      	ldr	r0, [pc, #516]	; (8001200 <BatteryCapacity_Task+0x210>)
 8000ffa:	f009 fc30 	bl	800a85e <osDelay>
    debug_printf("Starting battery capacity function.\r\n");
 8000ffe:	4881      	ldr	r0, [pc, #516]	; (8001204 <BatteryCapacity_Task+0x214>)
 8001000:	f002 fca2 	bl	8003948 <debug_printf>
    float y_voltage, y_neg_current, y_pos_current;
    float z_voltage, z_neg_current, z_pos_current;
    float total_input_power;
    float total_output_power;

    uint32_t PreviousWakeTime = osKernelSysTick();
 8001004:	f009 fbf4 	bl	800a7f0 <osKernelSysTick>
 8001008:	4603      	mov	r3, r0
 800100a:	60fb      	str	r3, [r7, #12]

    while(1){

        READ_EPS_INPUT_CONDITION(&input_conditions);
 800100c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8001010:	4618      	mov	r0, r3
 8001012:	f000 fdb3 	bl	8001b7c <READ_EPS_INPUT_CONDITION>
        if((input_conditions & 0x20)==0x20){ // Charge Complete
 8001016:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001018:	f003 0320 	and.w	r3, r3, #32
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00f      	beq.n	8001040 <BatteryCapacity_Task+0x50>
            osMutexWait(Battery_Capacity_Mutex, 500);
 8001020:	4b79      	ldr	r3, [pc, #484]	; (8001208 <BatteryCapacity_Task+0x218>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001028:	4618      	mov	r0, r3
 800102a:	f009 fc39 	bl	800a8a0 <osMutexWait>
            BATTERY_CAPACITY = original_battery_capacity;
 800102e:	4a77      	ldr	r2, [pc, #476]	; (800120c <BatteryCapacity_Task+0x21c>)
 8001030:	4b77      	ldr	r3, [pc, #476]	; (8001210 <BatteryCapacity_Task+0x220>)
 8001032:	601a      	str	r2, [r3, #0]
            osMutexRelease(Battery_Capacity_Mutex);
 8001034:	4b74      	ldr	r3, [pc, #464]	; (8001208 <BatteryCapacity_Task+0x218>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f009 fc81 	bl	800a940 <osMutexRelease>
 800103e:	e033      	b.n	80010a8 <BatteryCapacity_Task+0xb8>
        }
        else{ // Not Fully Charged
            READ_EPS_5V_CURRENT(&Five_Bus_Current);
 8001040:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fc61 	bl	800190c <READ_EPS_5V_CURRENT>
            READ_EPS_3V_CURRENT(&Three_Bus_Current);
 800104a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fc2a 	bl	80018a8 <READ_EPS_3V_CURRENT>

            total_output_power = (5*Five_Bus_Current)+(3*Three_Bus_Current);
 8001054:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001058:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800105c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001060:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001064:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001068:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800106c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001070:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            osMutexWait(Battery_Capacity_Mutex, 500);
 8001074:	4b64      	ldr	r3, [pc, #400]	; (8001208 <BatteryCapacity_Task+0x218>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800107c:	4618      	mov	r0, r3
 800107e:	f009 fc0f 	bl	800a8a0 <osMutexWait>
            BATTERY_CAPACITY -= total_output_power/3600;
 8001082:	4b63      	ldr	r3, [pc, #396]	; (8001210 <BatteryCapacity_Task+0x220>)
 8001084:	ed93 7a00 	vldr	s14, [r3]
 8001088:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800108c:	ed9f 6a61 	vldr	s12, [pc, #388]	; 8001214 <BatteryCapacity_Task+0x224>
 8001090:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001098:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <BatteryCapacity_Task+0x220>)
 800109a:	edc3 7a00 	vstr	s15, [r3]
            osMutexRelease(Battery_Capacity_Mutex);
 800109e:	4b5a      	ldr	r3, [pc, #360]	; (8001208 <BatteryCapacity_Task+0x218>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f009 fc4c 	bl	800a940 <osMutexRelease>
        }

        if((input_conditions & 0x40)==0x40){ // Charge in Progress
 80010a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d072      	beq.n	8001198 <BatteryCapacity_Task+0x1a8>
            READ_EPS_SOLAR_X_VOLTAGE(&x_voltage);
 80010b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fa34 	bl	8001524 <READ_EPS_SOLAR_X_VOLTAGE>
            READ_EPS_SOLAR_X_NEG_CURRENT(&x_neg_current);
 80010bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fa61 	bl	8001588 <READ_EPS_SOLAR_X_NEG_CURRENT>
            READ_EPS_SOLAR_X_POS_CURRENT(&x_pos_current);
 80010c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fa8e 	bl	80015ec <READ_EPS_SOLAR_X_POS_CURRENT>

            READ_EPS_SOLAR_Y_VOLTAGE(&y_voltage);
 80010d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 fabb 	bl	8001650 <READ_EPS_SOLAR_Y_VOLTAGE>
            READ_EPS_SOLAR_Y_NEG_CURRENT(&y_neg_current);
 80010da:	f107 0320 	add.w	r3, r7, #32
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fae8 	bl	80016b4 <READ_EPS_SOLAR_Y_NEG_CURRENT>
            READ_EPS_SOLAR_Y_POS_CURRENT(&y_pos_current);
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fb15 	bl	8001718 <READ_EPS_SOLAR_Y_POS_CURRENT>

            READ_EPS_SOLAR_Z_VOLTAGE(&z_voltage);
 80010ee:	f107 0318 	add.w	r3, r7, #24
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fb42 	bl	800177c <READ_EPS_SOLAR_Z_VOLTAGE>
            READ_EPS_SOLAR_Z_NEG_CURRENT(&z_neg_current);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fb6f 	bl	80017e0 <READ_EPS_SOLAR_Z_NEG_CURRENT>
            READ_EPS_SOLAR_Z_POS_CURRENT(&z_pos_current);
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fb9c 	bl	8001844 <READ_EPS_SOLAR_Z_POS_CURRENT>

            total_input_power = (x_voltage*(x_neg_current+x_pos_current));
 800110c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001110:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001114:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001118:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800111c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001120:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            total_input_power += (y_voltage*(y_neg_current+y_pos_current));
 8001124:	ed97 7a08 	vldr	s14, [r7, #32]
 8001128:	edd7 7a07 	vldr	s15, [r7, #28]
 800112c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001130:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001138:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800113c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001140:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            total_input_power += (z_voltage*(z_neg_current+z_pos_current));
 8001144:	ed97 7a05 	vldr	s14, [r7, #20]
 8001148:	edd7 7a04 	vldr	s15, [r7, #16]
 800114c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001150:	edd7 7a06 	vldr	s15, [r7, #24]
 8001154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001158:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800115c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001160:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

            osMutexWait(Battery_Capacity_Mutex, 500);
 8001164:	4b28      	ldr	r3, [pc, #160]	; (8001208 <BatteryCapacity_Task+0x218>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800116c:	4618      	mov	r0, r3
 800116e:	f009 fb97 	bl	800a8a0 <osMutexWait>
            BATTERY_CAPACITY += total_input_power/3600;
 8001172:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001176:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001214 <BatteryCapacity_Task+0x224>
 800117a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <BatteryCapacity_Task+0x220>)
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <BatteryCapacity_Task+0x220>)
 800118a:	edc3 7a00 	vstr	s15, [r3]
            osMutexRelease(Battery_Capacity_Mutex);
 800118e:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <BatteryCapacity_Task+0x218>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f009 fbd4 	bl	800a940 <osMutexRelease>
        }
        osMutexWait(Battery_Capacity_Mutex, 500);
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <BatteryCapacity_Task+0x218>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011a0:	4618      	mov	r0, r3
 80011a2:	f009 fb7d 	bl	800a8a0 <osMutexWait>
        osMutexWait(Low_Power_Mode_Mutex, 500);
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <BatteryCapacity_Task+0x228>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011ae:	4618      	mov	r0, r3
 80011b0:	f009 fb76 	bl	800a8a0 <osMutexWait>
        if(BATTERY_CAPACITY < 3){
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <BatteryCapacity_Task+0x220>)
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80011be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c6:	d408      	bmi.n	80011da <BatteryCapacity_Task+0x1ea>
            //LOW_POWER_MODE = 1; //TODO: Uncomment this, I commented it for testing
        }
        else if((LOW_POWER_MODE==1)&(BATTERY_CAPACITY>8)){
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <BatteryCapacity_Task+0x220>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80011d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            //LOW_POWER_MODE = 0;
        }
        osMutexRelease(Low_Power_Mode_Mutex);
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <BatteryCapacity_Task+0x228>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f009 fbae 	bl	800a940 <osMutexRelease>
        osMutexRelease(Battery_Capacity_Mutex);
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <BatteryCapacity_Task+0x218>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f009 fba9 	bl	800a940 <osMutexRelease>

        osDelayUntil(&PreviousWakeTime, 1000); // Delay for 1 second
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011f6:	4618      	mov	r0, r3
 80011f8:	f009 fbe3 	bl	800a9c2 <osDelayUntil>
        READ_EPS_INPUT_CONDITION(&input_conditions);
 80011fc:	e706      	b.n	800100c <BatteryCapacity_Task+0x1c>
 80011fe:	bf00      	nop
 8001200:	d4a50fff 	.word	0xd4a50fff
 8001204:	0801068c 	.word	0x0801068c
 8001208:	20000234 	.word	0x20000234
 800120c:	418f102e 	.word	0x418f102e
 8001210:	20000000 	.word	0x20000000
 8001214:	45610000 	.word	0x45610000
 8001218:	2000023c 	.word	0x2000023c

0800121c <parseCySatPacket>:
/**
 * @brief Takes in an array containing the cysat packet in byte form and builds a struct from it
 * @param packet: the byte array containing the packet within, with the first byte being the start character
 * @retval The struct representing this CySat packet
 */
CySat_Packet_t parseCySatPacket(uint8_t* packet){
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
    CySat_Packet_t cySatPacket;
    cySatPacket.Subsystem_Type = packet[1];
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	785b      	ldrb	r3, [r3, #1]
 800122a:	733b      	strb	r3, [r7, #12]
    cySatPacket.Command = packet[2];
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	789b      	ldrb	r3, [r3, #2]
 8001230:	737b      	strb	r3, [r7, #13]
    cySatPacket.Data_Length = packet[3];
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	78db      	ldrb	r3, [r3, #3]
 8001236:	73bb      	strb	r3, [r7, #14]
    cySatPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * cySatPacket.Data_Length);
 8001238:	7bbb      	ldrb	r3, [r7, #14]
 800123a:	4618      	mov	r0, r3
 800123c:	f00c f902 	bl	800d444 <malloc>
 8001240:	4603      	mov	r3, r0
 8001242:	613b      	str	r3, [r7, #16]
    memcpy(cySatPacket.Data, packet+4, cySatPacket.Data_Length);
 8001244:	6938      	ldr	r0, [r7, #16]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	3304      	adds	r3, #4
 800124a:	7bba      	ldrb	r2, [r7, #14]
 800124c:	4619      	mov	r1, r3
 800124e:	f00c f909 	bl	800d464 <memcpy>
    cySatPacket.Checksum = packet[cySatPacket.Data_Length+4];
 8001252:	7bbb      	ldrb	r3, [r7, #14]
 8001254:	3304      	adds	r3, #4
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	753b      	strb	r3, [r7, #20]
    return cySatPacket;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	461c      	mov	r4, r3
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800126a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	371c      	adds	r7, #28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd90      	pop	{r4, r7, pc}
	...

08001278 <sendCySatPacket>:
 * @brief Takes in a packet and sends it to the Ground Station via UART serial connection
 * @param packet: A struct representing the CySat packet you wish to send
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
HAL_StatusTypeDef sendCySatPacket(CySat_Packet_t packet){
 8001278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800127c:	b089      	sub	sp, #36	; 0x24
 800127e:	af00      	add	r7, sp, #0
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001286:	466b      	mov	r3, sp
 8001288:	461e      	mov	r6, r3
    uint8_t message[packet.Data_Length + 5];
 800128a:	79bb      	ldrb	r3, [r7, #6]
 800128c:	1d59      	adds	r1, r3, #5
 800128e:	1e4b      	subs	r3, r1, #1
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	460a      	mov	r2, r1
 8001294:	2300      	movs	r3, #0
 8001296:	4690      	mov	r8, r2
 8001298:	4699      	mov	r9, r3
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012ae:	460a      	mov	r2, r1
 80012b0:	2300      	movs	r3, #0
 80012b2:	4614      	mov	r4, r2
 80012b4:	461d      	mov	r5, r3
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	00eb      	lsls	r3, r5, #3
 80012c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012c4:	00e2      	lsls	r2, r4, #3
 80012c6:	460b      	mov	r3, r1
 80012c8:	3307      	adds	r3, #7
 80012ca:	08db      	lsrs	r3, r3, #3
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	ebad 0d03 	sub.w	sp, sp, r3
 80012d2:	466b      	mov	r3, sp
 80012d4:	3300      	adds	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]

    //build byte array
    message[0] = 0xFF; //start byte
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	22ff      	movs	r2, #255	; 0xff
 80012dc:	701a      	strb	r2, [r3, #0]
    message[1] = packet.Subsystem_Type;
 80012de:	793a      	ldrb	r2, [r7, #4]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	705a      	strb	r2, [r3, #1]
    message[2] = packet.Command;
 80012e4:	797a      	ldrb	r2, [r7, #5]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	709a      	strb	r2, [r3, #2]
    message[3] = packet.Data_Length;
 80012ea:	79ba      	ldrb	r2, [r7, #6]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	70da      	strb	r2, [r3, #3]
    int i;
    for(i = 0; i < packet.Data_Length; i++){
 80012f0:	2300      	movs	r3, #0
 80012f2:	61bb      	str	r3, [r7, #24]
 80012f4:	e00a      	b.n	800130c <sendCySatPacket+0x94>
        message[i + 4] = packet.Data[i];
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	441a      	add	r2, r3
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	3304      	adds	r3, #4
 8001300:	7811      	ldrb	r1, [r2, #0]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < packet.Data_Length; i++){
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	3301      	adds	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	461a      	mov	r2, r3
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	4293      	cmp	r3, r2
 8001314:	dbef      	blt.n	80012f6 <sendCySatPacket+0x7e>
    }
    message[4 + packet.Data_Length] = packet.Checksum;
 8001316:	79bb      	ldrb	r3, [r7, #6]
 8001318:	3304      	adds	r3, #4
 800131a:	7b39      	ldrb	r1, [r7, #12]
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	54d1      	strb	r1, [r2, r3]

    HAL_StatusTypeDef status = HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	77fb      	strb	r3, [r7, #31]
    if(packet.Subsystem_Type == OBC_SUBSYSTEM_TYPE){
 8001324:	793b      	ldrb	r3, [r7, #4]
 8001326:	2b0a      	cmp	r3, #10
 8001328:	d10c      	bne.n	8001344 <sendCySatPacket+0xcc>
        status = HAL_UART_Transmit(&huart1, message, packet.Data_Length + 5, 1000); //send the message over uart, but timeout after 1s
 800132a:	79bb      	ldrb	r3, [r7, #6]
 800132c:	b29b      	uxth	r3, r3
 800132e:	3305      	adds	r3, #5
 8001330:	b29a      	uxth	r2, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	6939      	ldr	r1, [r7, #16]
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <sendCySatPacket+0xf8>)
 800133a:	f006 fe22 	bl	8007f82 <HAL_UART_Transmit>
 800133e:	4603      	mov	r3, r0
 8001340:	77fb      	strb	r3, [r7, #31]
 8001342:	e00e      	b.n	8001362 <sendCySatPacket+0xea>
    }
    else if(packet.Subsystem_Type == PAYLOAD_SUBSYSTEM_TYPE){
 8001344:	793b      	ldrb	r3, [r7, #4]
 8001346:	2b28      	cmp	r3, #40	; 0x28
 8001348:	d10b      	bne.n	8001362 <sendCySatPacket+0xea>
        status = HAL_UART_Transmit(&huart6, message, packet.Data_Length + 5, 1000); //send the message over uart, but timeout after 1s
 800134a:	79bb      	ldrb	r3, [r7, #6]
 800134c:	b29b      	uxth	r3, r3
 800134e:	3305      	adds	r3, #5
 8001350:	b29a      	uxth	r2, r3
 8001352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001356:	6939      	ldr	r1, [r7, #16]
 8001358:	4806      	ldr	r0, [pc, #24]	; (8001374 <sendCySatPacket+0xfc>)
 800135a:	f006 fe12 	bl	8007f82 <HAL_UART_Transmit>
 800135e:	4603      	mov	r3, r0
 8001360:	77fb      	strb	r3, [r7, #31]
    }
    return status;
 8001362:	7ffb      	ldrb	r3, [r7, #31]
 8001364:	46b5      	mov	sp, r6
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001370:	200006bc 	.word	0x200006bc
 8001374:	200006fc 	.word	0x200006fc

08001378 <generateCySatChecksum>:
/**
  * @brief Gives you the checksum byte value for a submitted packet
  * @param packet: The packet for which you want to generate a packet
  * @retval The 1 byte packet checksum that has been generated
  */
uint8_t generateCySatChecksum(CySat_Packet_t packet){
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]

    //add components of the packet together (NOT including the checksum)
    sum += packet.Subsystem_Type;
 8001388:	793b      	ldrb	r3, [r7, #4]
 800138a:	461a      	mov	r2, r3
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	4413      	add	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
    sum += packet.Command;
 8001392:	797b      	ldrb	r3, [r7, #5]
 8001394:	461a      	mov	r2, r3
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	4413      	add	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
    sum += packet.Data_Length;
 800139c:	79bb      	ldrb	r3, [r7, #6]
 800139e:	461a      	mov	r2, r3
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	4413      	add	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	e00a      	b.n	80013c2 <generateCySatChecksum+0x4a>
        sum += packet.Data[i];
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	4413      	add	r3, r2
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4413      	add	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	3301      	adds	r3, #1
 80013c0:	61fb      	str	r3, [r7, #28]
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	461a      	mov	r2, r3
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	4293      	cmp	r3, r2
 80013ca:	dbef      	blt.n	80013ac <generateCySatChecksum+0x34>
    }

    //take the lowest 8 bits
    uint8_t byte = (uint8_t) sum & 0xFF;
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	75fb      	strb	r3, [r7, #23]

    //subtract from 0xFF
    return 0xFF - byte;
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	b2db      	uxtb	r3, r3
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <validateCySatChecksum>:
/**
  * @brief Returns if the checksum of a given packet is correct or not
  * @param packet: The packet you have just received and want to check
  * @retval 1 if the checksum is correct for the data in the packet, otherwise it returns a 0
  */
uint8_t validateCySatChecksum(CySat_Packet_t packet){
 80013e2:	b480      	push	{r7}
 80013e4:	b087      	sub	sp, #28
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]

    //add components of the packet together (INCLUDING the checksum)
    sum += packet.Subsystem_Type;
 80013f2:	793b      	ldrb	r3, [r7, #4]
 80013f4:	461a      	mov	r2, r3
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4413      	add	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
    sum += packet.Command;
 80013fc:	797b      	ldrb	r3, [r7, #5]
 80013fe:	461a      	mov	r2, r3
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4413      	add	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
    sum += packet.Data_Length;
 8001406:	79bb      	ldrb	r3, [r7, #6]
 8001408:	461a      	mov	r2, r3
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4413      	add	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	e00a      	b.n	800142c <validateCySatChecksum+0x4a>
        sum += packet.Data[i];
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	4413      	add	r3, r2
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4413      	add	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	461a      	mov	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	4293      	cmp	r3, r2
 8001434:	dbef      	blt.n	8001416 <validateCySatChecksum+0x34>
    }
    sum += packet.Checksum;
 8001436:	7b3b      	ldrb	r3, [r7, #12]
 8001438:	461a      	mov	r2, r3
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4413      	add	r3, r2
 800143e:	613b      	str	r3, [r7, #16]

    //if the last 8 bits equal 0xFF, it is correct
    if((sum & 0xFF) == 0xFF){
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2bff      	cmp	r3, #255	; 0xff
 8001446:	d101      	bne.n	800144c <validateCySatChecksum+0x6a>
        return 1;
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <validateCySatChecksum+0x6c>
    }
    else{
        return 0;
 800144c:	2300      	movs	r3, #0
    }
}
 800144e:	4618      	mov	r0, r3
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <READ_EPS_BATTERY_VOLTAGE>:
/**
  * @brief Reads the voltage level of the EPS battery voltage bus and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_VOLTAGE(float* volt_ptr){
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001464:	2301      	movs	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 1; //battery voltage command
 8001468:	2301      	movs	r3, #1
 800146a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800146c:	f107 0208 	add.w	r2, r7, #8
 8001470:	7bbb      	ldrb	r3, [r7, #14]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fddd 	bl	8002034 <EPS_READ>
 800147a:	4603      	mov	r3, r0
 800147c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <READ_EPS_BATTERY_VOLTAGE+0x2c>
        return status;
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	e014      	b.n	80014b2 <READ_EPS_BATTERY_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001488:	7a3b      	ldrb	r3, [r7, #8]
 800148a:	b29b      	uxth	r3, r3
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	b29a      	uxth	r2, r3
 8001490:	7a7b      	ldrb	r3, [r7, #9]
 8001492:	b29b      	uxth	r3, r3
 8001494:	4413      	add	r3, r2
 8001496:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0023394775f * (float) raw_voltage; //multiply by the conversion coeff
 8001498:	89bb      	ldrh	r3, [r7, #12]
 800149a:	ee07 3a90 	vmov	s15, r3
 800149e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80014bc <READ_EPS_BATTERY_VOLTAGE+0x60>
 80014a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0023394775 * 4095 = 9.58 V
    return status;
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	3b1951eb 	.word	0x3b1951eb

080014c0 <READ_EPS_BATTERY_CURRENT>:
/**
  * @brief Reads the current level of the EPS battery bus and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_CURRENT(float* curr_ptr){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 2; //battery current command
 80014cc:	2302      	movs	r3, #2
 80014ce:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80014d0:	f107 0208 	add.w	r2, r7, #8
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fdab 	bl	8002034 <EPS_READ>
 80014de:	4603      	mov	r3, r0
 80014e0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <READ_EPS_BATTERY_CURRENT+0x2c>
        return status;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	e014      	b.n	8001516 <READ_EPS_BATTERY_CURRENT+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80014ec:	7a3b      	ldrb	r3, [r7, #8]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	7a7b      	ldrb	r3, [r7, #9]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	4413      	add	r3, r2
 80014fa:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0030517578f * (float) raw_value; //multiply by the conversion coeff
 80014fc:	89bb      	ldrh	r3, [r7, #12]
 80014fe:	ee07 3a90 	vmov	s15, r3
 8001502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001506:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001520 <READ_EPS_BATTERY_CURRENT+0x60>
 800150a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0030517578f * 4095 = 12.497 A
    return status;
 8001514:	7bfb      	ldrb	r3, [r7, #15]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	3b480000 	.word	0x3b480000

08001524 <READ_EPS_SOLAR_X_VOLTAGE>:
/**
  * @brief Reads the voltage of the X-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_VOLTAGE(float* volt_ptr){
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 5; //solar panel x-axis voltage command
 8001530:	2305      	movs	r3, #5
 8001532:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001534:	f107 0208 	add.w	r2, r7, #8
 8001538:	7bbb      	ldrb	r3, [r7, #14]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f000 fd79 	bl	8002034 <EPS_READ>
 8001542:	4603      	mov	r3, r0
 8001544:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <READ_EPS_SOLAR_X_VOLTAGE+0x2c>
        return status;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	e014      	b.n	800157a <READ_EPS_SOLAR_X_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001550:	7a3b      	ldrb	r3, [r7, #8]
 8001552:	b29b      	uxth	r3, r3
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b29a      	uxth	r2, r3
 8001558:	7a7b      	ldrb	r3, [r7, #9]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 8001560:	89bb      	ldrh	r3, [r7, #12]
 8001562:	ee07 3a90 	vmov	s15, r3
 8001566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800156a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001584 <READ_EPS_SOLAR_X_VOLTAGE+0x60>
 800156e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	3b200000 	.word	0x3b200000

08001588 <READ_EPS_SOLAR_X_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the X- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_NEG_CURRENT(float* curr_ptr){
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 6; //solar panel x- current command
 8001594:	2306      	movs	r3, #6
 8001596:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001598:	f107 0208 	add.w	r2, r7, #8
 800159c:	7bbb      	ldrb	r3, [r7, #14]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fd47 	bl	8002034 <EPS_READ>
 80015a6:	4603      	mov	r3, r0
 80015a8:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <READ_EPS_SOLAR_X_NEG_CURRENT+0x2c>
        return status;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	e014      	b.n	80015de <READ_EPS_SOLAR_X_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80015b4:	7a3b      	ldrb	r3, [r7, #8]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	7a7b      	ldrb	r3, [r7, #9]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	4413      	add	r3, r2
 80015c2:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 80015c4:	89bb      	ldrh	r3, [r7, #12]
 80015c6:	ee07 3a90 	vmov	s15, r3
 80015ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80015e8 <READ_EPS_SOLAR_X_NEG_CURRENT+0x60>
 80015d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	3a200001 	.word	0x3a200001

080015ec <READ_EPS_SOLAR_X_POS_CURRENT>:
/**
  * @brief Reads the voltage of the X+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_POS_CURRENT(float* curr_ptr){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 7; //solar panel x+ current command
 80015f8:	2307      	movs	r3, #7
 80015fa:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80015fc:	f107 0208 	add.w	r2, r7, #8
 8001600:	7bbb      	ldrb	r3, [r7, #14]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f000 fd15 	bl	8002034 <EPS_READ>
 800160a:	4603      	mov	r3, r0
 800160c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <READ_EPS_SOLAR_X_POS_CURRENT+0x2c>
        return status;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	e014      	b.n	8001642 <READ_EPS_SOLAR_X_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001618:	7a3b      	ldrb	r3, [r7, #8]
 800161a:	b29b      	uxth	r3, r3
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	b29a      	uxth	r2, r3
 8001620:	7a7b      	ldrb	r3, [r7, #9]
 8001622:	b29b      	uxth	r3, r3
 8001624:	4413      	add	r3, r2
 8001626:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001628:	89bb      	ldrh	r3, [r7, #12]
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001632:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800164c <READ_EPS_SOLAR_X_POS_CURRENT+0x60>
 8001636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	3a200001 	.word	0x3a200001

08001650 <READ_EPS_SOLAR_Y_VOLTAGE>:
/**
  * @brief Reads the voltage of the Y-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_VOLTAGE(float* volt_ptr){
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001658:	2301      	movs	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 8; //solar panel y-axis voltage command
 800165c:	2308      	movs	r3, #8
 800165e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001660:	f107 0208 	add.w	r2, r7, #8
 8001664:	7bbb      	ldrb	r3, [r7, #14]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fce3 	bl	8002034 <EPS_READ>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <READ_EPS_SOLAR_Y_VOLTAGE+0x2c>
        return status;
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	e014      	b.n	80016a6 <READ_EPS_SOLAR_Y_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800167c:	7a3b      	ldrb	r3, [r7, #8]
 800167e:	b29b      	uxth	r3, r3
 8001680:	021b      	lsls	r3, r3, #8
 8001682:	b29a      	uxth	r2, r3
 8001684:	7a7b      	ldrb	r3, [r7, #9]
 8001686:	b29b      	uxth	r3, r3
 8001688:	4413      	add	r3, r2
 800168a:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 800168c:	89bb      	ldrh	r3, [r7, #12]
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001696:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80016b0 <READ_EPS_SOLAR_Y_VOLTAGE+0x60>
 800169a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	3b200000 	.word	0x3b200000

080016b4 <READ_EPS_SOLAR_Y_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the Y- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_NEG_CURRENT(float* curr_ptr){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 9; //solar panel y- current command
 80016c0:	2309      	movs	r3, #9
 80016c2:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80016c4:	f107 0208 	add.w	r2, r7, #8
 80016c8:	7bbb      	ldrb	r3, [r7, #14]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 fcb1 	bl	8002034 <EPS_READ>
 80016d2:	4603      	mov	r3, r0
 80016d4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <READ_EPS_SOLAR_Y_NEG_CURRENT+0x2c>
        return status;
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	e014      	b.n	800170a <READ_EPS_SOLAR_Y_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80016e0:	7a3b      	ldrb	r3, [r7, #8]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	7a7b      	ldrb	r3, [r7, #9]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	4413      	add	r3, r2
 80016ee:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 80016f0:	89bb      	ldrh	r3, [r7, #12]
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016fa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001714 <READ_EPS_SOLAR_Y_NEG_CURRENT+0x60>
 80016fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	3a200001 	.word	0x3a200001

08001718 <READ_EPS_SOLAR_Y_POS_CURRENT>:
/**
  * @brief Reads the voltage of the Y+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_POS_CURRENT(float* curr_ptr){
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 10; //solar panel y+ current command
 8001724:	230a      	movs	r3, #10
 8001726:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001728:	f107 0208 	add.w	r2, r7, #8
 800172c:	7bbb      	ldrb	r3, [r7, #14]
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f000 fc7f 	bl	8002034 <EPS_READ>
 8001736:	4603      	mov	r3, r0
 8001738:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <READ_EPS_SOLAR_Y_POS_CURRENT+0x2c>
        return status;
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	e014      	b.n	800176e <READ_EPS_SOLAR_Y_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001744:	7a3b      	ldrb	r3, [r7, #8]
 8001746:	b29b      	uxth	r3, r3
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	b29a      	uxth	r2, r3
 800174c:	7a7b      	ldrb	r3, [r7, #9]
 800174e:	b29b      	uxth	r3, r3
 8001750:	4413      	add	r3, r2
 8001752:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001754:	89bb      	ldrh	r3, [r7, #12]
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800175e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001778 <READ_EPS_SOLAR_Y_POS_CURRENT+0x60>
 8001762:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	edc3 7a00 	vstr	s15, [r3]
    return status;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	3a200001 	.word	0x3a200001

0800177c <READ_EPS_SOLAR_Z_VOLTAGE>:
/**
  * @brief Reads the voltage of the Y-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_VOLTAGE(float* volt_ptr){
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 11; //solar panel z-axis voltage command
 8001788:	230b      	movs	r3, #11
 800178a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800178c:	f107 0208 	add.w	r2, r7, #8
 8001790:	7bbb      	ldrb	r3, [r7, #14]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f000 fc4d 	bl	8002034 <EPS_READ>
 800179a:	4603      	mov	r3, r0
 800179c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <READ_EPS_SOLAR_Z_VOLTAGE+0x2c>
        return status;
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	e014      	b.n	80017d2 <READ_EPS_SOLAR_Z_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80017a8:	7a3b      	ldrb	r3, [r7, #8]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	021b      	lsls	r3, r3, #8
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	7a7b      	ldrb	r3, [r7, #9]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 80017b8:	89bb      	ldrh	r3, [r7, #12]
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017c2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80017dc <READ_EPS_SOLAR_Z_VOLTAGE+0x60>
 80017c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	3b200000 	.word	0x3b200000

080017e0 <READ_EPS_SOLAR_Z_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the Z- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_NEG_CURRENT(float* curr_ptr){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 12; //solar panel z- current command
 80017ec:	230c      	movs	r3, #12
 80017ee:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80017f0:	f107 0208 	add.w	r2, r7, #8
 80017f4:	7bbb      	ldrb	r3, [r7, #14]
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 fc1b 	bl	8002034 <EPS_READ>
 80017fe:	4603      	mov	r3, r0
 8001800:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <READ_EPS_SOLAR_Z_NEG_CURRENT+0x2c>
        return status;
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	e014      	b.n	8001836 <READ_EPS_SOLAR_Z_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800180c:	7a3b      	ldrb	r3, [r7, #8]
 800180e:	b29b      	uxth	r3, r3
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	b29a      	uxth	r2, r3
 8001814:	7a7b      	ldrb	r3, [r7, #9]
 8001816:	b29b      	uxth	r3, r3
 8001818:	4413      	add	r3, r2
 800181a:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 800181c:	89bb      	ldrh	r3, [r7, #12]
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001826:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001840 <READ_EPS_SOLAR_Z_NEG_CURRENT+0x60>
 800182a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001834:	7bfb      	ldrb	r3, [r7, #15]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	3a200001 	.word	0x3a200001

08001844 <READ_EPS_SOLAR_Z_POS_CURRENT>:
/**
  * @brief Reads the voltage of the Z+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_POS_CURRENT(float* curr_ptr){
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 13; //solar panel z+ current command
 8001850:	230d      	movs	r3, #13
 8001852:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001854:	f107 0208 	add.w	r2, r7, #8
 8001858:	7bbb      	ldrb	r3, [r7, #14]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fbe9 	bl	8002034 <EPS_READ>
 8001862:	4603      	mov	r3, r0
 8001864:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <READ_EPS_SOLAR_Z_POS_CURRENT+0x2c>
        return status;
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	e014      	b.n	800189a <READ_EPS_SOLAR_Z_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001870:	7a3b      	ldrb	r3, [r7, #8]
 8001872:	b29b      	uxth	r3, r3
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	b29a      	uxth	r2, r3
 8001878:	7a7b      	ldrb	r3, [r7, #9]
 800187a:	b29b      	uxth	r3, r3
 800187c:	4413      	add	r3, r2
 800187e:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001880:	89bb      	ldrh	r3, [r7, #12]
 8001882:	ee07 3a90 	vmov	s15, r3
 8001886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800188a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80018a4 <READ_EPS_SOLAR_Z_POS_CURRENT+0x60>
 800188e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	3a200001 	.word	0x3a200001

080018a8 <READ_EPS_3V_CURRENT>:
/**
  * @brief Reads the current of the EPS 3.3v bus in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_3V_CURRENT(float* curr_ptr){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80018b0:	2301      	movs	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 14; //3.3v bus current command
 80018b4:	230e      	movs	r3, #14
 80018b6:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80018b8:	f107 0208 	add.w	r2, r7, #8
 80018bc:	7bbb      	ldrb	r3, [r7, #14]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fbb7 	bl	8002034 <EPS_READ>
 80018c6:	4603      	mov	r3, r0
 80018c8:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <READ_EPS_3V_CURRENT+0x2c>
        return status;
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	e014      	b.n	80018fe <READ_EPS_3V_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80018d4:	7a3b      	ldrb	r3, [r7, #8]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	b29a      	uxth	r2, r3
 80018dc:	7a7b      	ldrb	r3, [r7, #9]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0020345052f * (float) raw_current; //multiply by the conversion coeff
 80018e4:	89bb      	ldrh	r3, [r7, #12]
 80018e6:	ee07 3a90 	vmov	s15, r3
 80018ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ee:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001908 <READ_EPS_3V_CURRENT+0x60>
 80018f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	3b055555 	.word	0x3b055555

0800190c <READ_EPS_5V_CURRENT>:
/**
  * @brief Reads the current of the EPS 5v bus in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_5V_CURRENT(float* curr_ptr){
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 15; //5v bus current command
 8001918:	230f      	movs	r3, #15
 800191a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800191c:	f107 0208 	add.w	r2, r7, #8
 8001920:	7bbb      	ldrb	r3, [r7, #14]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fb85 	bl	8002034 <EPS_READ>
 800192a:	4603      	mov	r3, r0
 800192c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <READ_EPS_5V_CURRENT+0x2c>
        return status;
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	e014      	b.n	8001962 <READ_EPS_5V_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001938:	7a3b      	ldrb	r3, [r7, #8]
 800193a:	b29b      	uxth	r3, r3
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	b29a      	uxth	r2, r3
 8001940:	7a7b      	ldrb	r3, [r7, #9]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4413      	add	r3, r2
 8001946:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0020345052f * (float) raw_current; //multiply by the conversion coeff
 8001948:	89bb      	ldrh	r3, [r7, #12]
 800194a:	ee07 3a90 	vmov	s15, r3
 800194e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001952:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800196c <READ_EPS_5V_CURRENT+0x60>
 8001956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001960:	7bfb      	ldrb	r3, [r7, #15]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	3b055555 	.word	0x3b055555

08001970 <READ_EPS_MCU_TEMP>:
/**
  * @brief Reads the temperature of the EPS microcontroller in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_MCU_TEMP(float* temp_ptr){
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001978:	2301      	movs	r3, #1
 800197a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 18; //MCU temperature command
 800197c:	2312      	movs	r3, #18
 800197e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001980:	f107 0208 	add.w	r2, r7, #8
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fb53 	bl	8002034 <EPS_READ>
 800198e:	4603      	mov	r3, r0
 8001990:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <READ_EPS_MCU_TEMP+0x2c>
        return status;
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	e01c      	b.n	80019d6 <READ_EPS_MCU_TEMP+0x66>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800199c:	7a3b      	ldrb	r3, [r7, #8]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	7a7b      	ldrb	r3, [r7, #9]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = (((float) raw_value * 0.0006103516f) - 0.986f) / 0.00355f;
 80019ac:	89bb      	ldrh	r3, [r7, #12]
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019b6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80019e0 <READ_EPS_MCU_TEMP+0x70>
 80019ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019be:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80019e4 <READ_EPS_MCU_TEMP+0x74>
 80019c2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019c6:	eddf 6a08 	vldr	s13, [pc, #32]	; 80019e8 <READ_EPS_MCU_TEMP+0x78>
 80019ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	3a200001 	.word	0x3a200001
 80019e4:	3f7c6a7f 	.word	0x3f7c6a7f
 80019e8:	3b68a71e 	.word	0x3b68a71e

080019ec <READ_EPS_BATT_1_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 1 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_1_TEMP(float* temp_ptr){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80019f4:	2301      	movs	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 19; //battery cell 1 temperature command
 80019f8:	2313      	movs	r3, #19
 80019fa:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80019fc:	f107 0208 	add.w	r2, r7, #8
 8001a00:	7bbb      	ldrb	r3, [r7, #14]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fb15 	bl	8002034 <EPS_READ>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <READ_EPS_BATT_1_TEMP+0x2c>
        return status;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	e014      	b.n	8001a42 <READ_EPS_BATT_1_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001a18:	7a3b      	ldrb	r3, [r7, #8]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	7a7b      	ldrb	r3, [r7, #9]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8001a28:	89bb      	ldrh	r3, [r7, #12]
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a32:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001a4c <READ_EPS_BATT_1_TEMP+0x60>
 8001a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	3b800000 	.word	0x3b800000

08001a50 <READ_EPS_BATT_2_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 2 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_2_TEMP(float* temp_ptr){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 20; //battery cell 2 temperature command
 8001a5c:	2314      	movs	r3, #20
 8001a5e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001a60:	f107 0208 	add.w	r2, r7, #8
 8001a64:	7bbb      	ldrb	r3, [r7, #14]
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fae3 	bl	8002034 <EPS_READ>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <READ_EPS_BATT_2_TEMP+0x2c>
        return status;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	e014      	b.n	8001aa6 <READ_EPS_BATT_2_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001a7c:	7a3b      	ldrb	r3, [r7, #8]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	7a7b      	ldrb	r3, [r7, #9]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	4413      	add	r3, r2
 8001a8a:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8001a8c:	89bb      	ldrh	r3, [r7, #12]
 8001a8e:	ee07 3a90 	vmov	s15, r3
 8001a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a96:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001ab0 <READ_EPS_BATT_2_TEMP+0x60>
 8001a9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	3b800000 	.word	0x3b800000

08001ab4 <READ_EPS_BATT_3_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 3 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_3_TEMP(float* temp_ptr){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001abc:	2301      	movs	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 21; //battery cell 3 temperature command
 8001ac0:	2315      	movs	r3, #21
 8001ac2:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001ac4:	f107 0208 	add.w	r2, r7, #8
 8001ac8:	7bbb      	ldrb	r3, [r7, #14]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 fab1 	bl	8002034 <EPS_READ>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <READ_EPS_BATT_3_TEMP+0x2c>
        return status;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	e014      	b.n	8001b0a <READ_EPS_BATT_3_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001ae0:	7a3b      	ldrb	r3, [r7, #8]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	7a7b      	ldrb	r3, [r7, #9]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8001af0:	89bb      	ldrh	r3, [r7, #12]
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001afa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001b14 <READ_EPS_BATT_3_TEMP+0x60>
 8001afe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	3b800000 	.word	0x3b800000

08001b18 <READ_EPS_BATT_4_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 4 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_4_TEMP(float* temp_ptr){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 22; //battery cell 4 temperature command
 8001b24:	2316      	movs	r3, #22
 8001b26:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001b28:	f107 0208 	add.w	r2, r7, #8
 8001b2c:	7bbb      	ldrb	r3, [r7, #14]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fa7f 	bl	8002034 <EPS_READ>
 8001b36:	4603      	mov	r3, r0
 8001b38:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <READ_EPS_BATT_4_TEMP+0x2c>
        return status;
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	e014      	b.n	8001b6e <READ_EPS_BATT_4_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001b44:	7a3b      	ldrb	r3, [r7, #8]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	7a7b      	ldrb	r3, [r7, #9]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8001b54:	89bb      	ldrh	r3, [r7, #12]
 8001b56:	ee07 3a90 	vmov	s15, r3
 8001b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b5e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001b78 <READ_EPS_BATT_4_TEMP+0x60>
 8001b62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	3b800000 	.word	0x3b800000

08001b7c <READ_EPS_INPUT_CONDITION>:
/**
  * @brief Reads raw return value of the Input Condition command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_INPUT_CONDITION(uint16_t *cond_ptr){
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 23; //input conditions command
 8001b88:	2317      	movs	r3, #23
 8001b8a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001b8c:	f107 020c 	add.w	r2, r7, #12
 8001b90:	7bbb      	ldrb	r3, [r7, #14]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 fa4d 	bl	8002034 <EPS_READ>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <READ_EPS_INPUT_CONDITION+0x2c>
        return status;
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	e00a      	b.n	8001bbe <READ_EPS_INPUT_CONDITION+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001ba8:	7b3b      	ldrb	r3, [r7, #12]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	7b7b      	ldrb	r3, [r7, #13]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	801a      	strh	r2, [r3, #0]
    return status;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <READ_EPS_OUTPUT_CONDITION1>:
/**
  * @brief Reads raw return value of the Output Condition 1 command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OUTPUT_CONDITION1(uint16_t *cond_ptr){
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 24; //output conditions command
 8001bd2:	2318      	movs	r3, #24
 8001bd4:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001bd6:	f107 020c 	add.w	r2, r7, #12
 8001bda:	7bbb      	ldrb	r3, [r7, #14]
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fa28 	bl	8002034 <EPS_READ>
 8001be4:	4603      	mov	r3, r0
 8001be6:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <READ_EPS_OUTPUT_CONDITION1+0x2c>
        return status;
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	e00a      	b.n	8001c08 <READ_EPS_OUTPUT_CONDITION1+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001bf2:	7b3b      	ldrb	r3, [r7, #12]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	7b7b      	ldrb	r3, [r7, #13]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	801a      	strh	r2, [r3, #0]
    return status;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <READ_EPS_OUTPUT_CONDITION2>:
/**
  * @brief Reads raw return value of the Output Condition 2 command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OUTPUT_CONDITION2(uint16_t *cond_ptr){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 24; //output conditions command
 8001c1c:	2318      	movs	r3, #24
 8001c1e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001c20:	f107 020c 	add.w	r2, r7, #12
 8001c24:	7bbb      	ldrb	r3, [r7, #14]
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 fa03 	bl	8002034 <EPS_READ>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <READ_EPS_OUTPUT_CONDITION2+0x2c>
        return status;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	e00a      	b.n	8001c52 <READ_EPS_OUTPUT_CONDITION2+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001c3c:	7b3b      	ldrb	r3, [r7, #12]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	7b7b      	ldrb	r3, [r7, #13]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	801a      	strh	r2, [r3, #0]
    return status;
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <READ_EPS_POWER_ON_CYCLES>:
/**
  * @brief Reads the current count of EPS power cycles and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_POWER_ON_CYCLES(uint16_t *count_ptr){
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001c62:	2301      	movs	r3, #1
 8001c64:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 26; //power on cycles count command
 8001c66:	231a      	movs	r3, #26
 8001c68:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001c6a:	f107 020c 	add.w	r2, r7, #12
 8001c6e:	7bbb      	ldrb	r3, [r7, #14]
 8001c70:	4611      	mov	r1, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f9de 	bl	8002034 <EPS_READ>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <READ_EPS_POWER_ON_CYCLES+0x2c>
        return status;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	e00a      	b.n	8001c9c <READ_EPS_POWER_ON_CYCLES+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001c86:	7b3b      	ldrb	r3, [r7, #12]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	7b7b      	ldrb	r3, [r7, #13]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	801a      	strh	r2, [r3, #0]
    return status;
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <READ_EPS_UNDER_VOLT_COUNT>:
/**
  * @brief Reads the current count of EPS under-voltage occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_UNDER_VOLT_COUNT(uint16_t *count_ptr){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 27; //under voltage count command
 8001cb0:	231b      	movs	r3, #27
 8001cb2:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001cb4:	f107 020c 	add.w	r2, r7, #12
 8001cb8:	7bbb      	ldrb	r3, [r7, #14]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 f9b9 	bl	8002034 <EPS_READ>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <READ_EPS_UNDER_VOLT_COUNT+0x2c>
        return status;
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	e00a      	b.n	8001ce6 <READ_EPS_UNDER_VOLT_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001cd0:	7b3b      	ldrb	r3, [r7, #12]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	7b7b      	ldrb	r3, [r7, #13]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	801a      	strh	r2, [r3, #0]
    return status;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <READ_EPS_SHORT_CIRCUIT_COUNT>:
/**
  * @brief Reads the current count of EPS short-circuit occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SHORT_CIRCUIT_COUNT(uint16_t *count_ptr){
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 28; //short circuit count command
 8001cfa:	231c      	movs	r3, #28
 8001cfc:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001cfe:	f107 020c 	add.w	r2, r7, #12
 8001d02:	7bbb      	ldrb	r3, [r7, #14]
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f994 	bl	8002034 <EPS_READ>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <READ_EPS_SHORT_CIRCUIT_COUNT+0x2c>
        return status;
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	e00a      	b.n	8001d30 <READ_EPS_SHORT_CIRCUIT_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001d1a:	7b3b      	ldrb	r3, [r7, #12]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	7b7b      	ldrb	r3, [r7, #13]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	801a      	strh	r2, [r3, #0]
    return status;
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <READ_EPS_OVER_TEMP_COUNT>:
/**
  * @brief Reads the current count of EPS over-temp occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OVER_TEMP_COUNT(uint16_t *count_ptr){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 29; //over temperature count command
 8001d44:	231d      	movs	r3, #29
 8001d46:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001d48:	f107 020c 	add.w	r2, r7, #12
 8001d4c:	7bbb      	ldrb	r3, [r7, #14]
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 f96f 	bl	8002034 <EPS_READ>
 8001d56:	4603      	mov	r3, r0
 8001d58:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <READ_EPS_OVER_TEMP_COUNT+0x2c>
        return status;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	e00a      	b.n	8001d7a <READ_EPS_OVER_TEMP_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001d64:	7b3b      	ldrb	r3, [r7, #12]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	021b      	lsls	r3, r3, #8
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	7b7b      	ldrb	r3, [r7, #13]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	801a      	strh	r2, [r3, #0]
    return status;
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <READ_EPS_CHARGE_CYCLES>:
/**
  * @brief Reads the current count of EPS battery charge cycles and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_CHARGE_CYCLES(uint16_t *count_ptr){
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 48; //charging cycles count command
 8001d8e:	2330      	movs	r3, #48	; 0x30
 8001d90:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001d92:	f107 020c 	add.w	r2, r7, #12
 8001d96:	7bbb      	ldrb	r3, [r7, #14]
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f94a 	bl	8002034 <EPS_READ>
 8001da0:	4603      	mov	r3, r0
 8001da2:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <READ_EPS_CHARGE_CYCLES+0x2c>
        return status;
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	e00a      	b.n	8001dc4 <READ_EPS_CHARGE_CYCLES+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001dae:	7b3b      	ldrb	r3, [r7, #12]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	021b      	lsls	r3, r3, #8
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	7b7b      	ldrb	r3, [r7, #13]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	4413      	add	r3, r2
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	801a      	strh	r2, [r3, #0]
    return status;
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <READ_EPS_DEFAULTS1>:
/**
  * @brief Reads the default values of LUPs and fast charge modes and stores the value in the pointed to address
  * @param default_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_DEFAULTS1(uint16_t *default_ptr){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 43; //output 1 default value command
 8001dd8:	232b      	movs	r3, #43	; 0x2b
 8001dda:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001ddc:	f107 020c 	add.w	r2, r7, #12
 8001de0:	7bbb      	ldrb	r3, [r7, #14]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 f925 	bl	8002034 <EPS_READ>
 8001dea:	4603      	mov	r3, r0
 8001dec:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <READ_EPS_DEFAULTS1+0x2c>
        return status;
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	e00a      	b.n	8001e0e <READ_EPS_DEFAULTS1+0x42>
    }
    (*default_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001df8:	7b3b      	ldrb	r3, [r7, #12]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	7b7b      	ldrb	r3, [r7, #13]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	801a      	strh	r2, [r3, #0]
    return status;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <READ_EPS_DEFAULTS2>:
/**
  * @brief Reads the default values of OUT1-OUT6 and stores the value in the pointed to address
  * @param default_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_DEFAULTS2(uint16_t *default_ptr){
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001e1e:	2301      	movs	r3, #1
 8001e20:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 44; //output 3 default value command
 8001e22:	232c      	movs	r3, #44	; 0x2c
 8001e24:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001e26:	f107 020c 	add.w	r2, r7, #12
 8001e2a:	7bbb      	ldrb	r3, [r7, #14]
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f900 	bl	8002034 <EPS_READ>
 8001e34:	4603      	mov	r3, r0
 8001e36:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <READ_EPS_DEFAULTS2+0x2c>
        return status;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	e00a      	b.n	8001e58 <READ_EPS_DEFAULTS2+0x42>
    }
    (*default_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001e42:	7b3b      	ldrb	r3, [r7, #12]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	7b7b      	ldrb	r3, [r7, #13]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	801a      	strh	r2, [r3, #0]
    return status;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <enable_EPS_Vbatt_Bus>:


/********************************************** WRITE FUNCTIONS **********************************************************************************/
HAL_StatusTypeDef enable_EPS_Vbatt_Bus(){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
    return EPS_WRITE(1, 1); //turn command 1 to the ON state
 8001e64:	2101      	movs	r1, #1
 8001e66:	2001      	movs	r0, #1
 8001e68:	f000 f948 	bl	80020fc <EPS_WRITE>
 8001e6c:	4603      	mov	r3, r0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <disable_EPS_Vbatt_Bus>:

HAL_StatusTypeDef disable_EPS_Vbatt_Bus(){
 8001e72:	b580      	push	{r7, lr}
 8001e74:	af00      	add	r7, sp, #0
    return EPS_WRITE(1, 2); //turn command 1 to the FORCE OFF state
 8001e76:	2102      	movs	r1, #2
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f000 f93f 	bl	80020fc <EPS_WRITE>
 8001e7e:	4603      	mov	r3, r0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <enable_EPS_5v_Bus>:

HAL_StatusTypeDef disable_EPS_BCR_Bus(){
    return EPS_WRITE(2, 0); //turn command 2 to the OFF state
}

HAL_StatusTypeDef enable_EPS_5v_Bus(){
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
    return EPS_WRITE(4, 1); //turn command 4 to the ON state
 8001e88:	2101      	movs	r1, #1
 8001e8a:	2004      	movs	r0, #4
 8001e8c:	f000 f936 	bl	80020fc <EPS_WRITE>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <disable_EPS_5v_Bus>:

HAL_StatusTypeDef disable_EPS_5v_Bus(){
 8001e96:	b580      	push	{r7, lr}
 8001e98:	af00      	add	r7, sp, #0
    return EPS_WRITE(4, 2); //turn command 4 to the FORCE OFF state
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	2004      	movs	r0, #4
 8001e9e:	f000 f92d 	bl	80020fc <EPS_WRITE>
 8001ea2:	4603      	mov	r3, r0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <enable_EPS_LUP_3v>:

HAL_StatusTypeDef enable_EPS_LUP_3v(){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
    return EPS_WRITE(5, 0); //turn command 5 to the ON state
 8001eac:	2100      	movs	r1, #0
 8001eae:	2005      	movs	r0, #5
 8001eb0:	f000 f924 	bl	80020fc <EPS_WRITE>
 8001eb4:	4603      	mov	r3, r0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <enable_EPS_LUP_5v>:

HAL_StatusTypeDef disable_EPS_LUP_3v(){
    return EPS_WRITE(5, 1); //turn command 5 to the OFF state
}

HAL_StatusTypeDef enable_EPS_LUP_5v(){
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	af00      	add	r7, sp, #0
    return EPS_WRITE(6, 0); //turn command 6 to the ON state
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2006      	movs	r0, #6
 8001ec2:	f000 f91b 	bl	80020fc <EPS_WRITE>
 8001ec6:	4603      	mov	r3, r0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <enable_EPS_Fast_Charge1>:

HAL_StatusTypeDef disable_EPS_LUP_5v(){
    return EPS_WRITE(6, 1); //turn command 6 to the OFF state
}

HAL_StatusTypeDef enable_EPS_Fast_Charge1(){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
    return EPS_WRITE(8, 1); //turn command 8 to the ON state (HIGH = Fast?, LOW = Slow?)
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	2008      	movs	r0, #8
 8001ed4:	f000 f912 	bl	80020fc <EPS_WRITE>
 8001ed8:	4603      	mov	r3, r0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	bd80      	pop	{r7, pc}

08001ede <disable_EPS_Fast_Charge1>:

HAL_StatusTypeDef disable_EPS_Fast_Charge1(){
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	af00      	add	r7, sp, #0
    return EPS_WRITE(8, 0); //turn command 8 to the ON state (HIGH = Fast?, LOW = Slow?)
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2008      	movs	r0, #8
 8001ee6:	f000 f909 	bl	80020fc <EPS_WRITE>
 8001eea:	4603      	mov	r3, r0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <enable_EPS_Fast_Charge2>:

HAL_StatusTypeDef enable_EPS_Fast_Charge2(){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
    return EPS_WRITE(9, 1); //turn command 9 to the ON state (HIGH = Fast?, LOW = Slow?)
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	2009      	movs	r0, #9
 8001ef8:	f000 f900 	bl	80020fc <EPS_WRITE>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <disable_EPS_Fast_Charge2>:

HAL_StatusTypeDef disable_EPS_Fast_Charge2(){
 8001f02:	b580      	push	{r7, lr}
 8001f04:	af00      	add	r7, sp, #0
    return EPS_WRITE(9, 0); //turn command 9 to the OFF state (HIGH = Fast?, LOW = Slow?)
 8001f06:	2100      	movs	r1, #0
 8001f08:	2009      	movs	r0, #9
 8001f0a:	f000 f8f7 	bl	80020fc <EPS_WRITE>
 8001f0e:	4603      	mov	r3, r0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <enable_Boost_Board>:

HAL_StatusTypeDef enable_Boost_Board(){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
    return EPS_WRITE(10, 1); //turn command 10 to the ON state
 8001f18:	2101      	movs	r1, #1
 8001f1a:	200a      	movs	r0, #10
 8001f1c:	f000 f8ee 	bl	80020fc <EPS_WRITE>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <disable_Boost_Board>:

HAL_StatusTypeDef disable_Boost_Board(){
 8001f26:	b580      	push	{r7, lr}
 8001f28:	af00      	add	r7, sp, #0
    return EPS_WRITE(10, 0); //turn command 10 to the OFF state
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	200a      	movs	r0, #10
 8001f2e:	f000 f8e5 	bl	80020fc <EPS_WRITE>
 8001f32:	4603      	mov	r3, r0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <enable_Payload>:

HAL_StatusTypeDef enable_Payload(){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
    return EPS_WRITE(11, 1); //turn command 11 to the ON state
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	200b      	movs	r0, #11
 8001f40:	f000 f8dc 	bl	80020fc <EPS_WRITE>
 8001f44:	4603      	mov	r3, r0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <disable_Payload>:

HAL_StatusTypeDef disable_Payload(){
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	af00      	add	r7, sp, #0
    return EPS_WRITE(11, 0); //turn command 11 to the OFF state
 8001f4e:	2100      	movs	r1, #0
 8001f50:	200b      	movs	r0, #11
 8001f52:	f000 f8d3 	bl	80020fc <EPS_WRITE>
 8001f56:	4603      	mov	r3, r0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <enable_EPS_Output_3>:

HAL_StatusTypeDef enable_EPS_Output_3(){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
    return EPS_WRITE(12, 1); //turn command 12 to the ON state
 8001f60:	2101      	movs	r1, #1
 8001f62:	200c      	movs	r0, #12
 8001f64:	f000 f8ca 	bl	80020fc <EPS_WRITE>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <disable_EPS_Output_3>:

HAL_StatusTypeDef disable_EPS_Output_3(){
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	af00      	add	r7, sp, #0
    return EPS_WRITE(12, 0); //turn command 12 to the OFF state
 8001f72:	2100      	movs	r1, #0
 8001f74:	200c      	movs	r0, #12
 8001f76:	f000 f8c1 	bl	80020fc <EPS_WRITE>
 8001f7a:	4603      	mov	r3, r0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <enable_UHF>:

HAL_StatusTypeDef enable_UHF(){
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
    return EPS_WRITE(14, 1); //turn command 14 to the ON state
 8001f84:	2101      	movs	r1, #1
 8001f86:	200e      	movs	r0, #14
 8001f88:	f000 f8b8 	bl	80020fc <EPS_WRITE>
 8001f8c:	4603      	mov	r3, r0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <disable_UHF>:

HAL_StatusTypeDef disable_UHF(){
 8001f92:	b580      	push	{r7, lr}
 8001f94:	af00      	add	r7, sp, #0
//    osThreadTerminate(myUHFTask);
//    osThreadDef(myUHFTask, UHF_Task, osPriorityNormal, 0, 512);
//    osThreadCreate(osThread(myUHFTask), NULL);
    return EPS_WRITE(14, 0); //turn command 14 to the OFF state
 8001f96:	2100      	movs	r1, #0
 8001f98:	200e      	movs	r0, #14
 8001f9a:	f000 f8af 	bl	80020fc <EPS_WRITE>
 8001f9e:	4603      	mov	r3, r0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <enable_EPS_Output_6>:

HAL_StatusTypeDef enable_EPS_Output_6(){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
    return EPS_WRITE(15, 1); //turn command 15 to the ON state
 8001fa8:	2101      	movs	r1, #1
 8001faa:	200f      	movs	r0, #15
 8001fac:	f000 f8a6 	bl	80020fc <EPS_WRITE>
 8001fb0:	4603      	mov	r3, r0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <disable_EPS_Output_6>:

HAL_StatusTypeDef disable_EPS_Output_6(){
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	af00      	add	r7, sp, #0
    return EPS_WRITE(15, 0); //turn command 15 to the OFF state
 8001fba:	2100      	movs	r1, #0
 8001fbc:	200f      	movs	r0, #15
 8001fbe:	f000 f89d 	bl	80020fc <EPS_WRITE>
 8001fc2:	4603      	mov	r3, r0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <enable_EPS_Batt_Heater_1>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_1(){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
    return EPS_WRITE(16, 1); //turn command 16 to the ON state
 8001fcc:	2101      	movs	r1, #1
 8001fce:	2010      	movs	r0, #16
 8001fd0:	f000 f894 	bl	80020fc <EPS_WRITE>
 8001fd4:	4603      	mov	r3, r0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <disable_EPS_Batt_Heater_1>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_1(){
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	af00      	add	r7, sp, #0
    return EPS_WRITE(16, 0); //turn command 16 to the OFF state
 8001fde:	2100      	movs	r1, #0
 8001fe0:	2010      	movs	r0, #16
 8001fe2:	f000 f88b 	bl	80020fc <EPS_WRITE>
 8001fe6:	4603      	mov	r3, r0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	bd80      	pop	{r7, pc}

08001fec <enable_EPS_Batt_Heater_2>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_2(){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
    return EPS_WRITE(17, 1); //turn command 17 to the ON state
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	2011      	movs	r0, #17
 8001ff4:	f000 f882 	bl	80020fc <EPS_WRITE>
 8001ff8:	4603      	mov	r3, r0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <disable_EPS_Batt_Heater_2>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_2(){
 8001ffe:	b580      	push	{r7, lr}
 8002000:	af00      	add	r7, sp, #0
    return EPS_WRITE(17, 0); //turn command 17 to the OFF state
 8002002:	2100      	movs	r1, #0
 8002004:	2011      	movs	r0, #17
 8002006:	f000 f879 	bl	80020fc <EPS_WRITE>
 800200a:	4603      	mov	r3, r0
}
 800200c:	4618      	mov	r0, r3
 800200e:	bd80      	pop	{r7, pc}

08002010 <enable_EPS_Batt_Heater_3>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_3(){
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
    return EPS_WRITE(18, 1); //turn command 18 to the ON state
 8002014:	2101      	movs	r1, #1
 8002016:	2012      	movs	r0, #18
 8002018:	f000 f870 	bl	80020fc <EPS_WRITE>
 800201c:	4603      	mov	r3, r0
}
 800201e:	4618      	mov	r0, r3
 8002020:	bd80      	pop	{r7, pc}

08002022 <disable_EPS_Batt_Heater_3>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_3(){
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0
    return EPS_WRITE(18, 0); //turn command 18 to the OFF state
 8002026:	2100      	movs	r1, #0
 8002028:	2012      	movs	r0, #18
 800202a:	f000 f867 	bl	80020fc <EPS_WRITE>
 800202e:	4603      	mov	r3, r0
}
 8002030:	4618      	mov	r0, r3
 8002032:	bd80      	pop	{r7, pc}

08002034 <EPS_READ>:
  * @brief Sends a write command to the EPS module over a given I2C instance and reads back a response
  * @param command : the command to be used on the transceiver
  * @param data_ptr : A pointer to allow information from the health check to be viewed.
  * @retval Returns if the hal function call succeeded, or if it failed
  */
HAL_StatusTypeDef EPS_READ(uint8_t command, uint8_t* data_ptr){
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af02      	add	r7, sp, #8
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
    osMutexWait(EPS_I2C_Mutex, 2500);
 8002040:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <EPS_READ+0xb8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8002048:	4618      	mov	r0, r3
 800204a:	f008 fc29 	bl	800a8a0 <osMutexWait>

    HAL_StatusTypeDef status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
    status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), &command, 1, EPS_I2C_TIMEOUT);
 8002052:	1dfa      	adds	r2, r7, #7
 8002054:	2364      	movs	r3, #100	; 0x64
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2301      	movs	r3, #1
 800205a:	2130      	movs	r1, #48	; 0x30
 800205c:	4824      	ldr	r0, [pc, #144]	; (80020f0 <EPS_READ+0xbc>)
 800205e:	f002 fc61 	bl	8004924 <HAL_I2C_Master_Transmit>
 8002062:	4603      	mov	r3, r0
 8002064:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d017      	beq.n	800209c <EPS_READ+0x68>
        osMutexWait(Num_I2C_Errors_Mutex, 500);
 800206c:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <EPS_READ+0xc0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002074:	4618      	mov	r0, r3
 8002076:	f008 fc13 	bl	800a8a0 <osMutexWait>
        NUM_I2C_ERRORS++;
 800207a:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <EPS_READ+0xc4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	4a1d      	ldr	r2, [pc, #116]	; (80020f8 <EPS_READ+0xc4>)
 8002082:	6013      	str	r3, [r2, #0]
        osMutexRelease(Num_I2C_Errors_Mutex);
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <EPS_READ+0xc0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f008 fc59 	bl	800a940 <osMutexRelease>
        osMutexRelease(EPS_I2C_Mutex);
 800208e:	4b17      	ldr	r3, [pc, #92]	; (80020ec <EPS_READ+0xb8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f008 fc54 	bl	800a940 <osMutexRelease>
        return status;
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	e023      	b.n	80020e4 <EPS_READ+0xb0>
    }
    status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), data_ptr, 2, EPS_I2C_TIMEOUT);
 800209c:	2364      	movs	r3, #100	; 0x64
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	2302      	movs	r3, #2
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	2130      	movs	r1, #48	; 0x30
 80020a6:	4812      	ldr	r0, [pc, #72]	; (80020f0 <EPS_READ+0xbc>)
 80020a8:	f002 fd4a 	bl	8004b40 <HAL_I2C_Master_Receive>
 80020ac:	4603      	mov	r3, r0
 80020ae:	73fb      	strb	r3, [r7, #15]

    if(status != HAL_OK){
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d010      	beq.n	80020d8 <EPS_READ+0xa4>
        osMutexWait(Num_I2C_Errors_Mutex, 500);
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <EPS_READ+0xc0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80020be:	4618      	mov	r0, r3
 80020c0:	f008 fbee 	bl	800a8a0 <osMutexWait>
        NUM_I2C_ERRORS++;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <EPS_READ+0xc4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <EPS_READ+0xc4>)
 80020cc:	6013      	str	r3, [r2, #0]
        osMutexRelease(Num_I2C_Errors_Mutex);
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <EPS_READ+0xc0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f008 fc34 	bl	800a940 <osMutexRelease>
    }

    osMutexRelease(EPS_I2C_Mutex);
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <EPS_READ+0xb8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f008 fc2f 	bl	800a940 <osMutexRelease>
    return status;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000228 	.word	0x20000228
 80020f0:	200002a0 	.word	0x200002a0
 80020f4:	20000230 	.word	0x20000230
 80020f8:	20000208 	.word	0x20000208

080020fc <EPS_WRITE>:
/**
  * @brief Sends a write command to the EPS module over a given I2C instance
  * @param state: the state to set the output specified by the command to (0 or 1)
  * @retval Returns if the hal function call succeeded, or if it failed
  */
HAL_StatusTypeDef EPS_WRITE(uint8_t command, uint8_t state){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af02      	add	r7, sp, #8
 8002102:	4603      	mov	r3, r0
 8002104:	460a      	mov	r2, r1
 8002106:	71fb      	strb	r3, [r7, #7]
 8002108:	4613      	mov	r3, r2
 800210a:	71bb      	strb	r3, [r7, #6]
    osMutexWait(EPS_I2C_Mutex, 1500);
 800210c:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <EPS_WRITE+0x7c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8002114:	4618      	mov	r0, r3
 8002116:	f008 fbc3 	bl	800a8a0 <osMutexWait>

    HAL_StatusTypeDef status = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2];
    data[0] = command;
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	733b      	strb	r3, [r7, #12]
    data[1] = state;
 8002122:	79bb      	ldrb	r3, [r7, #6]
 8002124:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Master_Transmit(&hi2c1, (EPS_I2C_ADDRESS << 0x1), data, 2, EPS_I2C_TIMEOUT); //Possibly size needs to be 3, and data should maybe be replaced with data buffer
 8002126:	f107 020c 	add.w	r2, r7, #12
 800212a:	2364      	movs	r3, #100	; 0x64
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2302      	movs	r3, #2
 8002130:	2130      	movs	r1, #48	; 0x30
 8002132:	4812      	ldr	r0, [pc, #72]	; (800217c <EPS_WRITE+0x80>)
 8002134:	f002 fbf6 	bl	8004924 <HAL_I2C_Master_Transmit>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]

    if(status != HAL_OK){
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d010      	beq.n	8002164 <EPS_WRITE+0x68>
        osMutexWait(Num_I2C_Errors_Mutex, 500);
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <EPS_WRITE+0x84>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800214a:	4618      	mov	r0, r3
 800214c:	f008 fba8 	bl	800a8a0 <osMutexWait>
        NUM_I2C_ERRORS++;
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <EPS_WRITE+0x88>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <EPS_WRITE+0x88>)
 8002158:	6013      	str	r3, [r2, #0]
        osMutexRelease(Num_I2C_Errors_Mutex);
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <EPS_WRITE+0x84>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f008 fbee 	bl	800a940 <osMutexRelease>
        }


    }

    osMutexRelease(EPS_I2C_Mutex);
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <EPS_WRITE+0x7c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f008 fbe9 	bl	800a940 <osMutexRelease>
    return status;
 800216e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000228 	.word	0x20000228
 800217c:	200002a0 	.word	0x200002a0
 8002180:	20000230 	.word	0x20000230
 8002184:	20000208 	.word	0x20000208

08002188 <sendErrorPacket>:
/**
 * @brief This function sends an error packet to the Ground Station
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
int sendErrorPacket(){
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
    CySat_Packet_t cySatPacket;
    cySatPacket.Subsystem_Type = OBC_SUBSYSTEM_TYPE;
 800218e:	230a      	movs	r3, #10
 8002190:	713b      	strb	r3, [r7, #4]
    cySatPacket.Command = 0xFF;
 8002192:	23ff      	movs	r3, #255	; 0xff
 8002194:	717b      	strb	r3, [r7, #5]
    cySatPacket.Data_Length = 0x02;
 8002196:	2302      	movs	r3, #2
 8002198:	71bb      	strb	r3, [r7, #6]
    cySatPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 2);
 800219a:	2002      	movs	r0, #2
 800219c:	f00b f952 	bl	800d444 <malloc>
 80021a0:	4603      	mov	r3, r0
 80021a2:	60bb      	str	r3, [r7, #8]
    cySatPacket.Data[0] = 0xFF;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	22ff      	movs	r2, #255	; 0xff
 80021a8:	701a      	strb	r2, [r3, #0]
    cySatPacket.Data[1] = 0xFF;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	3301      	adds	r3, #1
 80021ae:	22ff      	movs	r2, #255	; 0xff
 80021b0:	701a      	strb	r2, [r3, #0]
    cySatPacket.Checksum = generateCySatChecksum(cySatPacket);
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021b8:	f7ff f8de 	bl	8001378 <generateCySatChecksum>
 80021bc:	4603      	mov	r3, r0
 80021be:	733b      	strb	r3, [r7, #12]
    return sendCySatPacket(cySatPacket);
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021c6:	f7ff f857 	bl	8001278 <sendCySatPacket>
 80021ca:	4603      	mov	r3, r0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <handleCySatPacket>:
/**
 * @brief This function takes in a newly received CySat Packet and acts upon the command within
 * @param packet: the packet to handle
 * @retval A zero indicates success, -1 means the command or subtype is unrecognized, else means failure
 */
int handleCySatPacket(CySat_Packet_t packet){
 80021d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d6:	b0b9      	sub	sp, #228	; 0xe4
 80021d8:	af00      	add	r7, sp, #0
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    HAL_StatusTypeDef status;
    CySat_Packet_t outgoingPacket;
    switch(packet.Subsystem_Type){
 80021e0:	793b      	ldrb	r3, [r7, #4]
 80021e2:	2b28      	cmp	r3, #40	; 0x28
 80021e4:	dc48      	bgt.n	8002278 <handleCySatPacket+0xa4>
 80021e6:	2b0a      	cmp	r3, #10
 80021e8:	f2c1 805c 	blt.w	80032a4 <handleCySatPacket+0x10d0>
 80021ec:	3b0a      	subs	r3, #10
 80021ee:	2b1e      	cmp	r3, #30
 80021f0:	f201 8058 	bhi.w	80032a4 <handleCySatPacket+0x10d0>
 80021f4:	a201      	add	r2, pc, #4	; (adr r2, 80021fc <handleCySatPacket+0x28>)
 80021f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fa:	bf00      	nop
 80021fc:	08002283 	.word	0x08002283
 8002200:	080032a5 	.word	0x080032a5
 8002204:	080032a5 	.word	0x080032a5
 8002208:	080032a5 	.word	0x080032a5
 800220c:	080032a5 	.word	0x080032a5
 8002210:	080032a5 	.word	0x080032a5
 8002214:	080032a5 	.word	0x080032a5
 8002218:	080032a5 	.word	0x080032a5
 800221c:	080032a5 	.word	0x080032a5
 8002220:	080032a5 	.word	0x080032a5
 8002224:	080032ab 	.word	0x080032ab
 8002228:	080032a5 	.word	0x080032a5
 800222c:	080032a5 	.word	0x080032a5
 8002230:	080032a5 	.word	0x080032a5
 8002234:	080032a5 	.word	0x080032a5
 8002238:	080032a5 	.word	0x080032a5
 800223c:	080032a5 	.word	0x080032a5
 8002240:	080032a5 	.word	0x080032a5
 8002244:	080032a5 	.word	0x080032a5
 8002248:	080032a5 	.word	0x080032a5
 800224c:	0800247f 	.word	0x0800247f
 8002250:	080032a5 	.word	0x080032a5
 8002254:	080032a5 	.word	0x080032a5
 8002258:	080032a5 	.word	0x080032a5
 800225c:	080032a5 	.word	0x080032a5
 8002260:	080032a5 	.word	0x080032a5
 8002264:	080032a5 	.word	0x080032a5
 8002268:	080032a5 	.word	0x080032a5
 800226c:	080032a5 	.word	0x080032a5
 8002270:	080032a5 	.word	0x080032a5
 8002274:	080032ab 	.word	0x080032ab
 8002278:	2b5a      	cmp	r3, #90	; 0x5a
 800227a:	f001 8018 	beq.w	80032ae <handleCySatPacket+0x10da>
 800227e:	f001 b811 	b.w	80032a4 <handleCySatPacket+0x10d0>
        case OBC_SUBSYSTEM_TYPE: //OBC
            switch(packet.Command){
 8002282:	797b      	ldrb	r3, [r7, #5]
 8002284:	3b01      	subs	r3, #1
 8002286:	2b0b      	cmp	r3, #11
 8002288:	f201 8013 	bhi.w	80032b2 <handleCySatPacket+0x10de>
 800228c:	a201      	add	r2, pc, #4	; (adr r2, 8002294 <handleCySatPacket+0xc0>)
 800228e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002292:	bf00      	nop
 8002294:	080022c5 	.word	0x080022c5
 8002298:	080032b3 	.word	0x080032b3
 800229c:	08002357 	.word	0x08002357
 80022a0:	080032b3 	.word	0x080032b3
 80022a4:	080023eb 	.word	0x080023eb
 80022a8:	080032b3 	.word	0x080032b3
 80022ac:	080023eb 	.word	0x080023eb
 80022b0:	080032b3 	.word	0x080032b3
 80022b4:	080023eb 	.word	0x080023eb
 80022b8:	080023eb 	.word	0x080023eb
 80022bc:	080032b3 	.word	0x080032b3
 80022c0:	080023eb 	.word	0x080023eb
                case 0x01: { //Ping Request
                    char message[58] = "Alive and well, Ames! Congratulations to the CySat-1 Team!";
 80022c4:	4bd4      	ldr	r3, [pc, #848]	; (8002618 <handleCySatPacket+0x444>)
 80022c6:	f107 0410 	add.w	r4, r7, #16
 80022ca:	461d      	mov	r5, r3
 80022cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022dc:	c403      	stmia	r4!, {r0, r1}
 80022de:	8022      	strh	r2, [r4, #0]
                    outgoingPacket.Subsystem_Type = OBC_SUBSYSTEM_TYPE;
 80022e0:	230a      	movs	r3, #10
 80022e2:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x00; //Ping response
 80022e6:	2300      	movs	r3, #0
 80022e8:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x3A;
 80022ec:	233a      	movs	r3, #58	; 0x3a
 80022ee:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 58);
 80022f2:	203a      	movs	r0, #58	; 0x3a
 80022f4:	f00b f8a6 	bl	800d444 <malloc>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    memcpy(outgoingPacket.Data,message,58); //This too IDK seriously this might not work
 80022fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002302:	f107 0410 	add.w	r4, r7, #16
 8002306:	469c      	mov	ip, r3
 8002308:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800230c:	4665      	mov	r5, ip
 800230e:	4626      	mov	r6, r4
 8002310:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002312:	6028      	str	r0, [r5, #0]
 8002314:	6069      	str	r1, [r5, #4]
 8002316:	60aa      	str	r2, [r5, #8]
 8002318:	60eb      	str	r3, [r5, #12]
 800231a:	3410      	adds	r4, #16
 800231c:	f10c 0c10 	add.w	ip, ip, #16
 8002320:	4574      	cmp	r4, lr
 8002322:	d1f3      	bne.n	800230c <handleCySatPacket+0x138>
 8002324:	4662      	mov	r2, ip
 8002326:	4623      	mov	r3, r4
 8002328:	cb03      	ldmia	r3!, {r0, r1}
 800232a:	6010      	str	r0, [r2, #0]
 800232c:	6051      	str	r1, [r2, #4]
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	8113      	strh	r3, [r2, #8]
                    //outgoingPacket.Data[57]=message[57]; //I don't know what I'm doing please check this
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002332:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002336:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800233a:	f7ff f81d 	bl	8001378 <generateCySatChecksum>
 800233e:	4603      	mov	r3, r0
 8002340:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    return sendCySatPacket(outgoingPacket); //send the response
 8002344:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002348:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800234c:	f7fe ff94 	bl	8001278 <sendCySatPacket>
 8002350:	4603      	mov	r3, r0
 8002352:	f000 bfb2 	b.w	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x03: { //Shutoff Beacon Request
                    status=END_BEACON();
 8002356:	f001 f80f 	bl	8003378 <END_BEACON>
 800235a:	4603      	mov	r3, r0
 800235c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002360:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <handleCySatPacket+0x19c>
                        return -1;
 8002368:	f04f 33ff 	mov.w	r3, #4294967295
 800236c:	f000 bfa5 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }

                    uint16_t data1 = FloatToUnsigned16bits(status);
 8002370:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800237c:	eeb0 0a67 	vmov.f32	s0, s15
 8002380:	f001 fb9c 	bl	8003abc <FloatToUnsigned16bits>
 8002384:	4603      	mov	r3, r0
 8002386:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

                    outgoingPacket.Subsystem_Type = OBC_SUBSYSTEM_TYPE;
 800238a:	230a      	movs	r3, #10
 800238c:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x02; //Shutoff Beacon response
 8002390:	2302      	movs	r3, #2
 8002392:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x02;
 8002396:	2302      	movs	r3, #2
 8002398:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 2);
 800239c:	2002      	movs	r0, #2
 800239e:	f00b f851 	bl	800d444 <malloc>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 80023a8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 80023b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023bc:	3301      	adds	r3, #1
 80023be:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 80023c6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80023ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023ce:	f7fe ffd3 	bl	8001378 <generateCySatChecksum>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    return sendCySatPacket(outgoingPacket); //send the response
 80023d8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80023dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023e0:	f7fe ff4a 	bl	8001278 <sendCySatPacket>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f000 bf68 	b.w	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x0A: { //Set beacon text
                    //This will have to wait for transmission of text this is gonna be hard
                }
                case 0x0C: { //Enable Beacon
                    status=START_BEACON();
 80023ea:	f000 ff6b 	bl	80032c4 <START_BEACON>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80023f4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <handleCySatPacket+0x230>
                        return -1;
 80023fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002400:	f000 bf5b 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }

                    uint16_t data1 = FloatToUnsigned16bits(status);
 8002404:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002408:	ee07 3a90 	vmov	s15, r3
 800240c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002410:	eeb0 0a67 	vmov.f32	s0, s15
 8002414:	f001 fb52 	bl	8003abc <FloatToUnsigned16bits>
 8002418:	4603      	mov	r3, r0
 800241a:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8

                    outgoingPacket.Subsystem_Type = OBC_SUBSYSTEM_TYPE;
 800241e:	230a      	movs	r3, #10
 8002420:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x0B; //Enable Beacon response
 8002424:	230b      	movs	r3, #11
 8002426:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x02;
 800242a:	2302      	movs	r3, #2
 800242c:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 2);
 8002430:	2002      	movs	r0, #2
 8002432:	f00b f807 	bl	800d444 <malloc>
 8002436:	4603      	mov	r3, r0
 8002438:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 800243c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	b29a      	uxth	r2, r3
 8002444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 800244c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002450:	3301      	adds	r3, #1
 8002452:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 800245a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800245e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002462:	f7fe ff89 	bl	8001378 <generateCySatChecksum>
 8002466:	4603      	mov	r3, r0
 8002468:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    return sendCySatPacket(outgoingPacket); //send the response
 800246c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002470:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002474:	f7fe ff00 	bl	8001278 <sendCySatPacket>
 8002478:	4603      	mov	r3, r0
 800247a:	f000 bf1e 	b.w	80032ba <handleCySatPacket+0x10e6>
        case ADCS_SUBSYSTEM_TYPE: //ADCS

            break;

        case EPS_SUBSYSTEM_TYPE: //EPS
            switch(packet.Command){
 800247e:	797b      	ldrb	r3, [r7, #5]
 8002480:	3b01      	subs	r3, #1
 8002482:	2b10      	cmp	r3, #16
 8002484:	f200 8717 	bhi.w	80032b6 <handleCySatPacket+0x10e2>
 8002488:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <handleCySatPacket+0x2bc>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024d5 	.word	0x080024d5
 8002494:	080032b7 	.word	0x080032b7
 8002498:	080025b9 	.word	0x080025b9
 800249c:	080032b7 	.word	0x080032b7
 80024a0:	08002705 	.word	0x08002705
 80024a4:	080032b7 	.word	0x080032b7
 80024a8:	0800284d 	.word	0x0800284d
 80024ac:	080032b7 	.word	0x080032b7
 80024b0:	08002995 	.word	0x08002995
 80024b4:	080032b7 	.word	0x080032b7
 80024b8:	08002a8b 	.word	0x08002a8b
 80024bc:	080032b7 	.word	0x080032b7
 80024c0:	08002c6d 	.word	0x08002c6d
 80024c4:	080032b7 	.word	0x080032b7
 80024c8:	08002dab 	.word	0x08002dab
 80024cc:	080032b7 	.word	0x080032b7
 80024d0:	08002f31 	.word	0x08002f31
                case 0x01: { //Battery Pack Voltage/Current Request
                    float voltage, current;
                    status = READ_EPS_BATTERY_VOLTAGE(&voltage); //read the voltage from the EPS Battery Pack
 80024d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe ffbf 	bl	800145c <READ_EPS_BATTERY_VOLTAGE>
 80024de:	4603      	mov	r3, r0
 80024e0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80024e4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <handleCySatPacket+0x320>
                        return -1;
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295
 80024f0:	f000 bee3 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_BATTERY_CURRENT(&current); //read the current from the EPS Battery Pack
 80024f4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe ffe1 	bl	80014c0 <READ_EPS_BATTERY_CURRENT>
 80024fe:	4603      	mov	r3, r0
 8002500:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002504:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <handleCySatPacket+0x340>
                        return -1;
 800250c:	f04f 33ff 	mov.w	r3, #4294967295
 8002510:	f000 bed3 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(voltage);
 8002514:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002518:	eeb0 0a67 	vmov.f32	s0, s15
 800251c:	f001 face 	bl	8003abc <FloatToUnsigned16bits>
 8002520:	4603      	mov	r3, r0
 8002522:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
                    uint16_t data2 = FloatToUnsigned16bits(current);
 8002526:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800252a:	eeb0 0a67 	vmov.f32	s0, s15
 800252e:	f001 fac5 	bl	8003abc <FloatToUnsigned16bits>
 8002532:	4603      	mov	r3, r0
 8002534:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002538:	231e      	movs	r3, #30
 800253a:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x00; //Battery Pack Voltage/Current Response
 800253e:	2300      	movs	r3, #0
 8002540:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x04;
 8002544:	2304      	movs	r3, #4
 8002546:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 800254a:	2004      	movs	r0, #4
 800254c:	f00a ff7a 	bl	800d444 <malloc>
 8002550:	4603      	mov	r3, r0
 8002552:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002556:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800255a:	0a1b      	lsrs	r3, r3, #8
 800255c:	b29a      	uxth	r2, r3
 800255e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800256a:	3301      	adds	r3, #1
 800256c:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8002574:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	b29a      	uxth	r2, r3
 800257c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002580:	3302      	adds	r3, #2
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800258a:	3303      	adds	r3, #3
 800258c:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002594:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002598:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800259c:	f7fe feec 	bl	8001378 <generateCySatChecksum>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    return sendCySatPacket(outgoingPacket); //send the response
 80025a6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80025aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80025ae:	f7fe fe63 	bl	8001278 <sendCySatPacket>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f000 be81 	b.w	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x03: { //Solar Panel X Status Request
                    float x_voltage, x_neg_current, x_pos_current;
                    status = READ_EPS_SOLAR_X_VOLTAGE(&x_voltage); //read the Solar Panel X axis voltage
 80025b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe ffb1 	bl	8001524 <READ_EPS_SOLAR_X_VOLTAGE>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80025c8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <handleCySatPacket+0x404>
                        return -1;
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295
 80025d4:	f000 be71 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SOLAR_X_NEG_CURRENT(&x_neg_current); //read the Solar Panel X- current
 80025d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe ffd3 	bl	8001588 <READ_EPS_SOLAR_X_NEG_CURRENT>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80025e8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <handleCySatPacket+0x424>
                        return -1;
 80025f0:	f04f 33ff 	mov.w	r3, #4294967295
 80025f4:	f000 be61 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SOLAR_X_POS_CURRENT(&x_pos_current); //read the Solar Panel X+ current
 80025f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe fff5 	bl	80015ec <READ_EPS_SOLAR_X_POS_CURRENT>
 8002602:	4603      	mov	r3, r0
 8002604:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002608:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <handleCySatPacket+0x448>
                        return -1;
 8002610:	f04f 33ff 	mov.w	r3, #4294967295
 8002614:	f000 be51 	b.w	80032ba <handleCySatPacket+0x10e6>
 8002618:	080106b4 	.word	0x080106b4
                    }
                    uint16_t data1 = FloatToUnsigned16bits(x_voltage);
 800261c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002620:	eeb0 0a67 	vmov.f32	s0, s15
 8002624:	f001 fa4a 	bl	8003abc <FloatToUnsigned16bits>
 8002628:	4603      	mov	r3, r0
 800262a:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
                    uint16_t data2 = FloatToUnsigned16bits(x_neg_current);
 800262e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002632:	eeb0 0a67 	vmov.f32	s0, s15
 8002636:	f001 fa41 	bl	8003abc <FloatToUnsigned16bits>
 800263a:	4603      	mov	r3, r0
 800263c:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
                    uint16_t data3 = FloatToUnsigned16bits(x_pos_current);
 8002640:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002644:	eeb0 0a67 	vmov.f32	s0, s15
 8002648:	f001 fa38 	bl	8003abc <FloatToUnsigned16bits>
 800264c:	4603      	mov	r3, r0
 800264e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002652:	231e      	movs	r3, #30
 8002654:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x02; //Solar Panel X Status Response
 8002658:	2302      	movs	r3, #2
 800265a:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x06;
 800265e:	2306      	movs	r3, #6
 8002660:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 8002664:	2006      	movs	r0, #6
 8002666:	f00a feed 	bl	800d444 <malloc>
 800266a:	4603      	mov	r3, r0
 800266c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002670:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	b29a      	uxth	r2, r3
 8002678:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002680:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002684:	3301      	adds	r3, #1
 8002686:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 800268e:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8002692:	0a1b      	lsrs	r3, r3, #8
 8002694:	b29a      	uxth	r2, r3
 8002696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800269a:	3302      	adds	r3, #2
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 80026a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026a4:	3303      	adds	r3, #3
 80026a6:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 80026ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026ba:	3304      	adds	r3, #4
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 80026c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026c4:	3305      	adds	r3, #5
 80026c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 80026ce:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80026d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80026d6:	f7fe fe4f 	bl	8001378 <generateCySatChecksum>
 80026da:	4603      	mov	r3, r0
 80026dc:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 80026e0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80026e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80026e8:	f7fe fdc6 	bl	8001278 <sendCySatPacket>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 80026f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026f6:	4618      	mov	r0, r3
 80026f8:	f00a feac 	bl	800d454 <free>
                    return status; //send the response
 80026fc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002700:	f000 bddb 	b.w	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x05: { //Solar Panel Y Status Request
                    float y_voltage, y_neg_current, y_pos_current;
                    status = READ_EPS_SOLAR_Y_VOLTAGE(&y_voltage); //read the Solar Panel Y axis voltage
 8002704:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe ffa1 	bl	8001650 <READ_EPS_SOLAR_Y_VOLTAGE>
 800270e:	4603      	mov	r3, r0
 8002710:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002714:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <handleCySatPacket+0x550>
                        return -1;
 800271c:	f04f 33ff 	mov.w	r3, #4294967295
 8002720:	f000 bdcb 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SOLAR_Y_NEG_CURRENT(&y_neg_current); //read the Solar Panel Y- current
 8002724:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002728:	4618      	mov	r0, r3
 800272a:	f7fe ffc3 	bl	80016b4 <READ_EPS_SOLAR_Y_NEG_CURRENT>
 800272e:	4603      	mov	r3, r0
 8002730:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002734:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <handleCySatPacket+0x570>
                        return -1;
 800273c:	f04f 33ff 	mov.w	r3, #4294967295
 8002740:	f000 bdbb 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SOLAR_Y_POS_CURRENT(&y_pos_current); //read the Solar Panel Y+ current
 8002744:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe ffe5 	bl	8001718 <READ_EPS_SOLAR_Y_POS_CURRENT>
 800274e:	4603      	mov	r3, r0
 8002750:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002754:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <handleCySatPacket+0x590>
                        return -1;
 800275c:	f04f 33ff 	mov.w	r3, #4294967295
 8002760:	f000 bdab 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(y_voltage);
 8002764:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002768:	eeb0 0a67 	vmov.f32	s0, s15
 800276c:	f001 f9a6 	bl	8003abc <FloatToUnsigned16bits>
 8002770:	4603      	mov	r3, r0
 8002772:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                    uint16_t data2 = FloatToUnsigned16bits(y_neg_current);
 8002776:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800277a:	eeb0 0a67 	vmov.f32	s0, s15
 800277e:	f001 f99d 	bl	8003abc <FloatToUnsigned16bits>
 8002782:	4603      	mov	r3, r0
 8002784:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
                    uint16_t data3 = FloatToUnsigned16bits(y_pos_current);
 8002788:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800278c:	eeb0 0a67 	vmov.f32	s0, s15
 8002790:	f001 f994 	bl	8003abc <FloatToUnsigned16bits>
 8002794:	4603      	mov	r3, r0
 8002796:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 800279a:	231e      	movs	r3, #30
 800279c:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x04; //Solar Panel Y Status Response
 80027a0:	2304      	movs	r3, #4
 80027a2:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x06;
 80027a6:	2306      	movs	r3, #6
 80027a8:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 80027ac:	2006      	movs	r0, #6
 80027ae:	f00a fe49 	bl	800d444 <malloc>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 80027b8:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	b29a      	uxth	r2, r3
 80027c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 80027c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027cc:	3301      	adds	r3, #1
 80027ce:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 80027d6:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	b29a      	uxth	r2, r3
 80027de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027e2:	3302      	adds	r3, #2
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 80027e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027ec:	3303      	adds	r3, #3
 80027ee:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 80027f6:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002802:	3304      	adds	r3, #4
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8002808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800280c:	3305      	adds	r3, #5
 800280e:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002816:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800281a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800281e:	f7fe fdab 	bl	8001378 <generateCySatChecksum>
 8002822:	4603      	mov	r3, r0
 8002824:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 8002828:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800282c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002830:	f7fe fd22 	bl	8001278 <sendCySatPacket>
 8002834:	4603      	mov	r3, r0
 8002836:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 800283a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800283e:	4618      	mov	r0, r3
 8002840:	f00a fe08 	bl	800d454 <free>
                    return status; //send the response
 8002844:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002848:	f000 bd37 	b.w	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x07: { //Solar Panel Z Status Request
                    float z_voltage, z_neg_current, z_pos_current;
                    status = READ_EPS_SOLAR_Z_VOLTAGE(&z_voltage); //read the Solar Panel Z axis voltage
 800284c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe ff93 	bl	800177c <READ_EPS_SOLAR_Z_VOLTAGE>
 8002856:	4603      	mov	r3, r0
 8002858:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 800285c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <handleCySatPacket+0x698>
                        return -1;
 8002864:	f04f 33ff 	mov.w	r3, #4294967295
 8002868:	f000 bd27 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SOLAR_Z_NEG_CURRENT(&z_neg_current); //read the Solar Panel Z- current
 800286c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe ffb5 	bl	80017e0 <READ_EPS_SOLAR_Z_NEG_CURRENT>
 8002876:	4603      	mov	r3, r0
 8002878:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 800287c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <handleCySatPacket+0x6b8>
                        return -1;
 8002884:	f04f 33ff 	mov.w	r3, #4294967295
 8002888:	f000 bd17 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SOLAR_Z_POS_CURRENT(&z_pos_current); //read the Solar Panel Z+ current
 800288c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002890:	4618      	mov	r0, r3
 8002892:	f7fe ffd7 	bl	8001844 <READ_EPS_SOLAR_Z_POS_CURRENT>
 8002896:	4603      	mov	r3, r0
 8002898:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 800289c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <handleCySatPacket+0x6d8>
                        return -1;
 80028a4:	f04f 33ff 	mov.w	r3, #4294967295
 80028a8:	f000 bd07 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(z_voltage);
 80028ac:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80028b0:	eeb0 0a67 	vmov.f32	s0, s15
 80028b4:	f001 f902 	bl	8003abc <FloatToUnsigned16bits>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
                    uint16_t data2 = FloatToUnsigned16bits(z_neg_current);
 80028be:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80028c2:	eeb0 0a67 	vmov.f32	s0, s15
 80028c6:	f001 f8f9 	bl	8003abc <FloatToUnsigned16bits>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
                    uint16_t data3 = FloatToUnsigned16bits(z_pos_current);
 80028d0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80028d4:	eeb0 0a67 	vmov.f32	s0, s15
 80028d8:	f001 f8f0 	bl	8003abc <FloatToUnsigned16bits>
 80028dc:	4603      	mov	r3, r0
 80028de:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80028e2:	231e      	movs	r3, #30
 80028e4:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x06; //Solar Panel Z Status Response
 80028e8:	2306      	movs	r3, #6
 80028ea:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x06;
 80028ee:	2306      	movs	r3, #6
 80028f0:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 80028f4:	2006      	movs	r0, #6
 80028f6:	f00a fda5 	bl	800d444 <malloc>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002900:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	b29a      	uxth	r2, r3
 8002908:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002914:	3301      	adds	r3, #1
 8002916:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 800291e:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	b29a      	uxth	r2, r3
 8002926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800292a:	3302      	adds	r3, #2
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002930:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002934:	3303      	adds	r3, #3
 8002936:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 800293e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8002942:	0a1b      	lsrs	r3, r3, #8
 8002944:	b29a      	uxth	r2, r3
 8002946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800294a:	3304      	adds	r3, #4
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8002950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002954:	3305      	adds	r3, #5
 8002956:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 800295e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002962:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002966:	f7fe fd07 	bl	8001378 <generateCySatChecksum>
 800296a:	4603      	mov	r3, r0
 800296c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 8002970:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002974:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002978:	f7fe fc7e 	bl	8001278 <sendCySatPacket>
 800297c:	4603      	mov	r3, r0
 800297e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 8002982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002986:	4618      	mov	r0, r3
 8002988:	f00a fd64 	bl	800d454 <free>
                    return status; //send the response
 800298c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002990:	f000 bc93 	b.w	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x09: { //BUS Current Request
                    float current_3, current_5;
                    status = READ_EPS_3V_CURRENT(&current_3); //read the 3.3v BUS current
 8002994:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002998:	4618      	mov	r0, r3
 800299a:	f7fe ff85 	bl	80018a8 <READ_EPS_3V_CURRENT>
 800299e:	4603      	mov	r3, r0
 80029a0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80029a4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <handleCySatPacket+0x7e0>
                        return -1;
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
 80029b0:	f000 bc83 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_5V_CURRENT(&current_5); //read the 5v BUS current
 80029b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe ffa7 	bl	800190c <READ_EPS_5V_CURRENT>
 80029be:	4603      	mov	r3, r0
 80029c0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80029c4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <handleCySatPacket+0x800>
                        return -1;
 80029cc:	f04f 33ff 	mov.w	r3, #4294967295
 80029d0:	f000 bc73 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(current_3);
 80029d4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80029d8:	eeb0 0a67 	vmov.f32	s0, s15
 80029dc:	f001 f86e 	bl	8003abc <FloatToUnsigned16bits>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
                    uint16_t data2 = FloatToUnsigned16bits(current_5);
 80029e6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80029ea:	eeb0 0a67 	vmov.f32	s0, s15
 80029ee:	f001 f865 	bl	8003abc <FloatToUnsigned16bits>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80029f8:	231e      	movs	r3, #30
 80029fa:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x08; //BUS Current Response
 80029fe:	2308      	movs	r3, #8
 8002a00:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x04;
 8002a04:	2304      	movs	r3, #4
 8002a06:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 8002a0a:	2004      	movs	r0, #4
 8002a0c:	f00a fd1a 	bl	800d444 <malloc>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002a16:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002a1a:	0a1b      	lsrs	r3, r3, #8
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8002a34:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a40:	3302      	adds	r3, #2
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002a46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a4a:	3303      	adds	r3, #3
 8002a4c:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002a54:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002a58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a5c:	f7fe fc8c 	bl	8001378 <generateCySatChecksum>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 8002a66:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002a6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a6e:	f7fe fc03 	bl	8001278 <sendCySatPacket>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 8002a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f00a fce9 	bl	800d454 <free>
                    return status; //send the response
 8002a82:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002a86:	f000 bc18 	b.w	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x0B: { //Temperature Request
                    float mcu_temp, battery1_temp, battery2_temp, battery3_temp, battery4_temp;
                    status = READ_EPS_MCU_TEMP(&mcu_temp); //read the MCU Temperature
 8002a8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe ff6e 	bl	8001970 <READ_EPS_MCU_TEMP>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002a9a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <handleCySatPacket+0x8d6>
                        return -1;
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa6:	f000 bc08 	b.w	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_BATT_1_TEMP(&battery1_temp); //read the Battery Cell 1 Temperature
 8002aaa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe ff9c 	bl	80019ec <READ_EPS_BATT_1_TEMP>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002aba:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <handleCySatPacket+0x8f4>
                        return -1;
 8002ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac6:	e3f8      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_BATT_2_TEMP(&battery2_temp); //read the Battery Cell 2 Temperature
 8002ac8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fe ffbf 	bl	8001a50 <READ_EPS_BATT_2_TEMP>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002ad8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <handleCySatPacket+0x912>
                        return -1;
 8002ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae4:	e3e9      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_BATT_3_TEMP(&battery3_temp); //read the Battery Cell 3 Temperature
 8002ae6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe ffe2 	bl	8001ab4 <READ_EPS_BATT_3_TEMP>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002af6:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <handleCySatPacket+0x930>
                        return -1;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295
 8002b02:	e3da      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_BATT_4_TEMP(&battery4_temp); //read the Battery Cell 4 Temperature
 8002b04:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff f805 	bl	8001b18 <READ_EPS_BATT_4_TEMP>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002b14:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <handleCySatPacket+0x94e>
                        return -1;
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b20:	e3cb      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(mcu_temp);
 8002b22:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002b26:	eeb0 0a67 	vmov.f32	s0, s15
 8002b2a:	f000 ffc7 	bl	8003abc <FloatToUnsigned16bits>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
                    uint16_t data2 = FloatToUnsigned16bits(battery1_temp);
 8002b34:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002b38:	eeb0 0a67 	vmov.f32	s0, s15
 8002b3c:	f000 ffbe 	bl	8003abc <FloatToUnsigned16bits>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
                    uint16_t data3 = FloatToUnsigned16bits(battery2_temp);
 8002b46:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b4e:	f000 ffb5 	bl	8003abc <FloatToUnsigned16bits>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
                    uint16_t data4 = FloatToUnsigned16bits(battery3_temp);
 8002b58:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b60:	f000 ffac 	bl	8003abc <FloatToUnsigned16bits>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
                    uint16_t data5 = FloatToUnsigned16bits(battery4_temp);
 8002b6a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b72:	f000 ffa3 	bl	8003abc <FloatToUnsigned16bits>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002b7c:	231e      	movs	r3, #30
 8002b7e:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x0A; //Temperature Response
 8002b82:	230a      	movs	r3, #10
 8002b84:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x0A;
 8002b88:	230a      	movs	r3, #10
 8002b8a:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 10);
 8002b8e:	200a      	movs	r0, #10
 8002b90:	f00a fc58 	bl	800d444 <malloc>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002b9a:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8002bb8:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002bbc:	0a1b      	lsrs	r3, r3, #8
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bce:	3303      	adds	r3, #3
 8002bd0:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 8002bd8:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002be4:	3304      	adds	r3, #4
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8002bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bee:	3305      	adds	r3, #5
 8002bf0:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[6] = (data4 & 0xFF00) >> 8;
 8002bf8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c04:	3306      	adds	r3, #6
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[7] = data4 & 0xFF;
 8002c0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c0e:	3307      	adds	r3, #7
 8002c10:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[8] = (data5 & 0xFF00) >> 8;
 8002c18:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c24:	3308      	adds	r3, #8
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[9] = data5 & 0xFF;
 8002c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c2e:	3309      	adds	r3, #9
 8002c30:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002c38:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002c3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c40:	f7fe fb9a 	bl	8001378 <generateCySatChecksum>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 8002c4a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002c4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c52:	f7fe fb11 	bl	8001278 <sendCySatPacket>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 8002c5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c60:	4618      	mov	r0, r3
 8002c62:	f00a fbf7 	bl	800d454 <free>
                    return status; //send the response
 8002c66:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002c6a:	e326      	b.n	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x0D: { //Input, Output, and Default Conditions Request
                    uint16_t input, output1, output2, defaults1, defaults2;
                    status = READ_EPS_INPUT_CONDITION(&input); //read the Input Conditions
 8002c6c:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fe ff83 	bl	8001b7c <READ_EPS_INPUT_CONDITION>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002c7c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <handleCySatPacket+0xab6>
                        return -1;
 8002c84:	f04f 33ff 	mov.w	r3, #4294967295
 8002c88:	e317      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_OUTPUT_CONDITION1(&output1); //read the Output 1 Conditions
 8002c8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe ff99 	bl	8001bc6 <READ_EPS_OUTPUT_CONDITION1>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002c9a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <handleCySatPacket+0xad4>
                        return -1;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca6:	e308      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_OUTPUT_CONDITION2(&output2); //read the Output 2 Conditions
 8002ca8:	f107 035a 	add.w	r3, r7, #90	; 0x5a
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe ffaf 	bl	8001c10 <READ_EPS_OUTPUT_CONDITION2>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002cb8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <handleCySatPacket+0xaf2>
                        return -1;
 8002cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc4:	e2f9      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_DEFAULTS1(&defaults1); //read the Defaults 1 Conditions
 8002cc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff f87e 	bl	8001dcc <READ_EPS_DEFAULTS1>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002cd6:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <handleCySatPacket+0xb10>
                        return -1;
 8002cde:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce2:	e2ea      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_DEFAULTS2(&defaults2); //read the Defaults 2 Conditions
 8002ce4:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff f894 	bl	8001e16 <READ_EPS_DEFAULTS2>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002cf4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <handleCySatPacket+0xb2e>
                        return -1;
 8002cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002d00:	e2db      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002d02:	231e      	movs	r3, #30
 8002d04:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x0C; //Input, Output, and Default Conditions Response
 8002d08:	230c      	movs	r3, #12
 8002d0a:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x06;
 8002d0e:	2306      	movs	r3, #6
 8002d10:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 8002d14:	2006      	movs	r0, #6
 8002d16:	f00a fb95 	bl	800d444 <malloc>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = input & 0xFF;
 8002d20:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8002d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = (output1 & 0xFF00) >> 8;
 8002d2c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002d30:	0a1b      	lsrs	r3, r3, #8
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d38:	3301      	adds	r3, #1
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = output1 & 0xFF;
 8002d3e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d46:	3302      	adds	r3, #2
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = output2 & 0xFF;
 8002d4c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8002d50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d54:	3303      	adds	r3, #3
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = defaults1 & 0xFF;
 8002d5a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8002d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d62:	3304      	adds	r3, #4
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = defaults2 & 0xFF;
 8002d68:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8002d6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d70:	3305      	adds	r3, #5
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002d76:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002d7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d7e:	f7fe fafb 	bl	8001378 <generateCySatChecksum>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 8002d88:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002d8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d90:	f7fe fa72 	bl	8001278 <sendCySatPacket>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 8002d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f00a fb58 	bl	800d454 <free>
                    return status; //send the response
 8002da4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002da8:	e287      	b.n	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x0F: { //Counter Check Request
                    uint16_t power_on, under_voltage, short_circuited, over_temp, charging_cycles;
                    status = READ_EPS_POWER_ON_CYCLES(&power_on); //read the MCU Temperature
 8002daa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe ff53 	bl	8001c5a <READ_EPS_POWER_ON_CYCLES>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002dba:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <handleCySatPacket+0xbf4>
                        return -1;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc6:	e278      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_UNDER_VOLT_COUNT(&under_voltage); //read the Battery Cell 1 Temperature
 8002dc8:	f107 0352 	add.w	r3, r7, #82	; 0x52
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe ff69 	bl	8001ca4 <READ_EPS_UNDER_VOLT_COUNT>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002dd8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <handleCySatPacket+0xc12>
                        return -1;
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295
 8002de4:	e269      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SHORT_CIRCUIT_COUNT(&short_circuited); //read the Battery Cell 2 Temperature
 8002de6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe ff7f 	bl	8001cee <READ_EPS_SHORT_CIRCUIT_COUNT>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002df6:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <handleCySatPacket+0xc30>
                        return -1;
 8002dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002e02:	e25a      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_OVER_TEMP_COUNT(&over_temp); //read the Battery Cell 3 Temperature
 8002e04:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe ff95 	bl	8001d38 <READ_EPS_OVER_TEMP_COUNT>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002e14:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <handleCySatPacket+0xc4e>
                        return -1;
 8002e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e20:	e24b      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_CHARGE_CYCLES(&charging_cycles); //read the Battery Cell 4 Temperature
 8002e22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe ffab 	bl	8001d82 <READ_EPS_CHARGE_CYCLES>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002e32:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <handleCySatPacket+0xc6c>
                        return -1;
 8002e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3e:	e23c      	b.n	80032ba <handleCySatPacket+0x10e6>
                    }

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002e40:	231e      	movs	r3, #30
 8002e42:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x0E; //Temperature Response
 8002e46:	230e      	movs	r3, #14
 8002e48:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x0A;
 8002e4c:	230a      	movs	r3, #10
 8002e4e:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 10);
 8002e52:	200a      	movs	r0, #10
 8002e54:	f00a faf6 	bl	800d444 <malloc>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (power_on & 0xFF00) >> 8;
 8002e5e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002e62:	0a1b      	lsrs	r3, r3, #8
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = power_on & 0xFF;
 8002e6e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8002e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e76:	3301      	adds	r3, #1
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (under_voltage & 0xFF00) >> 8;
 8002e7c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e88:	3302      	adds	r3, #2
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = under_voltage & 0xFF;
 8002e8e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8002e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e96:	3303      	adds	r3, #3
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (short_circuited & 0xFF00) >> 8;
 8002e9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = short_circuited & 0xFF;
 8002eae:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002eb6:	3305      	adds	r3, #5
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[6] = (over_temp & 0xFF00) >> 8;
 8002ebc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ec8:	3306      	adds	r3, #6
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[7] = over_temp & 0xFF;
 8002ece:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ed6:	3307      	adds	r3, #7
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[8] = (charging_cycles & 0xFF00) >> 8;
 8002edc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ee8:	3308      	adds	r3, #8
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[9] = charging_cycles & 0xFF;
 8002eee:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ef6:	3309      	adds	r3, #9
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002efc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002f00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f04:	f7fe fa38 	bl	8001378 <generateCySatChecksum>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 8002f0e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002f12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f16:	f7fe f9af 	bl	8001278 <sendCySatPacket>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 8002f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f24:	4618      	mov	r0, r3
 8002f26:	f00a fa95 	bl	800d454 <free>
                    return status; //send the response
 8002f2a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002f2e:	e1c4      	b.n	80032ba <handleCySatPacket+0x10e6>
                }
                case 0x11: { //Enable/Disable Request
                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002f30:	231e      	movs	r3, #30
 8002f32:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x10; //Enable/Disable Response
 8002f36:	2310      	movs	r3, #16
 8002f38:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x01;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t));
 8002f42:	2001      	movs	r0, #1
 8002f44:	f00a fa7e 	bl	800d444 <malloc>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    if(validateCySatChecksum(packet)==0){
 8002f4e:	1d3b      	adds	r3, r7, #4
 8002f50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f54:	f7fe fa45 	bl	80013e2 <validateCySatChecksum>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d104      	bne.n	8002f68 <handleCySatPacket+0xd94>
                        outgoingPacket.Data[0] = 0;
 8002f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
 8002f66:	e183      	b.n	8003270 <handleCySatPacket+0x109c>
                    }
                    else{
                        switch(packet.Data[0]){
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	2b0e      	cmp	r3, #14
 8002f70:	f200 817e 	bhi.w	8003270 <handleCySatPacket+0x109c>
 8002f74:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <handleCySatPacket+0xda8>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002fb9 	.word	0x08002fb9
 8002f80:	08003271 	.word	0x08003271
 8002f84:	08003271 	.word	0x08003271
 8002f88:	08002ff3 	.word	0x08002ff3
 8002f8c:	08003271 	.word	0x08003271
 8002f90:	0800302d 	.word	0x0800302d
 8002f94:	08003067 	.word	0x08003067
 8002f98:	080030a1 	.word	0x080030a1
 8002f9c:	080030db 	.word	0x080030db
 8002fa0:	08003115 	.word	0x08003115
 8002fa4:	0800314f 	.word	0x0800314f
 8002fa8:	08003189 	.word	0x08003189
 8002fac:	080031c3 	.word	0x080031c3
 8002fb0:	080031fd 	.word	0x080031fd
 8002fb4:	08003237 	.word	0x08003237
                            case 0x01:{ //Enable/Disable Battery BUS
                                if(packet.Data[1] == 0){
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <handleCySatPacket+0xdfc>
                                    outgoingPacket.Data[0] = disable_EPS_Vbatt_Bus();
 8002fc2:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8002fc6:	f7fe ff54 	bl	8001e72 <disable_EPS_Vbatt_Bus>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Vbatt_Bus();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002fce:	e14f      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d106      	bne.n	8002fe8 <handleCySatPacket+0xe14>
                                    outgoingPacket.Data[0] = enable_EPS_Vbatt_Bus();
 8002fda:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8002fde:	f7fe ff3f 	bl	8001e60 <enable_EPS_Vbatt_Bus>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	7023      	strb	r3, [r4, #0]
                                break;
 8002fe6:	e143      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 8002fe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
                                break;
 8002ff0:	e13e      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x04:{ //Enable/Disable 5v BUS
                                if(packet.Data[1] == 0){
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d106      	bne.n	800300a <handleCySatPacket+0xe36>
                                    outgoingPacket.Data[0] = disable_EPS_5v_Bus();
 8002ffc:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003000:	f7fe ff49 	bl	8001e96 <disable_EPS_5v_Bus>
 8003004:	4603      	mov	r3, r0
 8003006:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_5v_Bus();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8003008:	e132      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	3301      	adds	r3, #1
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d106      	bne.n	8003022 <handleCySatPacket+0xe4e>
                                    outgoingPacket.Data[0] = enable_EPS_5v_Bus();
 8003014:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003018:	f7fe ff34 	bl	8001e84 <enable_EPS_5v_Bus>
 800301c:	4603      	mov	r3, r0
 800301e:	7023      	strb	r3, [r4, #0]
                                break;
 8003020:	e126      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 8003022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003026:	2200      	movs	r2, #0
 8003028:	701a      	strb	r2, [r3, #0]
                                break;
 800302a:	e121      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x06:{ //Enable/Disable Fast/Slow Battery Charge 1
                                if(packet.Data[1] == 0){
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	3301      	adds	r3, #1
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <handleCySatPacket+0xe70>
                                    outgoingPacket.Data[0] = disable_EPS_Fast_Charge1();
 8003036:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800303a:	f7fe ff50 	bl	8001ede <disable_EPS_Fast_Charge1>
 800303e:	4603      	mov	r3, r0
 8003040:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8003042:	e115      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	3301      	adds	r3, #1
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d106      	bne.n	800305c <handleCySatPacket+0xe88>
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge1();
 800304e:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003052:	f7fe ff3b 	bl	8001ecc <enable_EPS_Fast_Charge1>
 8003056:	4603      	mov	r3, r0
 8003058:	7023      	strb	r3, [r4, #0]
                                break;
 800305a:	e109      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 800305c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
                                break;
 8003064:	e104      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x07:{ //Enable/Disable Fast/Slow Battery Charge 2
                                if(packet.Data[1] == 0){
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	3301      	adds	r3, #1
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d106      	bne.n	800307e <handleCySatPacket+0xeaa>
                                    outgoingPacket.Data[0] = disable_EPS_Fast_Charge2();
 8003070:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003074:	f7fe ff45 	bl	8001f02 <disable_EPS_Fast_Charge2>
 8003078:	4603      	mov	r3, r0
 800307a:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800307c:	e0f8      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	3301      	adds	r3, #1
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d106      	bne.n	8003096 <handleCySatPacket+0xec2>
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge2();
 8003088:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800308c:	f7fe ff30 	bl	8001ef0 <enable_EPS_Fast_Charge2>
 8003090:	4603      	mov	r3, r0
 8003092:	7023      	strb	r3, [r4, #0]
                                break;
 8003094:	e0ec      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 8003096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
                                break;
 800309e:	e0e7      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x08:{ //Enable/Disable Out1/Boost Board
                                if(packet.Data[1] == 0){
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	3301      	adds	r3, #1
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <handleCySatPacket+0xee4>
                                    outgoingPacket.Data[0] = disable_Boost_Board();
 80030aa:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80030ae:	f7fe ff3a 	bl	8001f26 <disable_Boost_Board>
 80030b2:	4603      	mov	r3, r0
 80030b4:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_Boost_Board();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80030b6:	e0db      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	3301      	adds	r3, #1
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d106      	bne.n	80030d0 <handleCySatPacket+0xefc>
                                    outgoingPacket.Data[0] = enable_Boost_Board();
 80030c2:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80030c6:	f7fe ff25 	bl	8001f14 <enable_Boost_Board>
 80030ca:	4603      	mov	r3, r0
 80030cc:	7023      	strb	r3, [r4, #0]
                                break;
 80030ce:	e0cf      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 80030d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
                                break;
 80030d8:	e0ca      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x09:{ //Enable/Disable Out2
                                if(packet.Data[1] == 0){
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	3301      	adds	r3, #1
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d106      	bne.n	80030f2 <handleCySatPacket+0xf1e>
                                    outgoingPacket.Data[0] = disable_Payload();
 80030e4:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80030e8:	f7fe ff2f 	bl	8001f4a <disable_Payload>
 80030ec:	4603      	mov	r3, r0
 80030ee:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_Payload();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80030f0:	e0be      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	3301      	adds	r3, #1
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d106      	bne.n	800310a <handleCySatPacket+0xf36>
                                    outgoingPacket.Data[0] = enable_Payload();
 80030fc:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003100:	f7fe ff1a 	bl	8001f38 <enable_Payload>
 8003104:	4603      	mov	r3, r0
 8003106:	7023      	strb	r3, [r4, #0]
                                break;
 8003108:	e0b2      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 800310a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
                                break;
 8003112:	e0ad      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x0A:{ //Enable/Disable Out3
                                if(packet.Data[1] == 0){
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	3301      	adds	r3, #1
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <handleCySatPacket+0xf58>
                                    outgoingPacket.Data[0] = disable_EPS_Output_3();
 800311e:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003122:	f7fe ff24 	bl	8001f6e <disable_EPS_Output_3>
 8003126:	4603      	mov	r3, r0
 8003128:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_3();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800312a:	e0a1      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	3301      	adds	r3, #1
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d106      	bne.n	8003144 <handleCySatPacket+0xf70>
                                    outgoingPacket.Data[0] = enable_EPS_Output_3();
 8003136:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800313a:	f7fe ff0f 	bl	8001f5c <enable_EPS_Output_3>
 800313e:	4603      	mov	r3, r0
 8003140:	7023      	strb	r3, [r4, #0]
                                break;
 8003142:	e095      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 8003144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
                                break;
 800314c:	e090      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x0B:{ //Enable/Disable Out5/UHF
                                if(packet.Data[1] == 0){
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	3301      	adds	r3, #1
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d106      	bne.n	8003166 <handleCySatPacket+0xf92>
                                    outgoingPacket.Data[0] = disable_UHF();
 8003158:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800315c:	f7fe ff19 	bl	8001f92 <disable_UHF>
 8003160:	4603      	mov	r3, r0
 8003162:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_UHF();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8003164:	e084      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	3301      	adds	r3, #1
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d106      	bne.n	800317e <handleCySatPacket+0xfaa>
                                    outgoingPacket.Data[0] = enable_UHF();
 8003170:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003174:	f7fe ff04 	bl	8001f80 <enable_UHF>
 8003178:	4603      	mov	r3, r0
 800317a:	7023      	strb	r3, [r4, #0]
                                break;
 800317c:	e078      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 800317e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
                                break;
 8003186:	e073      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x0C:{ //Enable/Disable Out6
                                if(packet.Data[1] == 0){
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	3301      	adds	r3, #1
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <handleCySatPacket+0xfcc>
                                    outgoingPacket.Data[0] = disable_EPS_Output_6();
 8003192:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003196:	f7fe ff0e 	bl	8001fb6 <disable_EPS_Output_6>
 800319a:	4603      	mov	r3, r0
 800319c:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_6();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800319e:	e067      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	3301      	adds	r3, #1
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d106      	bne.n	80031b8 <handleCySatPacket+0xfe4>
                                    outgoingPacket.Data[0] = enable_EPS_Output_6();
 80031aa:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80031ae:	f7fe fef9 	bl	8001fa4 <enable_EPS_Output_6>
 80031b2:	4603      	mov	r3, r0
 80031b4:	7023      	strb	r3, [r4, #0]
                                break;
 80031b6:	e05b      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 80031b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
                                break;
 80031c0:	e056      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x0D:{ //Enable/Disable Heater 1
                                if(packet.Data[1] == 0){
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	3301      	adds	r3, #1
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d106      	bne.n	80031da <handleCySatPacket+0x1006>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_1();
 80031cc:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80031d0:	f7fe ff03 	bl	8001fda <disable_EPS_Batt_Heater_1>
 80031d4:	4603      	mov	r3, r0
 80031d6:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80031d8:	e04a      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	3301      	adds	r3, #1
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d106      	bne.n	80031f2 <handleCySatPacket+0x101e>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_1();
 80031e4:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80031e8:	f7fe feee 	bl	8001fc8 <enable_EPS_Batt_Heater_1>
 80031ec:	4603      	mov	r3, r0
 80031ee:	7023      	strb	r3, [r4, #0]
                                break;
 80031f0:	e03e      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 80031f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
                                break;
 80031fa:	e039      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x0E:{ //Enable/Disable Heater 2
                                if(packet.Data[1] == 0){
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	3301      	adds	r3, #1
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <handleCySatPacket+0x1040>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_2();
 8003206:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800320a:	f7fe fef8 	bl	8001ffe <disable_EPS_Batt_Heater_2>
 800320e:	4603      	mov	r3, r0
 8003210:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8003212:	e02d      	b.n	8003270 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	3301      	adds	r3, #1
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d106      	bne.n	800322c <handleCySatPacket+0x1058>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_2();
 800321e:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003222:	f7fe fee3 	bl	8001fec <enable_EPS_Batt_Heater_2>
 8003226:	4603      	mov	r3, r0
 8003228:	7023      	strb	r3, [r4, #0]
                                break;
 800322a:	e021      	b.n	8003270 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 800322c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]
                                break;
 8003234:	e01c      	b.n	8003270 <handleCySatPacket+0x109c>
                            }
                            case 0x0F:{ //Enable/Disable Heater 3
                                if(packet.Data[1] == 0){
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	3301      	adds	r3, #1
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d106      	bne.n	800324e <handleCySatPacket+0x107a>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_3();
 8003240:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003244:	f7fe feed 	bl	8002022 <disable_EPS_Batt_Heater_3>
 8003248:	4603      	mov	r3, r0
 800324a:	7023      	strb	r3, [r4, #0]
                                }
                                else{

                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800324c:	e00f      	b.n	800326e <handleCySatPacket+0x109a>
                                else if(packet.Data[1] == 1){
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	3301      	adds	r3, #1
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d106      	bne.n	8003266 <handleCySatPacket+0x1092>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_3();
 8003258:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800325c:	f7fe fed8 	bl	8002010 <enable_EPS_Batt_Heater_3>
 8003260:	4603      	mov	r3, r0
 8003262:	7023      	strb	r3, [r4, #0]
                                break;
 8003264:	e003      	b.n	800326e <handleCySatPacket+0x109a>
                                    outgoingPacket.Data[0] = 0x00;
 8003266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
                                break;
 800326e:	bf00      	nop
                            }
                        }
                    }
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8003270:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003274:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003278:	f7fe f87e 	bl	8001378 <generateCySatChecksum>
 800327c:	4603      	mov	r3, r0
 800327e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 8003282:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003286:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800328a:	f7fd fff5 	bl	8001278 <sendCySatPacket>
 800328e:	4603      	mov	r3, r0
 8003290:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 8003294:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003298:	4618      	mov	r0, r3
 800329a:	f00a f8db 	bl	800d454 <free>
                    return status; //send the response
 800329e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80032a2:	e00a      	b.n	80032ba <handleCySatPacket+0x10e6>
        case EOL_SUBSYSTEM_TYPE: //End of Life

            break;

        default:
            return -1;
 80032a4:	f04f 33ff 	mov.w	r3, #4294967295
 80032a8:	e007      	b.n	80032ba <handleCySatPacket+0x10e6>
            break;
 80032aa:	bf00      	nop
 80032ac:	e004      	b.n	80032b8 <handleCySatPacket+0x10e4>
            break;
 80032ae:	bf00      	nop
 80032b0:	e002      	b.n	80032b8 <handleCySatPacket+0x10e4>
            break;
 80032b2:	bf00      	nop
 80032b4:	e000      	b.n	80032b8 <handleCySatPacket+0x10e4>
            break;
 80032b6:	bf00      	nop
    }

    return 0;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	37e4      	adds	r7, #228	; 0xe4
 80032be:	46bd      	mov	sp, r7
 80032c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032c2:	bf00      	nop

080032c4 <START_BEACON>:
/***************************************** BEACON COMMANDS **********************************************************************/

/**
 * @brief Turns on the beacon.
 */
HAL_StatusTypeDef START_BEACON() {
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08e      	sub	sp, #56	; 0x38
 80032c8:	af00      	add	r7, sp, #0
    uint8_t data[23];
    uint8_t bits[4];
    HAL_StatusTypeDef status = GET_UHF_STATUS(data);
 80032ca:	f107 0320 	add.w	r3, r7, #32
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f98c 	bl	80035ec <GET_UHF_STATUS>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status != HAL_OK) {
 80032da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <START_BEACON+0x2a>
        debug_printf("Beacon Start Fail. Init Status is not ok");
 80032e2:	4824      	ldr	r0, [pc, #144]	; (8003374 <START_BEACON+0xb0>)
 80032e4:	f000 fb30 	bl	8003948 <debug_printf>
        return status;
 80032e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032ec:	e03e      	b.n	800336c <START_BEACON+0xa8>
    }

    // Perserve other settings and only enable beacon
    bits[0] = data[9];
 80032ee:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80032f2:	773b      	strb	r3, [r7, #28]
    bits[1] = data[10];
 80032f4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80032f8:	777b      	strb	r3, [r7, #29]
    bits[2] = ((data[11] - 0x30) | 0x04) + 0x30; //set bit 6(BCN) to 1
 80032fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032fe:	3b30      	subs	r3, #48	; 0x30
 8003300:	b2db      	uxtb	r3, r3
 8003302:	b25b      	sxtb	r3, r3
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	b25b      	sxtb	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	3330      	adds	r3, #48	; 0x30
 800330e:	b2db      	uxtb	r3, r3
 8003310:	77bb      	strb	r3, [r7, #30]
    bits[3] = data[13];
 8003312:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003316:	77fb      	strb	r3, [r7, #31]

    uint8_t command[22];
    command[0] = 'E';
 8003318:	2345      	movs	r3, #69	; 0x45
 800331a:	713b      	strb	r3, [r7, #4]
    command[1] = 'S';
 800331c:	2353      	movs	r3, #83	; 0x53
 800331e:	717b      	strb	r3, [r7, #5]
    command[2] = '+';
 8003320:	232b      	movs	r3, #43	; 0x2b
 8003322:	71bb      	strb	r3, [r7, #6]
    command[3] = 'W';
 8003324:	2357      	movs	r3, #87	; 0x57
 8003326:	71fb      	strb	r3, [r7, #7]
    command[4] = '2';
 8003328:	2332      	movs	r3, #50	; 0x32
 800332a:	723b      	strb	r3, [r7, #8]
    command[5] = '2';
 800332c:	2332      	movs	r3, #50	; 0x32
 800332e:	727b      	strb	r3, [r7, #9]
    command[6] = '0';
 8003330:	2330      	movs	r3, #48	; 0x30
 8003332:	72bb      	strb	r3, [r7, #10]
    command[7] = '0';
 8003334:	2330      	movs	r3, #48	; 0x30
 8003336:	72fb      	strb	r3, [r7, #11]
    command[8] = bits[0];
 8003338:	7f3b      	ldrb	r3, [r7, #28]
 800333a:	733b      	strb	r3, [r7, #12]
    command[9] = bits[1];
 800333c:	7f7b      	ldrb	r3, [r7, #29]
 800333e:	737b      	strb	r3, [r7, #13]
    command[10] = bits[2];
 8003340:	7fbb      	ldrb	r3, [r7, #30]
 8003342:	73bb      	strb	r3, [r7, #14]
    command[11] = bits[3];
 8003344:	7ffb      	ldrb	r3, [r7, #31]
 8003346:	73fb      	strb	r3, [r7, #15]
    command[12] = ' ';
 8003348:	2320      	movs	r3, #32
 800334a:	743b      	strb	r3, [r7, #16]
    crc32(command, 12, &command[13]);
 800334c:	1d3b      	adds	r3, r7, #4
 800334e:	f103 020d 	add.w	r2, r3, #13
 8003352:	1d3b      	adds	r3, r7, #4
 8003354:	210c      	movs	r1, #12
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fbda 	bl	8003b10 <crc32>
    command[21] = 0x0D;
 800335c:	230d      	movs	r3, #13
 800335e:	767b      	strb	r3, [r7, #25]

    return UHF_WRITE(command, 22);
 8003360:	1d3b      	adds	r3, r7, #4
 8003362:	2116      	movs	r1, #22
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fa8b 	bl	8003880 <UHF_WRITE>
 800336a:	4603      	mov	r3, r0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3738      	adds	r7, #56	; 0x38
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	080106f0 	.word	0x080106f0

08003378 <END_BEACON>:

/**
 * @brief Turns off the beacon.
 */
HAL_StatusTypeDef END_BEACON() {
 8003378:	b580      	push	{r7, lr}
 800337a:	b08e      	sub	sp, #56	; 0x38
 800337c:	af00      	add	r7, sp, #0
    uint8_t data[23];
    uint8_t bits[4];
    HAL_StatusTypeDef status = GET_UHF_STATUS(data);
 800337e:	f107 0320 	add.w	r3, r7, #32
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f932 	bl	80035ec <GET_UHF_STATUS>
 8003388:	4603      	mov	r3, r0
 800338a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status != HAL_OK) {
 800338e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <END_BEACON+0x24>
        return status;
 8003396:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800339a:	e03c      	b.n	8003416 <END_BEACON+0x9e>
    }

    // Perserve other settings and only enable beacon
    bits[0] = data[9];
 800339c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80033a0:	773b      	strb	r3, [r7, #28]
    bits[1] = data[10];
 80033a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80033a6:	777b      	strb	r3, [r7, #29]
    bits[2] = ((data[11] - 0x30) & 0xFB) + 0x30; //set bit 6(BCN) to 0
 80033a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80033ac:	3b30      	subs	r3, #48	; 0x30
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f023 0304 	bic.w	r3, r3, #4
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	3330      	adds	r3, #48	; 0x30
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	77bb      	strb	r3, [r7, #30]
    bits[3] = data[13];
 80033bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033c0:	77fb      	strb	r3, [r7, #31]

    uint8_t command[22];
    command[0] = 'E';
 80033c2:	2345      	movs	r3, #69	; 0x45
 80033c4:	713b      	strb	r3, [r7, #4]
    command[1] = 'S';
 80033c6:	2353      	movs	r3, #83	; 0x53
 80033c8:	717b      	strb	r3, [r7, #5]
    command[2] = '+';
 80033ca:	232b      	movs	r3, #43	; 0x2b
 80033cc:	71bb      	strb	r3, [r7, #6]
    command[3] = 'W';
 80033ce:	2357      	movs	r3, #87	; 0x57
 80033d0:	71fb      	strb	r3, [r7, #7]
    command[4] = '2';
 80033d2:	2332      	movs	r3, #50	; 0x32
 80033d4:	723b      	strb	r3, [r7, #8]
    command[5] = '2';
 80033d6:	2332      	movs	r3, #50	; 0x32
 80033d8:	727b      	strb	r3, [r7, #9]
    command[6] = '0';
 80033da:	2330      	movs	r3, #48	; 0x30
 80033dc:	72bb      	strb	r3, [r7, #10]
    command[7] = '0';
 80033de:	2330      	movs	r3, #48	; 0x30
 80033e0:	72fb      	strb	r3, [r7, #11]
    command[8] = bits[0];
 80033e2:	7f3b      	ldrb	r3, [r7, #28]
 80033e4:	733b      	strb	r3, [r7, #12]
    command[9] = bits[1];
 80033e6:	7f7b      	ldrb	r3, [r7, #29]
 80033e8:	737b      	strb	r3, [r7, #13]
    command[10] = bits[2];
 80033ea:	7fbb      	ldrb	r3, [r7, #30]
 80033ec:	73bb      	strb	r3, [r7, #14]
    command[11] = bits[3];
 80033ee:	7ffb      	ldrb	r3, [r7, #31]
 80033f0:	73fb      	strb	r3, [r7, #15]
    command[12] = ' ';
 80033f2:	2320      	movs	r3, #32
 80033f4:	743b      	strb	r3, [r7, #16]
    crc32(command, 12, &command[13]);
 80033f6:	1d3b      	adds	r3, r7, #4
 80033f8:	f103 020d 	add.w	r2, r3, #13
 80033fc:	1d3b      	adds	r3, r7, #4
 80033fe:	210c      	movs	r1, #12
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fb85 	bl	8003b10 <crc32>
    command[21] = 0x0D;
 8003406:	230d      	movs	r3, #13
 8003408:	767b      	strb	r3, [r7, #25]

    return UHF_WRITE(command, 22);
 800340a:	1d3b      	adds	r3, r7, #4
 800340c:	2116      	movs	r1, #22
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fa36 	bl	8003880 <UHF_WRITE>
 8003414:	4603      	mov	r3, r0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3738      	adds	r7, #56	; 0x38
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <SET_BEACON_PERIOD>:
 * minimum is: 1 second
 * Maximum is: 65535 seconds
 *
 * @param period : The period in seconds for the beacon to be set to.
 */
HAL_StatusTypeDef SET_BEACON_PERIOD(uint16_t period) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b08c      	sub	sp, #48	; 0x30
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	80fb      	strh	r3, [r7, #6]
    uint8_t command[26];
    command[0] = 'E';
 800342a:	2345      	movs	r3, #69	; 0x45
 800342c:	753b      	strb	r3, [r7, #20]
    command[1] = 'S';
 800342e:	2353      	movs	r3, #83	; 0x53
 8003430:	757b      	strb	r3, [r7, #21]
    command[2] = '+';
 8003432:	232b      	movs	r3, #43	; 0x2b
 8003434:	75bb      	strb	r3, [r7, #22]
    command[3] = 'W';
 8003436:	2357      	movs	r3, #87	; 0x57
 8003438:	75fb      	strb	r3, [r7, #23]
    command[4] = '2';
 800343a:	2332      	movs	r3, #50	; 0x32
 800343c:	763b      	strb	r3, [r7, #24]
    command[5] = '2';
 800343e:	2332      	movs	r3, #50	; 0x32
 8003440:	767b      	strb	r3, [r7, #25]
    command[6] = '0';
 8003442:	2330      	movs	r3, #48	; 0x30
 8003444:	76bb      	strb	r3, [r7, #26]
    command[7] = '7';
 8003446:	2337      	movs	r3, #55	; 0x37
 8003448:	76fb      	strb	r3, [r7, #27]
    command[8] = '0';
 800344a:	2330      	movs	r3, #48	; 0x30
 800344c:	773b      	strb	r3, [r7, #28]
    command[9] = '0';
 800344e:	2330      	movs	r3, #48	; 0x30
 8003450:	777b      	strb	r3, [r7, #29]
    command[10] = '0';
 8003452:	2330      	movs	r3, #48	; 0x30
 8003454:	77bb      	strb	r3, [r7, #30]
    command[11] = '0';
 8003456:	2330      	movs	r3, #48	; 0x30
 8003458:	77fb      	strb	r3, [r7, #31]

    char temp[5];
    sprintf(temp, "%04X", period);
 800345a:	88fa      	ldrh	r2, [r7, #6]
 800345c:	f107 030c 	add.w	r3, r7, #12
 8003460:	4910      	ldr	r1, [pc, #64]	; (80034a4 <SET_BEACON_PERIOD+0x84>)
 8003462:	4618      	mov	r0, r3
 8003464:	f00a fd6e 	bl	800df44 <siprintf>
 8003468:	68fb      	ldr	r3, [r7, #12]
    memcpy(&command[12], temp, 4);
 800346a:	623b      	str	r3, [r7, #32]

    command[16] = ' ';
 800346c:	2320      	movs	r3, #32
 800346e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    crc32(command, 16, &command[17]);
 8003472:	f107 0314 	add.w	r3, r7, #20
 8003476:	f103 0211 	add.w	r2, r3, #17
 800347a:	f107 0314 	add.w	r3, r7, #20
 800347e:	2110      	movs	r1, #16
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fb45 	bl	8003b10 <crc32>
    command[25] = '\r';
 8003486:	230d      	movs	r3, #13
 8003488:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    return UHF_WRITE(command, 26);
 800348c:	f107 0314 	add.w	r3, r7, #20
 8003490:	211a      	movs	r1, #26
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f9f4 	bl	8003880 <UHF_WRITE>
 8003498:	4603      	mov	r3, r0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3730      	adds	r7, #48	; 0x30
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	0801071c 	.word	0x0801071c

080034a8 <SET_BEACON_TEXT>:
 * @brief This will set the beacon message to any text. Assuming it is within the range of allowed size.
 *
 * @param text : The message to be placed in the beacon.
 * @param size : The size needs to be under 0x62 to fit in the size of endurosat beacon format.
 */
HAL_StatusTypeDef SET_BEACON_TEXT(uint8_t *text, uint8_t size) {
 80034a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034ac:	b089      	sub	sp, #36	; 0x24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	460b      	mov	r3, r1
 80034b4:	70fb      	strb	r3, [r7, #3]
 80034b6:	466b      	mov	r3, sp
 80034b8:	461e      	mov	r6, r3
    if (size >= 0x62) { // To avoid the size limit of 0x62
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	2b61      	cmp	r3, #97	; 0x61
 80034be:	d904      	bls.n	80034ca <SET_BEACON_TEXT+0x22>
        debug_printf("Beacon Text is too long");
 80034c0:	4846      	ldr	r0, [pc, #280]	; (80035dc <SET_BEACON_TEXT+0x134>)
 80034c2:	f000 fa41 	bl	8003948 <debug_printf>
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e082      	b.n	80035d0 <SET_BEACON_TEXT+0x128>
    }

    int cmdSize = 8 + 2 + size + 1 + 8 +
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	3314      	adds	r3, #20
 80034ce:	61bb      	str	r3, [r7, #24]
                  1; // 8 char write cmd, 2 char size, message chars, 1 space, 8 char checksum (crc32), 0x0D

    /* Write command ES+W22FB */
    uint8_t command[cmdSize];
 80034d0:	69b9      	ldr	r1, [r7, #24]
 80034d2:	1e4b      	subs	r3, r1, #1
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	460a      	mov	r2, r1
 80034d8:	2300      	movs	r3, #0
 80034da:	4690      	mov	r8, r2
 80034dc:	4699      	mov	r9, r3
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034f2:	460a      	mov	r2, r1
 80034f4:	2300      	movs	r3, #0
 80034f6:	4614      	mov	r4, r2
 80034f8:	461d      	mov	r5, r3
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	00eb      	lsls	r3, r5, #3
 8003504:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003508:	00e2      	lsls	r2, r4, #3
 800350a:	460b      	mov	r3, r1
 800350c:	3307      	adds	r3, #7
 800350e:	08db      	lsrs	r3, r3, #3
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	ebad 0d03 	sub.w	sp, sp, r3
 8003516:	466b      	mov	r3, sp
 8003518:	3300      	adds	r3, #0
 800351a:	613b      	str	r3, [r7, #16]
    command[0] = 'E';
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2245      	movs	r2, #69	; 0x45
 8003520:	701a      	strb	r2, [r3, #0]
    command[1] = 'S';
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	2253      	movs	r2, #83	; 0x53
 8003526:	705a      	strb	r2, [r3, #1]
    command[2] = '+';
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	222b      	movs	r2, #43	; 0x2b
 800352c:	709a      	strb	r2, [r3, #2]
    command[3] = 'W';
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2257      	movs	r2, #87	; 0x57
 8003532:	70da      	strb	r2, [r3, #3]
    command[4] = '2';
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	2232      	movs	r2, #50	; 0x32
 8003538:	711a      	strb	r2, [r3, #4]
    command[5] = '2';
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	2232      	movs	r2, #50	; 0x32
 800353e:	715a      	strb	r2, [r3, #5]
    command[6] = 'F';
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	2246      	movs	r2, #70	; 0x46
 8003544:	719a      	strb	r2, [r3, #6]
    command[7] = 'B';
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	2242      	movs	r2, #66	; 0x42
 800354a:	71da      	strb	r2, [r3, #7]

    /* Append size to command XX */
    char temp[3]; // 8, 9
    sprintf(temp, "%02X", size); // Make size a string
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	f107 030c 	add.w	r3, r7, #12
 8003552:	4923      	ldr	r1, [pc, #140]	; (80035e0 <SET_BEACON_TEXT+0x138>)
 8003554:	4618      	mov	r0, r3
 8003556:	f00a fcf5 	bl	800df44 <siprintf>
    memcpy(&command[8], temp, 2); // Append size to command
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	3308      	adds	r3, #8
 800355e:	89ba      	ldrh	r2, [r7, #12]
 8003560:	801a      	strh	r2, [r3, #0]

    /* Append text */
    int i = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
    while (text[i] != '\0') {
 8003566:	e00a      	b.n	800357e <SET_BEACON_TEXT+0xd6>
        command[i + 10] = text[i]; // Start at pos 10
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	441a      	add	r2, r3
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	330a      	adds	r3, #10
 8003572:	7811      	ldrb	r1, [r2, #0]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	54d1      	strb	r1, [r2, r3]
        i++;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	3301      	adds	r3, #1
 800357c:	61fb      	str	r3, [r7, #28]
    while (text[i] != '\0') {
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	4413      	add	r3, r2
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1ee      	bne.n	8003568 <SET_BEACON_TEXT+0xc0>
    }

    /* Add space + checksum to command, 24-31 */
    command[i + 10] = ' '; // 13 + 10 = 23
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	330a      	adds	r3, #10
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	2120      	movs	r1, #32
 8003592:	54d1      	strb	r1, [r2, r3]
    crc32(command, i + 10, &command[i + 11]);
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f103 010a 	add.w	r1, r3, #10
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	330b      	adds	r3, #11
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4413      	add	r3, r2
 80035a2:	461a      	mov	r2, r3
 80035a4:	6938      	ldr	r0, [r7, #16]
 80035a6:	f000 fab3 	bl	8003b10 <crc32>

    /* Append <CR> */
    command[i + 19] = '\r'; // 32
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3313      	adds	r3, #19
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	210d      	movs	r1, #13
 80035b2:	54d1      	strb	r1, [r2, r3]

    /* Send to UHF */
    debug_printf("UHF_Write-ing command:");
 80035b4:	480b      	ldr	r0, [pc, #44]	; (80035e4 <SET_BEACON_TEXT+0x13c>)
 80035b6:	f000 f9c7 	bl	8003948 <debug_printf>
    debug_printf("%s", command);
 80035ba:	6939      	ldr	r1, [r7, #16]
 80035bc:	480a      	ldr	r0, [pc, #40]	; (80035e8 <SET_BEACON_TEXT+0x140>)
 80035be:	f000 f9c3 	bl	8003948 <debug_printf>
    return UHF_WRITE(command, cmdSize);
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	4619      	mov	r1, r3
 80035c8:	6938      	ldr	r0, [r7, #16]
 80035ca:	f000 f959 	bl	8003880 <UHF_WRITE>
 80035ce:	4603      	mov	r3, r0
 80035d0:	46b5      	mov	sp, r6
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3724      	adds	r7, #36	; 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035dc:	08010724 	.word	0x08010724
 80035e0:	0801073c 	.word	0x0801073c
 80035e4:	08010744 	.word	0x08010744
 80035e8:	0801075c 	.word	0x0801075c

080035ec <GET_UHF_STATUS>:
/**
 * @brief Gets the status control word of the uhf and is placed in the data pointer.
 * @param data : A pointer to allow the ESTCC response to be read
 *
 */
HAL_StatusTypeDef GET_UHF_STATUS(uint8_t *data) {
 80035ec:	b5b0      	push	{r4, r5, r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
    uint8_t read_command[] = "ES+R2200 BD888E1F\r";
 80035f4:	4b12      	ldr	r3, [pc, #72]	; (8003640 <GET_UHF_STATUS+0x54>)
 80035f6:	f107 040c 	add.w	r4, r7, #12
 80035fa:	461d      	mov	r5, r3
 80035fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003600:	682b      	ldr	r3, [r5, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	8022      	strh	r2, [r4, #0]
 8003606:	3402      	adds	r4, #2
 8003608:	0c1b      	lsrs	r3, r3, #16
 800360a:	7023      	strb	r3, [r4, #0]
    HAL_StatusTypeDef status = UHF_READ(read_command, data, 18, 23);
 800360c:	f107 000c 	add.w	r0, r7, #12
 8003610:	2317      	movs	r3, #23
 8003612:	2212      	movs	r2, #18
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	f000 f8f5 	bl	8003804 <UHF_READ>
 800361a:	4603      	mov	r3, r0
 800361c:	77fb      	strb	r3, [r7, #31]
    if (data[0] != 'O' || data[1] != 'K') {
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b4f      	cmp	r3, #79	; 0x4f
 8003624:	d104      	bne.n	8003630 <GET_UHF_STATUS+0x44>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3301      	adds	r3, #1
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b4b      	cmp	r3, #75	; 0x4b
 800362e:	d001      	beq.n	8003634 <GET_UHF_STATUS+0x48>
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <GET_UHF_STATUS+0x4a>
    }
    return status;
 8003634:	7ffb      	ldrb	r3, [r7, #31]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3720      	adds	r7, #32
 800363a:	46bd      	mov	sp, r7
 800363c:	bdb0      	pop	{r4, r5, r7, pc}
 800363e:	bf00      	nop
 8003640:	08010760 	.word	0x08010760
 8003644:	00000000 	.word	0x00000000

08003648 <GET_UHF_TEMP>:

/**
 * Reads internal temperature of the UHF in Celsius
 * @param temp: the temperature in Celsius
 */
HAL_StatusTypeDef GET_UHF_TEMP(float *temp) {
 8003648:	b5b0      	push	{r4, r5, r7, lr}
 800364a:	b08c      	sub	sp, #48	; 0x30
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
    uint8_t command[] = "ES+R220A 9A8ACFB5\r";
 8003650:	4b6b      	ldr	r3, [pc, #428]	; (8003800 <GET_UHF_TEMP+0x1b8>)
 8003652:	f107 041c 	add.w	r4, r7, #28
 8003656:	461d      	mov	r5, r3
 8003658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800365a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	8022      	strh	r2, [r4, #0]
 8003662:	3402      	adds	r4, #2
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	7023      	strb	r3, [r4, #0]
    uint8_t response[18];

    HAL_StatusTypeDef status = UHF_READ(command, response, 18, 18);
 8003668:	f107 0108 	add.w	r1, r7, #8
 800366c:	f107 001c 	add.w	r0, r7, #28
 8003670:	2312      	movs	r3, #18
 8003672:	2212      	movs	r2, #18
 8003674:	f000 f8c6 	bl	8003804 <UHF_READ>
 8003678:	4603      	mov	r3, r0
 800367a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    *temp = 0;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
    if (status != HAL_OK) {
 8003686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <GET_UHF_TEMP+0x4c>
        return status;
 800368e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003692:	e0aa      	b.n	80037ea <GET_UHF_TEMP+0x1a2>
    }
    if (response[0] != 'O' || response[1] != 'K') {
 8003694:	7a3b      	ldrb	r3, [r7, #8]
 8003696:	2b4f      	cmp	r3, #79	; 0x4f
 8003698:	d102      	bne.n	80036a0 <GET_UHF_TEMP+0x58>
 800369a:	7a7b      	ldrb	r3, [r7, #9]
 800369c:	2b4b      	cmp	r3, #75	; 0x4b
 800369e:	d001      	beq.n	80036a4 <GET_UHF_TEMP+0x5c>
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0a2      	b.n	80037ea <GET_UHF_TEMP+0x1a2>
    }
    (response[4] - 0x30) <= 9 ? (*temp += (response[4] - 0x30) * 10) : (*temp += (response[4] - 0x37) * 10);
 80036a4:	7b3b      	ldrb	r3, [r7, #12]
 80036a6:	2b39      	cmp	r3, #57	; 0x39
 80036a8:	d813      	bhi.n	80036d2 <GET_UHF_TEMP+0x8a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	ed93 7a00 	vldr	s14, [r3]
 80036b0:	7b3b      	ldrb	r3, [r7, #12]
 80036b2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	edc3 7a00 	vstr	s15, [r3]
 80036d0:	e012      	b.n	80036f8 <GET_UHF_TEMP+0xb0>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	ed93 7a00 	vldr	s14, [r3]
 80036d8:	7b3b      	ldrb	r3, [r7, #12]
 80036da:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	edc3 7a00 	vstr	s15, [r3]
    (response[5] - 0x30) <= 9 ? (*temp += (response[5] - 0x30) * 1) : (*temp += (response[5] - 0x37) * 1);
 80036f8:	7b7b      	ldrb	r3, [r7, #13]
 80036fa:	2b39      	cmp	r3, #57	; 0x39
 80036fc:	d80e      	bhi.n	800371c <GET_UHF_TEMP+0xd4>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	ed93 7a00 	vldr	s14, [r3]
 8003704:	7b7b      	ldrb	r3, [r7, #13]
 8003706:	3b30      	subs	r3, #48	; 0x30
 8003708:	ee07 3a90 	vmov	s15, r3
 800370c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	edc3 7a00 	vstr	s15, [r3]
 800371a:	e00d      	b.n	8003738 <GET_UHF_TEMP+0xf0>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	ed93 7a00 	vldr	s14, [r3]
 8003722:	7b7b      	ldrb	r3, [r7, #13]
 8003724:	3b37      	subs	r3, #55	; 0x37
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800372e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	edc3 7a00 	vstr	s15, [r3]
    (response[7] - 0x30) <= 9 ? (*temp += (response[7] - 0x30) * .1) : (*temp += (response[7] - 0x37) * .1);
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	2b39      	cmp	r3, #57	; 0x39
 800373c:	d820      	bhi.n	8003780 <GET_UHF_TEMP+0x138>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fc ff10 	bl	8000568 <__aeabi_f2d>
 8003748:	4604      	mov	r4, r0
 800374a:	460d      	mov	r5, r1
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	3b30      	subs	r3, #48	; 0x30
 8003750:	4618      	mov	r0, r3
 8003752:	f7fc fef7 	bl	8000544 <__aeabi_i2d>
 8003756:	a328      	add	r3, pc, #160	; (adr r3, 80037f8 <GET_UHF_TEMP+0x1b0>)
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f7fc ff5c 	bl	8000618 <__aeabi_dmul>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4620      	mov	r0, r4
 8003766:	4629      	mov	r1, r5
 8003768:	f7fc fda0 	bl	80002ac <__adddf3>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	f7fd fa28 	bl	8000bc8 <__aeabi_d2f>
 8003778:	4602      	mov	r2, r0
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e01f      	b.n	80037c0 <GET_UHF_TEMP+0x178>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7fc feef 	bl	8000568 <__aeabi_f2d>
 800378a:	4604      	mov	r4, r0
 800378c:	460d      	mov	r5, r1
 800378e:	7bfb      	ldrb	r3, [r7, #15]
 8003790:	3b37      	subs	r3, #55	; 0x37
 8003792:	4618      	mov	r0, r3
 8003794:	f7fc fed6 	bl	8000544 <__aeabi_i2d>
 8003798:	a317      	add	r3, pc, #92	; (adr r3, 80037f8 <GET_UHF_TEMP+0x1b0>)
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	f7fc ff3b 	bl	8000618 <__aeabi_dmul>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4620      	mov	r0, r4
 80037a8:	4629      	mov	r1, r5
 80037aa:	f7fc fd7f 	bl	80002ac <__adddf3>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4610      	mov	r0, r2
 80037b4:	4619      	mov	r1, r3
 80037b6:	f7fd fa07 	bl	8000bc8 <__aeabi_d2f>
 80037ba:	4602      	mov	r2, r0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	601a      	str	r2, [r3, #0]

    if (response[3] == '+')
 80037c0:	7afb      	ldrb	r3, [r7, #11]
 80037c2:	2b2b      	cmp	r3, #43	; 0x2b
 80037c4:	d104      	bne.n	80037d0 <GET_UHF_TEMP+0x188>
        *temp = *temp * 1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	e00a      	b.n	80037e6 <GET_UHF_TEMP+0x19e>
    else if (response[3] == '-')
 80037d0:	7afb      	ldrb	r3, [r7, #11]
 80037d2:	2b2d      	cmp	r3, #45	; 0x2d
 80037d4:	d107      	bne.n	80037e6 <GET_UHF_TEMP+0x19e>
        *temp = *temp * -1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	edd3 7a00 	vldr	s15, [r3]
 80037dc:	eef1 7a67 	vneg.f32	s15, s15
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	edc3 7a00 	vstr	s15, [r3]

    return status;
 80037e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3730      	adds	r7, #48	; 0x30
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bdb0      	pop	{r4, r5, r7, pc}
 80037f2:	bf00      	nop
 80037f4:	f3af 8000 	nop.w
 80037f8:	9999999a 	.word	0x9999999a
 80037fc:	3fb99999 	.word	0x3fb99999
 8003800:	080107d8 	.word	0x080107d8

08003804 <UHF_READ>:
 * @param command  :the command to be used on the transceiver
 * @param data_ptr :A pointer to allow information from the health check to be viewed.
 * @param in_byte  :The size of the command that is being sent
 * @param out_byte : The size of the expected return./How long to listen for.
 */
HAL_StatusTypeDef UHF_READ(uint8_t command[], uint8_t *data_ptr, uint8_t in_byte, uint8_t out_byte) {
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	4611      	mov	r1, r2
 8003810:	461a      	mov	r2, r3
 8003812:	460b      	mov	r3, r1
 8003814:	71fb      	strb	r3, [r7, #7]
 8003816:	4613      	mov	r3, r2
 8003818:	71bb      	strb	r3, [r7, #6]
    osMutexWait(UART_Mutex, 2500);
 800381a:	4b17      	ldr	r3, [pc, #92]	; (8003878 <UHF_READ+0x74>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003822:	4618      	mov	r0, r3
 8003824:	f007 f83c 	bl	800a8a0 <osMutexWait>
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, command, in_byte, UHF_UART_TIMEOUT);
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	b29a      	uxth	r2, r3
 800382c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003830:	68f9      	ldr	r1, [r7, #12]
 8003832:	4812      	ldr	r0, [pc, #72]	; (800387c <UHF_READ+0x78>)
 8003834:	f004 fba5 	bl	8007f82 <HAL_UART_Transmit>
 8003838:	4603      	mov	r3, r0
 800383a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 800383c:	7dfb      	ldrb	r3, [r7, #23]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d006      	beq.n	8003850 <UHF_READ+0x4c>
        osMutexRelease(UART_Mutex);
 8003842:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <UHF_READ+0x74>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f007 f87a 	bl	800a940 <osMutexRelease>
        return status;
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	e00f      	b.n	8003870 <UHF_READ+0x6c>
    }
    status = HAL_UART_Receive(&huart1, data_ptr, out_byte, UHF_UART_TIMEOUT);
 8003850:	79bb      	ldrb	r3, [r7, #6]
 8003852:	b29a      	uxth	r2, r3
 8003854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	4808      	ldr	r0, [pc, #32]	; (800387c <UHF_READ+0x78>)
 800385c:	f004 fc2a 	bl	80080b4 <HAL_UART_Receive>
 8003860:	4603      	mov	r3, r0
 8003862:	75fb      	strb	r3, [r7, #23]
    osMutexRelease(UART_Mutex);
 8003864:	4b04      	ldr	r3, [pc, #16]	; (8003878 <UHF_READ+0x74>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f007 f869 	bl	800a940 <osMutexRelease>
    return status;
 800386e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	2000022c 	.word	0x2000022c
 800387c:	200006bc 	.word	0x200006bc

08003880 <UHF_WRITE>:
/**
 * @brief Sends a write command to the UHF over UART
 * @param command  :the command to be used on the transceiver
 * @param in_byte  :The size of the command that is being sent
 */
HAL_StatusTypeDef UHF_WRITE(uint8_t command[], uint8_t in_byte) {
 8003880:	b580      	push	{r7, lr}
 8003882:	b08a      	sub	sp, #40	; 0x28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	70fb      	strb	r3, [r7, #3]
    osMutexWait(UART_Mutex, 2500);
 800388c:	4b28      	ldr	r3, [pc, #160]	; (8003930 <UHF_WRITE+0xb0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003894:	4618      	mov	r0, r3
 8003896:	f007 f803 	bl	800a8a0 <osMutexWait>
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, command, in_byte, UHF_UART_TIMEOUT);
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	b29a      	uxth	r2, r3
 800389e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4823      	ldr	r0, [pc, #140]	; (8003934 <UHF_WRITE+0xb4>)
 80038a6:	f004 fb6c 	bl	8007f82 <HAL_UART_Transmit>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (status != HAL_OK) {
 80038b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <UHF_WRITE+0x4e>
        debug_printf("UHF_WRITE: UART Tx Fail");
 80038b8:	481f      	ldr	r0, [pc, #124]	; (8003938 <UHF_WRITE+0xb8>)
 80038ba:	f000 f845 	bl	8003948 <debug_printf>
        osMutexRelease(UART_Mutex);
 80038be:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <UHF_WRITE+0xb0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f007 f83c 	bl	800a940 <osMutexRelease>
        return status;
 80038c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038cc:	e02b      	b.n	8003926 <UHF_WRITE+0xa6>
    }

    uint8_t data[25];
    status = HAL_UART_Receive(&huart1, data, 25, UHF_UART_TIMEOUT);
 80038ce:	f107 010c 	add.w	r1, r7, #12
 80038d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038d6:	2219      	movs	r2, #25
 80038d8:	4816      	ldr	r0, [pc, #88]	; (8003934 <UHF_WRITE+0xb4>)
 80038da:	f004 fbeb 	bl	80080b4 <HAL_UART_Receive>
 80038de:	4603      	mov	r3, r0
 80038e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    osMutexRelease(UART_Mutex);
 80038e4:	4b12      	ldr	r3, [pc, #72]	; (8003930 <UHF_WRITE+0xb0>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f007 f829 	bl	800a940 <osMutexRelease>
    if (data[0] != 'O' || data[1] != 'K') {
 80038ee:	7b3b      	ldrb	r3, [r7, #12]
 80038f0:	2b4f      	cmp	r3, #79	; 0x4f
 80038f2:	d102      	bne.n	80038fa <UHF_WRITE+0x7a>
 80038f4:	7b7b      	ldrb	r3, [r7, #13]
 80038f6:	2b4b      	cmp	r3, #75	; 0x4b
 80038f8:	d00a      	beq.n	8003910 <UHF_WRITE+0x90>
        debug_printf("UHF_WRITE: UART Rx FAIL");
 80038fa:	4810      	ldr	r0, [pc, #64]	; (800393c <UHF_WRITE+0xbc>)
 80038fc:	f000 f824 	bl	8003948 <debug_printf>
        debug_printf("%s", data); // Error code
 8003900:	f107 030c 	add.w	r3, r7, #12
 8003904:	4619      	mov	r1, r3
 8003906:	480e      	ldr	r0, [pc, #56]	; (8003940 <UHF_WRITE+0xc0>)
 8003908:	f000 f81e 	bl	8003948 <debug_printf>
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e00a      	b.n	8003926 <UHF_WRITE+0xa6>
    }

    debug_printf("%s", data); // Should be "OK"
 8003910:	f107 030c 	add.w	r3, r7, #12
 8003914:	4619      	mov	r1, r3
 8003916:	480a      	ldr	r0, [pc, #40]	; (8003940 <UHF_WRITE+0xc0>)
 8003918:	f000 f816 	bl	8003948 <debug_printf>
    debug_printf("UHF_WRITE: Success");
 800391c:	4809      	ldr	r0, [pc, #36]	; (8003944 <UHF_WRITE+0xc4>)
 800391e:	f000 f813 	bl	8003948 <debug_printf>
    return status;
 8003922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003926:	4618      	mov	r0, r3
 8003928:	3728      	adds	r7, #40	; 0x28
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	2000022c 	.word	0x2000022c
 8003934:	200006bc 	.word	0x200006bc
 8003938:	0801082c 	.word	0x0801082c
 800393c:	08010844 	.word	0x08010844
 8003940:	0801075c 	.word	0x0801075c
 8003944:	0801085c 	.word	0x0801085c

08003948 <debug_printf>:

/**
  * @brief Formats and prints data out on to the debug UART line. Formatting works in standard printf fashion
  * @retval Returns the status of the HAL UART transmission
  */
HAL_StatusTypeDef debug_printf(char* format, ...){
 8003948:	b40f      	push	{r0, r1, r2, r3}
 800394a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
 8003952:	466b      	mov	r3, sp
 8003954:	4698      	mov	r8, r3

    uint32_t bufferSize = 512;
 8003956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800395a:	61bb      	str	r3, [r7, #24]
    uint8_t formatBuffer[bufferSize];
 800395c:	69be      	ldr	r6, [r7, #24]
 800395e:	4633      	mov	r3, r6
 8003960:	3b01      	subs	r3, #1
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	2300      	movs	r3, #0
 8003966:	4634      	mov	r4, r6
 8003968:	461d      	mov	r5, r3
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	00eb      	lsls	r3, r5, #3
 8003974:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003978:	00e2      	lsls	r2, r4, #3
 800397a:	2300      	movs	r3, #0
 800397c:	4630      	mov	r0, r6
 800397e:	4619      	mov	r1, r3
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	00cb      	lsls	r3, r1, #3
 800398a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800398e:	00c2      	lsls	r2, r0, #3
 8003990:	1df3      	adds	r3, r6, #7
 8003992:	08db      	lsrs	r3, r3, #3
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	ebad 0d03 	sub.w	sp, sp, r3
 800399a:	466b      	mov	r3, sp
 800399c:	3300      	adds	r3, #0
 800399e:	613b      	str	r3, [r7, #16]

    va_list args;
    va_start(args, format);
 80039a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039a4:	60bb      	str	r3, [r7, #8]
    int len = vsnprintf(formatBuffer, bufferSize, format, args); //warning due to use of uint8_t instead of int8_t
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039aa:	69b9      	ldr	r1, [r7, #24]
 80039ac:	6938      	ldr	r0, [r7, #16]
 80039ae:	f00a fb15 	bl	800dfdc <vsniprintf>
 80039b2:	60f8      	str	r0, [r7, #12]
    va_end(args);

    HAL_StatusTypeDef status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	77fb      	strb	r3, [r7, #31]
    if (len > 0) {
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	dd1b      	ble.n	80039f6 <debug_printf+0xae>
        status = HAL_UART_Transmit(&huart6, formatBuffer, len, 1000);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039c6:	6939      	ldr	r1, [r7, #16]
 80039c8:	4810      	ldr	r0, [pc, #64]	; (8003a0c <debug_printf+0xc4>)
 80039ca:	f004 fada 	bl	8007f82 <HAL_UART_Transmit>
 80039ce:	4603      	mov	r3, r0
 80039d0:	77fb      	strb	r3, [r7, #31]
        uint8_t crlf[] = "\r\n";
 80039d2:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <debug_printf+0xc8>)
 80039d4:	1d3b      	adds	r3, r7, #4
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	4611      	mov	r1, r2
 80039da:	8019      	strh	r1, [r3, #0]
 80039dc:	3302      	adds	r3, #2
 80039de:	0c12      	lsrs	r2, r2, #16
 80039e0:	701a      	strb	r2, [r3, #0]
        status = HAL_UART_Transmit(&huart6, crlf, 2, 1000); //sends a carrige return and a line feed to UART (meant for putty/windows)
 80039e2:	1d39      	adds	r1, r7, #4
 80039e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039e8:	2202      	movs	r2, #2
 80039ea:	4808      	ldr	r0, [pc, #32]	; (8003a0c <debug_printf+0xc4>)
 80039ec:	f004 fac9 	bl	8007f82 <HAL_UART_Transmit>
 80039f0:	4603      	mov	r3, r0
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	e001      	b.n	80039fa <debug_printf+0xb2>
    }
    else{
        status = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 80039fa:	7ffb      	ldrb	r3, [r7, #31]
 80039fc:	46c5      	mov	sp, r8
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a08:	b004      	add	sp, #16
 8003a0a:	4770      	bx	lr
 8003a0c:	200006fc 	.word	0x200006fc
 8003a10:	08010870 	.word	0x08010870

08003a14 <debug_led_green>:
/**
 * Flash the Green LED located on the OBC
 * @param count - The number of cycles to flash
 * @param period - The amount of time in milliseconds between LED states
 */
void debug_led_green(int count, int period){
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
    int i;
    for (i = 0; i < count; ++i)
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	e016      	b.n	8003a52 <debug_led_green+0x3e>
    {
        GREEN_LED_ON();
 8003a24:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <debug_led_green+0x50>)
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	4a0e      	ldr	r2, [pc, #56]	; (8003a64 <debug_led_green+0x50>)
 8003a2a:	f043 0310 	orr.w	r3, r3, #16
 8003a2e:	6153      	str	r3, [r2, #20]
        HAL_Delay(period);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f9d6 	bl	8003de4 <HAL_Delay>
        GREEN_LED_OFF();
 8003a38:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <debug_led_green+0x50>)
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	4a09      	ldr	r2, [pc, #36]	; (8003a64 <debug_led_green+0x50>)
 8003a3e:	f023 0310 	bic.w	r3, r3, #16
 8003a42:	6153      	str	r3, [r2, #20]
        HAL_Delay(period);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 f9cc 	bl	8003de4 <HAL_Delay>
    for (i = 0; i < count; ++i)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	dbe4      	blt.n	8003a24 <debug_led_green+0x10>
    }
}
 8003a5a:	bf00      	nop
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40020800 	.word	0x40020800

08003a68 <debug_led_amber>:
/**
 * Flash the Amber LED located on the OBC
 * @param count - The number of cycles to flash
 * @param period - The amount of time in milliseconds between LED states
 */
void debug_led_amber(int count, int period){
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
    int i;
    for (i = 0; i < count; ++i)
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e016      	b.n	8003aa6 <debug_led_amber+0x3e>
    {
        AMBER_LED_ON();
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <debug_led_amber+0x50>)
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	4a0e      	ldr	r2, [pc, #56]	; (8003ab8 <debug_led_amber+0x50>)
 8003a7e:	f043 0320 	orr.w	r3, r3, #32
 8003a82:	6153      	str	r3, [r2, #20]
        HAL_Delay(period);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 f9ac 	bl	8003de4 <HAL_Delay>
        AMBER_LED_OFF();
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <debug_led_amber+0x50>)
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	4a09      	ldr	r2, [pc, #36]	; (8003ab8 <debug_led_amber+0x50>)
 8003a92:	f023 0320 	bic.w	r3, r3, #32
 8003a96:	6153      	str	r3, [r2, #20]
        HAL_Delay(period);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f9a2 	bl	8003de4 <HAL_Delay>
    for (i = 0; i < count; ++i)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	dbe4      	blt.n	8003a78 <debug_led_amber+0x10>
    }
}
 8003aae:	bf00      	nop
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40020800 	.word	0x40020800

08003abc <FloatToUnsigned16bits>:
  * @brief Converts a float into a uint16_t
  * @param bytes: an array of bytes the same size as a float in bytes
  * @param float_value: the float value to convert into a uint16_t
  * @retval The 16 bit unsigned integer
  */
uint16_t FloatToUnsigned16bits(float float_value){
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t x = *((uint32_t*)&float_value);
 8003ac6:	1d3b      	adds	r3, r7, #4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60fb      	str	r3, [r7, #12]
    return ((x>>16)&0x8000)|((((x&0x7f800000)-0x38000000)>>13)&0x7c00)|((x>>13)&0x03ff);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	0c1b      	lsrs	r3, r3, #16
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ad6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 8003ae2:	f103 4348 	add.w	r3, r3, #3355443200	; 0xc8000000
 8003ae6:	0b5b      	lsrs	r3, r3, #13
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	4313      	orrs	r3, r2
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	0b5b      	lsrs	r3, r3, #13
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	4313      	orrs	r3, r2
 8003b02:	b29b      	uxth	r3, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <crc32>:
 * @brief Calculates the crc32 value for the message
 * @param message: contains the message to be used for calculation of the crc32.
 * @param crc_ascii: contains the crc value as an 8 byte string
 * @retval returns a uint32_t to as the value of the crc32.
 */
uint32_t crc32(uint8_t* message, int length, uint8_t* crc_ascii) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	; 0x28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
   int i, j;
   uint32_t byte, crc, mask;

   i = 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
   crc = 0xFFFFFFFF;
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295
 8003b24:	61fb      	str	r3, [r7, #28]
   while (i < length) {
 8003b26:	e020      	b.n	8003b6a <crc32+0x5a>
      byte = message[i];                //get the next byte of message
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	61bb      	str	r3, [r7, #24]
      crc = crc ^ byte;                 //^ is bitwise XOR
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	4053      	eors	r3, r2
 8003b38:	61fb      	str	r3, [r7, #28]
      for (j = 7; j >= 0; j--) {
 8003b3a:	2307      	movs	r3, #7
 8003b3c:	623b      	str	r3, [r7, #32]
 8003b3e:	e00e      	b.n	8003b5e <crc32+0x4e>
         mask = -(crc & 1);     // make mask
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	425b      	negs	r3, r3
 8003b48:	617b      	str	r3, [r7, #20]
         crc = (crc >> 1) ^ (0xEDB88320 & mask);  //shift crc and apply mask
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	085a      	lsrs	r2, r3, #1
 8003b4e:	6979      	ldr	r1, [r7, #20]
 8003b50:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <crc32+0x7c>)
 8003b52:	400b      	ands	r3, r1
 8003b54:	4053      	eors	r3, r2
 8003b56:	61fb      	str	r3, [r7, #28]
      for (j = 7; j >= 0; j--) {
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	623b      	str	r3, [r7, #32]
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	daed      	bge.n	8003b40 <crc32+0x30>
      }
      i++;
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	3301      	adds	r3, #1
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
   while (i < length) {
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	dbda      	blt.n	8003b28 <crc32+0x18>
   }

   crc = ~crc;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	43db      	mvns	r3, r3
 8003b76:	61fb      	str	r3, [r7, #28]
   sprintf(crc_ascii, "%lX", crc);
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	4905      	ldr	r1, [pc, #20]	; (8003b90 <crc32+0x80>)
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f00a f9e1 	bl	800df44 <siprintf>
   return crc;
 8003b82:	69fb      	ldr	r3, [r7, #28]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3728      	adds	r7, #40	; 0x28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	edb88320 	.word	0xedb88320
 8003b90:	080108c8 	.word	0x080108c8

08003b94 <main>:

/**
 * CySat 1 Mission Execution
 */
int main(void)
{
 8003b94:	b5b0      	push	{r4, r5, r7, lr}
 8003b96:	b09a      	sub	sp, #104	; 0x68
 8003b98:	af00      	add	r7, sp, #0
    //SCB->VTOR = APPL_ADDRESS;
    debug_led_amber(5,500);
 8003b9a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003b9e:	2005      	movs	r0, #5
 8003ba0:	f7ff ff62 	bl	8003a68 <debug_led_amber>

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8003ba4:	f000 f8e2 	bl	8003d6c <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 8003ba8:	f005 fdda 	bl	8009760 <SystemClock_Config>

    HAL_Delay(INITIAL_WAIT); // Delay for the specified 30 minutes
 8003bac:	4833      	ldr	r0, [pc, #204]	; (8003c7c <main+0xe8>)
 8003bae:	f000 f919 	bl	8003de4 <HAL_Delay>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8003bb2:	f005 fe57 	bl	8009864 <MX_GPIO_Init>
    MX_I2C1_Init();
 8003bb6:	f005 fff1 	bl	8009b9c <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8003bba:	f006 f867 	bl	8009c8c <MX_USART1_UART_Init>
    MX_UART4_Init();
 8003bbe:	f006 f83b 	bl	8009c38 <MX_UART4_Init>
    MX_USART6_UART_Init();
 8003bc2:	f006 f88d 	bl	8009ce0 <MX_USART6_UART_Init>
    MX_SDIO_SD_Init();
 8003bc6:	f006 f817 	bl	8009bf8 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 8003bca:	f006 f98f 	bl	8009eec <MX_FATFS_Init>
    // Commands the start of data reception because I can't define it in AppTasks.c without having to mess around with #including stuff
    //HAL_UART_Receive_IT(&huart6,GroundStationRxBuffer, 4);
    //HAL_UART_Receive_IT(&huart1,GroundStationRxBuffer, 4);

    /* Initialize task threads */
    osThreadDef(myMainTask, Main_Task, osPriorityRealtime, 0, 512);
 8003bce:	4b2c      	ldr	r3, [pc, #176]	; (8003c80 <main+0xec>)
 8003bd0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8003bd4:	461d      	mov	r5, r3
 8003bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bda:	682b      	ldr	r3, [r5, #0]
 8003bdc:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myMainTask), NULL);
 8003bde:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003be2:	2100      	movs	r1, #0
 8003be4:	4618      	mov	r0, r3
 8003be6:	f006 fe13 	bl	800a810 <osThreadCreate>

    osThreadDef(myUHFRxTask, UHF_Rx_Task, osPriorityNormal, 0, 512);
 8003bea:	4b26      	ldr	r3, [pc, #152]	; (8003c84 <main+0xf0>)
 8003bec:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003bf0:	461d      	mov	r5, r3
 8003bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bf6:	682b      	ldr	r3, [r5, #0]
 8003bf8:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myUHFRxTask), NULL);
 8003bfa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bfe:	2100      	movs	r1, #0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f006 fe05 	bl	800a810 <osThreadCreate>

    osThreadDef(myUHFTxTask, UHF_Tx_Task, osPriorityNormal, 0, 512);
 8003c06:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <main+0xf4>)
 8003c08:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8003c0c:	461d      	mov	r5, r3
 8003c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c12:	682b      	ldr	r3, [r5, #0]
 8003c14:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myUHFTxTask), NULL);
 8003c16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f006 fdf7 	bl	800a810 <osThreadCreate>

    osThreadDef(myADCSTask, ADCS_Task, osPriorityNormal, 0, 1024);
 8003c22:	4b1a      	ldr	r3, [pc, #104]	; (8003c8c <main+0xf8>)
 8003c24:	f107 0418 	add.w	r4, r7, #24
 8003c28:	461d      	mov	r5, r3
 8003c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c2e:	682b      	ldr	r3, [r5, #0]
 8003c30:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myADCSTask), NULL);
 8003c32:	f107 0318 	add.w	r3, r7, #24
 8003c36:	2100      	movs	r1, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f006 fde9 	bl	800a810 <osThreadCreate>

    osThreadDef(myBatteryCapacityTask, BatteryCapacity_Task, osPriorityNormal, 0, 256);
 8003c3e:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <main+0xfc>)
 8003c40:	1d3c      	adds	r4, r7, #4
 8003c42:	461d      	mov	r5, r3
 8003c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myBatteryCapacityTask), NULL);
 8003c4c:	1d3b      	adds	r3, r7, #4
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4618      	mov	r0, r3
 8003c52:	f006 fddd 	bl	800a810 <osThreadCreate>

    /* Start scheduler */
    osKernelStart();
 8003c56:	f006 fdc4 	bl	800a7e2 <osKernelStart>
    // Enable Transparent Mode
    // TODO: Send command to UHF transceiver to enable transparent mode

    // Detumbling Sequence
    // TODO: Detumbling functions (ADCS) go here
    debug_printf("Beginning detumbling sequence (unfinished)");
 8003c5a:	480e      	ldr	r0, [pc, #56]	; (8003c94 <main+0x100>)
 8003c5c:	f7ff fe74 	bl	8003948 <debug_printf>
    */

   // HAL_Delay(15000); // Delay for 15 seconds to allow ADCS to boot-up in application mode

    /* Receive via STM UART */
    GroundStationRxDataLength = 4;
 8003c60:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <main+0x104>)
 8003c62:	2204      	movs	r2, #4
 8003c64:	601a      	str	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart6, (uint8_t*) &GroundStationRxBuffer, 4);
 8003c66:	2204      	movs	r2, #4
 8003c68:	490c      	ldr	r1, [pc, #48]	; (8003c9c <main+0x108>)
 8003c6a:	480d      	ldr	r0, [pc, #52]	; (8003ca0 <main+0x10c>)
 8003c6c:	f004 face 	bl	800820c <HAL_UART_Receive_IT>
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3768      	adds	r7, #104	; 0x68
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bdb0      	pop	{r4, r5, r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	001b7740 	.word	0x001b7740
 8003c80:	08010940 	.word	0x08010940
 8003c84:	08010954 	.word	0x08010954
 8003c88:	08010968 	.word	0x08010968
 8003c8c:	0801097c 	.word	0x0801097c
 8003c90:	08010990 	.word	0x08010990
 8003c94:	08010914 	.word	0x08010914
 8003c98:	2000021c 	.word	0x2000021c
 8003c9c:	20000214 	.word	0x20000214
 8003ca0:	200006fc 	.word	0x200006fc

08003ca4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a04      	ldr	r2, [pc, #16]	; (8003cc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d101      	bne.n	8003cba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003cb6:	f000 f87b 	bl	8003db0 <HAL_IncTick>
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40010000 	.word	0x40010000

08003cc8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
#ifdef DEBUG_ENABLE
  while(1)
  {
      debug_led_green(5, 2000);
 8003ccc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003cd0:	2005      	movs	r0, #5
 8003cd2:	f7ff fe9f 	bl	8003a14 <debug_led_green>
      debug_led_amber(5, 2000);
 8003cd6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003cda:	2005      	movs	r0, #5
 8003cdc:	f7ff fec4 	bl	8003a68 <debug_led_amber>
      debug_led_green(5, 2000);
 8003ce0:	e7f4      	b.n	8003ccc <Error_Handler+0x4>
	...

08003ce4 <HAL_UART_RxCpltCallback>:
{
    Error_Handler();
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
    if(huart == &huart6){ //OBC connected to Payload/USB
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a1c      	ldr	r2, [pc, #112]	; (8003d60 <HAL_UART_RxCpltCallback+0x7c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d116      	bne.n	8003d22 <HAL_UART_RxCpltCallback+0x3e>
        if(handleCySatPacket(parseCySatPacket(GroundStationRxBuffer)) == -1){ //error occurred
 8003cf4:	f107 0308 	add.w	r3, r7, #8
 8003cf8:	491a      	ldr	r1, [pc, #104]	; (8003d64 <HAL_UART_RxCpltCallback+0x80>)
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fd fa8e 	bl	800121c <parseCySatPacket>
 8003d00:	f107 0308 	add.w	r3, r7, #8
 8003d04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d08:	f7fe fa64 	bl	80021d4 <handleCySatPacket>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d12:	d101      	bne.n	8003d18 <HAL_UART_RxCpltCallback+0x34>
            sendErrorPacket();
 8003d14:	f7fe fa38 	bl	8002188 <sendErrorPacket>
        }
        HAL_UART_Receive_IT(&huart6,GroundStationRxBuffer, 4);
 8003d18:	2204      	movs	r2, #4
 8003d1a:	4912      	ldr	r1, [pc, #72]	; (8003d64 <HAL_UART_RxCpltCallback+0x80>)
 8003d1c:	4810      	ldr	r0, [pc, #64]	; (8003d60 <HAL_UART_RxCpltCallback+0x7c>)
 8003d1e:	f004 fa75 	bl	800820c <HAL_UART_Receive_IT>
    }
    if(huart == &huart1){ //I think this is for the UHF transceiver but I'm not sure -Steven
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a10      	ldr	r2, [pc, #64]	; (8003d68 <HAL_UART_RxCpltCallback+0x84>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d116      	bne.n	8003d58 <HAL_UART_RxCpltCallback+0x74>
        if(handleCySatPacket(parseCySatPacket(GroundStationRxBuffer)) == -1){ //error occurred
 8003d2a:	f107 0314 	add.w	r3, r7, #20
 8003d2e:	490d      	ldr	r1, [pc, #52]	; (8003d64 <HAL_UART_RxCpltCallback+0x80>)
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fd fa73 	bl	800121c <parseCySatPacket>
 8003d36:	f107 0314 	add.w	r3, r7, #20
 8003d3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d3e:	f7fe fa49 	bl	80021d4 <handleCySatPacket>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d101      	bne.n	8003d4e <HAL_UART_RxCpltCallback+0x6a>
            sendErrorPacket();
 8003d4a:	f7fe fa1d 	bl	8002188 <sendErrorPacket>
        }
        HAL_UART_Receive_IT(&huart1,GroundStationRxBuffer, 4);
 8003d4e:	2204      	movs	r2, #4
 8003d50:	4904      	ldr	r1, [pc, #16]	; (8003d64 <HAL_UART_RxCpltCallback+0x80>)
 8003d52:	4805      	ldr	r0, [pc, #20]	; (8003d68 <HAL_UART_RxCpltCallback+0x84>)
 8003d54:	f004 fa5a 	bl	800820c <HAL_UART_Receive_IT>
    }
}
 8003d58:	bf00      	nop
 8003d5a:	3720      	adds	r7, #32
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	200006fc 	.word	0x200006fc
 8003d64:	20000214 	.word	0x20000214
 8003d68:	200006bc 	.word	0x200006bc

08003d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d70:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <HAL_Init+0x40>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a0d      	ldr	r2, [pc, #52]	; (8003dac <HAL_Init+0x40>)
 8003d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <HAL_Init+0x40>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a0a      	ldr	r2, [pc, #40]	; (8003dac <HAL_Init+0x40>)
 8003d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d88:	4b08      	ldr	r3, [pc, #32]	; (8003dac <HAL_Init+0x40>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a07      	ldr	r2, [pc, #28]	; (8003dac <HAL_Init+0x40>)
 8003d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d94:	2003      	movs	r0, #3
 8003d96:	f000 f90f 	bl	8003fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d9a:	200f      	movs	r0, #15
 8003d9c:	f006 fb9a 	bl	800a4d4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003da0:	f006 f9bc 	bl	800a11c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40023c00 	.word	0x40023c00

08003db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  uwTick++;
 8003db4:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <HAL_IncTick+0x18>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3301      	adds	r3, #1
 8003dba:	4a03      	ldr	r2, [pc, #12]	; (8003dc8 <HAL_IncTick+0x18>)
 8003dbc:	6013      	str	r3, [r2, #0]
}
 8003dbe:	bf00      	nop
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	20000254 	.word	0x20000254

08003dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return uwTick;
 8003dd0:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <HAL_GetTick+0x14>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	20000254 	.word	0x20000254

08003de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dec:	f7ff ffee 	bl	8003dcc <HAL_GetTick>
 8003df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d002      	beq.n	8003e04 <HAL_Delay+0x20>
  {
     wait++;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3301      	adds	r3, #1
 8003e02:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003e04:	bf00      	nop
 8003e06:	f7ff ffe1 	bl	8003dcc <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d8f7      	bhi.n	8003e06 <HAL_Delay+0x22>
  {
  }
}
 8003e16:	bf00      	nop
 8003e18:	bf00      	nop
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e30:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <NVIC_SetPriorityGrouping+0x44>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e52:	4a04      	ldr	r2, [pc, #16]	; (8003e64 <NVIC_SetPriorityGrouping+0x44>)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	60d3      	str	r3, [r2, #12]
}
 8003e58:	bf00      	nop
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	e000ed00 	.word	0xe000ed00

08003e68 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e6c:	4b04      	ldr	r3, [pc, #16]	; (8003e80 <NVIC_GetPriorityGrouping+0x18>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	0a1b      	lsrs	r3, r3, #8
 8003e72:	f003 0307 	and.w	r3, r3, #7
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	f003 021f 	and.w	r2, r3, #31
 8003e94:	4907      	ldr	r1, [pc, #28]	; (8003eb4 <NVIC_EnableIRQ+0x30>)
 8003e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	2001      	movs	r0, #1
 8003e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	e000e100 	.word	0xe000e100

08003eb8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	6039      	str	r1, [r7, #0]
 8003ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	da0b      	bge.n	8003ee4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	490c      	ldr	r1, [pc, #48]	; (8003f04 <NVIC_SetPriority+0x4c>)
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	3b04      	subs	r3, #4
 8003eda:	0112      	lsls	r2, r2, #4
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	440b      	add	r3, r1
 8003ee0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ee2:	e009      	b.n	8003ef8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	4907      	ldr	r1, [pc, #28]	; (8003f08 <NVIC_SetPriority+0x50>)
 8003eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eee:	0112      	lsls	r2, r2, #4
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	e000ed00 	.word	0xe000ed00
 8003f08:	e000e100 	.word	0xe000e100

08003f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b089      	sub	sp, #36	; 0x24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f1c3 0307 	rsb	r3, r3, #7
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	bf28      	it	cs
 8003f2a:	2304      	movcs	r3, #4
 8003f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	3304      	adds	r3, #4
 8003f32:	2b06      	cmp	r3, #6
 8003f34:	d902      	bls.n	8003f3c <NVIC_EncodePriority+0x30>
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3b03      	subs	r3, #3
 8003f3a:	e000      	b.n	8003f3e <NVIC_EncodePriority+0x32>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f40:	f04f 32ff 	mov.w	r2, #4294967295
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	43da      	mvns	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	401a      	ands	r2, r3
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f54:	f04f 31ff 	mov.w	r1, #4294967295
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5e:	43d9      	mvns	r1, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f64:	4313      	orrs	r3, r2
         );
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3724      	adds	r7, #36	; 0x24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
	...

08003f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f84:	d301      	bcc.n	8003f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f86:	2301      	movs	r3, #1
 8003f88:	e00f      	b.n	8003faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f8a:	4a0a      	ldr	r2, [pc, #40]	; (8003fb4 <SysTick_Config+0x40>)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f92:	210f      	movs	r1, #15
 8003f94:	f04f 30ff 	mov.w	r0, #4294967295
 8003f98:	f7ff ff8e 	bl	8003eb8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <SysTick_Config+0x40>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fa2:	4b04      	ldr	r3, [pc, #16]	; (8003fb4 <SysTick_Config+0x40>)
 8003fa4:	2207      	movs	r2, #7
 8003fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	e000e010 	.word	0xe000e010

08003fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff ff2d 	bl	8003e20 <NVIC_SetPriorityGrouping>
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b086      	sub	sp, #24
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
 8003fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fe0:	f7ff ff42 	bl	8003e68 <NVIC_GetPriorityGrouping>
 8003fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	6978      	ldr	r0, [r7, #20]
 8003fec:	f7ff ff8e 	bl	8003f0c <NVIC_EncodePriority>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff ff5d 	bl	8003eb8 <NVIC_SetPriority>
}
 8003ffe:	bf00      	nop
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	4603      	mov	r3, r0
 800400e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff ff35 	bl	8003e84 <NVIC_EnableIRQ>
}
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff ffa2 	bl	8003f74 <SysTick_Config>
 8004030:	4603      	mov	r3, r0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b04      	cmp	r3, #4
 8004048:	d106      	bne.n	8004058 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a08      	ldr	r2, [pc, #32]	; (8004070 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004050:	f043 0304 	orr.w	r3, r3, #4
 8004054:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8004056:	e005      	b.n	8004064 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004058:	4b05      	ldr	r3, [pc, #20]	; (8004070 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a04      	ldr	r2, [pc, #16]	; (8004070 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800405e:	f023 0304 	bic.w	r3, r3, #4
 8004062:	6013      	str	r3, [r2, #0]
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	e000e010 	.word	0xe000e010

08004074 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d004      	beq.n	8004092 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2280      	movs	r2, #128	; 0x80
 800408c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e00c      	b.n	80040ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2205      	movs	r2, #5
 8004096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0201 	bic.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040c4:	4b8e      	ldr	r3, [pc, #568]	; (8004300 <HAL_DMA_IRQHandler+0x248>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a8e      	ldr	r2, [pc, #568]	; (8004304 <HAL_DMA_IRQHandler+0x24c>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	0a9b      	lsrs	r3, r3, #10
 80040d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e2:	2208      	movs	r2, #8
 80040e4:	409a      	lsls	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01a      	beq.n	8004124 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d013      	beq.n	8004124 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0204 	bic.w	r2, r2, #4
 800410a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004110:	2208      	movs	r2, #8
 8004112:	409a      	lsls	r2, r3
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411c:	f043 0201 	orr.w	r2, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004128:	4a77      	ldr	r2, [pc, #476]	; (8004308 <HAL_DMA_IRQHandler+0x250>)
 800412a:	409a      	lsls	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4013      	ands	r3, r2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d012      	beq.n	800415a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00b      	beq.n	800415a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004146:	4a70      	ldr	r2, [pc, #448]	; (8004308 <HAL_DMA_IRQHandler+0x250>)
 8004148:	409a      	lsls	r2, r3
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	f043 0202 	orr.w	r2, r3, #2
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415e:	4a6b      	ldr	r2, [pc, #428]	; (800430c <HAL_DMA_IRQHandler+0x254>)
 8004160:	409a      	lsls	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4013      	ands	r3, r2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d012      	beq.n	8004190 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00b      	beq.n	8004190 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	4a63      	ldr	r2, [pc, #396]	; (800430c <HAL_DMA_IRQHandler+0x254>)
 800417e:	409a      	lsls	r2, r3
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004188:	f043 0204 	orr.w	r2, r3, #4
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004194:	2210      	movs	r2, #16
 8004196:	409a      	lsls	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4013      	ands	r3, r2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d043      	beq.n	8004228 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d03c      	beq.n	8004228 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b2:	2210      	movs	r2, #16
 80041b4:	409a      	lsls	r2, r3
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d018      	beq.n	80041fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d108      	bne.n	80041e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d024      	beq.n	8004228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	4798      	blx	r3
 80041e6:	e01f      	b.n	8004228 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01b      	beq.n	8004228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	4798      	blx	r3
 80041f8:	e016      	b.n	8004228 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d107      	bne.n	8004218 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0208 	bic.w	r2, r2, #8
 8004216:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422c:	2220      	movs	r2, #32
 800422e:	409a      	lsls	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8093 	beq.w	8004360 <HAL_DMA_IRQHandler+0x2a8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0310 	and.w	r3, r3, #16
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 808b 	beq.w	8004360 <HAL_DMA_IRQHandler+0x2a8>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424e:	2220      	movs	r2, #32
 8004250:	409a      	lsls	r2, r3
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b05      	cmp	r3, #5
 8004260:	d137      	bne.n	80042d2 <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0216 	bic.w	r2, r2, #22
 8004270:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695a      	ldr	r2, [r3, #20]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004280:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d103      	bne.n	8004292 <HAL_DMA_IRQHandler+0x1da>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428e:	2b00      	cmp	r3, #0
 8004290:	d007      	beq.n	80042a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0208 	bic.w	r2, r2, #8
 80042a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a6:	223f      	movs	r2, #63	; 0x3f
 80042a8:	409a      	lsls	r2, r3
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 8082 	beq.w	80043cc <HAL_DMA_IRQHandler+0x314>
        {
          hdma->XferAbortCallback(hdma);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	4798      	blx	r3
        }
        return;
 80042d0:	e07c      	b.n	80043cc <HAL_DMA_IRQHandler+0x314>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d020      	beq.n	8004322 <HAL_DMA_IRQHandler+0x26a>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d110      	bne.n	8004310 <HAL_DMA_IRQHandler+0x258>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d034      	beq.n	8004360 <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4798      	blx	r3
 80042fe:	e02f      	b.n	8004360 <HAL_DMA_IRQHandler+0x2a8>
 8004300:	20000014 	.word	0x20000014
 8004304:	1b4e81b5 	.word	0x1b4e81b5
 8004308:	00800001 	.word	0x00800001
 800430c:	00800004 	.word	0x00800004
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004314:	2b00      	cmp	r3, #0
 8004316:	d023      	beq.n	8004360 <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	4798      	blx	r3
 8004320:	e01e      	b.n	8004360 <HAL_DMA_IRQHandler+0x2a8>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10f      	bne.n	8004350 <HAL_DMA_IRQHandler+0x298>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0210 	bic.w	r2, r2, #16
 800433e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_DMA_IRQHandler+0x2a8>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004364:	2b00      	cmp	r3, #0
 8004366:	d032      	beq.n	80043ce <HAL_DMA_IRQHandler+0x316>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d022      	beq.n	80043ba <HAL_DMA_IRQHandler+0x302>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2205      	movs	r2, #5
 8004378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0201 	bic.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	3301      	adds	r3, #1
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	429a      	cmp	r2, r3
 8004396:	d307      	bcc.n	80043a8 <HAL_DMA_IRQHandler+0x2f0>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1f2      	bne.n	800438c <HAL_DMA_IRQHandler+0x2d4>
 80043a6:	e000      	b.n	80043aa <HAL_DMA_IRQHandler+0x2f2>
          break;
 80043a8:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <HAL_DMA_IRQHandler+0x316>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	4798      	blx	r3
 80043ca:	e000      	b.n	80043ce <HAL_DMA_IRQHandler+0x316>
        return;
 80043cc:	bf00      	nop
    }
  }
}
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b089      	sub	sp, #36	; 0x24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ea:	2300      	movs	r3, #0
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	e177      	b.n	80046e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043f0:	2201      	movs	r2, #1
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4013      	ands	r3, r2
 8004402:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	429a      	cmp	r2, r3
 800440a:	f040 8166 	bne.w	80046da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d003      	beq.n	800441e <HAL_GPIO_Init+0x4a>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b12      	cmp	r3, #18
 800441c:	d123      	bne.n	8004466 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	08da      	lsrs	r2, r3, #3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3208      	adds	r2, #8
 8004426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800442a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	220f      	movs	r2, #15
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	43db      	mvns	r3, r3
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	4013      	ands	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	08da      	lsrs	r2, r3, #3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3208      	adds	r2, #8
 8004460:	69b9      	ldr	r1, [r7, #24]
 8004462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	2203      	movs	r2, #3
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	43db      	mvns	r3, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4013      	ands	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 0203 	and.w	r2, r3, #3
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4313      	orrs	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d00b      	beq.n	80044ba <HAL_GPIO_Init+0xe6>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d007      	beq.n	80044ba <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044ae:	2b11      	cmp	r3, #17
 80044b0:	d003      	beq.n	80044ba <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b12      	cmp	r3, #18
 80044b8:	d130      	bne.n	800451c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	2203      	movs	r2, #3
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	43db      	mvns	r3, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4013      	ands	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044f0:	2201      	movs	r2, #1
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	43db      	mvns	r3, r3
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4013      	ands	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f003 0201 	and.w	r2, r3, #1
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	2203      	movs	r2, #3
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	43db      	mvns	r3, r3
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	4013      	ands	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4313      	orrs	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 80c0 	beq.w	80046da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	4b66      	ldr	r3, [pc, #408]	; (80046f8 <HAL_GPIO_Init+0x324>)
 8004560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004562:	4a65      	ldr	r2, [pc, #404]	; (80046f8 <HAL_GPIO_Init+0x324>)
 8004564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004568:	6453      	str	r3, [r2, #68]	; 0x44
 800456a:	4b63      	ldr	r3, [pc, #396]	; (80046f8 <HAL_GPIO_Init+0x324>)
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004576:	4a61      	ldr	r2, [pc, #388]	; (80046fc <HAL_GPIO_Init+0x328>)
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	089b      	lsrs	r3, r3, #2
 800457c:	3302      	adds	r3, #2
 800457e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	220f      	movs	r2, #15
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	43db      	mvns	r3, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4013      	ands	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a58      	ldr	r2, [pc, #352]	; (8004700 <HAL_GPIO_Init+0x32c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d037      	beq.n	8004612 <HAL_GPIO_Init+0x23e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a57      	ldr	r2, [pc, #348]	; (8004704 <HAL_GPIO_Init+0x330>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d031      	beq.n	800460e <HAL_GPIO_Init+0x23a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a56      	ldr	r2, [pc, #344]	; (8004708 <HAL_GPIO_Init+0x334>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d02b      	beq.n	800460a <HAL_GPIO_Init+0x236>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a55      	ldr	r2, [pc, #340]	; (800470c <HAL_GPIO_Init+0x338>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d025      	beq.n	8004606 <HAL_GPIO_Init+0x232>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a54      	ldr	r2, [pc, #336]	; (8004710 <HAL_GPIO_Init+0x33c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d01f      	beq.n	8004602 <HAL_GPIO_Init+0x22e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a53      	ldr	r2, [pc, #332]	; (8004714 <HAL_GPIO_Init+0x340>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d019      	beq.n	80045fe <HAL_GPIO_Init+0x22a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a52      	ldr	r2, [pc, #328]	; (8004718 <HAL_GPIO_Init+0x344>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d013      	beq.n	80045fa <HAL_GPIO_Init+0x226>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a51      	ldr	r2, [pc, #324]	; (800471c <HAL_GPIO_Init+0x348>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00d      	beq.n	80045f6 <HAL_GPIO_Init+0x222>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a50      	ldr	r2, [pc, #320]	; (8004720 <HAL_GPIO_Init+0x34c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d007      	beq.n	80045f2 <HAL_GPIO_Init+0x21e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a4f      	ldr	r2, [pc, #316]	; (8004724 <HAL_GPIO_Init+0x350>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d101      	bne.n	80045ee <HAL_GPIO_Init+0x21a>
 80045ea:	2309      	movs	r3, #9
 80045ec:	e012      	b.n	8004614 <HAL_GPIO_Init+0x240>
 80045ee:	230a      	movs	r3, #10
 80045f0:	e010      	b.n	8004614 <HAL_GPIO_Init+0x240>
 80045f2:	2308      	movs	r3, #8
 80045f4:	e00e      	b.n	8004614 <HAL_GPIO_Init+0x240>
 80045f6:	2307      	movs	r3, #7
 80045f8:	e00c      	b.n	8004614 <HAL_GPIO_Init+0x240>
 80045fa:	2306      	movs	r3, #6
 80045fc:	e00a      	b.n	8004614 <HAL_GPIO_Init+0x240>
 80045fe:	2305      	movs	r3, #5
 8004600:	e008      	b.n	8004614 <HAL_GPIO_Init+0x240>
 8004602:	2304      	movs	r3, #4
 8004604:	e006      	b.n	8004614 <HAL_GPIO_Init+0x240>
 8004606:	2303      	movs	r3, #3
 8004608:	e004      	b.n	8004614 <HAL_GPIO_Init+0x240>
 800460a:	2302      	movs	r3, #2
 800460c:	e002      	b.n	8004614 <HAL_GPIO_Init+0x240>
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <HAL_GPIO_Init+0x240>
 8004612:	2300      	movs	r3, #0
 8004614:	69fa      	ldr	r2, [r7, #28]
 8004616:	f002 0203 	and.w	r2, r2, #3
 800461a:	0092      	lsls	r2, r2, #2
 800461c:	4093      	lsls	r3, r2
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4313      	orrs	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004624:	4935      	ldr	r1, [pc, #212]	; (80046fc <HAL_GPIO_Init+0x328>)
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	089b      	lsrs	r3, r3, #2
 800462a:	3302      	adds	r3, #2
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004632:	4b3d      	ldr	r3, [pc, #244]	; (8004728 <HAL_GPIO_Init+0x354>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	43db      	mvns	r3, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4013      	ands	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004656:	4a34      	ldr	r2, [pc, #208]	; (8004728 <HAL_GPIO_Init+0x354>)
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800465c:	4b32      	ldr	r3, [pc, #200]	; (8004728 <HAL_GPIO_Init+0x354>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	43db      	mvns	r3, r3
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	4013      	ands	r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004680:	4a29      	ldr	r2, [pc, #164]	; (8004728 <HAL_GPIO_Init+0x354>)
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004686:	4b28      	ldr	r3, [pc, #160]	; (8004728 <HAL_GPIO_Init+0x354>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	43db      	mvns	r3, r3
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	4013      	ands	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046aa:	4a1f      	ldr	r2, [pc, #124]	; (8004728 <HAL_GPIO_Init+0x354>)
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046b0:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <HAL_GPIO_Init+0x354>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	43db      	mvns	r3, r3
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4013      	ands	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046d4:	4a14      	ldr	r2, [pc, #80]	; (8004728 <HAL_GPIO_Init+0x354>)
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	3301      	adds	r3, #1
 80046de:	61fb      	str	r3, [r7, #28]
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	2b0f      	cmp	r3, #15
 80046e4:	f67f ae84 	bls.w	80043f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop
 80046ec:	3724      	adds	r7, #36	; 0x24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40023800 	.word	0x40023800
 80046fc:	40013800 	.word	0x40013800
 8004700:	40020000 	.word	0x40020000
 8004704:	40020400 	.word	0x40020400
 8004708:	40020800 	.word	0x40020800
 800470c:	40020c00 	.word	0x40020c00
 8004710:	40021000 	.word	0x40021000
 8004714:	40021400 	.word	0x40021400
 8004718:	40021800 	.word	0x40021800
 800471c:	40021c00 	.word	0x40021c00
 8004720:	40022000 	.word	0x40022000
 8004724:	40022400 	.word	0x40022400
 8004728:	40013c00 	.word	0x40013c00

0800472c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	807b      	strh	r3, [r7, #2]
 8004738:	4613      	mov	r3, r2
 800473a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800473c:	787b      	ldrb	r3, [r7, #1]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004742:	887a      	ldrh	r2, [r7, #2]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004748:	e003      	b.n	8004752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800474a:	887b      	ldrh	r3, [r7, #2]
 800474c:	041a      	lsls	r2, r3, #16
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	619a      	str	r2, [r3, #24]
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e0c9      	b.n	800490e <HAL_I2C_Init+0x1ae>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f005 fcf6 	bl	800a180 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2224      	movs	r2, #36	; 0x24
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0201 	bic.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047ac:	f001 fae6 	bl	8005d7c <HAL_RCC_GetPCLK1Freq>
 80047b0:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	4a58      	ldr	r2, [pc, #352]	; (8004918 <HAL_I2C_Init+0x1b8>)
 80047b6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ba:	0c9b      	lsrs	r3, r3, #18
 80047bc:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	4a54      	ldr	r2, [pc, #336]	; (800491c <HAL_I2C_Init+0x1bc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d802      	bhi.n	80047d6 <HAL_I2C_Init+0x76>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3301      	adds	r3, #1
 80047d4:	e009      	b.n	80047ea <HAL_I2C_Init+0x8a>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047dc:	fb02 f303 	mul.w	r3, r2, r3
 80047e0:	4a4f      	ldr	r2, [pc, #316]	; (8004920 <HAL_I2C_Init+0x1c0>)
 80047e2:	fba2 2303 	umull	r2, r3, r2, r3
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	3301      	adds	r3, #1
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	4a49      	ldr	r2, [pc, #292]	; (800491c <HAL_I2C_Init+0x1bc>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d813      	bhi.n	8004822 <HAL_I2C_Init+0xc2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	fbb2 f2f3 	udiv	r2, r2, r3
 8004806:	f640 73fc 	movw	r3, #4092	; 0xffc
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d006      	beq.n	800481e <HAL_I2C_Init+0xbe>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	fbb2 f3f3 	udiv	r3, r2, r3
 800481c:	e045      	b.n	80048aa <HAL_I2C_Init+0x14a>
 800481e:	2304      	movs	r3, #4
 8004820:	e043      	b.n	80048aa <HAL_I2C_Init+0x14a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10f      	bne.n	800484a <HAL_I2C_Init+0xea>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	4413      	add	r3, r2
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	fbb2 f3f3 	udiv	r3, r2, r3
 800483a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800483e:	2b00      	cmp	r3, #0
 8004840:	bf0c      	ite	eq
 8004842:	2301      	moveq	r3, #1
 8004844:	2300      	movne	r3, #0
 8004846:	b2db      	uxtb	r3, r3
 8004848:	e010      	b.n	800486c <HAL_I2C_Init+0x10c>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	009a      	lsls	r2, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	fbb2 f3f3 	udiv	r3, r2, r3
 800485e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004862:	2b00      	cmp	r3, #0
 8004864:	bf0c      	ite	eq
 8004866:	2301      	moveq	r3, #1
 8004868:	2300      	movne	r3, #0
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_I2C_Init+0x114>
 8004870:	2301      	movs	r3, #1
 8004872:	e01a      	b.n	80048aa <HAL_I2C_Init+0x14a>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <HAL_I2C_Init+0x132>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	4413      	add	r3, r2
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	fbb2 f3f3 	udiv	r3, r2, r3
 800488c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004890:	e00b      	b.n	80048aa <HAL_I2C_Init+0x14a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	009a      	lsls	r2, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6812      	ldr	r2, [r2, #0]
 80048ae:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69d9      	ldr	r1, [r3, #28]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1a      	ldr	r2, [r3, #32]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6919      	ldr	r1, [r3, #16]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6959      	ldr	r1, [r3, #20]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699a      	ldr	r2, [r3, #24]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	431bde83 	.word	0x431bde83
 800491c:	000186a0 	.word	0x000186a0
 8004920:	10624dd3 	.word	0x10624dd3

08004924 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	461a      	mov	r2, r3
 8004930:	460b      	mov	r3, r1
 8004932:	817b      	strh	r3, [r7, #10]
 8004934:	4613      	mov	r3, r2
 8004936:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800493c:	f7ff fa46 	bl	8003dcc <HAL_GetTick>
 8004940:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b20      	cmp	r3, #32
 800494c:	f040 80ee 	bne.w	8004b2c <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	2319      	movs	r3, #25
 8004956:	2201      	movs	r2, #1
 8004958:	4977      	ldr	r1, [pc, #476]	; (8004b38 <HAL_I2C_Master_Transmit+0x214>)
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 fc6c 	bl	8005238 <I2C_WaitOnFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8004966:	2302      	movs	r3, #2
 8004968:	e0e1      	b.n	8004b2e <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <HAL_I2C_Master_Transmit+0x54>
 8004974:	2302      	movs	r3, #2
 8004976:	e0da      	b.n	8004b2e <HAL_I2C_Master_Transmit+0x20a>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b01      	cmp	r3, #1
 800498c:	d007      	beq.n	800499e <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 0201 	orr.w	r2, r2, #1
 800499c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2221      	movs	r2, #33	; 0x21
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2210      	movs	r2, #16
 80049ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	893a      	ldrh	r2, [r7, #8]
 80049ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4a5a      	ldr	r2, [pc, #360]	; (8004b3c <HAL_I2C_Master_Transmit+0x218>)
 80049d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049e0:	8979      	ldrh	r1, [r7, #10]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	6a3a      	ldr	r2, [r7, #32]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 fadc 	bl	8004fa4 <I2C_MasterRequestWrite>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00f      	beq.n	8004a12 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d105      	bne.n	8004a06 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR; //Error is happening here -Steven
 8004a02:	2301      	movs	r3, #1
 8004a04:	e093      	b.n	8004b2e <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e08d      	b.n	8004b2e <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8004a28:	e066      	b.n	8004af8 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	6a39      	ldr	r1, [r7, #32]
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fcc1 	bl	80053b6 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00f      	beq.n	8004a5a <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d109      	bne.n	8004a56 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a50:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e06b      	b.n	8004b2e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e069      	b.n	8004b2e <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	1c59      	adds	r1, r3, #1
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	6251      	str	r1, [r2, #36]	; 0x24
 8004a64:	781a      	ldrb	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d119      	bne.n	8004ac8 <HAL_I2C_Master_Transmit+0x1a4>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d015      	beq.n	8004ac8 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	1c59      	adds	r1, r3, #1
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	6251      	str	r1, [r2, #36]	; 0x24
 8004aa6:	781a      	ldrb	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	6a39      	ldr	r1, [r7, #32]
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 fcaf 	bl	8005430 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00f      	beq.n	8004af8 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d109      	bne.n	8004af4 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aee:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e01c      	b.n	8004b2e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e01a      	b.n	8004b2e <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d194      	bne.n	8004a2a <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e000      	b.n	8004b2e <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8004b2c:	2302      	movs	r3, #2
  }
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	00100002 	.word	0x00100002
 8004b3c:	ffff0000 	.word	0xffff0000

08004b40 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08c      	sub	sp, #48	; 0x30
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	607a      	str	r2, [r7, #4]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	817b      	strh	r3, [r7, #10]
 8004b50:	4613      	mov	r3, r2
 8004b52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b58:	f7ff f938 	bl	8003dcc <HAL_GetTick>
 8004b5c:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	f040 8215 	bne.w	8004f96 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	2319      	movs	r3, #25
 8004b72:	2201      	movs	r2, #1
 8004b74:	4985      	ldr	r1, [pc, #532]	; (8004d8c <HAL_I2C_Master_Receive+0x24c>)
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 fb5e 	bl	8005238 <I2C_WaitOnFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004b82:	2302      	movs	r3, #2
 8004b84:	e208      	b.n	8004f98 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <HAL_I2C_Master_Receive+0x54>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e201      	b.n	8004f98 <HAL_I2C_Master_Receive+0x458>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d007      	beq.n	8004bba <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0201 	orr.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2222      	movs	r2, #34	; 0x22
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2210      	movs	r2, #16
 8004bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	893a      	ldrh	r2, [r7, #8]
 8004bea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4a68      	ldr	r2, [pc, #416]	; (8004d90 <HAL_I2C_Master_Receive+0x250>)
 8004bf0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004bfc:	8979      	ldrh	r1, [r7, #10]
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fa50 	bl	80050a8 <I2C_MasterRequestRead>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00f      	beq.n	8004c2e <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d105      	bne.n	8004c22 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e1ba      	b.n	8004f98 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e1b4      	b.n	8004f98 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d113      	bne.n	8004c5e <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c36:	2300      	movs	r3, #0
 8004c38:	623b      	str	r3, [r7, #32]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	623b      	str	r3, [r7, #32]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	623b      	str	r3, [r7, #32]
 8004c4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	e188      	b.n	8004f70 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d11b      	bne.n	8004c9e <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	61fb      	str	r3, [r7, #28]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	61fb      	str	r3, [r7, #28]
 8004c8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	e168      	b.n	8004f70 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d11b      	bne.n	8004cde <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61bb      	str	r3, [r7, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	61bb      	str	r3, [r7, #24]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	61bb      	str	r3, [r7, #24]
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	e148      	b.n	8004f70 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8004d04:	e134      	b.n	8004f70 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	f200 80eb 	bhi.w	8004ee6 <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d127      	bne.n	8004d68 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8004d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 fbc4 	bl	80054aa <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d007      	beq.n	8004d38 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d101      	bne.n	8004d34 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e131      	b.n	8004f98 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e12f      	b.n	8004f98 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6918      	ldr	r0, [r3, #16]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	1c59      	adds	r1, r3, #1
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	6251      	str	r1, [r2, #36]	; 0x24
 8004d48:	b2c2      	uxtb	r2, r0
 8004d4a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d66:	e103      	b.n	8004f70 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d14a      	bne.n	8004e06 <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	2200      	movs	r2, #0
 8004d78:	4906      	ldr	r1, [pc, #24]	; (8004d94 <HAL_I2C_Master_Receive+0x254>)
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 fa5c 	bl	8005238 <I2C_WaitOnFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d008      	beq.n	8004d98 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e106      	b.n	8004f98 <HAL_I2C_Master_Receive+0x458>
 8004d8a:	bf00      	nop
 8004d8c:	00100002 	.word	0x00100002
 8004d90:	ffff0000 	.word	0xffff0000
 8004d94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6918      	ldr	r0, [r3, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	1c59      	adds	r1, r3, #1
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	6251      	str	r1, [r2, #36]	; 0x24
 8004db8:	b2c2      	uxtb	r2, r0
 8004dba:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6918      	ldr	r0, [r3, #16]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	1c59      	adds	r1, r3, #1
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	6251      	str	r1, [r2, #36]	; 0x24
 8004de6:	b2c2      	uxtb	r2, r0
 8004de8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e04:	e0b4      	b.n	8004f70 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	4964      	ldr	r1, [pc, #400]	; (8004fa0 <HAL_I2C_Master_Receive+0x460>)
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 fa11 	bl	8005238 <I2C_WaitOnFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e0bb      	b.n	8004f98 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6918      	ldr	r0, [r3, #16]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	1c59      	adds	r1, r3, #1
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	6251      	str	r1, [r2, #36]	; 0x24
 8004e40:	b2c2      	uxtb	r2, r0
 8004e42:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	2200      	movs	r2, #0
 8004e66:	494e      	ldr	r1, [pc, #312]	; (8004fa0 <HAL_I2C_Master_Receive+0x460>)
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 f9e5 	bl	8005238 <I2C_WaitOnFlagUntilTimeout>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e08f      	b.n	8004f98 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6918      	ldr	r0, [r3, #16]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	1c59      	adds	r1, r3, #1
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	6251      	str	r1, [r2, #36]	; 0x24
 8004e98:	b2c2      	uxtb	r2, r0
 8004e9a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6918      	ldr	r0, [r3, #16]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	1c59      	adds	r1, r3, #1
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	6251      	str	r1, [r2, #36]	; 0x24
 8004ec6:	b2c2      	uxtb	r2, r0
 8004ec8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ee4:	e044      	b.n	8004f70 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8004ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 fadd 	bl	80054aa <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d007      	beq.n	8004f06 <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	2b20      	cmp	r3, #32
 8004efc:	d101      	bne.n	8004f02 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e04a      	b.n	8004f98 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e048      	b.n	8004f98 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6918      	ldr	r0, [r3, #16]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	1c59      	adds	r1, r3, #1
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	6251      	str	r1, [r2, #36]	; 0x24
 8004f16:	b2c2      	uxtb	r2, r0
 8004f18:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d116      	bne.n	8004f70 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6918      	ldr	r0, [r3, #16]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	1c59      	adds	r1, r3, #1
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	6251      	str	r1, [r2, #36]	; 0x24
 8004f52:	b2c2      	uxtb	r2, r0
 8004f54:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f47f aec6 	bne.w	8004d06 <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	e000      	b.n	8004f98 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f96:	2302      	movs	r3, #2
  }
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3728      	adds	r7, #40	; 0x28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	00010004 	.word	0x00010004

08004fa4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	607a      	str	r2, [r7, #4]
 8004fae:	603b      	str	r3, [r7, #0]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d006      	beq.n	8004fce <I2C_MasterRequestWrite+0x2a>
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d003      	beq.n	8004fce <I2C_MasterRequestWrite+0x2a>
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fcc:	d108      	bne.n	8004fe0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e00b      	b.n	8004ff8 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe4:	2b12      	cmp	r3, #18
 8004fe6:	d107      	bne.n	8004ff8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ff6:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f917 	bl	8005238 <I2C_WaitOnFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e041      	b.n	8005098 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800501c:	d108      	bne.n	8005030 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800501e:	897b      	ldrh	r3, [r7, #10]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800502c:	611a      	str	r2, [r3, #16]
 800502e:	e021      	b.n	8005074 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005030:	897b      	ldrh	r3, [r7, #10]
 8005032:	11db      	asrs	r3, r3, #7
 8005034:	b2db      	uxtb	r3, r3
 8005036:	f003 0306 	and.w	r3, r3, #6
 800503a:	b2db      	uxtb	r3, r3
 800503c:	f063 030f 	orn	r3, r3, #15
 8005040:	b2da      	uxtb	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	4914      	ldr	r1, [pc, #80]	; (80050a0 <I2C_MasterRequestWrite+0xfc>)
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 f943 	bl	80052da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	2b04      	cmp	r3, #4
 8005060:	d101      	bne.n	8005066 <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e018      	b.n	8005098 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e016      	b.n	8005098 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800506a:	897b      	ldrh	r3, [r7, #10]
 800506c:	b2da      	uxtb	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	490a      	ldr	r1, [pc, #40]	; (80050a4 <I2C_MasterRequestWrite+0x100>)
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 f92d 	bl	80052da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	2b04      	cmp	r3, #4
 800508c:	d101      	bne.n	8005092 <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e002      	b.n	8005098 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e000      	b.n	8005098 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	00010008 	.word	0x00010008
 80050a4:	00010002 	.word	0x00010002

080050a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	607a      	str	r2, [r7, #4]
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	460b      	mov	r3, r1
 80050b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d006      	beq.n	80050e2 <I2C_MasterRequestRead+0x3a>
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d003      	beq.n	80050e2 <I2C_MasterRequestRead+0x3a>
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050e0:	d108      	bne.n	80050f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	e00b      	b.n	800510c <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f8:	2b11      	cmp	r3, #17
 80050fa:	d107      	bne.n	800510c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800510a:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 f88d 	bl	8005238 <I2C_WaitOnFlagUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e07f      	b.n	8005228 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005130:	d108      	bne.n	8005144 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005132:	897b      	ldrh	r3, [r7, #10]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	b2da      	uxtb	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	611a      	str	r2, [r3, #16]
 8005142:	e05f      	b.n	8005204 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005144:	897b      	ldrh	r3, [r7, #10]
 8005146:	11db      	asrs	r3, r3, #7
 8005148:	b2db      	uxtb	r3, r3
 800514a:	f003 0306 	and.w	r3, r3, #6
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f063 030f 	orn	r3, r3, #15
 8005154:	b2da      	uxtb	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	4933      	ldr	r1, [pc, #204]	; (8005230 <I2C_MasterRequestRead+0x188>)
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f8b9 	bl	80052da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d007      	beq.n	800517e <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	2b04      	cmp	r3, #4
 8005174:	d101      	bne.n	800517a <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e056      	b.n	8005228 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e054      	b.n	8005228 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800517e:	897b      	ldrh	r3, [r7, #10]
 8005180:	b2da      	uxtb	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	4929      	ldr	r1, [pc, #164]	; (8005234 <I2C_MasterRequestRead+0x18c>)
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f8a3 	bl	80052da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d101      	bne.n	80051a6 <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e040      	b.n	8005228 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e03e      	b.n	8005228 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051aa:	2300      	movs	r3, #0
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f82b 	bl	8005238 <I2C_WaitOnFlagUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e01d      	b.n	8005228 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80051ec:	897b      	ldrh	r3, [r7, #10]
 80051ee:	11db      	asrs	r3, r3, #7
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f003 0306 	and.w	r3, r3, #6
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	f063 030e 	orn	r3, r3, #14
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	490a      	ldr	r1, [pc, #40]	; (8005234 <I2C_MasterRequestRead+0x18c>)
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 f865 	bl	80052da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d007      	beq.n	8005226 <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	2b04      	cmp	r3, #4
 800521c:	d101      	bne.n	8005222 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e002      	b.n	8005228 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e000      	b.n	8005228 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	00010008 	.word	0x00010008
 8005234:	00010002 	.word	0x00010002

08005238 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	4613      	mov	r3, r2
 8005246:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8005248:	e01f      	b.n	800528a <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005250:	d01b      	beq.n	800528a <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d007      	beq.n	8005268 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005258:	f7fe fdb8 	bl	8003dcc <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d210      	bcs.n	800528a <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e023      	b.n	80052d2 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	0c1b      	lsrs	r3, r3, #16
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b01      	cmp	r3, #1
 8005292:	d10d      	bne.n	80052b0 <I2C_WaitOnFlagUntilTimeout+0x78>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	43da      	mvns	r2, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4013      	ands	r3, r2
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	bf0c      	ite	eq
 80052a6:	2301      	moveq	r3, #1
 80052a8:	2300      	movne	r3, #0
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	e00c      	b.n	80052ca <I2C_WaitOnFlagUntilTimeout+0x92>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	43da      	mvns	r2, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4013      	ands	r3, r2
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	bf0c      	ite	eq
 80052c2:	2301      	moveq	r3, #1
 80052c4:	2300      	movne	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d0bc      	beq.n	800524a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	607a      	str	r2, [r7, #4]
 80052e6:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052e8:	e040      	b.n	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f8:	d11c      	bne.n	8005334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005308:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005312:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2204      	movs	r2, #4
 8005318:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2220      	movs	r2, #32
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e03c      	b.n	80053ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533a:	d017      	beq.n	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d007      	beq.n	8005352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8005342:	f7fe fd43 	bl	8003dcc <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	429a      	cmp	r2, r3
 8005350:	d20c      	bcs.n	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2220      	movs	r2, #32
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e020      	b.n	80053ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	0c1b      	lsrs	r3, r3, #16
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b01      	cmp	r3, #1
 8005374:	d10c      	bne.n	8005390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	43da      	mvns	r2, r3
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	4013      	ands	r3, r2
 8005382:	b29b      	uxth	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	bf14      	ite	ne
 8005388:	2301      	movne	r3, #1
 800538a:	2300      	moveq	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	e00b      	b.n	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	43da      	mvns	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4013      	ands	r3, r2
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	bf14      	ite	ne
 80053a2:	2301      	movne	r3, #1
 80053a4:	2300      	moveq	r3, #0
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d19e      	bne.n	80052ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c2:	e029      	b.n	8005418 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 f8ba 	bl	800553e <I2C_IsAcknowledgeFailed>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e029      	b.n	8005428 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053da:	d01d      	beq.n	8005418 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053e2:	f7fe fcf3 	bl	8003dcc <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d212      	bcs.n	8005418 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	f043 0220 	orr.w	r2, r3, #32
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e007      	b.n	8005428 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005422:	2b80      	cmp	r3, #128	; 0x80
 8005424:	d1ce      	bne.n	80053c4 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800543c:	e029      	b.n	8005492 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 f87d 	bl	800553e <I2C_IsAcknowledgeFailed>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e029      	b.n	80054a2 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005454:	d01d      	beq.n	8005492 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d007      	beq.n	800546c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800545c:	f7fe fcb6 	bl	8003dcc <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	429a      	cmp	r2, r3
 800546a:	d212      	bcs.n	8005492 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	f043 0220 	orr.w	r2, r3, #32
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2220      	movs	r2, #32
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e007      	b.n	80054a2 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b04      	cmp	r3, #4
 800549e:	d1ce      	bne.n	800543e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b084      	sub	sp, #16
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	60f8      	str	r0, [r7, #12]
 80054b2:	60b9      	str	r1, [r7, #8]
 80054b4:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054b6:	e036      	b.n	8005526 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	f003 0310 	and.w	r3, r3, #16
 80054c2:	2b10      	cmp	r3, #16
 80054c4:	d114      	bne.n	80054f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f06f 0210 	mvn.w	r2, #16
 80054ce:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e022      	b.n	8005536 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d007      	beq.n	8005506 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 80054f6:	f7fe fc69 	bl	8003dcc <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	429a      	cmp	r2, r3
 8005504:	d20f      	bcs.n	8005526 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	f043 0220 	orr.w	r2, r3, #32
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e007      	b.n	8005536 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005530:	2b40      	cmp	r3, #64	; 0x40
 8005532:	d1c1      	bne.n	80054b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005554:	d114      	bne.n	8005580 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800555e:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2204      	movs	r2, #4
 8005564:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
	...

08005590 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08e      	sub	sp, #56	; 0x38
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8005598:	2300      	movs	r3, #0
 800559a:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d075      	beq.n	8005694 <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055a8:	4b92      	ldr	r3, [pc, #584]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 030c 	and.w	r3, r3, #12
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d00c      	beq.n	80055ce <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055b4:	4b8f      	ldr	r3, [pc, #572]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d112      	bne.n	80055e6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055c0:	4b8c      	ldr	r3, [pc, #560]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055cc:	d10b      	bne.n	80055e6 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ce:	4b89      	ldr	r3, [pc, #548]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d05b      	beq.n	8005692 <HAL_RCC_OscConfig+0x102>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d157      	bne.n	8005692 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e222      	b.n	8005a2c <HAL_RCC_OscConfig+0x49c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ee:	d106      	bne.n	80055fe <HAL_RCC_OscConfig+0x6e>
 80055f0:	4b80      	ldr	r3, [pc, #512]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a7f      	ldr	r2, [pc, #508]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 80055f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	e01d      	b.n	800563a <HAL_RCC_OscConfig+0xaa>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005606:	d10c      	bne.n	8005622 <HAL_RCC_OscConfig+0x92>
 8005608:	4b7a      	ldr	r3, [pc, #488]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a79      	ldr	r2, [pc, #484]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 800560e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	4b77      	ldr	r3, [pc, #476]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a76      	ldr	r2, [pc, #472]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 800561a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	e00b      	b.n	800563a <HAL_RCC_OscConfig+0xaa>
 8005622:	4b74      	ldr	r3, [pc, #464]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a73      	ldr	r2, [pc, #460]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 8005628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	4b71      	ldr	r3, [pc, #452]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a70      	ldr	r2, [pc, #448]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 8005634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005638:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d013      	beq.n	800566a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005642:	f7fe fbc3 	bl	8003dcc <HAL_GetTick>
 8005646:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800564a:	f7fe fbbf 	bl	8003dcc <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b64      	cmp	r3, #100	; 0x64
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e1e7      	b.n	8005a2c <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800565c:	4b65      	ldr	r3, [pc, #404]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d0f0      	beq.n	800564a <HAL_RCC_OscConfig+0xba>
 8005668:	e014      	b.n	8005694 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566a:	f7fe fbaf 	bl	8003dcc <HAL_GetTick>
 800566e:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005672:	f7fe fbab 	bl	8003dcc <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b64      	cmp	r3, #100	; 0x64
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e1d3      	b.n	8005a2c <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005684:	4b5b      	ldr	r3, [pc, #364]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1f0      	bne.n	8005672 <HAL_RCC_OscConfig+0xe2>
 8005690:	e000      	b.n	8005694 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005692:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d077      	beq.n	8005790 <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056a0:	4b54      	ldr	r3, [pc, #336]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 030c 	and.w	r3, r3, #12
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00b      	beq.n	80056c4 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ac:	4b51      	ldr	r3, [pc, #324]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d126      	bne.n	8005706 <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056b8:	4b4e      	ldr	r3, [pc, #312]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d120      	bne.n	8005706 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056c4:	4b4b      	ldr	r3, [pc, #300]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d005      	beq.n	80056dc <HAL_RCC_OscConfig+0x14c>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d001      	beq.n	80056dc <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e1a7      	b.n	8005a2c <HAL_RCC_OscConfig+0x49c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056dc:	4b45      	ldr	r3, [pc, #276]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6919      	ldr	r1, [r3, #16]
 80056e8:	23f8      	movs	r3, #248	; 0xf8
 80056ea:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	fa93 f3a3 	rbit	r3, r3
 80056f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80056f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f6:	fab3 f383 	clz	r3, r3
 80056fa:	fa01 f303 	lsl.w	r3, r1, r3
 80056fe:	493d      	ldr	r1, [pc, #244]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 8005700:	4313      	orrs	r3, r2
 8005702:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005704:	e044      	b.n	8005790 <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d02a      	beq.n	8005764 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800570e:	4b3a      	ldr	r3, [pc, #232]	; (80057f8 <HAL_RCC_OscConfig+0x268>)
 8005710:	2201      	movs	r2, #1
 8005712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005714:	f7fe fb5a 	bl	8003dcc <HAL_GetTick>
 8005718:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800571c:	f7fe fb56 	bl	8003dcc <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e17e      	b.n	8005a2c <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800572e:	4b31      	ldr	r3, [pc, #196]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d0f0      	beq.n	800571c <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800573a:	4b2e      	ldr	r3, [pc, #184]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6919      	ldr	r1, [r3, #16]
 8005746:	23f8      	movs	r3, #248	; 0xf8
 8005748:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574c:	fa93 f3a3 	rbit	r3, r3
 8005750:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	fab3 f383 	clz	r3, r3
 8005758:	fa01 f303 	lsl.w	r3, r1, r3
 800575c:	4925      	ldr	r1, [pc, #148]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 800575e:	4313      	orrs	r3, r2
 8005760:	600b      	str	r3, [r1, #0]
 8005762:	e015      	b.n	8005790 <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005764:	4b24      	ldr	r3, [pc, #144]	; (80057f8 <HAL_RCC_OscConfig+0x268>)
 8005766:	2200      	movs	r2, #0
 8005768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576a:	f7fe fb2f 	bl	8003dcc <HAL_GetTick>
 800576e:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005772:	f7fe fb2b 	bl	8003dcc <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e153      	b.n	8005a2c <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005784:	4b1b      	ldr	r3, [pc, #108]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1f0      	bne.n	8005772 <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0308 	and.w	r3, r3, #8
 8005798:	2b00      	cmp	r3, #0
 800579a:	d037      	beq.n	800580c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d016      	beq.n	80057d2 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057a4:	4b15      	ldr	r3, [pc, #84]	; (80057fc <HAL_RCC_OscConfig+0x26c>)
 80057a6:	2201      	movs	r2, #1
 80057a8:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057aa:	f7fe fb0f 	bl	8003dcc <HAL_GetTick>
 80057ae:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057b2:	f7fe fb0b 	bl	8003dcc <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e133      	b.n	8005a2c <HAL_RCC_OscConfig+0x49c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057c4:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <HAL_RCC_OscConfig+0x264>)
 80057c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0f0      	beq.n	80057b2 <HAL_RCC_OscConfig+0x222>
 80057d0:	e01c      	b.n	800580c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057d2:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <HAL_RCC_OscConfig+0x26c>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d8:	f7fe faf8 	bl	8003dcc <HAL_GetTick>
 80057dc:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057de:	e00f      	b.n	8005800 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057e0:	f7fe faf4 	bl	8003dcc <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d908      	bls.n	8005800 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e11c      	b.n	8005a2c <HAL_RCC_OscConfig+0x49c>
 80057f2:	bf00      	nop
 80057f4:	40023800 	.word	0x40023800
 80057f8:	42470000 	.word	0x42470000
 80057fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005800:	4b8c      	ldr	r3, [pc, #560]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 8005802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e9      	bne.n	80057e0 <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d07d      	beq.n	8005914 <HAL_RCC_OscConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005818:	2300      	movs	r3, #0
 800581a:	60bb      	str	r3, [r7, #8]
 800581c:	4b85      	ldr	r3, [pc, #532]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	4a84      	ldr	r2, [pc, #528]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 8005822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005826:	6413      	str	r3, [r2, #64]	; 0x40
 8005828:	4b82      	ldr	r3, [pc, #520]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005830:	60bb      	str	r3, [r7, #8]
 8005832:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005834:	4b80      	ldr	r3, [pc, #512]	; (8005a38 <HAL_RCC_OscConfig+0x4a8>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a7f      	ldr	r2, [pc, #508]	; (8005a38 <HAL_RCC_OscConfig+0x4a8>)
 800583a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800583e:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8005840:	f7fe fac4 	bl	8003dcc <HAL_GetTick>
 8005844:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x2ca>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005848:	f7fe fac0 	bl	8003dcc <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x2ca>
      {
        return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e0e8      	b.n	8005a2c <HAL_RCC_OscConfig+0x49c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800585a:	4b77      	ldr	r3, [pc, #476]	; (8005a38 <HAL_RCC_OscConfig+0x4a8>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f0      	beq.n	8005848 <HAL_RCC_OscConfig+0x2b8>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d106      	bne.n	800587c <HAL_RCC_OscConfig+0x2ec>
 800586e:	4b71      	ldr	r3, [pc, #452]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 8005870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005872:	4a70      	ldr	r2, [pc, #448]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 8005874:	f043 0301 	orr.w	r3, r3, #1
 8005878:	6713      	str	r3, [r2, #112]	; 0x70
 800587a:	e01c      	b.n	80058b6 <HAL_RCC_OscConfig+0x326>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	2b05      	cmp	r3, #5
 8005882:	d10c      	bne.n	800589e <HAL_RCC_OscConfig+0x30e>
 8005884:	4b6b      	ldr	r3, [pc, #428]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 8005886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005888:	4a6a      	ldr	r2, [pc, #424]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 800588a:	f043 0304 	orr.w	r3, r3, #4
 800588e:	6713      	str	r3, [r2, #112]	; 0x70
 8005890:	4b68      	ldr	r3, [pc, #416]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 8005892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005894:	4a67      	ldr	r2, [pc, #412]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 8005896:	f043 0301 	orr.w	r3, r3, #1
 800589a:	6713      	str	r3, [r2, #112]	; 0x70
 800589c:	e00b      	b.n	80058b6 <HAL_RCC_OscConfig+0x326>
 800589e:	4b65      	ldr	r3, [pc, #404]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 80058a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a2:	4a64      	ldr	r2, [pc, #400]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 80058a4:	f023 0301 	bic.w	r3, r3, #1
 80058a8:	6713      	str	r3, [r2, #112]	; 0x70
 80058aa:	4b62      	ldr	r3, [pc, #392]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 80058ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ae:	4a61      	ldr	r2, [pc, #388]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 80058b0:	f023 0304 	bic.w	r3, r3, #4
 80058b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d015      	beq.n	80058ea <HAL_RCC_OscConfig+0x35a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058be:	f7fe fa85 	bl	8003dcc <HAL_GetTick>
 80058c2:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058c4:	e00a      	b.n	80058dc <HAL_RCC_OscConfig+0x34c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058c6:	f7fe fa81 	bl	8003dcc <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x34c>
        {
          return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e0a7      	b.n	8005a2c <HAL_RCC_OscConfig+0x49c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058dc:	4b55      	ldr	r3, [pc, #340]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 80058de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0ee      	beq.n	80058c6 <HAL_RCC_OscConfig+0x336>
 80058e8:	e014      	b.n	8005914 <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ea:	f7fe fa6f 	bl	8003dcc <HAL_GetTick>
 80058ee:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f0:	e00a      	b.n	8005908 <HAL_RCC_OscConfig+0x378>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058f2:	f7fe fa6b 	bl	8003dcc <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005900:	4293      	cmp	r3, r2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e091      	b.n	8005a2c <HAL_RCC_OscConfig+0x49c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005908:	4b4a      	ldr	r3, [pc, #296]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1ee      	bne.n	80058f2 <HAL_RCC_OscConfig+0x362>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 8086 	beq.w	8005a2a <HAL_RCC_OscConfig+0x49a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800591e:	4b45      	ldr	r3, [pc, #276]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 030c 	and.w	r3, r3, #12
 8005926:	2b08      	cmp	r3, #8
 8005928:	d07d      	beq.n	8005a26 <HAL_RCC_OscConfig+0x496>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d162      	bne.n	80059f8 <HAL_RCC_OscConfig+0x468>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005932:	4b42      	ldr	r3, [pc, #264]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005938:	f7fe fa48 	bl	8003dcc <HAL_GetTick>
 800593c:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x3c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005940:	f7fe fa44 	bl	8003dcc <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x3c2>
          {
            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e06c      	b.n	8005a2c <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005952:	4b38      	ldr	r3, [pc, #224]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1f0      	bne.n	8005940 <HAL_RCC_OscConfig+0x3b0>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69da      	ldr	r2, [r3, #28]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800596c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005970:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	fa93 f3a3 	rbit	r3, r3
 8005978:	60fb      	str	r3, [r7, #12]
  return(result);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	fab3 f383 	clz	r3, r3
 8005980:	fa01 f303 	lsl.w	r3, r1, r3
 8005984:	431a      	orrs	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	085b      	lsrs	r3, r3, #1
 800598c:	1e59      	subs	r1, r3, #1
 800598e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005992:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	fa93 f3a3 	rbit	r3, r3
 800599a:	617b      	str	r3, [r7, #20]
  return(result);
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	fab3 f383 	clz	r3, r3
 80059a2:	fa01 f303 	lsl.w	r3, r1, r3
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059ac:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80059b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	fa93 f3a3 	rbit	r3, r3
 80059b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	fab3 f383 	clz	r3, r3
 80059c0:	fa01 f303 	lsl.w	r3, r1, r3
 80059c4:	491b      	ldr	r1, [pc, #108]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059ca:	4b1c      	ldr	r3, [pc, #112]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d0:	f7fe f9fc 	bl	8003dcc <HAL_GetTick>
 80059d4:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059d8:	f7fe f9f8 	bl	8003dcc <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e020      	b.n	8005a2c <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ea:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCC_OscConfig+0x448>
 80059f6:	e018      	b.n	8005a2a <HAL_RCC_OscConfig+0x49a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f8:	4b10      	ldr	r3, [pc, #64]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fe:	f7fe f9e5 	bl	8003dcc <HAL_GetTick>
 8005a02:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a06:	f7fe f9e1 	bl	8003dcc <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e009      	b.n	8005a2c <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a18:	4b06      	ldr	r3, [pc, #24]	; (8005a34 <HAL_RCC_OscConfig+0x4a4>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1f0      	bne.n	8005a06 <HAL_RCC_OscConfig+0x476>
 8005a24:	e001      	b.n	8005a2a <HAL_RCC_OscConfig+0x49a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <HAL_RCC_OscConfig+0x49c>
    }
  }
  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3738      	adds	r7, #56	; 0x38
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40023800 	.word	0x40023800
 8005a38:	40007000 	.word	0x40007000
 8005a3c:	42470060 	.word	0x42470060

08005a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005a4e:	4b81      	ldr	r3, [pc, #516]	; (8005c54 <HAL_RCC_ClockConfig+0x214>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d90c      	bls.n	8005a76 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5c:	4b7d      	ldr	r3, [pc, #500]	; (8005c54 <HAL_RCC_ClockConfig+0x214>)
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a64:	4b7b      	ldr	r3, [pc, #492]	; (8005c54 <HAL_RCC_ClockConfig+0x214>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 030f 	and.w	r3, r3, #15
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d001      	beq.n	8005a76 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e0ea      	b.n	8005c4c <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d008      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a82:	4b75      	ldr	r3, [pc, #468]	; (8005c58 <HAL_RCC_ClockConfig+0x218>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	4972      	ldr	r1, [pc, #456]	; (8005c58 <HAL_RCC_ClockConfig+0x218>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 8086 	beq.w	8005bae <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d107      	bne.n	8005aba <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aaa:	4b6b      	ldr	r3, [pc, #428]	; (8005c58 <HAL_RCC_ClockConfig+0x218>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d119      	bne.n	8005aea <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e0c8      	b.n	8005c4c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d003      	beq.n	8005aca <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8005ac6:	2b03      	cmp	r3, #3
 8005ac8:	d107      	bne.n	8005ada <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aca:	4b63      	ldr	r3, [pc, #396]	; (8005c58 <HAL_RCC_ClockConfig+0x218>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d109      	bne.n	8005aea <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e0b8      	b.n	8005c4c <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ada:	4b5f      	ldr	r3, [pc, #380]	; (8005c58 <HAL_RCC_ClockConfig+0x218>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e0b0      	b.n	8005c4c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aea:	4b5b      	ldr	r3, [pc, #364]	; (8005c58 <HAL_RCC_ClockConfig+0x218>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f023 0203 	bic.w	r2, r3, #3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	4958      	ldr	r1, [pc, #352]	; (8005c58 <HAL_RCC_ClockConfig+0x218>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005afc:	f7fe f966 	bl	8003dcc <HAL_GetTick>
 8005b00:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d112      	bne.n	8005b30 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b0a:	e00a      	b.n	8005b22 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b0c:	f7fe f95e 	bl	8003dcc <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e094      	b.n	8005c4c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b22:	4b4d      	ldr	r3, [pc, #308]	; (8005c58 <HAL_RCC_ClockConfig+0x218>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 030c 	and.w	r3, r3, #12
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d1ee      	bne.n	8005b0c <HAL_RCC_ClockConfig+0xcc>
 8005b2e:	e03e      	b.n	8005bae <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d112      	bne.n	8005b5e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b38:	e00a      	b.n	8005b50 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b3a:	f7fe f947 	bl	8003dcc <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e07d      	b.n	8005c4c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b50:	4b41      	ldr	r3, [pc, #260]	; (8005c58 <HAL_RCC_ClockConfig+0x218>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 030c 	and.w	r3, r3, #12
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d1ee      	bne.n	8005b3a <HAL_RCC_ClockConfig+0xfa>
 8005b5c:	e027      	b.n	8005bae <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d11d      	bne.n	8005ba2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8005b66:	e00a      	b.n	8005b7e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b68:	f7fe f930 	bl	8003dcc <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e066      	b.n	8005c4c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8005b7e:	4b36      	ldr	r3, [pc, #216]	; (8005c58 <HAL_RCC_ClockConfig+0x218>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 030c 	and.w	r3, r3, #12
 8005b86:	2b0c      	cmp	r3, #12
 8005b88:	d1ee      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x128>
 8005b8a:	e010      	b.n	8005bae <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b8c:	f7fe f91e 	bl	8003dcc <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e054      	b.n	8005c4c <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ba2:	4b2d      	ldr	r3, [pc, #180]	; (8005c58 <HAL_RCC_ClockConfig+0x218>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f003 030c 	and.w	r3, r3, #12
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1ee      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8005bae:	4b29      	ldr	r3, [pc, #164]	; (8005c54 <HAL_RCC_ClockConfig+0x214>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d20c      	bcs.n	8005bd6 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bbc:	4b25      	ldr	r3, [pc, #148]	; (8005c54 <HAL_RCC_ClockConfig+0x214>)
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005bc4:	4b23      	ldr	r3, [pc, #140]	; (8005c54 <HAL_RCC_ClockConfig+0x214>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d001      	beq.n	8005bd6 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e03a      	b.n	8005c4c <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d008      	beq.n	8005bf4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005be2:	4b1d      	ldr	r3, [pc, #116]	; (8005c58 <HAL_RCC_ClockConfig+0x218>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	491a      	ldr	r1, [pc, #104]	; (8005c58 <HAL_RCC_ClockConfig+0x218>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0308 	and.w	r3, r3, #8
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d009      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c00:	4b15      	ldr	r3, [pc, #84]	; (8005c58 <HAL_RCC_ClockConfig+0x218>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	4912      	ldr	r1, [pc, #72]	; (8005c58 <HAL_RCC_ClockConfig+0x218>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8005c14:	f000 f826 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8005c18:	4601      	mov	r1, r0
 8005c1a:	4b0f      	ldr	r3, [pc, #60]	; (8005c58 <HAL_RCC_ClockConfig+0x218>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c22:	23f0      	movs	r3, #240	; 0xf0
 8005c24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	fa93 f3a3 	rbit	r3, r3
 8005c2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	fab3 f383 	clz	r3, r3
 8005c34:	fa22 f303 	lsr.w	r3, r2, r3
 8005c38:	4a08      	ldr	r2, [pc, #32]	; (8005c5c <HAL_RCC_ClockConfig+0x21c>)
 8005c3a:	5cd3      	ldrb	r3, [r2, r3]
 8005c3c:	fa21 f303 	lsr.w	r3, r1, r3
 8005c40:	4a07      	ldr	r2, [pc, #28]	; (8005c60 <HAL_RCC_ClockConfig+0x220>)
 8005c42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005c44:	200f      	movs	r0, #15
 8005c46:	f004 fc45 	bl	800a4d4 <HAL_InitTick>
  
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40023c00 	.word	0x40023c00
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	080109e0 	.word	0x080109e0
 8005c60:	20000014 	.word	0x20000014

08005c64 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b08b      	sub	sp, #44	; 0x2c
 8005c68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61fb      	str	r3, [r7, #28]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
 8005c72:	2300      	movs	r3, #0
 8005c74:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8005c76:	2300      	movs	r3, #0
 8005c78:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c7a:	4b38      	ldr	r3, [pc, #224]	; (8005d5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 030c 	and.w	r3, r3, #12
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d00c      	beq.n	8005ca0 <HAL_RCC_GetSysClockFreq+0x3c>
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	d85d      	bhi.n	8005d46 <HAL_RCC_GetSysClockFreq+0xe2>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <HAL_RCC_GetSysClockFreq+0x30>
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d003      	beq.n	8005c9a <HAL_RCC_GetSysClockFreq+0x36>
 8005c92:	e058      	b.n	8005d46 <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c94:	4b32      	ldr	r3, [pc, #200]	; (8005d60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005c96:	623b      	str	r3, [r7, #32]
       break;
 8005c98:	e058      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c9a:	4b31      	ldr	r3, [pc, #196]	; (8005d60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005c9c:	623b      	str	r3, [r7, #32]
      break;
 8005c9e:	e055      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ca0:	4b2e      	ldr	r3, [pc, #184]	; (8005d5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ca8:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005caa:	4b2c      	ldr	r3, [pc, #176]	; (8005d5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d017      	beq.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8005cb6:	4a2a      	ldr	r2, [pc, #168]	; (8005d60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cbe:	4b27      	ldr	r3, [pc, #156]	; (8005d5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cc0:	6859      	ldr	r1, [r3, #4]
 8005cc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cc6:	400b      	ands	r3, r1
 8005cc8:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8005ccc:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cce:	6979      	ldr	r1, [r7, #20]
 8005cd0:	fa91 f1a1 	rbit	r1, r1
 8005cd4:	6139      	str	r1, [r7, #16]
  return(result);
 8005cd6:	6939      	ldr	r1, [r7, #16]
 8005cd8:	fab1 f181 	clz	r1, r1
 8005cdc:	40cb      	lsrs	r3, r1
 8005cde:	fb02 f303 	mul.w	r3, r2, r3
 8005ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce4:	e016      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8005ce6:	4a1e      	ldr	r2, [pc, #120]	; (8005d60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cee:	4b1b      	ldr	r3, [pc, #108]	; (8005d5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cf0:	6859      	ldr	r1, [r3, #4]
 8005cf2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cf6:	400b      	ands	r3, r1
 8005cf8:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8005cfc:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfe:	68f9      	ldr	r1, [r7, #12]
 8005d00:	fa91 f1a1 	rbit	r1, r1
 8005d04:	60b9      	str	r1, [r7, #8]
  return(result);
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	fab1 f181 	clz	r1, r1
 8005d0c:	40cb      	lsrs	r3, r1
 8005d0e:	fb02 f303 	mul.w	r3, r2, r3
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8005d14:	4b11      	ldr	r3, [pc, #68]	; (8005d5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d1c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005d20:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	fa93 f3a3 	rbit	r3, r3
 8005d28:	603b      	str	r3, [r7, #0]
  return(result);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	fab3 f383 	clz	r3, r3
 8005d30:	fa22 f303 	lsr.w	r3, r2, r3
 8005d34:	3301      	adds	r3, #1
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8005d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d42:	623b      	str	r3, [r7, #32]
      break;
 8005d44:	e002      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d46:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005d48:	623b      	str	r3, [r7, #32]
      break;
 8005d4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	372c      	adds	r7, #44	; 0x2c
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	00f42400 	.word	0x00f42400

08005d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d64:	b480      	push	{r7}
 8005d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d68:	4b03      	ldr	r3, [pc, #12]	; (8005d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	20000014 	.word	0x20000014

08005d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8005d82:	f7ff ffef 	bl	8005d64 <HAL_RCC_GetHCLKFreq>
 8005d86:	4601      	mov	r1, r0
 8005d88:	4b0b      	ldr	r3, [pc, #44]	; (8005db8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d90:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005d94:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	fa93 f3a3 	rbit	r3, r3
 8005d9c:	603b      	str	r3, [r7, #0]
  return(result);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	fab3 f383 	clz	r3, r3
 8005da4:	fa22 f303 	lsr.w	r3, r2, r3
 8005da8:	4a04      	ldr	r2, [pc, #16]	; (8005dbc <HAL_RCC_GetPCLK1Freq+0x40>)
 8005daa:	5cd3      	ldrb	r3, [r2, r3]
 8005dac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	080109f0 	.word	0x080109f0

08005dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8005dc6:	f7ff ffcd 	bl	8005d64 <HAL_RCC_GetHCLKFreq>
 8005dca:	4601      	mov	r1, r0
 8005dcc:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8005dd4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005dd8:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	fa93 f3a3 	rbit	r3, r3
 8005de0:	603b      	str	r3, [r7, #0]
  return(result);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	fab3 f383 	clz	r3, r3
 8005de8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dec:	4a04      	ldr	r2, [pc, #16]	; (8005e00 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005dee:	5cd3      	ldrb	r3, [r2, r3]
 8005df0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005df4:	4618      	mov	r0, r3
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40023800 	.word	0x40023800
 8005e00:	080109f0 	.word	0x080109f0

08005e04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	220f      	movs	r2, #15
 8005e12:	601a      	str	r2, [r3, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e14:	4b12      	ldr	r3, [pc, #72]	; (8005e60 <HAL_RCC_GetClockConfig+0x5c>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 0203 	and.w	r2, r3, #3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005e20:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <HAL_RCC_GetClockConfig+0x5c>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005e2c:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <HAL_RCC_GetClockConfig+0x5c>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e38:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <HAL_RCC_GetClockConfig+0x5c>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	08db      	lsrs	r3, r3, #3
 8005e3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005e46:	4b07      	ldr	r3, [pc, #28]	; (8005e64 <HAL_RCC_GetClockConfig+0x60>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 020f 	and.w	r2, r3, #15
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	601a      	str	r2, [r3, #0]
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40023800 	.word	0x40023800
 8005e64:	40023c00 	.word	0x40023c00

08005e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b09c      	sub	sp, #112	; 0x70
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t tmpreg1 = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	66bb      	str	r3, [r7, #104]	; 0x68
  
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division   
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d106      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x2a>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 8082 	beq.w	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
        
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();    
 8005e92:	4bac      	ldr	r3, [pc, #688]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e98:	f7fd ff98 	bl	8003dcc <HAL_GetTick>
 8005e9c:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ea0:	f7fd ff94 	bl	8003dcc <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e1eb      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005eb2:	4ba5      	ldr	r3, [pc, #660]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1f0      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x38>
    }
    
    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added   
      only for I2S configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d01e      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ed6:	fa93 f3a3 	rbit	r3, r3
 8005eda:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 8005edc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ede:	fab3 f383 	clz	r3, r3
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6899      	ldr	r1, [r3, #8]
 8005ee8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005eec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ef0:	fa93 f3a3 	rbit	r3, r3
 8005ef4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005ef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ef8:	fab3 f383 	clz	r3, r3
 8005efc:	fa01 f303 	lsl.w	r3, r1, r3
 8005f00:	4991      	ldr	r1, [pc, #580]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
  
    /*---------------------------- SAI configuration -------------------------*/ 
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d02a      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
      
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005f14:	4b8c      	ldr	r3, [pc, #560]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005f1e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005f22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f26:	fa93 f3a3 	rbit	r3, r3
 8005f2a:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8005f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f2e:	fab3 f383 	clz	r3, r3
 8005f32:	fa22 f303 	lsr.w	r3, r2, r3
 8005f36:	66bb      	str	r3, [r7, #104]	; 0x68
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	019a      	lsls	r2, r3, #6
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	061b      	lsls	r3, r3, #24
 8005f44:	431a      	orrs	r2, r3
 8005f46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f48:	071b      	lsls	r3, r3, #28
 8005f4a:	497f      	ldr	r1, [pc, #508]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005f52:	4b7d      	ldr	r3, [pc, #500]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f58:	f023 021f 	bic.w	r2, r3, #31
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	4979      	ldr	r1, [pc, #484]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f6a:	4b76      	ldr	r3, [pc, #472]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f70:	f7fd ff2c 	bl	8003dcc <HAL_GetTick>
 8005f74:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f76:	e008      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f78:	f7fd ff28 	bl	8003dcc <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e17f      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f8a:	4b6f      	ldr	r3, [pc, #444]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0f0      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x110>
    
  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0304 	and.w	r3, r3, #4
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d106      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x148>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 80d7 	beq.w	800615e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8005fb0:	4b66      	ldr	r3, [pc, #408]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fb6:	f7fd ff09 	bl	8003dcc <HAL_GetTick>
 8005fba:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005fbe:	f7fd ff05 	bl	8003dcc <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x168>
      { 
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e15c      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fd0:	4b5d      	ldr	r3, [pc, #372]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fdc:	d0ef      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x156>
    }
    
    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0304 	and.w	r3, r3, #4
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d04b      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8005fea:	4b57      	ldr	r3, [pc, #348]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff0:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005ff4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005ff8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffc:	fa93 f3a3 	rbit	r3, r3
 8006000:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	fab3 f383 	clz	r3, r3
 8006008:	fa22 f303 	lsr.w	r3, r2, r3
 800600c:	66bb      	str	r3, [r7, #104]	; 0x68
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691a      	ldr	r2, [r3, #16]
 8006012:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006016:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800601a:	fa93 f3a3 	rbit	r3, r3
 800601e:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8006020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006022:	fab3 f383 	clz	r3, r3
 8006026:	409a      	lsls	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6959      	ldr	r1, [r3, #20]
 800602c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8006030:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006034:	fa93 f3a3 	rbit	r3, r3
 8006038:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800603a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800603c:	fab3 f383 	clz	r3, r3
 8006040:	fa01 f303 	lsl.w	r3, r1, r3
 8006044:	431a      	orrs	r2, r3
 8006046:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800604a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800604c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800604e:	fa93 f3a3 	rbit	r3, r3
 8006052:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006056:	fab3 f383 	clz	r3, r3
 800605a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800605c:	fa01 f303 	lsl.w	r3, r1, r3
 8006060:	4939      	ldr	r1, [pc, #228]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006068:	4b37      	ldr	r3, [pc, #220]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800606a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800606e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	3b01      	subs	r3, #1
 8006078:	021b      	lsls	r3, r3, #8
 800607a:	4933      	ldr	r1, [pc, #204]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800607c:	4313      	orrs	r3, r2
 800607e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    
    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d049      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 800608e:	4b2e      	ldr	r3, [pc, #184]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006094:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006098:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800609c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	fa93 f3a3 	rbit	r3, r3
 80060a4:	613b      	str	r3, [r7, #16]
  return(result);
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	fab3 f383 	clz	r3, r3
 80060ac:	fa22 f303 	lsr.w	r3, r2, r3
 80060b0:	66bb      	str	r3, [r7, #104]	; 0x68
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691a      	ldr	r2, [r3, #16]
 80060b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	fa93 f3a3 	rbit	r3, r3
 80060c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	fab3 f383 	clz	r3, r3
 80060ca:	409a      	lsls	r2, r3
 80060cc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	fa93 f3a3 	rbit	r3, r3
 80060d8:	623b      	str	r3, [r7, #32]
  return(result);
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	fab3 f383 	clz	r3, r3
 80060e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060e2:	fa01 f303 	lsl.w	r3, r1, r3
 80060e6:	431a      	orrs	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6999      	ldr	r1, [r3, #24]
 80060ec:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80060f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f4:	fa93 f3a3 	rbit	r3, r3
 80060f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80060fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fc:	fab3 f383 	clz	r3, r3
 8006100:	fa01 f303 	lsl.w	r3, r1, r3
 8006104:	4910      	ldr	r1, [pc, #64]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006106:	4313      	orrs	r3, r2
 8006108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800610c:	4b0e      	ldr	r3, [pc, #56]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800610e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006112:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	490b      	ldr	r1, [pc, #44]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800611c:	4313      	orrs	r3, r2
 800611e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006122:	4b0a      	ldr	r3, [pc, #40]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006124:	2201      	movs	r2, #1
 8006126:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006128:	f7fd fe50 	bl	8003dcc <HAL_GetTick>
 800612c:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800612e:	e00f      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006130:	f7fd fe4c 	bl	8003dcc <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d908      	bls.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      { 
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e0a3      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x422>
 8006142:	bf00      	nop
 8006144:	42470068 	.word	0x42470068
 8006148:	40023800 	.word	0x40023800
 800614c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006150:	4b50      	ldr	r3, [pc, #320]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800615c:	d1e8      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    }  
  }
  /*--------------------------------------------------------------------------*/
    
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 8083 	beq.w	8006272 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	4b48      	ldr	r3, [pc, #288]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	4a47      	ldr	r2, [pc, #284]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617a:	6413      	str	r3, [r2, #64]	; 0x40
 800617c:	4b45      	ldr	r3, [pc, #276]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800617e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	68fb      	ldr	r3, [r7, #12]
      
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006188:	4b43      	ldr	r3, [pc, #268]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a42      	ldr	r2, [pc, #264]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 800618e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006192:	6013      	str	r3, [r2, #0]
      
    /* Get tick */
    tickstart = HAL_GetTick();
 8006194:	f7fd fe1a 	bl	8003dcc <HAL_GetTick>
 8006198:	66f8      	str	r0, [r7, #108]	; 0x6c
      
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800619a:	e008      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x346>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800619c:	f7fd fe16 	bl	8003dcc <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d901      	bls.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x346>
      {
        return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e06d      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x422>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80061ae:	4b3a      	ldr	r3, [pc, #232]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0f0      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x334>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061ba:	4b36      	ldr	r3, [pc, #216]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80061bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c2:	66bb      	str	r3, [r7, #104]	; 0x68
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d02f      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d028      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061d8:	4b2e      	ldr	r3, [pc, #184]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80061da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e0:	66bb      	str	r3, [r7, #104]	; 0x68
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061e2:	4b2e      	ldr	r3, [pc, #184]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80061e4:	2201      	movs	r2, #1
 80061e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061e8:	4b2c      	ldr	r3, [pc, #176]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80061ee:	4a29      	ldr	r2, [pc, #164]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80061f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061f4:	4b27      	ldr	r3, [pc, #156]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80061f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d014      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006200:	f7fd fde4 	bl	8003dcc <HAL_GetTick>
 8006204:	66f8      	str	r0, [r7, #108]	; 0x6c
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006206:	e00a      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006208:	f7fd fde0 	bl	8003dcc <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	f241 3288 	movw	r2, #5000	; 0x1388
 8006216:	4293      	cmp	r3, r2
 8006218:	d901      	bls.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e035      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800621e:	4b1d      	ldr	r3, [pc, #116]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0ee      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006232:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006236:	d10d      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006238:	4b16      	ldr	r3, [pc, #88]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006244:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624c:	4911      	ldr	r1, [pc, #68]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800624e:	4313      	orrs	r3, r2
 8006250:	608b      	str	r3, [r1, #8]
 8006252:	e005      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006254:	4b0f      	ldr	r3, [pc, #60]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	4a0e      	ldr	r2, [pc, #56]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800625a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800625e:	6093      	str	r3, [r2, #8]
 8006260:	4b0c      	ldr	r3, [pc, #48]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006262:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800626c:	4909      	ldr	r1, [pc, #36]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800626e:	4313      	orrs	r3, r2
 8006270:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0310 	and.w	r3, r3, #16
 800627a:	2b00      	cmp	r3, #0
 800627c:	d004      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006284:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006286:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3770      	adds	r7, #112	; 0x70
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	40023800 	.word	0x40023800
 8006298:	40007000 	.word	0x40007000
 800629c:	42470e40 	.word	0x42470e40
 80062a0:	424711e0 	.word	0x424711e0

080062a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e01d      	b.n	80062f2 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d105      	bne.n	80062ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f003 ffdb 	bl	800a284 <HAL_SD_MspInit>
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2203      	movs	r2, #3
 80062d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f810 	bl	80062fc <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80062fc:	b5b0      	push	{r4, r5, r7, lr}
 80062fe:	b08e      	sub	sp, #56	; 0x38
 8006300:	af04      	add	r7, sp, #16
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006304:	2300      	movs	r3, #0
 8006306:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800630c:	2300      	movs	r3, #0
 800630e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006310:	2300      	movs	r3, #0
 8006312:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006314:	2300      	movs	r3, #0
 8006316:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006318:	2300      	movs	r3, #0
 800631a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800631c:	2376      	movs	r3, #118	; 0x76
 800631e:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681d      	ldr	r5, [r3, #0]
 8006324:	466c      	mov	r4, sp
 8006326:	f107 0318 	add.w	r3, r7, #24
 800632a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800632e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006332:	f107 030c 	add.w	r3, r7, #12
 8006336:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006338:	4628      	mov	r0, r5
 800633a:	f002 fc85 	bl	8008c48 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 800633e:	4b1c      	ldr	r3, [pc, #112]	; (80063b0 <HAL_SD_InitCard+0xb4>)
 8006340:	2200      	movs	r2, #0
 8006342:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4618      	mov	r0, r3
 800634a:	f002 fcc6 	bl	8008cda <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800634e:	4b18      	ldr	r3, [pc, #96]	; (80063b0 <HAL_SD_InitCard+0xb4>)
 8006350:	2201      	movs	r2, #1
 8006352:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8006354:	2002      	movs	r0, #2
 8006356:	f7fd fd45 	bl	8003de4 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 f90c 	bl	8007578 <SD_PowerON>
 8006360:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00b      	beq.n	8006380 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e013      	b.n	80063a8 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f001 f82f 	bl	80073e4 <SD_InitCard>
 8006386:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00b      	beq.n	80063a6 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	431a      	orrs	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3728      	adds	r7, #40	; 0x28
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bdb0      	pop	{r4, r5, r7, pc}
 80063b0:	422580a0 	.word	0x422580a0

080063b4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80063b4:	b590      	push	{r4, r7, lr}
 80063b6:	b08f      	sub	sp, #60	; 0x3c
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
 80063c0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80063c2:	2300      	movs	r3, #0
 80063c4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80063c6:	f7fd fd01 	bl	8003dcc <HAL_GetTick>
 80063ca:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 80063cc:	2300      	movs	r3, #0
 80063ce:	633b      	str	r3, [r7, #48]	; 0x30
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d107      	bne.n	80063ea <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e177      	b.n	80066da <HAL_SD_ReadBlocks+0x326>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	f040 816a 	bne.w	80066cc <HAL_SD_ReadBlocks+0x318>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	441a      	add	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006408:	429a      	cmp	r2, r3
 800640a:	d907      	bls.n	800641c <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e15e      	b.n	80066da <HAL_SD_ReadBlocks+0x326>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2203      	movs	r2, #3
 8006420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2200      	movs	r2, #0
 800642a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006430:	2b01      	cmp	r3, #1
 8006432:	d002      	beq.n	800643a <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	025b      	lsls	r3, r3, #9
 8006438:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006442:	4618      	mov	r0, r3
 8006444:	f002 fcdd 	bl	8008e02 <SDMMC_CmdBlockLength>
 8006448:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 800644a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644c:	2b00      	cmp	r3, #0
 800644e:	d010      	beq.n	8006472 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006458:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800645e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006460:	431a      	orrs	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e133      	b.n	80066da <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006472:	f04f 33ff 	mov.w	r3, #4294967295
 8006476:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	025b      	lsls	r3, r3, #9
 800647c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800647e:	2390      	movs	r3, #144	; 0x90
 8006480:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006482:	2302      	movs	r3, #2
 8006484:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006486:	2300      	movs	r3, #0
 8006488:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800648a:	2301      	movs	r3, #1
 800648c:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f107 0210 	add.w	r2, r7, #16
 8006496:	4611      	mov	r1, r2
 8006498:	4618      	mov	r0, r3
 800649a:	f002 fc86 	bl	8008daa <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d90a      	bls.n	80064ba <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2202      	movs	r2, #2
 80064a8:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6879      	ldr	r1, [r7, #4]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f002 fcee 	bl	8008e92 <SDMMC_CmdReadMultiBlock>
 80064b6:	6378      	str	r0, [r7, #52]	; 0x34
 80064b8:	e009      	b.n	80064ce <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f002 fcbf 	bl	8008e4a <SDMMC_CmdReadSingleBlock>
 80064cc:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80064ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d04a      	beq.n	800656a <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80064dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e4:	431a      	orrs	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e0f1      	b.n	80066da <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d016      	beq.n	8006532 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006504:	2300      	movs	r3, #0
 8006506:	633b      	str	r3, [r7, #48]	; 0x30
 8006508:	e00d      	b.n	8006526 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6819      	ldr	r1, [r3, #0]
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006514:	18d4      	adds	r4, r2, r3
 8006516:	4608      	mov	r0, r1
 8006518:	f002 fbc1 	bl	8008c9e <SDIO_ReadFIFO>
 800651c:	4603      	mov	r3, r0
 800651e:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8006520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006522:	3301      	adds	r3, #1
 8006524:	633b      	str	r3, [r7, #48]	; 0x30
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	2b07      	cmp	r3, #7
 800652a:	d9ee      	bls.n	800650a <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 800652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652e:	3320      	adds	r3, #32
 8006530:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8006532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006534:	2b00      	cmp	r3, #0
 8006536:	d007      	beq.n	8006548 <HAL_SD_ReadBlocks+0x194>
 8006538:	f7fd fc48 	bl	8003dcc <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006544:	429a      	cmp	r2, r3
 8006546:	d810      	bhi.n	800656a <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006550:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006556:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e0b7      	b.n	80066da <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006570:	f240 332a 	movw	r3, #810	; 0x32a
 8006574:	4013      	ands	r3, r2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0bd      	beq.n	80064f6 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006584:	2b00      	cmp	r3, #0
 8006586:	d020      	beq.n	80065ca <HAL_SD_ReadBlocks+0x216>
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d91d      	bls.n	80065ca <HAL_SD_ReadBlocks+0x216>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006592:	2b03      	cmp	r3, #3
 8006594:	d019      	beq.n	80065ca <HAL_SD_ReadBlocks+0x216>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f002 fce6 	bl	8008f6c <SDMMC_CmdStopTransfer>
 80065a0:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 80065a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d010      	beq.n	80065ca <HAL_SD_ReadBlocks+0x216>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80065b0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b8:	431a      	orrs	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e087      	b.n	80066da <HAL_SD_ReadBlocks+0x326>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d0:	f003 0308 	and.w	r3, r3, #8
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d010      	beq.n	80065fa <HAL_SD_ReadBlocks+0x246>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80065e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e6:	f043 0208 	orr.w	r2, r3, #8
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e06f      	b.n	80066da <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d010      	beq.n	800662a <HAL_SD_ReadBlocks+0x276>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006610:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	f043 0202 	orr.w	r2, r3, #2
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e057      	b.n	80066da <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006630:	f003 0320 	and.w	r3, r3, #32
 8006634:	2b00      	cmp	r3, #0
 8006636:	d037      	beq.n	80066a8 <HAL_SD_ReadBlocks+0x2f4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006640:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	f043 0220 	orr.w	r2, r3, #32
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e03f      	b.n	80066da <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4618      	mov	r0, r3
 8006660:	f002 fb1d 	bl	8008c9e <SDIO_ReadFIFO>
 8006664:	4602      	mov	r2, r0
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006668:	601a      	str	r2, [r3, #0]
      tempbuff++;
 800666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666c:	3304      	adds	r3, #4
 800666e:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8006670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006672:	2b00      	cmp	r3, #0
 8006674:	d007      	beq.n	8006686 <HAL_SD_ReadBlocks+0x2d2>
 8006676:	f7fd fba9 	bl	8003dcc <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006682:	429a      	cmp	r2, r3
 8006684:	d810      	bhi.n	80066a8 <HAL_SD_ReadBlocks+0x2f4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800668e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e018      	b.n	80066da <HAL_SD_ReadBlocks+0x326>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1d1      	bne.n	800665a <HAL_SD_ReadBlocks+0x2a6>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80066be:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	e006      	b.n	80066da <HAL_SD_ReadBlocks+0x326>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
  }
}
 80066da:	4618      	mov	r0, r3
 80066dc:	373c      	adds	r7, #60	; 0x3c
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd90      	pop	{r4, r7, pc}

080066e2 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b08e      	sub	sp, #56	; 0x38
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	607a      	str	r2, [r7, #4]
 80066ee:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80066f0:	2300      	movs	r3, #0
 80066f2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80066f4:	f7fd fb6a 	bl	8003dcc <HAL_GetTick>
 80066f8:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d107      	bne.n	8006718 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e160      	b.n	80069da <HAL_SD_WriteBlocks+0x2f8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b01      	cmp	r3, #1
 8006722:	f040 8153 	bne.w	80069cc <HAL_SD_WriteBlocks+0x2ea>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	441a      	add	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006736:	429a      	cmp	r2, r3
 8006738:	d907      	bls.n	800674a <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e147      	b.n	80069da <HAL_SD_WriteBlocks+0x2f8>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2203      	movs	r2, #3
 800674e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2200      	movs	r2, #0
 8006758:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675e:	2b01      	cmp	r3, #1
 8006760:	d002      	beq.n	8006768 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	025b      	lsls	r3, r3, #9
 8006766:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006770:	4618      	mov	r0, r3
 8006772:	f002 fb46 	bl	8008e02 <SDMMC_CmdBlockLength>
 8006776:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8006778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677a:	2b00      	cmp	r3, #0
 800677c:	d010      	beq.n	80067a0 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006786:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800678c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678e:	431a      	orrs	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e11c      	b.n	80069da <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d90a      	bls.n	80067bc <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2220      	movs	r2, #32
 80067aa:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f002 fbb5 	bl	8008f22 <SDMMC_CmdWriteMultiBlock>
 80067b8:	6378      	str	r0, [r7, #52]	; 0x34
 80067ba:	e009      	b.n	80067d0 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2210      	movs	r2, #16
 80067c0:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f002 fb86 	bl	8008eda <SDMMC_CmdWriteSingleBlock>
 80067ce:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80067d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d010      	beq.n	80067f8 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80067de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e6:	431a      	orrs	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e0f0      	b.n	80069da <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80067f8:	f04f 33ff 	mov.w	r3, #4294967295
 80067fc:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	025b      	lsls	r3, r3, #9
 8006802:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006804:	2390      	movs	r3, #144	; 0x90
 8006806:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006808:	2300      	movs	r3, #0
 800680a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800680c:	2300      	movs	r3, #0
 800680e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006810:	2301      	movs	r3, #1
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f107 0210 	add.w	r2, r7, #16
 800681c:	4611      	mov	r1, r2
 800681e:	4618      	mov	r0, r3
 8006820:	f002 fac3 	bl	8008daa <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006824:	e037      	b.n	8006896 <HAL_SD_WriteBlocks+0x1b4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, /*SDIO_FLAG_TXUNDERR |*/ SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800682c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d014      	beq.n	800685e <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006834:	2300      	movs	r3, #0
 8006836:	633b      	str	r3, [r7, #48]	; 0x30
 8006838:	e00b      	b.n	8006852 <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6818      	ldr	r0, [r3, #0]
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006844:	4413      	add	r3, r2
 8006846:	4619      	mov	r1, r3
 8006848:	f002 fa36 	bl	8008cb8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	3301      	adds	r3, #1
 8006850:	633b      	str	r3, [r7, #48]	; 0x30
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	2b07      	cmp	r3, #7
 8006856:	d9f0      	bls.n	800683a <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8006858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685a:	3320      	adds	r3, #32
 800685c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 800685e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006860:	2b00      	cmp	r3, #0
 8006862:	d007      	beq.n	8006874 <HAL_SD_WriteBlocks+0x192>
 8006864:	f7fd fab2 	bl	8003dcc <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006870:	429a      	cmp	r2, r3
 8006872:	d810      	bhi.n	8006896 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800687c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006884:	431a      	orrs	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e0a1      	b.n	80069da <HAL_SD_WriteBlocks+0x2f8>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800689c:	f240 331a 	movw	r3, #794	; 0x31a
 80068a0:	4013      	ands	r3, r2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0bf      	beq.n	8006826 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d020      	beq.n	80068f6 <HAL_SD_WriteBlocks+0x214>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d91d      	bls.n	80068f6 <HAL_SD_WriteBlocks+0x214>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d019      	beq.n	80068f6 <HAL_SD_WriteBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f002 fb50 	bl	8008f6c <SDMMC_CmdStopTransfer>
 80068cc:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 80068ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d010      	beq.n	80068f6 <HAL_SD_WriteBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80068dc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e4:	431a      	orrs	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e071      	b.n	80069da <HAL_SD_WriteBlocks+0x2f8>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068fc:	f003 0308 	and.w	r3, r3, #8
 8006900:	2b00      	cmp	r3, #0
 8006902:	d010      	beq.n	8006926 <HAL_SD_WriteBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800690c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006912:	f043 0208 	orr.w	r2, r3, #8
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e059      	b.n	80069da <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d010      	beq.n	8006956 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800693c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006942:	f043 0202 	orr.w	r2, r3, #2
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e041      	b.n	80069da <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	2b00      	cmp	r3, #0
 8006962:	d010      	beq.n	8006986 <HAL_SD_WriteBlocks+0x2a4>
    {
      // Clear all the static flags
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800696c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006972:	f043 0210 	orr.w	r2, r3, #16
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e029      	b.n	80069da <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_STA_STBITERR))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006990:	2b00      	cmp	r3, #0
 8006992:	d010      	beq.n	80069b6 <HAL_SD_WriteBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800699c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_GENERAL_UNKNOWN_ERR;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e011      	b.n	80069da <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80069be:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 80069c8:	2300      	movs	r3, #0
 80069ca:	e006      	b.n	80069da <HAL_SD_WriteBlocks+0x2f8>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
  }
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3738      	adds	r7, #56	; 0x38
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80069ec:	2300      	movs	r3, #0
 80069ee:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 808d 	beq.w	8006b1a <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a08:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6812      	ldr	r2, [r2, #0]
 8006a14:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006a18:	f023 0302 	bic.w	r3, r3, #2
 8006a1c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d03a      	beq.n	8006aa0 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d105      	bne.n	8006a42 <HAL_SD_IRQHandler+0x5e>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d011      	beq.n	8006a66 <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f002 fa90 	bl	8008f6c <SDMMC_CmdStopTransfer>
 8006a4c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d008      	beq.n	8006a66 <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f939 	bl	8006cd8 <HAL_SD_ErrorCallback>
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006a6e:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d105      	bne.n	8006a90 <HAL_SD_IRQHandler+0xac>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <HAL_SD_IRQHandler+0xb4>
      {
        HAL_SD_RxCpltCallback(hsd);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f917 	bl	8006cc4 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 8006a96:	e103      	b.n	8006ca0 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f909 	bl	8006cb0 <HAL_SD_TxCpltCallback>
}
 8006a9e:	e0ff      	b.n	8006ca0 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 80f9 	beq.w	8006ca0 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab2:	f003 0320 	and.w	r3, r3, #32
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d011      	beq.n	8006ade <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f002 fa54 	bl	8008f6c <SDMMC_CmdStopTransfer>
 8006ac4:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d008      	beq.n	8006ade <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f8fd 	bl	8006cd8 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f040 80da 	bne.w	8006ca0 <HAL_SD_IRQHandler+0x2bc>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f040 80d3 	bne.w	8006ca0 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0208 	bic.w	r2, r2, #8
 8006b08:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f8cc 	bl	8006cb0 <HAL_SD_TxCpltCallback>
}
 8006b18:	e0c2      	b.n	8006ca0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d008      	beq.n	8006b3a <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b30:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 ff7d 	bl	8007a32 <SD_Write_IT>
}
 8006b38:	e0b2      	b.n	8006ca0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d008      	beq.n	8006b5a <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006b50:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 ff45 	bl	80079e2 <SD_Read_IT>
}
 8006b58:	e0a2      	b.n	8006ca0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b60:	f240 233a 	movw	r3, #570	; 0x23a
 8006b64:	4013      	ands	r3, r2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 809a 	beq.w	8006ca0 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d005      	beq.n	8006b86 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7e:	f043 0202 	orr.w	r2, r3, #2
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8c:	f003 0308 	and.w	r3, r3, #8
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d005      	beq.n	8006ba0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b98:	f043 0208 	orr.w	r2, r3, #8
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba6:	f003 0320 	and.w	r3, r3, #32
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d005      	beq.n	8006bba <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb2:	f043 0220 	orr.w	r2, r3, #32
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc0:	f003 0310 	and.w	r3, r3, #16
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d005      	beq.n	8006bd4 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bcc:	f043 0210 	orr.w	r2, r3, #16
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d005      	beq.n	8006bee <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	f043 0208 	orr.w	r2, r3, #8
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006bf6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6812      	ldr	r2, [r2, #0]
 8006c02:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006c06:	f023 0302 	bic.w	r3, r3, #2
 8006c0a:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d036      	beq.n	8006c86 <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d011      	beq.n	8006c44 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c24:	4a20      	ldr	r2, [pc, #128]	; (8006ca8 <HAL_SD_IRQHandler+0x2c4>)
 8006c26:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fd fa21 	bl	8004074 <HAL_DMA_Abort_IT>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d033      	beq.n	8006ca0 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fb55 	bl	80072ec <SD_DMATxAbort>
}
 8006c42:	e02d      	b.n	8006ca0 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d011      	beq.n	8006c70 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c50:	4a16      	ldr	r2, [pc, #88]	; (8006cac <HAL_SD_IRQHandler+0x2c8>)
 8006c52:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fd fa0b 	bl	8004074 <HAL_DMA_Abort_IT>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d01d      	beq.n	8006ca0 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 fb7d 	bl	8007368 <SD_DMARxAbort>
}
 8006c6e:	e017      	b.n	8006ca0 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f834 	bl	8006cec <HAL_SD_AbortCallback>
}
 8006c84:	e00c      	b.n	8006ca0 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d006      	beq.n	8006ca0 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f81c 	bl	8006cd8 <HAL_SD_ErrorCallback>
}
 8006ca0:	bf00      	nop
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	080072ed 	.word	0x080072ed
 8006cac:	08007369 	.word	0x08007369

08006cb0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
 __weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d12:	0e1b      	lsrs	r3, r3, #24
 8006d14:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	099b      	lsrs	r3, r3, #6
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	f003 0303 	and.w	r3, r3, #3
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	089b      	lsrs	r3, r3, #2
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	f003 030f 	and.w	r3, r3, #15
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d48:	0c1b      	lsrs	r3, r3, #16
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d5a:	0a1b      	lsrs	r3, r3, #8
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d7c:	0e1b      	lsrs	r3, r3, #24
 8006d7e:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	011b      	lsls	r3, r3, #4
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d90:	0c1b      	lsrs	r3, r3, #16
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	88db      	ldrh	r3, [r3, #6]
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	091b      	lsrs	r3, r3, #4
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f003 030f 	and.w	r3, r3, #15
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	4313      	orrs	r3, r2
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	f003 030f 	and.w	r3, r3, #15
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dc2:	0a1b      	lsrs	r3, r3, #8
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	09db      	lsrs	r3, r3, #7
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	099b      	lsrs	r3, r3, #6
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	091b      	lsrs	r3, r3, #4
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f040 8087 	bne.w	8006f26 <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	029b      	lsls	r3, r3, #10
 8006e1c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	691a      	ldr	r2, [r3, #16]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	431a      	orrs	r2, r3
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e3e:	0e1b      	lsrs	r3, r3, #24
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	691a      	ldr	r2, [r3, #16]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	099b      	lsrs	r3, r3, #6
 8006e4c:	f003 0303 	and.w	r3, r3, #3
 8006e50:	431a      	orrs	r2, r3
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	08db      	lsrs	r3, r3, #3
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e78:	0c1b      	lsrs	r3, r3, #16
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	095b      	lsrs	r3, r3, #5
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	089b      	lsrs	r3, r3, #2
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	f003 0306 	and.w	r3, r3, #6
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eb4:	0a1b      	lsrs	r3, r3, #8
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	7e1b      	ldrb	r3, [r3, #24]
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	09db      	lsrs	r3, r3, #7
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	1c5a      	adds	r2, r3, #1
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	7e1b      	ldrb	r3, [r3, #24]
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	3302      	adds	r3, #2
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006ef0:	fb03 f202 	mul.w	r2, r3, r2
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	7a1b      	ldrb	r3, [r3, #8]
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	461a      	mov	r2, r3
 8006f00:	2301      	movs	r3, #1
 8006f02:	fa03 f202 	lsl.w	r2, r3, r2
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006f12:	0a52      	lsrs	r2, r2, #9
 8006f14:	fb03 f202 	mul.w	r2, r3, r2
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f22:	661a      	str	r2, [r3, #96]	; 0x60
 8006f24:	e04d      	b.n	8006fc2 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d138      	bne.n	8006fa0 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	041b      	lsls	r3, r3, #16
 8006f3a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f46:	0e1b      	lsrs	r3, r3, #24
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	691a      	ldr	r2, [r3, #16]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	021b      	lsls	r3, r3, #8
 8006f54:	431a      	orrs	r2, r3
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f5e:	0c1b      	lsrs	r3, r3, #16
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	691a      	ldr	r2, [r3, #16]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f74:	0a1b      	lsrs	r3, r3, #8
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	029a      	lsls	r2, r3, #10
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	655a      	str	r2, [r3, #84]	; 0x54
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f94:	659a      	str	r2, [r3, #88]	; 0x58
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	661a      	str	r2, [r3, #96]	; 0x60
 8006f9e:	e010      	b.n	8006fc2 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006fa8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e0c1      	b.n	8007146 <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	099b      	lsrs	r3, r3, #6
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	7e9b      	ldrb	r3, [r3, #26]
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	09db      	lsrs	r3, r3, #7
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	4313      	orrs	r3, r2
 8007000:	b2da      	uxtb	r2, r3
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	b2db      	uxtb	r3, r3
 800700a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800700e:	b2da      	uxtb	r2, r3
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007018:	0e1b      	lsrs	r3, r3, #24
 800701a:	b2db      	uxtb	r3, r3
 800701c:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	09db      	lsrs	r3, r3, #7
 8007022:	b2db      	uxtb	r3, r3
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	b2da      	uxtb	r2, r3
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	095b      	lsrs	r3, r3, #5
 8007032:	b2db      	uxtb	r3, r3
 8007034:	f003 0303 	and.w	r3, r3, #3
 8007038:	b2da      	uxtb	r2, r3
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	089b      	lsrs	r3, r3, #2
 8007042:	b2db      	uxtb	r3, r3
 8007044:	f003 0307 	and.w	r3, r3, #7
 8007048:	b2da      	uxtb	r2, r3
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	b2db      	uxtb	r3, r3
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	b2db      	uxtb	r3, r3
 8007056:	f003 030c 	and.w	r3, r3, #12
 800705a:	b2da      	uxtb	r2, r3
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007064:	0c1b      	lsrs	r3, r3, #16
 8007066:	b2db      	uxtb	r3, r3
 8007068:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	7fdb      	ldrb	r3, [r3, #31]
 800706e:	b2da      	uxtb	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	099b      	lsrs	r3, r3, #6
 8007074:	b2db      	uxtb	r3, r3
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	b2db      	uxtb	r3, r3
 800707c:	4313      	orrs	r3, r2
 800707e:	b2da      	uxtb	r2, r3
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	095b      	lsrs	r3, r3, #5
 8007088:	b2db      	uxtb	r3, r3
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	b2da      	uxtb	r2, r3
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b2:	0a1b      	lsrs	r3, r3, #8
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	09db      	lsrs	r3, r3, #7
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	099b      	lsrs	r3, r3, #6
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	091b      	lsrs	r3, r3, #4
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	089b      	lsrs	r3, r3, #2
 8007104:	b2db      	uxtb	r3, r3
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	b2da      	uxtb	r2, r3
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	b2db      	uxtb	r3, r3
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	b2da      	uxtb	r2, r3
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007126:	b2db      	uxtb	r3, r3
 8007128:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	085b      	lsrs	r3, r3, #1
 800712e:	b2db      	uxtb	r3, r3
 8007130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007134:	b2da      	uxtb	r2, r3
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80071aa:	b5b0      	push	{r4, r5, r7, lr}
 80071ac:	b08e      	sub	sp, #56	; 0x38
 80071ae:	af04      	add	r7, sp, #16
 80071b0:	6078      	str	r0, [r7, #4]
 80071b2:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80071b4:	2300      	movs	r3, #0
 80071b6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2203      	movs	r2, #3
 80071bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d02e      	beq.n	8007226 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ce:	d106      	bne.n	80071de <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	639a      	str	r2, [r3, #56]	; 0x38
 80071dc:	e029      	b.n	8007232 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071e4:	d10a      	bne.n	80071fc <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fa98 	bl	800771c <SD_WideBus_Enable>
 80071ec:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	431a      	orrs	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	639a      	str	r2, [r3, #56]	; 0x38
 80071fa:	e01a      	b.n	8007232 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10a      	bne.n	8007218 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fad7 	bl	80077b6 <SD_WideBus_Disable>
 8007208:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	431a      	orrs	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	639a      	str	r2, [r3, #56]	; 0x38
 8007216:	e00c      	b.n	8007232 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	639a      	str	r2, [r3, #56]	; 0x38
 8007224:	e005      	b.n	8007232 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00a      	beq.n	8007250 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007242:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e024      	b.n	800729a <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681d      	ldr	r5, [r3, #0]
 8007276:	466c      	mov	r4, sp
 8007278:	f107 0318 	add.w	r3, r7, #24
 800727c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007280:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007284:	f107 030c 	add.w	r3, r7, #12
 8007288:	cb0e      	ldmia	r3, {r1, r2, r3}
 800728a:	4628      	mov	r0, r5
 800728c:	f001 fcdc 	bl	8008c48 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3728      	adds	r7, #40	; 0x28
 800729e:	46bd      	mov	sp, r7
 80072a0:	bdb0      	pop	{r4, r5, r7, pc}

080072a2 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b086      	sub	sp, #24
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80072aa:	2304      	movs	r3, #4
 80072ac:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80072ae:	2300      	movs	r3, #0
 80072b0:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80072b6:	f107 030c 	add.w	r3, r7, #12
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fa03 	bl	80076c8 <SD_SendStatus>
 80072c2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d005      	beq.n	80072d6 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	431a      	orrs	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	0a5b      	lsrs	r3, r3, #9
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	f003 030f 	and.w	r3, r3, #15
 80072e0:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 80072e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d002      	beq.n	8007308 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730c:	2b00      	cmp	r3, #0
 800730e:	d127      	bne.n	8007360 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f7ff ffc6 	bl	80072a2 <HAL_SD_GetCardState>
 8007316:	4603      	mov	r3, r0
 8007318:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007328:	7afb      	ldrb	r3, [r7, #11]
 800732a:	2b06      	cmp	r3, #6
 800732c:	d002      	beq.n	8007334 <SD_DMATxAbort+0x48>
 800732e:	7afb      	ldrb	r3, [r7, #11]
 8007330:	2b05      	cmp	r3, #5
 8007332:	d115      	bne.n	8007360 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4618      	mov	r0, r3
 800733a:	f001 fe17 	bl	8008f6c <SDMMC_CmdStopTransfer>
 800733e:	4602      	mov	r2, r0
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007344:	431a      	orrs	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <SD_DMATxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f7ff fcca 	bl	8006cec <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 8007358:	e002      	b.n	8007360 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f7ff fcbc 	bl	8006cd8 <HAL_SD_ErrorCallback>
}
 8007360:	bf00      	nop
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007374:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737a:	2b00      	cmp	r3, #0
 800737c:	d002      	beq.n	8007384 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	2b00      	cmp	r3, #0
 800738a:	d127      	bne.n	80073dc <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f7ff ff88 	bl	80072a2 <HAL_SD_GetCardState>
 8007392:	4603      	mov	r3, r0
 8007394:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80073a4:	7afb      	ldrb	r3, [r7, #11]
 80073a6:	2b06      	cmp	r3, #6
 80073a8:	d002      	beq.n	80073b0 <SD_DMARxAbort+0x48>
 80073aa:	7afb      	ldrb	r3, [r7, #11]
 80073ac:	2b05      	cmp	r3, #5
 80073ae:	d115      	bne.n	80073dc <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f001 fdd9 	bl	8008f6c <SDMMC_CmdStopTransfer>
 80073ba:	4602      	mov	r2, r0
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c0:	431a      	orrs	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <SD_DMARxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f7ff fc8c 	bl	8006cec <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 80073d4:	e002      	b.n	80073dc <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f7ff fc7e 	bl	8006cd8 <HAL_SD_ErrorCallback>
}
 80073dc:	bf00      	nop
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80073e4:	b5b0      	push	{r4, r5, r7, lr}
 80073e6:	b094      	sub	sp, #80	; 0x50
 80073e8:	af04      	add	r7, sp, #16
 80073ea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80073ec:	2300      	movs	r3, #0
 80073ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 80073f0:	2301      	movs	r3, #1
 80073f2:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f001 fc7c 	bl	8008cf6 <SDIO_GetPowerState>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d102      	bne.n	800740a <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007404:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007408:	e0b2      	b.n	8007570 <SD_InitCard+0x18c>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740e:	2b03      	cmp	r3, #3
 8007410:	d02f      	beq.n	8007472 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4618      	mov	r0, r3
 8007418:	f001 fec2 	bl	80091a0 <SDMMC_CmdSendCID>
 800741c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800741e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <SD_InitCard+0x44>
    {
      return errorstate;
 8007424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007426:	e0a3      	b.n	8007570 <SD_InitCard+0x18c>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2100      	movs	r1, #0
 800742e:	4618      	mov	r0, r3
 8007430:	f001 fca6 	bl	8008d80 <SDIO_GetResponse>
 8007434:	4602      	mov	r2, r0
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2104      	movs	r1, #4
 8007440:	4618      	mov	r0, r3
 8007442:	f001 fc9d 	bl	8008d80 <SDIO_GetResponse>
 8007446:	4602      	mov	r2, r0
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2108      	movs	r1, #8
 8007452:	4618      	mov	r0, r3
 8007454:	f001 fc94 	bl	8008d80 <SDIO_GetResponse>
 8007458:	4602      	mov	r2, r0
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	210c      	movs	r1, #12
 8007464:	4618      	mov	r0, r3
 8007466:	f001 fc8b 	bl	8008d80 <SDIO_GetResponse>
 800746a:	4602      	mov	r2, r0
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007476:	2b03      	cmp	r3, #3
 8007478:	d00d      	beq.n	8007496 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f107 020e 	add.w	r2, r7, #14
 8007482:	4611      	mov	r1, r2
 8007484:	4618      	mov	r0, r3
 8007486:	f001 fecc 	bl	8009222 <SDMMC_CmdSetRelAdd>
 800748a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800748c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <SD_InitCard+0xb2>
    {
      return errorstate;
 8007492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007494:	e06c      	b.n	8007570 <SD_InitCard+0x18c>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749a:	2b03      	cmp	r3, #3
 800749c:	d036      	beq.n	800750c <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800749e:	89fb      	ldrh	r3, [r7, #14]
 80074a0:	461a      	mov	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ae:	041b      	lsls	r3, r3, #16
 80074b0:	4619      	mov	r1, r3
 80074b2:	4610      	mov	r0, r2
 80074b4:	f001 fe94 	bl	80091e0 <SDMMC_CmdSendCSD>
 80074b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80074ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <SD_InitCard+0xe0>
    {
      return errorstate;
 80074c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c2:	e055      	b.n	8007570 <SD_InitCard+0x18c>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2100      	movs	r1, #0
 80074ca:	4618      	mov	r0, r3
 80074cc:	f001 fc58 	bl	8008d80 <SDIO_GetResponse>
 80074d0:	4602      	mov	r2, r0
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2104      	movs	r1, #4
 80074dc:	4618      	mov	r0, r3
 80074de:	f001 fc4f 	bl	8008d80 <SDIO_GetResponse>
 80074e2:	4602      	mov	r2, r0
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2108      	movs	r1, #8
 80074ee:	4618      	mov	r0, r3
 80074f0:	f001 fc46 	bl	8008d80 <SDIO_GetResponse>
 80074f4:	4602      	mov	r2, r0
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	210c      	movs	r1, #12
 8007500:	4618      	mov	r0, r3
 8007502:	f001 fc3d 	bl	8008d80 <SDIO_GetResponse>
 8007506:	4602      	mov	r2, r0
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2104      	movs	r1, #4
 8007512:	4618      	mov	r0, r3
 8007514:	f001 fc34 	bl	8008d80 <SDIO_GetResponse>
 8007518:	4603      	mov	r3, r0
 800751a:	0d1a      	lsrs	r2, r3, #20
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8007520:	f107 0310 	add.w	r3, r7, #16
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f7ff fbea 	bl	8006d00 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6819      	ldr	r1, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007534:	041b      	lsls	r3, r3, #16
 8007536:	2200      	movs	r2, #0
 8007538:	461c      	mov	r4, r3
 800753a:	4615      	mov	r5, r2
 800753c:	4622      	mov	r2, r4
 800753e:	462b      	mov	r3, r5
 8007540:	4608      	mov	r0, r1
 8007542:	f001 fd37 	bl	8008fb4 <SDMMC_CmdSelDesel>
 8007546:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754a:	2b00      	cmp	r3, #0
 800754c:	d001      	beq.n	8007552 <SD_InitCard+0x16e>
  {
    return errorstate;
 800754e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007550:	e00e      	b.n	8007570 <SD_InitCard+0x18c>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681d      	ldr	r5, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	466c      	mov	r4, sp
 800755a:	f103 0210 	add.w	r2, r3, #16
 800755e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007564:	3304      	adds	r3, #4
 8007566:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007568:	4628      	mov	r0, r5
 800756a:	f001 fb6d 	bl	8008c48 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3740      	adds	r7, #64	; 0x40
 8007574:	46bd      	mov	sp, r7
 8007576:	bdb0      	pop	{r4, r5, r7, pc}

08007578 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007584:	2300      	movs	r3, #0
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	2300      	movs	r3, #0
 800758a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800758c:	2300      	movs	r3, #0
 800758e:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4618      	mov	r0, r3
 8007596:	f001 fd32 	bl	8008ffe <SDMMC_CmdGoIdleState>
 800759a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <SD_PowerON+0x2e>
  {
    return errorstate;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	e08c      	b.n	80076c0 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f001 fd47 	bl	800903e <SDMMC_CmdOperCond>
 80075b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d03d      	beq.n	8007634 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 80075be:	e032      	b.n	8007626 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	60ba      	str	r2, [r7, #8]
 80075c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d102      	bne.n	80075d4 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80075ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075d2:	e075      	b.n	80076c0 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2100      	movs	r1, #0
 80075da:	4618      	mov	r0, r3
 80075dc:	f001 fd50 	bl	8009080 <SDMMC_CmdAppCommand>
 80075e0:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075ec:	e068      	b.n	80076c0 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2100      	movs	r1, #0
 80075f4:	4618      	mov	r0, r3
 80075f6:	f001 fd67 	bl	80090c8 <SDMMC_CmdAppOperCommand>
 80075fa:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007602:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007606:	e05b      	b.n	80076c0 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2100      	movs	r1, #0
 800760e:	4618      	mov	r0, r3
 8007610:	f001 fbb6 	bl	8008d80 <SDIO_GetResponse>
 8007614:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	0fdb      	lsrs	r3, r3, #31
 800761a:	2b01      	cmp	r3, #1
 800761c:	d101      	bne.n	8007622 <SD_PowerON+0xaa>
 800761e:	2301      	movs	r3, #1
 8007620:	e000      	b.n	8007624 <SD_PowerON+0xac>
 8007622:	2300      	movs	r3, #0
 8007624:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d0c9      	beq.n	80075c0 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	645a      	str	r2, [r3, #68]	; 0x44
 8007632:	e044      	b.n	80076be <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800763a:	e031      	b.n	80076a0 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	60ba      	str	r2, [r7, #8]
 8007642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007646:	4293      	cmp	r3, r2
 8007648:	d102      	bne.n	8007650 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800764a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800764e:	e037      	b.n	80076c0 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2100      	movs	r1, #0
 8007656:	4618      	mov	r0, r3
 8007658:	f001 fd12 	bl	8009080 <SDMMC_CmdAppCommand>
 800765c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <SD_PowerON+0xf0>
      {
        return errorstate;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	e02b      	b.n	80076c0 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007670:	4618      	mov	r0, r3
 8007672:	f001 fd29 	bl	80090c8 <SDMMC_CmdAppOperCommand>
 8007676:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <SD_PowerON+0x10a>
      {
        return errorstate;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	e01e      	b.n	80076c0 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2100      	movs	r1, #0
 8007688:	4618      	mov	r0, r3
 800768a:	f001 fb79 	bl	8008d80 <SDIO_GetResponse>
 800768e:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	0fdb      	lsrs	r3, r3, #31
 8007694:	2b01      	cmp	r3, #1
 8007696:	d101      	bne.n	800769c <SD_PowerON+0x124>
 8007698:	2301      	movs	r3, #1
 800769a:	e000      	b.n	800769e <SD_PowerON+0x126>
 800769c:	2300      	movs	r3, #0
 800769e:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d0ca      	beq.n	800763c <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d003      	beq.n	80076b8 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	645a      	str	r2, [r3, #68]	; 0x44
 80076b6:	e002      	b.n	80076be <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80076d2:	2300      	movs	r3, #0
 80076d4:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d102      	bne.n	80076e2 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 80076dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076e0:	e018      	b.n	8007714 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ea:	041b      	lsls	r3, r3, #16
 80076ec:	4619      	mov	r1, r3
 80076ee:	4610      	mov	r0, r2
 80076f0:	f001 fdba 	bl	8009268 <SDMMC_CmdSendStatus>
 80076f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <SD_SendStatus+0x38>
  {
    return errorstate;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	e009      	b.n	8007714 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2100      	movs	r1, #0
 8007706:	4618      	mov	r0, r3
 8007708:	f001 fb3a 	bl	8008d80 <SDIO_GetResponse>
 800770c:	4602      	mov	r2, r0
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007724:	2300      	movs	r3, #0
 8007726:	60fb      	str	r3, [r7, #12]
 8007728:	2300      	movs	r3, #0
 800772a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800772c:	2300      	movs	r3, #0
 800772e:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2100      	movs	r1, #0
 8007736:	4618      	mov	r0, r3
 8007738:	f001 fb22 	bl	8008d80 <SDIO_GetResponse>
 800773c:	4603      	mov	r3, r0
 800773e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007742:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007746:	d102      	bne.n	800774e <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007748:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800774c:	e02f      	b.n	80077ae <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800774e:	f107 030c 	add.w	r3, r7, #12
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f87b 	bl	8007850 <SD_FindSCR>
 800775a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	e023      	b.n	80077ae <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d01c      	beq.n	80077aa <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007778:	041b      	lsls	r3, r3, #16
 800777a:	4619      	mov	r1, r3
 800777c:	4610      	mov	r0, r2
 800777e:	f001 fc7f 	bl	8009080 <SDMMC_CmdAppCommand>
 8007782:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	e00f      	b.n	80077ae <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2102      	movs	r1, #2
 8007794:	4618      	mov	r0, r3
 8007796:	f001 fcbc 	bl	8009112 <SDMMC_CmdBusWidth>
 800779a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	e003      	b.n	80077ae <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 80077a6:	2300      	movs	r3, #0
 80077a8:	e001      	b.n	80077ae <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80077aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3718      	adds	r7, #24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b086      	sub	sp, #24
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80077be:	2300      	movs	r3, #0
 80077c0:	60fb      	str	r3, [r7, #12]
 80077c2:	2300      	movs	r3, #0
 80077c4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80077c6:	2300      	movs	r3, #0
 80077c8:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2100      	movs	r1, #0
 80077d0:	4618      	mov	r0, r3
 80077d2:	f001 fad5 	bl	8008d80 <SDIO_GetResponse>
 80077d6:	4603      	mov	r3, r0
 80077d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077e0:	d102      	bne.n	80077e8 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80077e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077e6:	e02f      	b.n	8007848 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80077e8:	f107 030c 	add.w	r3, r7, #12
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f82e 	bl	8007850 <SD_FindSCR>
 80077f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d001      	beq.n	8007800 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	e023      	b.n	8007848 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d01c      	beq.n	8007844 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007812:	041b      	lsls	r3, r3, #16
 8007814:	4619      	mov	r1, r3
 8007816:	4610      	mov	r0, r2
 8007818:	f001 fc32 	bl	8009080 <SDMMC_CmdAppCommand>
 800781c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	e00f      	b.n	8007848 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2100      	movs	r1, #0
 800782e:	4618      	mov	r0, r3
 8007830:	f001 fc6f 	bl	8009112 <SDMMC_CmdBusWidth>
 8007834:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	e003      	b.n	8007848 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8007840:	2300      	movs	r3, #0
 8007842:	e001      	b.n	8007848 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007844:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007848:	4618      	mov	r0, r3
 800784a:	3718      	adds	r7, #24
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007850:	b590      	push	{r4, r7, lr}
 8007852:	b08f      	sub	sp, #60	; 0x3c
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800785a:	2300      	movs	r3, #0
 800785c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800785e:	f7fc fab5 	bl	8003dcc <HAL_GetTick>
 8007862:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8007864:	2300      	movs	r3, #0
 8007866:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	2300      	movs	r3, #0
 800786e:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2108      	movs	r1, #8
 8007876:	4618      	mov	r0, r3
 8007878:	f001 fac3 	bl	8008e02 <SDMMC_CmdBlockLength>
 800787c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007886:	e0a8      	b.n	80079da <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007890:	041b      	lsls	r3, r3, #16
 8007892:	4619      	mov	r1, r3
 8007894:	4610      	mov	r0, r2
 8007896:	f001 fbf3 	bl	8009080 <SDMMC_CmdAppCommand>
 800789a:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800789c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80078a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a4:	e099      	b.n	80079da <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80078a6:	f04f 33ff 	mov.w	r3, #4294967295
 80078aa:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 80078ac:	2308      	movs	r3, #8
 80078ae:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80078b0:	2330      	movs	r3, #48	; 0x30
 80078b2:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80078b4:	2302      	movs	r3, #2
 80078b6:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 80078bc:	2301      	movs	r3, #1
 80078be:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f107 0214 	add.w	r2, r7, #20
 80078c8:	4611      	mov	r1, r2
 80078ca:	4618      	mov	r0, r3
 80078cc:	f001 fa6d 	bl	8008daa <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f001 fc40 	bl	800915a <SDMMC_CmdSendSCR>
 80078da:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d022      	beq.n	8007928 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	e079      	b.n	80079da <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00e      	beq.n	8007912 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6819      	ldr	r1, [r3, #0]
 80078f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	f107 020c 	add.w	r2, r7, #12
 8007900:	18d4      	adds	r4, r2, r3
 8007902:	4608      	mov	r0, r1
 8007904:	f001 f9cb 	bl	8008c9e <SDIO_ReadFIFO>
 8007908:	4603      	mov	r3, r0
 800790a:	6023      	str	r3, [r4, #0]
      index++;
 800790c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790e:	3301      	adds	r3, #1
 8007910:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007912:	f7fc fa5b 	bl	8003dcc <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007920:	d102      	bne.n	8007928 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007922:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007926:	e058      	b.n	80079da <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800792e:	f240 432a 	movw	r3, #1066	; 0x42a
 8007932:	4013      	ands	r3, r2
 8007934:	2b00      	cmp	r3, #0
 8007936:	d0d6      	beq.n	80078e6 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800793e:	f003 0308 	and.w	r3, r3, #8
 8007942:	2b00      	cmp	r3, #0
 8007944:	d005      	beq.n	8007952 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2208      	movs	r2, #8
 800794c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800794e:	2308      	movs	r3, #8
 8007950:	e043      	b.n	80079da <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2202      	movs	r2, #2
 8007966:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007968:	2302      	movs	r3, #2
 800796a:	e036      	b.n	80079da <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007972:	f003 0320 	and.w	r3, r3, #32
 8007976:	2b00      	cmp	r3, #0
 8007978:	d005      	beq.n	8007986 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2220      	movs	r2, #32
 8007980:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8007982:	2320      	movs	r3, #32
 8007984:	e029      	b.n	80079da <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800798e:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	061a      	lsls	r2, r3, #24
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	021b      	lsls	r3, r3, #8
 8007998:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800799c:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	0a1b      	lsrs	r3, r3, #8
 80079a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80079a6:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80079b2:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80079b4:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	061a      	lsls	r2, r3, #24
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	021b      	lsls	r3, r3, #8
 80079be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079c2:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	0a1b      	lsrs	r3, r3, #8
 80079c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80079cc:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	0e1b      	lsrs	r3, r3, #24
 80079d2:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	373c      	adds	r7, #60	; 0x3c
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd90      	pop	{r4, r7, pc}

080079e2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80079e2:	b590      	push	{r4, r7, lr}
 80079e4:	b085      	sub	sp, #20
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f2:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 80079f4:	2300      	movs	r3, #0
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	e00d      	b.n	8007a16 <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6819      	ldr	r1, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	18d4      	adds	r4, r2, r3
 8007a06:	4608      	mov	r0, r1
 8007a08:	f001 f949 	bl	8008c9e <SDIO_ReadFIFO>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	3301      	adds	r3, #1
 8007a14:	60fb      	str	r3, [r7, #12]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2b07      	cmp	r3, #7
 8007a1a:	d9ee      	bls.n	80079fa <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a20:	f103 0220 	add.w	r2, r3, #32
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd90      	pop	{r4, r7, pc}

08007a32 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8007a44:	2300      	movs	r3, #0
 8007a46:	60fb      	str	r3, [r7, #12]
 8007a48:	e00b      	b.n	8007a62 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6818      	ldr	r0, [r3, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	4413      	add	r3, r2
 8007a56:	4619      	mov	r1, r3
 8007a58:	f001 f92e 	bl	8008cb8 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2b07      	cmp	r3, #7
 8007a66:	d9f0      	bls.n	8007a4a <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	f103 0220 	add.w	r2, r3, #32
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b082      	sub	sp, #8
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d101      	bne.n	8007a90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e01d      	b.n	8007acc <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d106      	bne.n	8007aaa <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f002 fc39 	bl	800a31c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2202      	movs	r2, #2
 8007aae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3304      	adds	r3, #4
 8007aba:	4619      	mov	r1, r3
 8007abc:	4610      	mov	r0, r2
 8007abe:	f000 f955 	bl	8007d6c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_TIM_Base_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f042 0201 	orr.w	r2, r2, #1
 8007aea:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0201 	orr.w	r2, r2, #1
 8007afa:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b082      	sub	sp, #8
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d122      	bne.n	8007b66 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d11b      	bne.n	8007b66 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f06f 0202 	mvn.w	r2, #2
 8007b36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	f003 0303 	and.w	r3, r3, #3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d003      	beq.n	8007b54 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f8ee 	bl	8007d2e <HAL_TIM_IC_CaptureCallback>
 8007b52:	e005      	b.n	8007b60 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f8e0 	bl	8007d1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f8f1 	bl	8007d42 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	d122      	bne.n	8007bba <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d11b      	bne.n	8007bba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f06f 0204 	mvn.w	r2, #4
 8007b8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f8c4 	bl	8007d2e <HAL_TIM_IC_CaptureCallback>
 8007ba6:	e005      	b.n	8007bb4 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f8b6 	bl	8007d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f8c7 	bl	8007d42 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b08      	cmp	r3, #8
 8007bc6:	d122      	bne.n	8007c0e <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	f003 0308 	and.w	r3, r3, #8
 8007bd2:	2b08      	cmp	r3, #8
 8007bd4:	d11b      	bne.n	8007c0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f06f 0208 	mvn.w	r2, #8
 8007bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2204      	movs	r2, #4
 8007be4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	69db      	ldr	r3, [r3, #28]
 8007bec:	f003 0303 	and.w	r3, r3, #3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f89a 	bl	8007d2e <HAL_TIM_IC_CaptureCallback>
 8007bfa:	e005      	b.n	8007c08 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f88c 	bl	8007d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f89d 	bl	8007d42 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	f003 0310 	and.w	r3, r3, #16
 8007c18:	2b10      	cmp	r3, #16
 8007c1a:	d122      	bne.n	8007c62 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	f003 0310 	and.w	r3, r3, #16
 8007c26:	2b10      	cmp	r3, #16
 8007c28:	d11b      	bne.n	8007c62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f06f 0210 	mvn.w	r2, #16
 8007c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2208      	movs	r2, #8
 8007c38:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d003      	beq.n	8007c50 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f870 	bl	8007d2e <HAL_TIM_IC_CaptureCallback>
 8007c4e:	e005      	b.n	8007c5c <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f862 	bl	8007d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f873 	bl	8007d42 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d10e      	bne.n	8007c8e <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d107      	bne.n	8007c8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f06f 0201 	mvn.w	r2, #1
 8007c86:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7fc f80b 	bl	8003ca4 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c98:	2b80      	cmp	r3, #128	; 0x80
 8007c9a:	d10e      	bne.n	8007cba <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca6:	2b80      	cmp	r3, #128	; 0x80
 8007ca8:	d107      	bne.n	8007cba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cb2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f90d 	bl	8007ed4 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc4:	2b40      	cmp	r3, #64	; 0x40
 8007cc6:	d10e      	bne.n	8007ce6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd2:	2b40      	cmp	r3, #64	; 0x40
 8007cd4:	d107      	bne.n	8007ce6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007cde:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f838 	bl	8007d56 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	f003 0320 	and.w	r3, r3, #32
 8007cf0:	2b20      	cmp	r3, #32
 8007cf2:	d10e      	bne.n	8007d12 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	f003 0320 	and.w	r3, r3, #32
 8007cfe:	2b20      	cmp	r3, #32
 8007d00:	d107      	bne.n	8007d12 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f06f 0220 	mvn.w	r2, #32
 8007d0a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f8d7 	bl	8007ec0 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8007d12:	bf00      	nop
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d36:	bf00      	nop
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d42:	b480      	push	{r7}
 8007d44:	b083      	sub	sp, #12
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d4a:	bf00      	nop
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b083      	sub	sp, #12
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d5e:	bf00      	nop
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
	...

08007d6c <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a44      	ldr	r2, [pc, #272]	; (8007e94 <TIM_Base_SetConfig+0x128>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d013      	beq.n	8007db0 <TIM_Base_SetConfig+0x44>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8e:	d00f      	beq.n	8007db0 <TIM_Base_SetConfig+0x44>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a41      	ldr	r2, [pc, #260]	; (8007e98 <TIM_Base_SetConfig+0x12c>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d00b      	beq.n	8007db0 <TIM_Base_SetConfig+0x44>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a40      	ldr	r2, [pc, #256]	; (8007e9c <TIM_Base_SetConfig+0x130>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d007      	beq.n	8007db0 <TIM_Base_SetConfig+0x44>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a3f      	ldr	r2, [pc, #252]	; (8007ea0 <TIM_Base_SetConfig+0x134>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d003      	beq.n	8007db0 <TIM_Base_SetConfig+0x44>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a3e      	ldr	r2, [pc, #248]	; (8007ea4 <TIM_Base_SetConfig+0x138>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d101      	bne.n	8007db4 <TIM_Base_SetConfig+0x48>
 8007db0:	2301      	movs	r3, #1
 8007db2:	e000      	b.n	8007db6 <TIM_Base_SetConfig+0x4a>
 8007db4:	2300      	movs	r3, #0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d008      	beq.n	8007dcc <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a31      	ldr	r2, [pc, #196]	; (8007e94 <TIM_Base_SetConfig+0x128>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d02b      	beq.n	8007e2c <TIM_Base_SetConfig+0xc0>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dda:	d027      	beq.n	8007e2c <TIM_Base_SetConfig+0xc0>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a2e      	ldr	r2, [pc, #184]	; (8007e98 <TIM_Base_SetConfig+0x12c>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d023      	beq.n	8007e2c <TIM_Base_SetConfig+0xc0>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a2d      	ldr	r2, [pc, #180]	; (8007e9c <TIM_Base_SetConfig+0x130>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d01f      	beq.n	8007e2c <TIM_Base_SetConfig+0xc0>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a2c      	ldr	r2, [pc, #176]	; (8007ea0 <TIM_Base_SetConfig+0x134>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d01b      	beq.n	8007e2c <TIM_Base_SetConfig+0xc0>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a2b      	ldr	r2, [pc, #172]	; (8007ea4 <TIM_Base_SetConfig+0x138>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d017      	beq.n	8007e2c <TIM_Base_SetConfig+0xc0>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a2a      	ldr	r2, [pc, #168]	; (8007ea8 <TIM_Base_SetConfig+0x13c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d013      	beq.n	8007e2c <TIM_Base_SetConfig+0xc0>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a29      	ldr	r2, [pc, #164]	; (8007eac <TIM_Base_SetConfig+0x140>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d00f      	beq.n	8007e2c <TIM_Base_SetConfig+0xc0>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a28      	ldr	r2, [pc, #160]	; (8007eb0 <TIM_Base_SetConfig+0x144>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d00b      	beq.n	8007e2c <TIM_Base_SetConfig+0xc0>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a27      	ldr	r2, [pc, #156]	; (8007eb4 <TIM_Base_SetConfig+0x148>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d007      	beq.n	8007e2c <TIM_Base_SetConfig+0xc0>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a26      	ldr	r2, [pc, #152]	; (8007eb8 <TIM_Base_SetConfig+0x14c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d003      	beq.n	8007e2c <TIM_Base_SetConfig+0xc0>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a25      	ldr	r2, [pc, #148]	; (8007ebc <TIM_Base_SetConfig+0x150>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d101      	bne.n	8007e30 <TIM_Base_SetConfig+0xc4>
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e000      	b.n	8007e32 <TIM_Base_SetConfig+0xc6>
 8007e30:	2300      	movs	r3, #0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d008      	beq.n	8007e48 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	689a      	ldr	r2, [r3, #8]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a0c      	ldr	r2, [pc, #48]	; (8007e94 <TIM_Base_SetConfig+0x128>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d003      	beq.n	8007e6e <TIM_Base_SetConfig+0x102>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a0e      	ldr	r2, [pc, #56]	; (8007ea4 <TIM_Base_SetConfig+0x138>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d101      	bne.n	8007e72 <TIM_Base_SetConfig+0x106>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e000      	b.n	8007e74 <TIM_Base_SetConfig+0x108>
 8007e72:	2300      	movs	r3, #0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d003      	beq.n	8007e80 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	691a      	ldr	r2, [r3, #16]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	615a      	str	r2, [r3, #20]
}
 8007e86:	bf00      	nop
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	40010000 	.word	0x40010000
 8007e98:	40000400 	.word	0x40000400
 8007e9c:	40000800 	.word	0x40000800
 8007ea0:	40000c00 	.word	0x40000c00
 8007ea4:	40010400 	.word	0x40010400
 8007ea8:	40014000 	.word	0x40014000
 8007eac:	40014400 	.word	0x40014400
 8007eb0:	40014800 	.word	0x40014800
 8007eb4:	40001800 	.word	0x40001800
 8007eb8:	40001c00 	.word	0x40001c00
 8007ebc:	40002000 	.word	0x40002000

08007ec0 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_UART_Init>:
  *         the UART_InitTypeDef and create the associated handle.
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
    /* Check the UART handle allocation */
    if (huart == NULL) {
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <HAL_UART_Init+0x12>
        return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e03f      	b.n	8007f7a <HAL_UART_Init+0x92>
        assert_param(IS_UART_INSTANCE(huart->Instance));
    }
    assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
    assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

    if (huart->gState == HAL_UART_STATE_RESET) {
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d106      	bne.n	8007f14 <HAL_UART_Init+0x2c>
        /* Allocate lock resource and initialize it */
        huart->Lock = HAL_UNLOCKED;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        /* Init the low level hardware */
        HAL_UART_MspInit(huart);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f002 fa26 	bl	800a360 <HAL_UART_MspInit>
    }

    huart->gState = HAL_UART_STATE_BUSY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2224      	movs	r2, #36	; 0x24
 8007f18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Disable the peripheral */
    __HAL_UART_DISABLE(huart);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68da      	ldr	r2, [r3, #12]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f2a:	60da      	str	r2, [r3, #12]

    /* Set the UART Communication parameters */
    UART_SetConfig(huart);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fc4b 	bl	80087c8 <UART_SetConfig>

    /* In asynchronous mode, the following bits must be kept cleared:
       - LINEN and CLKEN bits in the USART_CR2 register,
       - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
    CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	691a      	ldr	r2, [r3, #16]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f40:	611a      	str	r2, [r3, #16]
    CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	695a      	ldr	r2, [r3, #20]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f50:	615a      	str	r2, [r3, #20]

    /* Enable the peripheral */
    __HAL_UART_ENABLE(huart);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68da      	ldr	r2, [r3, #12]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f60:	60da      	str	r2, [r3, #12]

    /* Initialize the UART state */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    huart->RxState = HAL_UART_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2220      	movs	r2, #32
 8007f74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <HAL_UART_Transmit>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b088      	sub	sp, #32
 8007f86:	af02      	add	r7, sp, #8
 8007f88:	60f8      	str	r0, [r7, #12]
 8007f8a:	60b9      	str	r1, [r7, #8]
 8007f8c:	603b      	str	r3, [r7, #0]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	80fb      	strh	r3, [r7, #6]
    uint16_t *tmp;
    uint32_t tickstart = 0U;
 8007f92:	2300      	movs	r3, #0
 8007f94:	617b      	str	r3, [r7, #20]

    /* Check that a Tx process is not already ongoing */
    if (huart->gState == HAL_UART_STATE_READY) {
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b20      	cmp	r3, #32
 8007fa0:	f040 8083 	bne.w	80080aa <HAL_UART_Transmit+0x128>
        if ((pData == NULL) || (Size == 0)) {
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <HAL_UART_Transmit+0x2e>
 8007faa:	88fb      	ldrh	r3, [r7, #6]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <HAL_UART_Transmit+0x32>
            return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e07b      	b.n	80080ac <HAL_UART_Transmit+0x12a>
        }

        /* Process Locked */
        __HAL_LOCK(huart);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d101      	bne.n	8007fc2 <HAL_UART_Transmit+0x40>
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	e074      	b.n	80080ac <HAL_UART_Transmit+0x12a>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	63da      	str	r2, [r3, #60]	; 0x3c
        huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2221      	movs	r2, #33	; 0x21
 8007fd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Init tickstart for timeout managment */
        tickstart = HAL_GetTick();
 8007fd8:	f7fb fef8 	bl	8003dcc <HAL_GetTick>
 8007fdc:	6178      	str	r0, [r7, #20]

        huart->TxXferSize = Size;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	88fa      	ldrh	r2, [r7, #6]
 8007fe2:	849a      	strh	r2, [r3, #36]	; 0x24
        huart->TxXferCount = Size;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	88fa      	ldrh	r2, [r7, #6]
 8007fe8:	84da      	strh	r2, [r3, #38]	; 0x26
        while (huart->TxXferCount > 0U) {
 8007fea:	e042      	b.n	8008072 <HAL_UART_Transmit+0xf0>
            huart->TxXferCount--;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	84da      	strh	r2, [r3, #38]	; 0x26
            if (huart->Init.WordLength == UART_WORDLENGTH_9B) {
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008002:	d122      	bne.n	800804a <HAL_UART_Transmit+0xc8>
                if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK) {
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	2200      	movs	r2, #0
 800800c:	2180      	movs	r1, #128	; 0x80
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 fa58 	bl	80084c4 <UART_WaitOnFlagUntilTimeout>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <HAL_UART_Transmit+0x9c>
                    return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e046      	b.n	80080ac <HAL_UART_Transmit+0x12a>
                }
                tmp = (uint16_t *) pData;
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	613b      	str	r3, [r7, #16]
                huart->Instance->DR = (*tmp & (uint16_t) 0x01FF);
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008030:	605a      	str	r2, [r3, #4]
                if (huart->Init.Parity == UART_PARITY_NONE) {
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d103      	bne.n	8008042 <HAL_UART_Transmit+0xc0>
                    pData += 2U;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	3302      	adds	r3, #2
 800803e:	60bb      	str	r3, [r7, #8]
 8008040:	e017      	b.n	8008072 <HAL_UART_Transmit+0xf0>
                } else {
                    pData += 1U;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	3301      	adds	r3, #1
 8008046:	60bb      	str	r3, [r7, #8]
 8008048:	e013      	b.n	8008072 <HAL_UART_Transmit+0xf0>
                }
            } else {
                if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK) {
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	2200      	movs	r2, #0
 8008052:	2180      	movs	r1, #128	; 0x80
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 fa35 	bl	80084c4 <UART_WaitOnFlagUntilTimeout>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <HAL_UART_Transmit+0xe2>
                    return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e023      	b.n	80080ac <HAL_UART_Transmit+0x12a>
                }
                huart->Instance->DR = (*pData++ & (uint8_t) 0xFF);
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	1c5a      	adds	r2, r3, #1
 8008068:	60ba      	str	r2, [r7, #8]
 800806a:	781a      	ldrb	r2, [r3, #0]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	605a      	str	r2, [r3, #4]
        while (huart->TxXferCount > 0U) {
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008076:	b29b      	uxth	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1b7      	bne.n	8007fec <HAL_UART_Transmit+0x6a>
            }
        }

        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK) {
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	2200      	movs	r2, #0
 8008084:	2140      	movs	r1, #64	; 0x40
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f000 fa1c 	bl	80084c4 <UART_WaitOnFlagUntilTimeout>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <HAL_UART_Transmit+0x114>
            return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e00a      	b.n	80080ac <HAL_UART_Transmit+0x12a>
        }

        /* At end of Tx process, restore huart->gState to Ready */
        huart->gState = HAL_UART_STATE_READY;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2220      	movs	r2, #32
 800809a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	e000      	b.n	80080ac <HAL_UART_Transmit+0x12a>
    } else {
        return HAL_BUSY;
 80080aa:	2302      	movs	r3, #2
    }
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3718      	adds	r7, #24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <HAL_UART_Receive>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b088      	sub	sp, #32
 80080b8:	af02      	add	r7, sp, #8
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	603b      	str	r3, [r7, #0]
 80080c0:	4613      	mov	r3, r2
 80080c2:	80fb      	strh	r3, [r7, #6]
    uint16_t *tmp;
    uint32_t tickstart = 0U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	617b      	str	r3, [r7, #20]

    /* Check that a Rx process is not already ongoing */
    if (huart->RxState == HAL_UART_STATE_READY) {
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b20      	cmp	r3, #32
 80080d2:	f040 8094 	bne.w	80081fe <HAL_UART_Receive+0x14a>
        if ((pData == NULL) || (Size == 0)) {
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <HAL_UART_Receive+0x2e>
 80080dc:	88fb      	ldrh	r3, [r7, #6]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <HAL_UART_Receive+0x32>
            return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e08c      	b.n	8008200 <HAL_UART_Receive+0x14c>
        }

        /* Process Locked */
        __HAL_LOCK(huart);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d101      	bne.n	80080f4 <HAL_UART_Receive+0x40>
 80080f0:	2302      	movs	r3, #2
 80080f2:	e085      	b.n	8008200 <HAL_UART_Receive+0x14c>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	63da      	str	r2, [r3, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2222      	movs	r2, #34	; 0x22
 8008106:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Init tickstart for timeout managment */
        tickstart = HAL_GetTick();
 800810a:	f7fb fe5f 	bl	8003dcc <HAL_GetTick>
 800810e:	6178      	str	r0, [r7, #20]

        huart->RxXferSize = Size;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	88fa      	ldrh	r2, [r7, #6]
 8008114:	859a      	strh	r2, [r3, #44]	; 0x2c
        huart->RxXferCount = Size;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	88fa      	ldrh	r2, [r7, #6]
 800811a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* Check the remain data to be received */
        while (huart->RxXferCount > 0U) {
 800811c:	e05c      	b.n	80081d8 <HAL_UART_Receive+0x124>
            huart->RxXferCount--;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008122:	b29b      	uxth	r3, r3
 8008124:	3b01      	subs	r3, #1
 8008126:	b29a      	uxth	r2, r3
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	85da      	strh	r2, [r3, #46]	; 0x2e
            if (huart->Init.WordLength == UART_WORDLENGTH_9B) {
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008134:	d12b      	bne.n	800818e <HAL_UART_Receive+0xda>
                if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK) {
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2200      	movs	r2, #0
 800813e:	2120      	movs	r1, #32
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f000 f9bf 	bl	80084c4 <UART_WaitOnFlagUntilTimeout>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <HAL_UART_Receive+0x9c>
                    return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e057      	b.n	8008200 <HAL_UART_Receive+0x14c>
                }
                tmp = (uint16_t *) pData;
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	613b      	str	r3, [r7, #16]
                if (huart->Init.Parity == UART_PARITY_NONE) {
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10c      	bne.n	8008176 <HAL_UART_Receive+0xc2>
                    *tmp = (uint16_t) (huart->Instance->DR & (uint16_t) 0x01FF);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	b29b      	uxth	r3, r3
 8008164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008168:	b29a      	uxth	r2, r3
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	801a      	strh	r2, [r3, #0]
                    pData += 2U;
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	3302      	adds	r3, #2
 8008172:	60bb      	str	r3, [r7, #8]
 8008174:	e030      	b.n	80081d8 <HAL_UART_Receive+0x124>
                } else {
                    *tmp = (uint16_t) (huart->Instance->DR & (uint16_t) 0x00FF);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	b29b      	uxth	r3, r3
 800817e:	b2db      	uxtb	r3, r3
 8008180:	b29a      	uxth	r2, r3
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	801a      	strh	r2, [r3, #0]
                    pData += 1U;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	3301      	adds	r3, #1
 800818a:	60bb      	str	r3, [r7, #8]
 800818c:	e024      	b.n	80081d8 <HAL_UART_Receive+0x124>
                }

            } else {
                if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK) {
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2200      	movs	r2, #0
 8008196:	2120      	movs	r1, #32
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 f993 	bl	80084c4 <UART_WaitOnFlagUntilTimeout>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <HAL_UART_Receive+0xf4>
                    return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e02b      	b.n	8008200 <HAL_UART_Receive+0x14c>
                }
                if (huart->Init.Parity == UART_PARITY_NONE) {
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d108      	bne.n	80081c2 <HAL_UART_Receive+0x10e>
                    *pData++ = (uint8_t) (huart->Instance->DR & (uint8_t) 0x00FF);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6859      	ldr	r1, [r3, #4]
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	60ba      	str	r2, [r7, #8]
 80081bc:	b2ca      	uxtb	r2, r1
 80081be:	701a      	strb	r2, [r3, #0]
 80081c0:	e00a      	b.n	80081d8 <HAL_UART_Receive+0x124>
                } else {
                    *pData++ = (uint8_t) (huart->Instance->DR & (uint8_t) 0x007F);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	1c59      	adds	r1, r3, #1
 80081ce:	60b9      	str	r1, [r7, #8]
 80081d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80081d4:	b2d2      	uxtb	r2, r2
 80081d6:	701a      	strb	r2, [r3, #0]
        while (huart->RxXferCount > 0U) {
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081dc:	b29b      	uxth	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d19d      	bne.n	800811e <HAL_UART_Receive+0x6a>

            }
        }

        /* At end of Rx process, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        debug_printf("UART SUCCESS?!: %x", pData);
 80081f2:	68b9      	ldr	r1, [r7, #8]
 80081f4:	4804      	ldr	r0, [pc, #16]	; (8008208 <HAL_UART_Receive+0x154>)
 80081f6:	f7fb fba7 	bl	8003948 <debug_printf>
        return HAL_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	e000      	b.n	8008200 <HAL_UART_Receive+0x14c>
    } else {
        return HAL_BUSY;
 80081fe:	2302      	movs	r3, #2
    }
}
 8008200:	4618      	mov	r0, r3
 8008202:	3718      	adds	r7, #24
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	080109b8 	.word	0x080109b8

0800820c <HAL_UART_Receive_IT>:
  *                the configuration information for the specified UART module.
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size) {
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	4613      	mov	r3, r2
 8008218:	80fb      	strh	r3, [r7, #6]
    /* Check that a Rx process is not already ongoing */
    if (huart->RxState == HAL_UART_STATE_READY) {
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b20      	cmp	r3, #32
 8008224:	d138      	bne.n	8008298 <HAL_UART_Receive_IT+0x8c>
        if ((pData == NULL) || (Size == 0)) {
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <HAL_UART_Receive_IT+0x26>
 800822c:	88fb      	ldrh	r3, [r7, #6]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <HAL_UART_Receive_IT+0x2a>
            return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e031      	b.n	800829a <HAL_UART_Receive_IT+0x8e>
        }

        /* Process Locked */
        __HAL_LOCK(huart);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800823c:	2b01      	cmp	r3, #1
 800823e:	d101      	bne.n	8008244 <HAL_UART_Receive_IT+0x38>
 8008240:	2302      	movs	r3, #2
 8008242:	e02a      	b.n	800829a <HAL_UART_Receive_IT+0x8e>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        huart->pRxBuffPtr = pData;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	629a      	str	r2, [r3, #40]	; 0x28
        huart->RxXferSize = Size;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	88fa      	ldrh	r2, [r7, #6]
 8008256:	859a      	strh	r2, [r3, #44]	; 0x2c
        huart->RxXferCount = Size;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	88fa      	ldrh	r2, [r7, #6]
 800825c:	85da      	strh	r2, [r3, #46]	; 0x2e

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	63da      	str	r2, [r3, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2222      	movs	r2, #34	; 0x22
 8008268:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	695a      	ldr	r2, [r3, #20]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f042 0201 	orr.w	r2, r2, #1
 8008282:	615a      	str	r2, [r3, #20]

        /* Enable the UART Parity Error and Data Register not empty Interrupts */
        SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68da      	ldr	r2, [r3, #12]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008292:	60da      	str	r2, [r3, #12]

        return HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	e000      	b.n	800829a <HAL_UART_Receive_IT+0x8e>
    } else {
        return HAL_BUSY;
 8008298:	2302      	movs	r3, #2
    }
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
	...

080082a8 <HAL_UART_IRQHandler>:
  * @brief  This function handles UART interrupt request.
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart) {
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b088      	sub	sp, #32
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
    uint32_t isrflags = READ_REG(huart->Instance->SR);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	61fb      	str	r3, [r7, #28]
    uint32_t cr1its = READ_REG(huart->Instance->CR1);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	61bb      	str	r3, [r7, #24]
    uint32_t cr3its = READ_REG(huart->Instance->CR3);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	617b      	str	r3, [r7, #20]
    uint32_t errorflags = 0x00U;
 80082c8:	2300      	movs	r3, #0
 80082ca:	613b      	str	r3, [r7, #16]
    uint32_t dmarequest = 0x00U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60fb      	str	r3, [r7, #12]

    /* If no error occurs */
    errorflags = (isrflags & (uint32_t) (USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	f003 030f 	and.w	r3, r3, #15
 80082d6:	613b      	str	r3, [r7, #16]
    if (errorflags == RESET) {
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10d      	bne.n	80082fa <HAL_UART_IRQHandler+0x52>
        /* UART in mode Receiver -------------------------------------------------*/
        if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	f003 0320 	and.w	r3, r3, #32
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d008      	beq.n	80082fa <HAL_UART_IRQHandler+0x52>
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d003      	beq.n	80082fa <HAL_UART_IRQHandler+0x52>
            UART_Receive_IT(huart);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f9d0 	bl	8008698 <UART_Receive_IT>
            return;
 80082f8:	e0cb      	b.n	8008492 <HAL_UART_IRQHandler+0x1ea>
        }
    }

    /* If some errors occur */
    if ((errorflags != RESET) &&
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 80ab 	beq.w	8008458 <HAL_UART_IRQHandler+0x1b0>
        (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET))) {
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	f003 0301 	and.w	r3, r3, #1
    if ((errorflags != RESET) &&
 8008308:	2b00      	cmp	r3, #0
 800830a:	d105      	bne.n	8008318 <HAL_UART_IRQHandler+0x70>
        (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET))) {
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 80a0 	beq.w	8008458 <HAL_UART_IRQHandler+0x1b0>
        /* UART parity error interrupt occurred ----------------------------------*/
        if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET)) {
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00a      	beq.n	8008338 <HAL_UART_IRQHandler+0x90>
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008328:	2b00      	cmp	r3, #0
 800832a:	d005      	beq.n	8008338 <HAL_UART_IRQHandler+0x90>
            huart->ErrorCode |= HAL_UART_ERROR_PE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008330:	f043 0201 	orr.w	r2, r3, #1
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* UART noise error interrupt occurred -----------------------------------*/
        if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	f003 0304 	and.w	r3, r3, #4
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00a      	beq.n	8008358 <HAL_UART_IRQHandler+0xb0>
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	f003 0301 	and.w	r3, r3, #1
 8008348:	2b00      	cmp	r3, #0
 800834a:	d005      	beq.n	8008358 <HAL_UART_IRQHandler+0xb0>
            huart->ErrorCode |= HAL_UART_ERROR_NE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008350:	f043 0202 	orr.w	r2, r3, #2
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* UART frame error interrupt occurred -----------------------------------*/
        if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	f003 0302 	and.w	r3, r3, #2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <HAL_UART_IRQHandler+0xd0>
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	2b00      	cmp	r3, #0
 800836a:	d005      	beq.n	8008378 <HAL_UART_IRQHandler+0xd0>
            huart->ErrorCode |= HAL_UART_ERROR_FE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008370:	f043 0204 	orr.w	r2, r3, #4
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* UART Over-Run interrupt occurred --------------------------------------*/
        if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET)) {
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	f003 0308 	and.w	r3, r3, #8
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <HAL_UART_IRQHandler+0xf0>
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	2b00      	cmp	r3, #0
 800838a:	d005      	beq.n	8008398 <HAL_UART_IRQHandler+0xf0>
            huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008390:	f043 0208 	orr.w	r2, r3, #8
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Call UART Error Call back function if need be --------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800839c:	2b00      	cmp	r3, #0
 800839e:	d077      	beq.n	8008490 <HAL_UART_IRQHandler+0x1e8>
            /* UART in mode Receiver -----------------------------------------------*/
            if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	f003 0320 	and.w	r3, r3, #32
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d007      	beq.n	80083ba <HAL_UART_IRQHandler+0x112>
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	f003 0320 	and.w	r3, r3, #32
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <HAL_UART_IRQHandler+0x112>
                UART_Receive_IT(huart);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f96f 	bl	8008698 <UART_Receive_IT>
            }

            /* If Overrun error occurs, or if any error occurs in DMA mode reception,
               consider error as blocking */
            dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	bf14      	ite	ne
 80083c8:	2301      	movne	r3, #1
 80083ca:	2300      	moveq	r3, #0
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	60fb      	str	r3, [r7, #12]
            if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest) {
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d4:	f003 0308 	and.w	r3, r3, #8
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d102      	bne.n	80083e2 <HAL_UART_IRQHandler+0x13a>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d031      	beq.n	8008446 <HAL_UART_IRQHandler+0x19e>
                /* Blocking error : transfer is aborted
                   Set the UART state ready to be able to start again the process,
                   Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
                UART_EndRxTransfer(huart);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f8b8 	bl	8008558 <UART_EndRxTransfer>

                /* Disable the UART DMA Rx request if enabled */
                if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d023      	beq.n	800843e <HAL_UART_IRQHandler+0x196>
                    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	695a      	ldr	r2, [r3, #20]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008404:	615a      	str	r2, [r3, #20]

                    /* Abort the UART DMA Rx channel */
                    if (huart->hdmarx != NULL) {
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840a:	2b00      	cmp	r3, #0
 800840c:	d013      	beq.n	8008436 <HAL_UART_IRQHandler+0x18e>
                        /* Set the UART DMA Abort callback :
                           will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
                        huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008412:	4a21      	ldr	r2, [pc, #132]	; (8008498 <HAL_UART_IRQHandler+0x1f0>)
 8008414:	651a      	str	r2, [r3, #80]	; 0x50
                        if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800841a:	4618      	mov	r0, r3
 800841c:	f7fb fe2a 	bl	8004074 <HAL_DMA_Abort_IT>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d016      	beq.n	8008454 <HAL_UART_IRQHandler+0x1ac>
                            /* Call Directly XferAbortCallback function in case of error */
                            huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800842a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008430:	4610      	mov	r0, r2
 8008432:	4798      	blx	r3
                if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8008434:	e00e      	b.n	8008454 <HAL_UART_IRQHandler+0x1ac>
                        }
                    } else {
                        /* Call user error callback */
                        HAL_UART_ErrorCallback(huart);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f83a 	bl	80084b0 <HAL_UART_ErrorCallback>
                if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 800843c:	e00a      	b.n	8008454 <HAL_UART_IRQHandler+0x1ac>
                    }
                } else {
                    /* Call user error callback */
                    HAL_UART_ErrorCallback(huart);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f836 	bl	80084b0 <HAL_UART_ErrorCallback>
                if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8008444:	e006      	b.n	8008454 <HAL_UART_IRQHandler+0x1ac>
                }
            } else {
                /* Non Blocking error : transfer could go on.
                   Error is notified to user through user error callback */
                HAL_UART_ErrorCallback(huart);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f832 	bl	80084b0 <HAL_UART_ErrorCallback>
                huart->ErrorCode = HAL_UART_ERROR_NONE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	63da      	str	r2, [r3, #60]	; 0x3c
            }
        }
        return;
 8008452:	e01d      	b.n	8008490 <HAL_UART_IRQHandler+0x1e8>
                if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8008454:	bf00      	nop
        return;
 8008456:	e01b      	b.n	8008490 <HAL_UART_IRQHandler+0x1e8>
    } /* End if some error occurs */

    /* UART in mode Transmitter ------------------------------------------------*/
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET)) {
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845e:	2b00      	cmp	r3, #0
 8008460:	d008      	beq.n	8008474 <HAL_UART_IRQHandler+0x1cc>
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <HAL_UART_IRQHandler+0x1cc>
        UART_Transmit_IT(huart);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f8a5 	bl	80085bc <UART_Transmit_IT>
        return;
 8008472:	e00e      	b.n	8008492 <HAL_UART_IRQHandler+0x1ea>
    }

    /* UART in mode Transmitter end --------------------------------------------*/
    if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET)) {
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847a:	2b00      	cmp	r3, #0
 800847c:	d009      	beq.n	8008492 <HAL_UART_IRQHandler+0x1ea>
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008484:	2b00      	cmp	r3, #0
 8008486:	d004      	beq.n	8008492 <HAL_UART_IRQHandler+0x1ea>
        UART_EndTransmit_IT(huart);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f8ed 	bl	8008668 <UART_EndTransmit_IT>
        return;
 800848e:	e000      	b.n	8008492 <HAL_UART_IRQHandler+0x1ea>
        return;
 8008490:	bf00      	nop
    }
}
 8008492:	3720      	adds	r7, #32
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	08008595 	.word	0x08008595

0800849c <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    /* NOTE: This function Should not be modified, when the callback is needed,
             the HAL_UART_TxCpltCallback could be implemented in the user file
     */
}
 80084a4:	bf00      	nop
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks.
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);
    /* NOTE: This function Should not be modified, when the callback is needed,
             the HAL_UART_ErrorCallback could be implemented in the user file
     */
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef
UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart,
                            uint32_t Timeout) {
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	603b      	str	r3, [r7, #0]
 80084d0:	4613      	mov	r3, r2
 80084d2:	71fb      	strb	r3, [r7, #7]
    /* Wait until flag is set */
    while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 80084d4:	e02c      	b.n	8008530 <UART_WaitOnFlagUntilTimeout+0x6c>
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY) {
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084dc:	d028      	beq.n	8008530 <UART_WaitOnFlagUntilTimeout+0x6c>
            if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d007      	beq.n	80084f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80084e4:	f7fb fc72 	bl	8003dcc <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	69ba      	ldr	r2, [r7, #24]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d21d      	bcs.n	8008530 <UART_WaitOnFlagUntilTimeout+0x6c>
                /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
                CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68da      	ldr	r2, [r3, #12]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008502:	60da      	str	r2, [r3, #12]
                CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	695a      	ldr	r2, [r3, #20]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f022 0201 	bic.w	r2, r2, #1
 8008512:	615a      	str	r2, [r3, #20]

                huart->gState = HAL_UART_STATE_READY;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2220      	movs	r2, #32
 8008518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                huart->RxState = HAL_UART_STATE_READY;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2220      	movs	r2, #32
 8008520:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

                /* Process Unlocked */
                __HAL_UNLOCK(huart);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

                return HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	e00f      	b.n	8008550 <UART_WaitOnFlagUntilTimeout+0x8c>
    while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	4013      	ands	r3, r2
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	429a      	cmp	r2, r3
 800853e:	bf0c      	ite	eq
 8008540:	2301      	moveq	r3, #1
 8008542:	2300      	movne	r3, #0
 8008544:	b2db      	uxtb	r3, r3
 8008546:	461a      	mov	r2, r3
 8008548:	79fb      	ldrb	r3, [r7, #7]
 800854a:	429a      	cmp	r2, r3
 800854c:	d0c3      	beq.n	80084d6 <UART_WaitOnFlagUntilTimeout+0x12>
            }
        }
    }

    return HAL_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <UART_EndRxTransfer>:
/**
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart) {
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68da      	ldr	r2, [r3, #12]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800856e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	695a      	ldr	r2, [r3, #20]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f022 0201 	bic.w	r2, r2, #1
 800857e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2220      	movs	r2, #32
 8008584:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <UART_DMAAbortOnError>:
  * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef *huart = (UART_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a0:	60fb      	str	r3, [r7, #12]
    huart->RxXferCount = 0U;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	85da      	strh	r2, [r3, #46]	; 0x2e
    huart->TxXferCount = 0U;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	84da      	strh	r2, [r3, #38]	; 0x26

    HAL_UART_ErrorCallback(huart);
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f7ff ff7e 	bl	80084b0 <HAL_UART_ErrorCallback>
}
 80085b4:	bf00      	nop
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <UART_Transmit_IT>:
  * @brief  Sends an amount of data in non blocking mode.
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart) {
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
    uint16_t *tmp;

    /* Check that a Tx process is ongoing */
    if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b21      	cmp	r3, #33	; 0x21
 80085ce:	d144      	bne.n	800865a <UART_Transmit_IT+0x9e>
        if (huart->Init.WordLength == UART_WORDLENGTH_9B) {
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d8:	d11a      	bne.n	8008610 <UART_Transmit_IT+0x54>
            tmp = (uint16_t *) huart->pTxBuffPtr;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	60fb      	str	r3, [r7, #12]
            huart->Instance->DR = (uint16_t) (*tmp & (uint16_t) 0x01FF);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	881b      	ldrh	r3, [r3, #0]
 80085e4:	461a      	mov	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085ee:	605a      	str	r2, [r3, #4]
            if (huart->Init.Parity == UART_PARITY_NONE) {
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d105      	bne.n	8008604 <UART_Transmit_IT+0x48>
                huart->pTxBuffPtr += 2U;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	1c9a      	adds	r2, r3, #2
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	621a      	str	r2, [r3, #32]
 8008602:	e00e      	b.n	8008622 <UART_Transmit_IT+0x66>
            } else {
                huart->pTxBuffPtr += 1U;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	621a      	str	r2, [r3, #32]
 800860e:	e008      	b.n	8008622 <UART_Transmit_IT+0x66>
            }
        } else {
            huart->Instance->DR = (uint8_t) (*huart->pTxBuffPtr++ & (uint8_t) 0x00FF);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a1b      	ldr	r3, [r3, #32]
 8008614:	1c59      	adds	r1, r3, #1
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	6211      	str	r1, [r2, #32]
 800861a:	781a      	ldrb	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	605a      	str	r2, [r3, #4]
        }

        if (--huart->TxXferCount == 0U) {
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008626:	b29b      	uxth	r3, r3
 8008628:	3b01      	subs	r3, #1
 800862a:	b29b      	uxth	r3, r3
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	4619      	mov	r1, r3
 8008630:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10f      	bne.n	8008656 <UART_Transmit_IT+0x9a>
            /* Disable the UART Transmit Complete Interrupt */
            CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68da      	ldr	r2, [r3, #12]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008644:	60da      	str	r2, [r3, #12]

            /* Enable the UART Transmit Complete Interrupt */
            SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68da      	ldr	r2, [r3, #12]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008654:	60da      	str	r2, [r3, #12]
        }
        return HAL_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	e000      	b.n	800865c <UART_Transmit_IT+0xa0>
    } else {
        return HAL_BUSY;
 800865a:	2302      	movs	r3, #2
    }
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <UART_EndTransmit_IT>:
  * @brief  Wraps up transmission in non blocking mode.
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart) {
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
    /* Disable the UART Transmit Complete Interrupt */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800867e:	60da      	str	r2, [r3, #12]

    /* Tx process is ended, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2220      	movs	r2, #32
 8008684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    HAL_UART_TxCpltCallback(huart);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7ff ff07 	bl	800849c <HAL_UART_TxCpltCallback>

    return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <UART_Receive_IT>:
  * @brief  Receives an amount of data in non blocking mode 
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart) {
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]


    uint16_t *tmp;

    /* Check that a Rx process is ongoing */
    if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	2b22      	cmp	r3, #34	; 0x22
 80086aa:	f040 8088 	bne.w	80087be <UART_Receive_IT+0x126>
        if (huart->Init.WordLength == UART_WORDLENGTH_9B) {
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086b6:	d123      	bne.n	8008700 <UART_Receive_IT+0x68>
            tmp = (uint16_t *) huart->pRxBuffPtr;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086bc:	60fb      	str	r3, [r7, #12]
            if (huart->Init.Parity == UART_PARITY_NONE) {
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10e      	bne.n	80086e4 <UART_Receive_IT+0x4c>
                *tmp = (uint16_t) (huart->Instance->DR & (uint16_t) 0x01FF);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	801a      	strh	r2, [r3, #0]
                huart->pRxBuffPtr += 2U;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086dc:	1c9a      	adds	r2, r3, #2
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	629a      	str	r2, [r3, #40]	; 0x28
 80086e2:	e029      	b.n	8008738 <UART_Receive_IT+0xa0>
            } else {
                *tmp = (uint16_t) (huart->Instance->DR & (uint16_t) 0x00FF);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	801a      	strh	r2, [r3, #0]
                huart->pRxBuffPtr += 1U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f8:	1c5a      	adds	r2, r3, #1
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	629a      	str	r2, [r3, #40]	; 0x28
 80086fe:	e01b      	b.n	8008738 <UART_Receive_IT+0xa0>
            }
        } else {
            if (huart->Init.Parity == UART_PARITY_NONE) {
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10a      	bne.n	800871e <UART_Receive_IT+0x86>
                *huart->pRxBuffPtr++ = (uint8_t) (huart->Instance->DR & (uint8_t) 0x00FF);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6858      	ldr	r0, [r3, #4]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008712:	1c59      	adds	r1, r3, #1
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	6291      	str	r1, [r2, #40]	; 0x28
 8008718:	b2c2      	uxtb	r2, r0
 800871a:	701a      	strb	r2, [r3, #0]
 800871c:	e00c      	b.n	8008738 <UART_Receive_IT+0xa0>
            } else {
                *huart->pRxBuffPtr++ = (uint8_t) (huart->Instance->DR & (uint8_t) 0x007F);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	b2da      	uxtb	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872a:	1c58      	adds	r0, r3, #1
 800872c:	6879      	ldr	r1, [r7, #4]
 800872e:	6288      	str	r0, [r1, #40]	; 0x28
 8008730:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008734:	b2d2      	uxtb	r2, r2
 8008736:	701a      	strb	r2, [r3, #0]
            }
        }

        if (--huart->RxXferCount == 0U) {
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800873c:	b29b      	uxth	r3, r3
 800873e:	3b01      	subs	r3, #1
 8008740:	b29b      	uxth	r3, r3
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	4619      	mov	r1, r3
 8008746:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008748:	2b00      	cmp	r3, #0
 800874a:	d136      	bne.n	80087ba <UART_Receive_IT+0x122>
            //This allows the buffer to resize based on length of the Ground Station commands over UART
            if ((*(huart->pRxBuffPtr - 1) != 0) && (huart->RxXferSize == 4)) {
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008750:	3b01      	subs	r3, #1
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d017      	beq.n	8008788 <UART_Receive_IT+0xf0>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800875c:	2b04      	cmp	r3, #4
 800875e:	d113      	bne.n	8008788 <UART_Receive_IT+0xf0>
                huart->RxXferCount = *(huart->pRxBuffPtr - 1) + 1;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008764:	3b01      	subs	r3, #1
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	b29b      	uxth	r3, r3
 800876a:	3301      	adds	r3, #1
 800876c:	b29a      	uxth	r2, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	85da      	strh	r2, [r3, #46]	; 0x2e
                huart->RxXferSize = *(huart->pRxBuffPtr - 1) + 5;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008776:	3b01      	subs	r3, #1
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	b29b      	uxth	r3, r3
 800877c:	3305      	adds	r3, #5
 800877e:	b29a      	uxth	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	859a      	strh	r2, [r3, #44]	; 0x2c
                return HAL_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	e01b      	b.n	80087c0 <UART_Receive_IT+0x128>
            }
            /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
            CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68da      	ldr	r2, [r3, #12]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008796:	60da      	str	r2, [r3, #12]

            /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
            CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	695a      	ldr	r2, [r3, #20]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f022 0201 	bic.w	r2, r2, #1
 80087a6:	615a      	str	r2, [r3, #20]

            /* Rx process is completed, restore huart->RxState to Ready */
            huart->RxState = HAL_UART_STATE_READY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2220      	movs	r2, #32
 80087ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

            HAL_UART_RxCpltCallback(huart);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7fb fa97 	bl	8003ce4 <HAL_UART_RxCpltCallback>

            return HAL_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	e002      	b.n	80087c0 <UART_Receive_IT+0x128>
        }
        return HAL_OK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	e000      	b.n	80087c0 <UART_Receive_IT+0x128>
    } else {
        return HAL_BUSY;
 80087be:	2302      	movs	r3, #2
    }

#endif
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <UART_SetConfig>:
  * @brief  Configures the UART peripheral. 
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart) {
 80087c8:	b5b0      	push	{r4, r5, r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
    uint32_t tmpreg = 0x00U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	60fb      	str	r3, [r7, #12]
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
    assert_param(IS_UART_PARITY(huart->Init.Parity));
    assert_param(IS_UART_MODE(huart->Init.Mode));

    /*-------------------------- USART CR2 Configuration -----------------------*/
    tmpreg = huart->Instance->CR2;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	60fb      	str	r3, [r7, #12]

    /* Clear STOP[13:12] bits */
    tmpreg &= (uint32_t) ~((uint32_t) USART_CR2_STOP);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80087e2:	60fb      	str	r3, [r7, #12]

    /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
    tmpreg |= (uint32_t) huart->Init.StopBits;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60fb      	str	r3, [r7, #12]

    /* Write to USART CR2 */
    WRITE_REG(huart->Instance->CR2, (uint32_t) tmpreg);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	611a      	str	r2, [r3, #16]

    /*-------------------------- USART CR1 Configuration -----------------------*/
    tmpreg = huart->Instance->CR1;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	60fb      	str	r3, [r7, #12]

    /* Clear M, PCE, PS, TE and RE bits */
    tmpreg &= (uint32_t) ~((uint32_t) (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008804:	f023 030c 	bic.w	r3, r3, #12
 8008808:	60fb      	str	r3, [r7, #12]
    /* Configure the UART Word Length, Parity and mode:
       Set the M bits according to huart->Init.WordLength value
       Set PCE and PS bits according to huart->Init.Parity value
       Set TE and RE bits according to huart->Init.Mode value
       Set OVER8 bit according to huart->Init.OverSampling value */
    tmpreg |= (uint32_t) huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	689a      	ldr	r2, [r3, #8]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	431a      	orrs	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	431a      	orrs	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	4313      	orrs	r3, r2
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	4313      	orrs	r3, r2
 8008824:	60fb      	str	r3, [r7, #12]

    /* Write to USART CR1 */
    WRITE_REG(huart->Instance->CR1, (uint32_t) tmpreg);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	60da      	str	r2, [r3, #12]

    /*-------------------------- USART CR3 Configuration -----------------------*/
    tmpreg = huart->Instance->CR3;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	695b      	ldr	r3, [r3, #20]
 8008834:	60fb      	str	r3, [r7, #12]

    /* Clear CTSE and RTSE bits */
    tmpreg &= (uint32_t) ~((uint32_t) (USART_CR3_RTSE | USART_CR3_CTSE));
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800883c:	60fb      	str	r3, [r7, #12]

    /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
    tmpreg |= huart->Init.HwFlowCtl;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	4313      	orrs	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]

    /* Write to USART CR3 */
    WRITE_REG(huart->Instance->CR3, (uint32_t) tmpreg);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	615a      	str	r2, [r3, #20]

    /* Check the Over Sampling */
    if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	69db      	ldr	r3, [r3, #28]
 8008854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008858:	f040 80e4 	bne.w	8008a24 <UART_SetConfig+0x25c>
        /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
        if((huart->Instance == USART1) || (huart->Instance == USART6))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4aab      	ldr	r2, [pc, #684]	; (8008b10 <UART_SetConfig+0x348>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d004      	beq.n	8008870 <UART_SetConfig+0xa8>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4aaa      	ldr	r2, [pc, #680]	; (8008b14 <UART_SetConfig+0x34c>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d16c      	bne.n	800894a <UART_SetConfig+0x182>
        {
          huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8008870:	f7fd faa6 	bl	8005dc0 <HAL_RCC_GetPCLK2Freq>
 8008874:	4602      	mov	r2, r0
 8008876:	4613      	mov	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4413      	add	r3, r2
 800887c:	009a      	lsls	r2, r3, #2
 800887e:	441a      	add	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	005b      	lsls	r3, r3, #1
 8008886:	fbb2 f3f3 	udiv	r3, r2, r3
 800888a:	4aa3      	ldr	r2, [pc, #652]	; (8008b18 <UART_SetConfig+0x350>)
 800888c:	fba2 2303 	umull	r2, r3, r2, r3
 8008890:	095b      	lsrs	r3, r3, #5
 8008892:	011c      	lsls	r4, r3, #4
 8008894:	f7fd fa94 	bl	8005dc0 <HAL_RCC_GetPCLK2Freq>
 8008898:	4602      	mov	r2, r0
 800889a:	4613      	mov	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	009a      	lsls	r2, r3, #2
 80088a2:	441a      	add	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	fbb2 f5f3 	udiv	r5, r2, r3
 80088ae:	f7fd fa87 	bl	8005dc0 <HAL_RCC_GetPCLK2Freq>
 80088b2:	4602      	mov	r2, r0
 80088b4:	4613      	mov	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	009a      	lsls	r2, r3, #2
 80088bc:	441a      	add	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	005b      	lsls	r3, r3, #1
 80088c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088c8:	4a93      	ldr	r2, [pc, #588]	; (8008b18 <UART_SetConfig+0x350>)
 80088ca:	fba2 2303 	umull	r2, r3, r2, r3
 80088ce:	095b      	lsrs	r3, r3, #5
 80088d0:	2264      	movs	r2, #100	; 0x64
 80088d2:	fb02 f303 	mul.w	r3, r2, r3
 80088d6:	1aeb      	subs	r3, r5, r3
 80088d8:	00db      	lsls	r3, r3, #3
 80088da:	3332      	adds	r3, #50	; 0x32
 80088dc:	4a8e      	ldr	r2, [pc, #568]	; (8008b18 <UART_SetConfig+0x350>)
 80088de:	fba2 2303 	umull	r2, r3, r2, r3
 80088e2:	095b      	lsrs	r3, r3, #5
 80088e4:	005b      	lsls	r3, r3, #1
 80088e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088ea:	441c      	add	r4, r3
 80088ec:	f7fd fa68 	bl	8005dc0 <HAL_RCC_GetPCLK2Freq>
 80088f0:	4602      	mov	r2, r0
 80088f2:	4613      	mov	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	009a      	lsls	r2, r3, #2
 80088fa:	441a      	add	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	005b      	lsls	r3, r3, #1
 8008902:	fbb2 f5f3 	udiv	r5, r2, r3
 8008906:	f7fd fa5b 	bl	8005dc0 <HAL_RCC_GetPCLK2Freq>
 800890a:	4602      	mov	r2, r0
 800890c:	4613      	mov	r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	009a      	lsls	r2, r3, #2
 8008914:	441a      	add	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008920:	4a7d      	ldr	r2, [pc, #500]	; (8008b18 <UART_SetConfig+0x350>)
 8008922:	fba2 2303 	umull	r2, r3, r2, r3
 8008926:	095b      	lsrs	r3, r3, #5
 8008928:	2264      	movs	r2, #100	; 0x64
 800892a:	fb02 f303 	mul.w	r3, r2, r3
 800892e:	1aeb      	subs	r3, r5, r3
 8008930:	00db      	lsls	r3, r3, #3
 8008932:	3332      	adds	r3, #50	; 0x32
 8008934:	4a78      	ldr	r2, [pc, #480]	; (8008b18 <UART_SetConfig+0x350>)
 8008936:	fba2 2303 	umull	r2, r3, r2, r3
 800893a:	095b      	lsrs	r3, r3, #5
 800893c:	f003 0207 	and.w	r2, r3, #7
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4422      	add	r2, r4
 8008946:	609a      	str	r2, [r3, #8]
 8008948:	e154      	b.n	8008bf4 <UART_SetConfig+0x42c>
        if (huart->Instance == USART1) {
            huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
        }
#endif /* USART6 */
        else {
            huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800894a:	f7fd fa17 	bl	8005d7c <HAL_RCC_GetPCLK1Freq>
 800894e:	4602      	mov	r2, r0
 8008950:	4613      	mov	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	4413      	add	r3, r2
 8008956:	009a      	lsls	r2, r3, #2
 8008958:	441a      	add	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	005b      	lsls	r3, r3, #1
 8008960:	fbb2 f3f3 	udiv	r3, r2, r3
 8008964:	4a6c      	ldr	r2, [pc, #432]	; (8008b18 <UART_SetConfig+0x350>)
 8008966:	fba2 2303 	umull	r2, r3, r2, r3
 800896a:	095b      	lsrs	r3, r3, #5
 800896c:	011c      	lsls	r4, r3, #4
 800896e:	f7fd fa05 	bl	8005d7c <HAL_RCC_GetPCLK1Freq>
 8008972:	4602      	mov	r2, r0
 8008974:	4613      	mov	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	009a      	lsls	r2, r3, #2
 800897c:	441a      	add	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	005b      	lsls	r3, r3, #1
 8008984:	fbb2 f5f3 	udiv	r5, r2, r3
 8008988:	f7fd f9f8 	bl	8005d7c <HAL_RCC_GetPCLK1Freq>
 800898c:	4602      	mov	r2, r0
 800898e:	4613      	mov	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	009a      	lsls	r2, r3, #2
 8008996:	441a      	add	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	005b      	lsls	r3, r3, #1
 800899e:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a2:	4a5d      	ldr	r2, [pc, #372]	; (8008b18 <UART_SetConfig+0x350>)
 80089a4:	fba2 2303 	umull	r2, r3, r2, r3
 80089a8:	095b      	lsrs	r3, r3, #5
 80089aa:	2264      	movs	r2, #100	; 0x64
 80089ac:	fb02 f303 	mul.w	r3, r2, r3
 80089b0:	1aeb      	subs	r3, r5, r3
 80089b2:	00db      	lsls	r3, r3, #3
 80089b4:	3332      	adds	r3, #50	; 0x32
 80089b6:	4a58      	ldr	r2, [pc, #352]	; (8008b18 <UART_SetConfig+0x350>)
 80089b8:	fba2 2303 	umull	r2, r3, r2, r3
 80089bc:	095b      	lsrs	r3, r3, #5
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80089c4:	441c      	add	r4, r3
 80089c6:	f7fd f9d9 	bl	8005d7c <HAL_RCC_GetPCLK1Freq>
 80089ca:	4602      	mov	r2, r0
 80089cc:	4613      	mov	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	009a      	lsls	r2, r3, #2
 80089d4:	441a      	add	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	fbb2 f5f3 	udiv	r5, r2, r3
 80089e0:	f7fd f9cc 	bl	8005d7c <HAL_RCC_GetPCLK1Freq>
 80089e4:	4602      	mov	r2, r0
 80089e6:	4613      	mov	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	009a      	lsls	r2, r3, #2
 80089ee:	441a      	add	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	005b      	lsls	r3, r3, #1
 80089f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089fa:	4a47      	ldr	r2, [pc, #284]	; (8008b18 <UART_SetConfig+0x350>)
 80089fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008a00:	095b      	lsrs	r3, r3, #5
 8008a02:	2264      	movs	r2, #100	; 0x64
 8008a04:	fb02 f303 	mul.w	r3, r2, r3
 8008a08:	1aeb      	subs	r3, r5, r3
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	3332      	adds	r3, #50	; 0x32
 8008a0e:	4a42      	ldr	r2, [pc, #264]	; (8008b18 <UART_SetConfig+0x350>)
 8008a10:	fba2 2303 	umull	r2, r3, r2, r3
 8008a14:	095b      	lsrs	r3, r3, #5
 8008a16:	f003 0207 	and.w	r2, r3, #7
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4422      	add	r2, r4
 8008a20:	609a      	str	r2, [r3, #8]
#endif /* USART6 */
        else {
            huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
        }
    }
}
 8008a22:	e0e7      	b.n	8008bf4 <UART_SetConfig+0x42c>
        if((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a39      	ldr	r2, [pc, #228]	; (8008b10 <UART_SetConfig+0x348>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d004      	beq.n	8008a38 <UART_SetConfig+0x270>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a38      	ldr	r2, [pc, #224]	; (8008b14 <UART_SetConfig+0x34c>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d171      	bne.n	8008b1c <UART_SetConfig+0x354>
          huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8008a38:	f7fd f9c2 	bl	8005dc0 <HAL_RCC_GetPCLK2Freq>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	4613      	mov	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4413      	add	r3, r2
 8008a44:	009a      	lsls	r2, r3, #2
 8008a46:	441a      	add	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a52:	4a31      	ldr	r2, [pc, #196]	; (8008b18 <UART_SetConfig+0x350>)
 8008a54:	fba2 2303 	umull	r2, r3, r2, r3
 8008a58:	095b      	lsrs	r3, r3, #5
 8008a5a:	011c      	lsls	r4, r3, #4
 8008a5c:	f7fd f9b0 	bl	8005dc0 <HAL_RCC_GetPCLK2Freq>
 8008a60:	4602      	mov	r2, r0
 8008a62:	4613      	mov	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	009a      	lsls	r2, r3, #2
 8008a6a:	441a      	add	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	fbb2 f5f3 	udiv	r5, r2, r3
 8008a76:	f7fd f9a3 	bl	8005dc0 <HAL_RCC_GetPCLK2Freq>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	4413      	add	r3, r2
 8008a82:	009a      	lsls	r2, r3, #2
 8008a84:	441a      	add	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a90:	4a21      	ldr	r2, [pc, #132]	; (8008b18 <UART_SetConfig+0x350>)
 8008a92:	fba2 2303 	umull	r2, r3, r2, r3
 8008a96:	095b      	lsrs	r3, r3, #5
 8008a98:	2264      	movs	r2, #100	; 0x64
 8008a9a:	fb02 f303 	mul.w	r3, r2, r3
 8008a9e:	1aeb      	subs	r3, r5, r3
 8008aa0:	011b      	lsls	r3, r3, #4
 8008aa2:	3332      	adds	r3, #50	; 0x32
 8008aa4:	4a1c      	ldr	r2, [pc, #112]	; (8008b18 <UART_SetConfig+0x350>)
 8008aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8008aaa:	095b      	lsrs	r3, r3, #5
 8008aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ab0:	441c      	add	r4, r3
 8008ab2:	f7fd f985 	bl	8005dc0 <HAL_RCC_GetPCLK2Freq>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	4613      	mov	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	009a      	lsls	r2, r3, #2
 8008ac0:	441a      	add	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	fbb2 f5f3 	udiv	r5, r2, r3
 8008acc:	f7fd f978 	bl	8005dc0 <HAL_RCC_GetPCLK2Freq>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	009a      	lsls	r2, r3, #2
 8008ada:	441a      	add	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae6:	4a0c      	ldr	r2, [pc, #48]	; (8008b18 <UART_SetConfig+0x350>)
 8008ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8008aec:	095b      	lsrs	r3, r3, #5
 8008aee:	2264      	movs	r2, #100	; 0x64
 8008af0:	fb02 f303 	mul.w	r3, r2, r3
 8008af4:	1aeb      	subs	r3, r5, r3
 8008af6:	011b      	lsls	r3, r3, #4
 8008af8:	3332      	adds	r3, #50	; 0x32
 8008afa:	4a07      	ldr	r2, [pc, #28]	; (8008b18 <UART_SetConfig+0x350>)
 8008afc:	fba2 2303 	umull	r2, r3, r2, r3
 8008b00:	095b      	lsrs	r3, r3, #5
 8008b02:	f003 020f 	and.w	r2, r3, #15
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4422      	add	r2, r4
 8008b0c:	609a      	str	r2, [r3, #8]
 8008b0e:	e071      	b.n	8008bf4 <UART_SetConfig+0x42c>
 8008b10:	40011000 	.word	0x40011000
 8008b14:	40011400 	.word	0x40011400
 8008b18:	51eb851f 	.word	0x51eb851f
            huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8008b1c:	f7fd f92e 	bl	8005d7c <HAL_RCC_GetPCLK1Freq>
 8008b20:	4602      	mov	r2, r0
 8008b22:	4613      	mov	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4413      	add	r3, r2
 8008b28:	009a      	lsls	r2, r3, #2
 8008b2a:	441a      	add	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b36:	4a31      	ldr	r2, [pc, #196]	; (8008bfc <UART_SetConfig+0x434>)
 8008b38:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3c:	095b      	lsrs	r3, r3, #5
 8008b3e:	011c      	lsls	r4, r3, #4
 8008b40:	f7fd f91c 	bl	8005d7c <HAL_RCC_GetPCLK1Freq>
 8008b44:	4602      	mov	r2, r0
 8008b46:	4613      	mov	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	009a      	lsls	r2, r3, #2
 8008b4e:	441a      	add	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	fbb2 f5f3 	udiv	r5, r2, r3
 8008b5a:	f7fd f90f 	bl	8005d7c <HAL_RCC_GetPCLK1Freq>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	4613      	mov	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	009a      	lsls	r2, r3, #2
 8008b68:	441a      	add	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b74:	4a21      	ldr	r2, [pc, #132]	; (8008bfc <UART_SetConfig+0x434>)
 8008b76:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7a:	095b      	lsrs	r3, r3, #5
 8008b7c:	2264      	movs	r2, #100	; 0x64
 8008b7e:	fb02 f303 	mul.w	r3, r2, r3
 8008b82:	1aeb      	subs	r3, r5, r3
 8008b84:	011b      	lsls	r3, r3, #4
 8008b86:	3332      	adds	r3, #50	; 0x32
 8008b88:	4a1c      	ldr	r2, [pc, #112]	; (8008bfc <UART_SetConfig+0x434>)
 8008b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8e:	095b      	lsrs	r3, r3, #5
 8008b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b94:	441c      	add	r4, r3
 8008b96:	f7fd f8f1 	bl	8005d7c <HAL_RCC_GetPCLK1Freq>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	009a      	lsls	r2, r3, #2
 8008ba4:	441a      	add	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	fbb2 f5f3 	udiv	r5, r2, r3
 8008bb0:	f7fd f8e4 	bl	8005d7c <HAL_RCC_GetPCLK1Freq>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	009a      	lsls	r2, r3, #2
 8008bbe:	441a      	add	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bca:	4a0c      	ldr	r2, [pc, #48]	; (8008bfc <UART_SetConfig+0x434>)
 8008bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd0:	095b      	lsrs	r3, r3, #5
 8008bd2:	2264      	movs	r2, #100	; 0x64
 8008bd4:	fb02 f303 	mul.w	r3, r2, r3
 8008bd8:	1aeb      	subs	r3, r5, r3
 8008bda:	011b      	lsls	r3, r3, #4
 8008bdc:	3332      	adds	r3, #50	; 0x32
 8008bde:	4a07      	ldr	r2, [pc, #28]	; (8008bfc <UART_SetConfig+0x434>)
 8008be0:	fba2 2303 	umull	r2, r3, r2, r3
 8008be4:	095b      	lsrs	r3, r3, #5
 8008be6:	f003 020f 	and.w	r2, r3, #15
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4422      	add	r2, r4
 8008bf0:	609a      	str	r2, [r3, #8]
}
 8008bf2:	e7ff      	b.n	8008bf4 <UART_SetConfig+0x42c>
 8008bf4:	bf00      	nop
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8008bfc:	51eb851f 	.word	0x51eb851f

08008c00 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if(hwwdg == NULL)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e016      	b.n	8008c40 <HAL_WWDG_Init+0x40>
  assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));

  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f001 fc3c 	bl	800a490 <HAL_WWDG_MspInit>

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c24:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	691a      	ldr	r2, [r3, #16]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	ea42 0103 	orr.w	r1, r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	689a      	ldr	r2, [r3, #8]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008c48:	b084      	sub	sp, #16
 8008c4a:	b480      	push	{r7}
 8008c4c:	b085      	sub	sp, #20
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	f107 001c 	add.w	r0, r7, #28
 8008c56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008c5e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008c60:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008c62:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008c66:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008c6a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008c6e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008c72:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008c82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	431a      	orrs	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3714      	adds	r7, #20
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	b004      	add	sp, #16
 8008c9c:	4770      	bx	lr

08008c9e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b083      	sub	sp, #12
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008cda:	b480      	push	{r7}
 8008cdc:	b083      	sub	sp, #12
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2203      	movs	r2, #3
 8008ce6:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	370c      	adds	r7, #12
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b083      	sub	sp, #12
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0303 	and.w	r3, r3, #3
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b085      	sub	sp, #20
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d30:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008d36:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008d3c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008d4c:	f023 030f 	bic.w	r3, r3, #15
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	431a      	orrs	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3714      	adds	r7, #20
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008d66:	b480      	push	{r7}
 8008d68:	b083      	sub	sp, #12
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	b2db      	uxtb	r3, r3
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	3314      	adds	r3, #20
 8008d92:	461a      	mov	r2, r3
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	4413      	add	r3, r2
 8008d98:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
}  
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008daa:	b480      	push	{r7}
 8008dac:	b085      	sub	sp, #20
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008db4:	2300      	movs	r3, #0
 8008db6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008dd0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008dd6:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008ddc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008dde:	68fa      	ldr	r2, [r7, #12]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	431a      	orrs	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008df4:	2300      	movs	r3, #0

}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b088      	sub	sp, #32
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008e14:	2310      	movs	r3, #16
 8008e16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e18:	2340      	movs	r3, #64	; 0x40
 8008e1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e24:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e26:	f107 0308 	add.w	r3, r7, #8
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7ff ff70 	bl	8008d12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008e32:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008e36:	2110      	movs	r1, #16
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fa63 	bl	8009304 <SDMMC_GetCmdResp1>
 8008e3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e40:	69fb      	ldr	r3, [r7, #28]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3720      	adds	r7, #32
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b088      	sub	sp, #32
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008e54:	2300      	movs	r3, #0
 8008e56:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008e5c:	2311      	movs	r3, #17
 8008e5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e60:	2340      	movs	r3, #64	; 0x40
 8008e62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e64:	2300      	movs	r3, #0
 8008e66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e6c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e6e:	f107 0308 	add.w	r3, r7, #8
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f7ff ff4c 	bl	8008d12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008e7a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008e7e:	2111      	movs	r1, #17
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fa3f 	bl	8009304 <SDMMC_GetCmdResp1>
 8008e86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e88:	69fb      	ldr	r3, [r7, #28]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3720      	adds	r7, #32
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b088      	sub	sp, #32
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008ea4:	2312      	movs	r3, #18
 8008ea6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ea8:	2340      	movs	r3, #64	; 0x40
 8008eaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008eac:	2300      	movs	r3, #0
 8008eae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eb4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008eb6:	f107 0308 	add.w	r3, r7, #8
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7ff ff28 	bl	8008d12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008ec2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008ec6:	2112      	movs	r1, #18
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fa1b 	bl	8009304 <SDMMC_GetCmdResp1>
 8008ece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ed0:	69fb      	ldr	r3, [r7, #28]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3720      	adds	r7, #32
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b088      	sub	sp, #32
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008eec:	2318      	movs	r3, #24
 8008eee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ef0:	2340      	movs	r3, #64	; 0x40
 8008ef2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008efc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008efe:	f107 0308 	add.w	r3, r7, #8
 8008f02:	4619      	mov	r1, r3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f7ff ff04 	bl	8008d12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008f0a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008f0e:	2118      	movs	r1, #24
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 f9f7 	bl	8009304 <SDMMC_GetCmdResp1>
 8008f16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f18:	69fb      	ldr	r3, [r7, #28]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3720      	adds	r7, #32
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b088      	sub	sp, #32
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008f34:	2319      	movs	r3, #25
 8008f36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f38:	2340      	movs	r3, #64	; 0x40
 8008f3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f44:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f46:	f107 0308 	add.w	r3, r7, #8
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7ff fee0 	bl	8008d12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008f52:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008f56:	2119      	movs	r1, #25
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 f9d3 	bl	8009304 <SDMMC_GetCmdResp1>
 8008f5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f60:	69fb      	ldr	r3, [r7, #28]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3720      	adds	r7, #32
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
	...

08008f6c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008f74:	2300      	movs	r3, #0
 8008f76:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008f7c:	230c      	movs	r3, #12
 8008f7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f80:	2340      	movs	r3, #64	; 0x40
 8008f82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f84:	2300      	movs	r3, #0
 8008f86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f8c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f8e:	f107 0308 	add.w	r3, r7, #8
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7ff febc 	bl	8008d12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8008f9a:	4a05      	ldr	r2, [pc, #20]	; (8008fb0 <SDMMC_CmdStopTransfer+0x44>)
 8008f9c:	210c      	movs	r1, #12
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f9b0 	bl	8009304 <SDMMC_GetCmdResp1>
 8008fa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fa6:	69fb      	ldr	r3, [r7, #28]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3720      	adds	r7, #32
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	05f5e100 	.word	0x05f5e100

08008fb4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b08a      	sub	sp, #40	; 0x28
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008fc8:	2307      	movs	r3, #7
 8008fca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fcc:	2340      	movs	r3, #64	; 0x40
 8008fce:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fd8:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fda:	f107 0310 	add.w	r3, r7, #16
 8008fde:	4619      	mov	r1, r3
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f7ff fe96 	bl	8008d12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008fe6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008fea:	2107      	movs	r1, #7
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f000 f989 	bl	8009304 <SDMMC_GetCmdResp1>
 8008ff2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3728      	adds	r7, #40	; 0x28
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b088      	sub	sp, #32
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009006:	2300      	movs	r3, #0
 8009008:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800900a:	2300      	movs	r3, #0
 800900c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800900e:	2300      	movs	r3, #0
 8009010:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009012:	2300      	movs	r3, #0
 8009014:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009016:	2300      	movs	r3, #0
 8009018:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800901a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800901e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009020:	f107 0308 	add.w	r3, r7, #8
 8009024:	4619      	mov	r1, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7ff fe73 	bl	8008d12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f93f 	bl	80092b0 <SDMMC_GetCmdError>
 8009032:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009034:	69fb      	ldr	r3, [r7, #28]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3720      	adds	r7, #32
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b088      	sub	sp, #32
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009046:	2300      	movs	r3, #0
 8009048:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800904a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800904e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009050:	2308      	movs	r3, #8
 8009052:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009054:	2340      	movs	r3, #64	; 0x40
 8009056:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009058:	2300      	movs	r3, #0
 800905a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800905c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009060:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009062:	f107 0308 	add.w	r3, r7, #8
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f7ff fe52 	bl	8008d12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fb10 	bl	8009694 <SDMMC_GetCmdResp7>
 8009074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009076:	69fb      	ldr	r3, [r7, #28]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3720      	adds	r7, #32
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b088      	sub	sp, #32
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800908a:	2300      	movs	r3, #0
 800908c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009092:	2337      	movs	r3, #55	; 0x37
 8009094:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009096:	2340      	movs	r3, #64	; 0x40
 8009098:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800909a:	2300      	movs	r3, #0
 800909c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800909e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090a2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090a4:	f107 0308 	add.w	r3, r7, #8
 80090a8:	4619      	mov	r1, r3
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f7ff fe31 	bl	8008d12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80090b0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80090b4:	2137      	movs	r1, #55	; 0x37
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f924 	bl	8009304 <SDMMC_GetCmdResp1>
 80090bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090be:	69fb      	ldr	r3, [r7, #28]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3720      	adds	r7, #32
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b088      	sub	sp, #32
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80090d2:	2300      	movs	r3, #0
 80090d4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80090e2:	2329      	movs	r3, #41	; 0x29
 80090e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090e6:	2340      	movs	r3, #64	; 0x40
 80090e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090ea:	2300      	movs	r3, #0
 80090ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090f2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090f4:	f107 0308 	add.w	r3, r7, #8
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff fe09 	bl	8008d12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fa25 	bl	8009550 <SDMMC_GetCmdResp3>
 8009106:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009108:	69fb      	ldr	r3, [r7, #28]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3720      	adds	r7, #32
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b088      	sub	sp, #32
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
 800911a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800911c:	2300      	movs	r3, #0
 800911e:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009124:	2306      	movs	r3, #6
 8009126:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009128:	2340      	movs	r3, #64	; 0x40
 800912a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800912c:	2300      	movs	r3, #0
 800912e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009134:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009136:	f107 0308 	add.w	r3, r7, #8
 800913a:	4619      	mov	r1, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f7ff fde8 	bl	8008d12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009142:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009146:	2106      	movs	r1, #6
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f8db 	bl	8009304 <SDMMC_GetCmdResp1>
 800914e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009150:	69fb      	ldr	r3, [r7, #28]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3720      	adds	r7, #32
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b088      	sub	sp, #32
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009162:	2300      	movs	r3, #0
 8009164:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009166:	2300      	movs	r3, #0
 8009168:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800916a:	2333      	movs	r3, #51	; 0x33
 800916c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800916e:	2340      	movs	r3, #64	; 0x40
 8009170:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009172:	2300      	movs	r3, #0
 8009174:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800917a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800917c:	f107 0308 	add.w	r3, r7, #8
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff fdc5 	bl	8008d12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009188:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800918c:	2133      	movs	r1, #51	; 0x33
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f8b8 	bl	8009304 <SDMMC_GetCmdResp1>
 8009194:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009196:	69fb      	ldr	r3, [r7, #28]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3720      	adds	r7, #32
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b088      	sub	sp, #32
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80091a8:	2300      	movs	r3, #0
 80091aa:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80091ac:	2300      	movs	r3, #0
 80091ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80091b0:	2302      	movs	r3, #2
 80091b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80091b4:	23c0      	movs	r3, #192	; 0xc0
 80091b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091b8:	2300      	movs	r3, #0
 80091ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091c0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091c2:	f107 0308 	add.w	r3, r7, #8
 80091c6:	4619      	mov	r1, r3
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7ff fda2 	bl	8008d12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f97e 	bl	80094d0 <SDMMC_GetCmdResp2>
 80091d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091d6:	69fb      	ldr	r3, [r7, #28]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3720      	adds	r7, #32
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b088      	sub	sp, #32
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80091ea:	2300      	movs	r3, #0
 80091ec:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80091f2:	2309      	movs	r3, #9
 80091f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80091f6:	23c0      	movs	r3, #192	; 0xc0
 80091f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091fa:	2300      	movs	r3, #0
 80091fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009202:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009204:	f107 0308 	add.w	r3, r7, #8
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7ff fd81 	bl	8008d12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f95d 	bl	80094d0 <SDMMC_GetCmdResp2>
 8009216:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009218:	69fb      	ldr	r3, [r7, #28]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3720      	adds	r7, #32
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b088      	sub	sp, #32
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800922c:	2300      	movs	r3, #0
 800922e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009230:	2300      	movs	r3, #0
 8009232:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009234:	2303      	movs	r3, #3
 8009236:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009238:	2340      	movs	r3, #64	; 0x40
 800923a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800923c:	2300      	movs	r3, #0
 800923e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009244:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009246:	f107 0308 	add.w	r3, r7, #8
 800924a:	4619      	mov	r1, r3
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7ff fd60 	bl	8008d12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	2103      	movs	r1, #3
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f9ae 	bl	80095b8 <SDMMC_GetCmdResp6>
 800925c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800925e:	69fb      	ldr	r3, [r7, #28]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3720      	adds	r7, #32
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b088      	sub	sp, #32
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009272:	2300      	movs	r3, #0
 8009274:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800927a:	230d      	movs	r3, #13
 800927c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800927e:	2340      	movs	r3, #64	; 0x40
 8009280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009282:	2300      	movs	r3, #0
 8009284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800928a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800928c:	f107 0308 	add.w	r3, r7, #8
 8009290:	4619      	mov	r1, r3
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7ff fd3d 	bl	8008d12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009298:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800929c:	210d      	movs	r1, #13
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f830 	bl	8009304 <SDMMC_GetCmdResp1>
 80092a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092a6:	69fb      	ldr	r3, [r7, #28]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3720      	adds	r7, #32
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80092b0:	b490      	push	{r4, r7}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80092b8:	4b10      	ldr	r3, [pc, #64]	; (80092fc <SDMMC_GetCmdError+0x4c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a10      	ldr	r2, [pc, #64]	; (8009300 <SDMMC_GetCmdError+0x50>)
 80092be:	fba2 2303 	umull	r2, r3, r2, r3
 80092c2:	0a5b      	lsrs	r3, r3, #9
 80092c4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80092c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80092cc:	4623      	mov	r3, r4
 80092ce:	1e5c      	subs	r4, r3, #1
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d102      	bne.n	80092da <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092d8:	e00a      	b.n	80092f0 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d0f2      	beq.n	80092cc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80092ec:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bc90      	pop	{r4, r7}
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	20000014 	.word	0x20000014
 8009300:	10624dd3 	.word	0x10624dd3

08009304 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009304:	b590      	push	{r4, r7, lr}
 8009306:	b087      	sub	sp, #28
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	460b      	mov	r3, r1
 800930e:	607a      	str	r2, [r7, #4]
 8009310:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009312:	4b6c      	ldr	r3, [pc, #432]	; (80094c4 <SDMMC_GetCmdResp1+0x1c0>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a6c      	ldr	r2, [pc, #432]	; (80094c8 <SDMMC_GetCmdResp1+0x1c4>)
 8009318:	fba2 2303 	umull	r2, r3, r2, r3
 800931c:	0a5b      	lsrs	r3, r3, #9
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009324:	4623      	mov	r3, r4
 8009326:	1e5c      	subs	r4, r3, #1
 8009328:	2b00      	cmp	r3, #0
 800932a:	d102      	bne.n	8009332 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800932c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009330:	e0c3      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009336:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800933a:	2b00      	cmp	r3, #0
 800933c:	d0f2      	beq.n	8009324 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009342:	f003 0304 	and.w	r3, r3, #4
 8009346:	2b00      	cmp	r3, #0
 8009348:	d004      	beq.n	8009354 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2204      	movs	r2, #4
 800934e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009350:	2304      	movs	r3, #4
 8009352:	e0b2      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009358:	f003 0301 	and.w	r3, r3, #1
 800935c:	2b00      	cmp	r3, #0
 800935e:	d004      	beq.n	800936a <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2201      	movs	r2, #1
 8009364:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009366:	2301      	movs	r3, #1
 8009368:	e0a7      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f7ff fcfb 	bl	8008d66 <SDIO_GetCommandResponse>
 8009370:	4603      	mov	r3, r0
 8009372:	461a      	mov	r2, r3
 8009374:	7afb      	ldrb	r3, [r7, #11]
 8009376:	4293      	cmp	r3, r2
 8009378:	d001      	beq.n	800937e <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800937a:	2301      	movs	r3, #1
 800937c:	e09d      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009384:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009386:	2100      	movs	r1, #0
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f7ff fcf9 	bl	8008d80 <SDIO_GetResponse>
 800938e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	4b4e      	ldr	r3, [pc, #312]	; (80094cc <SDMMC_GetCmdResp1+0x1c8>)
 8009394:	4013      	ands	r3, r2
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800939a:	2300      	movs	r3, #0
 800939c:	e08d      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	da02      	bge.n	80093aa <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80093a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093a8:	e087      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80093b4:	2340      	movs	r3, #64	; 0x40
 80093b6:	e080      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d001      	beq.n	80093c6 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80093c2:	2380      	movs	r3, #128	; 0x80
 80093c4:	e079      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d002      	beq.n	80093d6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80093d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093d4:	e071      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d002      	beq.n	80093e6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80093e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093e4:	e069      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80093f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093f4:	e061      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009400:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009404:	e059      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009414:	e051      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800941c:	2b00      	cmp	r3, #0
 800941e:	d002      	beq.n	8009426 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009420:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009424:	e049      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009430:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009434:	e041      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d002      	beq.n	8009446 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8009440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009444:	e039      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800944c:	2b00      	cmp	r3, #0
 800944e:	d002      	beq.n	8009456 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009450:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009454:	e031      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800945c:	2b00      	cmp	r3, #0
 800945e:	d002      	beq.n	8009466 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009460:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009464:	e029      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d002      	beq.n	8009476 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009470:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009474:	e021      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d002      	beq.n	8009486 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009480:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009484:	e019      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d002      	beq.n	8009496 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009490:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009494:	e011      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80094a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80094a4:	e009      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	f003 0308 	and.w	r3, r3, #8
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d002      	beq.n	80094b6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80094b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80094b4:	e001      	b.n	80094ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80094b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	371c      	adds	r7, #28
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd90      	pop	{r4, r7, pc}
 80094c2:	bf00      	nop
 80094c4:	20000014 	.word	0x20000014
 80094c8:	10624dd3 	.word	0x10624dd3
 80094cc:	fdffe008 	.word	0xfdffe008

080094d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80094d0:	b490      	push	{r4, r7}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094d8:	4b1b      	ldr	r3, [pc, #108]	; (8009548 <SDMMC_GetCmdResp2+0x78>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a1b      	ldr	r2, [pc, #108]	; (800954c <SDMMC_GetCmdResp2+0x7c>)
 80094de:	fba2 2303 	umull	r2, r3, r2, r3
 80094e2:	0a5b      	lsrs	r3, r3, #9
 80094e4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80094e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80094ec:	4623      	mov	r3, r4
 80094ee:	1e5c      	subs	r4, r3, #1
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d102      	bne.n	80094fa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094f8:	e020      	b.n	800953c <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009502:	2b00      	cmp	r3, #0
 8009504:	d0f2      	beq.n	80094ec <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800950a:	f003 0304 	and.w	r3, r3, #4
 800950e:	2b00      	cmp	r3, #0
 8009510:	d004      	beq.n	800951c <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2204      	movs	r2, #4
 8009516:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009518:	2304      	movs	r3, #4
 800951a:	e00f      	b.n	800953c <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009520:	f003 0301 	and.w	r3, r3, #1
 8009524:	2b00      	cmp	r3, #0
 8009526:	d004      	beq.n	8009532 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800952e:	2301      	movs	r3, #1
 8009530:	e004      	b.n	800953c <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009538:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bc90      	pop	{r4, r7}
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	20000014 	.word	0x20000014
 800954c:	10624dd3 	.word	0x10624dd3

08009550 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009550:	b490      	push	{r4, r7}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009558:	4b15      	ldr	r3, [pc, #84]	; (80095b0 <SDMMC_GetCmdResp3+0x60>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a15      	ldr	r2, [pc, #84]	; (80095b4 <SDMMC_GetCmdResp3+0x64>)
 800955e:	fba2 2303 	umull	r2, r3, r2, r3
 8009562:	0a5b      	lsrs	r3, r3, #9
 8009564:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009568:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800956c:	4623      	mov	r3, r4
 800956e:	1e5c      	subs	r4, r3, #1
 8009570:	2b00      	cmp	r3, #0
 8009572:	d102      	bne.n	800957a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009574:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009578:	e015      	b.n	80095a6 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800957e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009582:	2b00      	cmp	r3, #0
 8009584:	d0f2      	beq.n	800956c <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800958a:	f003 0304 	and.w	r3, r3, #4
 800958e:	2b00      	cmp	r3, #0
 8009590:	d004      	beq.n	800959c <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2204      	movs	r2, #4
 8009596:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009598:	2304      	movs	r3, #4
 800959a:	e004      	b.n	80095a6 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80095a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bc90      	pop	{r4, r7}
 80095ae:	4770      	bx	lr
 80095b0:	20000014 	.word	0x20000014
 80095b4:	10624dd3 	.word	0x10624dd3

080095b8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80095b8:	b590      	push	{r4, r7, lr}
 80095ba:	b087      	sub	sp, #28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	460b      	mov	r3, r1
 80095c2:	607a      	str	r2, [r7, #4]
 80095c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095c6:	4b31      	ldr	r3, [pc, #196]	; (800968c <SDMMC_GetCmdResp6+0xd4>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a31      	ldr	r2, [pc, #196]	; (8009690 <SDMMC_GetCmdResp6+0xd8>)
 80095cc:	fba2 2303 	umull	r2, r3, r2, r3
 80095d0:	0a5b      	lsrs	r3, r3, #9
 80095d2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80095d6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80095da:	4623      	mov	r3, r4
 80095dc:	1e5c      	subs	r4, r3, #1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d102      	bne.n	80095e8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095e6:	e04c      	b.n	8009682 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ec:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d0f2      	beq.n	80095da <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f8:	f003 0304 	and.w	r3, r3, #4
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d004      	beq.n	800960a <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2204      	movs	r2, #4
 8009604:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009606:	2304      	movs	r3, #4
 8009608:	e03b      	b.n	8009682 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d004      	beq.n	8009620 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2201      	movs	r2, #1
 800961a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800961c:	2301      	movs	r3, #1
 800961e:	e030      	b.n	8009682 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f7ff fba0 	bl	8008d66 <SDIO_GetCommandResponse>
 8009626:	4603      	mov	r3, r0
 8009628:	461a      	mov	r2, r3
 800962a:	7afb      	ldrb	r3, [r7, #11]
 800962c:	4293      	cmp	r3, r2
 800962e:	d001      	beq.n	8009634 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009630:	2301      	movs	r3, #1
 8009632:	e026      	b.n	8009682 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800963a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800963c:	2100      	movs	r1, #0
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f7ff fb9e 	bl	8008d80 <SDIO_GetResponse>
 8009644:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d106      	bne.n	800965e <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	0c1b      	lsrs	r3, r3, #16
 8009654:	b29a      	uxth	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800965a:	2300      	movs	r3, #0
 800965c:	e011      	b.n	8009682 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009664:	2b00      	cmp	r3, #0
 8009666:	d002      	beq.n	800966e <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800966c:	e009      	b.n	8009682 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800967c:	e001      	b.n	8009682 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800967e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009682:	4618      	mov	r0, r3
 8009684:	371c      	adds	r7, #28
 8009686:	46bd      	mov	sp, r7
 8009688:	bd90      	pop	{r4, r7, pc}
 800968a:	bf00      	nop
 800968c:	20000014 	.word	0x20000014
 8009690:	10624dd3 	.word	0x10624dd3

08009694 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009694:	b490      	push	{r4, r7}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800969c:	4b18      	ldr	r3, [pc, #96]	; (8009700 <SDMMC_GetCmdResp7+0x6c>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a18      	ldr	r2, [pc, #96]	; (8009704 <SDMMC_GetCmdResp7+0x70>)
 80096a2:	fba2 2303 	umull	r2, r3, r2, r3
 80096a6:	0a5b      	lsrs	r3, r3, #9
 80096a8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80096ac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80096b0:	4623      	mov	r3, r4
 80096b2:	1e5c      	subs	r4, r3, #1
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d102      	bne.n	80096be <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096bc:	e01a      	b.n	80096f4 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0f2      	beq.n	80096b0 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ce:	f003 0304 	and.w	r3, r3, #4
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d004      	beq.n	80096e0 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2240      	movs	r2, #64	; 0x40
 80096da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096dc:	2304      	movs	r3, #4
 80096de:	e009      	b.n	80096f4 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d002      	beq.n	80096f2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2240      	movs	r2, #64	; 0x40
 80096f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80096f2:	2300      	movs	r3, #0
  
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bc90      	pop	{r4, r7}
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	20000014 	.word	0x20000014
 8009704:	10624dd3 	.word	0x10624dd3

08009708 <_write>:
//
//	return _n;
//}

int _write(int file, char *data, int len)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b086      	sub	sp, #24
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d00a      	beq.n	8009730 <_write+0x28>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2b02      	cmp	r3, #2
 800971e:	d007      	beq.n	8009730 <_write+0x28>
   {
      errno = EBADF;
 8009720:	f003 fe66 	bl	800d3f0 <__errno>
 8009724:	4603      	mov	r3, r0
 8009726:	2209      	movs	r2, #9
 8009728:	601a      	str	r2, [r3, #0]
      return -1;
 800972a:	f04f 33ff 	mov.w	r3, #4294967295
 800972e:	e010      	b.n	8009752 <_write+0x4a>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit((UART_HandleTypeDef *)COMM, (uint8_t*)data, len, 1000);
 8009730:	4b0a      	ldr	r3, [pc, #40]	; (800975c <_write+0x54>)
 8009732:	6818      	ldr	r0, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	b29a      	uxth	r2, r3
 8009738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800973c:	68b9      	ldr	r1, [r7, #8]
 800973e:	f7fe fc20 	bl	8007f82 <HAL_UART_Transmit>
 8009742:	4603      	mov	r3, r0
 8009744:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d101      	bne.n	8009750 <_write+0x48>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	e000      	b.n	8009752 <_write+0x4a>
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3718      	adds	r7, #24
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	20000004 	.word	0x20000004

08009760 <SystemClock_Config>:
*/

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b0a0      	sub	sp, #128	; 0x80
 8009764:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009766:	2300      	movs	r3, #0
 8009768:	60bb      	str	r3, [r7, #8]
 800976a:	4b3b      	ldr	r3, [pc, #236]	; (8009858 <SystemClock_Config+0xf8>)
 800976c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976e:	4a3a      	ldr	r2, [pc, #232]	; (8009858 <SystemClock_Config+0xf8>)
 8009770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009774:	6413      	str	r3, [r2, #64]	; 0x40
 8009776:	4b38      	ldr	r3, [pc, #224]	; (8009858 <SystemClock_Config+0xf8>)
 8009778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800977e:	60bb      	str	r3, [r7, #8]
 8009780:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8009782:	2300      	movs	r3, #0
 8009784:	607b      	str	r3, [r7, #4]
 8009786:	4b35      	ldr	r3, [pc, #212]	; (800985c <SystemClock_Config+0xfc>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800978e:	4a33      	ldr	r2, [pc, #204]	; (800985c <SystemClock_Config+0xfc>)
 8009790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009794:	6013      	str	r3, [r2, #0]
 8009796:	4b31      	ldr	r3, [pc, #196]	; (800985c <SystemClock_Config+0xfc>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800979e:	607b      	str	r3, [r7, #4]
 80097a0:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80097a2:	2305      	movs	r3, #5
 80097a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80097a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097aa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80097ac:	2301      	movs	r3, #1
 80097ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80097b0:	2302      	movs	r3, #2
 80097b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80097b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80097b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80097ba:	2310      	movs	r3, #16
 80097bc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 192;
 80097be:	23c0      	movs	r3, #192	; 0xc0
 80097c0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80097c2:	2302      	movs	r3, #2
 80097c4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80097c6:	2304      	movs	r3, #4
 80097c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80097ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fb fede 	bl	8005590 <HAL_RCC_OscConfig>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80097da:	f7fa fa75 	bl	8003cc8 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80097de:	230f      	movs	r3, #15
 80097e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80097e2:	2302      	movs	r3, #2
 80097e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80097e6:	2300      	movs	r3, #0
 80097e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80097ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80097ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80097f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097f4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80097f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80097fa:	2103      	movs	r1, #3
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fc f91f 	bl	8005a40 <HAL_RCC_ClockConfig>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8009808:	f7fa fa5e 	bl	8003cc8 <Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800980c:	2320      	movs	r3, #32
 800980e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009814:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009816:	f107 030c 	add.w	r3, r7, #12
 800981a:	4618      	mov	r0, r3
 800981c:	f7fc fb24 	bl	8005e68 <HAL_RCCEx_PeriphCLKConfig>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8009826:	f7fa fa4f 	bl	8003cc8 <Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800982a:	f7fc fa9b 	bl	8005d64 <HAL_RCC_GetHCLKFreq>
 800982e:	4603      	mov	r3, r0
 8009830:	4a0b      	ldr	r2, [pc, #44]	; (8009860 <SystemClock_Config+0x100>)
 8009832:	fba2 2303 	umull	r2, r3, r2, r3
 8009836:	099b      	lsrs	r3, r3, #6
 8009838:	4618      	mov	r0, r3
 800983a:	f7fa fbf2 	bl	8004022 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800983e:	2004      	movs	r0, #4
 8009840:	f7fa fbfc 	bl	800403c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8009844:	2200      	movs	r2, #0
 8009846:	210f      	movs	r1, #15
 8009848:	f04f 30ff 	mov.w	r0, #4294967295
 800984c:	f7fa fbbf 	bl	8003fce <HAL_NVIC_SetPriority>
}
 8009850:	bf00      	nop
 8009852:	3780      	adds	r7, #128	; 0x80
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	40023800 	.word	0x40023800
 800985c:	40007000 	.word	0x40007000
 8009860:	10624dd3 	.word	0x10624dd3

08009864 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b08e      	sub	sp, #56	; 0x38
 8009868:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800986a:	2300      	movs	r3, #0
 800986c:	623b      	str	r3, [r7, #32]
 800986e:	4bb2      	ldr	r3, [pc, #712]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 8009870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009872:	4ab1      	ldr	r2, [pc, #708]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 8009874:	f043 0310 	orr.w	r3, r3, #16
 8009878:	6313      	str	r3, [r2, #48]	; 0x30
 800987a:	4baf      	ldr	r3, [pc, #700]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 800987c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800987e:	f003 0310 	and.w	r3, r3, #16
 8009882:	623b      	str	r3, [r7, #32]
 8009884:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8009886:	2300      	movs	r3, #0
 8009888:	61fb      	str	r3, [r7, #28]
 800988a:	4bab      	ldr	r3, [pc, #684]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 800988c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988e:	4aaa      	ldr	r2, [pc, #680]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 8009890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009894:	6313      	str	r3, [r2, #48]	; 0x30
 8009896:	4ba8      	ldr	r3, [pc, #672]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 8009898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800989e:	61fb      	str	r3, [r7, #28]
 80098a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80098a2:	2300      	movs	r3, #0
 80098a4:	61bb      	str	r3, [r7, #24]
 80098a6:	4ba4      	ldr	r3, [pc, #656]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 80098a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098aa:	4aa3      	ldr	r2, [pc, #652]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 80098ac:	f043 0304 	orr.w	r3, r3, #4
 80098b0:	6313      	str	r3, [r2, #48]	; 0x30
 80098b2:	4ba1      	ldr	r3, [pc, #644]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 80098b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b6:	f003 0304 	and.w	r3, r3, #4
 80098ba:	61bb      	str	r3, [r7, #24]
 80098bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80098be:	2300      	movs	r3, #0
 80098c0:	617b      	str	r3, [r7, #20]
 80098c2:	4b9d      	ldr	r3, [pc, #628]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 80098c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c6:	4a9c      	ldr	r2, [pc, #624]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 80098c8:	f043 0320 	orr.w	r3, r3, #32
 80098cc:	6313      	str	r3, [r2, #48]	; 0x30
 80098ce:	4b9a      	ldr	r3, [pc, #616]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 80098d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d2:	f003 0320 	and.w	r3, r3, #32
 80098d6:	617b      	str	r3, [r7, #20]
 80098d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80098da:	2300      	movs	r3, #0
 80098dc:	613b      	str	r3, [r7, #16]
 80098de:	4b96      	ldr	r3, [pc, #600]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 80098e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e2:	4a95      	ldr	r2, [pc, #596]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 80098e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098e8:	6313      	str	r3, [r2, #48]	; 0x30
 80098ea:	4b93      	ldr	r3, [pc, #588]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 80098ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098f2:	613b      	str	r3, [r7, #16]
 80098f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80098f6:	2300      	movs	r3, #0
 80098f8:	60fb      	str	r3, [r7, #12]
 80098fa:	4b8f      	ldr	r3, [pc, #572]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 80098fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fe:	4a8e      	ldr	r2, [pc, #568]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 8009900:	f043 0301 	orr.w	r3, r3, #1
 8009904:	6313      	str	r3, [r2, #48]	; 0x30
 8009906:	4b8c      	ldr	r3, [pc, #560]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 8009908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800990a:	f003 0301 	and.w	r3, r3, #1
 800990e:	60fb      	str	r3, [r7, #12]
 8009910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009912:	2300      	movs	r3, #0
 8009914:	60bb      	str	r3, [r7, #8]
 8009916:	4b88      	ldr	r3, [pc, #544]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 8009918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800991a:	4a87      	ldr	r2, [pc, #540]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 800991c:	f043 0302 	orr.w	r3, r3, #2
 8009920:	6313      	str	r3, [r2, #48]	; 0x30
 8009922:	4b85      	ldr	r3, [pc, #532]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 8009924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009926:	f003 0302 	and.w	r3, r3, #2
 800992a:	60bb      	str	r3, [r7, #8]
 800992c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800992e:	2300      	movs	r3, #0
 8009930:	607b      	str	r3, [r7, #4]
 8009932:	4b81      	ldr	r3, [pc, #516]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 8009934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009936:	4a80      	ldr	r2, [pc, #512]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 8009938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800993c:	6313      	str	r3, [r2, #48]	; 0x30
 800993e:	4b7e      	ldr	r3, [pc, #504]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 8009940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009946:	607b      	str	r3, [r7, #4]
 8009948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800994a:	2300      	movs	r3, #0
 800994c:	603b      	str	r3, [r7, #0]
 800994e:	4b7a      	ldr	r3, [pc, #488]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 8009950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009952:	4a79      	ldr	r2, [pc, #484]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 8009954:	f043 0308 	orr.w	r3, r3, #8
 8009958:	6313      	str	r3, [r2, #48]	; 0x30
 800995a:	4b77      	ldr	r3, [pc, #476]	; (8009b38 <MX_GPIO_Init+0x2d4>)
 800995c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800995e:	f003 0308 	and.w	r3, r3, #8
 8009962:	603b      	str	r3, [r7, #0]
 8009964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PAN4_VGY_GPIO_Port, PAN4_VGY_Pin, GPIO_PIN_RESET);
 8009966:	2200      	movs	r2, #0
 8009968:	2104      	movs	r1, #4
 800996a:	4874      	ldr	r0, [pc, #464]	; (8009b3c <MX_GPIO_Init+0x2d8>)
 800996c:	f7fa fede 	bl	800472c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PAN5_CS2_Pin|LED_G_Pin|LED_Y_Pin, GPIO_PIN_SET);
 8009970:	2201      	movs	r2, #1
 8009972:	f242 0130 	movw	r1, #8240	; 0x2030
 8009976:	4872      	ldr	r0, [pc, #456]	; (8009b40 <MX_GPIO_Init+0x2dc>)
 8009978:	f7fa fed8 	bl	800472c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, PAN5_CS1_Pin|PAN6_CS2_Pin|PAN6_CS1_Pin|PAN1_CS2_Pin
 800997c:	2201      	movs	r2, #1
 800997e:	f640 61ff 	movw	r1, #3839	; 0xeff
 8009982:	4870      	ldr	r0, [pc, #448]	; (8009b44 <MX_GPIO_Init+0x2e0>)
 8009984:	f7fa fed2 	bl	800472c <HAL_GPIO_WritePin>
                          |PAN1_CS1_Pin|PAN2_CS2_Pin|PAN2_CS1_Pin|PAN3_CS2_Pin
                          |PAN3_CS1_Pin|PAN4_CS2_Pin|PAN4_CS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SBAND_CS_GPIO_Port, SBAND_CS_Pin, GPIO_PIN_RESET);
 8009988:	2200      	movs	r2, #0
 800998a:	2140      	movs	r1, #64	; 0x40
 800998c:	486e      	ldr	r0, [pc, #440]	; (8009b48 <MX_GPIO_Init+0x2e4>)
 800998e:	f7fa fecd 	bl	800472c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PAN5_DIR1_Pin|PAN5_DIR2_Pin|PAN6_DIR1_Pin|PAN6_DIR2_Pin
 8009992:	2200      	movs	r2, #0
 8009994:	f24e 217c 	movw	r1, #57980	; 0xe27c
 8009998:	486c      	ldr	r0, [pc, #432]	; (8009b4c <MX_GPIO_Init+0x2e8>)
 800999a:	f7fa fec7 	bl	800472c <HAL_GPIO_WritePin>
  // Turn-off the second MAG sensor due lack of I2C arbitration MAG1/MAG2
  HAL_GPIO_WritePin(GPIOH, MAG1_EN_Pin|MAG2_EN_Pin, GPIO_PIN_SET);
#endif

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800999e:	2201      	movs	r2, #1
 80099a0:	2110      	movs	r1, #16
 80099a2:	486b      	ldr	r0, [pc, #428]	; (8009b50 <MX_GPIO_Init+0x2ec>)
 80099a4:	f7fa fec2 	bl	800472c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PAN5_VGY_Pin|PAN6_VGY_Pin|PAN1_VGY_Pin|PAN2_VGY_Pin
 80099a8:	2200      	movs	r2, #0
 80099aa:	21e6      	movs	r1, #230	; 0xe6
 80099ac:	4869      	ldr	r0, [pc, #420]	; (8009b54 <MX_GPIO_Init+0x2f0>)
 80099ae:	f7fa febd 	bl	800472c <HAL_GPIO_WritePin>
                          |PAN3_VGY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OBC_OUT5_Pin|PAN4_DIR1_Pin|FLASH_NCS_Pin|OBC_OUT3_Pin
 80099b2:	2200      	movs	r2, #0
 80099b4:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 80099b8:	4867      	ldr	r0, [pc, #412]	; (8009b58 <MX_GPIO_Init+0x2f4>)
 80099ba:	f7fa feb7 	bl	800472c <HAL_GPIO_WritePin>
                          |OBC_OUT2_Pin|OBC_OUT1_Pin, GPIO_PIN_RESET);

  /* Camera power supply disable by default */
  HAL_GPIO_WritePin(GPIOG, OBC_OUT1_Pin, GPIO_PIN_RESET);
 80099be:	2200      	movs	r2, #0
 80099c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80099c4:	4864      	ldr	r0, [pc, #400]	; (8009b58 <MX_GPIO_Init+0x2f4>)
 80099c6:	f7fa feb1 	bl	800472c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_EN_Pin|OBC_OUT4_Pin, GPIO_PIN_RESET);
 80099ca:	2200      	movs	r2, #0
 80099cc:	2148      	movs	r1, #72	; 0x48
 80099ce:	4863      	ldr	r0, [pc, #396]	; (8009b5c <MX_GPIO_Init+0x2f8>)
 80099d0:	f7fa feac 	bl	800472c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PAN4_VGY_Pin */
  GPIO_InitStruct.Pin = PAN4_VGY_Pin;
 80099d4:	2304      	movs	r3, #4
 80099d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80099d8:	2311      	movs	r3, #17
 80099da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099dc:	2300      	movs	r3, #0
 80099de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099e0:	2300      	movs	r3, #0
 80099e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PAN4_VGY_GPIO_Port, &GPIO_InitStruct);
 80099e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099e8:	4619      	mov	r1, r3
 80099ea:	4854      	ldr	r0, [pc, #336]	; (8009b3c <MX_GPIO_Init+0x2d8>)
 80099ec:	f7fa fcf2 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IRQ_Pin */
  GPIO_InitStruct.Pin = M2_IRQ_Pin;
 80099f0:	2340      	movs	r3, #64	; 0x40
 80099f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80099f4:	4b5a      	ldr	r3, [pc, #360]	; (8009b60 <MX_GPIO_Init+0x2fc>)
 80099f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099f8:	2300      	movs	r3, #0
 80099fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M2_IRQ_GPIO_Port, &GPIO_InitStruct);
 80099fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a00:	4619      	mov	r1, r3
 8009a02:	484e      	ldr	r0, [pc, #312]	; (8009b3c <MX_GPIO_Init+0x2d8>)
 8009a04:	f7fa fce6 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_IRQ_Pin */
  GPIO_InitStruct.Pin = M1_IRQ_Pin;
 8009a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009a0e:	4b54      	ldr	r3, [pc, #336]	; (8009b60 <MX_GPIO_Init+0x2fc>)
 8009a10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a12:	2300      	movs	r3, #0
 8009a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8009a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	4849      	ldr	r0, [pc, #292]	; (8009b44 <MX_GPIO_Init+0x2e0>)
 8009a1e:	f7fa fcd9 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_CS2_Pin LED_G_Pin LED_Y_Pin */
  GPIO_InitStruct.Pin = PAN5_CS2_Pin|LED_G_Pin|LED_Y_Pin;
 8009a22:	f242 0330 	movw	r3, #8240	; 0x2030
 8009a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a30:	2300      	movs	r3, #0
 8009a32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a38:	4619      	mov	r1, r3
 8009a3a:	4841      	ldr	r0, [pc, #260]	; (8009b40 <MX_GPIO_Init+0x2dc>)
 8009a3c:	f7fa fcca 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_CS1_Pin PAN6_CS2_Pin PAN6_CS1_Pin PAN1_CS2_Pin
                           PAN1_CS1_Pin PAN2_CS2_Pin PAN2_CS1_Pin PAN3_CS2_Pin
                           PAN3_CS1_Pin PAN4_CS2_Pin PAN4_CS1_Pin */
  GPIO_InitStruct.Pin = PAN5_CS1_Pin|PAN6_CS2_Pin|PAN6_CS1_Pin|PAN1_CS2_Pin
 8009a40:	f640 63ff 	movw	r3, #3839	; 0xeff
 8009a44:	627b      	str	r3, [r7, #36]	; 0x24
                          |PAN1_CS1_Pin|PAN2_CS2_Pin|PAN2_CS1_Pin|PAN3_CS2_Pin
                          |PAN3_CS1_Pin|PAN4_CS2_Pin|PAN4_CS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a46:	2301      	movs	r3, #1
 8009a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a56:	4619      	mov	r1, r3
 8009a58:	483a      	ldr	r0, [pc, #232]	; (8009b44 <MX_GPIO_Init+0x2e0>)
 8009a5a:	f7fa fcbb 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SBAND_CS_Pin */
  GPIO_InitStruct.Pin = SBAND_CS_Pin;
 8009a5e:	2340      	movs	r3, #64	; 0x40
 8009a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a62:	2301      	movs	r3, #1
 8009a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a66:	2300      	movs	r3, #0
 8009a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SBAND_CS_GPIO_Port, &GPIO_InitStruct);
 8009a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a72:	4619      	mov	r1, r3
 8009a74:	4834      	ldr	r0, [pc, #208]	; (8009b48 <MX_GPIO_Init+0x2e4>)
 8009a76:	f7fa fcad 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SBAND_IRQ_Pin */
  GPIO_InitStruct.Pin = SBAND_IRQ_Pin;
 8009a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009a80:	4b37      	ldr	r3, [pc, #220]	; (8009b60 <MX_GPIO_Init+0x2fc>)
 8009a82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a84:	2300      	movs	r3, #0
 8009a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SBAND_IRQ_GPIO_Port, &GPIO_InitStruct);
 8009a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	482e      	ldr	r0, [pc, #184]	; (8009b48 <MX_GPIO_Init+0x2e4>)
 8009a90:	f7fa fca0 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_DIR1_Pin PAN5_DIR2_Pin PAN6_DIR1_Pin PAN6_DIR2_Pin
                           ACC1_EN_Pin ACC2_EN_Pin MAG1_EN_Pin MAG2_EN_Pin
                           PAN4_DIR2_Pin */
  GPIO_InitStruct.Pin = PAN5_DIR1_Pin|PAN5_DIR2_Pin|PAN6_DIR1_Pin|PAN6_DIR2_Pin
 8009a94:	f24e 033c 	movw	r3, #57404	; 0xe03c
 8009a98:	627b      	str	r3, [r7, #36]	; 0x24
                          |MAG1_EN_Pin|MAG2_EN_Pin
                          |PAN4_DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009aaa:	4619      	mov	r1, r3
 8009aac:	4827      	ldr	r0, [pc, #156]	; (8009b4c <MX_GPIO_Init+0x2e8>)
 8009aae:	f7fa fc91 	bl	80043d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ACC1_EN_Pin|ACC2_EN_Pin;
 8009ab2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8009ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8009ab8:	2311      	movs	r3, #17
 8009aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009abc:	2300      	movs	r3, #0
 8009abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ac8:	4619      	mov	r1, r3
 8009aca:	4820      	ldr	r0, [pc, #128]	; (8009b4c <MX_GPIO_Init+0x2e8>)
 8009acc:	f7fa fc82 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8009ad0:	2310      	movs	r3, #16
 8009ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009adc:	2300      	movs	r3, #0
 8009ade:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8009ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	481a      	ldr	r0, [pc, #104]	; (8009b50 <MX_GPIO_Init+0x2ec>)
 8009ae8:	f7fa fc74 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_VGY_Pin PAN6_VGY_Pin PAN1_VGY_Pin PAN2_VGY_Pin
                           PAN3_VGY_Pin */
  GPIO_InitStruct.Pin = PAN5_VGY_Pin|PAN6_VGY_Pin|PAN1_VGY_Pin|PAN2_VGY_Pin
 8009aec:	23e6      	movs	r3, #230	; 0xe6
 8009aee:	627b      	str	r3, [r7, #36]	; 0x24
                          |PAN3_VGY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8009af0:	2311      	movs	r3, #17
 8009af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009af4:	2300      	movs	r3, #0
 8009af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009af8:	2300      	movs	r3, #0
 8009afa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b00:	4619      	mov	r1, r3
 8009b02:	4814      	ldr	r0, [pc, #80]	; (8009b54 <MX_GPIO_Init+0x2f0>)
 8009b04:	f7fa fc66 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OBC_OUT5_Pin PAN4_DIR1_Pin FLASH_NCS_Pin OBC_OUT3_Pin
                           OBC_OUT2_Pin OBC_OUT1_Pin */
  GPIO_InitStruct.Pin = OBC_OUT5_Pin|PAN4_DIR1_Pin|FLASH_NCS_Pin|OBC_OUT3_Pin
 8009b08:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 8009b0c:	627b      	str	r3, [r7, #36]	; 0x24
                          |OBC_OUT2_Pin|OBC_OUT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b12:	2300      	movs	r3, #0
 8009b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b16:	2300      	movs	r3, #0
 8009b18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b1e:	4619      	mov	r1, r3
 8009b20:	480d      	ldr	r0, [pc, #52]	; (8009b58 <MX_GPIO_Init+0x2f4>)
 8009b22:	f7fa fc57 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_EN_Pin OBC_OUT4_Pin */
  GPIO_InitStruct.Pin = SD_EN_Pin|OBC_OUT4_Pin;
 8009b26:	2348      	movs	r3, #72	; 0x48
 8009b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b32:	2300      	movs	r3, #0
 8009b34:	e016      	b.n	8009b64 <MX_GPIO_Init+0x300>
 8009b36:	bf00      	nop
 8009b38:	40023800 	.word	0x40023800
 8009b3c:	40021000 	.word	0x40021000
 8009b40:	40020800 	.word	0x40020800
 8009b44:	40022000 	.word	0x40022000
 8009b48:	40021400 	.word	0x40021400
 8009b4c:	40021c00 	.word	0x40021c00
 8009b50:	40020000 	.word	0x40020000
 8009b54:	40020400 	.word	0x40020400
 8009b58:	40021800 	.word	0x40021800
 8009b5c:	40020c00 	.word	0x40020c00
 8009b60:	10110000 	.word	0x10110000
 8009b64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	4809      	ldr	r0, [pc, #36]	; (8009b94 <MX_GPIO_Init+0x330>)
 8009b6e:	f7fa fc31 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 8009b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8009b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b84:	4619      	mov	r1, r3
 8009b86:	4804      	ldr	r0, [pc, #16]	; (8009b98 <MX_GPIO_Init+0x334>)
 8009b88:	f7fa fc24 	bl	80043d4 <HAL_GPIO_Init>

}
 8009b8c:	bf00      	nop
 8009b8e:	3738      	adds	r7, #56	; 0x38
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	40020c00 	.word	0x40020c00
 8009b98:	40021800 	.word	0x40021800

08009b9c <MX_I2C1_Init>:

}

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8009ba0:	4b12      	ldr	r3, [pc, #72]	; (8009bec <MX_I2C1_Init+0x50>)
 8009ba2:	4a13      	ldr	r2, [pc, #76]	; (8009bf0 <MX_I2C1_Init+0x54>)
 8009ba4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8009ba6:	4b11      	ldr	r3, [pc, #68]	; (8009bec <MX_I2C1_Init+0x50>)
 8009ba8:	4a12      	ldr	r2, [pc, #72]	; (8009bf4 <MX_I2C1_Init+0x58>)
 8009baa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009bac:	4b0f      	ldr	r3, [pc, #60]	; (8009bec <MX_I2C1_Init+0x50>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009bb2:	4b0e      	ldr	r3, [pc, #56]	; (8009bec <MX_I2C1_Init+0x50>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009bb8:	4b0c      	ldr	r3, [pc, #48]	; (8009bec <MX_I2C1_Init+0x50>)
 8009bba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009bbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009bc0:	4b0a      	ldr	r3, [pc, #40]	; (8009bec <MX_I2C1_Init+0x50>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009bc6:	4b09      	ldr	r3, [pc, #36]	; (8009bec <MX_I2C1_Init+0x50>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009bcc:	4b07      	ldr	r3, [pc, #28]	; (8009bec <MX_I2C1_Init+0x50>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009bd2:	4b06      	ldr	r3, [pc, #24]	; (8009bec <MX_I2C1_Init+0x50>)
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009bd8:	4804      	ldr	r0, [pc, #16]	; (8009bec <MX_I2C1_Init+0x50>)
 8009bda:	f7fa fdc1 	bl	8004760 <HAL_I2C_Init>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d001      	beq.n	8009be8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009be4:	f7fa f870 	bl	8003cc8 <Error_Handler>
  }

}
 8009be8:	bf00      	nop
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	200002a0 	.word	0x200002a0
 8009bf0:	40005400 	.word	0x40005400
 8009bf4:	00061a80 	.word	0x00061a80

08009bf8 <MX_SDIO_SD_Init>:

}

/* SDIO init function */
void MX_SDIO_SD_Init(void)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8009bfc:	4b0c      	ldr	r3, [pc, #48]	; (8009c30 <MX_SDIO_SD_Init+0x38>)
 8009bfe:	4a0d      	ldr	r2, [pc, #52]	; (8009c34 <MX_SDIO_SD_Init+0x3c>)
 8009c00:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8009c02:	4b0b      	ldr	r3, [pc, #44]	; (8009c30 <MX_SDIO_SD_Init+0x38>)
 8009c04:	2200      	movs	r2, #0
 8009c06:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8009c08:	4b09      	ldr	r3, [pc, #36]	; (8009c30 <MX_SDIO_SD_Init+0x38>)
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009c0e:	4b08      	ldr	r3, [pc, #32]	; (8009c30 <MX_SDIO_SD_Init+0x38>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8009c14:	4b06      	ldr	r3, [pc, #24]	; (8009c30 <MX_SDIO_SD_Init+0x38>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009c1a:	4b05      	ldr	r3, [pc, #20]	; (8009c30 <MX_SDIO_SD_Init+0x38>)
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = SDIO_TRANSFER_CLK_DIV;
 8009c20:	4b03      	ldr	r3, [pc, #12]	; (8009c30 <MX_SDIO_SD_Init+0x38>)
 8009c22:	2203      	movs	r2, #3
 8009c24:	619a      	str	r2, [r3, #24]

}
 8009c26:	bf00      	nop
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr
 8009c30:	2000039c 	.word	0x2000039c
 8009c34:	40012c00 	.word	0x40012c00

08009c38 <MX_UART4_Init>:

}

/* UART4 init function */
void MX_UART4_Init(void)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8009c3c:	4b11      	ldr	r3, [pc, #68]	; (8009c84 <MX_UART4_Init+0x4c>)
 8009c3e:	4a12      	ldr	r2, [pc, #72]	; (8009c88 <MX_UART4_Init+0x50>)
 8009c40:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8009c42:	4b10      	ldr	r3, [pc, #64]	; (8009c84 <MX_UART4_Init+0x4c>)
 8009c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009c48:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8009c4a:	4b0e      	ldr	r3, [pc, #56]	; (8009c84 <MX_UART4_Init+0x4c>)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8009c50:	4b0c      	ldr	r3, [pc, #48]	; (8009c84 <MX_UART4_Init+0x4c>)
 8009c52:	2200      	movs	r2, #0
 8009c54:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8009c56:	4b0b      	ldr	r3, [pc, #44]	; (8009c84 <MX_UART4_Init+0x4c>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8009c5c:	4b09      	ldr	r3, [pc, #36]	; (8009c84 <MX_UART4_Init+0x4c>)
 8009c5e:	220c      	movs	r2, #12
 8009c60:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009c62:	4b08      	ldr	r3, [pc, #32]	; (8009c84 <MX_UART4_Init+0x4c>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8009c68:	4b06      	ldr	r3, [pc, #24]	; (8009c84 <MX_UART4_Init+0x4c>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8009c6e:	4805      	ldr	r0, [pc, #20]	; (8009c84 <MX_UART4_Init+0x4c>)
 8009c70:	f7fe f93a 	bl	8007ee8 <HAL_UART_Init>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8009c7a:	f7fa f825 	bl	8003cc8 <Error_Handler>
  }

}
 8009c7e:	bf00      	nop
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	2000067c 	.word	0x2000067c
 8009c88:	40004c00 	.word	0x40004c00

08009c8c <MX_USART1_UART_Init>:

/* USART1 init function */
void MX_USART1_UART_Init(void)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8009c90:	4b11      	ldr	r3, [pc, #68]	; (8009cd8 <MX_USART1_UART_Init+0x4c>)
 8009c92:	4a12      	ldr	r2, [pc, #72]	; (8009cdc <MX_USART1_UART_Init+0x50>)
 8009c94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009c96:	4b10      	ldr	r3, [pc, #64]	; (8009cd8 <MX_USART1_UART_Init+0x4c>)
 8009c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009c9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009c9e:	4b0e      	ldr	r3, [pc, #56]	; (8009cd8 <MX_USART1_UART_Init+0x4c>)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009ca4:	4b0c      	ldr	r3, [pc, #48]	; (8009cd8 <MX_USART1_UART_Init+0x4c>)
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009caa:	4b0b      	ldr	r3, [pc, #44]	; (8009cd8 <MX_USART1_UART_Init+0x4c>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009cb0:	4b09      	ldr	r3, [pc, #36]	; (8009cd8 <MX_USART1_UART_Init+0x4c>)
 8009cb2:	220c      	movs	r2, #12
 8009cb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009cb6:	4b08      	ldr	r3, [pc, #32]	; (8009cd8 <MX_USART1_UART_Init+0x4c>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009cbc:	4b06      	ldr	r3, [pc, #24]	; (8009cd8 <MX_USART1_UART_Init+0x4c>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009cc2:	4805      	ldr	r0, [pc, #20]	; (8009cd8 <MX_USART1_UART_Init+0x4c>)
 8009cc4:	f7fe f910 	bl	8007ee8 <HAL_UART_Init>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d001      	beq.n	8009cd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009cce:	f7f9 fffb 	bl	8003cc8 <Error_Handler>
  }

}
 8009cd2:	bf00      	nop
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	200006bc 	.word	0x200006bc
 8009cdc:	40011000 	.word	0x40011000

08009ce0 <MX_USART6_UART_Init>:

/* USART6 init function */
void MX_USART6_UART_Init(void)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8009ce4:	4b15      	ldr	r3, [pc, #84]	; (8009d3c <MX_USART6_UART_Init+0x5c>)
 8009ce6:	4a16      	ldr	r2, [pc, #88]	; (8009d40 <MX_USART6_UART_Init+0x60>)
 8009ce8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8009cea:	4b14      	ldr	r3, [pc, #80]	; (8009d3c <MX_USART6_UART_Init+0x5c>)
 8009cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009cf0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8009cf2:	4b12      	ldr	r3, [pc, #72]	; (8009d3c <MX_USART6_UART_Init+0x5c>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8009cf8:	4b10      	ldr	r3, [pc, #64]	; (8009d3c <MX_USART6_UART_Init+0x5c>)
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8009cfe:	4b0f      	ldr	r3, [pc, #60]	; (8009d3c <MX_USART6_UART_Init+0x5c>)
 8009d00:	2200      	movs	r2, #0
 8009d02:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8009d04:	4b0d      	ldr	r3, [pc, #52]	; (8009d3c <MX_USART6_UART_Init+0x5c>)
 8009d06:	220c      	movs	r2, #12
 8009d08:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009d0a:	4b0c      	ldr	r3, [pc, #48]	; (8009d3c <MX_USART6_UART_Init+0x5c>)
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8009d10:	4b0a      	ldr	r3, [pc, #40]	; (8009d3c <MX_USART6_UART_Init+0x5c>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8009d16:	4809      	ldr	r0, [pc, #36]	; (8009d3c <MX_USART6_UART_Init+0x5c>)
 8009d18:	f7fe f8e6 	bl	8007ee8 <HAL_UART_Init>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8009d22:	f7f9 ffd1 	bl	8003cc8 <Error_Handler>
  }
  //Enable interrupts
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8009d26:	2200      	movs	r2, #0
 8009d28:	2100      	movs	r1, #0
 8009d2a:	2047      	movs	r0, #71	; 0x47
 8009d2c:	f7fa f94f 	bl	8003fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8009d30:	2047      	movs	r0, #71	; 0x47
 8009d32:	f7fa f968 	bl	8004006 <HAL_NVIC_EnableIRQ>
}
 8009d36:	bf00      	nop
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	200006fc 	.word	0x200006fc
 8009d40:	40011400 	.word	0x40011400

08009d44 <MX_WWDG_Init>:

}

/* WWDG init function */
void MX_WWDG_Init(void)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	af00      	add	r7, sp, #0

  hwwdg.Instance = WWDG;
 8009d48:	4b0d      	ldr	r3, [pc, #52]	; (8009d80 <MX_WWDG_Init+0x3c>)
 8009d4a:	4a0e      	ldr	r2, [pc, #56]	; (8009d84 <MX_WWDG_Init+0x40>)
 8009d4c:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 8009d4e:	4b0c      	ldr	r3, [pc, #48]	; (8009d80 <MX_WWDG_Init+0x3c>)
 8009d50:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8009d54:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8009d56:	4b0a      	ldr	r3, [pc, #40]	; (8009d80 <MX_WWDG_Init+0x3c>)
 8009d58:	2240      	movs	r2, #64	; 0x40
 8009d5a:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 8009d5c:	4b08      	ldr	r3, [pc, #32]	; (8009d80 <MX_WWDG_Init+0x3c>)
 8009d5e:	2240      	movs	r2, #64	; 0x40
 8009d60:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_ENABLE;
 8009d62:	4b07      	ldr	r3, [pc, #28]	; (8009d80 <MX_WWDG_Init+0x3c>)
 8009d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d68:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8009d6a:	4805      	ldr	r0, [pc, #20]	; (8009d80 <MX_WWDG_Init+0x3c>)
 8009d6c:	f7fe ff48 	bl	8008c00 <HAL_WWDG_Init>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <MX_WWDG_Init+0x36>
  {
    Error_Handler();
 8009d76:	f7f9 ffa7 	bl	8003cc8 <Error_Handler>
  }

}
 8009d7a:	bf00      	nop
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	2000073c 	.word	0x2000073c
 8009d84:	40002c00 	.word	0x40002c00

08009d88 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009d92:	f000 f89d 	bl	8009ed0 <BSP_SD_IsDetected>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d001      	beq.n	8009da0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e012      	b.n	8009dc6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009da0:	480b      	ldr	r0, [pc, #44]	; (8009dd0 <BSP_SD_Init+0x48>)
 8009da2:	f7fc fa7f 	bl	80062a4 <HAL_SD_Init>
 8009da6:	4603      	mov	r3, r0
 8009da8:	71fb      	strb	r3, [r7, #7]
#ifdef BUS_4BITS
  /* Configure SD Bus width */
  if (sd_state == MSD_OK)
 8009daa:	79fb      	ldrb	r3, [r7, #7]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d109      	bne.n	8009dc4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009db4:	4806      	ldr	r0, [pc, #24]	; (8009dd0 <BSP_SD_Init+0x48>)
 8009db6:	f7fd f9f8 	bl	80071aa <HAL_SD_ConfigWideBusOperation>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif
  return sd_state;
 8009dc4:	79fb      	ldrb	r3, [r7, #7]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	2000039c 	.word	0x2000039c

08009dd4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b088      	sub	sp, #32
 8009dd8:	af02      	add	r7, sp, #8
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
 8009de0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state;

  __HAL_LOCK(&hsd);
 8009de2:	4b0d      	ldr	r3, [pc, #52]	; (8009e18 <BSP_SD_ReadBlocks+0x44>)
 8009de4:	7f1b      	ldrb	r3, [r3, #28]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d101      	bne.n	8009dee <BSP_SD_ReadBlocks+0x1a>
 8009dea:	2302      	movs	r3, #2
 8009dec:	e010      	b.n	8009e10 <BSP_SD_ReadBlocks+0x3c>
 8009dee:	4b0a      	ldr	r3, [pc, #40]	; (8009e18 <BSP_SD_ReadBlocks+0x44>)
 8009df0:	2201      	movs	r2, #1
 8009df2:	771a      	strb	r2, [r3, #28]
  sd_state = HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout);
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	68f9      	ldr	r1, [r7, #12]
 8009dfe:	4806      	ldr	r0, [pc, #24]	; (8009e18 <BSP_SD_ReadBlocks+0x44>)
 8009e00:	f7fc fad8 	bl	80063b4 <HAL_SD_ReadBlocks>
 8009e04:	4603      	mov	r3, r0
 8009e06:	75fb      	strb	r3, [r7, #23]
  __HAL_UNLOCK(&hsd);
 8009e08:	4b03      	ldr	r3, [pc, #12]	; (8009e18 <BSP_SD_ReadBlocks+0x44>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	771a      	strb	r2, [r3, #28]
  
  return sd_state;  
 8009e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3718      	adds	r7, #24
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	2000039c 	.word	0x2000039c

08009e1c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b088      	sub	sp, #32
 8009e20:	af02      	add	r7, sp, #8
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
 8009e28:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	75fb      	strb	r3, [r7, #23]

  __HAL_LOCK(&hsd);
 8009e2e:	4b0d      	ldr	r3, [pc, #52]	; (8009e64 <BSP_SD_WriteBlocks+0x48>)
 8009e30:	7f1b      	ldrb	r3, [r3, #28]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d101      	bne.n	8009e3a <BSP_SD_WriteBlocks+0x1e>
 8009e36:	2302      	movs	r3, #2
 8009e38:	e010      	b.n	8009e5c <BSP_SD_WriteBlocks+0x40>
 8009e3a:	4b0a      	ldr	r3, [pc, #40]	; (8009e64 <BSP_SD_WriteBlocks+0x48>)
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	771a      	strb	r2, [r3, #28]
  sd_state = HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout);
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	68f9      	ldr	r1, [r7, #12]
 8009e4a:	4806      	ldr	r0, [pc, #24]	; (8009e64 <BSP_SD_WriteBlocks+0x48>)
 8009e4c:	f7fc fc49 	bl	80066e2 <HAL_SD_WriteBlocks>
 8009e50:	4603      	mov	r3, r0
 8009e52:	75fb      	strb	r3, [r7, #23]
  __HAL_UNLOCK(&hsd);
 8009e54:	4b03      	ldr	r3, [pc, #12]	; (8009e64 <BSP_SD_WriteBlocks+0x48>)
 8009e56:	2200      	movs	r2, #0
 8009e58:	771a      	strb	r2, [r3, #28]

  return sd_state;  
 8009e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3718      	adds	r7, #24
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	2000039c 	.word	0x2000039c

08009e68 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
  uint8_t sd_state;  

  __HAL_LOCK(&hsd);
 8009e6e:	4b0e      	ldr	r3, [pc, #56]	; (8009ea8 <BSP_SD_GetCardState+0x40>)
 8009e70:	7f1b      	ldrb	r3, [r3, #28]
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d101      	bne.n	8009e7a <BSP_SD_GetCardState+0x12>
 8009e76:	2302      	movs	r3, #2
 8009e78:	e011      	b.n	8009e9e <BSP_SD_GetCardState+0x36>
 8009e7a:	4b0b      	ldr	r3, [pc, #44]	; (8009ea8 <BSP_SD_GetCardState+0x40>)
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	771a      	strb	r2, [r3, #28]
  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER)
 8009e80:	4809      	ldr	r0, [pc, #36]	; (8009ea8 <BSP_SD_GetCardState+0x40>)
 8009e82:	f7fd fa0e 	bl	80072a2 <HAL_SD_GetCardState>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b04      	cmp	r3, #4
 8009e8a:	d102      	bne.n	8009e92 <BSP_SD_GetCardState+0x2a>
    sd_state = HAL_OK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	71fb      	strb	r3, [r7, #7]
 8009e90:	e001      	b.n	8009e96 <BSP_SD_GetCardState+0x2e>
  else
    sd_state = HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	71fb      	strb	r3, [r7, #7]
  __HAL_UNLOCK(&hsd);
 8009e96:	4b04      	ldr	r3, [pc, #16]	; (8009ea8 <BSP_SD_GetCardState+0x40>)
 8009e98:	2200      	movs	r2, #0
 8009e9a:	771a      	strb	r2, [r3, #28]
  
  return sd_state;
 8009e9c:	79fb      	ldrb	r3, [r7, #7]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	2000039c 	.word	0x2000039c

08009eac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8009eb4:	b672      	cpsid	i
}
 8009eb6:	bf00      	nop
  /* Get SD card Information */
    __disable_irq();
    HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009eb8:	6879      	ldr	r1, [r7, #4]
 8009eba:	4804      	ldr	r0, [pc, #16]	; (8009ecc <BSP_SD_GetCardInfo+0x20>)
 8009ebc:	f7fd f949 	bl	8007152 <HAL_SD_GetCardInfo>
  __ASM volatile ("cpsie i" : : : "memory");
 8009ec0:	b662      	cpsie	i
}
 8009ec2:	bf00      	nop
    __enable_irq();
}
 8009ec4:	bf00      	nop
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	2000039c 	.word	0x2000039c

08009ed0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8009eda:	79fb      	ldrb	r3, [r7, #7]
 8009edc:	b2db      	uxtb	r3, r3
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	370c      	adds	r7, #12
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr
	...

08009eec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver((Diskio_drvTypeDef*)&SD_Driver, SD_Path);
 8009ef0:	4904      	ldr	r1, [pc, #16]	; (8009f04 <MX_FATFS_Init+0x18>)
 8009ef2:	4805      	ldr	r0, [pc, #20]	; (8009f08 <MX_FATFS_Init+0x1c>)
 8009ef4:	f000 fc3c 	bl	800a770 <FATFS_LinkDriver>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	461a      	mov	r2, r3
 8009efc:	4b03      	ldr	r3, [pc, #12]	; (8009f0c <MX_FATFS_Init+0x20>)
 8009efe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009f00:	bf00      	nop
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	200007dc 	.word	0x200007dc
 8009f08:	080109cc 	.word	0x080109cc
 8009f0c:	200007d8 	.word	0x200007d8

08009f10 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	4603      	mov	r3, r0
 8009f18:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009f1a:	4b0b      	ldr	r3, [pc, #44]	; (8009f48 <SD_initialize+0x38>)
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8009f20:	f7ff ff32 	bl	8009d88 <BSP_SD_Init>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d107      	bne.n	8009f3a <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009f2a:	4b07      	ldr	r3, [pc, #28]	; (8009f48 <SD_initialize+0x38>)
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	f023 0301 	bic.w	r3, r3, #1
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	4b04      	ldr	r3, [pc, #16]	; (8009f48 <SD_initialize+0x38>)
 8009f38:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009f3a:	4b03      	ldr	r3, [pc, #12]	; (8009f48 <SD_initialize+0x38>)
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	b2db      	uxtb	r3, r3
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	20000010 	.word	0x20000010

08009f4c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	4603      	mov	r3, r0
 8009f54:	71fb      	strb	r3, [r7, #7]
  
  if(BSP_SD_GetCardState() != SD_TRANSFER_BUSY)
 8009f56:	f7ff ff87 	bl	8009e68 <BSP_SD_GetCardState>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d008      	beq.n	8009f72 <SD_status+0x26>
    Stat &= ~STA_BUSY;
 8009f60:	4b0b      	ldr	r3, [pc, #44]	; (8009f90 <SD_status+0x44>)
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	f023 0308 	bic.w	r3, r3, #8
 8009f6a:	b2da      	uxtb	r2, r3
 8009f6c:	4b08      	ldr	r3, [pc, #32]	; (8009f90 <SD_status+0x44>)
 8009f6e:	701a      	strb	r2, [r3, #0]
 8009f70:	e007      	b.n	8009f82 <SD_status+0x36>
  else
    Stat |= STA_BUSY;
 8009f72:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <SD_status+0x44>)
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	f043 0308 	orr.w	r3, r3, #8
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	4b04      	ldr	r3, [pc, #16]	; (8009f90 <SD_status+0x44>)
 8009f80:	701a      	strb	r2, [r3, #0]
  
  return Stat;
 8009f82:	4b03      	ldr	r3, [pc, #12]	; (8009f90 <SD_status+0x44>)
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	b2db      	uxtb	r3, r3
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	20000010 	.word	0x20000010

08009f94 <SD_read>:
  */
    
#define MMC_RDWR_TRIES       20
#define MMC_STATUS_TRIES     500
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60b9      	str	r1, [r7, #8]
 8009f9c:	607a      	str	r2, [r7, #4]
 8009f9e:	603b      	str	r3, [r7, #0]
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = MMC_RDWR_TRIES;
 8009fa4:	2314      	movs	r3, #20
 8009fa6:	617b      	str	r3, [r7, #20]

  while (BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t) (sector), count, SD_DATATIMEOUT) != HAL_OK)
 8009fa8:	e009      	b.n	8009fbe <SD_read+0x2a>
  {
    if (timeout-- == 0)
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	1e5a      	subs	r2, r3, #1
 8009fae:	617a      	str	r2, [r7, #20]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d101      	bne.n	8009fb8 <SD_read+0x24>
    {
      return RES_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e020      	b.n	8009ffa <SD_read+0x66>
    }
    osDelay(1);
 8009fb8:	2001      	movs	r0, #1
 8009fba:	f000 fc50 	bl	800a85e <osDelay>
  while (BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t) (sector), count, SD_DATATIMEOUT) != HAL_OK)
 8009fbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	6879      	ldr	r1, [r7, #4]
 8009fc6:	68b8      	ldr	r0, [r7, #8]
 8009fc8:	f7ff ff04 	bl	8009dd4 <BSP_SD_ReadBlocks>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1eb      	bne.n	8009faa <SD_read+0x16>
  }
  timeout = MMC_STATUS_TRIES;
 8009fd2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009fd6:	617b      	str	r3, [r7, #20]
  while (BSP_SD_GetCardState() != HAL_OK)
 8009fd8:	e009      	b.n	8009fee <SD_read+0x5a>
  {
    if (timeout-- == 0)
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	1e5a      	subs	r2, r3, #1
 8009fde:	617a      	str	r2, [r7, #20]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d101      	bne.n	8009fe8 <SD_read+0x54>
    {
      return RES_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e008      	b.n	8009ffa <SD_read+0x66>
    }
    osDelay(1);
 8009fe8:	2001      	movs	r0, #1
 8009fea:	f000 fc38 	bl	800a85e <osDelay>
  while (BSP_SD_GetCardState() != HAL_OK)
 8009fee:	f7ff ff3b 	bl	8009e68 <BSP_SD_GetCardState>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1f0      	bne.n	8009fda <SD_read+0x46>
  }
  return RES_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b086      	sub	sp, #24
 800a006:	af00      	add	r7, sp, #0
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
 800a00c:	603b      	str	r3, [r7, #0]
 800a00e:	4603      	mov	r3, r0
 800a010:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = MMC_RDWR_TRIES;
 800a012:	2314      	movs	r3, #20
 800a014:	617b      	str	r3, [r7, #20]

  while (BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_DATATIMEOUT) != HAL_OK)
 800a016:	e009      	b.n	800a02c <SD_write+0x2a>
  {
    if (timeout-- == 0)
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	1e5a      	subs	r2, r3, #1
 800a01c:	617a      	str	r2, [r7, #20]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d101      	bne.n	800a026 <SD_write+0x24>
    {
      return RES_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	e020      	b.n	800a068 <SD_write+0x66>
    }
    osDelay(1);
 800a026:	2001      	movs	r0, #1
 800a028:	f000 fc19 	bl	800a85e <osDelay>
  while (BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_DATATIMEOUT) != HAL_OK)
 800a02c:	f241 3388 	movw	r3, #5000	; 0x1388
 800a030:	683a      	ldr	r2, [r7, #0]
 800a032:	6879      	ldr	r1, [r7, #4]
 800a034:	68b8      	ldr	r0, [r7, #8]
 800a036:	f7ff fef1 	bl	8009e1c <BSP_SD_WriteBlocks>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d1eb      	bne.n	800a018 <SD_write+0x16>
  }
  timeout = MMC_STATUS_TRIES;
 800a040:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a044:	617b      	str	r3, [r7, #20]
  while(BSP_SD_GetCardState() != HAL_OK)
 800a046:	e009      	b.n	800a05c <SD_write+0x5a>
  {
    if (timeout-- == 0)
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	1e5a      	subs	r2, r3, #1
 800a04c:	617a      	str	r2, [r7, #20]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d101      	bne.n	800a056 <SD_write+0x54>
    {
      return RES_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	e008      	b.n	800a068 <SD_write+0x66>
    }
    osDelay(1);
 800a056:	2001      	movs	r0, #1
 800a058:	f000 fc01 	bl	800a85e <osDelay>
  while(BSP_SD_GetCardState() != HAL_OK)
 800a05c:	f7ff ff04 	bl	8009e68 <BSP_SD_GetCardState>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1f0      	bne.n	800a048 <SD_write+0x46>
  }    
  return RES_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3718      	adds	r7, #24
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b08c      	sub	sp, #48	; 0x30
 800a074:	af00      	add	r7, sp, #0
 800a076:	4603      	mov	r3, r0
 800a078:	603a      	str	r2, [r7, #0]
 800a07a:	71fb      	strb	r3, [r7, #7]
 800a07c:	460b      	mov	r3, r1
 800a07e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) 
 800a086:	4b24      	ldr	r3, [pc, #144]	; (800a118 <SD_ioctl+0xa8>)
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	f003 0301 	and.w	r3, r3, #1
 800a090:	2b00      	cmp	r3, #0
 800a092:	d001      	beq.n	800a098 <SD_ioctl+0x28>
    return RES_NOTRDY;
 800a094:	2303      	movs	r3, #3
 800a096:	e03b      	b.n	800a110 <SD_ioctl+0xa0>
  
  switch (cmd)
 800a098:	79bb      	ldrb	r3, [r7, #6]
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	d833      	bhi.n	800a106 <SD_ioctl+0x96>
 800a09e:	a201      	add	r2, pc, #4	; (adr r2, 800a0a4 <SD_ioctl+0x34>)
 800a0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a4:	0800a0b5 	.word	0x0800a0b5
 800a0a8:	0800a0bd 	.word	0x0800a0bd
 800a0ac:	0800a0d5 	.word	0x0800a0d5
 800a0b0:	0800a0ef 	.word	0x0800a0ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a0ba:	e027      	b.n	800a10c <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a0bc:	f107 030c 	add.w	r3, r7, #12
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7ff fef3 	bl	8009eac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a0c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a0d2:	e01b      	b.n	800a10c <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a0d4:	f107 030c 	add.w	r3, r7, #12
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7ff fee7 	bl	8009eac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e0:	b29a      	uxth	r2, r3
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a0ec:	e00e      	b.n	800a10c <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a0ee:	f107 030c 	add.w	r3, r7, #12
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7ff feda 	bl	8009eac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800a0f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a104:	e002      	b.n	800a10c <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800a106:	2304      	movs	r3, #4
 800a108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800a10c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a110:	4618      	mov	r0, r3
 800a112:	3730      	adds	r7, #48	; 0x30
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	20000010 	.word	0x20000010

0800a11c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a120:	2003      	movs	r0, #3
 800a122:	f7f9 ff49 	bl	8003fb8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800a126:	2200      	movs	r2, #0
 800a128:	2100      	movs	r1, #0
 800a12a:	f06f 000b 	mvn.w	r0, #11
 800a12e:	f7f9 ff4e 	bl	8003fce <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800a132:	2200      	movs	r2, #0
 800a134:	2100      	movs	r1, #0
 800a136:	f06f 000a 	mvn.w	r0, #10
 800a13a:	f7f9 ff48 	bl	8003fce <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800a13e:	2200      	movs	r2, #0
 800a140:	2100      	movs	r1, #0
 800a142:	f06f 0009 	mvn.w	r0, #9
 800a146:	f7f9 ff42 	bl	8003fce <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800a14a:	2200      	movs	r2, #0
 800a14c:	2100      	movs	r1, #0
 800a14e:	f06f 0004 	mvn.w	r0, #4
 800a152:	f7f9 ff3c 	bl	8003fce <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800a156:	2200      	movs	r2, #0
 800a158:	2100      	movs	r1, #0
 800a15a:	f06f 0003 	mvn.w	r0, #3
 800a15e:	f7f9 ff36 	bl	8003fce <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a162:	2200      	movs	r2, #0
 800a164:	210f      	movs	r1, #15
 800a166:	f06f 0001 	mvn.w	r0, #1
 800a16a:	f7f9 ff30 	bl	8003fce <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800a16e:	2200      	movs	r2, #0
 800a170:	210f      	movs	r1, #15
 800a172:	f04f 30ff 	mov.w	r0, #4294967295
 800a176:	f7f9 ff2a 	bl	8003fce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a17a:	bf00      	nop
 800a17c:	bd80      	pop	{r7, pc}
	...

0800a180 <HAL_I2C_MspInit>:
  /* USER CODE END CAN1_MspDeInit 1 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b08a      	sub	sp, #40	; 0x28
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a37      	ldr	r2, [pc, #220]	; (800a26c <HAL_I2C_MspInit+0xec>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d11f      	bne.n	800a1d2 <HAL_I2C_MspInit+0x52>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SYS_SCL_Pin|SYS_SDA_Pin;
 800a192:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a198:	2312      	movs	r3, #18
 800a19a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a19c:	2301      	movs	r3, #1
 800a19e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a1a4:	2304      	movs	r3, #4
 800a1a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a1a8:	f107 0314 	add.w	r3, r7, #20
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	4830      	ldr	r0, [pc, #192]	; (800a270 <HAL_I2C_MspInit+0xf0>)
 800a1b0:	f7fa f910 	bl	80043d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	613b      	str	r3, [r7, #16]
 800a1b8:	4b2e      	ldr	r3, [pc, #184]	; (800a274 <HAL_I2C_MspInit+0xf4>)
 800a1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1bc:	4a2d      	ldr	r2, [pc, #180]	; (800a274 <HAL_I2C_MspInit+0xf4>)
 800a1be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1c2:	6413      	str	r3, [r2, #64]	; 0x40
 800a1c4:	4b2b      	ldr	r3, [pc, #172]	; (800a274 <HAL_I2C_MspInit+0xf4>)
 800a1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1cc:	613b      	str	r3, [r7, #16]
 800a1ce:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800a1d0:	e048      	b.n	800a264 <HAL_I2C_MspInit+0xe4>
  else if(hi2c->Instance==I2C2)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a28      	ldr	r2, [pc, #160]	; (800a278 <HAL_I2C_MspInit+0xf8>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d11f      	bne.n	800a21c <HAL_I2C_MspInit+0x9c>
    GPIO_InitStruct.Pin = SEN_SCL_Pin|SEN_SDA_Pin;
 800a1dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a1e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a1e2:	2312      	movs	r3, #18
 800a1e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a1ee:	2304      	movs	r3, #4
 800a1f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a1f2:	f107 0314 	add.w	r3, r7, #20
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	481d      	ldr	r0, [pc, #116]	; (800a270 <HAL_I2C_MspInit+0xf0>)
 800a1fa:	f7fa f8eb 	bl	80043d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a1fe:	2300      	movs	r3, #0
 800a200:	60fb      	str	r3, [r7, #12]
 800a202:	4b1c      	ldr	r3, [pc, #112]	; (800a274 <HAL_I2C_MspInit+0xf4>)
 800a204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a206:	4a1b      	ldr	r2, [pc, #108]	; (800a274 <HAL_I2C_MspInit+0xf4>)
 800a208:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a20c:	6413      	str	r3, [r2, #64]	; 0x40
 800a20e:	4b19      	ldr	r3, [pc, #100]	; (800a274 <HAL_I2C_MspInit+0xf4>)
 800a210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a216:	60fb      	str	r3, [r7, #12]
 800a218:	68fb      	ldr	r3, [r7, #12]
}
 800a21a:	e023      	b.n	800a264 <HAL_I2C_MspInit+0xe4>
  else if(hi2c->Instance==I2C3)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a16      	ldr	r2, [pc, #88]	; (800a27c <HAL_I2C_MspInit+0xfc>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d11e      	bne.n	800a264 <HAL_I2C_MspInit+0xe4>
    GPIO_InitStruct.Pin = PAY_SCL_Pin|PAY_SDA_Pin;
 800a226:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800a22a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a22c:	2312      	movs	r3, #18
 800a22e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a230:	2301      	movs	r3, #1
 800a232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a234:	2303      	movs	r3, #3
 800a236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800a238:	2304      	movs	r3, #4
 800a23a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a23c:	f107 0314 	add.w	r3, r7, #20
 800a240:	4619      	mov	r1, r3
 800a242:	480f      	ldr	r0, [pc, #60]	; (800a280 <HAL_I2C_MspInit+0x100>)
 800a244:	f7fa f8c6 	bl	80043d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800a248:	2300      	movs	r3, #0
 800a24a:	60bb      	str	r3, [r7, #8]
 800a24c:	4b09      	ldr	r3, [pc, #36]	; (800a274 <HAL_I2C_MspInit+0xf4>)
 800a24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a250:	4a08      	ldr	r2, [pc, #32]	; (800a274 <HAL_I2C_MspInit+0xf4>)
 800a252:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a256:	6413      	str	r3, [r2, #64]	; 0x40
 800a258:	4b06      	ldr	r3, [pc, #24]	; (800a274 <HAL_I2C_MspInit+0xf4>)
 800a25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a260:	60bb      	str	r3, [r7, #8]
 800a262:	68bb      	ldr	r3, [r7, #8]
}
 800a264:	bf00      	nop
 800a266:	3728      	adds	r7, #40	; 0x28
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	40005400 	.word	0x40005400
 800a270:	40020400 	.word	0x40020400
 800a274:	40023800 	.word	0x40023800
 800a278:	40005800 	.word	0x40005800
 800a27c:	40005c00 	.word	0x40005c00
 800a280:	40021c00 	.word	0x40021c00

0800a284 <HAL_SD_MspInit>:
  /* USER CODE END RTC_MspDeInit 1 */

}

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b088      	sub	sp, #32
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDIO)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a1e      	ldr	r2, [pc, #120]	; (800a30c <HAL_SD_MspInit+0x88>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d136      	bne.n	800a304 <HAL_SD_MspInit+0x80>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800a296:	2300      	movs	r3, #0
 800a298:	60bb      	str	r3, [r7, #8]
 800a29a:	4b1d      	ldr	r3, [pc, #116]	; (800a310 <HAL_SD_MspInit+0x8c>)
 800a29c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a29e:	4a1c      	ldr	r2, [pc, #112]	; (800a310 <HAL_SD_MspInit+0x8c>)
 800a2a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a2a4:	6453      	str	r3, [r2, #68]	; 0x44
 800a2a6:	4b1a      	ldr	r3, [pc, #104]	; (800a310 <HAL_SD_MspInit+0x8c>)
 800a2a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2ae:	60bb      	str	r3, [r7, #8]
 800a2b0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800a2b2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800a2b6:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a2c4:	230c      	movs	r3, #12
 800a2c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a2c8:	f107 030c 	add.w	r3, r7, #12
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	4811      	ldr	r0, [pc, #68]	; (800a314 <HAL_SD_MspInit+0x90>)
 800a2d0:	f7fa f880 	bl	80043d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a2d4:	2304      	movs	r3, #4
 800a2d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2d8:	2302      	movs	r3, #2
 800a2da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2e0:	2303      	movs	r3, #3
 800a2e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a2e4:	230c      	movs	r3, #12
 800a2e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a2e8:	f107 030c 	add.w	r3, r7, #12
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	480a      	ldr	r0, [pc, #40]	; (800a318 <HAL_SD_MspInit+0x94>)
 800a2f0:	f7fa f870 	bl	80043d4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SDIO_IRQn, USER_INT_PRIORITY, 0);
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	2106      	movs	r1, #6
 800a2f8:	2031      	movs	r0, #49	; 0x31
 800a2fa:	f7f9 fe68 	bl	8003fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800a2fe:	2031      	movs	r0, #49	; 0x31
 800a300:	f7f9 fe81 	bl	8004006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800a304:	bf00      	nop
 800a306:	3720      	adds	r7, #32
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	40012c00 	.word	0x40012c00
 800a310:	40023800 	.word	0x40023800
 800a314:	40020800 	.word	0x40020800
 800a318:	40020c00 	.word	0x40020c00

0800a31c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM5)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a0b      	ldr	r2, [pc, #44]	; (800a358 <HAL_TIM_Base_MspInit+0x3c>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d10d      	bne.n	800a34a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a32e:	2300      	movs	r3, #0
 800a330:	60fb      	str	r3, [r7, #12]
 800a332:	4b0a      	ldr	r3, [pc, #40]	; (800a35c <HAL_TIM_Base_MspInit+0x40>)
 800a334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a336:	4a09      	ldr	r2, [pc, #36]	; (800a35c <HAL_TIM_Base_MspInit+0x40>)
 800a338:	f043 0308 	orr.w	r3, r3, #8
 800a33c:	6413      	str	r3, [r2, #64]	; 0x40
 800a33e:	4b07      	ldr	r3, [pc, #28]	; (800a35c <HAL_TIM_Base_MspInit+0x40>)
 800a340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a342:	f003 0308 	and.w	r3, r3, #8
 800a346:	60fb      	str	r3, [r7, #12]
 800a348:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800a34a:	bf00      	nop
 800a34c:	3714      	adds	r7, #20
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	40000c00 	.word	0x40000c00
 800a35c:	40023800 	.word	0x40023800

0800a360 <HAL_UART_MspInit>:
  /* USER CODE END TIM5_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b08a      	sub	sp, #40	; 0x28
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a42      	ldr	r2, [pc, #264]	; (800a478 <HAL_UART_MspInit+0x118>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d126      	bne.n	800a3c0 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a372:	2300      	movs	r3, #0
 800a374:	613b      	str	r3, [r7, #16]
 800a376:	4b41      	ldr	r3, [pc, #260]	; (800a47c <HAL_UART_MspInit+0x11c>)
 800a378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37a:	4a40      	ldr	r2, [pc, #256]	; (800a47c <HAL_UART_MspInit+0x11c>)
 800a37c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a380:	6413      	str	r3, [r2, #64]	; 0x40
 800a382:	4b3e      	ldr	r3, [pc, #248]	; (800a47c <HAL_UART_MspInit+0x11c>)
 800a384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a38a:	613b      	str	r3, [r7, #16]
 800a38c:	693b      	ldr	r3, [r7, #16]
  
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a38e:	2303      	movs	r3, #3
 800a390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a392:	2302      	movs	r3, #2
 800a394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a396:	2301      	movs	r3, #1
 800a398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a39a:	2303      	movs	r3, #3
 800a39c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a39e:	2308      	movs	r3, #8
 800a3a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3a2:	f107 0314 	add.w	r3, r7, #20
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	4835      	ldr	r0, [pc, #212]	; (800a480 <HAL_UART_MspInit+0x120>)
 800a3aa:	f7fa f813 	bl	80043d4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(UART4_IRQn, USER_INT_PRIORITY, 0);
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	2106      	movs	r1, #6
 800a3b2:	2034      	movs	r0, #52	; 0x34
 800a3b4:	f7f9 fe0b 	bl	8003fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800a3b8:	2034      	movs	r0, #52	; 0x34
 800a3ba:	f7f9 fe24 	bl	8004006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800a3be:	e057      	b.n	800a470 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART1)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a2f      	ldr	r2, [pc, #188]	; (800a484 <HAL_UART_MspInit+0x124>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d127      	bne.n	800a41a <HAL_UART_MspInit+0xba>
    __HAL_RCC_USART1_CLK_ENABLE();
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	60fb      	str	r3, [r7, #12]
 800a3ce:	4b2b      	ldr	r3, [pc, #172]	; (800a47c <HAL_UART_MspInit+0x11c>)
 800a3d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3d2:	4a2a      	ldr	r2, [pc, #168]	; (800a47c <HAL_UART_MspInit+0x11c>)
 800a3d4:	f043 0310 	orr.w	r3, r3, #16
 800a3d8:	6453      	str	r3, [r2, #68]	; 0x44
 800a3da:	4b28      	ldr	r3, [pc, #160]	; (800a47c <HAL_UART_MspInit+0x11c>)
 800a3dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3de:	f003 0310 	and.w	r3, r3, #16
 800a3e2:	60fb      	str	r3, [r7, #12]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800a3e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a3ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3ec:	2302      	movs	r3, #2
 800a3ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a3f8:	2307      	movs	r3, #7
 800a3fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3fc:	f107 0314 	add.w	r3, r7, #20
 800a400:	4619      	mov	r1, r3
 800a402:	481f      	ldr	r0, [pc, #124]	; (800a480 <HAL_UART_MspInit+0x120>)
 800a404:	f7f9 ffe6 	bl	80043d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, USER_INT_PRIORITY, 0);
 800a408:	2200      	movs	r2, #0
 800a40a:	2106      	movs	r1, #6
 800a40c:	2025      	movs	r0, #37	; 0x25
 800a40e:	f7f9 fdde 	bl	8003fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);    
 800a412:	2025      	movs	r0, #37	; 0x25
 800a414:	f7f9 fdf7 	bl	8004006 <HAL_NVIC_EnableIRQ>
}
 800a418:	e02a      	b.n	800a470 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART6)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a1a      	ldr	r2, [pc, #104]	; (800a488 <HAL_UART_MspInit+0x128>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d125      	bne.n	800a470 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART6_CLK_ENABLE();
 800a424:	2300      	movs	r3, #0
 800a426:	60bb      	str	r3, [r7, #8]
 800a428:	4b14      	ldr	r3, [pc, #80]	; (800a47c <HAL_UART_MspInit+0x11c>)
 800a42a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a42c:	4a13      	ldr	r2, [pc, #76]	; (800a47c <HAL_UART_MspInit+0x11c>)
 800a42e:	f043 0320 	orr.w	r3, r3, #32
 800a432:	6453      	str	r3, [r2, #68]	; 0x44
 800a434:	4b11      	ldr	r3, [pc, #68]	; (800a47c <HAL_UART_MspInit+0x11c>)
 800a436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a438:	f003 0320 	and.w	r3, r3, #32
 800a43c:	60bb      	str	r3, [r7, #8]
 800a43e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PAY_TX_Pin|PAY_RX_Pin;
 800a440:	23c0      	movs	r3, #192	; 0xc0
 800a442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a444:	2302      	movs	r3, #2
 800a446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a448:	2301      	movs	r3, #1
 800a44a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a44c:	2303      	movs	r3, #3
 800a44e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a450:	2308      	movs	r3, #8
 800a452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a454:	f107 0314 	add.w	r3, r7, #20
 800a458:	4619      	mov	r1, r3
 800a45a:	480c      	ldr	r0, [pc, #48]	; (800a48c <HAL_UART_MspInit+0x12c>)
 800a45c:	f7f9 ffba 	bl	80043d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, USER_INT_PRIORITY, 0);
 800a460:	2200      	movs	r2, #0
 800a462:	2106      	movs	r1, #6
 800a464:	2047      	movs	r0, #71	; 0x47
 800a466:	f7f9 fdb2 	bl	8003fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800a46a:	2047      	movs	r0, #71	; 0x47
 800a46c:	f7f9 fdcb 	bl	8004006 <HAL_NVIC_EnableIRQ>
}
 800a470:	bf00      	nop
 800a472:	3728      	adds	r7, #40	; 0x28
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	40004c00 	.word	0x40004c00
 800a47c:	40023800 	.word	0x40023800
 800a480:	40020000 	.word	0x40020000
 800a484:	40011000 	.word	0x40011000
 800a488:	40011400 	.word	0x40011400
 800a48c:	40020800 	.word	0x40020800

0800a490 <HAL_WWDG_MspInit>:
  }

}

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]

  if(hwwdg->Instance==WWDG)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a0b      	ldr	r2, [pc, #44]	; (800a4cc <HAL_WWDG_MspInit+0x3c>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d10d      	bne.n	800a4be <HAL_WWDG_MspInit+0x2e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	60fb      	str	r3, [r7, #12]
 800a4a6:	4b0a      	ldr	r3, [pc, #40]	; (800a4d0 <HAL_WWDG_MspInit+0x40>)
 800a4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4aa:	4a09      	ldr	r2, [pc, #36]	; (800a4d0 <HAL_WWDG_MspInit+0x40>)
 800a4ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a4b0:	6413      	str	r3, [r2, #64]	; 0x40
 800a4b2:	4b07      	ldr	r3, [pc, #28]	; (800a4d0 <HAL_WWDG_MspInit+0x40>)
 800a4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4ba:	60fb      	str	r3, [r7, #12]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 800a4be:	bf00      	nop
 800a4c0:	3714      	adds	r7, #20
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	40002c00 	.word	0x40002c00
 800a4d0:	40023800 	.word	0x40023800

0800a4d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b08c      	sub	sp, #48	; 0x30
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	6879      	ldr	r1, [r7, #4]
 800a4e8:	2019      	movs	r0, #25
 800a4ea:	f7f9 fd70 	bl	8003fce <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800a4ee:	2019      	movs	r0, #25
 800a4f0:	f7f9 fd89 	bl	8004006 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	60fb      	str	r3, [r7, #12]
 800a4f8:	4b1f      	ldr	r3, [pc, #124]	; (800a578 <HAL_InitTick+0xa4>)
 800a4fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4fc:	4a1e      	ldr	r2, [pc, #120]	; (800a578 <HAL_InitTick+0xa4>)
 800a4fe:	f043 0301 	orr.w	r3, r3, #1
 800a502:	6453      	str	r3, [r2, #68]	; 0x44
 800a504:	4b1c      	ldr	r3, [pc, #112]	; (800a578 <HAL_InitTick+0xa4>)
 800a506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a508:	f003 0301 	and.w	r3, r3, #1
 800a50c:	60fb      	str	r3, [r7, #12]
 800a50e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a510:	f107 0210 	add.w	r2, r7, #16
 800a514:	f107 0314 	add.w	r3, r7, #20
 800a518:	4611      	mov	r1, r2
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fb fc72 	bl	8005e04 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800a520:	f7fb fc4e 	bl	8005dc0 <HAL_RCC_GetPCLK2Freq>
 800a524:	4603      	mov	r3, r0
 800a526:	005b      	lsls	r3, r3, #1
 800a528:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800a52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52c:	4a13      	ldr	r2, [pc, #76]	; (800a57c <HAL_InitTick+0xa8>)
 800a52e:	fba2 2303 	umull	r2, r3, r2, r3
 800a532:	0c9b      	lsrs	r3, r3, #18
 800a534:	3b01      	subs	r3, #1
 800a536:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800a538:	4b11      	ldr	r3, [pc, #68]	; (800a580 <HAL_InitTick+0xac>)
 800a53a:	4a12      	ldr	r2, [pc, #72]	; (800a584 <HAL_InitTick+0xb0>)
 800a53c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800a53e:	4b10      	ldr	r3, [pc, #64]	; (800a580 <HAL_InitTick+0xac>)
 800a540:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a544:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800a546:	4a0e      	ldr	r2, [pc, #56]	; (800a580 <HAL_InitTick+0xac>)
 800a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800a54c:	4b0c      	ldr	r3, [pc, #48]	; (800a580 <HAL_InitTick+0xac>)
 800a54e:	2200      	movs	r2, #0
 800a550:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a552:	4b0b      	ldr	r3, [pc, #44]	; (800a580 <HAL_InitTick+0xac>)
 800a554:	2200      	movs	r2, #0
 800a556:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800a558:	4809      	ldr	r0, [pc, #36]	; (800a580 <HAL_InitTick+0xac>)
 800a55a:	f7fd fa90 	bl	8007a7e <HAL_TIM_Base_Init>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d104      	bne.n	800a56e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800a564:	4806      	ldr	r0, [pc, #24]	; (800a580 <HAL_InitTick+0xac>)
 800a566:	f7fd fab5 	bl	8007ad4 <HAL_TIM_Base_Start_IT>
 800a56a:	4603      	mov	r3, r0
 800a56c:	e000      	b.n	800a570 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
}
 800a570:	4618      	mov	r0, r3
 800a572:	3730      	adds	r7, #48	; 0x30
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	40023800 	.word	0x40023800
 800a57c:	431bde83 	.word	0x431bde83
 800a580:	200007e0 	.word	0x200007e0
 800a584:	40010000 	.word	0x40010000

0800a588 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800a588:	b480      	push	{r7}
 800a58a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a58c:	bf00      	nop
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
	...

0800a598 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  *((__IO uint32_t*)MAILBOX_ADDRESS) = MAILBOX_VAL_HARD;
 800a59c:	4b03      	ldr	r3, [pc, #12]	; (800a5ac <HardFault_Handler+0x14>)
 800a59e:	4a04      	ldr	r2, [pc, #16]	; (800a5b0 <HardFault_Handler+0x18>)
 800a5a0:	601a      	str	r2, [r3, #0]
  MX_WWDG_Init();
 800a5a2:	f7ff fbcf 	bl	8009d44 <MX_WWDG_Init>
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	Error_Handler();
 800a5a6:	f7f9 fb8f 	bl	8003cc8 <Error_Handler>
 800a5aa:	e7fc      	b.n	800a5a6 <HardFault_Handler+0xe>
 800a5ac:	40002854 	.word	0x40002854
 800a5b0:	0bad0bad 	.word	0x0bad0bad

0800a5b4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a5b8:	e7fe      	b.n	800a5b8 <MemManage_Handler+0x4>

0800a5ba <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a5be:	e7fe      	b.n	800a5be <BusFault_Handler+0x4>

0800a5c0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a5c4:	e7fe      	b.n	800a5c4 <UsageFault_Handler+0x4>

0800a5c6 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800a5c6:	b480      	push	{r7}
 800a5c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a5ca:	bf00      	nop
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800a5d8:	f000 f9e8 	bl	800a9ac <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a5dc:	bf00      	nop
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <SDIO_IRQHandler>:

/**
* @brief This function handles SDIO global interrupt.
*/
void SDIO_IRQHandler(void)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800a5e4:	4802      	ldr	r0, [pc, #8]	; (800a5f0 <SDIO_IRQHandler+0x10>)
 800a5e6:	f7fc f9fd 	bl	80069e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800a5ea:	bf00      	nop
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	2000039c 	.word	0x2000039c

0800a5f4 <USART1_IRQHandler>:

void  USART1_IRQHandler(void)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 800a5f8:	4802      	ldr	r0, [pc, #8]	; (800a604 <USART1_IRQHandler+0x10>)
 800a5fa:	f7fd fe55 	bl	80082a8 <HAL_UART_IRQHandler>
}
 800a5fe:	bf00      	nop
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	200006bc 	.word	0x200006bc

0800a608 <UART4_IRQHandler>:
void  UART4_IRQHandler(void)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart4);
 800a60c:	4802      	ldr	r0, [pc, #8]	; (800a618 <UART4_IRQHandler+0x10>)
 800a60e:	f7fd fe4b 	bl	80082a8 <HAL_UART_IRQHandler>
}
 800a612:	bf00      	nop
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	2000067c 	.word	0x2000067c

0800a61c <USART6_IRQHandler>:
void  USART6_IRQHandler(void)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart6);
 800a620:	4802      	ldr	r0, [pc, #8]	; (800a62c <USART6_IRQHandler+0x10>)
 800a622:	f7fd fe41 	bl	80082a8 <HAL_UART_IRQHandler>
}
 800a626:	bf00      	nop
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	200006fc 	.word	0x200006fc

0800a630 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a634:	4802      	ldr	r0, [pc, #8]	; (800a640 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800a636:	f7fd fa68 	bl	8007b0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800a63a:	bf00      	nop
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	200007e0 	.word	0x200007e0

0800a644 <DMA2_Stream3_IRQHandler>:

/**
* @brief This function handles DMA2 stream3 global interrupt.
*/
void DMA2_Stream3_IRQHandler(void)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800a648:	4802      	ldr	r0, [pc, #8]	; (800a654 <DMA2_Stream3_IRQHandler+0x10>)
 800a64a:	f7f9 fd35 	bl	80040b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800a64e:	bf00      	nop
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	20000420 	.word	0x20000420

0800a658 <DMA2_Stream6_IRQHandler>:

/**
* @brief This function handles DMA2 stream6 global interrupt.
*/
void DMA2_Stream6_IRQHandler(void)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800a65c:	4802      	ldr	r0, [pc, #8]	; (800a668 <DMA2_Stream6_IRQHandler+0x10>)
 800a65e:	f7f9 fd2b 	bl	80040b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800a662:	bf00      	nop
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	20000480 	.word	0x20000480

0800a66c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a66c:	b480      	push	{r7}
 800a66e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a670:	4b16      	ldr	r3, [pc, #88]	; (800a6cc <SystemInit+0x60>)
 800a672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a676:	4a15      	ldr	r2, [pc, #84]	; (800a6cc <SystemInit+0x60>)
 800a678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a67c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a680:	4b13      	ldr	r3, [pc, #76]	; (800a6d0 <SystemInit+0x64>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a12      	ldr	r2, [pc, #72]	; (800a6d0 <SystemInit+0x64>)
 800a686:	f043 0301 	orr.w	r3, r3, #1
 800a68a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a68c:	4b10      	ldr	r3, [pc, #64]	; (800a6d0 <SystemInit+0x64>)
 800a68e:	2200      	movs	r2, #0
 800a690:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a692:	4b0f      	ldr	r3, [pc, #60]	; (800a6d0 <SystemInit+0x64>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a0e      	ldr	r2, [pc, #56]	; (800a6d0 <SystemInit+0x64>)
 800a698:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a69c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a6a2:	4b0b      	ldr	r3, [pc, #44]	; (800a6d0 <SystemInit+0x64>)
 800a6a4:	4a0b      	ldr	r2, [pc, #44]	; (800a6d4 <SystemInit+0x68>)
 800a6a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a6a8:	4b09      	ldr	r3, [pc, #36]	; (800a6d0 <SystemInit+0x64>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a08      	ldr	r2, [pc, #32]	; (800a6d0 <SystemInit+0x64>)
 800a6ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a6b4:	4b06      	ldr	r3, [pc, #24]	; (800a6d0 <SystemInit+0x64>)
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a6ba:	4b04      	ldr	r3, [pc, #16]	; (800a6cc <SystemInit+0x60>)
 800a6bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a6c0:	609a      	str	r2, [r3, #8]
#endif
}
 800a6c2:	bf00      	nop
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr
 800a6cc:	e000ed00 	.word	0xe000ed00
 800a6d0:	40023800 	.word	0x40023800
 800a6d4:	24003010 	.word	0x24003010

0800a6d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b087      	sub	sp, #28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800a6ee:	4b1f      	ldr	r3, [pc, #124]	; (800a76c <FATFS_LinkDriverEx+0x94>)
 800a6f0:	7a5b      	ldrb	r3, [r3, #9]
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d831      	bhi.n	800a75c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a6f8:	4b1c      	ldr	r3, [pc, #112]	; (800a76c <FATFS_LinkDriverEx+0x94>)
 800a6fa:	7a5b      	ldrb	r3, [r3, #9]
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	461a      	mov	r2, r3
 800a700:	4b1a      	ldr	r3, [pc, #104]	; (800a76c <FATFS_LinkDriverEx+0x94>)
 800a702:	2100      	movs	r1, #0
 800a704:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800a706:	4b19      	ldr	r3, [pc, #100]	; (800a76c <FATFS_LinkDriverEx+0x94>)
 800a708:	7a5b      	ldrb	r3, [r3, #9]
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	4a17      	ldr	r2, [pc, #92]	; (800a76c <FATFS_LinkDriverEx+0x94>)
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	4413      	add	r3, r2
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800a716:	4b15      	ldr	r3, [pc, #84]	; (800a76c <FATFS_LinkDriverEx+0x94>)
 800a718:	7a5b      	ldrb	r3, [r3, #9]
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	461a      	mov	r2, r3
 800a71e:	4b13      	ldr	r3, [pc, #76]	; (800a76c <FATFS_LinkDriverEx+0x94>)
 800a720:	4413      	add	r3, r2
 800a722:	79fa      	ldrb	r2, [r7, #7]
 800a724:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a726:	4b11      	ldr	r3, [pc, #68]	; (800a76c <FATFS_LinkDriverEx+0x94>)
 800a728:	7a5b      	ldrb	r3, [r3, #9]
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	1c5a      	adds	r2, r3, #1
 800a72e:	b2d1      	uxtb	r1, r2
 800a730:	4a0e      	ldr	r2, [pc, #56]	; (800a76c <FATFS_LinkDriverEx+0x94>)
 800a732:	7251      	strb	r1, [r2, #9]
 800a734:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a736:	7dbb      	ldrb	r3, [r7, #22]
 800a738:	3330      	adds	r3, #48	; 0x30
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	3301      	adds	r3, #1
 800a744:	223a      	movs	r2, #58	; 0x3a
 800a746:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	3302      	adds	r3, #2
 800a74c:	222f      	movs	r2, #47	; 0x2f
 800a74e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	3303      	adds	r3, #3
 800a754:	2200      	movs	r2, #0
 800a756:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a758:	2300      	movs	r3, #0
 800a75a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800a75c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	371c      	adds	r7, #28
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	20000820 	.word	0x20000820

0800a770 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a77a:	2200      	movs	r2, #0
 800a77c:	6839      	ldr	r1, [r7, #0]
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f7ff ffaa 	bl	800a6d8 <FATFS_LinkDriverEx>
 800a784:	4603      	mov	r3, r0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3708      	adds	r7, #8
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a78e:	b480      	push	{r7}
 800a790:	b085      	sub	sp, #20
 800a792:	af00      	add	r7, sp, #0
 800a794:	4603      	mov	r3, r0
 800a796:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a798:	2300      	movs	r3, #0
 800a79a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a79c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a7a0:	2b84      	cmp	r3, #132	; 0x84
 800a7a2:	d005      	beq.n	800a7b0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a7a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	3303      	adds	r3, #3
 800a7ae:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3714      	adds	r7, #20
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b083      	sub	sp, #12
 800a7c2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7c4:	f3ef 8305 	mrs	r3, IPSR
 800a7c8:	607b      	str	r3, [r7, #4]
  return(result);
 800a7ca:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	bf14      	ite	ne
 800a7d0:	2301      	movne	r3, #1
 800a7d2:	2300      	moveq	r3, #0
 800a7d4:	b2db      	uxtb	r3, r3
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr

0800a7e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a7e6:	f001 f937 	bl	800ba58 <vTaskStartScheduler>
  
  return osOK;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a7f4:	f7ff ffe3 	bl	800a7be <inHandlerMode>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d003      	beq.n	800a806 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a7fe:	f001 fa33 	bl	800bc68 <xTaskGetTickCountFromISR>
 800a802:	4603      	mov	r3, r0
 800a804:	e002      	b.n	800a80c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a806:	f001 fa1f 	bl	800bc48 <xTaskGetTickCount>
 800a80a:	4603      	mov	r3, r0
  }
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a812:	b087      	sub	sp, #28
 800a814:	af02      	add	r7, sp, #8
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	685c      	ldr	r4, [r3, #4]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a826:	b29e      	uxth	r6, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a82e:	4618      	mov	r0, r3
 800a830:	f7ff ffad 	bl	800a78e <makeFreeRtosPriority>
 800a834:	4602      	mov	r2, r0
 800a836:	f107 030c 	add.w	r3, r7, #12
 800a83a:	9301      	str	r3, [sp, #4]
 800a83c:	9200      	str	r2, [sp, #0]
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	4632      	mov	r2, r6
 800a842:	4629      	mov	r1, r5
 800a844:	4620      	mov	r0, r4
 800a846:	f000 ff9d 	bl	800b784 <xTaskCreate>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d001      	beq.n	800a854 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800a850:	2300      	movs	r3, #0
 800a852:	e000      	b.n	800a856 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800a854:	68fb      	ldr	r3, [r7, #12]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3714      	adds	r7, #20
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a85e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b084      	sub	sp, #16
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d001      	beq.n	800a874 <osDelay+0x16>
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	e000      	b.n	800a876 <osDelay+0x18>
 800a874:	2301      	movs	r3, #1
 800a876:	4618      	mov	r0, r3
 800a878:	f001 f8ba 	bl	800b9f0 <vTaskDelay>
  
  return osOK;
 800a87c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b082      	sub	sp, #8
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800a88e:	2001      	movs	r0, #1
 800a890:	f000 fa37 	bl	800ad02 <xQueueCreateMutex>
 800a894:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800a896:	4618      	mov	r0, r3
 800a898:	3708      	adds	r7, #8
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
	...

0800a8a0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d101      	bne.n	800a8b8 <osMutexWait+0x18>
    return osErrorParameter;
 800a8b4:	2380      	movs	r3, #128	; 0x80
 800a8b6:	e03c      	b.n	800a932 <osMutexWait+0x92>
  }
  
  ticks = 0;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c2:	d103      	bne.n	800a8cc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8c8:	60fb      	str	r3, [r7, #12]
 800a8ca:	e009      	b.n	800a8e0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d006      	beq.n	800a8e0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d101      	bne.n	800a8e0 <osMutexWait+0x40>
      ticks = 1;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a8e0:	f7ff ff6d 	bl	800a7be <inHandlerMode>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d017      	beq.n	800a91a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a8ea:	f107 0308 	add.w	r3, r7, #8
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fd58 	bl	800b3a8 <xQueueReceiveFromISR>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d001      	beq.n	800a902 <osMutexWait+0x62>
      return osErrorOS;
 800a8fe:	23ff      	movs	r3, #255	; 0xff
 800a900:	e017      	b.n	800a932 <osMutexWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d013      	beq.n	800a930 <osMutexWait+0x90>
 800a908:	4b0c      	ldr	r3, [pc, #48]	; (800a93c <osMutexWait+0x9c>)
 800a90a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	e00a      	b.n	800a930 <osMutexWait+0x90>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a91a:	2300      	movs	r3, #0
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	2100      	movs	r1, #0
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 fc2b 	bl	800b17c <xQueueGenericReceive>
 800a926:	4603      	mov	r3, r0
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d001      	beq.n	800a930 <osMutexWait+0x90>
    return osErrorOS;
 800a92c:	23ff      	movs	r3, #255	; 0xff
 800a92e:	e000      	b.n	800a932 <osMutexWait+0x92>
  }
  
  return osOK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	e000ed04 	.word	0xe000ed04

0800a940 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a948:	2300      	movs	r3, #0
 800a94a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a94c:	2300      	movs	r3, #0
 800a94e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a950:	f7ff ff35 	bl	800a7be <inHandlerMode>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d016      	beq.n	800a988 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a95a:	f107 0308 	add.w	r3, r7, #8
 800a95e:	4619      	mov	r1, r3
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fb7d 	bl	800b060 <xQueueGiveFromISR>
 800a966:	4603      	mov	r3, r0
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d001      	beq.n	800a970 <osMutexRelease+0x30>
      return osErrorOS;
 800a96c:	23ff      	movs	r3, #255	; 0xff
 800a96e:	e017      	b.n	800a9a0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d013      	beq.n	800a99e <osMutexRelease+0x5e>
 800a976:	4b0c      	ldr	r3, [pc, #48]	; (800a9a8 <osMutexRelease+0x68>)
 800a978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a97c:	601a      	str	r2, [r3, #0]
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	e00a      	b.n	800a99e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a988:	2300      	movs	r3, #0
 800a98a:	2200      	movs	r2, #0
 800a98c:	2100      	movs	r1, #0
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 f9d0 	bl	800ad34 <xQueueGenericSend>
 800a994:	4603      	mov	r3, r0
 800a996:	2b01      	cmp	r3, #1
 800a998:	d001      	beq.n	800a99e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a99a:	23ff      	movs	r3, #255	; 0xff
 800a99c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a99e:	68fb      	ldr	r3, [r7, #12]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	e000ed04 	.word	0xe000ed04

0800a9ac <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800a9b0:	f001 fc92 	bl	800c2d8 <xTaskGetSchedulerState>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d001      	beq.n	800a9be <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800a9ba:	f002 fa8d 	bl	800ced8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800a9be:	bf00      	nop
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800a9c2:	b480      	push	{r7}
 800a9c4:	b083      	sub	sp, #12
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
 800a9ca:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 800a9cc:	2381      	movs	r3, #129	; 0x81
#endif
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	370c      	adds	r7, #12
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b083      	sub	sp, #12
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f103 0208 	add.w	r2, r3, #8
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f103 0208 	add.w	r2, r3, #8
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f103 0208 	add.w	r2, r3, #8
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa0e:	bf00      	nop
 800aa10:	370c      	adds	r7, #12
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa1a:	b480      	push	{r7}
 800aa1c:	b083      	sub	sp, #12
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa28:	bf00      	nop
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	689a      	ldr	r2, [r3, #8]
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	683a      	ldr	r2, [r7, #0]
 800aa58:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	683a      	ldr	r2, [r7, #0]
 800aa5e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	1c5a      	adds	r2, r3, #1
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	601a      	str	r2, [r3, #0]
}
 800aa70:	bf00      	nop
 800aa72:	3714      	adds	r7, #20
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa92:	d103      	bne.n	800aa9c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	691b      	ldr	r3, [r3, #16]
 800aa98:	60fb      	str	r3, [r7, #12]
 800aa9a:	e00c      	b.n	800aab6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	3308      	adds	r3, #8
 800aaa0:	60fb      	str	r3, [r7, #12]
 800aaa2:	e002      	b.n	800aaaa <vListInsert+0x2e>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	60fb      	str	r3, [r7, #12]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	68ba      	ldr	r2, [r7, #8]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d2f6      	bcs.n	800aaa4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	685a      	ldr	r2, [r3, #4]
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	683a      	ldr	r2, [r7, #0]
 800aad0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	1c5a      	adds	r2, r3, #1
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	601a      	str	r2, [r3, #0]
}
 800aae2:	bf00      	nop
 800aae4:	3714      	adds	r7, #20
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aaee:	b480      	push	{r7}
 800aaf0:	b085      	sub	sp, #20
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	6892      	ldr	r2, [r2, #8]
 800ab04:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	689b      	ldr	r3, [r3, #8]
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	6852      	ldr	r2, [r2, #4]
 800ab0e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d103      	bne.n	800ab22 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	689a      	ldr	r2, [r3, #8]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	1e5a      	subs	r2, r3, #1
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
	...

0800ab44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d10a      	bne.n	800ab6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5c:	f383 8811 	msr	BASEPRI, r3
 800ab60:	f3bf 8f6f 	isb	sy
 800ab64:	f3bf 8f4f 	dsb	sy
 800ab68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800ab6a:	bf00      	nop
 800ab6c:	e7fe      	b.n	800ab6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab6e:	f002 f921 	bl	800cdb4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab7a:	68f9      	ldr	r1, [r7, #12]
 800ab7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab7e:	fb01 f303 	mul.w	r3, r1, r3
 800ab82:	441a      	add	r2, r3
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	68f9      	ldr	r1, [r7, #12]
 800aba2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aba4:	fb01 f303 	mul.w	r3, r1, r3
 800aba8:	441a      	add	r2, r3
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	22ff      	movs	r2, #255	; 0xff
 800abb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	22ff      	movs	r2, #255	; 0xff
 800abba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d114      	bne.n	800abee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	691b      	ldr	r3, [r3, #16]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d01a      	beq.n	800ac02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	3310      	adds	r3, #16
 800abd0:	4618      	mov	r0, r3
 800abd2:	f001 f9c5 	bl	800bf60 <xTaskRemoveFromEventList>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d012      	beq.n	800ac02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800abdc:	4b0c      	ldr	r3, [pc, #48]	; (800ac10 <xQueueGenericReset+0xcc>)
 800abde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abe2:	601a      	str	r2, [r3, #0]
 800abe4:	f3bf 8f4f 	dsb	sy
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	e009      	b.n	800ac02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	3310      	adds	r3, #16
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7ff fef1 	bl	800a9da <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	3324      	adds	r3, #36	; 0x24
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7ff feec 	bl	800a9da <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac02:	f002 f907 	bl	800ce14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac06:	2301      	movs	r3, #1
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	e000ed04 	.word	0xe000ed04

0800ac14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b08a      	sub	sp, #40	; 0x28
 800ac18:	af02      	add	r7, sp, #8
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	4613      	mov	r3, r2
 800ac20:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d10a      	bne.n	800ac3e <xQueueGenericCreate+0x2a>
	__asm volatile
 800ac28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2c:	f383 8811 	msr	BASEPRI, r3
 800ac30:	f3bf 8f6f 	isb	sy
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	613b      	str	r3, [r7, #16]
}
 800ac3a:	bf00      	nop
 800ac3c:	e7fe      	b.n	800ac3c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d102      	bne.n	800ac4a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ac44:	2300      	movs	r3, #0
 800ac46:	61fb      	str	r3, [r7, #28]
 800ac48:	e004      	b.n	800ac54 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	68ba      	ldr	r2, [r7, #8]
 800ac4e:	fb02 f303 	mul.w	r3, r2, r3
 800ac52:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	3350      	adds	r3, #80	; 0x50
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f002 f9c5 	bl	800cfe8 <pvPortMalloc>
 800ac5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00b      	beq.n	800ac7e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	3350      	adds	r3, #80	; 0x50
 800ac6a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac6c:	79fa      	ldrb	r2, [r7, #7]
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	9300      	str	r3, [sp, #0]
 800ac72:	4613      	mov	r3, r2
 800ac74:	697a      	ldr	r2, [r7, #20]
 800ac76:	68b9      	ldr	r1, [r7, #8]
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f000 f805 	bl	800ac88 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800ac7e:	69bb      	ldr	r3, [r7, #24]
	}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3720      	adds	r7, #32
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
 800ac94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d103      	bne.n	800aca4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	69ba      	ldr	r2, [r7, #24]
 800aca0:	601a      	str	r2, [r3, #0]
 800aca2:	e002      	b.n	800acaa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	68ba      	ldr	r2, [r7, #8]
 800acb4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800acb6:	2101      	movs	r1, #1
 800acb8:	69b8      	ldr	r0, [r7, #24]
 800acba:	f7ff ff43 	bl	800ab44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	78fa      	ldrb	r2, [r7, #3]
 800acc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800acc6:	bf00      	nop
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b082      	sub	sp, #8
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00e      	beq.n	800acfa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800acee:	2300      	movs	r3, #0
 800acf0:	2200      	movs	r2, #0
 800acf2:	2100      	movs	r1, #0
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 f81d 	bl	800ad34 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800acfa:	bf00      	nop
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b086      	sub	sp, #24
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	4603      	mov	r3, r0
 800ad0a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	617b      	str	r3, [r7, #20]
 800ad10:	2300      	movs	r3, #0
 800ad12:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ad14:	79fb      	ldrb	r3, [r7, #7]
 800ad16:	461a      	mov	r2, r3
 800ad18:	6939      	ldr	r1, [r7, #16]
 800ad1a:	6978      	ldr	r0, [r7, #20]
 800ad1c:	f7ff ff7a 	bl	800ac14 <xQueueGenericCreate>
 800ad20:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f7ff ffd3 	bl	800acce <prvInitialiseMutex>

		return pxNewQueue;
 800ad28:	68fb      	ldr	r3, [r7, #12]
	}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3718      	adds	r7, #24
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
	...

0800ad34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b08e      	sub	sp, #56	; 0x38
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
 800ad40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad42:	2300      	movs	r3, #0
 800ad44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d10a      	bne.n	800ad66 <xQueueGenericSend+0x32>
	__asm volatile
 800ad50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad54:	f383 8811 	msr	BASEPRI, r3
 800ad58:	f3bf 8f6f 	isb	sy
 800ad5c:	f3bf 8f4f 	dsb	sy
 800ad60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad62:	bf00      	nop
 800ad64:	e7fe      	b.n	800ad64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d103      	bne.n	800ad74 <xQueueGenericSend+0x40>
 800ad6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d101      	bne.n	800ad78 <xQueueGenericSend+0x44>
 800ad74:	2301      	movs	r3, #1
 800ad76:	e000      	b.n	800ad7a <xQueueGenericSend+0x46>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10a      	bne.n	800ad94 <xQueueGenericSend+0x60>
	__asm volatile
 800ad7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad90:	bf00      	nop
 800ad92:	e7fe      	b.n	800ad92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	d103      	bne.n	800ada2 <xQueueGenericSend+0x6e>
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d101      	bne.n	800ada6 <xQueueGenericSend+0x72>
 800ada2:	2301      	movs	r3, #1
 800ada4:	e000      	b.n	800ada8 <xQueueGenericSend+0x74>
 800ada6:	2300      	movs	r3, #0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d10a      	bne.n	800adc2 <xQueueGenericSend+0x8e>
	__asm volatile
 800adac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb0:	f383 8811 	msr	BASEPRI, r3
 800adb4:	f3bf 8f6f 	isb	sy
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	623b      	str	r3, [r7, #32]
}
 800adbe:	bf00      	nop
 800adc0:	e7fe      	b.n	800adc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adc2:	f001 fa89 	bl	800c2d8 <xTaskGetSchedulerState>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d102      	bne.n	800add2 <xQueueGenericSend+0x9e>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d101      	bne.n	800add6 <xQueueGenericSend+0xa2>
 800add2:	2301      	movs	r3, #1
 800add4:	e000      	b.n	800add8 <xQueueGenericSend+0xa4>
 800add6:	2300      	movs	r3, #0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10a      	bne.n	800adf2 <xQueueGenericSend+0xbe>
	__asm volatile
 800addc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade0:	f383 8811 	msr	BASEPRI, r3
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	61fb      	str	r3, [r7, #28]
}
 800adee:	bf00      	nop
 800adf0:	e7fe      	b.n	800adf0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adf2:	f001 ffdf 	bl	800cdb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d302      	bcc.n	800ae08 <xQueueGenericSend+0xd4>
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d129      	bne.n	800ae5c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae08:	683a      	ldr	r2, [r7, #0]
 800ae0a:	68b9      	ldr	r1, [r7, #8]
 800ae0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae0e:	f000 fb4b 	bl	800b4a8 <prvCopyDataToQueue>
 800ae12:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d010      	beq.n	800ae3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1e:	3324      	adds	r3, #36	; 0x24
 800ae20:	4618      	mov	r0, r3
 800ae22:	f001 f89d 	bl	800bf60 <xTaskRemoveFromEventList>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d013      	beq.n	800ae54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae2c:	4b3f      	ldr	r3, [pc, #252]	; (800af2c <xQueueGenericSend+0x1f8>)
 800ae2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae32:	601a      	str	r2, [r3, #0]
 800ae34:	f3bf 8f4f 	dsb	sy
 800ae38:	f3bf 8f6f 	isb	sy
 800ae3c:	e00a      	b.n	800ae54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d007      	beq.n	800ae54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae44:	4b39      	ldr	r3, [pc, #228]	; (800af2c <xQueueGenericSend+0x1f8>)
 800ae46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae4a:	601a      	str	r2, [r3, #0]
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae54:	f001 ffde 	bl	800ce14 <vPortExitCritical>
				return pdPASS;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e063      	b.n	800af24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d103      	bne.n	800ae6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae62:	f001 ffd7 	bl	800ce14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	e05c      	b.n	800af24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d106      	bne.n	800ae7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800ae70:	f107 0314 	add.w	r3, r7, #20
 800ae74:	4618      	mov	r0, r3
 800ae76:	f001 f8d5 	bl	800c024 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae7e:	f001 ffc9 	bl	800ce14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae82:	f000 fe37 	bl	800baf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae86:	f001 ff95 	bl	800cdb4 <vPortEnterCritical>
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae90:	b25b      	sxtb	r3, r3
 800ae92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae96:	d103      	bne.n	800aea0 <xQueueGenericSend+0x16c>
 800ae98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aea6:	b25b      	sxtb	r3, r3
 800aea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeac:	d103      	bne.n	800aeb6 <xQueueGenericSend+0x182>
 800aeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aeb6:	f001 ffad 	bl	800ce14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aeba:	1d3a      	adds	r2, r7, #4
 800aebc:	f107 0314 	add.w	r3, r7, #20
 800aec0:	4611      	mov	r1, r2
 800aec2:	4618      	mov	r0, r3
 800aec4:	f001 f8d2 	bl	800c06c <xTaskCheckForTimeOut>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d124      	bne.n	800af18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aed0:	f000 fbe2 	bl	800b698 <prvIsQueueFull>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d018      	beq.n	800af0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aedc:	3310      	adds	r3, #16
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	4611      	mov	r1, r2
 800aee2:	4618      	mov	r0, r3
 800aee4:	f000 ffec 	bl	800bec0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aeea:	f000 fb6d 	bl	800b5c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aeee:	f000 fe0f 	bl	800bb10 <xTaskResumeAll>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f47f af7c 	bne.w	800adf2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aefa:	4b0c      	ldr	r3, [pc, #48]	; (800af2c <xQueueGenericSend+0x1f8>)
 800aefc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af00:	601a      	str	r2, [r3, #0]
 800af02:	f3bf 8f4f 	dsb	sy
 800af06:	f3bf 8f6f 	isb	sy
 800af0a:	e772      	b.n	800adf2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af0e:	f000 fb5b 	bl	800b5c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af12:	f000 fdfd 	bl	800bb10 <xTaskResumeAll>
 800af16:	e76c      	b.n	800adf2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af1a:	f000 fb55 	bl	800b5c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af1e:	f000 fdf7 	bl	800bb10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af22:	2300      	movs	r3, #0
		}
	}
}
 800af24:	4618      	mov	r0, r3
 800af26:	3738      	adds	r7, #56	; 0x38
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	e000ed04 	.word	0xe000ed04

0800af30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b08e      	sub	sp, #56	; 0x38
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
 800af3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	2b00      	cmp	r3, #0
 800af46:	d10a      	bne.n	800af5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800af48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4c:	f383 8811 	msr	BASEPRI, r3
 800af50:	f3bf 8f6f 	isb	sy
 800af54:	f3bf 8f4f 	dsb	sy
 800af58:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af5a:	bf00      	nop
 800af5c:	e7fe      	b.n	800af5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d103      	bne.n	800af6c <xQueueGenericSendFromISR+0x3c>
 800af64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d101      	bne.n	800af70 <xQueueGenericSendFromISR+0x40>
 800af6c:	2301      	movs	r3, #1
 800af6e:	e000      	b.n	800af72 <xQueueGenericSendFromISR+0x42>
 800af70:	2300      	movs	r3, #0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10a      	bne.n	800af8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	623b      	str	r3, [r7, #32]
}
 800af88:	bf00      	nop
 800af8a:	e7fe      	b.n	800af8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d103      	bne.n	800af9a <xQueueGenericSendFromISR+0x6a>
 800af92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af96:	2b01      	cmp	r3, #1
 800af98:	d101      	bne.n	800af9e <xQueueGenericSendFromISR+0x6e>
 800af9a:	2301      	movs	r3, #1
 800af9c:	e000      	b.n	800afa0 <xQueueGenericSendFromISR+0x70>
 800af9e:	2300      	movs	r3, #0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10a      	bne.n	800afba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800afa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa8:	f383 8811 	msr	BASEPRI, r3
 800afac:	f3bf 8f6f 	isb	sy
 800afb0:	f3bf 8f4f 	dsb	sy
 800afb4:	61fb      	str	r3, [r7, #28]
}
 800afb6:	bf00      	nop
 800afb8:	e7fe      	b.n	800afb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afba:	f001 ffd5 	bl	800cf68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800afbe:	f3ef 8211 	mrs	r2, BASEPRI
 800afc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc6:	f383 8811 	msr	BASEPRI, r3
 800afca:	f3bf 8f6f 	isb	sy
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	61ba      	str	r2, [r7, #24]
 800afd4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800afd6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800afda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d302      	bcc.n	800afec <xQueueGenericSendFromISR+0xbc>
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d12c      	bne.n	800b046 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800afec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aff6:	683a      	ldr	r2, [r7, #0]
 800aff8:	68b9      	ldr	r1, [r7, #8]
 800affa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800affc:	f000 fa54 	bl	800b4a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b000:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b008:	d112      	bne.n	800b030 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d016      	beq.n	800b040 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b014:	3324      	adds	r3, #36	; 0x24
 800b016:	4618      	mov	r0, r3
 800b018:	f000 ffa2 	bl	800bf60 <xTaskRemoveFromEventList>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00e      	beq.n	800b040 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00b      	beq.n	800b040 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	601a      	str	r2, [r3, #0]
 800b02e:	e007      	b.n	800b040 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b030:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b034:	3301      	adds	r3, #1
 800b036:	b2db      	uxtb	r3, r3
 800b038:	b25a      	sxtb	r2, r3
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b040:	2301      	movs	r3, #1
 800b042:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b044:	e001      	b.n	800b04a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b046:	2300      	movs	r3, #0
 800b048:	637b      	str	r3, [r7, #52]	; 0x34
 800b04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
	);
}
 800b054:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3738      	adds	r7, #56	; 0x38
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b08e      	sub	sp, #56	; 0x38
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10a      	bne.n	800b08a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b078:	f383 8811 	msr	BASEPRI, r3
 800b07c:	f3bf 8f6f 	isb	sy
 800b080:	f3bf 8f4f 	dsb	sy
 800b084:	623b      	str	r3, [r7, #32]
}
 800b086:	bf00      	nop
 800b088:	e7fe      	b.n	800b088 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00a      	beq.n	800b0a8 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b096:	f383 8811 	msr	BASEPRI, r3
 800b09a:	f3bf 8f6f 	isb	sy
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	61fb      	str	r3, [r7, #28]
}
 800b0a4:	bf00      	nop
 800b0a6:	e7fe      	b.n	800b0a6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800b0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d103      	bne.n	800b0b8 <xQueueGiveFromISR+0x58>
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d101      	bne.n	800b0bc <xQueueGiveFromISR+0x5c>
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e000      	b.n	800b0be <xQueueGiveFromISR+0x5e>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d10a      	bne.n	800b0d8 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c6:	f383 8811 	msr	BASEPRI, r3
 800b0ca:	f3bf 8f6f 	isb	sy
 800b0ce:	f3bf 8f4f 	dsb	sy
 800b0d2:	61bb      	str	r3, [r7, #24]
}
 800b0d4:	bf00      	nop
 800b0d6:	e7fe      	b.n	800b0d6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0d8:	f001 ff46 	bl	800cf68 <vPortValidateInterruptPriority>
	__asm volatile
 800b0dc:	f3ef 8211 	mrs	r2, BASEPRI
 800b0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e4:	f383 8811 	msr	BASEPRI, r3
 800b0e8:	f3bf 8f6f 	isb	sy
 800b0ec:	f3bf 8f4f 	dsb	sy
 800b0f0:	617a      	str	r2, [r7, #20]
 800b0f2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b0f4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0fc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b104:	429a      	cmp	r2, r3
 800b106:	d22b      	bcs.n	800b160 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b10e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800b112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b114:	1c5a      	adds	r2, r3, #1
 800b116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b118:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b11a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b11e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b122:	d112      	bne.n	800b14a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d016      	beq.n	800b15a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12e:	3324      	adds	r3, #36	; 0x24
 800b130:	4618      	mov	r0, r3
 800b132:	f000 ff15 	bl	800bf60 <xTaskRemoveFromEventList>
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00e      	beq.n	800b15a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00b      	beq.n	800b15a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	2201      	movs	r2, #1
 800b146:	601a      	str	r2, [r3, #0]
 800b148:	e007      	b.n	800b15a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b14a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b14e:	3301      	adds	r3, #1
 800b150:	b2db      	uxtb	r3, r3
 800b152:	b25a      	sxtb	r2, r3
 800b154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b15a:	2301      	movs	r3, #1
 800b15c:	637b      	str	r3, [r7, #52]	; 0x34
 800b15e:	e001      	b.n	800b164 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b160:	2300      	movs	r3, #0
 800b162:	637b      	str	r3, [r7, #52]	; 0x34
 800b164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b166:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f383 8811 	msr	BASEPRI, r3
}
 800b16e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b172:	4618      	mov	r0, r3
 800b174:	3738      	adds	r7, #56	; 0x38
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
	...

0800b17c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b08e      	sub	sp, #56	; 0x38
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
 800b188:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b18a:	2300      	movs	r3, #0
 800b18c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b194:	2b00      	cmp	r3, #0
 800b196:	d10a      	bne.n	800b1ae <xQueueGenericReceive+0x32>
	__asm volatile
 800b198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19c:	f383 8811 	msr	BASEPRI, r3
 800b1a0:	f3bf 8f6f 	isb	sy
 800b1a4:	f3bf 8f4f 	dsb	sy
 800b1a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b1aa:	bf00      	nop
 800b1ac:	e7fe      	b.n	800b1ac <xQueueGenericReceive+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d103      	bne.n	800b1bc <xQueueGenericReceive+0x40>
 800b1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d101      	bne.n	800b1c0 <xQueueGenericReceive+0x44>
 800b1bc:	2301      	movs	r3, #1
 800b1be:	e000      	b.n	800b1c2 <xQueueGenericReceive+0x46>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10a      	bne.n	800b1dc <xQueueGenericReceive+0x60>
	__asm volatile
 800b1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ca:	f383 8811 	msr	BASEPRI, r3
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	f3bf 8f4f 	dsb	sy
 800b1d6:	623b      	str	r3, [r7, #32]
}
 800b1d8:	bf00      	nop
 800b1da:	e7fe      	b.n	800b1da <xQueueGenericReceive+0x5e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1dc:	f001 f87c 	bl	800c2d8 <xTaskGetSchedulerState>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d102      	bne.n	800b1ec <xQueueGenericReceive+0x70>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d101      	bne.n	800b1f0 <xQueueGenericReceive+0x74>
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	e000      	b.n	800b1f2 <xQueueGenericReceive+0x76>
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d10a      	bne.n	800b20c <xQueueGenericReceive+0x90>
	__asm volatile
 800b1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fa:	f383 8811 	msr	BASEPRI, r3
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	61fb      	str	r3, [r7, #28]
}
 800b208:	bf00      	nop
 800b20a:	e7fe      	b.n	800b20a <xQueueGenericReceive+0x8e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b20c:	f001 fdd2 	bl	800cdb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b214:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d046      	beq.n	800b2aa <xQueueGenericReceive+0x12e>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800b21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b222:	68b9      	ldr	r1, [r7, #8]
 800b224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b226:	f000 f9a9 	bl	800b57c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d121      	bne.n	800b274 <xQueueGenericReceive+0xf8>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800b230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b232:	1e5a      	subs	r2, r3, #1
 800b234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b236:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d104      	bne.n	800b24a <xQueueGenericReceive+0xce>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800b240:	f001 f964 	bl	800c50c <pvTaskIncrementMutexHeldCount>
 800b244:	4602      	mov	r2, r0
 800b246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b248:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24c:	691b      	ldr	r3, [r3, #16]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d027      	beq.n	800b2a2 <xQueueGenericReceive+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b254:	3310      	adds	r3, #16
 800b256:	4618      	mov	r0, r3
 800b258:	f000 fe82 	bl	800bf60 <xTaskRemoveFromEventList>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d01f      	beq.n	800b2a2 <xQueueGenericReceive+0x126>
						{
							queueYIELD_IF_USING_PREEMPTION();
 800b262:	4b50      	ldr	r3, [pc, #320]	; (800b3a4 <xQueueGenericReceive+0x228>)
 800b264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b268:	601a      	str	r2, [r3, #0]
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	e016      	b.n	800b2a2 <xQueueGenericReceive+0x126>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800b274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b278:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d00f      	beq.n	800b2a2 <xQueueGenericReceive+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b284:	3324      	adds	r3, #36	; 0x24
 800b286:	4618      	mov	r0, r3
 800b288:	f000 fe6a 	bl	800bf60 <xTaskRemoveFromEventList>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d007      	beq.n	800b2a2 <xQueueGenericReceive+0x126>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800b292:	4b44      	ldr	r3, [pc, #272]	; (800b3a4 <xQueueGenericReceive+0x228>)
 800b294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b298:	601a      	str	r2, [r3, #0]
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800b2a2:	f001 fdb7 	bl	800ce14 <vPortExitCritical>
				return pdPASS;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e077      	b.n	800b39a <xQueueGenericReceive+0x21e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d103      	bne.n	800b2b8 <xQueueGenericReceive+0x13c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b2b0:	f001 fdb0 	bl	800ce14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	e070      	b.n	800b39a <xQueueGenericReceive+0x21e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d106      	bne.n	800b2cc <xQueueGenericReceive+0x150>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800b2be:	f107 0314 	add.w	r3, r7, #20
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f000 feae 	bl	800c024 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b2cc:	f001 fda2 	bl	800ce14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b2d0:	f000 fc10 	bl	800baf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b2d4:	f001 fd6e 	bl	800cdb4 <vPortEnterCritical>
 800b2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2de:	b25b      	sxtb	r3, r3
 800b2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e4:	d103      	bne.n	800b2ee <xQueueGenericReceive+0x172>
 800b2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2f4:	b25b      	sxtb	r3, r3
 800b2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fa:	d103      	bne.n	800b304 <xQueueGenericReceive+0x188>
 800b2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fe:	2200      	movs	r2, #0
 800b300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b304:	f001 fd86 	bl	800ce14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b308:	1d3a      	adds	r2, r7, #4
 800b30a:	f107 0314 	add.w	r3, r7, #20
 800b30e:	4611      	mov	r1, r2
 800b310:	4618      	mov	r0, r3
 800b312:	f000 feab 	bl	800c06c <xTaskCheckForTimeOut>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d131      	bne.n	800b380 <xQueueGenericReceive+0x204>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b31c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b31e:	f000 f9a5 	bl	800b66c <prvIsQueueEmpty>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d025      	beq.n	800b374 <xQueueGenericReceive+0x1f8>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d108      	bne.n	800b342 <xQueueGenericReceive+0x1c6>
					{
						taskENTER_CRITICAL();
 800b330:	f001 fd40 	bl	800cdb4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800b334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	4618      	mov	r0, r3
 800b33a:	f000 ffeb 	bl	800c314 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800b33e:	f001 fd69 	bl	800ce14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b344:	3324      	adds	r3, #36	; 0x24
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	4611      	mov	r1, r2
 800b34a:	4618      	mov	r0, r3
 800b34c:	f000 fdb8 	bl	800bec0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b352:	f000 f939 	bl	800b5c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b356:	f000 fbdb 	bl	800bb10 <xTaskResumeAll>
 800b35a:	4603      	mov	r3, r0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	f47f af55 	bne.w	800b20c <xQueueGenericReceive+0x90>
				{
					portYIELD_WITHIN_API();
 800b362:	4b10      	ldr	r3, [pc, #64]	; (800b3a4 <xQueueGenericReceive+0x228>)
 800b364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b368:	601a      	str	r2, [r3, #0]
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	e74b      	b.n	800b20c <xQueueGenericReceive+0x90>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b376:	f000 f927 	bl	800b5c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b37a:	f000 fbc9 	bl	800bb10 <xTaskResumeAll>
 800b37e:	e745      	b.n	800b20c <xQueueGenericReceive+0x90>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800b380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b382:	f000 f921 	bl	800b5c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b386:	f000 fbc3 	bl	800bb10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b38a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b38c:	f000 f96e 	bl	800b66c <prvIsQueueEmpty>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	f43f af3a 	beq.w	800b20c <xQueueGenericReceive+0x90>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b398:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3738      	adds	r7, #56	; 0x38
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	e000ed04 	.word	0xe000ed04

0800b3a8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b08e      	sub	sp, #56	; 0x38
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d10a      	bne.n	800b3d4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c2:	f383 8811 	msr	BASEPRI, r3
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	623b      	str	r3, [r7, #32]
}
 800b3d0:	bf00      	nop
 800b3d2:	e7fe      	b.n	800b3d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d103      	bne.n	800b3e2 <xQueueReceiveFromISR+0x3a>
 800b3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d101      	bne.n	800b3e6 <xQueueReceiveFromISR+0x3e>
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e000      	b.n	800b3e8 <xQueueReceiveFromISR+0x40>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10a      	bne.n	800b402 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f0:	f383 8811 	msr	BASEPRI, r3
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	61fb      	str	r3, [r7, #28]
}
 800b3fe:	bf00      	nop
 800b400:	e7fe      	b.n	800b400 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b402:	f001 fdb1 	bl	800cf68 <vPortValidateInterruptPriority>
	__asm volatile
 800b406:	f3ef 8211 	mrs	r2, BASEPRI
 800b40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40e:	f383 8811 	msr	BASEPRI, r3
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	f3bf 8f4f 	dsb	sy
 800b41a:	61ba      	str	r2, [r7, #24]
 800b41c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b41e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b420:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b426:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d02f      	beq.n	800b48e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b438:	68b9      	ldr	r1, [r7, #8]
 800b43a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b43c:	f000 f89e 	bl	800b57c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800b440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b442:	1e5a      	subs	r2, r3, #1
 800b444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b446:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b448:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b44c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b450:	d112      	bne.n	800b478 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d016      	beq.n	800b488 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45c:	3310      	adds	r3, #16
 800b45e:	4618      	mov	r0, r3
 800b460:	f000 fd7e 	bl	800bf60 <xTaskRemoveFromEventList>
 800b464:	4603      	mov	r3, r0
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00e      	beq.n	800b488 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00b      	beq.n	800b488 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	601a      	str	r2, [r3, #0]
 800b476:	e007      	b.n	800b488 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b47c:	3301      	adds	r3, #1
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	b25a      	sxtb	r2, r3
 800b482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b488:	2301      	movs	r3, #1
 800b48a:	637b      	str	r3, [r7, #52]	; 0x34
 800b48c:	e001      	b.n	800b492 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b48e:	2300      	movs	r3, #0
 800b490:	637b      	str	r3, [r7, #52]	; 0x34
 800b492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b494:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	f383 8811 	msr	BASEPRI, r3
}
 800b49c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3738      	adds	r7, #56	; 0x38
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d10d      	bne.n	800b4e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d14d      	bne.n	800b56a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f000 ff94 	bl	800c400 <xTaskPriorityDisinherit>
 800b4d8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	605a      	str	r2, [r3, #4]
 800b4e0:	e043      	b.n	800b56a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d119      	bne.n	800b51c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6898      	ldr	r0, [r3, #8]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	68b9      	ldr	r1, [r7, #8]
 800b4f4:	f001 ffb6 	bl	800d464 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	689a      	ldr	r2, [r3, #8]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b500:	441a      	add	r2, r3
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	689a      	ldr	r2, [r3, #8]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d32b      	bcc.n	800b56a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	609a      	str	r2, [r3, #8]
 800b51a:	e026      	b.n	800b56a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	68d8      	ldr	r0, [r3, #12]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b524:	461a      	mov	r2, r3
 800b526:	68b9      	ldr	r1, [r7, #8]
 800b528:	f001 ff9c 	bl	800d464 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	68da      	ldr	r2, [r3, #12]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b534:	425b      	negs	r3, r3
 800b536:	441a      	add	r2, r3
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	68da      	ldr	r2, [r3, #12]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	429a      	cmp	r2, r3
 800b546:	d207      	bcs.n	800b558 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	685a      	ldr	r2, [r3, #4]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b550:	425b      	negs	r3, r3
 800b552:	441a      	add	r2, r3
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	d105      	bne.n	800b56a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d002      	beq.n	800b56a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	3b01      	subs	r3, #1
 800b568:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	1c5a      	adds	r2, r3, #1
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b572:	697b      	ldr	r3, [r7, #20]
}
 800b574:	4618      	mov	r0, r3
 800b576:	3718      	adds	r7, #24
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d018      	beq.n	800b5c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	68da      	ldr	r2, [r3, #12]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b596:	441a      	add	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	68da      	ldr	r2, [r3, #12]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d303      	bcc.n	800b5b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	68d9      	ldr	r1, [r3, #12]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	6838      	ldr	r0, [r7, #0]
 800b5bc:	f001 ff52 	bl	800d464 <memcpy>
	}
}
 800b5c0:	bf00      	nop
 800b5c2:	3708      	adds	r7, #8
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b5d0:	f001 fbf0 	bl	800cdb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5dc:	e011      	b.n	800b602 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d012      	beq.n	800b60c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	3324      	adds	r3, #36	; 0x24
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f000 fcb8 	bl	800bf60 <xTaskRemoveFromEventList>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d001      	beq.n	800b5fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b5f6:	f000 fd99 	bl	800c12c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b5fa:	7bfb      	ldrb	r3, [r7, #15]
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b606:	2b00      	cmp	r3, #0
 800b608:	dce9      	bgt.n	800b5de <prvUnlockQueue+0x16>
 800b60a:	e000      	b.n	800b60e <prvUnlockQueue+0x46>
					break;
 800b60c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	22ff      	movs	r2, #255	; 0xff
 800b612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b616:	f001 fbfd 	bl	800ce14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b61a:	f001 fbcb 	bl	800cdb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b624:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b626:	e011      	b.n	800b64c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d012      	beq.n	800b656 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	3310      	adds	r3, #16
 800b634:	4618      	mov	r0, r3
 800b636:	f000 fc93 	bl	800bf60 <xTaskRemoveFromEventList>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d001      	beq.n	800b644 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b640:	f000 fd74 	bl	800c12c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b644:	7bbb      	ldrb	r3, [r7, #14]
 800b646:	3b01      	subs	r3, #1
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b64c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b650:	2b00      	cmp	r3, #0
 800b652:	dce9      	bgt.n	800b628 <prvUnlockQueue+0x60>
 800b654:	e000      	b.n	800b658 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b656:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	22ff      	movs	r2, #255	; 0xff
 800b65c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b660:	f001 fbd8 	bl	800ce14 <vPortExitCritical>
}
 800b664:	bf00      	nop
 800b666:	3710      	adds	r7, #16
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b674:	f001 fb9e 	bl	800cdb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d102      	bne.n	800b686 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b680:	2301      	movs	r3, #1
 800b682:	60fb      	str	r3, [r7, #12]
 800b684:	e001      	b.n	800b68a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b686:	2300      	movs	r3, #0
 800b688:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b68a:	f001 fbc3 	bl	800ce14 <vPortExitCritical>

	return xReturn;
 800b68e:	68fb      	ldr	r3, [r7, #12]
}
 800b690:	4618      	mov	r0, r3
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6a0:	f001 fb88 	bl	800cdb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d102      	bne.n	800b6b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	60fb      	str	r3, [r7, #12]
 800b6b4:	e001      	b.n	800b6ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b6ba:	f001 fbab 	bl	800ce14 <vPortExitCritical>

	return xReturn;
 800b6be:	68fb      	ldr	r3, [r7, #12]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3710      	adds	r7, #16
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	60fb      	str	r3, [r7, #12]
 800b6d6:	e014      	b.n	800b702 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b6d8:	4a0f      	ldr	r2, [pc, #60]	; (800b718 <vQueueAddToRegistry+0x50>)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d10b      	bne.n	800b6fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b6e4:	490c      	ldr	r1, [pc, #48]	; (800b718 <vQueueAddToRegistry+0x50>)
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	683a      	ldr	r2, [r7, #0]
 800b6ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b6ee:	4a0a      	ldr	r2, [pc, #40]	; (800b718 <vQueueAddToRegistry+0x50>)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	00db      	lsls	r3, r3, #3
 800b6f4:	4413      	add	r3, r2
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b6fa:	e006      	b.n	800b70a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	3301      	adds	r3, #1
 800b700:	60fb      	str	r3, [r7, #12]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2b07      	cmp	r3, #7
 800b706:	d9e7      	bls.n	800b6d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b708:	bf00      	nop
 800b70a:	bf00      	nop
 800b70c:	3714      	adds	r7, #20
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	2000082c 	.word	0x2000082c

0800b71c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b086      	sub	sp, #24
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b72c:	f001 fb42 	bl	800cdb4 <vPortEnterCritical>
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b736:	b25b      	sxtb	r3, r3
 800b738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b73c:	d103      	bne.n	800b746 <vQueueWaitForMessageRestricted+0x2a>
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	2200      	movs	r2, #0
 800b742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b74c:	b25b      	sxtb	r3, r3
 800b74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b752:	d103      	bne.n	800b75c <vQueueWaitForMessageRestricted+0x40>
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	2200      	movs	r2, #0
 800b758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b75c:	f001 fb5a 	bl	800ce14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b764:	2b00      	cmp	r3, #0
 800b766:	d106      	bne.n	800b776 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	3324      	adds	r3, #36	; 0x24
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	68b9      	ldr	r1, [r7, #8]
 800b770:	4618      	mov	r0, r3
 800b772:	f000 fbc9 	bl	800bf08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b776:	6978      	ldr	r0, [r7, #20]
 800b778:	f7ff ff26 	bl	800b5c8 <prvUnlockQueue>
	}
 800b77c:	bf00      	nop
 800b77e:	3718      	adds	r7, #24
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b784:	b580      	push	{r7, lr}
 800b786:	b08c      	sub	sp, #48	; 0x30
 800b788:	af04      	add	r7, sp, #16
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	603b      	str	r3, [r7, #0]
 800b790:	4613      	mov	r3, r2
 800b792:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b794:	88fb      	ldrh	r3, [r7, #6]
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	4618      	mov	r0, r3
 800b79a:	f001 fc25 	bl	800cfe8 <pvPortMalloc>
 800b79e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00e      	beq.n	800b7c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b7a6:	205c      	movs	r0, #92	; 0x5c
 800b7a8:	f001 fc1e 	bl	800cfe8 <pvPortMalloc>
 800b7ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d003      	beq.n	800b7bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	697a      	ldr	r2, [r7, #20]
 800b7b8:	631a      	str	r2, [r3, #48]	; 0x30
 800b7ba:	e005      	b.n	800b7c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b7bc:	6978      	ldr	r0, [r7, #20]
 800b7be:	f001 fcd7 	bl	800d170 <vPortFree>
 800b7c2:	e001      	b.n	800b7c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d013      	beq.n	800b7f6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b7ce:	88fa      	ldrh	r2, [r7, #6]
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	9303      	str	r3, [sp, #12]
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	9302      	str	r3, [sp, #8]
 800b7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7da:	9301      	str	r3, [sp, #4]
 800b7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	68b9      	ldr	r1, [r7, #8]
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f000 f80e 	bl	800b806 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b7ea:	69f8      	ldr	r0, [r7, #28]
 800b7ec:	f000 f892 	bl	800b914 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	61bb      	str	r3, [r7, #24]
 800b7f4:	e002      	b.n	800b7fc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b7f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b7fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b7fc:	69bb      	ldr	r3, [r7, #24]
	}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3720      	adds	r7, #32
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b088      	sub	sp, #32
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	60f8      	str	r0, [r7, #12]
 800b80e:	60b9      	str	r1, [r7, #8]
 800b810:	607a      	str	r2, [r7, #4]
 800b812:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b816:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	461a      	mov	r2, r3
 800b81e:	21a5      	movs	r1, #165	; 0xa5
 800b820:	f001 fe2e 	bl	800d480 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b82e:	3b01      	subs	r3, #1
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	4413      	add	r3, r2
 800b834:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	f023 0307 	bic.w	r3, r3, #7
 800b83c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	f003 0307 	and.w	r3, r3, #7
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00a      	beq.n	800b85e <prvInitialiseNewTask+0x58>
	__asm volatile
 800b848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84c:	f383 8811 	msr	BASEPRI, r3
 800b850:	f3bf 8f6f 	isb	sy
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	617b      	str	r3, [r7, #20]
}
 800b85a:	bf00      	nop
 800b85c:	e7fe      	b.n	800b85c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b85e:	2300      	movs	r3, #0
 800b860:	61fb      	str	r3, [r7, #28]
 800b862:	e012      	b.n	800b88a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b864:	68ba      	ldr	r2, [r7, #8]
 800b866:	69fb      	ldr	r3, [r7, #28]
 800b868:	4413      	add	r3, r2
 800b86a:	7819      	ldrb	r1, [r3, #0]
 800b86c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	4413      	add	r3, r2
 800b872:	3334      	adds	r3, #52	; 0x34
 800b874:	460a      	mov	r2, r1
 800b876:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	4413      	add	r3, r2
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d006      	beq.n	800b892 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	3301      	adds	r3, #1
 800b888:	61fb      	str	r3, [r7, #28]
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	2b0f      	cmp	r3, #15
 800b88e:	d9e9      	bls.n	800b864 <prvInitialiseNewTask+0x5e>
 800b890:	e000      	b.n	800b894 <prvInitialiseNewTask+0x8e>
		{
			break;
 800b892:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b896:	2200      	movs	r2, #0
 800b898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89e:	2b06      	cmp	r3, #6
 800b8a0:	d901      	bls.n	800b8a6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b8a2:	2306      	movs	r3, #6
 800b8a4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8b0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ba:	3304      	adds	r3, #4
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7ff f8ac 	bl	800aa1a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c4:	3318      	adds	r3, #24
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7ff f8a7 	bl	800aa1a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d4:	f1c3 0207 	rsb	r2, r3, #7
 800b8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	68f9      	ldr	r1, [r7, #12]
 800b8f4:	69b8      	ldr	r0, [r7, #24]
 800b8f6:	f001 f955 	bl	800cba4 <pxPortInitialiseStack>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b902:	2b00      	cmp	r3, #0
 800b904:	d002      	beq.n	800b90c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b90a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b90c:	bf00      	nop
 800b90e:	3720      	adds	r7, #32
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b91c:	f001 fa4a 	bl	800cdb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b920:	4b2c      	ldr	r3, [pc, #176]	; (800b9d4 <prvAddNewTaskToReadyList+0xc0>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	3301      	adds	r3, #1
 800b926:	4a2b      	ldr	r2, [pc, #172]	; (800b9d4 <prvAddNewTaskToReadyList+0xc0>)
 800b928:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b92a:	4b2b      	ldr	r3, [pc, #172]	; (800b9d8 <prvAddNewTaskToReadyList+0xc4>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d109      	bne.n	800b946 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b932:	4a29      	ldr	r2, [pc, #164]	; (800b9d8 <prvAddNewTaskToReadyList+0xc4>)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b938:	4b26      	ldr	r3, [pc, #152]	; (800b9d4 <prvAddNewTaskToReadyList+0xc0>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d110      	bne.n	800b962 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b940:	f000 fc18 	bl	800c174 <prvInitialiseTaskLists>
 800b944:	e00d      	b.n	800b962 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b946:	4b25      	ldr	r3, [pc, #148]	; (800b9dc <prvAddNewTaskToReadyList+0xc8>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d109      	bne.n	800b962 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b94e:	4b22      	ldr	r3, [pc, #136]	; (800b9d8 <prvAddNewTaskToReadyList+0xc4>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b958:	429a      	cmp	r2, r3
 800b95a:	d802      	bhi.n	800b962 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b95c:	4a1e      	ldr	r2, [pc, #120]	; (800b9d8 <prvAddNewTaskToReadyList+0xc4>)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b962:	4b1f      	ldr	r3, [pc, #124]	; (800b9e0 <prvAddNewTaskToReadyList+0xcc>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	3301      	adds	r3, #1
 800b968:	4a1d      	ldr	r2, [pc, #116]	; (800b9e0 <prvAddNewTaskToReadyList+0xcc>)
 800b96a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b96c:	4b1c      	ldr	r3, [pc, #112]	; (800b9e0 <prvAddNewTaskToReadyList+0xcc>)
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b978:	2201      	movs	r2, #1
 800b97a:	409a      	lsls	r2, r3
 800b97c:	4b19      	ldr	r3, [pc, #100]	; (800b9e4 <prvAddNewTaskToReadyList+0xd0>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4313      	orrs	r3, r2
 800b982:	4a18      	ldr	r2, [pc, #96]	; (800b9e4 <prvAddNewTaskToReadyList+0xd0>)
 800b984:	6013      	str	r3, [r2, #0]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98a:	4613      	mov	r3, r2
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4413      	add	r3, r2
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	4a15      	ldr	r2, [pc, #84]	; (800b9e8 <prvAddNewTaskToReadyList+0xd4>)
 800b994:	441a      	add	r2, r3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	3304      	adds	r3, #4
 800b99a:	4619      	mov	r1, r3
 800b99c:	4610      	mov	r0, r2
 800b99e:	f7ff f849 	bl	800aa34 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b9a2:	f001 fa37 	bl	800ce14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b9a6:	4b0d      	ldr	r3, [pc, #52]	; (800b9dc <prvAddNewTaskToReadyList+0xc8>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00e      	beq.n	800b9cc <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b9ae:	4b0a      	ldr	r3, [pc, #40]	; (800b9d8 <prvAddNewTaskToReadyList+0xc4>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d207      	bcs.n	800b9cc <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b9bc:	4b0b      	ldr	r3, [pc, #44]	; (800b9ec <prvAddNewTaskToReadyList+0xd8>)
 800b9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9c2:	601a      	str	r2, [r3, #0]
 800b9c4:	f3bf 8f4f 	dsb	sy
 800b9c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9cc:	bf00      	nop
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	2000096c 	.word	0x2000096c
 800b9d8:	2000086c 	.word	0x2000086c
 800b9dc:	20000978 	.word	0x20000978
 800b9e0:	20000988 	.word	0x20000988
 800b9e4:	20000974 	.word	0x20000974
 800b9e8:	20000870 	.word	0x20000870
 800b9ec:	e000ed04 	.word	0xe000ed04

0800b9f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d017      	beq.n	800ba32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ba02:	4b13      	ldr	r3, [pc, #76]	; (800ba50 <vTaskDelay+0x60>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00a      	beq.n	800ba20 <vTaskDelay+0x30>
	__asm volatile
 800ba0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	60bb      	str	r3, [r7, #8]
}
 800ba1c:	bf00      	nop
 800ba1e:	e7fe      	b.n	800ba1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ba20:	f000 f868 	bl	800baf4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ba24:	2100      	movs	r1, #0
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fd84 	bl	800c534 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ba2c:	f000 f870 	bl	800bb10 <xTaskResumeAll>
 800ba30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d107      	bne.n	800ba48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ba38:	4b06      	ldr	r3, [pc, #24]	; (800ba54 <vTaskDelay+0x64>)
 800ba3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba3e:	601a      	str	r2, [r3, #0]
 800ba40:	f3bf 8f4f 	dsb	sy
 800ba44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba48:	bf00      	nop
 800ba4a:	3710      	adds	r7, #16
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	20000994 	.word	0x20000994
 800ba54:	e000ed04 	.word	0xe000ed04

0800ba58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800ba5e:	4b1f      	ldr	r3, [pc, #124]	; (800badc <vTaskStartScheduler+0x84>)
 800ba60:	9301      	str	r3, [sp, #4]
 800ba62:	2300      	movs	r3, #0
 800ba64:	9300      	str	r3, [sp, #0]
 800ba66:	2300      	movs	r3, #0
 800ba68:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba6c:	491c      	ldr	r1, [pc, #112]	; (800bae0 <vTaskStartScheduler+0x88>)
 800ba6e:	481d      	ldr	r0, [pc, #116]	; (800bae4 <vTaskStartScheduler+0x8c>)
 800ba70:	f7ff fe88 	bl	800b784 <xTaskCreate>
 800ba74:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d102      	bne.n	800ba82 <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 800ba7c:	f000 fdc0 	bl	800c600 <xTimerCreateTimerTask>
 800ba80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d116      	bne.n	800bab6 <vTaskStartScheduler+0x5e>
	__asm volatile
 800ba88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8c:	f383 8811 	msr	BASEPRI, r3
 800ba90:	f3bf 8f6f 	isb	sy
 800ba94:	f3bf 8f4f 	dsb	sy
 800ba98:	60bb      	str	r3, [r7, #8]
}
 800ba9a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ba9c:	4b12      	ldr	r3, [pc, #72]	; (800bae8 <vTaskStartScheduler+0x90>)
 800ba9e:	f04f 32ff 	mov.w	r2, #4294967295
 800baa2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800baa4:	4b11      	ldr	r3, [pc, #68]	; (800baec <vTaskStartScheduler+0x94>)
 800baa6:	2201      	movs	r2, #1
 800baa8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800baaa:	4b11      	ldr	r3, [pc, #68]	; (800baf0 <vTaskStartScheduler+0x98>)
 800baac:	2200      	movs	r2, #0
 800baae:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bab0:	f001 f8f2 	bl	800cc98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bab4:	e00e      	b.n	800bad4 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800babc:	d10a      	bne.n	800bad4 <vTaskStartScheduler+0x7c>
	__asm volatile
 800babe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac2:	f383 8811 	msr	BASEPRI, r3
 800bac6:	f3bf 8f6f 	isb	sy
 800baca:	f3bf 8f4f 	dsb	sy
 800bace:	607b      	str	r3, [r7, #4]
}
 800bad0:	bf00      	nop
 800bad2:	e7fe      	b.n	800bad2 <vTaskStartScheduler+0x7a>
}
 800bad4:	bf00      	nop
 800bad6:	3710      	adds	r7, #16
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	20000990 	.word	0x20000990
 800bae0:	080109f8 	.word	0x080109f8
 800bae4:	0800c145 	.word	0x0800c145
 800bae8:	2000098c 	.word	0x2000098c
 800baec:	20000978 	.word	0x20000978
 800baf0:	20000970 	.word	0x20000970

0800baf4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800baf4:	b480      	push	{r7}
 800baf6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800baf8:	4b04      	ldr	r3, [pc, #16]	; (800bb0c <vTaskSuspendAll+0x18>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	3301      	adds	r3, #1
 800bafe:	4a03      	ldr	r2, [pc, #12]	; (800bb0c <vTaskSuspendAll+0x18>)
 800bb00:	6013      	str	r3, [r2, #0]
}
 800bb02:	bf00      	nop
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr
 800bb0c:	20000994 	.word	0x20000994

0800bb10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bb16:	2300      	movs	r3, #0
 800bb18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bb1e:	4b41      	ldr	r3, [pc, #260]	; (800bc24 <xTaskResumeAll+0x114>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d10a      	bne.n	800bb3c <xTaskResumeAll+0x2c>
	__asm volatile
 800bb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2a:	f383 8811 	msr	BASEPRI, r3
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	603b      	str	r3, [r7, #0]
}
 800bb38:	bf00      	nop
 800bb3a:	e7fe      	b.n	800bb3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bb3c:	f001 f93a 	bl	800cdb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bb40:	4b38      	ldr	r3, [pc, #224]	; (800bc24 <xTaskResumeAll+0x114>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	3b01      	subs	r3, #1
 800bb46:	4a37      	ldr	r2, [pc, #220]	; (800bc24 <xTaskResumeAll+0x114>)
 800bb48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb4a:	4b36      	ldr	r3, [pc, #216]	; (800bc24 <xTaskResumeAll+0x114>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d161      	bne.n	800bc16 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bb52:	4b35      	ldr	r3, [pc, #212]	; (800bc28 <xTaskResumeAll+0x118>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d05d      	beq.n	800bc16 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb5a:	e02e      	b.n	800bbba <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800bb5c:	4b33      	ldr	r3, [pc, #204]	; (800bc2c <xTaskResumeAll+0x11c>)
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	3318      	adds	r3, #24
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fe ffc0 	bl	800aaee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	3304      	adds	r3, #4
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fe ffbb 	bl	800aaee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	409a      	lsls	r2, r3
 800bb80:	4b2b      	ldr	r3, [pc, #172]	; (800bc30 <xTaskResumeAll+0x120>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	4a2a      	ldr	r2, [pc, #168]	; (800bc30 <xTaskResumeAll+0x120>)
 800bb88:	6013      	str	r3, [r2, #0]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb8e:	4613      	mov	r3, r2
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	4413      	add	r3, r2
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	4a27      	ldr	r2, [pc, #156]	; (800bc34 <xTaskResumeAll+0x124>)
 800bb98:	441a      	add	r2, r3
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	3304      	adds	r3, #4
 800bb9e:	4619      	mov	r1, r3
 800bba0:	4610      	mov	r0, r2
 800bba2:	f7fe ff47 	bl	800aa34 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbaa:	4b23      	ldr	r3, [pc, #140]	; (800bc38 <xTaskResumeAll+0x128>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d302      	bcc.n	800bbba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bbb4:	4b21      	ldr	r3, [pc, #132]	; (800bc3c <xTaskResumeAll+0x12c>)
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bbba:	4b1c      	ldr	r3, [pc, #112]	; (800bc2c <xTaskResumeAll+0x11c>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1cc      	bne.n	800bb5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d001      	beq.n	800bbcc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bbc8:	f000 fb60 	bl	800c28c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bbcc:	4b1c      	ldr	r3, [pc, #112]	; (800bc40 <xTaskResumeAll+0x130>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d010      	beq.n	800bbfa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bbd8:	f000 f858 	bl	800bc8c <xTaskIncrementTick>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d002      	beq.n	800bbe8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bbe2:	4b16      	ldr	r3, [pc, #88]	; (800bc3c <xTaskResumeAll+0x12c>)
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	3b01      	subs	r3, #1
 800bbec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d1f1      	bne.n	800bbd8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800bbf4:	4b12      	ldr	r3, [pc, #72]	; (800bc40 <xTaskResumeAll+0x130>)
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bbfa:	4b10      	ldr	r3, [pc, #64]	; (800bc3c <xTaskResumeAll+0x12c>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d009      	beq.n	800bc16 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bc02:	2301      	movs	r3, #1
 800bc04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bc06:	4b0f      	ldr	r3, [pc, #60]	; (800bc44 <xTaskResumeAll+0x134>)
 800bc08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc0c:	601a      	str	r2, [r3, #0]
 800bc0e:	f3bf 8f4f 	dsb	sy
 800bc12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc16:	f001 f8fd 	bl	800ce14 <vPortExitCritical>

	return xAlreadyYielded;
 800bc1a:	68bb      	ldr	r3, [r7, #8]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	20000994 	.word	0x20000994
 800bc28:	2000096c 	.word	0x2000096c
 800bc2c:	2000092c 	.word	0x2000092c
 800bc30:	20000974 	.word	0x20000974
 800bc34:	20000870 	.word	0x20000870
 800bc38:	2000086c 	.word	0x2000086c
 800bc3c:	20000980 	.word	0x20000980
 800bc40:	2000097c 	.word	0x2000097c
 800bc44:	e000ed04 	.word	0xe000ed04

0800bc48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bc4e:	4b05      	ldr	r3, [pc, #20]	; (800bc64 <xTaskGetTickCount+0x1c>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bc54:	687b      	ldr	r3, [r7, #4]
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	370c      	adds	r7, #12
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr
 800bc62:	bf00      	nop
 800bc64:	20000970 	.word	0x20000970

0800bc68 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc6e:	f001 f97b 	bl	800cf68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bc72:	2300      	movs	r3, #0
 800bc74:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bc76:	4b04      	ldr	r3, [pc, #16]	; (800bc88 <xTaskGetTickCountFromISR+0x20>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc7c:	683b      	ldr	r3, [r7, #0]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3708      	adds	r7, #8
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	20000970 	.word	0x20000970

0800bc8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b086      	sub	sp, #24
 800bc90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bc92:	2300      	movs	r3, #0
 800bc94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc96:	4b51      	ldr	r3, [pc, #324]	; (800bddc <xTaskIncrementTick+0x150>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f040 808d 	bne.w	800bdba <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 800bca0:	4b4f      	ldr	r3, [pc, #316]	; (800bde0 <xTaskIncrementTick+0x154>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	3301      	adds	r3, #1
 800bca6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bca8:	4a4d      	ldr	r2, [pc, #308]	; (800bde0 <xTaskIncrementTick+0x154>)
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d120      	bne.n	800bcf6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bcb4:	4b4b      	ldr	r3, [pc, #300]	; (800bde4 <xTaskIncrementTick+0x158>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00a      	beq.n	800bcd4 <xTaskIncrementTick+0x48>
	__asm volatile
 800bcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	603b      	str	r3, [r7, #0]
}
 800bcd0:	bf00      	nop
 800bcd2:	e7fe      	b.n	800bcd2 <xTaskIncrementTick+0x46>
 800bcd4:	4b43      	ldr	r3, [pc, #268]	; (800bde4 <xTaskIncrementTick+0x158>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	60fb      	str	r3, [r7, #12]
 800bcda:	4b43      	ldr	r3, [pc, #268]	; (800bde8 <xTaskIncrementTick+0x15c>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a41      	ldr	r2, [pc, #260]	; (800bde4 <xTaskIncrementTick+0x158>)
 800bce0:	6013      	str	r3, [r2, #0]
 800bce2:	4a41      	ldr	r2, [pc, #260]	; (800bde8 <xTaskIncrementTick+0x15c>)
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6013      	str	r3, [r2, #0]
 800bce8:	4b40      	ldr	r3, [pc, #256]	; (800bdec <xTaskIncrementTick+0x160>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	3301      	adds	r3, #1
 800bcee:	4a3f      	ldr	r2, [pc, #252]	; (800bdec <xTaskIncrementTick+0x160>)
 800bcf0:	6013      	str	r3, [r2, #0]
 800bcf2:	f000 facb 	bl	800c28c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bcf6:	4b3e      	ldr	r3, [pc, #248]	; (800bdf0 <xTaskIncrementTick+0x164>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	693a      	ldr	r2, [r7, #16]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d34d      	bcc.n	800bd9c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd00:	4b38      	ldr	r3, [pc, #224]	; (800bde4 <xTaskIncrementTick+0x158>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d101      	bne.n	800bd0e <xTaskIncrementTick+0x82>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e000      	b.n	800bd10 <xTaskIncrementTick+0x84>
 800bd0e:	2300      	movs	r3, #0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d004      	beq.n	800bd1e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd14:	4b36      	ldr	r3, [pc, #216]	; (800bdf0 <xTaskIncrementTick+0x164>)
 800bd16:	f04f 32ff 	mov.w	r2, #4294967295
 800bd1a:	601a      	str	r2, [r3, #0]
					break;
 800bd1c:	e03e      	b.n	800bd9c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bd1e:	4b31      	ldr	r3, [pc, #196]	; (800bde4 <xTaskIncrementTick+0x158>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bd2e:	693a      	ldr	r2, [r7, #16]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d203      	bcs.n	800bd3e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bd36:	4a2e      	ldr	r2, [pc, #184]	; (800bdf0 <xTaskIncrementTick+0x164>)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6013      	str	r3, [r2, #0]
						break;
 800bd3c:	e02e      	b.n	800bd9c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	3304      	adds	r3, #4
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7fe fed3 	bl	800aaee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d004      	beq.n	800bd5a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	3318      	adds	r3, #24
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7fe feca 	bl	800aaee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd5e:	2201      	movs	r2, #1
 800bd60:	409a      	lsls	r2, r3
 800bd62:	4b24      	ldr	r3, [pc, #144]	; (800bdf4 <xTaskIncrementTick+0x168>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4313      	orrs	r3, r2
 800bd68:	4a22      	ldr	r2, [pc, #136]	; (800bdf4 <xTaskIncrementTick+0x168>)
 800bd6a:	6013      	str	r3, [r2, #0]
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd70:	4613      	mov	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4413      	add	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	4a1f      	ldr	r2, [pc, #124]	; (800bdf8 <xTaskIncrementTick+0x16c>)
 800bd7a:	441a      	add	r2, r3
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	3304      	adds	r3, #4
 800bd80:	4619      	mov	r1, r3
 800bd82:	4610      	mov	r0, r2
 800bd84:	f7fe fe56 	bl	800aa34 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd8c:	4b1b      	ldr	r3, [pc, #108]	; (800bdfc <xTaskIncrementTick+0x170>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d3b4      	bcc.n	800bd00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bd96:	2301      	movs	r3, #1
 800bd98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd9a:	e7b1      	b.n	800bd00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bd9c:	4b17      	ldr	r3, [pc, #92]	; (800bdfc <xTaskIncrementTick+0x170>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bda2:	4915      	ldr	r1, [pc, #84]	; (800bdf8 <xTaskIncrementTick+0x16c>)
 800bda4:	4613      	mov	r3, r2
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	4413      	add	r3, r2
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	440b      	add	r3, r1
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d907      	bls.n	800bdc4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	617b      	str	r3, [r7, #20]
 800bdb8:	e004      	b.n	800bdc4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bdba:	4b11      	ldr	r3, [pc, #68]	; (800be00 <xTaskIncrementTick+0x174>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	4a0f      	ldr	r2, [pc, #60]	; (800be00 <xTaskIncrementTick+0x174>)
 800bdc2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bdc4:	4b0f      	ldr	r3, [pc, #60]	; (800be04 <xTaskIncrementTick+0x178>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d001      	beq.n	800bdd0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bdd0:	697b      	ldr	r3, [r7, #20]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3718      	adds	r7, #24
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	20000994 	.word	0x20000994
 800bde0:	20000970 	.word	0x20000970
 800bde4:	20000924 	.word	0x20000924
 800bde8:	20000928 	.word	0x20000928
 800bdec:	20000984 	.word	0x20000984
 800bdf0:	2000098c 	.word	0x2000098c
 800bdf4:	20000974 	.word	0x20000974
 800bdf8:	20000870 	.word	0x20000870
 800bdfc:	2000086c 	.word	0x2000086c
 800be00:	2000097c 	.word	0x2000097c
 800be04:	20000980 	.word	0x20000980

0800be08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800be08:	b480      	push	{r7}
 800be0a:	b087      	sub	sp, #28
 800be0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800be0e:	4b27      	ldr	r3, [pc, #156]	; (800beac <vTaskSwitchContext+0xa4>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d003      	beq.n	800be1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800be16:	4b26      	ldr	r3, [pc, #152]	; (800beb0 <vTaskSwitchContext+0xa8>)
 800be18:	2201      	movs	r2, #1
 800be1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800be1c:	e03f      	b.n	800be9e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800be1e:	4b24      	ldr	r3, [pc, #144]	; (800beb0 <vTaskSwitchContext+0xa8>)
 800be20:	2200      	movs	r2, #0
 800be22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800be24:	4b23      	ldr	r3, [pc, #140]	; (800beb4 <vTaskSwitchContext+0xac>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	fab3 f383 	clz	r3, r3
 800be30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800be32:	7afb      	ldrb	r3, [r7, #11]
 800be34:	f1c3 031f 	rsb	r3, r3, #31
 800be38:	617b      	str	r3, [r7, #20]
 800be3a:	491f      	ldr	r1, [pc, #124]	; (800beb8 <vTaskSwitchContext+0xb0>)
 800be3c:	697a      	ldr	r2, [r7, #20]
 800be3e:	4613      	mov	r3, r2
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	4413      	add	r3, r2
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	440b      	add	r3, r1
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d10a      	bne.n	800be64 <vTaskSwitchContext+0x5c>
	__asm volatile
 800be4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be52:	f383 8811 	msr	BASEPRI, r3
 800be56:	f3bf 8f6f 	isb	sy
 800be5a:	f3bf 8f4f 	dsb	sy
 800be5e:	607b      	str	r3, [r7, #4]
}
 800be60:	bf00      	nop
 800be62:	e7fe      	b.n	800be62 <vTaskSwitchContext+0x5a>
 800be64:	697a      	ldr	r2, [r7, #20]
 800be66:	4613      	mov	r3, r2
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	4413      	add	r3, r2
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	4a12      	ldr	r2, [pc, #72]	; (800beb8 <vTaskSwitchContext+0xb0>)
 800be70:	4413      	add	r3, r2
 800be72:	613b      	str	r3, [r7, #16]
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	685a      	ldr	r2, [r3, #4]
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	605a      	str	r2, [r3, #4]
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	685a      	ldr	r2, [r3, #4]
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	3308      	adds	r3, #8
 800be86:	429a      	cmp	r2, r3
 800be88:	d104      	bne.n	800be94 <vTaskSwitchContext+0x8c>
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	685a      	ldr	r2, [r3, #4]
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	605a      	str	r2, [r3, #4]
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	4a08      	ldr	r2, [pc, #32]	; (800bebc <vTaskSwitchContext+0xb4>)
 800be9c:	6013      	str	r3, [r2, #0]
}
 800be9e:	bf00      	nop
 800bea0:	371c      	adds	r7, #28
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr
 800beaa:	bf00      	nop
 800beac:	20000994 	.word	0x20000994
 800beb0:	20000980 	.word	0x20000980
 800beb4:	20000974 	.word	0x20000974
 800beb8:	20000870 	.word	0x20000870
 800bebc:	2000086c 	.word	0x2000086c

0800bec0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d10a      	bne.n	800bee6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed4:	f383 8811 	msr	BASEPRI, r3
 800bed8:	f3bf 8f6f 	isb	sy
 800bedc:	f3bf 8f4f 	dsb	sy
 800bee0:	60fb      	str	r3, [r7, #12]
}
 800bee2:	bf00      	nop
 800bee4:	e7fe      	b.n	800bee4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bee6:	4b07      	ldr	r3, [pc, #28]	; (800bf04 <vTaskPlaceOnEventList+0x44>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	3318      	adds	r3, #24
 800beec:	4619      	mov	r1, r3
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f7fe fdc4 	bl	800aa7c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bef4:	2101      	movs	r1, #1
 800bef6:	6838      	ldr	r0, [r7, #0]
 800bef8:	f000 fb1c 	bl	800c534 <prvAddCurrentTaskToDelayedList>
}
 800befc:	bf00      	nop
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	2000086c 	.word	0x2000086c

0800bf08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b086      	sub	sp, #24
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d10a      	bne.n	800bf30 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1e:	f383 8811 	msr	BASEPRI, r3
 800bf22:	f3bf 8f6f 	isb	sy
 800bf26:	f3bf 8f4f 	dsb	sy
 800bf2a:	617b      	str	r3, [r7, #20]
}
 800bf2c:	bf00      	nop
 800bf2e:	e7fe      	b.n	800bf2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf30:	4b0a      	ldr	r3, [pc, #40]	; (800bf5c <vTaskPlaceOnEventListRestricted+0x54>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	3318      	adds	r3, #24
 800bf36:	4619      	mov	r1, r3
 800bf38:	68f8      	ldr	r0, [r7, #12]
 800bf3a:	f7fe fd7b 	bl	800aa34 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d002      	beq.n	800bf4a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bf44:	f04f 33ff 	mov.w	r3, #4294967295
 800bf48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bf4a:	6879      	ldr	r1, [r7, #4]
 800bf4c:	68b8      	ldr	r0, [r7, #8]
 800bf4e:	f000 faf1 	bl	800c534 <prvAddCurrentTaskToDelayedList>
	}
 800bf52:	bf00      	nop
 800bf54:	3718      	adds	r7, #24
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	2000086c 	.word	0x2000086c

0800bf60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b086      	sub	sp, #24
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10a      	bne.n	800bf8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bf76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7a:	f383 8811 	msr	BASEPRI, r3
 800bf7e:	f3bf 8f6f 	isb	sy
 800bf82:	f3bf 8f4f 	dsb	sy
 800bf86:	60fb      	str	r3, [r7, #12]
}
 800bf88:	bf00      	nop
 800bf8a:	e7fe      	b.n	800bf8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	3318      	adds	r3, #24
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7fe fdac 	bl	800aaee <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf96:	4b1d      	ldr	r3, [pc, #116]	; (800c00c <xTaskRemoveFromEventList+0xac>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d11c      	bne.n	800bfd8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	3304      	adds	r3, #4
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7fe fda3 	bl	800aaee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfac:	2201      	movs	r2, #1
 800bfae:	409a      	lsls	r2, r3
 800bfb0:	4b17      	ldr	r3, [pc, #92]	; (800c010 <xTaskRemoveFromEventList+0xb0>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	4a16      	ldr	r2, [pc, #88]	; (800c010 <xTaskRemoveFromEventList+0xb0>)
 800bfb8:	6013      	str	r3, [r2, #0]
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	4413      	add	r3, r2
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	4a13      	ldr	r2, [pc, #76]	; (800c014 <xTaskRemoveFromEventList+0xb4>)
 800bfc8:	441a      	add	r2, r3
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	3304      	adds	r3, #4
 800bfce:	4619      	mov	r1, r3
 800bfd0:	4610      	mov	r0, r2
 800bfd2:	f7fe fd2f 	bl	800aa34 <vListInsertEnd>
 800bfd6:	e005      	b.n	800bfe4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	3318      	adds	r3, #24
 800bfdc:	4619      	mov	r1, r3
 800bfde:	480e      	ldr	r0, [pc, #56]	; (800c018 <xTaskRemoveFromEventList+0xb8>)
 800bfe0:	f7fe fd28 	bl	800aa34 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfe8:	4b0c      	ldr	r3, [pc, #48]	; (800c01c <xTaskRemoveFromEventList+0xbc>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d905      	bls.n	800bffe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bff2:	2301      	movs	r3, #1
 800bff4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bff6:	4b0a      	ldr	r3, [pc, #40]	; (800c020 <xTaskRemoveFromEventList+0xc0>)
 800bff8:	2201      	movs	r2, #1
 800bffa:	601a      	str	r2, [r3, #0]
 800bffc:	e001      	b.n	800c002 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bffe:	2300      	movs	r3, #0
 800c000:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800c002:	697b      	ldr	r3, [r7, #20]
}
 800c004:	4618      	mov	r0, r3
 800c006:	3718      	adds	r7, #24
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	20000994 	.word	0x20000994
 800c010:	20000974 	.word	0x20000974
 800c014:	20000870 	.word	0x20000870
 800c018:	2000092c 	.word	0x2000092c
 800c01c:	2000086c 	.word	0x2000086c
 800c020:	20000980 	.word	0x20000980

0800c024 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d10a      	bne.n	800c048 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800c032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c036:	f383 8811 	msr	BASEPRI, r3
 800c03a:	f3bf 8f6f 	isb	sy
 800c03e:	f3bf 8f4f 	dsb	sy
 800c042:	60fb      	str	r3, [r7, #12]
}
 800c044:	bf00      	nop
 800c046:	e7fe      	b.n	800c046 <vTaskSetTimeOutState+0x22>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c048:	4b06      	ldr	r3, [pc, #24]	; (800c064 <vTaskSetTimeOutState+0x40>)
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c050:	4b05      	ldr	r3, [pc, #20]	; (800c068 <vTaskSetTimeOutState+0x44>)
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	605a      	str	r2, [r3, #4]
}
 800c058:	bf00      	nop
 800c05a:	3714      	adds	r7, #20
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr
 800c064:	20000984 	.word	0x20000984
 800c068:	20000970 	.word	0x20000970

0800c06c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b086      	sub	sp, #24
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10a      	bne.n	800c092 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c080:	f383 8811 	msr	BASEPRI, r3
 800c084:	f3bf 8f6f 	isb	sy
 800c088:	f3bf 8f4f 	dsb	sy
 800c08c:	60fb      	str	r3, [r7, #12]
}
 800c08e:	bf00      	nop
 800c090:	e7fe      	b.n	800c090 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d10a      	bne.n	800c0ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09c:	f383 8811 	msr	BASEPRI, r3
 800c0a0:	f3bf 8f6f 	isb	sy
 800c0a4:	f3bf 8f4f 	dsb	sy
 800c0a8:	60bb      	str	r3, [r7, #8]
}
 800c0aa:	bf00      	nop
 800c0ac:	e7fe      	b.n	800c0ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c0ae:	f000 fe81 	bl	800cdb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c0b2:	4b1c      	ldr	r3, [pc, #112]	; (800c124 <xTaskCheckForTimeOut+0xb8>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c0:	d102      	bne.n	800c0c8 <xTaskCheckForTimeOut+0x5c>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	617b      	str	r3, [r7, #20]
 800c0c6:	e026      	b.n	800c116 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	4b16      	ldr	r3, [pc, #88]	; (800c128 <xTaskCheckForTimeOut+0xbc>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d007      	beq.n	800c0e4 <xTaskCheckForTimeOut+0x78>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	693a      	ldr	r2, [r7, #16]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d302      	bcc.n	800c0e4 <xTaskCheckForTimeOut+0x78>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	617b      	str	r3, [r7, #20]
 800c0e2:	e018      	b.n	800c116 <xTaskCheckForTimeOut+0xaa>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	693a      	ldr	r2, [r7, #16]
 800c0ea:	1ad2      	subs	r2, r2, r3
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d20e      	bcs.n	800c112 <xTaskCheckForTimeOut+0xa6>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6859      	ldr	r1, [r3, #4]
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	1acb      	subs	r3, r1, r3
 800c100:	441a      	add	r2, r3
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f7ff ff8c 	bl	800c024 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800c10c:	2300      	movs	r3, #0
 800c10e:	617b      	str	r3, [r7, #20]
 800c110:	e001      	b.n	800c116 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			xReturn = pdTRUE;
 800c112:	2301      	movs	r3, #1
 800c114:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800c116:	f000 fe7d 	bl	800ce14 <vPortExitCritical>

	return xReturn;
 800c11a:	697b      	ldr	r3, [r7, #20]
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3718      	adds	r7, #24
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	20000970 	.word	0x20000970
 800c128:	20000984 	.word	0x20000984

0800c12c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c12c:	b480      	push	{r7}
 800c12e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c130:	4b03      	ldr	r3, [pc, #12]	; (800c140 <vTaskMissedYield+0x14>)
 800c132:	2201      	movs	r2, #1
 800c134:	601a      	str	r2, [r3, #0]
}
 800c136:	bf00      	nop
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr
 800c140:	20000980 	.word	0x20000980

0800c144 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c14c:	f000 f852 	bl	800c1f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c150:	4b06      	ldr	r3, [pc, #24]	; (800c16c <prvIdleTask+0x28>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2b01      	cmp	r3, #1
 800c156:	d9f9      	bls.n	800c14c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c158:	4b05      	ldr	r3, [pc, #20]	; (800c170 <prvIdleTask+0x2c>)
 800c15a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c15e:	601a      	str	r2, [r3, #0]
 800c160:	f3bf 8f4f 	dsb	sy
 800c164:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c168:	e7f0      	b.n	800c14c <prvIdleTask+0x8>
 800c16a:	bf00      	nop
 800c16c:	20000870 	.word	0x20000870
 800c170:	e000ed04 	.word	0xe000ed04

0800c174 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c17a:	2300      	movs	r3, #0
 800c17c:	607b      	str	r3, [r7, #4]
 800c17e:	e00c      	b.n	800c19a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	4613      	mov	r3, r2
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	4413      	add	r3, r2
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	4a12      	ldr	r2, [pc, #72]	; (800c1d4 <prvInitialiseTaskLists+0x60>)
 800c18c:	4413      	add	r3, r2
 800c18e:	4618      	mov	r0, r3
 800c190:	f7fe fc23 	bl	800a9da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	3301      	adds	r3, #1
 800c198:	607b      	str	r3, [r7, #4]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2b06      	cmp	r3, #6
 800c19e:	d9ef      	bls.n	800c180 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c1a0:	480d      	ldr	r0, [pc, #52]	; (800c1d8 <prvInitialiseTaskLists+0x64>)
 800c1a2:	f7fe fc1a 	bl	800a9da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c1a6:	480d      	ldr	r0, [pc, #52]	; (800c1dc <prvInitialiseTaskLists+0x68>)
 800c1a8:	f7fe fc17 	bl	800a9da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c1ac:	480c      	ldr	r0, [pc, #48]	; (800c1e0 <prvInitialiseTaskLists+0x6c>)
 800c1ae:	f7fe fc14 	bl	800a9da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c1b2:	480c      	ldr	r0, [pc, #48]	; (800c1e4 <prvInitialiseTaskLists+0x70>)
 800c1b4:	f7fe fc11 	bl	800a9da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c1b8:	480b      	ldr	r0, [pc, #44]	; (800c1e8 <prvInitialiseTaskLists+0x74>)
 800c1ba:	f7fe fc0e 	bl	800a9da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c1be:	4b0b      	ldr	r3, [pc, #44]	; (800c1ec <prvInitialiseTaskLists+0x78>)
 800c1c0:	4a05      	ldr	r2, [pc, #20]	; (800c1d8 <prvInitialiseTaskLists+0x64>)
 800c1c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c1c4:	4b0a      	ldr	r3, [pc, #40]	; (800c1f0 <prvInitialiseTaskLists+0x7c>)
 800c1c6:	4a05      	ldr	r2, [pc, #20]	; (800c1dc <prvInitialiseTaskLists+0x68>)
 800c1c8:	601a      	str	r2, [r3, #0]
}
 800c1ca:	bf00      	nop
 800c1cc:	3708      	adds	r7, #8
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	20000870 	.word	0x20000870
 800c1d8:	200008fc 	.word	0x200008fc
 800c1dc:	20000910 	.word	0x20000910
 800c1e0:	2000092c 	.word	0x2000092c
 800c1e4:	20000940 	.word	0x20000940
 800c1e8:	20000958 	.word	0x20000958
 800c1ec:	20000924 	.word	0x20000924
 800c1f0:	20000928 	.word	0x20000928

0800c1f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1fa:	e028      	b.n	800c24e <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800c1fc:	f7ff fc7a 	bl	800baf4 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800c200:	4b17      	ldr	r3, [pc, #92]	; (800c260 <prvCheckTasksWaitingTermination+0x6c>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	bf0c      	ite	eq
 800c208:	2301      	moveq	r3, #1
 800c20a:	2300      	movne	r3, #0
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800c210:	f7ff fc7e 	bl	800bb10 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d119      	bne.n	800c24e <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800c21a:	f000 fdcb 	bl	800cdb4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c21e:	4b10      	ldr	r3, [pc, #64]	; (800c260 <prvCheckTasksWaitingTermination+0x6c>)
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	3304      	adds	r3, #4
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fe fc5f 	bl	800aaee <uxListRemove>
					--uxCurrentNumberOfTasks;
 800c230:	4b0c      	ldr	r3, [pc, #48]	; (800c264 <prvCheckTasksWaitingTermination+0x70>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	3b01      	subs	r3, #1
 800c236:	4a0b      	ldr	r2, [pc, #44]	; (800c264 <prvCheckTasksWaitingTermination+0x70>)
 800c238:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800c23a:	4b0b      	ldr	r3, [pc, #44]	; (800c268 <prvCheckTasksWaitingTermination+0x74>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	3b01      	subs	r3, #1
 800c240:	4a09      	ldr	r2, [pc, #36]	; (800c268 <prvCheckTasksWaitingTermination+0x74>)
 800c242:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800c244:	f000 fde6 	bl	800ce14 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800c248:	6838      	ldr	r0, [r7, #0]
 800c24a:	f000 f80f 	bl	800c26c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c24e:	4b06      	ldr	r3, [pc, #24]	; (800c268 <prvCheckTasksWaitingTermination+0x74>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d1d2      	bne.n	800c1fc <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c256:	bf00      	nop
 800c258:	bf00      	nop
 800c25a:	3708      	adds	r7, #8
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	20000940 	.word	0x20000940
 800c264:	2000096c 	.word	0x2000096c
 800c268:	20000954 	.word	0x20000954

0800c26c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c278:	4618      	mov	r0, r3
 800c27a:	f000 ff79 	bl	800d170 <vPortFree>
			vPortFree( pxTCB );
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 ff76 	bl	800d170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c284:	bf00      	nop
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c292:	4b0f      	ldr	r3, [pc, #60]	; (800c2d0 <prvResetNextTaskUnblockTime+0x44>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d101      	bne.n	800c2a0 <prvResetNextTaskUnblockTime+0x14>
 800c29c:	2301      	movs	r3, #1
 800c29e:	e000      	b.n	800c2a2 <prvResetNextTaskUnblockTime+0x16>
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d004      	beq.n	800c2b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c2a6:	4b0b      	ldr	r3, [pc, #44]	; (800c2d4 <prvResetNextTaskUnblockTime+0x48>)
 800c2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c2ae:	e008      	b.n	800c2c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c2b0:	4b07      	ldr	r3, [pc, #28]	; (800c2d0 <prvResetNextTaskUnblockTime+0x44>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	68db      	ldr	r3, [r3, #12]
 800c2b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	4a05      	ldr	r2, [pc, #20]	; (800c2d4 <prvResetNextTaskUnblockTime+0x48>)
 800c2c0:	6013      	str	r3, [r2, #0]
}
 800c2c2:	bf00      	nop
 800c2c4:	370c      	adds	r7, #12
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	20000924 	.word	0x20000924
 800c2d4:	2000098c 	.word	0x2000098c

0800c2d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c2de:	4b0b      	ldr	r3, [pc, #44]	; (800c30c <xTaskGetSchedulerState+0x34>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d102      	bne.n	800c2ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	607b      	str	r3, [r7, #4]
 800c2ea:	e008      	b.n	800c2fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2ec:	4b08      	ldr	r3, [pc, #32]	; (800c310 <xTaskGetSchedulerState+0x38>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d102      	bne.n	800c2fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c2f4:	2302      	movs	r3, #2
 800c2f6:	607b      	str	r3, [r7, #4]
 800c2f8:	e001      	b.n	800c2fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c2fe:	687b      	ldr	r3, [r7, #4]
	}
 800c300:	4618      	mov	r0, r3
 800c302:	370c      	adds	r7, #12
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr
 800c30c:	20000978 	.word	0x20000978
 800c310:	20000994 	.word	0x20000994

0800c314 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d062      	beq.n	800c3ec <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c32a:	4b32      	ldr	r3, [pc, #200]	; (800c3f4 <vTaskPriorityInherit+0xe0>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c330:	429a      	cmp	r2, r3
 800c332:	d25b      	bcs.n	800c3ec <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	699b      	ldr	r3, [r3, #24]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	db06      	blt.n	800c34a <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c33c:	4b2d      	ldr	r3, [pc, #180]	; (800c3f4 <vTaskPriorityInherit+0xe0>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c342:	f1c3 0207 	rsb	r2, r3, #7
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	6959      	ldr	r1, [r3, #20]
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c352:	4613      	mov	r3, r2
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4413      	add	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	4a27      	ldr	r2, [pc, #156]	; (800c3f8 <vTaskPriorityInherit+0xe4>)
 800c35c:	4413      	add	r3, r2
 800c35e:	4299      	cmp	r1, r3
 800c360:	d101      	bne.n	800c366 <vTaskPriorityInherit+0x52>
 800c362:	2301      	movs	r3, #1
 800c364:	e000      	b.n	800c368 <vTaskPriorityInherit+0x54>
 800c366:	2300      	movs	r3, #0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d03a      	beq.n	800c3e2 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	3304      	adds	r3, #4
 800c370:	4618      	mov	r0, r3
 800c372:	f7fe fbbc 	bl	800aaee <uxListRemove>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d115      	bne.n	800c3a8 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c380:	491d      	ldr	r1, [pc, #116]	; (800c3f8 <vTaskPriorityInherit+0xe4>)
 800c382:	4613      	mov	r3, r2
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	4413      	add	r3, r2
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	440b      	add	r3, r1
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d10a      	bne.n	800c3a8 <vTaskPriorityInherit+0x94>
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c396:	2201      	movs	r2, #1
 800c398:	fa02 f303 	lsl.w	r3, r2, r3
 800c39c:	43da      	mvns	r2, r3
 800c39e:	4b17      	ldr	r3, [pc, #92]	; (800c3fc <vTaskPriorityInherit+0xe8>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4013      	ands	r3, r2
 800c3a4:	4a15      	ldr	r2, [pc, #84]	; (800c3fc <vTaskPriorityInherit+0xe8>)
 800c3a6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c3a8:	4b12      	ldr	r3, [pc, #72]	; (800c3f4 <vTaskPriorityInherit+0xe0>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	409a      	lsls	r2, r3
 800c3ba:	4b10      	ldr	r3, [pc, #64]	; (800c3fc <vTaskPriorityInherit+0xe8>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	4a0e      	ldr	r2, [pc, #56]	; (800c3fc <vTaskPriorityInherit+0xe8>)
 800c3c2:	6013      	str	r3, [r2, #0]
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3c8:	4613      	mov	r3, r2
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	4413      	add	r3, r2
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	4a09      	ldr	r2, [pc, #36]	; (800c3f8 <vTaskPriorityInherit+0xe4>)
 800c3d2:	441a      	add	r2, r3
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	3304      	adds	r3, #4
 800c3d8:	4619      	mov	r1, r3
 800c3da:	4610      	mov	r0, r2
 800c3dc:	f7fe fb2a 	bl	800aa34 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c3e0:	e004      	b.n	800c3ec <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c3e2:	4b04      	ldr	r3, [pc, #16]	; (800c3f4 <vTaskPriorityInherit+0xe0>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800c3ec:	bf00      	nop
 800c3ee:	3710      	adds	r7, #16
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	2000086c 	.word	0x2000086c
 800c3f8:	20000870 	.word	0x20000870
 800c3fc:	20000974 	.word	0x20000974

0800c400 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c400:	b580      	push	{r7, lr}
 800c402:	b086      	sub	sp, #24
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c40c:	2300      	movs	r3, #0
 800c40e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d06e      	beq.n	800c4f4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c416:	4b3a      	ldr	r3, [pc, #232]	; (800c500 <xTaskPriorityDisinherit+0x100>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	693a      	ldr	r2, [r7, #16]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d00a      	beq.n	800c436 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	60fb      	str	r3, [r7, #12]
}
 800c432:	bf00      	nop
 800c434:	e7fe      	b.n	800c434 <xTaskPriorityDisinherit+0x34>

			configASSERT( pxTCB->uxMutexesHeld );
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10a      	bne.n	800c454 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	60bb      	str	r3, [r7, #8]
}
 800c450:	bf00      	nop
 800c452:	e7fe      	b.n	800c452 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c458:	1e5a      	subs	r2, r3, #1
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c466:	429a      	cmp	r2, r3
 800c468:	d044      	beq.n	800c4f4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d140      	bne.n	800c4f4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	3304      	adds	r3, #4
 800c476:	4618      	mov	r0, r3
 800c478:	f7fe fb39 	bl	800aaee <uxListRemove>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d115      	bne.n	800c4ae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c486:	491f      	ldr	r1, [pc, #124]	; (800c504 <xTaskPriorityDisinherit+0x104>)
 800c488:	4613      	mov	r3, r2
 800c48a:	009b      	lsls	r3, r3, #2
 800c48c:	4413      	add	r3, r2
 800c48e:	009b      	lsls	r3, r3, #2
 800c490:	440b      	add	r3, r1
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d10a      	bne.n	800c4ae <xTaskPriorityDisinherit+0xae>
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c49c:	2201      	movs	r2, #1
 800c49e:	fa02 f303 	lsl.w	r3, r2, r3
 800c4a2:	43da      	mvns	r2, r3
 800c4a4:	4b18      	ldr	r3, [pc, #96]	; (800c508 <xTaskPriorityDisinherit+0x108>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4013      	ands	r3, r2
 800c4aa:	4a17      	ldr	r2, [pc, #92]	; (800c508 <xTaskPriorityDisinherit+0x108>)
 800c4ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ba:	f1c3 0207 	rsb	r2, r3, #7
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	409a      	lsls	r2, r3
 800c4ca:	4b0f      	ldr	r3, [pc, #60]	; (800c508 <xTaskPriorityDisinherit+0x108>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	4a0d      	ldr	r2, [pc, #52]	; (800c508 <xTaskPriorityDisinherit+0x108>)
 800c4d2:	6013      	str	r3, [r2, #0]
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4d8:	4613      	mov	r3, r2
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	4413      	add	r3, r2
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	4a08      	ldr	r2, [pc, #32]	; (800c504 <xTaskPriorityDisinherit+0x104>)
 800c4e2:	441a      	add	r2, r3
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	3304      	adds	r3, #4
 800c4e8:	4619      	mov	r1, r3
 800c4ea:	4610      	mov	r0, r2
 800c4ec:	f7fe faa2 	bl	800aa34 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c4f4:	697b      	ldr	r3, [r7, #20]
	}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3718      	adds	r7, #24
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	2000086c 	.word	0x2000086c
 800c504:	20000870 	.word	0x20000870
 800c508:	20000974 	.word	0x20000974

0800c50c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800c50c:	b480      	push	{r7}
 800c50e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c510:	4b07      	ldr	r3, [pc, #28]	; (800c530 <pvTaskIncrementMutexHeldCount+0x24>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d004      	beq.n	800c522 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c518:	4b05      	ldr	r3, [pc, #20]	; (800c530 <pvTaskIncrementMutexHeldCount+0x24>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c51e:	3201      	adds	r2, #1
 800c520:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c522:	4b03      	ldr	r3, [pc, #12]	; (800c530 <pvTaskIncrementMutexHeldCount+0x24>)
 800c524:	681b      	ldr	r3, [r3, #0]
	}
 800c526:	4618      	mov	r0, r3
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr
 800c530:	2000086c 	.word	0x2000086c

0800c534 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c53e:	4b29      	ldr	r3, [pc, #164]	; (800c5e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c544:	4b28      	ldr	r3, [pc, #160]	; (800c5e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	3304      	adds	r3, #4
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7fe facf 	bl	800aaee <uxListRemove>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d10b      	bne.n	800c56e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c556:	4b24      	ldr	r3, [pc, #144]	; (800c5e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c55c:	2201      	movs	r2, #1
 800c55e:	fa02 f303 	lsl.w	r3, r2, r3
 800c562:	43da      	mvns	r2, r3
 800c564:	4b21      	ldr	r3, [pc, #132]	; (800c5ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4013      	ands	r3, r2
 800c56a:	4a20      	ldr	r2, [pc, #128]	; (800c5ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800c56c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c574:	d10a      	bne.n	800c58c <prvAddCurrentTaskToDelayedList+0x58>
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d007      	beq.n	800c58c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c57c:	4b1a      	ldr	r3, [pc, #104]	; (800c5e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	3304      	adds	r3, #4
 800c582:	4619      	mov	r1, r3
 800c584:	481a      	ldr	r0, [pc, #104]	; (800c5f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c586:	f7fe fa55 	bl	800aa34 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c58a:	e026      	b.n	800c5da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c58c:	68fa      	ldr	r2, [r7, #12]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4413      	add	r3, r2
 800c592:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c594:	4b14      	ldr	r3, [pc, #80]	; (800c5e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	68ba      	ldr	r2, [r7, #8]
 800c59a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c59c:	68ba      	ldr	r2, [r7, #8]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d209      	bcs.n	800c5b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5a4:	4b13      	ldr	r3, [pc, #76]	; (800c5f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	4b0f      	ldr	r3, [pc, #60]	; (800c5e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	3304      	adds	r3, #4
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	4610      	mov	r0, r2
 800c5b2:	f7fe fa63 	bl	800aa7c <vListInsert>
}
 800c5b6:	e010      	b.n	800c5da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5b8:	4b0f      	ldr	r3, [pc, #60]	; (800c5f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	4b0a      	ldr	r3, [pc, #40]	; (800c5e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	3304      	adds	r3, #4
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	4610      	mov	r0, r2
 800c5c6:	f7fe fa59 	bl	800aa7c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c5ca:	4b0c      	ldr	r3, [pc, #48]	; (800c5fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	68ba      	ldr	r2, [r7, #8]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d202      	bcs.n	800c5da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c5d4:	4a09      	ldr	r2, [pc, #36]	; (800c5fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	6013      	str	r3, [r2, #0]
}
 800c5da:	bf00      	nop
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	20000970 	.word	0x20000970
 800c5e8:	2000086c 	.word	0x2000086c
 800c5ec:	20000974 	.word	0x20000974
 800c5f0:	20000958 	.word	0x20000958
 800c5f4:	20000928 	.word	0x20000928
 800c5f8:	20000924 	.word	0x20000924
 800c5fc:	2000098c 	.word	0x2000098c

0800c600 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800c606:	2300      	movs	r3, #0
 800c608:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c60a:	f000 fa95 	bl	800cb38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c60e:	4b11      	ldr	r3, [pc, #68]	; (800c654 <xTimerCreateTimerTask+0x54>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00b      	beq.n	800c62e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800c616:	4b10      	ldr	r3, [pc, #64]	; (800c658 <xTimerCreateTimerTask+0x58>)
 800c618:	9301      	str	r3, [sp, #4]
 800c61a:	2303      	movs	r3, #3
 800c61c:	9300      	str	r3, [sp, #0]
 800c61e:	2300      	movs	r3, #0
 800c620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c624:	490d      	ldr	r1, [pc, #52]	; (800c65c <xTimerCreateTimerTask+0x5c>)
 800c626:	480e      	ldr	r0, [pc, #56]	; (800c660 <xTimerCreateTimerTask+0x60>)
 800c628:	f7ff f8ac 	bl	800b784 <xTaskCreate>
 800c62c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d10a      	bne.n	800c64a <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800c634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	603b      	str	r3, [r7, #0]
}
 800c646:	bf00      	nop
 800c648:	e7fe      	b.n	800c648 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800c64a:	687b      	ldr	r3, [r7, #4]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3708      	adds	r7, #8
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	200009c8 	.word	0x200009c8
 800c658:	200009cc 	.word	0x200009cc
 800c65c:	08010a00 	.word	0x08010a00
 800c660:	0800c781 	.word	0x0800c781

0800c664 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b08a      	sub	sp, #40	; 0x28
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	607a      	str	r2, [r7, #4]
 800c670:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c672:	2300      	movs	r3, #0
 800c674:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d10a      	bne.n	800c692 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c680:	f383 8811 	msr	BASEPRI, r3
 800c684:	f3bf 8f6f 	isb	sy
 800c688:	f3bf 8f4f 	dsb	sy
 800c68c:	623b      	str	r3, [r7, #32]
}
 800c68e:	bf00      	nop
 800c690:	e7fe      	b.n	800c690 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c692:	4b1a      	ldr	r3, [pc, #104]	; (800c6fc <xTimerGenericCommand+0x98>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d02a      	beq.n	800c6f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	2b05      	cmp	r3, #5
 800c6aa:	dc18      	bgt.n	800c6de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c6ac:	f7ff fe14 	bl	800c2d8 <xTaskGetSchedulerState>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b02      	cmp	r3, #2
 800c6b4:	d109      	bne.n	800c6ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c6b6:	4b11      	ldr	r3, [pc, #68]	; (800c6fc <xTimerGenericCommand+0x98>)
 800c6b8:	6818      	ldr	r0, [r3, #0]
 800c6ba:	f107 0114 	add.w	r1, r7, #20
 800c6be:	2300      	movs	r3, #0
 800c6c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6c2:	f7fe fb37 	bl	800ad34 <xQueueGenericSend>
 800c6c6:	6278      	str	r0, [r7, #36]	; 0x24
 800c6c8:	e012      	b.n	800c6f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c6ca:	4b0c      	ldr	r3, [pc, #48]	; (800c6fc <xTimerGenericCommand+0x98>)
 800c6cc:	6818      	ldr	r0, [r3, #0]
 800c6ce:	f107 0114 	add.w	r1, r7, #20
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	f7fe fb2d 	bl	800ad34 <xQueueGenericSend>
 800c6da:	6278      	str	r0, [r7, #36]	; 0x24
 800c6dc:	e008      	b.n	800c6f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c6de:	4b07      	ldr	r3, [pc, #28]	; (800c6fc <xTimerGenericCommand+0x98>)
 800c6e0:	6818      	ldr	r0, [r3, #0]
 800c6e2:	f107 0114 	add.w	r1, r7, #20
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	683a      	ldr	r2, [r7, #0]
 800c6ea:	f7fe fc21 	bl	800af30 <xQueueGenericSendFromISR>
 800c6ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3728      	adds	r7, #40	; 0x28
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	200009c8 	.word	0x200009c8

0800c700 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b088      	sub	sp, #32
 800c704:	af02      	add	r7, sp, #8
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c70a:	4b1c      	ldr	r3, [pc, #112]	; (800c77c <prvProcessExpiredTimer+0x7c>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	3304      	adds	r3, #4
 800c718:	4618      	mov	r0, r3
 800c71a:	f7fe f9e8 	bl	800aaee <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	69db      	ldr	r3, [r3, #28]
 800c722:	2b01      	cmp	r3, #1
 800c724:	d122      	bne.n	800c76c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	699a      	ldr	r2, [r3, #24]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	18d1      	adds	r1, r2, r3
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	683a      	ldr	r2, [r7, #0]
 800c732:	6978      	ldr	r0, [r7, #20]
 800c734:	f000 f8c8 	bl	800c8c8 <prvInsertTimerInActiveList>
 800c738:	4603      	mov	r3, r0
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d016      	beq.n	800c76c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c73e:	2300      	movs	r3, #0
 800c740:	9300      	str	r3, [sp, #0]
 800c742:	2300      	movs	r3, #0
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	2100      	movs	r1, #0
 800c748:	6978      	ldr	r0, [r7, #20]
 800c74a:	f7ff ff8b 	bl	800c664 <xTimerGenericCommand>
 800c74e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d10a      	bne.n	800c76c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75a:	f383 8811 	msr	BASEPRI, r3
 800c75e:	f3bf 8f6f 	isb	sy
 800c762:	f3bf 8f4f 	dsb	sy
 800c766:	60fb      	str	r3, [r7, #12]
}
 800c768:	bf00      	nop
 800c76a:	e7fe      	b.n	800c76a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c770:	6978      	ldr	r0, [r7, #20]
 800c772:	4798      	blx	r3
}
 800c774:	bf00      	nop
 800c776:	3718      	adds	r7, #24
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	200009c0 	.word	0x200009c0

0800c780 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c788:	f107 0308 	add.w	r3, r7, #8
 800c78c:	4618      	mov	r0, r3
 800c78e:	f000 f857 	bl	800c840 <prvGetNextExpireTime>
 800c792:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	4619      	mov	r1, r3
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f000 f803 	bl	800c7a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c79e:	f000 f8d5 	bl	800c94c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c7a2:	e7f1      	b.n	800c788 <prvTimerTask+0x8>

0800c7a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c7ae:	f7ff f9a1 	bl	800baf4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7b2:	f107 0308 	add.w	r3, r7, #8
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f000 f866 	bl	800c888 <prvSampleTimeNow>
 800c7bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d130      	bne.n	800c826 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d10a      	bne.n	800c7e0 <prvProcessTimerOrBlockTask+0x3c>
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d806      	bhi.n	800c7e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c7d2:	f7ff f99d 	bl	800bb10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c7d6:	68f9      	ldr	r1, [r7, #12]
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f7ff ff91 	bl	800c700 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c7de:	e024      	b.n	800c82a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d008      	beq.n	800c7f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c7e6:	4b13      	ldr	r3, [pc, #76]	; (800c834 <prvProcessTimerOrBlockTask+0x90>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	bf0c      	ite	eq
 800c7f0:	2301      	moveq	r3, #1
 800c7f2:	2300      	movne	r3, #0
 800c7f4:	b2db      	uxtb	r3, r3
 800c7f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c7f8:	4b0f      	ldr	r3, [pc, #60]	; (800c838 <prvProcessTimerOrBlockTask+0x94>)
 800c7fa:	6818      	ldr	r0, [r3, #0]
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	1ad3      	subs	r3, r2, r3
 800c802:	683a      	ldr	r2, [r7, #0]
 800c804:	4619      	mov	r1, r3
 800c806:	f7fe ff89 	bl	800b71c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c80a:	f7ff f981 	bl	800bb10 <xTaskResumeAll>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d10a      	bne.n	800c82a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c814:	4b09      	ldr	r3, [pc, #36]	; (800c83c <prvProcessTimerOrBlockTask+0x98>)
 800c816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c81a:	601a      	str	r2, [r3, #0]
 800c81c:	f3bf 8f4f 	dsb	sy
 800c820:	f3bf 8f6f 	isb	sy
}
 800c824:	e001      	b.n	800c82a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c826:	f7ff f973 	bl	800bb10 <xTaskResumeAll>
}
 800c82a:	bf00      	nop
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	200009c4 	.word	0x200009c4
 800c838:	200009c8 	.word	0x200009c8
 800c83c:	e000ed04 	.word	0xe000ed04

0800c840 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c840:	b480      	push	{r7}
 800c842:	b085      	sub	sp, #20
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c848:	4b0e      	ldr	r3, [pc, #56]	; (800c884 <prvGetNextExpireTime+0x44>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	bf0c      	ite	eq
 800c852:	2301      	moveq	r3, #1
 800c854:	2300      	movne	r3, #0
 800c856:	b2db      	uxtb	r3, r3
 800c858:	461a      	mov	r2, r3
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d105      	bne.n	800c872 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c866:	4b07      	ldr	r3, [pc, #28]	; (800c884 <prvGetNextExpireTime+0x44>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	60fb      	str	r3, [r7, #12]
 800c870:	e001      	b.n	800c876 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c872:	2300      	movs	r3, #0
 800c874:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c876:	68fb      	ldr	r3, [r7, #12]
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3714      	adds	r7, #20
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr
 800c884:	200009c0 	.word	0x200009c0

0800c888 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b084      	sub	sp, #16
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c890:	f7ff f9da 	bl	800bc48 <xTaskGetTickCount>
 800c894:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c896:	4b0b      	ldr	r3, [pc, #44]	; (800c8c4 <prvSampleTimeNow+0x3c>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	68fa      	ldr	r2, [r7, #12]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d205      	bcs.n	800c8ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c8a0:	f000 f8e8 	bl	800ca74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	601a      	str	r2, [r3, #0]
 800c8aa:	e002      	b.n	800c8b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c8b2:	4a04      	ldr	r2, [pc, #16]	; (800c8c4 <prvSampleTimeNow+0x3c>)
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3710      	adds	r7, #16
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
 800c8c2:	bf00      	nop
 800c8c4:	200009d0 	.word	0x200009d0

0800c8c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b086      	sub	sp, #24
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	607a      	str	r2, [r7, #4]
 800c8d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	68fa      	ldr	r2, [r7, #12]
 800c8e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d812      	bhi.n	800c914 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	1ad2      	subs	r2, r2, r3
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	699b      	ldr	r3, [r3, #24]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d302      	bcc.n	800c902 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	617b      	str	r3, [r7, #20]
 800c900:	e01b      	b.n	800c93a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c902:	4b10      	ldr	r3, [pc, #64]	; (800c944 <prvInsertTimerInActiveList+0x7c>)
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	3304      	adds	r3, #4
 800c90a:	4619      	mov	r1, r3
 800c90c:	4610      	mov	r0, r2
 800c90e:	f7fe f8b5 	bl	800aa7c <vListInsert>
 800c912:	e012      	b.n	800c93a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d206      	bcs.n	800c92a <prvInsertTimerInActiveList+0x62>
 800c91c:	68ba      	ldr	r2, [r7, #8]
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	429a      	cmp	r2, r3
 800c922:	d302      	bcc.n	800c92a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c924:	2301      	movs	r3, #1
 800c926:	617b      	str	r3, [r7, #20]
 800c928:	e007      	b.n	800c93a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c92a:	4b07      	ldr	r3, [pc, #28]	; (800c948 <prvInsertTimerInActiveList+0x80>)
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	3304      	adds	r3, #4
 800c932:	4619      	mov	r1, r3
 800c934:	4610      	mov	r0, r2
 800c936:	f7fe f8a1 	bl	800aa7c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c93a:	697b      	ldr	r3, [r7, #20]
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3718      	adds	r7, #24
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	200009c4 	.word	0x200009c4
 800c948:	200009c0 	.word	0x200009c0

0800c94c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b08c      	sub	sp, #48	; 0x30
 800c950:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c952:	e07c      	b.n	800ca4e <prvProcessReceivedCommands+0x102>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	2b00      	cmp	r3, #0
 800c958:	db78      	blt.n	800ca4c <prvProcessReceivedCommands+0x100>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800c95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c960:	695b      	ldr	r3, [r3, #20]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d004      	beq.n	800c970 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c968:	3304      	adds	r3, #4
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fe f8bf 	bl	800aaee <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c970:	1d3b      	adds	r3, r7, #4
 800c972:	4618      	mov	r0, r3
 800c974:	f7ff ff88 	bl	800c888 <prvSampleTimeNow>
 800c978:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	2b09      	cmp	r3, #9
 800c97e:	d866      	bhi.n	800ca4e <prvProcessReceivedCommands+0x102>
 800c980:	a201      	add	r2, pc, #4	; (adr r2, 800c988 <prvProcessReceivedCommands+0x3c>)
 800c982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c986:	bf00      	nop
 800c988:	0800c9b1 	.word	0x0800c9b1
 800c98c:	0800c9b1 	.word	0x0800c9b1
 800c990:	0800c9b1 	.word	0x0800c9b1
 800c994:	0800ca4f 	.word	0x0800ca4f
 800c998:	0800ca0d 	.word	0x0800ca0d
 800c99c:	0800ca45 	.word	0x0800ca45
 800c9a0:	0800c9b1 	.word	0x0800c9b1
 800c9a4:	0800c9b1 	.word	0x0800c9b1
 800c9a8:	0800ca4f 	.word	0x0800ca4f
 800c9ac:	0800ca0d 	.word	0x0800ca0d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b4:	699b      	ldr	r3, [r3, #24]
 800c9b6:	18d1      	adds	r1, r2, r3
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	6a3a      	ldr	r2, [r7, #32]
 800c9bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9be:	f7ff ff83 	bl	800c8c8 <prvInsertTimerInActiveList>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d042      	beq.n	800ca4e <prvProcessReceivedCommands+0x102>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9ce:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d2:	69db      	ldr	r3, [r3, #28]
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d13a      	bne.n	800ca4e <prvProcessReceivedCommands+0x102>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c9d8:	68fa      	ldr	r2, [r7, #12]
 800c9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9dc:	699b      	ldr	r3, [r3, #24]
 800c9de:	441a      	add	r2, r3
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	2100      	movs	r1, #0
 800c9e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9ea:	f7ff fe3b 	bl	800c664 <xTimerGenericCommand>
 800c9ee:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d12b      	bne.n	800ca4e <prvProcessReceivedCommands+0x102>
	__asm volatile
 800c9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fa:	f383 8811 	msr	BASEPRI, r3
 800c9fe:	f3bf 8f6f 	isb	sy
 800ca02:	f3bf 8f4f 	dsb	sy
 800ca06:	61bb      	str	r3, [r7, #24]
}
 800ca08:	bf00      	nop
 800ca0a:	e7fe      	b.n	800ca0a <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ca0c:	68fa      	ldr	r2, [r7, #12]
 800ca0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ca12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca14:	699b      	ldr	r3, [r3, #24]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d10a      	bne.n	800ca30 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800ca1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1e:	f383 8811 	msr	BASEPRI, r3
 800ca22:	f3bf 8f6f 	isb	sy
 800ca26:	f3bf 8f4f 	dsb	sy
 800ca2a:	617b      	str	r3, [r7, #20]
}
 800ca2c:	bf00      	nop
 800ca2e:	e7fe      	b.n	800ca2e <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ca30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca32:	699a      	ldr	r2, [r3, #24]
 800ca34:	6a3b      	ldr	r3, [r7, #32]
 800ca36:	18d1      	adds	r1, r2, r3
 800ca38:	6a3b      	ldr	r3, [r7, #32]
 800ca3a:	6a3a      	ldr	r2, [r7, #32]
 800ca3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca3e:	f7ff ff43 	bl	800c8c8 <prvInsertTimerInActiveList>
					break;
 800ca42:	e004      	b.n	800ca4e <prvProcessReceivedCommands+0x102>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 800ca44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca46:	f000 fb93 	bl	800d170 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ca4a:	e000      	b.n	800ca4e <prvProcessReceivedCommands+0x102>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ca4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca4e:	4b08      	ldr	r3, [pc, #32]	; (800ca70 <prvProcessReceivedCommands+0x124>)
 800ca50:	6818      	ldr	r0, [r3, #0]
 800ca52:	f107 0108 	add.w	r1, r7, #8
 800ca56:	2300      	movs	r3, #0
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f7fe fb8f 	bl	800b17c <xQueueGenericReceive>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	f47f af77 	bne.w	800c954 <prvProcessReceivedCommands+0x8>
	}
}
 800ca66:	bf00      	nop
 800ca68:	bf00      	nop
 800ca6a:	3728      	adds	r7, #40	; 0x28
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}
 800ca70:	200009c8 	.word	0x200009c8

0800ca74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b088      	sub	sp, #32
 800ca78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca7a:	e045      	b.n	800cb08 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca7c:	4b2c      	ldr	r3, [pc, #176]	; (800cb30 <prvSwitchTimerLists+0xbc>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca86:	4b2a      	ldr	r3, [pc, #168]	; (800cb30 <prvSwitchTimerLists+0xbc>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	68db      	ldr	r3, [r3, #12]
 800ca8c:	68db      	ldr	r3, [r3, #12]
 800ca8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	3304      	adds	r3, #4
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7fe f82a 	bl	800aaee <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca9e:	68f8      	ldr	r0, [r7, #12]
 800caa0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	69db      	ldr	r3, [r3, #28]
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d12e      	bne.n	800cb08 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	699b      	ldr	r3, [r3, #24]
 800caae:	693a      	ldr	r2, [r7, #16]
 800cab0:	4413      	add	r3, r2
 800cab2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cab4:	68ba      	ldr	r2, [r7, #8]
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	429a      	cmp	r2, r3
 800caba:	d90e      	bls.n	800cada <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	68ba      	ldr	r2, [r7, #8]
 800cac0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cac8:	4b19      	ldr	r3, [pc, #100]	; (800cb30 <prvSwitchTimerLists+0xbc>)
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	3304      	adds	r3, #4
 800cad0:	4619      	mov	r1, r3
 800cad2:	4610      	mov	r0, r2
 800cad4:	f7fd ffd2 	bl	800aa7c <vListInsert>
 800cad8:	e016      	b.n	800cb08 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cada:	2300      	movs	r3, #0
 800cadc:	9300      	str	r3, [sp, #0]
 800cade:	2300      	movs	r3, #0
 800cae0:	693a      	ldr	r2, [r7, #16]
 800cae2:	2100      	movs	r1, #0
 800cae4:	68f8      	ldr	r0, [r7, #12]
 800cae6:	f7ff fdbd 	bl	800c664 <xTimerGenericCommand>
 800caea:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d10a      	bne.n	800cb08 <prvSwitchTimerLists+0x94>
	__asm volatile
 800caf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf6:	f383 8811 	msr	BASEPRI, r3
 800cafa:	f3bf 8f6f 	isb	sy
 800cafe:	f3bf 8f4f 	dsb	sy
 800cb02:	603b      	str	r3, [r7, #0]
}
 800cb04:	bf00      	nop
 800cb06:	e7fe      	b.n	800cb06 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb08:	4b09      	ldr	r3, [pc, #36]	; (800cb30 <prvSwitchTimerLists+0xbc>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d1b4      	bne.n	800ca7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cb12:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <prvSwitchTimerLists+0xbc>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cb18:	4b06      	ldr	r3, [pc, #24]	; (800cb34 <prvSwitchTimerLists+0xc0>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a04      	ldr	r2, [pc, #16]	; (800cb30 <prvSwitchTimerLists+0xbc>)
 800cb1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cb20:	4a04      	ldr	r2, [pc, #16]	; (800cb34 <prvSwitchTimerLists+0xc0>)
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	6013      	str	r3, [r2, #0]
}
 800cb26:	bf00      	nop
 800cb28:	3718      	adds	r7, #24
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	200009c0 	.word	0x200009c0
 800cb34:	200009c4 	.word	0x200009c4

0800cb38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cb3c:	f000 f93a 	bl	800cdb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cb40:	4b12      	ldr	r3, [pc, #72]	; (800cb8c <prvCheckForValidListAndQueue+0x54>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d11d      	bne.n	800cb84 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800cb48:	4811      	ldr	r0, [pc, #68]	; (800cb90 <prvCheckForValidListAndQueue+0x58>)
 800cb4a:	f7fd ff46 	bl	800a9da <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cb4e:	4811      	ldr	r0, [pc, #68]	; (800cb94 <prvCheckForValidListAndQueue+0x5c>)
 800cb50:	f7fd ff43 	bl	800a9da <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cb54:	4b10      	ldr	r3, [pc, #64]	; (800cb98 <prvCheckForValidListAndQueue+0x60>)
 800cb56:	4a0e      	ldr	r2, [pc, #56]	; (800cb90 <prvCheckForValidListAndQueue+0x58>)
 800cb58:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cb5a:	4b10      	ldr	r3, [pc, #64]	; (800cb9c <prvCheckForValidListAndQueue+0x64>)
 800cb5c:	4a0d      	ldr	r2, [pc, #52]	; (800cb94 <prvCheckForValidListAndQueue+0x5c>)
 800cb5e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800cb60:	2200      	movs	r2, #0
 800cb62:	210c      	movs	r1, #12
 800cb64:	200a      	movs	r0, #10
 800cb66:	f7fe f855 	bl	800ac14 <xQueueGenericCreate>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	4a07      	ldr	r2, [pc, #28]	; (800cb8c <prvCheckForValidListAndQueue+0x54>)
 800cb6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cb70:	4b06      	ldr	r3, [pc, #24]	; (800cb8c <prvCheckForValidListAndQueue+0x54>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d005      	beq.n	800cb84 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cb78:	4b04      	ldr	r3, [pc, #16]	; (800cb8c <prvCheckForValidListAndQueue+0x54>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4908      	ldr	r1, [pc, #32]	; (800cba0 <prvCheckForValidListAndQueue+0x68>)
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7fe fda2 	bl	800b6c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb84:	f000 f946 	bl	800ce14 <vPortExitCritical>
}
 800cb88:	bf00      	nop
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	200009c8 	.word	0x200009c8
 800cb90:	20000998 	.word	0x20000998
 800cb94:	200009ac 	.word	0x200009ac
 800cb98:	200009c0 	.word	0x200009c0
 800cb9c:	200009c4 	.word	0x200009c4
 800cba0:	08010a08 	.word	0x08010a08

0800cba4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cba4:	b480      	push	{r7}
 800cba6:	b085      	sub	sp, #20
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	3b04      	subs	r3, #4
 800cbb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cbbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	3b04      	subs	r3, #4
 800cbc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	f023 0201 	bic.w	r2, r3, #1
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	3b04      	subs	r3, #4
 800cbd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cbd4:	4a0c      	ldr	r2, [pc, #48]	; (800cc08 <pxPortInitialiseStack+0x64>)
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	3b14      	subs	r3, #20
 800cbde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	3b04      	subs	r3, #4
 800cbea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f06f 0202 	mvn.w	r2, #2
 800cbf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	3b20      	subs	r3, #32
 800cbf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3714      	adds	r7, #20
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr
 800cc08:	0800cc0d 	.word	0x0800cc0d

0800cc0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cc12:	4b0d      	ldr	r3, [pc, #52]	; (800cc48 <prvTaskExitError+0x3c>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc1a:	d00a      	beq.n	800cc32 <prvTaskExitError+0x26>
	__asm volatile
 800cc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc20:	f383 8811 	msr	BASEPRI, r3
 800cc24:	f3bf 8f6f 	isb	sy
 800cc28:	f3bf 8f4f 	dsb	sy
 800cc2c:	607b      	str	r3, [r7, #4]
}
 800cc2e:	bf00      	nop
 800cc30:	e7fe      	b.n	800cc30 <prvTaskExitError+0x24>
	__asm volatile
 800cc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc36:	f383 8811 	msr	BASEPRI, r3
 800cc3a:	f3bf 8f6f 	isb	sy
 800cc3e:	f3bf 8f4f 	dsb	sy
 800cc42:	603b      	str	r3, [r7, #0]
}
 800cc44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	for( ;; );
 800cc46:	e7fe      	b.n	800cc46 <prvTaskExitError+0x3a>
 800cc48:	20000018 	.word	0x20000018
 800cc4c:	00000000 	.word	0x00000000

0800cc50 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc50:	4b07      	ldr	r3, [pc, #28]	; (800cc70 <pxCurrentTCBConst2>)
 800cc52:	6819      	ldr	r1, [r3, #0]
 800cc54:	6808      	ldr	r0, [r1, #0]
 800cc56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5a:	f380 8809 	msr	PSP, r0
 800cc5e:	f3bf 8f6f 	isb	sy
 800cc62:	f04f 0000 	mov.w	r0, #0
 800cc66:	f380 8811 	msr	BASEPRI, r0
 800cc6a:	4770      	bx	lr
 800cc6c:	f3af 8000 	nop.w

0800cc70 <pxCurrentTCBConst2>:
 800cc70:	2000086c 	.word	0x2000086c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cc74:	bf00      	nop
 800cc76:	bf00      	nop

0800cc78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800cc78:	4806      	ldr	r0, [pc, #24]	; (800cc94 <prvPortStartFirstTask+0x1c>)
 800cc7a:	6800      	ldr	r0, [r0, #0]
 800cc7c:	6800      	ldr	r0, [r0, #0]
 800cc7e:	f380 8808 	msr	MSP, r0
 800cc82:	b662      	cpsie	i
 800cc84:	b661      	cpsie	f
 800cc86:	f3bf 8f4f 	dsb	sy
 800cc8a:	f3bf 8f6f 	isb	sy
 800cc8e:	df00      	svc	0
 800cc90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc92:	bf00      	nop
 800cc94:	e000ed08 	.word	0xe000ed08

0800cc98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b086      	sub	sp, #24
 800cc9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc9e:	4b3c      	ldr	r3, [pc, #240]	; (800cd90 <xPortStartScheduler+0xf8>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	4a3c      	ldr	r2, [pc, #240]	; (800cd94 <xPortStartScheduler+0xfc>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d10a      	bne.n	800ccbe <xPortStartScheduler+0x26>
	__asm volatile
 800cca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccac:	f383 8811 	msr	BASEPRI, r3
 800ccb0:	f3bf 8f6f 	isb	sy
 800ccb4:	f3bf 8f4f 	dsb	sy
 800ccb8:	613b      	str	r3, [r7, #16]
}
 800ccba:	bf00      	nop
 800ccbc:	e7fe      	b.n	800ccbc <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ccbe:	4b34      	ldr	r3, [pc, #208]	; (800cd90 <xPortStartScheduler+0xf8>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4a35      	ldr	r2, [pc, #212]	; (800cd98 <xPortStartScheduler+0x100>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d10a      	bne.n	800ccde <xPortStartScheduler+0x46>
	__asm volatile
 800ccc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cccc:	f383 8811 	msr	BASEPRI, r3
 800ccd0:	f3bf 8f6f 	isb	sy
 800ccd4:	f3bf 8f4f 	dsb	sy
 800ccd8:	60fb      	str	r3, [r7, #12]
}
 800ccda:	bf00      	nop
 800ccdc:	e7fe      	b.n	800ccdc <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ccde:	4b2f      	ldr	r3, [pc, #188]	; (800cd9c <xPortStartScheduler+0x104>)
 800cce0:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	22ff      	movs	r2, #255	; 0xff
 800ccee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ccf8:	79fb      	ldrb	r3, [r7, #7]
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cd00:	b2da      	uxtb	r2, r3
 800cd02:	4b27      	ldr	r3, [pc, #156]	; (800cda0 <xPortStartScheduler+0x108>)
 800cd04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cd06:	4b27      	ldr	r3, [pc, #156]	; (800cda4 <xPortStartScheduler+0x10c>)
 800cd08:	2207      	movs	r2, #7
 800cd0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd0c:	e009      	b.n	800cd22 <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cd0e:	4b25      	ldr	r3, [pc, #148]	; (800cda4 <xPortStartScheduler+0x10c>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	3b01      	subs	r3, #1
 800cd14:	4a23      	ldr	r2, [pc, #140]	; (800cda4 <xPortStartScheduler+0x10c>)
 800cd16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cd18:	79fb      	ldrb	r3, [r7, #7]
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	005b      	lsls	r3, r3, #1
 800cd1e:	b2db      	uxtb	r3, r3
 800cd20:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd22:	79fb      	ldrb	r3, [r7, #7]
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd2a:	2b80      	cmp	r3, #128	; 0x80
 800cd2c:	d0ef      	beq.n	800cd0e <xPortStartScheduler+0x76>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd2e:	4b1d      	ldr	r3, [pc, #116]	; (800cda4 <xPortStartScheduler+0x10c>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	021b      	lsls	r3, r3, #8
 800cd34:	4a1b      	ldr	r2, [pc, #108]	; (800cda4 <xPortStartScheduler+0x10c>)
 800cd36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd38:	4b1a      	ldr	r3, [pc, #104]	; (800cda4 <xPortStartScheduler+0x10c>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cd40:	4a18      	ldr	r2, [pc, #96]	; (800cda4 <xPortStartScheduler+0x10c>)
 800cd42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	b2da      	uxtb	r2, r3
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd4c:	4b16      	ldr	r3, [pc, #88]	; (800cda8 <xPortStartScheduler+0x110>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a15      	ldr	r2, [pc, #84]	; (800cda8 <xPortStartScheduler+0x110>)
 800cd52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cd56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cd58:	4b13      	ldr	r3, [pc, #76]	; (800cda8 <xPortStartScheduler+0x110>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a12      	ldr	r2, [pc, #72]	; (800cda8 <xPortStartScheduler+0x110>)
 800cd5e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cd62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cd64:	f000 f8da 	bl	800cf1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd68:	4b10      	ldr	r3, [pc, #64]	; (800cdac <xPortStartScheduler+0x114>)
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd6e:	f000 f8f1 	bl	800cf54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd72:	4b0f      	ldr	r3, [pc, #60]	; (800cdb0 <xPortStartScheduler+0x118>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4a0e      	ldr	r2, [pc, #56]	; (800cdb0 <xPortStartScheduler+0x118>)
 800cd78:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd7e:	f7ff ff7b 	bl	800cc78 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800cd82:	f7ff ff43 	bl	800cc0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd86:	2300      	movs	r3, #0
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3718      	adds	r7, #24
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	e000ed00 	.word	0xe000ed00
 800cd94:	410fc271 	.word	0x410fc271
 800cd98:	410fc270 	.word	0x410fc270
 800cd9c:	e000e400 	.word	0xe000e400
 800cda0:	200009d4 	.word	0x200009d4
 800cda4:	200009d8 	.word	0x200009d8
 800cda8:	e000ed20 	.word	0xe000ed20
 800cdac:	20000018 	.word	0x20000018
 800cdb0:	e000ef34 	.word	0xe000ef34

0800cdb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b083      	sub	sp, #12
 800cdb8:	af00      	add	r7, sp, #0
	__asm volatile
 800cdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdbe:	f383 8811 	msr	BASEPRI, r3
 800cdc2:	f3bf 8f6f 	isb	sy
 800cdc6:	f3bf 8f4f 	dsb	sy
 800cdca:	607b      	str	r3, [r7, #4]
}
 800cdcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cdce:	4b0f      	ldr	r3, [pc, #60]	; (800ce0c <vPortEnterCritical+0x58>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	4a0d      	ldr	r2, [pc, #52]	; (800ce0c <vPortEnterCritical+0x58>)
 800cdd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cdd8:	4b0c      	ldr	r3, [pc, #48]	; (800ce0c <vPortEnterCritical+0x58>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d10f      	bne.n	800ce00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cde0:	4b0b      	ldr	r3, [pc, #44]	; (800ce10 <vPortEnterCritical+0x5c>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00a      	beq.n	800ce00 <vPortEnterCritical+0x4c>
	__asm volatile
 800cdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdee:	f383 8811 	msr	BASEPRI, r3
 800cdf2:	f3bf 8f6f 	isb	sy
 800cdf6:	f3bf 8f4f 	dsb	sy
 800cdfa:	603b      	str	r3, [r7, #0]
}
 800cdfc:	bf00      	nop
 800cdfe:	e7fe      	b.n	800cdfe <vPortEnterCritical+0x4a>
	}
}
 800ce00:	bf00      	nop
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr
 800ce0c:	20000018 	.word	0x20000018
 800ce10:	e000ed04 	.word	0xe000ed04

0800ce14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce1a:	4b12      	ldr	r3, [pc, #72]	; (800ce64 <vPortExitCritical+0x50>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d10a      	bne.n	800ce38 <vPortExitCritical+0x24>
	__asm volatile
 800ce22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce26:	f383 8811 	msr	BASEPRI, r3
 800ce2a:	f3bf 8f6f 	isb	sy
 800ce2e:	f3bf 8f4f 	dsb	sy
 800ce32:	607b      	str	r3, [r7, #4]
}
 800ce34:	bf00      	nop
 800ce36:	e7fe      	b.n	800ce36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ce38:	4b0a      	ldr	r3, [pc, #40]	; (800ce64 <vPortExitCritical+0x50>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	3b01      	subs	r3, #1
 800ce3e:	4a09      	ldr	r2, [pc, #36]	; (800ce64 <vPortExitCritical+0x50>)
 800ce40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce42:	4b08      	ldr	r3, [pc, #32]	; (800ce64 <vPortExitCritical+0x50>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d105      	bne.n	800ce56 <vPortExitCritical+0x42>
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	f383 8811 	msr	BASEPRI, r3
}
 800ce54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce56:	bf00      	nop
 800ce58:	370c      	adds	r7, #12
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop
 800ce64:	20000018 	.word	0x20000018
	...

0800ce70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce70:	f3ef 8009 	mrs	r0, PSP
 800ce74:	f3bf 8f6f 	isb	sy
 800ce78:	4b15      	ldr	r3, [pc, #84]	; (800ced0 <pxCurrentTCBConst>)
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	f01e 0f10 	tst.w	lr, #16
 800ce80:	bf08      	it	eq
 800ce82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce8a:	6010      	str	r0, [r2, #0]
 800ce8c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 800ce90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce94:	f380 8811 	msr	BASEPRI, r0
 800ce98:	f3bf 8f4f 	dsb	sy
 800ce9c:	f3bf 8f6f 	isb	sy
 800cea0:	f7fe ffb2 	bl	800be08 <vTaskSwitchContext>
 800cea4:	f04f 0000 	mov.w	r0, #0
 800cea8:	f380 8811 	msr	BASEPRI, r0
 800ceac:	bc08      	pop	{r3}
 800ceae:	6819      	ldr	r1, [r3, #0]
 800ceb0:	6808      	ldr	r0, [r1, #0]
 800ceb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb6:	f01e 0f10 	tst.w	lr, #16
 800ceba:	bf08      	it	eq
 800cebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cec0:	f380 8809 	msr	PSP, r0
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	f3af 8000 	nop.w

0800ced0 <pxCurrentTCBConst>:
 800ced0:	2000086c 	.word	0x2000086c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ced4:	bf00      	nop
 800ced6:	bf00      	nop

0800ced8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
	__asm volatile
 800cede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee2:	f383 8811 	msr	BASEPRI, r3
 800cee6:	f3bf 8f6f 	isb	sy
 800ceea:	f3bf 8f4f 	dsb	sy
 800ceee:	607b      	str	r3, [r7, #4]
}
 800cef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cef2:	f7fe fecb 	bl	800bc8c <xTaskIncrementTick>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d003      	beq.n	800cf04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cefc:	4b06      	ldr	r3, [pc, #24]	; (800cf18 <xPortSysTickHandler+0x40>)
 800cefe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf02:	601a      	str	r2, [r3, #0]
 800cf04:	2300      	movs	r3, #0
 800cf06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	f383 8811 	msr	BASEPRI, r3
}
 800cf0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cf10:	bf00      	nop
 800cf12:	3708      	adds	r7, #8
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	e000ed04 	.word	0xe000ed04

0800cf1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf20:	4b08      	ldr	r3, [pc, #32]	; (800cf44 <vPortSetupTimerInterrupt+0x28>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a08      	ldr	r2, [pc, #32]	; (800cf48 <vPortSetupTimerInterrupt+0x2c>)
 800cf26:	fba2 2303 	umull	r2, r3, r2, r3
 800cf2a:	099b      	lsrs	r3, r3, #6
 800cf2c:	4a07      	ldr	r2, [pc, #28]	; (800cf4c <vPortSetupTimerInterrupt+0x30>)
 800cf2e:	3b01      	subs	r3, #1
 800cf30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf32:	4b07      	ldr	r3, [pc, #28]	; (800cf50 <vPortSetupTimerInterrupt+0x34>)
 800cf34:	2207      	movs	r2, #7
 800cf36:	601a      	str	r2, [r3, #0]
}
 800cf38:	bf00      	nop
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	20000014 	.word	0x20000014
 800cf48:	10624dd3 	.word	0x10624dd3
 800cf4c:	e000e014 	.word	0xe000e014
 800cf50:	e000e010 	.word	0xe000e010

0800cf54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cf64 <vPortEnableVFP+0x10>
 800cf58:	6801      	ldr	r1, [r0, #0]
 800cf5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cf5e:	6001      	str	r1, [r0, #0]
 800cf60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf62:	bf00      	nop
 800cf64:	e000ed88 	.word	0xe000ed88

0800cf68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf68:	b480      	push	{r7}
 800cf6a:	b085      	sub	sp, #20
 800cf6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800cf6e:	f3ef 8305 	mrs	r3, IPSR
 800cf72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2b0f      	cmp	r3, #15
 800cf78:	d914      	bls.n	800cfa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf7a:	4a17      	ldr	r2, [pc, #92]	; (800cfd8 <vPortValidateInterruptPriority+0x70>)
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	4413      	add	r3, r2
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf84:	4b15      	ldr	r3, [pc, #84]	; (800cfdc <vPortValidateInterruptPriority+0x74>)
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	7afa      	ldrb	r2, [r7, #11]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d20a      	bcs.n	800cfa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf92:	f383 8811 	msr	BASEPRI, r3
 800cf96:	f3bf 8f6f 	isb	sy
 800cf9a:	f3bf 8f4f 	dsb	sy
 800cf9e:	607b      	str	r3, [r7, #4]
}
 800cfa0:	bf00      	nop
 800cfa2:	e7fe      	b.n	800cfa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cfa4:	4b0e      	ldr	r3, [pc, #56]	; (800cfe0 <vPortValidateInterruptPriority+0x78>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cfac:	4b0d      	ldr	r3, [pc, #52]	; (800cfe4 <vPortValidateInterruptPriority+0x7c>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d90a      	bls.n	800cfca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb8:	f383 8811 	msr	BASEPRI, r3
 800cfbc:	f3bf 8f6f 	isb	sy
 800cfc0:	f3bf 8f4f 	dsb	sy
 800cfc4:	603b      	str	r3, [r7, #0]
}
 800cfc6:	bf00      	nop
 800cfc8:	e7fe      	b.n	800cfc8 <vPortValidateInterruptPriority+0x60>
	}
 800cfca:	bf00      	nop
 800cfcc:	3714      	adds	r7, #20
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd4:	4770      	bx	lr
 800cfd6:	bf00      	nop
 800cfd8:	e000e3f0 	.word	0xe000e3f0
 800cfdc:	200009d4 	.word	0x200009d4
 800cfe0:	e000ed0c 	.word	0xe000ed0c
 800cfe4:	200009d8 	.word	0x200009d8

0800cfe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b08a      	sub	sp, #40	; 0x28
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cff0:	2300      	movs	r3, #0
 800cff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cff4:	f7fe fd7e 	bl	800baf4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cff8:	4b58      	ldr	r3, [pc, #352]	; (800d15c <pvPortMalloc+0x174>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d101      	bne.n	800d004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d000:	f000 f910 	bl	800d224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d004:	4b56      	ldr	r3, [pc, #344]	; (800d160 <pvPortMalloc+0x178>)
 800d006:	681a      	ldr	r2, [r3, #0]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4013      	ands	r3, r2
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f040 808e 	bne.w	800d12e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d01d      	beq.n	800d054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d018:	2208      	movs	r2, #8
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	4413      	add	r3, r2
 800d01e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f003 0307 	and.w	r3, r3, #7
 800d026:	2b00      	cmp	r3, #0
 800d028:	d014      	beq.n	800d054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f023 0307 	bic.w	r3, r3, #7
 800d030:	3308      	adds	r3, #8
 800d032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f003 0307 	and.w	r3, r3, #7
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00a      	beq.n	800d054 <pvPortMalloc+0x6c>
	__asm volatile
 800d03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	617b      	str	r3, [r7, #20]
}
 800d050:	bf00      	nop
 800d052:	e7fe      	b.n	800d052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d069      	beq.n	800d12e <pvPortMalloc+0x146>
 800d05a:	4b42      	ldr	r3, [pc, #264]	; (800d164 <pvPortMalloc+0x17c>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	429a      	cmp	r2, r3
 800d062:	d864      	bhi.n	800d12e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d064:	4b40      	ldr	r3, [pc, #256]	; (800d168 <pvPortMalloc+0x180>)
 800d066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d068:	4b3f      	ldr	r3, [pc, #252]	; (800d168 <pvPortMalloc+0x180>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d06e:	e004      	b.n	800d07a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	429a      	cmp	r2, r3
 800d082:	d903      	bls.n	800d08c <pvPortMalloc+0xa4>
 800d084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d1f1      	bne.n	800d070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d08c:	4b33      	ldr	r3, [pc, #204]	; (800d15c <pvPortMalloc+0x174>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d092:	429a      	cmp	r2, r3
 800d094:	d04b      	beq.n	800d12e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d096:	6a3b      	ldr	r3, [r7, #32]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2208      	movs	r2, #8
 800d09c:	4413      	add	r3, r2
 800d09e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	6a3b      	ldr	r3, [r7, #32]
 800d0a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0aa:	685a      	ldr	r2, [r3, #4]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	1ad2      	subs	r2, r2, r3
 800d0b0:	2308      	movs	r3, #8
 800d0b2:	005b      	lsls	r3, r3, #1
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d91f      	bls.n	800d0f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d0b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	4413      	add	r3, r2
 800d0be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	f003 0307 	and.w	r3, r3, #7
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00a      	beq.n	800d0e0 <pvPortMalloc+0xf8>
	__asm volatile
 800d0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ce:	f383 8811 	msr	BASEPRI, r3
 800d0d2:	f3bf 8f6f 	isb	sy
 800d0d6:	f3bf 8f4f 	dsb	sy
 800d0da:	613b      	str	r3, [r7, #16]
}
 800d0dc:	bf00      	nop
 800d0de:	e7fe      	b.n	800d0de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e2:	685a      	ldr	r2, [r3, #4]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	1ad2      	subs	r2, r2, r3
 800d0e8:	69bb      	ldr	r3, [r7, #24]
 800d0ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d0f2:	69b8      	ldr	r0, [r7, #24]
 800d0f4:	f000 f8f8 	bl	800d2e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d0f8:	4b1a      	ldr	r3, [pc, #104]	; (800d164 <pvPortMalloc+0x17c>)
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	1ad3      	subs	r3, r2, r3
 800d102:	4a18      	ldr	r2, [pc, #96]	; (800d164 <pvPortMalloc+0x17c>)
 800d104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d106:	4b17      	ldr	r3, [pc, #92]	; (800d164 <pvPortMalloc+0x17c>)
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	4b18      	ldr	r3, [pc, #96]	; (800d16c <pvPortMalloc+0x184>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	429a      	cmp	r2, r3
 800d110:	d203      	bcs.n	800d11a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d112:	4b14      	ldr	r3, [pc, #80]	; (800d164 <pvPortMalloc+0x17c>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	4a15      	ldr	r2, [pc, #84]	; (800d16c <pvPortMalloc+0x184>)
 800d118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11c:	685a      	ldr	r2, [r3, #4]
 800d11e:	4b10      	ldr	r3, [pc, #64]	; (800d160 <pvPortMalloc+0x178>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	431a      	orrs	r2, r3
 800d124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12a:	2200      	movs	r2, #0
 800d12c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d12e:	f7fe fcef 	bl	800bb10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d132:	69fb      	ldr	r3, [r7, #28]
 800d134:	f003 0307 	and.w	r3, r3, #7
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d00a      	beq.n	800d152 <pvPortMalloc+0x16a>
	__asm volatile
 800d13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d140:	f383 8811 	msr	BASEPRI, r3
 800d144:	f3bf 8f6f 	isb	sy
 800d148:	f3bf 8f4f 	dsb	sy
 800d14c:	60fb      	str	r3, [r7, #12]
}
 800d14e:	bf00      	nop
 800d150:	e7fe      	b.n	800d150 <pvPortMalloc+0x168>
	return pvReturn;
 800d152:	69fb      	ldr	r3, [r7, #28]
}
 800d154:	4618      	mov	r0, r3
 800d156:	3728      	adds	r7, #40	; 0x28
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	200081e4 	.word	0x200081e4
 800d160:	200081f0 	.word	0x200081f0
 800d164:	200081e8 	.word	0x200081e8
 800d168:	200081dc 	.word	0x200081dc
 800d16c:	200081ec 	.word	0x200081ec

0800d170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b086      	sub	sp, #24
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d048      	beq.n	800d214 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d182:	2308      	movs	r3, #8
 800d184:	425b      	negs	r3, r3
 800d186:	697a      	ldr	r2, [r7, #20]
 800d188:	4413      	add	r3, r2
 800d18a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	685a      	ldr	r2, [r3, #4]
 800d194:	4b21      	ldr	r3, [pc, #132]	; (800d21c <vPortFree+0xac>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4013      	ands	r3, r2
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d10a      	bne.n	800d1b4 <vPortFree+0x44>
	__asm volatile
 800d19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a2:	f383 8811 	msr	BASEPRI, r3
 800d1a6:	f3bf 8f6f 	isb	sy
 800d1aa:	f3bf 8f4f 	dsb	sy
 800d1ae:	60fb      	str	r3, [r7, #12]
}
 800d1b0:	bf00      	nop
 800d1b2:	e7fe      	b.n	800d1b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d00a      	beq.n	800d1d2 <vPortFree+0x62>
	__asm volatile
 800d1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c0:	f383 8811 	msr	BASEPRI, r3
 800d1c4:	f3bf 8f6f 	isb	sy
 800d1c8:	f3bf 8f4f 	dsb	sy
 800d1cc:	60bb      	str	r3, [r7, #8]
}
 800d1ce:	bf00      	nop
 800d1d0:	e7fe      	b.n	800d1d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	685a      	ldr	r2, [r3, #4]
 800d1d6:	4b11      	ldr	r3, [pc, #68]	; (800d21c <vPortFree+0xac>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4013      	ands	r3, r2
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d019      	beq.n	800d214 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d115      	bne.n	800d214 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	685a      	ldr	r2, [r3, #4]
 800d1ec:	4b0b      	ldr	r3, [pc, #44]	; (800d21c <vPortFree+0xac>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	43db      	mvns	r3, r3
 800d1f2:	401a      	ands	r2, r3
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d1f8:	f7fe fc7c 	bl	800baf4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	685a      	ldr	r2, [r3, #4]
 800d200:	4b07      	ldr	r3, [pc, #28]	; (800d220 <vPortFree+0xb0>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4413      	add	r3, r2
 800d206:	4a06      	ldr	r2, [pc, #24]	; (800d220 <vPortFree+0xb0>)
 800d208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d20a:	6938      	ldr	r0, [r7, #16]
 800d20c:	f000 f86c 	bl	800d2e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d210:	f7fe fc7e 	bl	800bb10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d214:	bf00      	nop
 800d216:	3718      	adds	r7, #24
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	200081f0 	.word	0x200081f0
 800d220:	200081e8 	.word	0x200081e8

0800d224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d224:	b480      	push	{r7}
 800d226:	b085      	sub	sp, #20
 800d228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d22a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800d22e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d230:	4b27      	ldr	r3, [pc, #156]	; (800d2d0 <prvHeapInit+0xac>)
 800d232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f003 0307 	and.w	r3, r3, #7
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d00c      	beq.n	800d258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	3307      	adds	r3, #7
 800d242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f023 0307 	bic.w	r3, r3, #7
 800d24a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d24c:	68ba      	ldr	r2, [r7, #8]
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	1ad3      	subs	r3, r2, r3
 800d252:	4a1f      	ldr	r2, [pc, #124]	; (800d2d0 <prvHeapInit+0xac>)
 800d254:	4413      	add	r3, r2
 800d256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d25c:	4a1d      	ldr	r2, [pc, #116]	; (800d2d4 <prvHeapInit+0xb0>)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d262:	4b1c      	ldr	r3, [pc, #112]	; (800d2d4 <prvHeapInit+0xb0>)
 800d264:	2200      	movs	r2, #0
 800d266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	68ba      	ldr	r2, [r7, #8]
 800d26c:	4413      	add	r3, r2
 800d26e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d270:	2208      	movs	r2, #8
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	1a9b      	subs	r3, r3, r2
 800d276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	f023 0307 	bic.w	r3, r3, #7
 800d27e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	4a15      	ldr	r2, [pc, #84]	; (800d2d8 <prvHeapInit+0xb4>)
 800d284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d286:	4b14      	ldr	r3, [pc, #80]	; (800d2d8 <prvHeapInit+0xb4>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	2200      	movs	r2, #0
 800d28c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d28e:	4b12      	ldr	r3, [pc, #72]	; (800d2d8 <prvHeapInit+0xb4>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	2200      	movs	r2, #0
 800d294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	68fa      	ldr	r2, [r7, #12]
 800d29e:	1ad2      	subs	r2, r2, r3
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d2a4:	4b0c      	ldr	r3, [pc, #48]	; (800d2d8 <prvHeapInit+0xb4>)
 800d2a6:	681a      	ldr	r2, [r3, #0]
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	4a0a      	ldr	r2, [pc, #40]	; (800d2dc <prvHeapInit+0xb8>)
 800d2b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	4a09      	ldr	r2, [pc, #36]	; (800d2e0 <prvHeapInit+0xbc>)
 800d2ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d2bc:	4b09      	ldr	r3, [pc, #36]	; (800d2e4 <prvHeapInit+0xc0>)
 800d2be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d2c2:	601a      	str	r2, [r3, #0]
}
 800d2c4:	bf00      	nop
 800d2c6:	3714      	adds	r7, #20
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr
 800d2d0:	200009dc 	.word	0x200009dc
 800d2d4:	200081dc 	.word	0x200081dc
 800d2d8:	200081e4 	.word	0x200081e4
 800d2dc:	200081ec 	.word	0x200081ec
 800d2e0:	200081e8 	.word	0x200081e8
 800d2e4:	200081f0 	.word	0x200081f0

0800d2e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b085      	sub	sp, #20
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d2f0:	4b28      	ldr	r3, [pc, #160]	; (800d394 <prvInsertBlockIntoFreeList+0xac>)
 800d2f2:	60fb      	str	r3, [r7, #12]
 800d2f4:	e002      	b.n	800d2fc <prvInsertBlockIntoFreeList+0x14>
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	60fb      	str	r3, [r7, #12]
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	429a      	cmp	r2, r3
 800d304:	d8f7      	bhi.n	800d2f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	68ba      	ldr	r2, [r7, #8]
 800d310:	4413      	add	r3, r2
 800d312:	687a      	ldr	r2, [r7, #4]
 800d314:	429a      	cmp	r2, r3
 800d316:	d108      	bne.n	800d32a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	685a      	ldr	r2, [r3, #4]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	441a      	add	r2, r3
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	68ba      	ldr	r2, [r7, #8]
 800d334:	441a      	add	r2, r3
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d118      	bne.n	800d370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	4b15      	ldr	r3, [pc, #84]	; (800d398 <prvInsertBlockIntoFreeList+0xb0>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	429a      	cmp	r2, r3
 800d348:	d00d      	beq.n	800d366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	685a      	ldr	r2, [r3, #4]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	685b      	ldr	r3, [r3, #4]
 800d354:	441a      	add	r2, r3
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	681a      	ldr	r2, [r3, #0]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	601a      	str	r2, [r3, #0]
 800d364:	e008      	b.n	800d378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d366:	4b0c      	ldr	r3, [pc, #48]	; (800d398 <prvInsertBlockIntoFreeList+0xb0>)
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	601a      	str	r2, [r3, #0]
 800d36e:	e003      	b.n	800d378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d378:	68fa      	ldr	r2, [r7, #12]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d002      	beq.n	800d386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	687a      	ldr	r2, [r7, #4]
 800d384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d386:	bf00      	nop
 800d388:	3714      	adds	r7, #20
 800d38a:	46bd      	mov	sp, r7
 800d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d390:	4770      	bx	lr
 800d392:	bf00      	nop
 800d394:	200081dc 	.word	0x200081dc
 800d398:	200081e4 	.word	0x200081e4

0800d39c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800d39c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d3d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d3a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d3a2:	e003      	b.n	800d3ac <LoopCopyDataInit>

0800d3a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d3a4:	4b0c      	ldr	r3, [pc, #48]	; (800d3d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d3a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d3a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d3aa:	3104      	adds	r1, #4

0800d3ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d3ac:	480b      	ldr	r0, [pc, #44]	; (800d3dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d3ae:	4b0c      	ldr	r3, [pc, #48]	; (800d3e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d3b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d3b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d3b4:	d3f6      	bcc.n	800d3a4 <CopyDataInit>
  ldr  r2, =_sbss
 800d3b6:	4a0b      	ldr	r2, [pc, #44]	; (800d3e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d3b8:	e002      	b.n	800d3c0 <LoopFillZerobss>

0800d3ba <FillZerobss>:

/* Zero fill the bss segment. */  
 FillZerobss:
  movs  r3, #0
 800d3ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d3bc:	f842 3b04 	str.w	r3, [r2], #4

0800d3c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d3c0:	4b09      	ldr	r3, [pc, #36]	; (800d3e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d3c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d3c4:	d3f9      	bcc.n	800d3ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d3c6:	f7fd f951 	bl	800a66c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d3ca:	f000 f817 	bl	800d3fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d3ce:	f7f6 fbe1 	bl	8003b94 <main>
  bx  lr    
 800d3d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d3d4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800d3d8:	08010df4 	.word	0x08010df4
  ldr  r0, =_sdata
 800d3dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d3e0:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 800d3e4:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 800d3e8:	20008208 	.word	0x20008208

0800d3ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d3ec:	e7fe      	b.n	800d3ec <ADC_IRQHandler>
	...

0800d3f0 <__errno>:
 800d3f0:	4b01      	ldr	r3, [pc, #4]	; (800d3f8 <__errno+0x8>)
 800d3f2:	6818      	ldr	r0, [r3, #0]
 800d3f4:	4770      	bx	lr
 800d3f6:	bf00      	nop
 800d3f8:	2000001c 	.word	0x2000001c

0800d3fc <__libc_init_array>:
 800d3fc:	b570      	push	{r4, r5, r6, lr}
 800d3fe:	4d0d      	ldr	r5, [pc, #52]	; (800d434 <__libc_init_array+0x38>)
 800d400:	4c0d      	ldr	r4, [pc, #52]	; (800d438 <__libc_init_array+0x3c>)
 800d402:	1b64      	subs	r4, r4, r5
 800d404:	10a4      	asrs	r4, r4, #2
 800d406:	2600      	movs	r6, #0
 800d408:	42a6      	cmp	r6, r4
 800d40a:	d109      	bne.n	800d420 <__libc_init_array+0x24>
 800d40c:	4d0b      	ldr	r5, [pc, #44]	; (800d43c <__libc_init_array+0x40>)
 800d40e:	4c0c      	ldr	r4, [pc, #48]	; (800d440 <__libc_init_array+0x44>)
 800d410:	f002 ff8e 	bl	8010330 <_init>
 800d414:	1b64      	subs	r4, r4, r5
 800d416:	10a4      	asrs	r4, r4, #2
 800d418:	2600      	movs	r6, #0
 800d41a:	42a6      	cmp	r6, r4
 800d41c:	d105      	bne.n	800d42a <__libc_init_array+0x2e>
 800d41e:	bd70      	pop	{r4, r5, r6, pc}
 800d420:	f855 3b04 	ldr.w	r3, [r5], #4
 800d424:	4798      	blx	r3
 800d426:	3601      	adds	r6, #1
 800d428:	e7ee      	b.n	800d408 <__libc_init_array+0xc>
 800d42a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d42e:	4798      	blx	r3
 800d430:	3601      	adds	r6, #1
 800d432:	e7f2      	b.n	800d41a <__libc_init_array+0x1e>
 800d434:	08010dec 	.word	0x08010dec
 800d438:	08010dec 	.word	0x08010dec
 800d43c:	08010dec 	.word	0x08010dec
 800d440:	08010df0 	.word	0x08010df0

0800d444 <malloc>:
 800d444:	4b02      	ldr	r3, [pc, #8]	; (800d450 <malloc+0xc>)
 800d446:	4601      	mov	r1, r0
 800d448:	6818      	ldr	r0, [r3, #0]
 800d44a:	f000 b88d 	b.w	800d568 <_malloc_r>
 800d44e:	bf00      	nop
 800d450:	2000001c 	.word	0x2000001c

0800d454 <free>:
 800d454:	4b02      	ldr	r3, [pc, #8]	; (800d460 <free+0xc>)
 800d456:	4601      	mov	r1, r0
 800d458:	6818      	ldr	r0, [r3, #0]
 800d45a:	f000 b819 	b.w	800d490 <_free_r>
 800d45e:	bf00      	nop
 800d460:	2000001c 	.word	0x2000001c

0800d464 <memcpy>:
 800d464:	440a      	add	r2, r1
 800d466:	4291      	cmp	r1, r2
 800d468:	f100 33ff 	add.w	r3, r0, #4294967295
 800d46c:	d100      	bne.n	800d470 <memcpy+0xc>
 800d46e:	4770      	bx	lr
 800d470:	b510      	push	{r4, lr}
 800d472:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d476:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d47a:	4291      	cmp	r1, r2
 800d47c:	d1f9      	bne.n	800d472 <memcpy+0xe>
 800d47e:	bd10      	pop	{r4, pc}

0800d480 <memset>:
 800d480:	4402      	add	r2, r0
 800d482:	4603      	mov	r3, r0
 800d484:	4293      	cmp	r3, r2
 800d486:	d100      	bne.n	800d48a <memset+0xa>
 800d488:	4770      	bx	lr
 800d48a:	f803 1b01 	strb.w	r1, [r3], #1
 800d48e:	e7f9      	b.n	800d484 <memset+0x4>

0800d490 <_free_r>:
 800d490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d492:	2900      	cmp	r1, #0
 800d494:	d044      	beq.n	800d520 <_free_r+0x90>
 800d496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d49a:	9001      	str	r0, [sp, #4]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f1a1 0404 	sub.w	r4, r1, #4
 800d4a2:	bfb8      	it	lt
 800d4a4:	18e4      	addlt	r4, r4, r3
 800d4a6:	f001 fd1f 	bl	800eee8 <__malloc_lock>
 800d4aa:	4a1e      	ldr	r2, [pc, #120]	; (800d524 <_free_r+0x94>)
 800d4ac:	9801      	ldr	r0, [sp, #4]
 800d4ae:	6813      	ldr	r3, [r2, #0]
 800d4b0:	b933      	cbnz	r3, 800d4c0 <_free_r+0x30>
 800d4b2:	6063      	str	r3, [r4, #4]
 800d4b4:	6014      	str	r4, [r2, #0]
 800d4b6:	b003      	add	sp, #12
 800d4b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d4bc:	f001 bd1a 	b.w	800eef4 <__malloc_unlock>
 800d4c0:	42a3      	cmp	r3, r4
 800d4c2:	d908      	bls.n	800d4d6 <_free_r+0x46>
 800d4c4:	6825      	ldr	r5, [r4, #0]
 800d4c6:	1961      	adds	r1, r4, r5
 800d4c8:	428b      	cmp	r3, r1
 800d4ca:	bf01      	itttt	eq
 800d4cc:	6819      	ldreq	r1, [r3, #0]
 800d4ce:	685b      	ldreq	r3, [r3, #4]
 800d4d0:	1949      	addeq	r1, r1, r5
 800d4d2:	6021      	streq	r1, [r4, #0]
 800d4d4:	e7ed      	b.n	800d4b2 <_free_r+0x22>
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	b10b      	cbz	r3, 800d4e0 <_free_r+0x50>
 800d4dc:	42a3      	cmp	r3, r4
 800d4de:	d9fa      	bls.n	800d4d6 <_free_r+0x46>
 800d4e0:	6811      	ldr	r1, [r2, #0]
 800d4e2:	1855      	adds	r5, r2, r1
 800d4e4:	42a5      	cmp	r5, r4
 800d4e6:	d10b      	bne.n	800d500 <_free_r+0x70>
 800d4e8:	6824      	ldr	r4, [r4, #0]
 800d4ea:	4421      	add	r1, r4
 800d4ec:	1854      	adds	r4, r2, r1
 800d4ee:	42a3      	cmp	r3, r4
 800d4f0:	6011      	str	r1, [r2, #0]
 800d4f2:	d1e0      	bne.n	800d4b6 <_free_r+0x26>
 800d4f4:	681c      	ldr	r4, [r3, #0]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	6053      	str	r3, [r2, #4]
 800d4fa:	4421      	add	r1, r4
 800d4fc:	6011      	str	r1, [r2, #0]
 800d4fe:	e7da      	b.n	800d4b6 <_free_r+0x26>
 800d500:	d902      	bls.n	800d508 <_free_r+0x78>
 800d502:	230c      	movs	r3, #12
 800d504:	6003      	str	r3, [r0, #0]
 800d506:	e7d6      	b.n	800d4b6 <_free_r+0x26>
 800d508:	6825      	ldr	r5, [r4, #0]
 800d50a:	1961      	adds	r1, r4, r5
 800d50c:	428b      	cmp	r3, r1
 800d50e:	bf04      	itt	eq
 800d510:	6819      	ldreq	r1, [r3, #0]
 800d512:	685b      	ldreq	r3, [r3, #4]
 800d514:	6063      	str	r3, [r4, #4]
 800d516:	bf04      	itt	eq
 800d518:	1949      	addeq	r1, r1, r5
 800d51a:	6021      	streq	r1, [r4, #0]
 800d51c:	6054      	str	r4, [r2, #4]
 800d51e:	e7ca      	b.n	800d4b6 <_free_r+0x26>
 800d520:	b003      	add	sp, #12
 800d522:	bd30      	pop	{r4, r5, pc}
 800d524:	200081f4 	.word	0x200081f4

0800d528 <sbrk_aligned>:
 800d528:	b570      	push	{r4, r5, r6, lr}
 800d52a:	4e0e      	ldr	r6, [pc, #56]	; (800d564 <sbrk_aligned+0x3c>)
 800d52c:	460c      	mov	r4, r1
 800d52e:	6831      	ldr	r1, [r6, #0]
 800d530:	4605      	mov	r5, r0
 800d532:	b911      	cbnz	r1, 800d53a <sbrk_aligned+0x12>
 800d534:	f000 fcf6 	bl	800df24 <_sbrk_r>
 800d538:	6030      	str	r0, [r6, #0]
 800d53a:	4621      	mov	r1, r4
 800d53c:	4628      	mov	r0, r5
 800d53e:	f000 fcf1 	bl	800df24 <_sbrk_r>
 800d542:	1c43      	adds	r3, r0, #1
 800d544:	d00a      	beq.n	800d55c <sbrk_aligned+0x34>
 800d546:	1cc4      	adds	r4, r0, #3
 800d548:	f024 0403 	bic.w	r4, r4, #3
 800d54c:	42a0      	cmp	r0, r4
 800d54e:	d007      	beq.n	800d560 <sbrk_aligned+0x38>
 800d550:	1a21      	subs	r1, r4, r0
 800d552:	4628      	mov	r0, r5
 800d554:	f000 fce6 	bl	800df24 <_sbrk_r>
 800d558:	3001      	adds	r0, #1
 800d55a:	d101      	bne.n	800d560 <sbrk_aligned+0x38>
 800d55c:	f04f 34ff 	mov.w	r4, #4294967295
 800d560:	4620      	mov	r0, r4
 800d562:	bd70      	pop	{r4, r5, r6, pc}
 800d564:	200081f8 	.word	0x200081f8

0800d568 <_malloc_r>:
 800d568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d56c:	1ccd      	adds	r5, r1, #3
 800d56e:	f025 0503 	bic.w	r5, r5, #3
 800d572:	3508      	adds	r5, #8
 800d574:	2d0c      	cmp	r5, #12
 800d576:	bf38      	it	cc
 800d578:	250c      	movcc	r5, #12
 800d57a:	2d00      	cmp	r5, #0
 800d57c:	4607      	mov	r7, r0
 800d57e:	db01      	blt.n	800d584 <_malloc_r+0x1c>
 800d580:	42a9      	cmp	r1, r5
 800d582:	d905      	bls.n	800d590 <_malloc_r+0x28>
 800d584:	230c      	movs	r3, #12
 800d586:	603b      	str	r3, [r7, #0]
 800d588:	2600      	movs	r6, #0
 800d58a:	4630      	mov	r0, r6
 800d58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d590:	4e2e      	ldr	r6, [pc, #184]	; (800d64c <_malloc_r+0xe4>)
 800d592:	f001 fca9 	bl	800eee8 <__malloc_lock>
 800d596:	6833      	ldr	r3, [r6, #0]
 800d598:	461c      	mov	r4, r3
 800d59a:	bb34      	cbnz	r4, 800d5ea <_malloc_r+0x82>
 800d59c:	4629      	mov	r1, r5
 800d59e:	4638      	mov	r0, r7
 800d5a0:	f7ff ffc2 	bl	800d528 <sbrk_aligned>
 800d5a4:	1c43      	adds	r3, r0, #1
 800d5a6:	4604      	mov	r4, r0
 800d5a8:	d14d      	bne.n	800d646 <_malloc_r+0xde>
 800d5aa:	6834      	ldr	r4, [r6, #0]
 800d5ac:	4626      	mov	r6, r4
 800d5ae:	2e00      	cmp	r6, #0
 800d5b0:	d140      	bne.n	800d634 <_malloc_r+0xcc>
 800d5b2:	6823      	ldr	r3, [r4, #0]
 800d5b4:	4631      	mov	r1, r6
 800d5b6:	4638      	mov	r0, r7
 800d5b8:	eb04 0803 	add.w	r8, r4, r3
 800d5bc:	f000 fcb2 	bl	800df24 <_sbrk_r>
 800d5c0:	4580      	cmp	r8, r0
 800d5c2:	d13a      	bne.n	800d63a <_malloc_r+0xd2>
 800d5c4:	6821      	ldr	r1, [r4, #0]
 800d5c6:	3503      	adds	r5, #3
 800d5c8:	1a6d      	subs	r5, r5, r1
 800d5ca:	f025 0503 	bic.w	r5, r5, #3
 800d5ce:	3508      	adds	r5, #8
 800d5d0:	2d0c      	cmp	r5, #12
 800d5d2:	bf38      	it	cc
 800d5d4:	250c      	movcc	r5, #12
 800d5d6:	4629      	mov	r1, r5
 800d5d8:	4638      	mov	r0, r7
 800d5da:	f7ff ffa5 	bl	800d528 <sbrk_aligned>
 800d5de:	3001      	adds	r0, #1
 800d5e0:	d02b      	beq.n	800d63a <_malloc_r+0xd2>
 800d5e2:	6823      	ldr	r3, [r4, #0]
 800d5e4:	442b      	add	r3, r5
 800d5e6:	6023      	str	r3, [r4, #0]
 800d5e8:	e00e      	b.n	800d608 <_malloc_r+0xa0>
 800d5ea:	6822      	ldr	r2, [r4, #0]
 800d5ec:	1b52      	subs	r2, r2, r5
 800d5ee:	d41e      	bmi.n	800d62e <_malloc_r+0xc6>
 800d5f0:	2a0b      	cmp	r2, #11
 800d5f2:	d916      	bls.n	800d622 <_malloc_r+0xba>
 800d5f4:	1961      	adds	r1, r4, r5
 800d5f6:	42a3      	cmp	r3, r4
 800d5f8:	6025      	str	r5, [r4, #0]
 800d5fa:	bf18      	it	ne
 800d5fc:	6059      	strne	r1, [r3, #4]
 800d5fe:	6863      	ldr	r3, [r4, #4]
 800d600:	bf08      	it	eq
 800d602:	6031      	streq	r1, [r6, #0]
 800d604:	5162      	str	r2, [r4, r5]
 800d606:	604b      	str	r3, [r1, #4]
 800d608:	4638      	mov	r0, r7
 800d60a:	f104 060b 	add.w	r6, r4, #11
 800d60e:	f001 fc71 	bl	800eef4 <__malloc_unlock>
 800d612:	f026 0607 	bic.w	r6, r6, #7
 800d616:	1d23      	adds	r3, r4, #4
 800d618:	1af2      	subs	r2, r6, r3
 800d61a:	d0b6      	beq.n	800d58a <_malloc_r+0x22>
 800d61c:	1b9b      	subs	r3, r3, r6
 800d61e:	50a3      	str	r3, [r4, r2]
 800d620:	e7b3      	b.n	800d58a <_malloc_r+0x22>
 800d622:	6862      	ldr	r2, [r4, #4]
 800d624:	42a3      	cmp	r3, r4
 800d626:	bf0c      	ite	eq
 800d628:	6032      	streq	r2, [r6, #0]
 800d62a:	605a      	strne	r2, [r3, #4]
 800d62c:	e7ec      	b.n	800d608 <_malloc_r+0xa0>
 800d62e:	4623      	mov	r3, r4
 800d630:	6864      	ldr	r4, [r4, #4]
 800d632:	e7b2      	b.n	800d59a <_malloc_r+0x32>
 800d634:	4634      	mov	r4, r6
 800d636:	6876      	ldr	r6, [r6, #4]
 800d638:	e7b9      	b.n	800d5ae <_malloc_r+0x46>
 800d63a:	230c      	movs	r3, #12
 800d63c:	603b      	str	r3, [r7, #0]
 800d63e:	4638      	mov	r0, r7
 800d640:	f001 fc58 	bl	800eef4 <__malloc_unlock>
 800d644:	e7a1      	b.n	800d58a <_malloc_r+0x22>
 800d646:	6025      	str	r5, [r4, #0]
 800d648:	e7de      	b.n	800d608 <_malloc_r+0xa0>
 800d64a:	bf00      	nop
 800d64c:	200081f4 	.word	0x200081f4

0800d650 <__cvt>:
 800d650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d654:	ec55 4b10 	vmov	r4, r5, d0
 800d658:	2d00      	cmp	r5, #0
 800d65a:	460e      	mov	r6, r1
 800d65c:	4619      	mov	r1, r3
 800d65e:	462b      	mov	r3, r5
 800d660:	bfbb      	ittet	lt
 800d662:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d666:	461d      	movlt	r5, r3
 800d668:	2300      	movge	r3, #0
 800d66a:	232d      	movlt	r3, #45	; 0x2d
 800d66c:	700b      	strb	r3, [r1, #0]
 800d66e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d670:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d674:	4691      	mov	r9, r2
 800d676:	f023 0820 	bic.w	r8, r3, #32
 800d67a:	bfbc      	itt	lt
 800d67c:	4622      	movlt	r2, r4
 800d67e:	4614      	movlt	r4, r2
 800d680:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d684:	d005      	beq.n	800d692 <__cvt+0x42>
 800d686:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d68a:	d100      	bne.n	800d68e <__cvt+0x3e>
 800d68c:	3601      	adds	r6, #1
 800d68e:	2102      	movs	r1, #2
 800d690:	e000      	b.n	800d694 <__cvt+0x44>
 800d692:	2103      	movs	r1, #3
 800d694:	ab03      	add	r3, sp, #12
 800d696:	9301      	str	r3, [sp, #4]
 800d698:	ab02      	add	r3, sp, #8
 800d69a:	9300      	str	r3, [sp, #0]
 800d69c:	ec45 4b10 	vmov	d0, r4, r5
 800d6a0:	4653      	mov	r3, sl
 800d6a2:	4632      	mov	r2, r6
 800d6a4:	f000 fd34 	bl	800e110 <_dtoa_r>
 800d6a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d6ac:	4607      	mov	r7, r0
 800d6ae:	d102      	bne.n	800d6b6 <__cvt+0x66>
 800d6b0:	f019 0f01 	tst.w	r9, #1
 800d6b4:	d022      	beq.n	800d6fc <__cvt+0xac>
 800d6b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d6ba:	eb07 0906 	add.w	r9, r7, r6
 800d6be:	d110      	bne.n	800d6e2 <__cvt+0x92>
 800d6c0:	783b      	ldrb	r3, [r7, #0]
 800d6c2:	2b30      	cmp	r3, #48	; 0x30
 800d6c4:	d10a      	bne.n	800d6dc <__cvt+0x8c>
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	4620      	mov	r0, r4
 800d6cc:	4629      	mov	r1, r5
 800d6ce:	f7f3 fa0b 	bl	8000ae8 <__aeabi_dcmpeq>
 800d6d2:	b918      	cbnz	r0, 800d6dc <__cvt+0x8c>
 800d6d4:	f1c6 0601 	rsb	r6, r6, #1
 800d6d8:	f8ca 6000 	str.w	r6, [sl]
 800d6dc:	f8da 3000 	ldr.w	r3, [sl]
 800d6e0:	4499      	add	r9, r3
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	4629      	mov	r1, r5
 800d6ea:	f7f3 f9fd 	bl	8000ae8 <__aeabi_dcmpeq>
 800d6ee:	b108      	cbz	r0, 800d6f4 <__cvt+0xa4>
 800d6f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d6f4:	2230      	movs	r2, #48	; 0x30
 800d6f6:	9b03      	ldr	r3, [sp, #12]
 800d6f8:	454b      	cmp	r3, r9
 800d6fa:	d307      	bcc.n	800d70c <__cvt+0xbc>
 800d6fc:	9b03      	ldr	r3, [sp, #12]
 800d6fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d700:	1bdb      	subs	r3, r3, r7
 800d702:	4638      	mov	r0, r7
 800d704:	6013      	str	r3, [r2, #0]
 800d706:	b004      	add	sp, #16
 800d708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d70c:	1c59      	adds	r1, r3, #1
 800d70e:	9103      	str	r1, [sp, #12]
 800d710:	701a      	strb	r2, [r3, #0]
 800d712:	e7f0      	b.n	800d6f6 <__cvt+0xa6>

0800d714 <__exponent>:
 800d714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d716:	4603      	mov	r3, r0
 800d718:	2900      	cmp	r1, #0
 800d71a:	bfb8      	it	lt
 800d71c:	4249      	neglt	r1, r1
 800d71e:	f803 2b02 	strb.w	r2, [r3], #2
 800d722:	bfb4      	ite	lt
 800d724:	222d      	movlt	r2, #45	; 0x2d
 800d726:	222b      	movge	r2, #43	; 0x2b
 800d728:	2909      	cmp	r1, #9
 800d72a:	7042      	strb	r2, [r0, #1]
 800d72c:	dd2a      	ble.n	800d784 <__exponent+0x70>
 800d72e:	f10d 0407 	add.w	r4, sp, #7
 800d732:	46a4      	mov	ip, r4
 800d734:	270a      	movs	r7, #10
 800d736:	46a6      	mov	lr, r4
 800d738:	460a      	mov	r2, r1
 800d73a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d73e:	fb07 1516 	mls	r5, r7, r6, r1
 800d742:	3530      	adds	r5, #48	; 0x30
 800d744:	2a63      	cmp	r2, #99	; 0x63
 800d746:	f104 34ff 	add.w	r4, r4, #4294967295
 800d74a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d74e:	4631      	mov	r1, r6
 800d750:	dcf1      	bgt.n	800d736 <__exponent+0x22>
 800d752:	3130      	adds	r1, #48	; 0x30
 800d754:	f1ae 0502 	sub.w	r5, lr, #2
 800d758:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d75c:	1c44      	adds	r4, r0, #1
 800d75e:	4629      	mov	r1, r5
 800d760:	4561      	cmp	r1, ip
 800d762:	d30a      	bcc.n	800d77a <__exponent+0x66>
 800d764:	f10d 0209 	add.w	r2, sp, #9
 800d768:	eba2 020e 	sub.w	r2, r2, lr
 800d76c:	4565      	cmp	r5, ip
 800d76e:	bf88      	it	hi
 800d770:	2200      	movhi	r2, #0
 800d772:	4413      	add	r3, r2
 800d774:	1a18      	subs	r0, r3, r0
 800d776:	b003      	add	sp, #12
 800d778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d77a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d77e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d782:	e7ed      	b.n	800d760 <__exponent+0x4c>
 800d784:	2330      	movs	r3, #48	; 0x30
 800d786:	3130      	adds	r1, #48	; 0x30
 800d788:	7083      	strb	r3, [r0, #2]
 800d78a:	70c1      	strb	r1, [r0, #3]
 800d78c:	1d03      	adds	r3, r0, #4
 800d78e:	e7f1      	b.n	800d774 <__exponent+0x60>

0800d790 <_printf_float>:
 800d790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d794:	ed2d 8b02 	vpush	{d8}
 800d798:	b08d      	sub	sp, #52	; 0x34
 800d79a:	460c      	mov	r4, r1
 800d79c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d7a0:	4616      	mov	r6, r2
 800d7a2:	461f      	mov	r7, r3
 800d7a4:	4605      	mov	r5, r0
 800d7a6:	f001 fb97 	bl	800eed8 <_localeconv_r>
 800d7aa:	f8d0 a000 	ldr.w	sl, [r0]
 800d7ae:	4650      	mov	r0, sl
 800d7b0:	f7f2 fd1e 	bl	80001f0 <strlen>
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	930a      	str	r3, [sp, #40]	; 0x28
 800d7b8:	6823      	ldr	r3, [r4, #0]
 800d7ba:	9305      	str	r3, [sp, #20]
 800d7bc:	f8d8 3000 	ldr.w	r3, [r8]
 800d7c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d7c4:	3307      	adds	r3, #7
 800d7c6:	f023 0307 	bic.w	r3, r3, #7
 800d7ca:	f103 0208 	add.w	r2, r3, #8
 800d7ce:	f8c8 2000 	str.w	r2, [r8]
 800d7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d7da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d7de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d7e2:	9307      	str	r3, [sp, #28]
 800d7e4:	f8cd 8018 	str.w	r8, [sp, #24]
 800d7e8:	ee08 0a10 	vmov	s16, r0
 800d7ec:	4b9f      	ldr	r3, [pc, #636]	; (800da6c <_printf_float+0x2dc>)
 800d7ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d7f6:	f7f3 f9a9 	bl	8000b4c <__aeabi_dcmpun>
 800d7fa:	bb88      	cbnz	r0, 800d860 <_printf_float+0xd0>
 800d7fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d800:	4b9a      	ldr	r3, [pc, #616]	; (800da6c <_printf_float+0x2dc>)
 800d802:	f04f 32ff 	mov.w	r2, #4294967295
 800d806:	f7f3 f983 	bl	8000b10 <__aeabi_dcmple>
 800d80a:	bb48      	cbnz	r0, 800d860 <_printf_float+0xd0>
 800d80c:	2200      	movs	r2, #0
 800d80e:	2300      	movs	r3, #0
 800d810:	4640      	mov	r0, r8
 800d812:	4649      	mov	r1, r9
 800d814:	f7f3 f972 	bl	8000afc <__aeabi_dcmplt>
 800d818:	b110      	cbz	r0, 800d820 <_printf_float+0x90>
 800d81a:	232d      	movs	r3, #45	; 0x2d
 800d81c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d820:	4b93      	ldr	r3, [pc, #588]	; (800da70 <_printf_float+0x2e0>)
 800d822:	4894      	ldr	r0, [pc, #592]	; (800da74 <_printf_float+0x2e4>)
 800d824:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d828:	bf94      	ite	ls
 800d82a:	4698      	movls	r8, r3
 800d82c:	4680      	movhi	r8, r0
 800d82e:	2303      	movs	r3, #3
 800d830:	6123      	str	r3, [r4, #16]
 800d832:	9b05      	ldr	r3, [sp, #20]
 800d834:	f023 0204 	bic.w	r2, r3, #4
 800d838:	6022      	str	r2, [r4, #0]
 800d83a:	f04f 0900 	mov.w	r9, #0
 800d83e:	9700      	str	r7, [sp, #0]
 800d840:	4633      	mov	r3, r6
 800d842:	aa0b      	add	r2, sp, #44	; 0x2c
 800d844:	4621      	mov	r1, r4
 800d846:	4628      	mov	r0, r5
 800d848:	f000 f9d8 	bl	800dbfc <_printf_common>
 800d84c:	3001      	adds	r0, #1
 800d84e:	f040 8090 	bne.w	800d972 <_printf_float+0x1e2>
 800d852:	f04f 30ff 	mov.w	r0, #4294967295
 800d856:	b00d      	add	sp, #52	; 0x34
 800d858:	ecbd 8b02 	vpop	{d8}
 800d85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d860:	4642      	mov	r2, r8
 800d862:	464b      	mov	r3, r9
 800d864:	4640      	mov	r0, r8
 800d866:	4649      	mov	r1, r9
 800d868:	f7f3 f970 	bl	8000b4c <__aeabi_dcmpun>
 800d86c:	b140      	cbz	r0, 800d880 <_printf_float+0xf0>
 800d86e:	464b      	mov	r3, r9
 800d870:	2b00      	cmp	r3, #0
 800d872:	bfbc      	itt	lt
 800d874:	232d      	movlt	r3, #45	; 0x2d
 800d876:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d87a:	487f      	ldr	r0, [pc, #508]	; (800da78 <_printf_float+0x2e8>)
 800d87c:	4b7f      	ldr	r3, [pc, #508]	; (800da7c <_printf_float+0x2ec>)
 800d87e:	e7d1      	b.n	800d824 <_printf_float+0x94>
 800d880:	6863      	ldr	r3, [r4, #4]
 800d882:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d886:	9206      	str	r2, [sp, #24]
 800d888:	1c5a      	adds	r2, r3, #1
 800d88a:	d13f      	bne.n	800d90c <_printf_float+0x17c>
 800d88c:	2306      	movs	r3, #6
 800d88e:	6063      	str	r3, [r4, #4]
 800d890:	9b05      	ldr	r3, [sp, #20]
 800d892:	6861      	ldr	r1, [r4, #4]
 800d894:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d898:	2300      	movs	r3, #0
 800d89a:	9303      	str	r3, [sp, #12]
 800d89c:	ab0a      	add	r3, sp, #40	; 0x28
 800d89e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d8a2:	ab09      	add	r3, sp, #36	; 0x24
 800d8a4:	ec49 8b10 	vmov	d0, r8, r9
 800d8a8:	9300      	str	r3, [sp, #0]
 800d8aa:	6022      	str	r2, [r4, #0]
 800d8ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	f7ff fecd 	bl	800d650 <__cvt>
 800d8b6:	9b06      	ldr	r3, [sp, #24]
 800d8b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d8ba:	2b47      	cmp	r3, #71	; 0x47
 800d8bc:	4680      	mov	r8, r0
 800d8be:	d108      	bne.n	800d8d2 <_printf_float+0x142>
 800d8c0:	1cc8      	adds	r0, r1, #3
 800d8c2:	db02      	blt.n	800d8ca <_printf_float+0x13a>
 800d8c4:	6863      	ldr	r3, [r4, #4]
 800d8c6:	4299      	cmp	r1, r3
 800d8c8:	dd41      	ble.n	800d94e <_printf_float+0x1be>
 800d8ca:	f1ab 0b02 	sub.w	fp, fp, #2
 800d8ce:	fa5f fb8b 	uxtb.w	fp, fp
 800d8d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d8d6:	d820      	bhi.n	800d91a <_printf_float+0x18a>
 800d8d8:	3901      	subs	r1, #1
 800d8da:	465a      	mov	r2, fp
 800d8dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d8e0:	9109      	str	r1, [sp, #36]	; 0x24
 800d8e2:	f7ff ff17 	bl	800d714 <__exponent>
 800d8e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8e8:	1813      	adds	r3, r2, r0
 800d8ea:	2a01      	cmp	r2, #1
 800d8ec:	4681      	mov	r9, r0
 800d8ee:	6123      	str	r3, [r4, #16]
 800d8f0:	dc02      	bgt.n	800d8f8 <_printf_float+0x168>
 800d8f2:	6822      	ldr	r2, [r4, #0]
 800d8f4:	07d2      	lsls	r2, r2, #31
 800d8f6:	d501      	bpl.n	800d8fc <_printf_float+0x16c>
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	6123      	str	r3, [r4, #16]
 800d8fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d900:	2b00      	cmp	r3, #0
 800d902:	d09c      	beq.n	800d83e <_printf_float+0xae>
 800d904:	232d      	movs	r3, #45	; 0x2d
 800d906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d90a:	e798      	b.n	800d83e <_printf_float+0xae>
 800d90c:	9a06      	ldr	r2, [sp, #24]
 800d90e:	2a47      	cmp	r2, #71	; 0x47
 800d910:	d1be      	bne.n	800d890 <_printf_float+0x100>
 800d912:	2b00      	cmp	r3, #0
 800d914:	d1bc      	bne.n	800d890 <_printf_float+0x100>
 800d916:	2301      	movs	r3, #1
 800d918:	e7b9      	b.n	800d88e <_printf_float+0xfe>
 800d91a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d91e:	d118      	bne.n	800d952 <_printf_float+0x1c2>
 800d920:	2900      	cmp	r1, #0
 800d922:	6863      	ldr	r3, [r4, #4]
 800d924:	dd0b      	ble.n	800d93e <_printf_float+0x1ae>
 800d926:	6121      	str	r1, [r4, #16]
 800d928:	b913      	cbnz	r3, 800d930 <_printf_float+0x1a0>
 800d92a:	6822      	ldr	r2, [r4, #0]
 800d92c:	07d0      	lsls	r0, r2, #31
 800d92e:	d502      	bpl.n	800d936 <_printf_float+0x1a6>
 800d930:	3301      	adds	r3, #1
 800d932:	440b      	add	r3, r1
 800d934:	6123      	str	r3, [r4, #16]
 800d936:	65a1      	str	r1, [r4, #88]	; 0x58
 800d938:	f04f 0900 	mov.w	r9, #0
 800d93c:	e7de      	b.n	800d8fc <_printf_float+0x16c>
 800d93e:	b913      	cbnz	r3, 800d946 <_printf_float+0x1b6>
 800d940:	6822      	ldr	r2, [r4, #0]
 800d942:	07d2      	lsls	r2, r2, #31
 800d944:	d501      	bpl.n	800d94a <_printf_float+0x1ba>
 800d946:	3302      	adds	r3, #2
 800d948:	e7f4      	b.n	800d934 <_printf_float+0x1a4>
 800d94a:	2301      	movs	r3, #1
 800d94c:	e7f2      	b.n	800d934 <_printf_float+0x1a4>
 800d94e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d954:	4299      	cmp	r1, r3
 800d956:	db05      	blt.n	800d964 <_printf_float+0x1d4>
 800d958:	6823      	ldr	r3, [r4, #0]
 800d95a:	6121      	str	r1, [r4, #16]
 800d95c:	07d8      	lsls	r0, r3, #31
 800d95e:	d5ea      	bpl.n	800d936 <_printf_float+0x1a6>
 800d960:	1c4b      	adds	r3, r1, #1
 800d962:	e7e7      	b.n	800d934 <_printf_float+0x1a4>
 800d964:	2900      	cmp	r1, #0
 800d966:	bfd4      	ite	le
 800d968:	f1c1 0202 	rsble	r2, r1, #2
 800d96c:	2201      	movgt	r2, #1
 800d96e:	4413      	add	r3, r2
 800d970:	e7e0      	b.n	800d934 <_printf_float+0x1a4>
 800d972:	6823      	ldr	r3, [r4, #0]
 800d974:	055a      	lsls	r2, r3, #21
 800d976:	d407      	bmi.n	800d988 <_printf_float+0x1f8>
 800d978:	6923      	ldr	r3, [r4, #16]
 800d97a:	4642      	mov	r2, r8
 800d97c:	4631      	mov	r1, r6
 800d97e:	4628      	mov	r0, r5
 800d980:	47b8      	blx	r7
 800d982:	3001      	adds	r0, #1
 800d984:	d12c      	bne.n	800d9e0 <_printf_float+0x250>
 800d986:	e764      	b.n	800d852 <_printf_float+0xc2>
 800d988:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d98c:	f240 80e0 	bls.w	800db50 <_printf_float+0x3c0>
 800d990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d994:	2200      	movs	r2, #0
 800d996:	2300      	movs	r3, #0
 800d998:	f7f3 f8a6 	bl	8000ae8 <__aeabi_dcmpeq>
 800d99c:	2800      	cmp	r0, #0
 800d99e:	d034      	beq.n	800da0a <_printf_float+0x27a>
 800d9a0:	4a37      	ldr	r2, [pc, #220]	; (800da80 <_printf_float+0x2f0>)
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	4631      	mov	r1, r6
 800d9a6:	4628      	mov	r0, r5
 800d9a8:	47b8      	blx	r7
 800d9aa:	3001      	adds	r0, #1
 800d9ac:	f43f af51 	beq.w	800d852 <_printf_float+0xc2>
 800d9b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	db02      	blt.n	800d9be <_printf_float+0x22e>
 800d9b8:	6823      	ldr	r3, [r4, #0]
 800d9ba:	07d8      	lsls	r0, r3, #31
 800d9bc:	d510      	bpl.n	800d9e0 <_printf_float+0x250>
 800d9be:	ee18 3a10 	vmov	r3, s16
 800d9c2:	4652      	mov	r2, sl
 800d9c4:	4631      	mov	r1, r6
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	47b8      	blx	r7
 800d9ca:	3001      	adds	r0, #1
 800d9cc:	f43f af41 	beq.w	800d852 <_printf_float+0xc2>
 800d9d0:	f04f 0800 	mov.w	r8, #0
 800d9d4:	f104 091a 	add.w	r9, r4, #26
 800d9d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9da:	3b01      	subs	r3, #1
 800d9dc:	4543      	cmp	r3, r8
 800d9de:	dc09      	bgt.n	800d9f4 <_printf_float+0x264>
 800d9e0:	6823      	ldr	r3, [r4, #0]
 800d9e2:	079b      	lsls	r3, r3, #30
 800d9e4:	f100 8105 	bmi.w	800dbf2 <_printf_float+0x462>
 800d9e8:	68e0      	ldr	r0, [r4, #12]
 800d9ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9ec:	4298      	cmp	r0, r3
 800d9ee:	bfb8      	it	lt
 800d9f0:	4618      	movlt	r0, r3
 800d9f2:	e730      	b.n	800d856 <_printf_float+0xc6>
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	464a      	mov	r2, r9
 800d9f8:	4631      	mov	r1, r6
 800d9fa:	4628      	mov	r0, r5
 800d9fc:	47b8      	blx	r7
 800d9fe:	3001      	adds	r0, #1
 800da00:	f43f af27 	beq.w	800d852 <_printf_float+0xc2>
 800da04:	f108 0801 	add.w	r8, r8, #1
 800da08:	e7e6      	b.n	800d9d8 <_printf_float+0x248>
 800da0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	dc39      	bgt.n	800da84 <_printf_float+0x2f4>
 800da10:	4a1b      	ldr	r2, [pc, #108]	; (800da80 <_printf_float+0x2f0>)
 800da12:	2301      	movs	r3, #1
 800da14:	4631      	mov	r1, r6
 800da16:	4628      	mov	r0, r5
 800da18:	47b8      	blx	r7
 800da1a:	3001      	adds	r0, #1
 800da1c:	f43f af19 	beq.w	800d852 <_printf_float+0xc2>
 800da20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da24:	4313      	orrs	r3, r2
 800da26:	d102      	bne.n	800da2e <_printf_float+0x29e>
 800da28:	6823      	ldr	r3, [r4, #0]
 800da2a:	07d9      	lsls	r1, r3, #31
 800da2c:	d5d8      	bpl.n	800d9e0 <_printf_float+0x250>
 800da2e:	ee18 3a10 	vmov	r3, s16
 800da32:	4652      	mov	r2, sl
 800da34:	4631      	mov	r1, r6
 800da36:	4628      	mov	r0, r5
 800da38:	47b8      	blx	r7
 800da3a:	3001      	adds	r0, #1
 800da3c:	f43f af09 	beq.w	800d852 <_printf_float+0xc2>
 800da40:	f04f 0900 	mov.w	r9, #0
 800da44:	f104 0a1a 	add.w	sl, r4, #26
 800da48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da4a:	425b      	negs	r3, r3
 800da4c:	454b      	cmp	r3, r9
 800da4e:	dc01      	bgt.n	800da54 <_printf_float+0x2c4>
 800da50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da52:	e792      	b.n	800d97a <_printf_float+0x1ea>
 800da54:	2301      	movs	r3, #1
 800da56:	4652      	mov	r2, sl
 800da58:	4631      	mov	r1, r6
 800da5a:	4628      	mov	r0, r5
 800da5c:	47b8      	blx	r7
 800da5e:	3001      	adds	r0, #1
 800da60:	f43f aef7 	beq.w	800d852 <_printf_float+0xc2>
 800da64:	f109 0901 	add.w	r9, r9, #1
 800da68:	e7ee      	b.n	800da48 <_printf_float+0x2b8>
 800da6a:	bf00      	nop
 800da6c:	7fefffff 	.word	0x7fefffff
 800da70:	08010a14 	.word	0x08010a14
 800da74:	08010a18 	.word	0x08010a18
 800da78:	08010a20 	.word	0x08010a20
 800da7c:	08010a1c 	.word	0x08010a1c
 800da80:	08010a24 	.word	0x08010a24
 800da84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da88:	429a      	cmp	r2, r3
 800da8a:	bfa8      	it	ge
 800da8c:	461a      	movge	r2, r3
 800da8e:	2a00      	cmp	r2, #0
 800da90:	4691      	mov	r9, r2
 800da92:	dc37      	bgt.n	800db04 <_printf_float+0x374>
 800da94:	f04f 0b00 	mov.w	fp, #0
 800da98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da9c:	f104 021a 	add.w	r2, r4, #26
 800daa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800daa2:	9305      	str	r3, [sp, #20]
 800daa4:	eba3 0309 	sub.w	r3, r3, r9
 800daa8:	455b      	cmp	r3, fp
 800daaa:	dc33      	bgt.n	800db14 <_printf_float+0x384>
 800daac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dab0:	429a      	cmp	r2, r3
 800dab2:	db3b      	blt.n	800db2c <_printf_float+0x39c>
 800dab4:	6823      	ldr	r3, [r4, #0]
 800dab6:	07da      	lsls	r2, r3, #31
 800dab8:	d438      	bmi.n	800db2c <_printf_float+0x39c>
 800daba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dabc:	9a05      	ldr	r2, [sp, #20]
 800dabe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dac0:	1a9a      	subs	r2, r3, r2
 800dac2:	eba3 0901 	sub.w	r9, r3, r1
 800dac6:	4591      	cmp	r9, r2
 800dac8:	bfa8      	it	ge
 800daca:	4691      	movge	r9, r2
 800dacc:	f1b9 0f00 	cmp.w	r9, #0
 800dad0:	dc35      	bgt.n	800db3e <_printf_float+0x3ae>
 800dad2:	f04f 0800 	mov.w	r8, #0
 800dad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dada:	f104 0a1a 	add.w	sl, r4, #26
 800dade:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dae2:	1a9b      	subs	r3, r3, r2
 800dae4:	eba3 0309 	sub.w	r3, r3, r9
 800dae8:	4543      	cmp	r3, r8
 800daea:	f77f af79 	ble.w	800d9e0 <_printf_float+0x250>
 800daee:	2301      	movs	r3, #1
 800daf0:	4652      	mov	r2, sl
 800daf2:	4631      	mov	r1, r6
 800daf4:	4628      	mov	r0, r5
 800daf6:	47b8      	blx	r7
 800daf8:	3001      	adds	r0, #1
 800dafa:	f43f aeaa 	beq.w	800d852 <_printf_float+0xc2>
 800dafe:	f108 0801 	add.w	r8, r8, #1
 800db02:	e7ec      	b.n	800dade <_printf_float+0x34e>
 800db04:	4613      	mov	r3, r2
 800db06:	4631      	mov	r1, r6
 800db08:	4642      	mov	r2, r8
 800db0a:	4628      	mov	r0, r5
 800db0c:	47b8      	blx	r7
 800db0e:	3001      	adds	r0, #1
 800db10:	d1c0      	bne.n	800da94 <_printf_float+0x304>
 800db12:	e69e      	b.n	800d852 <_printf_float+0xc2>
 800db14:	2301      	movs	r3, #1
 800db16:	4631      	mov	r1, r6
 800db18:	4628      	mov	r0, r5
 800db1a:	9205      	str	r2, [sp, #20]
 800db1c:	47b8      	blx	r7
 800db1e:	3001      	adds	r0, #1
 800db20:	f43f ae97 	beq.w	800d852 <_printf_float+0xc2>
 800db24:	9a05      	ldr	r2, [sp, #20]
 800db26:	f10b 0b01 	add.w	fp, fp, #1
 800db2a:	e7b9      	b.n	800daa0 <_printf_float+0x310>
 800db2c:	ee18 3a10 	vmov	r3, s16
 800db30:	4652      	mov	r2, sl
 800db32:	4631      	mov	r1, r6
 800db34:	4628      	mov	r0, r5
 800db36:	47b8      	blx	r7
 800db38:	3001      	adds	r0, #1
 800db3a:	d1be      	bne.n	800daba <_printf_float+0x32a>
 800db3c:	e689      	b.n	800d852 <_printf_float+0xc2>
 800db3e:	9a05      	ldr	r2, [sp, #20]
 800db40:	464b      	mov	r3, r9
 800db42:	4442      	add	r2, r8
 800db44:	4631      	mov	r1, r6
 800db46:	4628      	mov	r0, r5
 800db48:	47b8      	blx	r7
 800db4a:	3001      	adds	r0, #1
 800db4c:	d1c1      	bne.n	800dad2 <_printf_float+0x342>
 800db4e:	e680      	b.n	800d852 <_printf_float+0xc2>
 800db50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db52:	2a01      	cmp	r2, #1
 800db54:	dc01      	bgt.n	800db5a <_printf_float+0x3ca>
 800db56:	07db      	lsls	r3, r3, #31
 800db58:	d538      	bpl.n	800dbcc <_printf_float+0x43c>
 800db5a:	2301      	movs	r3, #1
 800db5c:	4642      	mov	r2, r8
 800db5e:	4631      	mov	r1, r6
 800db60:	4628      	mov	r0, r5
 800db62:	47b8      	blx	r7
 800db64:	3001      	adds	r0, #1
 800db66:	f43f ae74 	beq.w	800d852 <_printf_float+0xc2>
 800db6a:	ee18 3a10 	vmov	r3, s16
 800db6e:	4652      	mov	r2, sl
 800db70:	4631      	mov	r1, r6
 800db72:	4628      	mov	r0, r5
 800db74:	47b8      	blx	r7
 800db76:	3001      	adds	r0, #1
 800db78:	f43f ae6b 	beq.w	800d852 <_printf_float+0xc2>
 800db7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800db80:	2200      	movs	r2, #0
 800db82:	2300      	movs	r3, #0
 800db84:	f7f2 ffb0 	bl	8000ae8 <__aeabi_dcmpeq>
 800db88:	b9d8      	cbnz	r0, 800dbc2 <_printf_float+0x432>
 800db8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db8c:	f108 0201 	add.w	r2, r8, #1
 800db90:	3b01      	subs	r3, #1
 800db92:	4631      	mov	r1, r6
 800db94:	4628      	mov	r0, r5
 800db96:	47b8      	blx	r7
 800db98:	3001      	adds	r0, #1
 800db9a:	d10e      	bne.n	800dbba <_printf_float+0x42a>
 800db9c:	e659      	b.n	800d852 <_printf_float+0xc2>
 800db9e:	2301      	movs	r3, #1
 800dba0:	4652      	mov	r2, sl
 800dba2:	4631      	mov	r1, r6
 800dba4:	4628      	mov	r0, r5
 800dba6:	47b8      	blx	r7
 800dba8:	3001      	adds	r0, #1
 800dbaa:	f43f ae52 	beq.w	800d852 <_printf_float+0xc2>
 800dbae:	f108 0801 	add.w	r8, r8, #1
 800dbb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbb4:	3b01      	subs	r3, #1
 800dbb6:	4543      	cmp	r3, r8
 800dbb8:	dcf1      	bgt.n	800db9e <_printf_float+0x40e>
 800dbba:	464b      	mov	r3, r9
 800dbbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dbc0:	e6dc      	b.n	800d97c <_printf_float+0x1ec>
 800dbc2:	f04f 0800 	mov.w	r8, #0
 800dbc6:	f104 0a1a 	add.w	sl, r4, #26
 800dbca:	e7f2      	b.n	800dbb2 <_printf_float+0x422>
 800dbcc:	2301      	movs	r3, #1
 800dbce:	4642      	mov	r2, r8
 800dbd0:	e7df      	b.n	800db92 <_printf_float+0x402>
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	464a      	mov	r2, r9
 800dbd6:	4631      	mov	r1, r6
 800dbd8:	4628      	mov	r0, r5
 800dbda:	47b8      	blx	r7
 800dbdc:	3001      	adds	r0, #1
 800dbde:	f43f ae38 	beq.w	800d852 <_printf_float+0xc2>
 800dbe2:	f108 0801 	add.w	r8, r8, #1
 800dbe6:	68e3      	ldr	r3, [r4, #12]
 800dbe8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dbea:	1a5b      	subs	r3, r3, r1
 800dbec:	4543      	cmp	r3, r8
 800dbee:	dcf0      	bgt.n	800dbd2 <_printf_float+0x442>
 800dbf0:	e6fa      	b.n	800d9e8 <_printf_float+0x258>
 800dbf2:	f04f 0800 	mov.w	r8, #0
 800dbf6:	f104 0919 	add.w	r9, r4, #25
 800dbfa:	e7f4      	b.n	800dbe6 <_printf_float+0x456>

0800dbfc <_printf_common>:
 800dbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc00:	4616      	mov	r6, r2
 800dc02:	4699      	mov	r9, r3
 800dc04:	688a      	ldr	r2, [r1, #8]
 800dc06:	690b      	ldr	r3, [r1, #16]
 800dc08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	bfb8      	it	lt
 800dc10:	4613      	movlt	r3, r2
 800dc12:	6033      	str	r3, [r6, #0]
 800dc14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc18:	4607      	mov	r7, r0
 800dc1a:	460c      	mov	r4, r1
 800dc1c:	b10a      	cbz	r2, 800dc22 <_printf_common+0x26>
 800dc1e:	3301      	adds	r3, #1
 800dc20:	6033      	str	r3, [r6, #0]
 800dc22:	6823      	ldr	r3, [r4, #0]
 800dc24:	0699      	lsls	r1, r3, #26
 800dc26:	bf42      	ittt	mi
 800dc28:	6833      	ldrmi	r3, [r6, #0]
 800dc2a:	3302      	addmi	r3, #2
 800dc2c:	6033      	strmi	r3, [r6, #0]
 800dc2e:	6825      	ldr	r5, [r4, #0]
 800dc30:	f015 0506 	ands.w	r5, r5, #6
 800dc34:	d106      	bne.n	800dc44 <_printf_common+0x48>
 800dc36:	f104 0a19 	add.w	sl, r4, #25
 800dc3a:	68e3      	ldr	r3, [r4, #12]
 800dc3c:	6832      	ldr	r2, [r6, #0]
 800dc3e:	1a9b      	subs	r3, r3, r2
 800dc40:	42ab      	cmp	r3, r5
 800dc42:	dc26      	bgt.n	800dc92 <_printf_common+0x96>
 800dc44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dc48:	1e13      	subs	r3, r2, #0
 800dc4a:	6822      	ldr	r2, [r4, #0]
 800dc4c:	bf18      	it	ne
 800dc4e:	2301      	movne	r3, #1
 800dc50:	0692      	lsls	r2, r2, #26
 800dc52:	d42b      	bmi.n	800dcac <_printf_common+0xb0>
 800dc54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc58:	4649      	mov	r1, r9
 800dc5a:	4638      	mov	r0, r7
 800dc5c:	47c0      	blx	r8
 800dc5e:	3001      	adds	r0, #1
 800dc60:	d01e      	beq.n	800dca0 <_printf_common+0xa4>
 800dc62:	6823      	ldr	r3, [r4, #0]
 800dc64:	68e5      	ldr	r5, [r4, #12]
 800dc66:	6832      	ldr	r2, [r6, #0]
 800dc68:	f003 0306 	and.w	r3, r3, #6
 800dc6c:	2b04      	cmp	r3, #4
 800dc6e:	bf08      	it	eq
 800dc70:	1aad      	subeq	r5, r5, r2
 800dc72:	68a3      	ldr	r3, [r4, #8]
 800dc74:	6922      	ldr	r2, [r4, #16]
 800dc76:	bf0c      	ite	eq
 800dc78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc7c:	2500      	movne	r5, #0
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	bfc4      	itt	gt
 800dc82:	1a9b      	subgt	r3, r3, r2
 800dc84:	18ed      	addgt	r5, r5, r3
 800dc86:	2600      	movs	r6, #0
 800dc88:	341a      	adds	r4, #26
 800dc8a:	42b5      	cmp	r5, r6
 800dc8c:	d11a      	bne.n	800dcc4 <_printf_common+0xc8>
 800dc8e:	2000      	movs	r0, #0
 800dc90:	e008      	b.n	800dca4 <_printf_common+0xa8>
 800dc92:	2301      	movs	r3, #1
 800dc94:	4652      	mov	r2, sl
 800dc96:	4649      	mov	r1, r9
 800dc98:	4638      	mov	r0, r7
 800dc9a:	47c0      	blx	r8
 800dc9c:	3001      	adds	r0, #1
 800dc9e:	d103      	bne.n	800dca8 <_printf_common+0xac>
 800dca0:	f04f 30ff 	mov.w	r0, #4294967295
 800dca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dca8:	3501      	adds	r5, #1
 800dcaa:	e7c6      	b.n	800dc3a <_printf_common+0x3e>
 800dcac:	18e1      	adds	r1, r4, r3
 800dcae:	1c5a      	adds	r2, r3, #1
 800dcb0:	2030      	movs	r0, #48	; 0x30
 800dcb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dcb6:	4422      	add	r2, r4
 800dcb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dcbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dcc0:	3302      	adds	r3, #2
 800dcc2:	e7c7      	b.n	800dc54 <_printf_common+0x58>
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	4622      	mov	r2, r4
 800dcc8:	4649      	mov	r1, r9
 800dcca:	4638      	mov	r0, r7
 800dccc:	47c0      	blx	r8
 800dcce:	3001      	adds	r0, #1
 800dcd0:	d0e6      	beq.n	800dca0 <_printf_common+0xa4>
 800dcd2:	3601      	adds	r6, #1
 800dcd4:	e7d9      	b.n	800dc8a <_printf_common+0x8e>
	...

0800dcd8 <_printf_i>:
 800dcd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dcdc:	7e0f      	ldrb	r7, [r1, #24]
 800dcde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dce0:	2f78      	cmp	r7, #120	; 0x78
 800dce2:	4691      	mov	r9, r2
 800dce4:	4680      	mov	r8, r0
 800dce6:	460c      	mov	r4, r1
 800dce8:	469a      	mov	sl, r3
 800dcea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dcee:	d807      	bhi.n	800dd00 <_printf_i+0x28>
 800dcf0:	2f62      	cmp	r7, #98	; 0x62
 800dcf2:	d80a      	bhi.n	800dd0a <_printf_i+0x32>
 800dcf4:	2f00      	cmp	r7, #0
 800dcf6:	f000 80d8 	beq.w	800deaa <_printf_i+0x1d2>
 800dcfa:	2f58      	cmp	r7, #88	; 0x58
 800dcfc:	f000 80a3 	beq.w	800de46 <_printf_i+0x16e>
 800dd00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dd08:	e03a      	b.n	800dd80 <_printf_i+0xa8>
 800dd0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dd0e:	2b15      	cmp	r3, #21
 800dd10:	d8f6      	bhi.n	800dd00 <_printf_i+0x28>
 800dd12:	a101      	add	r1, pc, #4	; (adr r1, 800dd18 <_printf_i+0x40>)
 800dd14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd18:	0800dd71 	.word	0x0800dd71
 800dd1c:	0800dd85 	.word	0x0800dd85
 800dd20:	0800dd01 	.word	0x0800dd01
 800dd24:	0800dd01 	.word	0x0800dd01
 800dd28:	0800dd01 	.word	0x0800dd01
 800dd2c:	0800dd01 	.word	0x0800dd01
 800dd30:	0800dd85 	.word	0x0800dd85
 800dd34:	0800dd01 	.word	0x0800dd01
 800dd38:	0800dd01 	.word	0x0800dd01
 800dd3c:	0800dd01 	.word	0x0800dd01
 800dd40:	0800dd01 	.word	0x0800dd01
 800dd44:	0800de91 	.word	0x0800de91
 800dd48:	0800ddb5 	.word	0x0800ddb5
 800dd4c:	0800de73 	.word	0x0800de73
 800dd50:	0800dd01 	.word	0x0800dd01
 800dd54:	0800dd01 	.word	0x0800dd01
 800dd58:	0800deb3 	.word	0x0800deb3
 800dd5c:	0800dd01 	.word	0x0800dd01
 800dd60:	0800ddb5 	.word	0x0800ddb5
 800dd64:	0800dd01 	.word	0x0800dd01
 800dd68:	0800dd01 	.word	0x0800dd01
 800dd6c:	0800de7b 	.word	0x0800de7b
 800dd70:	682b      	ldr	r3, [r5, #0]
 800dd72:	1d1a      	adds	r2, r3, #4
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	602a      	str	r2, [r5, #0]
 800dd78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd80:	2301      	movs	r3, #1
 800dd82:	e0a3      	b.n	800decc <_printf_i+0x1f4>
 800dd84:	6820      	ldr	r0, [r4, #0]
 800dd86:	6829      	ldr	r1, [r5, #0]
 800dd88:	0606      	lsls	r6, r0, #24
 800dd8a:	f101 0304 	add.w	r3, r1, #4
 800dd8e:	d50a      	bpl.n	800dda6 <_printf_i+0xce>
 800dd90:	680e      	ldr	r6, [r1, #0]
 800dd92:	602b      	str	r3, [r5, #0]
 800dd94:	2e00      	cmp	r6, #0
 800dd96:	da03      	bge.n	800dda0 <_printf_i+0xc8>
 800dd98:	232d      	movs	r3, #45	; 0x2d
 800dd9a:	4276      	negs	r6, r6
 800dd9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dda0:	485e      	ldr	r0, [pc, #376]	; (800df1c <_printf_i+0x244>)
 800dda2:	230a      	movs	r3, #10
 800dda4:	e019      	b.n	800ddda <_printf_i+0x102>
 800dda6:	680e      	ldr	r6, [r1, #0]
 800dda8:	602b      	str	r3, [r5, #0]
 800ddaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ddae:	bf18      	it	ne
 800ddb0:	b236      	sxthne	r6, r6
 800ddb2:	e7ef      	b.n	800dd94 <_printf_i+0xbc>
 800ddb4:	682b      	ldr	r3, [r5, #0]
 800ddb6:	6820      	ldr	r0, [r4, #0]
 800ddb8:	1d19      	adds	r1, r3, #4
 800ddba:	6029      	str	r1, [r5, #0]
 800ddbc:	0601      	lsls	r1, r0, #24
 800ddbe:	d501      	bpl.n	800ddc4 <_printf_i+0xec>
 800ddc0:	681e      	ldr	r6, [r3, #0]
 800ddc2:	e002      	b.n	800ddca <_printf_i+0xf2>
 800ddc4:	0646      	lsls	r6, r0, #25
 800ddc6:	d5fb      	bpl.n	800ddc0 <_printf_i+0xe8>
 800ddc8:	881e      	ldrh	r6, [r3, #0]
 800ddca:	4854      	ldr	r0, [pc, #336]	; (800df1c <_printf_i+0x244>)
 800ddcc:	2f6f      	cmp	r7, #111	; 0x6f
 800ddce:	bf0c      	ite	eq
 800ddd0:	2308      	moveq	r3, #8
 800ddd2:	230a      	movne	r3, #10
 800ddd4:	2100      	movs	r1, #0
 800ddd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ddda:	6865      	ldr	r5, [r4, #4]
 800dddc:	60a5      	str	r5, [r4, #8]
 800ddde:	2d00      	cmp	r5, #0
 800dde0:	bfa2      	ittt	ge
 800dde2:	6821      	ldrge	r1, [r4, #0]
 800dde4:	f021 0104 	bicge.w	r1, r1, #4
 800dde8:	6021      	strge	r1, [r4, #0]
 800ddea:	b90e      	cbnz	r6, 800ddf0 <_printf_i+0x118>
 800ddec:	2d00      	cmp	r5, #0
 800ddee:	d04d      	beq.n	800de8c <_printf_i+0x1b4>
 800ddf0:	4615      	mov	r5, r2
 800ddf2:	fbb6 f1f3 	udiv	r1, r6, r3
 800ddf6:	fb03 6711 	mls	r7, r3, r1, r6
 800ddfa:	5dc7      	ldrb	r7, [r0, r7]
 800ddfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800de00:	4637      	mov	r7, r6
 800de02:	42bb      	cmp	r3, r7
 800de04:	460e      	mov	r6, r1
 800de06:	d9f4      	bls.n	800ddf2 <_printf_i+0x11a>
 800de08:	2b08      	cmp	r3, #8
 800de0a:	d10b      	bne.n	800de24 <_printf_i+0x14c>
 800de0c:	6823      	ldr	r3, [r4, #0]
 800de0e:	07de      	lsls	r6, r3, #31
 800de10:	d508      	bpl.n	800de24 <_printf_i+0x14c>
 800de12:	6923      	ldr	r3, [r4, #16]
 800de14:	6861      	ldr	r1, [r4, #4]
 800de16:	4299      	cmp	r1, r3
 800de18:	bfde      	ittt	le
 800de1a:	2330      	movle	r3, #48	; 0x30
 800de1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800de20:	f105 35ff 	addle.w	r5, r5, #4294967295
 800de24:	1b52      	subs	r2, r2, r5
 800de26:	6122      	str	r2, [r4, #16]
 800de28:	f8cd a000 	str.w	sl, [sp]
 800de2c:	464b      	mov	r3, r9
 800de2e:	aa03      	add	r2, sp, #12
 800de30:	4621      	mov	r1, r4
 800de32:	4640      	mov	r0, r8
 800de34:	f7ff fee2 	bl	800dbfc <_printf_common>
 800de38:	3001      	adds	r0, #1
 800de3a:	d14c      	bne.n	800ded6 <_printf_i+0x1fe>
 800de3c:	f04f 30ff 	mov.w	r0, #4294967295
 800de40:	b004      	add	sp, #16
 800de42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de46:	4835      	ldr	r0, [pc, #212]	; (800df1c <_printf_i+0x244>)
 800de48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800de4c:	6829      	ldr	r1, [r5, #0]
 800de4e:	6823      	ldr	r3, [r4, #0]
 800de50:	f851 6b04 	ldr.w	r6, [r1], #4
 800de54:	6029      	str	r1, [r5, #0]
 800de56:	061d      	lsls	r5, r3, #24
 800de58:	d514      	bpl.n	800de84 <_printf_i+0x1ac>
 800de5a:	07df      	lsls	r7, r3, #31
 800de5c:	bf44      	itt	mi
 800de5e:	f043 0320 	orrmi.w	r3, r3, #32
 800de62:	6023      	strmi	r3, [r4, #0]
 800de64:	b91e      	cbnz	r6, 800de6e <_printf_i+0x196>
 800de66:	6823      	ldr	r3, [r4, #0]
 800de68:	f023 0320 	bic.w	r3, r3, #32
 800de6c:	6023      	str	r3, [r4, #0]
 800de6e:	2310      	movs	r3, #16
 800de70:	e7b0      	b.n	800ddd4 <_printf_i+0xfc>
 800de72:	6823      	ldr	r3, [r4, #0]
 800de74:	f043 0320 	orr.w	r3, r3, #32
 800de78:	6023      	str	r3, [r4, #0]
 800de7a:	2378      	movs	r3, #120	; 0x78
 800de7c:	4828      	ldr	r0, [pc, #160]	; (800df20 <_printf_i+0x248>)
 800de7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800de82:	e7e3      	b.n	800de4c <_printf_i+0x174>
 800de84:	0659      	lsls	r1, r3, #25
 800de86:	bf48      	it	mi
 800de88:	b2b6      	uxthmi	r6, r6
 800de8a:	e7e6      	b.n	800de5a <_printf_i+0x182>
 800de8c:	4615      	mov	r5, r2
 800de8e:	e7bb      	b.n	800de08 <_printf_i+0x130>
 800de90:	682b      	ldr	r3, [r5, #0]
 800de92:	6826      	ldr	r6, [r4, #0]
 800de94:	6961      	ldr	r1, [r4, #20]
 800de96:	1d18      	adds	r0, r3, #4
 800de98:	6028      	str	r0, [r5, #0]
 800de9a:	0635      	lsls	r5, r6, #24
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	d501      	bpl.n	800dea4 <_printf_i+0x1cc>
 800dea0:	6019      	str	r1, [r3, #0]
 800dea2:	e002      	b.n	800deaa <_printf_i+0x1d2>
 800dea4:	0670      	lsls	r0, r6, #25
 800dea6:	d5fb      	bpl.n	800dea0 <_printf_i+0x1c8>
 800dea8:	8019      	strh	r1, [r3, #0]
 800deaa:	2300      	movs	r3, #0
 800deac:	6123      	str	r3, [r4, #16]
 800deae:	4615      	mov	r5, r2
 800deb0:	e7ba      	b.n	800de28 <_printf_i+0x150>
 800deb2:	682b      	ldr	r3, [r5, #0]
 800deb4:	1d1a      	adds	r2, r3, #4
 800deb6:	602a      	str	r2, [r5, #0]
 800deb8:	681d      	ldr	r5, [r3, #0]
 800deba:	6862      	ldr	r2, [r4, #4]
 800debc:	2100      	movs	r1, #0
 800debe:	4628      	mov	r0, r5
 800dec0:	f7f2 f99e 	bl	8000200 <memchr>
 800dec4:	b108      	cbz	r0, 800deca <_printf_i+0x1f2>
 800dec6:	1b40      	subs	r0, r0, r5
 800dec8:	6060      	str	r0, [r4, #4]
 800deca:	6863      	ldr	r3, [r4, #4]
 800decc:	6123      	str	r3, [r4, #16]
 800dece:	2300      	movs	r3, #0
 800ded0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ded4:	e7a8      	b.n	800de28 <_printf_i+0x150>
 800ded6:	6923      	ldr	r3, [r4, #16]
 800ded8:	462a      	mov	r2, r5
 800deda:	4649      	mov	r1, r9
 800dedc:	4640      	mov	r0, r8
 800dede:	47d0      	blx	sl
 800dee0:	3001      	adds	r0, #1
 800dee2:	d0ab      	beq.n	800de3c <_printf_i+0x164>
 800dee4:	6823      	ldr	r3, [r4, #0]
 800dee6:	079b      	lsls	r3, r3, #30
 800dee8:	d413      	bmi.n	800df12 <_printf_i+0x23a>
 800deea:	68e0      	ldr	r0, [r4, #12]
 800deec:	9b03      	ldr	r3, [sp, #12]
 800deee:	4298      	cmp	r0, r3
 800def0:	bfb8      	it	lt
 800def2:	4618      	movlt	r0, r3
 800def4:	e7a4      	b.n	800de40 <_printf_i+0x168>
 800def6:	2301      	movs	r3, #1
 800def8:	4632      	mov	r2, r6
 800defa:	4649      	mov	r1, r9
 800defc:	4640      	mov	r0, r8
 800defe:	47d0      	blx	sl
 800df00:	3001      	adds	r0, #1
 800df02:	d09b      	beq.n	800de3c <_printf_i+0x164>
 800df04:	3501      	adds	r5, #1
 800df06:	68e3      	ldr	r3, [r4, #12]
 800df08:	9903      	ldr	r1, [sp, #12]
 800df0a:	1a5b      	subs	r3, r3, r1
 800df0c:	42ab      	cmp	r3, r5
 800df0e:	dcf2      	bgt.n	800def6 <_printf_i+0x21e>
 800df10:	e7eb      	b.n	800deea <_printf_i+0x212>
 800df12:	2500      	movs	r5, #0
 800df14:	f104 0619 	add.w	r6, r4, #25
 800df18:	e7f5      	b.n	800df06 <_printf_i+0x22e>
 800df1a:	bf00      	nop
 800df1c:	08010a26 	.word	0x08010a26
 800df20:	08010a37 	.word	0x08010a37

0800df24 <_sbrk_r>:
 800df24:	b538      	push	{r3, r4, r5, lr}
 800df26:	4d06      	ldr	r5, [pc, #24]	; (800df40 <_sbrk_r+0x1c>)
 800df28:	2300      	movs	r3, #0
 800df2a:	4604      	mov	r4, r0
 800df2c:	4608      	mov	r0, r1
 800df2e:	602b      	str	r3, [r5, #0]
 800df30:	f002 f9ee 	bl	8010310 <_sbrk>
 800df34:	1c43      	adds	r3, r0, #1
 800df36:	d102      	bne.n	800df3e <_sbrk_r+0x1a>
 800df38:	682b      	ldr	r3, [r5, #0]
 800df3a:	b103      	cbz	r3, 800df3e <_sbrk_r+0x1a>
 800df3c:	6023      	str	r3, [r4, #0]
 800df3e:	bd38      	pop	{r3, r4, r5, pc}
 800df40:	20008200 	.word	0x20008200

0800df44 <siprintf>:
 800df44:	b40e      	push	{r1, r2, r3}
 800df46:	b500      	push	{lr}
 800df48:	b09c      	sub	sp, #112	; 0x70
 800df4a:	ab1d      	add	r3, sp, #116	; 0x74
 800df4c:	9002      	str	r0, [sp, #8]
 800df4e:	9006      	str	r0, [sp, #24]
 800df50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800df54:	4809      	ldr	r0, [pc, #36]	; (800df7c <siprintf+0x38>)
 800df56:	9107      	str	r1, [sp, #28]
 800df58:	9104      	str	r1, [sp, #16]
 800df5a:	4909      	ldr	r1, [pc, #36]	; (800df80 <siprintf+0x3c>)
 800df5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800df60:	9105      	str	r1, [sp, #20]
 800df62:	6800      	ldr	r0, [r0, #0]
 800df64:	9301      	str	r3, [sp, #4]
 800df66:	a902      	add	r1, sp, #8
 800df68:	f001 fbc0 	bl	800f6ec <_svfiprintf_r>
 800df6c:	9b02      	ldr	r3, [sp, #8]
 800df6e:	2200      	movs	r2, #0
 800df70:	701a      	strb	r2, [r3, #0]
 800df72:	b01c      	add	sp, #112	; 0x70
 800df74:	f85d eb04 	ldr.w	lr, [sp], #4
 800df78:	b003      	add	sp, #12
 800df7a:	4770      	bx	lr
 800df7c:	2000001c 	.word	0x2000001c
 800df80:	ffff0208 	.word	0xffff0208

0800df84 <_vsniprintf_r>:
 800df84:	b530      	push	{r4, r5, lr}
 800df86:	4614      	mov	r4, r2
 800df88:	2c00      	cmp	r4, #0
 800df8a:	b09b      	sub	sp, #108	; 0x6c
 800df8c:	4605      	mov	r5, r0
 800df8e:	461a      	mov	r2, r3
 800df90:	da05      	bge.n	800df9e <_vsniprintf_r+0x1a>
 800df92:	238b      	movs	r3, #139	; 0x8b
 800df94:	6003      	str	r3, [r0, #0]
 800df96:	f04f 30ff 	mov.w	r0, #4294967295
 800df9a:	b01b      	add	sp, #108	; 0x6c
 800df9c:	bd30      	pop	{r4, r5, pc}
 800df9e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dfa2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dfa6:	bf14      	ite	ne
 800dfa8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dfac:	4623      	moveq	r3, r4
 800dfae:	9302      	str	r3, [sp, #8]
 800dfb0:	9305      	str	r3, [sp, #20]
 800dfb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dfb6:	9100      	str	r1, [sp, #0]
 800dfb8:	9104      	str	r1, [sp, #16]
 800dfba:	f8ad 300e 	strh.w	r3, [sp, #14]
 800dfbe:	4669      	mov	r1, sp
 800dfc0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dfc2:	f001 fb93 	bl	800f6ec <_svfiprintf_r>
 800dfc6:	1c43      	adds	r3, r0, #1
 800dfc8:	bfbc      	itt	lt
 800dfca:	238b      	movlt	r3, #139	; 0x8b
 800dfcc:	602b      	strlt	r3, [r5, #0]
 800dfce:	2c00      	cmp	r4, #0
 800dfd0:	d0e3      	beq.n	800df9a <_vsniprintf_r+0x16>
 800dfd2:	9b00      	ldr	r3, [sp, #0]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	701a      	strb	r2, [r3, #0]
 800dfd8:	e7df      	b.n	800df9a <_vsniprintf_r+0x16>
	...

0800dfdc <vsniprintf>:
 800dfdc:	b507      	push	{r0, r1, r2, lr}
 800dfde:	9300      	str	r3, [sp, #0]
 800dfe0:	4613      	mov	r3, r2
 800dfe2:	460a      	mov	r2, r1
 800dfe4:	4601      	mov	r1, r0
 800dfe6:	4803      	ldr	r0, [pc, #12]	; (800dff4 <vsniprintf+0x18>)
 800dfe8:	6800      	ldr	r0, [r0, #0]
 800dfea:	f7ff ffcb 	bl	800df84 <_vsniprintf_r>
 800dfee:	b003      	add	sp, #12
 800dff0:	f85d fb04 	ldr.w	pc, [sp], #4
 800dff4:	2000001c 	.word	0x2000001c

0800dff8 <quorem>:
 800dff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dffc:	6903      	ldr	r3, [r0, #16]
 800dffe:	690c      	ldr	r4, [r1, #16]
 800e000:	42a3      	cmp	r3, r4
 800e002:	4607      	mov	r7, r0
 800e004:	f2c0 8081 	blt.w	800e10a <quorem+0x112>
 800e008:	3c01      	subs	r4, #1
 800e00a:	f101 0814 	add.w	r8, r1, #20
 800e00e:	f100 0514 	add.w	r5, r0, #20
 800e012:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e016:	9301      	str	r3, [sp, #4]
 800e018:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e01c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e020:	3301      	adds	r3, #1
 800e022:	429a      	cmp	r2, r3
 800e024:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e028:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e02c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e030:	d331      	bcc.n	800e096 <quorem+0x9e>
 800e032:	f04f 0e00 	mov.w	lr, #0
 800e036:	4640      	mov	r0, r8
 800e038:	46ac      	mov	ip, r5
 800e03a:	46f2      	mov	sl, lr
 800e03c:	f850 2b04 	ldr.w	r2, [r0], #4
 800e040:	b293      	uxth	r3, r2
 800e042:	fb06 e303 	mla	r3, r6, r3, lr
 800e046:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	ebaa 0303 	sub.w	r3, sl, r3
 800e050:	f8dc a000 	ldr.w	sl, [ip]
 800e054:	0c12      	lsrs	r2, r2, #16
 800e056:	fa13 f38a 	uxtah	r3, r3, sl
 800e05a:	fb06 e202 	mla	r2, r6, r2, lr
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	9b00      	ldr	r3, [sp, #0]
 800e062:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e066:	b292      	uxth	r2, r2
 800e068:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e06c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e070:	f8bd 3000 	ldrh.w	r3, [sp]
 800e074:	4581      	cmp	r9, r0
 800e076:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e07a:	f84c 3b04 	str.w	r3, [ip], #4
 800e07e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e082:	d2db      	bcs.n	800e03c <quorem+0x44>
 800e084:	f855 300b 	ldr.w	r3, [r5, fp]
 800e088:	b92b      	cbnz	r3, 800e096 <quorem+0x9e>
 800e08a:	9b01      	ldr	r3, [sp, #4]
 800e08c:	3b04      	subs	r3, #4
 800e08e:	429d      	cmp	r5, r3
 800e090:	461a      	mov	r2, r3
 800e092:	d32e      	bcc.n	800e0f2 <quorem+0xfa>
 800e094:	613c      	str	r4, [r7, #16]
 800e096:	4638      	mov	r0, r7
 800e098:	f001 f9b4 	bl	800f404 <__mcmp>
 800e09c:	2800      	cmp	r0, #0
 800e09e:	db24      	blt.n	800e0ea <quorem+0xf2>
 800e0a0:	3601      	adds	r6, #1
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	f04f 0c00 	mov.w	ip, #0
 800e0a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800e0ac:	f8d0 e000 	ldr.w	lr, [r0]
 800e0b0:	b293      	uxth	r3, r2
 800e0b2:	ebac 0303 	sub.w	r3, ip, r3
 800e0b6:	0c12      	lsrs	r2, r2, #16
 800e0b8:	fa13 f38e 	uxtah	r3, r3, lr
 800e0bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e0c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e0ca:	45c1      	cmp	r9, r8
 800e0cc:	f840 3b04 	str.w	r3, [r0], #4
 800e0d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e0d4:	d2e8      	bcs.n	800e0a8 <quorem+0xb0>
 800e0d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0de:	b922      	cbnz	r2, 800e0ea <quorem+0xf2>
 800e0e0:	3b04      	subs	r3, #4
 800e0e2:	429d      	cmp	r5, r3
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	d30a      	bcc.n	800e0fe <quorem+0x106>
 800e0e8:	613c      	str	r4, [r7, #16]
 800e0ea:	4630      	mov	r0, r6
 800e0ec:	b003      	add	sp, #12
 800e0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0f2:	6812      	ldr	r2, [r2, #0]
 800e0f4:	3b04      	subs	r3, #4
 800e0f6:	2a00      	cmp	r2, #0
 800e0f8:	d1cc      	bne.n	800e094 <quorem+0x9c>
 800e0fa:	3c01      	subs	r4, #1
 800e0fc:	e7c7      	b.n	800e08e <quorem+0x96>
 800e0fe:	6812      	ldr	r2, [r2, #0]
 800e100:	3b04      	subs	r3, #4
 800e102:	2a00      	cmp	r2, #0
 800e104:	d1f0      	bne.n	800e0e8 <quorem+0xf0>
 800e106:	3c01      	subs	r4, #1
 800e108:	e7eb      	b.n	800e0e2 <quorem+0xea>
 800e10a:	2000      	movs	r0, #0
 800e10c:	e7ee      	b.n	800e0ec <quorem+0xf4>
	...

0800e110 <_dtoa_r>:
 800e110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e114:	ed2d 8b04 	vpush	{d8-d9}
 800e118:	ec57 6b10 	vmov	r6, r7, d0
 800e11c:	b093      	sub	sp, #76	; 0x4c
 800e11e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e120:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e124:	9106      	str	r1, [sp, #24]
 800e126:	ee10 aa10 	vmov	sl, s0
 800e12a:	4604      	mov	r4, r0
 800e12c:	9209      	str	r2, [sp, #36]	; 0x24
 800e12e:	930c      	str	r3, [sp, #48]	; 0x30
 800e130:	46bb      	mov	fp, r7
 800e132:	b975      	cbnz	r5, 800e152 <_dtoa_r+0x42>
 800e134:	2010      	movs	r0, #16
 800e136:	f7ff f985 	bl	800d444 <malloc>
 800e13a:	4602      	mov	r2, r0
 800e13c:	6260      	str	r0, [r4, #36]	; 0x24
 800e13e:	b920      	cbnz	r0, 800e14a <_dtoa_r+0x3a>
 800e140:	4ba7      	ldr	r3, [pc, #668]	; (800e3e0 <_dtoa_r+0x2d0>)
 800e142:	21ea      	movs	r1, #234	; 0xea
 800e144:	48a7      	ldr	r0, [pc, #668]	; (800e3e4 <_dtoa_r+0x2d4>)
 800e146:	f001 fe41 	bl	800fdcc <__assert_func>
 800e14a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e14e:	6005      	str	r5, [r0, #0]
 800e150:	60c5      	str	r5, [r0, #12]
 800e152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e154:	6819      	ldr	r1, [r3, #0]
 800e156:	b151      	cbz	r1, 800e16e <_dtoa_r+0x5e>
 800e158:	685a      	ldr	r2, [r3, #4]
 800e15a:	604a      	str	r2, [r1, #4]
 800e15c:	2301      	movs	r3, #1
 800e15e:	4093      	lsls	r3, r2
 800e160:	608b      	str	r3, [r1, #8]
 800e162:	4620      	mov	r0, r4
 800e164:	f000 ff0c 	bl	800ef80 <_Bfree>
 800e168:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e16a:	2200      	movs	r2, #0
 800e16c:	601a      	str	r2, [r3, #0]
 800e16e:	1e3b      	subs	r3, r7, #0
 800e170:	bfaa      	itet	ge
 800e172:	2300      	movge	r3, #0
 800e174:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e178:	f8c8 3000 	strge.w	r3, [r8]
 800e17c:	4b9a      	ldr	r3, [pc, #616]	; (800e3e8 <_dtoa_r+0x2d8>)
 800e17e:	bfbc      	itt	lt
 800e180:	2201      	movlt	r2, #1
 800e182:	f8c8 2000 	strlt.w	r2, [r8]
 800e186:	ea33 030b 	bics.w	r3, r3, fp
 800e18a:	d11b      	bne.n	800e1c4 <_dtoa_r+0xb4>
 800e18c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e18e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e192:	6013      	str	r3, [r2, #0]
 800e194:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e198:	4333      	orrs	r3, r6
 800e19a:	f000 8592 	beq.w	800ecc2 <_dtoa_r+0xbb2>
 800e19e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1a0:	b963      	cbnz	r3, 800e1bc <_dtoa_r+0xac>
 800e1a2:	4b92      	ldr	r3, [pc, #584]	; (800e3ec <_dtoa_r+0x2dc>)
 800e1a4:	e022      	b.n	800e1ec <_dtoa_r+0xdc>
 800e1a6:	4b92      	ldr	r3, [pc, #584]	; (800e3f0 <_dtoa_r+0x2e0>)
 800e1a8:	9301      	str	r3, [sp, #4]
 800e1aa:	3308      	adds	r3, #8
 800e1ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e1ae:	6013      	str	r3, [r2, #0]
 800e1b0:	9801      	ldr	r0, [sp, #4]
 800e1b2:	b013      	add	sp, #76	; 0x4c
 800e1b4:	ecbd 8b04 	vpop	{d8-d9}
 800e1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1bc:	4b8b      	ldr	r3, [pc, #556]	; (800e3ec <_dtoa_r+0x2dc>)
 800e1be:	9301      	str	r3, [sp, #4]
 800e1c0:	3303      	adds	r3, #3
 800e1c2:	e7f3      	b.n	800e1ac <_dtoa_r+0x9c>
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	4650      	mov	r0, sl
 800e1ca:	4659      	mov	r1, fp
 800e1cc:	f7f2 fc8c 	bl	8000ae8 <__aeabi_dcmpeq>
 800e1d0:	ec4b ab19 	vmov	d9, sl, fp
 800e1d4:	4680      	mov	r8, r0
 800e1d6:	b158      	cbz	r0, 800e1f0 <_dtoa_r+0xe0>
 800e1d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1da:	2301      	movs	r3, #1
 800e1dc:	6013      	str	r3, [r2, #0]
 800e1de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	f000 856b 	beq.w	800ecbc <_dtoa_r+0xbac>
 800e1e6:	4883      	ldr	r0, [pc, #524]	; (800e3f4 <_dtoa_r+0x2e4>)
 800e1e8:	6018      	str	r0, [r3, #0]
 800e1ea:	1e43      	subs	r3, r0, #1
 800e1ec:	9301      	str	r3, [sp, #4]
 800e1ee:	e7df      	b.n	800e1b0 <_dtoa_r+0xa0>
 800e1f0:	ec4b ab10 	vmov	d0, sl, fp
 800e1f4:	aa10      	add	r2, sp, #64	; 0x40
 800e1f6:	a911      	add	r1, sp, #68	; 0x44
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	f001 f9a9 	bl	800f550 <__d2b>
 800e1fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e202:	ee08 0a10 	vmov	s16, r0
 800e206:	2d00      	cmp	r5, #0
 800e208:	f000 8084 	beq.w	800e314 <_dtoa_r+0x204>
 800e20c:	ee19 3a90 	vmov	r3, s19
 800e210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e214:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e218:	4656      	mov	r6, sl
 800e21a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e21e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e222:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e226:	4b74      	ldr	r3, [pc, #464]	; (800e3f8 <_dtoa_r+0x2e8>)
 800e228:	2200      	movs	r2, #0
 800e22a:	4630      	mov	r0, r6
 800e22c:	4639      	mov	r1, r7
 800e22e:	f7f2 f83b 	bl	80002a8 <__aeabi_dsub>
 800e232:	a365      	add	r3, pc, #404	; (adr r3, 800e3c8 <_dtoa_r+0x2b8>)
 800e234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e238:	f7f2 f9ee 	bl	8000618 <__aeabi_dmul>
 800e23c:	a364      	add	r3, pc, #400	; (adr r3, 800e3d0 <_dtoa_r+0x2c0>)
 800e23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e242:	f7f2 f833 	bl	80002ac <__adddf3>
 800e246:	4606      	mov	r6, r0
 800e248:	4628      	mov	r0, r5
 800e24a:	460f      	mov	r7, r1
 800e24c:	f7f2 f97a 	bl	8000544 <__aeabi_i2d>
 800e250:	a361      	add	r3, pc, #388	; (adr r3, 800e3d8 <_dtoa_r+0x2c8>)
 800e252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e256:	f7f2 f9df 	bl	8000618 <__aeabi_dmul>
 800e25a:	4602      	mov	r2, r0
 800e25c:	460b      	mov	r3, r1
 800e25e:	4630      	mov	r0, r6
 800e260:	4639      	mov	r1, r7
 800e262:	f7f2 f823 	bl	80002ac <__adddf3>
 800e266:	4606      	mov	r6, r0
 800e268:	460f      	mov	r7, r1
 800e26a:	f7f2 fc85 	bl	8000b78 <__aeabi_d2iz>
 800e26e:	2200      	movs	r2, #0
 800e270:	9000      	str	r0, [sp, #0]
 800e272:	2300      	movs	r3, #0
 800e274:	4630      	mov	r0, r6
 800e276:	4639      	mov	r1, r7
 800e278:	f7f2 fc40 	bl	8000afc <__aeabi_dcmplt>
 800e27c:	b150      	cbz	r0, 800e294 <_dtoa_r+0x184>
 800e27e:	9800      	ldr	r0, [sp, #0]
 800e280:	f7f2 f960 	bl	8000544 <__aeabi_i2d>
 800e284:	4632      	mov	r2, r6
 800e286:	463b      	mov	r3, r7
 800e288:	f7f2 fc2e 	bl	8000ae8 <__aeabi_dcmpeq>
 800e28c:	b910      	cbnz	r0, 800e294 <_dtoa_r+0x184>
 800e28e:	9b00      	ldr	r3, [sp, #0]
 800e290:	3b01      	subs	r3, #1
 800e292:	9300      	str	r3, [sp, #0]
 800e294:	9b00      	ldr	r3, [sp, #0]
 800e296:	2b16      	cmp	r3, #22
 800e298:	d85a      	bhi.n	800e350 <_dtoa_r+0x240>
 800e29a:	9a00      	ldr	r2, [sp, #0]
 800e29c:	4b57      	ldr	r3, [pc, #348]	; (800e3fc <_dtoa_r+0x2ec>)
 800e29e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a6:	ec51 0b19 	vmov	r0, r1, d9
 800e2aa:	f7f2 fc27 	bl	8000afc <__aeabi_dcmplt>
 800e2ae:	2800      	cmp	r0, #0
 800e2b0:	d050      	beq.n	800e354 <_dtoa_r+0x244>
 800e2b2:	9b00      	ldr	r3, [sp, #0]
 800e2b4:	3b01      	subs	r3, #1
 800e2b6:	9300      	str	r3, [sp, #0]
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e2be:	1b5d      	subs	r5, r3, r5
 800e2c0:	1e6b      	subs	r3, r5, #1
 800e2c2:	9305      	str	r3, [sp, #20]
 800e2c4:	bf45      	ittet	mi
 800e2c6:	f1c5 0301 	rsbmi	r3, r5, #1
 800e2ca:	9304      	strmi	r3, [sp, #16]
 800e2cc:	2300      	movpl	r3, #0
 800e2ce:	2300      	movmi	r3, #0
 800e2d0:	bf4c      	ite	mi
 800e2d2:	9305      	strmi	r3, [sp, #20]
 800e2d4:	9304      	strpl	r3, [sp, #16]
 800e2d6:	9b00      	ldr	r3, [sp, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	db3d      	blt.n	800e358 <_dtoa_r+0x248>
 800e2dc:	9b05      	ldr	r3, [sp, #20]
 800e2de:	9a00      	ldr	r2, [sp, #0]
 800e2e0:	920a      	str	r2, [sp, #40]	; 0x28
 800e2e2:	4413      	add	r3, r2
 800e2e4:	9305      	str	r3, [sp, #20]
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	9307      	str	r3, [sp, #28]
 800e2ea:	9b06      	ldr	r3, [sp, #24]
 800e2ec:	2b09      	cmp	r3, #9
 800e2ee:	f200 8089 	bhi.w	800e404 <_dtoa_r+0x2f4>
 800e2f2:	2b05      	cmp	r3, #5
 800e2f4:	bfc4      	itt	gt
 800e2f6:	3b04      	subgt	r3, #4
 800e2f8:	9306      	strgt	r3, [sp, #24]
 800e2fa:	9b06      	ldr	r3, [sp, #24]
 800e2fc:	f1a3 0302 	sub.w	r3, r3, #2
 800e300:	bfcc      	ite	gt
 800e302:	2500      	movgt	r5, #0
 800e304:	2501      	movle	r5, #1
 800e306:	2b03      	cmp	r3, #3
 800e308:	f200 8087 	bhi.w	800e41a <_dtoa_r+0x30a>
 800e30c:	e8df f003 	tbb	[pc, r3]
 800e310:	59383a2d 	.word	0x59383a2d
 800e314:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e318:	441d      	add	r5, r3
 800e31a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e31e:	2b20      	cmp	r3, #32
 800e320:	bfc1      	itttt	gt
 800e322:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e326:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e32a:	fa0b f303 	lslgt.w	r3, fp, r3
 800e32e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e332:	bfda      	itte	le
 800e334:	f1c3 0320 	rsble	r3, r3, #32
 800e338:	fa06 f003 	lslle.w	r0, r6, r3
 800e33c:	4318      	orrgt	r0, r3
 800e33e:	f7f2 f8f1 	bl	8000524 <__aeabi_ui2d>
 800e342:	2301      	movs	r3, #1
 800e344:	4606      	mov	r6, r0
 800e346:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e34a:	3d01      	subs	r5, #1
 800e34c:	930e      	str	r3, [sp, #56]	; 0x38
 800e34e:	e76a      	b.n	800e226 <_dtoa_r+0x116>
 800e350:	2301      	movs	r3, #1
 800e352:	e7b2      	b.n	800e2ba <_dtoa_r+0x1aa>
 800e354:	900b      	str	r0, [sp, #44]	; 0x2c
 800e356:	e7b1      	b.n	800e2bc <_dtoa_r+0x1ac>
 800e358:	9b04      	ldr	r3, [sp, #16]
 800e35a:	9a00      	ldr	r2, [sp, #0]
 800e35c:	1a9b      	subs	r3, r3, r2
 800e35e:	9304      	str	r3, [sp, #16]
 800e360:	4253      	negs	r3, r2
 800e362:	9307      	str	r3, [sp, #28]
 800e364:	2300      	movs	r3, #0
 800e366:	930a      	str	r3, [sp, #40]	; 0x28
 800e368:	e7bf      	b.n	800e2ea <_dtoa_r+0x1da>
 800e36a:	2300      	movs	r3, #0
 800e36c:	9308      	str	r3, [sp, #32]
 800e36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e370:	2b00      	cmp	r3, #0
 800e372:	dc55      	bgt.n	800e420 <_dtoa_r+0x310>
 800e374:	2301      	movs	r3, #1
 800e376:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e37a:	461a      	mov	r2, r3
 800e37c:	9209      	str	r2, [sp, #36]	; 0x24
 800e37e:	e00c      	b.n	800e39a <_dtoa_r+0x28a>
 800e380:	2301      	movs	r3, #1
 800e382:	e7f3      	b.n	800e36c <_dtoa_r+0x25c>
 800e384:	2300      	movs	r3, #0
 800e386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e388:	9308      	str	r3, [sp, #32]
 800e38a:	9b00      	ldr	r3, [sp, #0]
 800e38c:	4413      	add	r3, r2
 800e38e:	9302      	str	r3, [sp, #8]
 800e390:	3301      	adds	r3, #1
 800e392:	2b01      	cmp	r3, #1
 800e394:	9303      	str	r3, [sp, #12]
 800e396:	bfb8      	it	lt
 800e398:	2301      	movlt	r3, #1
 800e39a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e39c:	2200      	movs	r2, #0
 800e39e:	6042      	str	r2, [r0, #4]
 800e3a0:	2204      	movs	r2, #4
 800e3a2:	f102 0614 	add.w	r6, r2, #20
 800e3a6:	429e      	cmp	r6, r3
 800e3a8:	6841      	ldr	r1, [r0, #4]
 800e3aa:	d93d      	bls.n	800e428 <_dtoa_r+0x318>
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	f000 fda7 	bl	800ef00 <_Balloc>
 800e3b2:	9001      	str	r0, [sp, #4]
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	d13b      	bne.n	800e430 <_dtoa_r+0x320>
 800e3b8:	4b11      	ldr	r3, [pc, #68]	; (800e400 <_dtoa_r+0x2f0>)
 800e3ba:	4602      	mov	r2, r0
 800e3bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e3c0:	e6c0      	b.n	800e144 <_dtoa_r+0x34>
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	e7df      	b.n	800e386 <_dtoa_r+0x276>
 800e3c6:	bf00      	nop
 800e3c8:	636f4361 	.word	0x636f4361
 800e3cc:	3fd287a7 	.word	0x3fd287a7
 800e3d0:	8b60c8b3 	.word	0x8b60c8b3
 800e3d4:	3fc68a28 	.word	0x3fc68a28
 800e3d8:	509f79fb 	.word	0x509f79fb
 800e3dc:	3fd34413 	.word	0x3fd34413
 800e3e0:	08010a55 	.word	0x08010a55
 800e3e4:	08010a6c 	.word	0x08010a6c
 800e3e8:	7ff00000 	.word	0x7ff00000
 800e3ec:	08010a51 	.word	0x08010a51
 800e3f0:	08010a48 	.word	0x08010a48
 800e3f4:	08010a25 	.word	0x08010a25
 800e3f8:	3ff80000 	.word	0x3ff80000
 800e3fc:	08010bc0 	.word	0x08010bc0
 800e400:	08010ac7 	.word	0x08010ac7
 800e404:	2501      	movs	r5, #1
 800e406:	2300      	movs	r3, #0
 800e408:	9306      	str	r3, [sp, #24]
 800e40a:	9508      	str	r5, [sp, #32]
 800e40c:	f04f 33ff 	mov.w	r3, #4294967295
 800e410:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e414:	2200      	movs	r2, #0
 800e416:	2312      	movs	r3, #18
 800e418:	e7b0      	b.n	800e37c <_dtoa_r+0x26c>
 800e41a:	2301      	movs	r3, #1
 800e41c:	9308      	str	r3, [sp, #32]
 800e41e:	e7f5      	b.n	800e40c <_dtoa_r+0x2fc>
 800e420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e422:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e426:	e7b8      	b.n	800e39a <_dtoa_r+0x28a>
 800e428:	3101      	adds	r1, #1
 800e42a:	6041      	str	r1, [r0, #4]
 800e42c:	0052      	lsls	r2, r2, #1
 800e42e:	e7b8      	b.n	800e3a2 <_dtoa_r+0x292>
 800e430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e432:	9a01      	ldr	r2, [sp, #4]
 800e434:	601a      	str	r2, [r3, #0]
 800e436:	9b03      	ldr	r3, [sp, #12]
 800e438:	2b0e      	cmp	r3, #14
 800e43a:	f200 809d 	bhi.w	800e578 <_dtoa_r+0x468>
 800e43e:	2d00      	cmp	r5, #0
 800e440:	f000 809a 	beq.w	800e578 <_dtoa_r+0x468>
 800e444:	9b00      	ldr	r3, [sp, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	dd32      	ble.n	800e4b0 <_dtoa_r+0x3a0>
 800e44a:	4ab7      	ldr	r2, [pc, #732]	; (800e728 <_dtoa_r+0x618>)
 800e44c:	f003 030f 	and.w	r3, r3, #15
 800e450:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e454:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e458:	9b00      	ldr	r3, [sp, #0]
 800e45a:	05d8      	lsls	r0, r3, #23
 800e45c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e460:	d516      	bpl.n	800e490 <_dtoa_r+0x380>
 800e462:	4bb2      	ldr	r3, [pc, #712]	; (800e72c <_dtoa_r+0x61c>)
 800e464:	ec51 0b19 	vmov	r0, r1, d9
 800e468:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e46c:	f7f2 f9fe 	bl	800086c <__aeabi_ddiv>
 800e470:	f007 070f 	and.w	r7, r7, #15
 800e474:	4682      	mov	sl, r0
 800e476:	468b      	mov	fp, r1
 800e478:	2503      	movs	r5, #3
 800e47a:	4eac      	ldr	r6, [pc, #688]	; (800e72c <_dtoa_r+0x61c>)
 800e47c:	b957      	cbnz	r7, 800e494 <_dtoa_r+0x384>
 800e47e:	4642      	mov	r2, r8
 800e480:	464b      	mov	r3, r9
 800e482:	4650      	mov	r0, sl
 800e484:	4659      	mov	r1, fp
 800e486:	f7f2 f9f1 	bl	800086c <__aeabi_ddiv>
 800e48a:	4682      	mov	sl, r0
 800e48c:	468b      	mov	fp, r1
 800e48e:	e028      	b.n	800e4e2 <_dtoa_r+0x3d2>
 800e490:	2502      	movs	r5, #2
 800e492:	e7f2      	b.n	800e47a <_dtoa_r+0x36a>
 800e494:	07f9      	lsls	r1, r7, #31
 800e496:	d508      	bpl.n	800e4aa <_dtoa_r+0x39a>
 800e498:	4640      	mov	r0, r8
 800e49a:	4649      	mov	r1, r9
 800e49c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e4a0:	f7f2 f8ba 	bl	8000618 <__aeabi_dmul>
 800e4a4:	3501      	adds	r5, #1
 800e4a6:	4680      	mov	r8, r0
 800e4a8:	4689      	mov	r9, r1
 800e4aa:	107f      	asrs	r7, r7, #1
 800e4ac:	3608      	adds	r6, #8
 800e4ae:	e7e5      	b.n	800e47c <_dtoa_r+0x36c>
 800e4b0:	f000 809b 	beq.w	800e5ea <_dtoa_r+0x4da>
 800e4b4:	9b00      	ldr	r3, [sp, #0]
 800e4b6:	4f9d      	ldr	r7, [pc, #628]	; (800e72c <_dtoa_r+0x61c>)
 800e4b8:	425e      	negs	r6, r3
 800e4ba:	4b9b      	ldr	r3, [pc, #620]	; (800e728 <_dtoa_r+0x618>)
 800e4bc:	f006 020f 	and.w	r2, r6, #15
 800e4c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c8:	ec51 0b19 	vmov	r0, r1, d9
 800e4cc:	f7f2 f8a4 	bl	8000618 <__aeabi_dmul>
 800e4d0:	1136      	asrs	r6, r6, #4
 800e4d2:	4682      	mov	sl, r0
 800e4d4:	468b      	mov	fp, r1
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	2502      	movs	r5, #2
 800e4da:	2e00      	cmp	r6, #0
 800e4dc:	d17a      	bne.n	800e5d4 <_dtoa_r+0x4c4>
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d1d3      	bne.n	800e48a <_dtoa_r+0x37a>
 800e4e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	f000 8082 	beq.w	800e5ee <_dtoa_r+0x4de>
 800e4ea:	4b91      	ldr	r3, [pc, #580]	; (800e730 <_dtoa_r+0x620>)
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	4650      	mov	r0, sl
 800e4f0:	4659      	mov	r1, fp
 800e4f2:	f7f2 fb03 	bl	8000afc <__aeabi_dcmplt>
 800e4f6:	2800      	cmp	r0, #0
 800e4f8:	d079      	beq.n	800e5ee <_dtoa_r+0x4de>
 800e4fa:	9b03      	ldr	r3, [sp, #12]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d076      	beq.n	800e5ee <_dtoa_r+0x4de>
 800e500:	9b02      	ldr	r3, [sp, #8]
 800e502:	2b00      	cmp	r3, #0
 800e504:	dd36      	ble.n	800e574 <_dtoa_r+0x464>
 800e506:	9b00      	ldr	r3, [sp, #0]
 800e508:	4650      	mov	r0, sl
 800e50a:	4659      	mov	r1, fp
 800e50c:	1e5f      	subs	r7, r3, #1
 800e50e:	2200      	movs	r2, #0
 800e510:	4b88      	ldr	r3, [pc, #544]	; (800e734 <_dtoa_r+0x624>)
 800e512:	f7f2 f881 	bl	8000618 <__aeabi_dmul>
 800e516:	9e02      	ldr	r6, [sp, #8]
 800e518:	4682      	mov	sl, r0
 800e51a:	468b      	mov	fp, r1
 800e51c:	3501      	adds	r5, #1
 800e51e:	4628      	mov	r0, r5
 800e520:	f7f2 f810 	bl	8000544 <__aeabi_i2d>
 800e524:	4652      	mov	r2, sl
 800e526:	465b      	mov	r3, fp
 800e528:	f7f2 f876 	bl	8000618 <__aeabi_dmul>
 800e52c:	4b82      	ldr	r3, [pc, #520]	; (800e738 <_dtoa_r+0x628>)
 800e52e:	2200      	movs	r2, #0
 800e530:	f7f1 febc 	bl	80002ac <__adddf3>
 800e534:	46d0      	mov	r8, sl
 800e536:	46d9      	mov	r9, fp
 800e538:	4682      	mov	sl, r0
 800e53a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e53e:	2e00      	cmp	r6, #0
 800e540:	d158      	bne.n	800e5f4 <_dtoa_r+0x4e4>
 800e542:	4b7e      	ldr	r3, [pc, #504]	; (800e73c <_dtoa_r+0x62c>)
 800e544:	2200      	movs	r2, #0
 800e546:	4640      	mov	r0, r8
 800e548:	4649      	mov	r1, r9
 800e54a:	f7f1 fead 	bl	80002a8 <__aeabi_dsub>
 800e54e:	4652      	mov	r2, sl
 800e550:	465b      	mov	r3, fp
 800e552:	4680      	mov	r8, r0
 800e554:	4689      	mov	r9, r1
 800e556:	f7f2 faef 	bl	8000b38 <__aeabi_dcmpgt>
 800e55a:	2800      	cmp	r0, #0
 800e55c:	f040 8295 	bne.w	800ea8a <_dtoa_r+0x97a>
 800e560:	4652      	mov	r2, sl
 800e562:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e566:	4640      	mov	r0, r8
 800e568:	4649      	mov	r1, r9
 800e56a:	f7f2 fac7 	bl	8000afc <__aeabi_dcmplt>
 800e56e:	2800      	cmp	r0, #0
 800e570:	f040 8289 	bne.w	800ea86 <_dtoa_r+0x976>
 800e574:	ec5b ab19 	vmov	sl, fp, d9
 800e578:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	f2c0 8148 	blt.w	800e810 <_dtoa_r+0x700>
 800e580:	9a00      	ldr	r2, [sp, #0]
 800e582:	2a0e      	cmp	r2, #14
 800e584:	f300 8144 	bgt.w	800e810 <_dtoa_r+0x700>
 800e588:	4b67      	ldr	r3, [pc, #412]	; (800e728 <_dtoa_r+0x618>)
 800e58a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e58e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e594:	2b00      	cmp	r3, #0
 800e596:	f280 80d5 	bge.w	800e744 <_dtoa_r+0x634>
 800e59a:	9b03      	ldr	r3, [sp, #12]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	f300 80d1 	bgt.w	800e744 <_dtoa_r+0x634>
 800e5a2:	f040 826f 	bne.w	800ea84 <_dtoa_r+0x974>
 800e5a6:	4b65      	ldr	r3, [pc, #404]	; (800e73c <_dtoa_r+0x62c>)
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	4640      	mov	r0, r8
 800e5ac:	4649      	mov	r1, r9
 800e5ae:	f7f2 f833 	bl	8000618 <__aeabi_dmul>
 800e5b2:	4652      	mov	r2, sl
 800e5b4:	465b      	mov	r3, fp
 800e5b6:	f7f2 fab5 	bl	8000b24 <__aeabi_dcmpge>
 800e5ba:	9e03      	ldr	r6, [sp, #12]
 800e5bc:	4637      	mov	r7, r6
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	f040 8245 	bne.w	800ea4e <_dtoa_r+0x93e>
 800e5c4:	9d01      	ldr	r5, [sp, #4]
 800e5c6:	2331      	movs	r3, #49	; 0x31
 800e5c8:	f805 3b01 	strb.w	r3, [r5], #1
 800e5cc:	9b00      	ldr	r3, [sp, #0]
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	9300      	str	r3, [sp, #0]
 800e5d2:	e240      	b.n	800ea56 <_dtoa_r+0x946>
 800e5d4:	07f2      	lsls	r2, r6, #31
 800e5d6:	d505      	bpl.n	800e5e4 <_dtoa_r+0x4d4>
 800e5d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5dc:	f7f2 f81c 	bl	8000618 <__aeabi_dmul>
 800e5e0:	3501      	adds	r5, #1
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	1076      	asrs	r6, r6, #1
 800e5e6:	3708      	adds	r7, #8
 800e5e8:	e777      	b.n	800e4da <_dtoa_r+0x3ca>
 800e5ea:	2502      	movs	r5, #2
 800e5ec:	e779      	b.n	800e4e2 <_dtoa_r+0x3d2>
 800e5ee:	9f00      	ldr	r7, [sp, #0]
 800e5f0:	9e03      	ldr	r6, [sp, #12]
 800e5f2:	e794      	b.n	800e51e <_dtoa_r+0x40e>
 800e5f4:	9901      	ldr	r1, [sp, #4]
 800e5f6:	4b4c      	ldr	r3, [pc, #304]	; (800e728 <_dtoa_r+0x618>)
 800e5f8:	4431      	add	r1, r6
 800e5fa:	910d      	str	r1, [sp, #52]	; 0x34
 800e5fc:	9908      	ldr	r1, [sp, #32]
 800e5fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e602:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e606:	2900      	cmp	r1, #0
 800e608:	d043      	beq.n	800e692 <_dtoa_r+0x582>
 800e60a:	494d      	ldr	r1, [pc, #308]	; (800e740 <_dtoa_r+0x630>)
 800e60c:	2000      	movs	r0, #0
 800e60e:	f7f2 f92d 	bl	800086c <__aeabi_ddiv>
 800e612:	4652      	mov	r2, sl
 800e614:	465b      	mov	r3, fp
 800e616:	f7f1 fe47 	bl	80002a8 <__aeabi_dsub>
 800e61a:	9d01      	ldr	r5, [sp, #4]
 800e61c:	4682      	mov	sl, r0
 800e61e:	468b      	mov	fp, r1
 800e620:	4649      	mov	r1, r9
 800e622:	4640      	mov	r0, r8
 800e624:	f7f2 faa8 	bl	8000b78 <__aeabi_d2iz>
 800e628:	4606      	mov	r6, r0
 800e62a:	f7f1 ff8b 	bl	8000544 <__aeabi_i2d>
 800e62e:	4602      	mov	r2, r0
 800e630:	460b      	mov	r3, r1
 800e632:	4640      	mov	r0, r8
 800e634:	4649      	mov	r1, r9
 800e636:	f7f1 fe37 	bl	80002a8 <__aeabi_dsub>
 800e63a:	3630      	adds	r6, #48	; 0x30
 800e63c:	f805 6b01 	strb.w	r6, [r5], #1
 800e640:	4652      	mov	r2, sl
 800e642:	465b      	mov	r3, fp
 800e644:	4680      	mov	r8, r0
 800e646:	4689      	mov	r9, r1
 800e648:	f7f2 fa58 	bl	8000afc <__aeabi_dcmplt>
 800e64c:	2800      	cmp	r0, #0
 800e64e:	d163      	bne.n	800e718 <_dtoa_r+0x608>
 800e650:	4642      	mov	r2, r8
 800e652:	464b      	mov	r3, r9
 800e654:	4936      	ldr	r1, [pc, #216]	; (800e730 <_dtoa_r+0x620>)
 800e656:	2000      	movs	r0, #0
 800e658:	f7f1 fe26 	bl	80002a8 <__aeabi_dsub>
 800e65c:	4652      	mov	r2, sl
 800e65e:	465b      	mov	r3, fp
 800e660:	f7f2 fa4c 	bl	8000afc <__aeabi_dcmplt>
 800e664:	2800      	cmp	r0, #0
 800e666:	f040 80b5 	bne.w	800e7d4 <_dtoa_r+0x6c4>
 800e66a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e66c:	429d      	cmp	r5, r3
 800e66e:	d081      	beq.n	800e574 <_dtoa_r+0x464>
 800e670:	4b30      	ldr	r3, [pc, #192]	; (800e734 <_dtoa_r+0x624>)
 800e672:	2200      	movs	r2, #0
 800e674:	4650      	mov	r0, sl
 800e676:	4659      	mov	r1, fp
 800e678:	f7f1 ffce 	bl	8000618 <__aeabi_dmul>
 800e67c:	4b2d      	ldr	r3, [pc, #180]	; (800e734 <_dtoa_r+0x624>)
 800e67e:	4682      	mov	sl, r0
 800e680:	468b      	mov	fp, r1
 800e682:	4640      	mov	r0, r8
 800e684:	4649      	mov	r1, r9
 800e686:	2200      	movs	r2, #0
 800e688:	f7f1 ffc6 	bl	8000618 <__aeabi_dmul>
 800e68c:	4680      	mov	r8, r0
 800e68e:	4689      	mov	r9, r1
 800e690:	e7c6      	b.n	800e620 <_dtoa_r+0x510>
 800e692:	4650      	mov	r0, sl
 800e694:	4659      	mov	r1, fp
 800e696:	f7f1 ffbf 	bl	8000618 <__aeabi_dmul>
 800e69a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e69c:	9d01      	ldr	r5, [sp, #4]
 800e69e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e6a0:	4682      	mov	sl, r0
 800e6a2:	468b      	mov	fp, r1
 800e6a4:	4649      	mov	r1, r9
 800e6a6:	4640      	mov	r0, r8
 800e6a8:	f7f2 fa66 	bl	8000b78 <__aeabi_d2iz>
 800e6ac:	4606      	mov	r6, r0
 800e6ae:	f7f1 ff49 	bl	8000544 <__aeabi_i2d>
 800e6b2:	3630      	adds	r6, #48	; 0x30
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	4640      	mov	r0, r8
 800e6ba:	4649      	mov	r1, r9
 800e6bc:	f7f1 fdf4 	bl	80002a8 <__aeabi_dsub>
 800e6c0:	f805 6b01 	strb.w	r6, [r5], #1
 800e6c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6c6:	429d      	cmp	r5, r3
 800e6c8:	4680      	mov	r8, r0
 800e6ca:	4689      	mov	r9, r1
 800e6cc:	f04f 0200 	mov.w	r2, #0
 800e6d0:	d124      	bne.n	800e71c <_dtoa_r+0x60c>
 800e6d2:	4b1b      	ldr	r3, [pc, #108]	; (800e740 <_dtoa_r+0x630>)
 800e6d4:	4650      	mov	r0, sl
 800e6d6:	4659      	mov	r1, fp
 800e6d8:	f7f1 fde8 	bl	80002ac <__adddf3>
 800e6dc:	4602      	mov	r2, r0
 800e6de:	460b      	mov	r3, r1
 800e6e0:	4640      	mov	r0, r8
 800e6e2:	4649      	mov	r1, r9
 800e6e4:	f7f2 fa28 	bl	8000b38 <__aeabi_dcmpgt>
 800e6e8:	2800      	cmp	r0, #0
 800e6ea:	d173      	bne.n	800e7d4 <_dtoa_r+0x6c4>
 800e6ec:	4652      	mov	r2, sl
 800e6ee:	465b      	mov	r3, fp
 800e6f0:	4913      	ldr	r1, [pc, #76]	; (800e740 <_dtoa_r+0x630>)
 800e6f2:	2000      	movs	r0, #0
 800e6f4:	f7f1 fdd8 	bl	80002a8 <__aeabi_dsub>
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	4640      	mov	r0, r8
 800e6fe:	4649      	mov	r1, r9
 800e700:	f7f2 f9fc 	bl	8000afc <__aeabi_dcmplt>
 800e704:	2800      	cmp	r0, #0
 800e706:	f43f af35 	beq.w	800e574 <_dtoa_r+0x464>
 800e70a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e70c:	1e6b      	subs	r3, r5, #1
 800e70e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e710:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e714:	2b30      	cmp	r3, #48	; 0x30
 800e716:	d0f8      	beq.n	800e70a <_dtoa_r+0x5fa>
 800e718:	9700      	str	r7, [sp, #0]
 800e71a:	e049      	b.n	800e7b0 <_dtoa_r+0x6a0>
 800e71c:	4b05      	ldr	r3, [pc, #20]	; (800e734 <_dtoa_r+0x624>)
 800e71e:	f7f1 ff7b 	bl	8000618 <__aeabi_dmul>
 800e722:	4680      	mov	r8, r0
 800e724:	4689      	mov	r9, r1
 800e726:	e7bd      	b.n	800e6a4 <_dtoa_r+0x594>
 800e728:	08010bc0 	.word	0x08010bc0
 800e72c:	08010b98 	.word	0x08010b98
 800e730:	3ff00000 	.word	0x3ff00000
 800e734:	40240000 	.word	0x40240000
 800e738:	401c0000 	.word	0x401c0000
 800e73c:	40140000 	.word	0x40140000
 800e740:	3fe00000 	.word	0x3fe00000
 800e744:	9d01      	ldr	r5, [sp, #4]
 800e746:	4656      	mov	r6, sl
 800e748:	465f      	mov	r7, fp
 800e74a:	4642      	mov	r2, r8
 800e74c:	464b      	mov	r3, r9
 800e74e:	4630      	mov	r0, r6
 800e750:	4639      	mov	r1, r7
 800e752:	f7f2 f88b 	bl	800086c <__aeabi_ddiv>
 800e756:	f7f2 fa0f 	bl	8000b78 <__aeabi_d2iz>
 800e75a:	4682      	mov	sl, r0
 800e75c:	f7f1 fef2 	bl	8000544 <__aeabi_i2d>
 800e760:	4642      	mov	r2, r8
 800e762:	464b      	mov	r3, r9
 800e764:	f7f1 ff58 	bl	8000618 <__aeabi_dmul>
 800e768:	4602      	mov	r2, r0
 800e76a:	460b      	mov	r3, r1
 800e76c:	4630      	mov	r0, r6
 800e76e:	4639      	mov	r1, r7
 800e770:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e774:	f7f1 fd98 	bl	80002a8 <__aeabi_dsub>
 800e778:	f805 6b01 	strb.w	r6, [r5], #1
 800e77c:	9e01      	ldr	r6, [sp, #4]
 800e77e:	9f03      	ldr	r7, [sp, #12]
 800e780:	1bae      	subs	r6, r5, r6
 800e782:	42b7      	cmp	r7, r6
 800e784:	4602      	mov	r2, r0
 800e786:	460b      	mov	r3, r1
 800e788:	d135      	bne.n	800e7f6 <_dtoa_r+0x6e6>
 800e78a:	f7f1 fd8f 	bl	80002ac <__adddf3>
 800e78e:	4642      	mov	r2, r8
 800e790:	464b      	mov	r3, r9
 800e792:	4606      	mov	r6, r0
 800e794:	460f      	mov	r7, r1
 800e796:	f7f2 f9cf 	bl	8000b38 <__aeabi_dcmpgt>
 800e79a:	b9d0      	cbnz	r0, 800e7d2 <_dtoa_r+0x6c2>
 800e79c:	4642      	mov	r2, r8
 800e79e:	464b      	mov	r3, r9
 800e7a0:	4630      	mov	r0, r6
 800e7a2:	4639      	mov	r1, r7
 800e7a4:	f7f2 f9a0 	bl	8000ae8 <__aeabi_dcmpeq>
 800e7a8:	b110      	cbz	r0, 800e7b0 <_dtoa_r+0x6a0>
 800e7aa:	f01a 0f01 	tst.w	sl, #1
 800e7ae:	d110      	bne.n	800e7d2 <_dtoa_r+0x6c2>
 800e7b0:	4620      	mov	r0, r4
 800e7b2:	ee18 1a10 	vmov	r1, s16
 800e7b6:	f000 fbe3 	bl	800ef80 <_Bfree>
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	9800      	ldr	r0, [sp, #0]
 800e7be:	702b      	strb	r3, [r5, #0]
 800e7c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e7c2:	3001      	adds	r0, #1
 800e7c4:	6018      	str	r0, [r3, #0]
 800e7c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	f43f acf1 	beq.w	800e1b0 <_dtoa_r+0xa0>
 800e7ce:	601d      	str	r5, [r3, #0]
 800e7d0:	e4ee      	b.n	800e1b0 <_dtoa_r+0xa0>
 800e7d2:	9f00      	ldr	r7, [sp, #0]
 800e7d4:	462b      	mov	r3, r5
 800e7d6:	461d      	mov	r5, r3
 800e7d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e7dc:	2a39      	cmp	r2, #57	; 0x39
 800e7de:	d106      	bne.n	800e7ee <_dtoa_r+0x6de>
 800e7e0:	9a01      	ldr	r2, [sp, #4]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d1f7      	bne.n	800e7d6 <_dtoa_r+0x6c6>
 800e7e6:	9901      	ldr	r1, [sp, #4]
 800e7e8:	2230      	movs	r2, #48	; 0x30
 800e7ea:	3701      	adds	r7, #1
 800e7ec:	700a      	strb	r2, [r1, #0]
 800e7ee:	781a      	ldrb	r2, [r3, #0]
 800e7f0:	3201      	adds	r2, #1
 800e7f2:	701a      	strb	r2, [r3, #0]
 800e7f4:	e790      	b.n	800e718 <_dtoa_r+0x608>
 800e7f6:	4ba6      	ldr	r3, [pc, #664]	; (800ea90 <_dtoa_r+0x980>)
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	f7f1 ff0d 	bl	8000618 <__aeabi_dmul>
 800e7fe:	2200      	movs	r2, #0
 800e800:	2300      	movs	r3, #0
 800e802:	4606      	mov	r6, r0
 800e804:	460f      	mov	r7, r1
 800e806:	f7f2 f96f 	bl	8000ae8 <__aeabi_dcmpeq>
 800e80a:	2800      	cmp	r0, #0
 800e80c:	d09d      	beq.n	800e74a <_dtoa_r+0x63a>
 800e80e:	e7cf      	b.n	800e7b0 <_dtoa_r+0x6a0>
 800e810:	9a08      	ldr	r2, [sp, #32]
 800e812:	2a00      	cmp	r2, #0
 800e814:	f000 80d7 	beq.w	800e9c6 <_dtoa_r+0x8b6>
 800e818:	9a06      	ldr	r2, [sp, #24]
 800e81a:	2a01      	cmp	r2, #1
 800e81c:	f300 80ba 	bgt.w	800e994 <_dtoa_r+0x884>
 800e820:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e822:	2a00      	cmp	r2, #0
 800e824:	f000 80b2 	beq.w	800e98c <_dtoa_r+0x87c>
 800e828:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e82c:	9e07      	ldr	r6, [sp, #28]
 800e82e:	9d04      	ldr	r5, [sp, #16]
 800e830:	9a04      	ldr	r2, [sp, #16]
 800e832:	441a      	add	r2, r3
 800e834:	9204      	str	r2, [sp, #16]
 800e836:	9a05      	ldr	r2, [sp, #20]
 800e838:	2101      	movs	r1, #1
 800e83a:	441a      	add	r2, r3
 800e83c:	4620      	mov	r0, r4
 800e83e:	9205      	str	r2, [sp, #20]
 800e840:	f000 fc56 	bl	800f0f0 <__i2b>
 800e844:	4607      	mov	r7, r0
 800e846:	2d00      	cmp	r5, #0
 800e848:	dd0c      	ble.n	800e864 <_dtoa_r+0x754>
 800e84a:	9b05      	ldr	r3, [sp, #20]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	dd09      	ble.n	800e864 <_dtoa_r+0x754>
 800e850:	42ab      	cmp	r3, r5
 800e852:	9a04      	ldr	r2, [sp, #16]
 800e854:	bfa8      	it	ge
 800e856:	462b      	movge	r3, r5
 800e858:	1ad2      	subs	r2, r2, r3
 800e85a:	9204      	str	r2, [sp, #16]
 800e85c:	9a05      	ldr	r2, [sp, #20]
 800e85e:	1aed      	subs	r5, r5, r3
 800e860:	1ad3      	subs	r3, r2, r3
 800e862:	9305      	str	r3, [sp, #20]
 800e864:	9b07      	ldr	r3, [sp, #28]
 800e866:	b31b      	cbz	r3, 800e8b0 <_dtoa_r+0x7a0>
 800e868:	9b08      	ldr	r3, [sp, #32]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f000 80af 	beq.w	800e9ce <_dtoa_r+0x8be>
 800e870:	2e00      	cmp	r6, #0
 800e872:	dd13      	ble.n	800e89c <_dtoa_r+0x78c>
 800e874:	4639      	mov	r1, r7
 800e876:	4632      	mov	r2, r6
 800e878:	4620      	mov	r0, r4
 800e87a:	f000 fcf9 	bl	800f270 <__pow5mult>
 800e87e:	ee18 2a10 	vmov	r2, s16
 800e882:	4601      	mov	r1, r0
 800e884:	4607      	mov	r7, r0
 800e886:	4620      	mov	r0, r4
 800e888:	f000 fc48 	bl	800f11c <__multiply>
 800e88c:	ee18 1a10 	vmov	r1, s16
 800e890:	4680      	mov	r8, r0
 800e892:	4620      	mov	r0, r4
 800e894:	f000 fb74 	bl	800ef80 <_Bfree>
 800e898:	ee08 8a10 	vmov	s16, r8
 800e89c:	9b07      	ldr	r3, [sp, #28]
 800e89e:	1b9a      	subs	r2, r3, r6
 800e8a0:	d006      	beq.n	800e8b0 <_dtoa_r+0x7a0>
 800e8a2:	ee18 1a10 	vmov	r1, s16
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	f000 fce2 	bl	800f270 <__pow5mult>
 800e8ac:	ee08 0a10 	vmov	s16, r0
 800e8b0:	2101      	movs	r1, #1
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	f000 fc1c 	bl	800f0f0 <__i2b>
 800e8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	4606      	mov	r6, r0
 800e8be:	f340 8088 	ble.w	800e9d2 <_dtoa_r+0x8c2>
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	4601      	mov	r1, r0
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	f000 fcd2 	bl	800f270 <__pow5mult>
 800e8cc:	9b06      	ldr	r3, [sp, #24]
 800e8ce:	2b01      	cmp	r3, #1
 800e8d0:	4606      	mov	r6, r0
 800e8d2:	f340 8081 	ble.w	800e9d8 <_dtoa_r+0x8c8>
 800e8d6:	f04f 0800 	mov.w	r8, #0
 800e8da:	6933      	ldr	r3, [r6, #16]
 800e8dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e8e0:	6918      	ldr	r0, [r3, #16]
 800e8e2:	f000 fbb5 	bl	800f050 <__hi0bits>
 800e8e6:	f1c0 0020 	rsb	r0, r0, #32
 800e8ea:	9b05      	ldr	r3, [sp, #20]
 800e8ec:	4418      	add	r0, r3
 800e8ee:	f010 001f 	ands.w	r0, r0, #31
 800e8f2:	f000 8092 	beq.w	800ea1a <_dtoa_r+0x90a>
 800e8f6:	f1c0 0320 	rsb	r3, r0, #32
 800e8fa:	2b04      	cmp	r3, #4
 800e8fc:	f340 808a 	ble.w	800ea14 <_dtoa_r+0x904>
 800e900:	f1c0 001c 	rsb	r0, r0, #28
 800e904:	9b04      	ldr	r3, [sp, #16]
 800e906:	4403      	add	r3, r0
 800e908:	9304      	str	r3, [sp, #16]
 800e90a:	9b05      	ldr	r3, [sp, #20]
 800e90c:	4403      	add	r3, r0
 800e90e:	4405      	add	r5, r0
 800e910:	9305      	str	r3, [sp, #20]
 800e912:	9b04      	ldr	r3, [sp, #16]
 800e914:	2b00      	cmp	r3, #0
 800e916:	dd07      	ble.n	800e928 <_dtoa_r+0x818>
 800e918:	ee18 1a10 	vmov	r1, s16
 800e91c:	461a      	mov	r2, r3
 800e91e:	4620      	mov	r0, r4
 800e920:	f000 fd00 	bl	800f324 <__lshift>
 800e924:	ee08 0a10 	vmov	s16, r0
 800e928:	9b05      	ldr	r3, [sp, #20]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	dd05      	ble.n	800e93a <_dtoa_r+0x82a>
 800e92e:	4631      	mov	r1, r6
 800e930:	461a      	mov	r2, r3
 800e932:	4620      	mov	r0, r4
 800e934:	f000 fcf6 	bl	800f324 <__lshift>
 800e938:	4606      	mov	r6, r0
 800e93a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d06e      	beq.n	800ea1e <_dtoa_r+0x90e>
 800e940:	ee18 0a10 	vmov	r0, s16
 800e944:	4631      	mov	r1, r6
 800e946:	f000 fd5d 	bl	800f404 <__mcmp>
 800e94a:	2800      	cmp	r0, #0
 800e94c:	da67      	bge.n	800ea1e <_dtoa_r+0x90e>
 800e94e:	9b00      	ldr	r3, [sp, #0]
 800e950:	3b01      	subs	r3, #1
 800e952:	ee18 1a10 	vmov	r1, s16
 800e956:	9300      	str	r3, [sp, #0]
 800e958:	220a      	movs	r2, #10
 800e95a:	2300      	movs	r3, #0
 800e95c:	4620      	mov	r0, r4
 800e95e:	f000 fb31 	bl	800efc4 <__multadd>
 800e962:	9b08      	ldr	r3, [sp, #32]
 800e964:	ee08 0a10 	vmov	s16, r0
 800e968:	2b00      	cmp	r3, #0
 800e96a:	f000 81b1 	beq.w	800ecd0 <_dtoa_r+0xbc0>
 800e96e:	2300      	movs	r3, #0
 800e970:	4639      	mov	r1, r7
 800e972:	220a      	movs	r2, #10
 800e974:	4620      	mov	r0, r4
 800e976:	f000 fb25 	bl	800efc4 <__multadd>
 800e97a:	9b02      	ldr	r3, [sp, #8]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	4607      	mov	r7, r0
 800e980:	f300 808e 	bgt.w	800eaa0 <_dtoa_r+0x990>
 800e984:	9b06      	ldr	r3, [sp, #24]
 800e986:	2b02      	cmp	r3, #2
 800e988:	dc51      	bgt.n	800ea2e <_dtoa_r+0x91e>
 800e98a:	e089      	b.n	800eaa0 <_dtoa_r+0x990>
 800e98c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e98e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e992:	e74b      	b.n	800e82c <_dtoa_r+0x71c>
 800e994:	9b03      	ldr	r3, [sp, #12]
 800e996:	1e5e      	subs	r6, r3, #1
 800e998:	9b07      	ldr	r3, [sp, #28]
 800e99a:	42b3      	cmp	r3, r6
 800e99c:	bfbf      	itttt	lt
 800e99e:	9b07      	ldrlt	r3, [sp, #28]
 800e9a0:	9607      	strlt	r6, [sp, #28]
 800e9a2:	1af2      	sublt	r2, r6, r3
 800e9a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e9a6:	bfb6      	itet	lt
 800e9a8:	189b      	addlt	r3, r3, r2
 800e9aa:	1b9e      	subge	r6, r3, r6
 800e9ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e9ae:	9b03      	ldr	r3, [sp, #12]
 800e9b0:	bfb8      	it	lt
 800e9b2:	2600      	movlt	r6, #0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	bfb7      	itett	lt
 800e9b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e9bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e9c0:	1a9d      	sublt	r5, r3, r2
 800e9c2:	2300      	movlt	r3, #0
 800e9c4:	e734      	b.n	800e830 <_dtoa_r+0x720>
 800e9c6:	9e07      	ldr	r6, [sp, #28]
 800e9c8:	9d04      	ldr	r5, [sp, #16]
 800e9ca:	9f08      	ldr	r7, [sp, #32]
 800e9cc:	e73b      	b.n	800e846 <_dtoa_r+0x736>
 800e9ce:	9a07      	ldr	r2, [sp, #28]
 800e9d0:	e767      	b.n	800e8a2 <_dtoa_r+0x792>
 800e9d2:	9b06      	ldr	r3, [sp, #24]
 800e9d4:	2b01      	cmp	r3, #1
 800e9d6:	dc18      	bgt.n	800ea0a <_dtoa_r+0x8fa>
 800e9d8:	f1ba 0f00 	cmp.w	sl, #0
 800e9dc:	d115      	bne.n	800ea0a <_dtoa_r+0x8fa>
 800e9de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e9e2:	b993      	cbnz	r3, 800ea0a <_dtoa_r+0x8fa>
 800e9e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e9e8:	0d1b      	lsrs	r3, r3, #20
 800e9ea:	051b      	lsls	r3, r3, #20
 800e9ec:	b183      	cbz	r3, 800ea10 <_dtoa_r+0x900>
 800e9ee:	9b04      	ldr	r3, [sp, #16]
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	9304      	str	r3, [sp, #16]
 800e9f4:	9b05      	ldr	r3, [sp, #20]
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	9305      	str	r3, [sp, #20]
 800e9fa:	f04f 0801 	mov.w	r8, #1
 800e9fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f47f af6a 	bne.w	800e8da <_dtoa_r+0x7ca>
 800ea06:	2001      	movs	r0, #1
 800ea08:	e76f      	b.n	800e8ea <_dtoa_r+0x7da>
 800ea0a:	f04f 0800 	mov.w	r8, #0
 800ea0e:	e7f6      	b.n	800e9fe <_dtoa_r+0x8ee>
 800ea10:	4698      	mov	r8, r3
 800ea12:	e7f4      	b.n	800e9fe <_dtoa_r+0x8ee>
 800ea14:	f43f af7d 	beq.w	800e912 <_dtoa_r+0x802>
 800ea18:	4618      	mov	r0, r3
 800ea1a:	301c      	adds	r0, #28
 800ea1c:	e772      	b.n	800e904 <_dtoa_r+0x7f4>
 800ea1e:	9b03      	ldr	r3, [sp, #12]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	dc37      	bgt.n	800ea94 <_dtoa_r+0x984>
 800ea24:	9b06      	ldr	r3, [sp, #24]
 800ea26:	2b02      	cmp	r3, #2
 800ea28:	dd34      	ble.n	800ea94 <_dtoa_r+0x984>
 800ea2a:	9b03      	ldr	r3, [sp, #12]
 800ea2c:	9302      	str	r3, [sp, #8]
 800ea2e:	9b02      	ldr	r3, [sp, #8]
 800ea30:	b96b      	cbnz	r3, 800ea4e <_dtoa_r+0x93e>
 800ea32:	4631      	mov	r1, r6
 800ea34:	2205      	movs	r2, #5
 800ea36:	4620      	mov	r0, r4
 800ea38:	f000 fac4 	bl	800efc4 <__multadd>
 800ea3c:	4601      	mov	r1, r0
 800ea3e:	4606      	mov	r6, r0
 800ea40:	ee18 0a10 	vmov	r0, s16
 800ea44:	f000 fcde 	bl	800f404 <__mcmp>
 800ea48:	2800      	cmp	r0, #0
 800ea4a:	f73f adbb 	bgt.w	800e5c4 <_dtoa_r+0x4b4>
 800ea4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea50:	9d01      	ldr	r5, [sp, #4]
 800ea52:	43db      	mvns	r3, r3
 800ea54:	9300      	str	r3, [sp, #0]
 800ea56:	f04f 0800 	mov.w	r8, #0
 800ea5a:	4631      	mov	r1, r6
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	f000 fa8f 	bl	800ef80 <_Bfree>
 800ea62:	2f00      	cmp	r7, #0
 800ea64:	f43f aea4 	beq.w	800e7b0 <_dtoa_r+0x6a0>
 800ea68:	f1b8 0f00 	cmp.w	r8, #0
 800ea6c:	d005      	beq.n	800ea7a <_dtoa_r+0x96a>
 800ea6e:	45b8      	cmp	r8, r7
 800ea70:	d003      	beq.n	800ea7a <_dtoa_r+0x96a>
 800ea72:	4641      	mov	r1, r8
 800ea74:	4620      	mov	r0, r4
 800ea76:	f000 fa83 	bl	800ef80 <_Bfree>
 800ea7a:	4639      	mov	r1, r7
 800ea7c:	4620      	mov	r0, r4
 800ea7e:	f000 fa7f 	bl	800ef80 <_Bfree>
 800ea82:	e695      	b.n	800e7b0 <_dtoa_r+0x6a0>
 800ea84:	2600      	movs	r6, #0
 800ea86:	4637      	mov	r7, r6
 800ea88:	e7e1      	b.n	800ea4e <_dtoa_r+0x93e>
 800ea8a:	9700      	str	r7, [sp, #0]
 800ea8c:	4637      	mov	r7, r6
 800ea8e:	e599      	b.n	800e5c4 <_dtoa_r+0x4b4>
 800ea90:	40240000 	.word	0x40240000
 800ea94:	9b08      	ldr	r3, [sp, #32]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	f000 80ca 	beq.w	800ec30 <_dtoa_r+0xb20>
 800ea9c:	9b03      	ldr	r3, [sp, #12]
 800ea9e:	9302      	str	r3, [sp, #8]
 800eaa0:	2d00      	cmp	r5, #0
 800eaa2:	dd05      	ble.n	800eab0 <_dtoa_r+0x9a0>
 800eaa4:	4639      	mov	r1, r7
 800eaa6:	462a      	mov	r2, r5
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	f000 fc3b 	bl	800f324 <__lshift>
 800eaae:	4607      	mov	r7, r0
 800eab0:	f1b8 0f00 	cmp.w	r8, #0
 800eab4:	d05b      	beq.n	800eb6e <_dtoa_r+0xa5e>
 800eab6:	6879      	ldr	r1, [r7, #4]
 800eab8:	4620      	mov	r0, r4
 800eaba:	f000 fa21 	bl	800ef00 <_Balloc>
 800eabe:	4605      	mov	r5, r0
 800eac0:	b928      	cbnz	r0, 800eace <_dtoa_r+0x9be>
 800eac2:	4b87      	ldr	r3, [pc, #540]	; (800ece0 <_dtoa_r+0xbd0>)
 800eac4:	4602      	mov	r2, r0
 800eac6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eaca:	f7ff bb3b 	b.w	800e144 <_dtoa_r+0x34>
 800eace:	693a      	ldr	r2, [r7, #16]
 800ead0:	3202      	adds	r2, #2
 800ead2:	0092      	lsls	r2, r2, #2
 800ead4:	f107 010c 	add.w	r1, r7, #12
 800ead8:	300c      	adds	r0, #12
 800eada:	f7fe fcc3 	bl	800d464 <memcpy>
 800eade:	2201      	movs	r2, #1
 800eae0:	4629      	mov	r1, r5
 800eae2:	4620      	mov	r0, r4
 800eae4:	f000 fc1e 	bl	800f324 <__lshift>
 800eae8:	9b01      	ldr	r3, [sp, #4]
 800eaea:	f103 0901 	add.w	r9, r3, #1
 800eaee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800eaf2:	4413      	add	r3, r2
 800eaf4:	9305      	str	r3, [sp, #20]
 800eaf6:	f00a 0301 	and.w	r3, sl, #1
 800eafa:	46b8      	mov	r8, r7
 800eafc:	9304      	str	r3, [sp, #16]
 800eafe:	4607      	mov	r7, r0
 800eb00:	4631      	mov	r1, r6
 800eb02:	ee18 0a10 	vmov	r0, s16
 800eb06:	f7ff fa77 	bl	800dff8 <quorem>
 800eb0a:	4641      	mov	r1, r8
 800eb0c:	9002      	str	r0, [sp, #8]
 800eb0e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800eb12:	ee18 0a10 	vmov	r0, s16
 800eb16:	f000 fc75 	bl	800f404 <__mcmp>
 800eb1a:	463a      	mov	r2, r7
 800eb1c:	9003      	str	r0, [sp, #12]
 800eb1e:	4631      	mov	r1, r6
 800eb20:	4620      	mov	r0, r4
 800eb22:	f000 fc8b 	bl	800f43c <__mdiff>
 800eb26:	68c2      	ldr	r2, [r0, #12]
 800eb28:	f109 3bff 	add.w	fp, r9, #4294967295
 800eb2c:	4605      	mov	r5, r0
 800eb2e:	bb02      	cbnz	r2, 800eb72 <_dtoa_r+0xa62>
 800eb30:	4601      	mov	r1, r0
 800eb32:	ee18 0a10 	vmov	r0, s16
 800eb36:	f000 fc65 	bl	800f404 <__mcmp>
 800eb3a:	4602      	mov	r2, r0
 800eb3c:	4629      	mov	r1, r5
 800eb3e:	4620      	mov	r0, r4
 800eb40:	9207      	str	r2, [sp, #28]
 800eb42:	f000 fa1d 	bl	800ef80 <_Bfree>
 800eb46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800eb4a:	ea43 0102 	orr.w	r1, r3, r2
 800eb4e:	9b04      	ldr	r3, [sp, #16]
 800eb50:	430b      	orrs	r3, r1
 800eb52:	464d      	mov	r5, r9
 800eb54:	d10f      	bne.n	800eb76 <_dtoa_r+0xa66>
 800eb56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800eb5a:	d02a      	beq.n	800ebb2 <_dtoa_r+0xaa2>
 800eb5c:	9b03      	ldr	r3, [sp, #12]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	dd02      	ble.n	800eb68 <_dtoa_r+0xa58>
 800eb62:	9b02      	ldr	r3, [sp, #8]
 800eb64:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800eb68:	f88b a000 	strb.w	sl, [fp]
 800eb6c:	e775      	b.n	800ea5a <_dtoa_r+0x94a>
 800eb6e:	4638      	mov	r0, r7
 800eb70:	e7ba      	b.n	800eae8 <_dtoa_r+0x9d8>
 800eb72:	2201      	movs	r2, #1
 800eb74:	e7e2      	b.n	800eb3c <_dtoa_r+0xa2c>
 800eb76:	9b03      	ldr	r3, [sp, #12]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	db04      	blt.n	800eb86 <_dtoa_r+0xa76>
 800eb7c:	9906      	ldr	r1, [sp, #24]
 800eb7e:	430b      	orrs	r3, r1
 800eb80:	9904      	ldr	r1, [sp, #16]
 800eb82:	430b      	orrs	r3, r1
 800eb84:	d122      	bne.n	800ebcc <_dtoa_r+0xabc>
 800eb86:	2a00      	cmp	r2, #0
 800eb88:	ddee      	ble.n	800eb68 <_dtoa_r+0xa58>
 800eb8a:	ee18 1a10 	vmov	r1, s16
 800eb8e:	2201      	movs	r2, #1
 800eb90:	4620      	mov	r0, r4
 800eb92:	f000 fbc7 	bl	800f324 <__lshift>
 800eb96:	4631      	mov	r1, r6
 800eb98:	ee08 0a10 	vmov	s16, r0
 800eb9c:	f000 fc32 	bl	800f404 <__mcmp>
 800eba0:	2800      	cmp	r0, #0
 800eba2:	dc03      	bgt.n	800ebac <_dtoa_r+0xa9c>
 800eba4:	d1e0      	bne.n	800eb68 <_dtoa_r+0xa58>
 800eba6:	f01a 0f01 	tst.w	sl, #1
 800ebaa:	d0dd      	beq.n	800eb68 <_dtoa_r+0xa58>
 800ebac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ebb0:	d1d7      	bne.n	800eb62 <_dtoa_r+0xa52>
 800ebb2:	2339      	movs	r3, #57	; 0x39
 800ebb4:	f88b 3000 	strb.w	r3, [fp]
 800ebb8:	462b      	mov	r3, r5
 800ebba:	461d      	mov	r5, r3
 800ebbc:	3b01      	subs	r3, #1
 800ebbe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ebc2:	2a39      	cmp	r2, #57	; 0x39
 800ebc4:	d071      	beq.n	800ecaa <_dtoa_r+0xb9a>
 800ebc6:	3201      	adds	r2, #1
 800ebc8:	701a      	strb	r2, [r3, #0]
 800ebca:	e746      	b.n	800ea5a <_dtoa_r+0x94a>
 800ebcc:	2a00      	cmp	r2, #0
 800ebce:	dd07      	ble.n	800ebe0 <_dtoa_r+0xad0>
 800ebd0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ebd4:	d0ed      	beq.n	800ebb2 <_dtoa_r+0xaa2>
 800ebd6:	f10a 0301 	add.w	r3, sl, #1
 800ebda:	f88b 3000 	strb.w	r3, [fp]
 800ebde:	e73c      	b.n	800ea5a <_dtoa_r+0x94a>
 800ebe0:	9b05      	ldr	r3, [sp, #20]
 800ebe2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ebe6:	4599      	cmp	r9, r3
 800ebe8:	d047      	beq.n	800ec7a <_dtoa_r+0xb6a>
 800ebea:	ee18 1a10 	vmov	r1, s16
 800ebee:	2300      	movs	r3, #0
 800ebf0:	220a      	movs	r2, #10
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	f000 f9e6 	bl	800efc4 <__multadd>
 800ebf8:	45b8      	cmp	r8, r7
 800ebfa:	ee08 0a10 	vmov	s16, r0
 800ebfe:	f04f 0300 	mov.w	r3, #0
 800ec02:	f04f 020a 	mov.w	r2, #10
 800ec06:	4641      	mov	r1, r8
 800ec08:	4620      	mov	r0, r4
 800ec0a:	d106      	bne.n	800ec1a <_dtoa_r+0xb0a>
 800ec0c:	f000 f9da 	bl	800efc4 <__multadd>
 800ec10:	4680      	mov	r8, r0
 800ec12:	4607      	mov	r7, r0
 800ec14:	f109 0901 	add.w	r9, r9, #1
 800ec18:	e772      	b.n	800eb00 <_dtoa_r+0x9f0>
 800ec1a:	f000 f9d3 	bl	800efc4 <__multadd>
 800ec1e:	4639      	mov	r1, r7
 800ec20:	4680      	mov	r8, r0
 800ec22:	2300      	movs	r3, #0
 800ec24:	220a      	movs	r2, #10
 800ec26:	4620      	mov	r0, r4
 800ec28:	f000 f9cc 	bl	800efc4 <__multadd>
 800ec2c:	4607      	mov	r7, r0
 800ec2e:	e7f1      	b.n	800ec14 <_dtoa_r+0xb04>
 800ec30:	9b03      	ldr	r3, [sp, #12]
 800ec32:	9302      	str	r3, [sp, #8]
 800ec34:	9d01      	ldr	r5, [sp, #4]
 800ec36:	ee18 0a10 	vmov	r0, s16
 800ec3a:	4631      	mov	r1, r6
 800ec3c:	f7ff f9dc 	bl	800dff8 <quorem>
 800ec40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ec44:	9b01      	ldr	r3, [sp, #4]
 800ec46:	f805 ab01 	strb.w	sl, [r5], #1
 800ec4a:	1aea      	subs	r2, r5, r3
 800ec4c:	9b02      	ldr	r3, [sp, #8]
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	dd09      	ble.n	800ec66 <_dtoa_r+0xb56>
 800ec52:	ee18 1a10 	vmov	r1, s16
 800ec56:	2300      	movs	r3, #0
 800ec58:	220a      	movs	r2, #10
 800ec5a:	4620      	mov	r0, r4
 800ec5c:	f000 f9b2 	bl	800efc4 <__multadd>
 800ec60:	ee08 0a10 	vmov	s16, r0
 800ec64:	e7e7      	b.n	800ec36 <_dtoa_r+0xb26>
 800ec66:	9b02      	ldr	r3, [sp, #8]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	bfc8      	it	gt
 800ec6c:	461d      	movgt	r5, r3
 800ec6e:	9b01      	ldr	r3, [sp, #4]
 800ec70:	bfd8      	it	le
 800ec72:	2501      	movle	r5, #1
 800ec74:	441d      	add	r5, r3
 800ec76:	f04f 0800 	mov.w	r8, #0
 800ec7a:	ee18 1a10 	vmov	r1, s16
 800ec7e:	2201      	movs	r2, #1
 800ec80:	4620      	mov	r0, r4
 800ec82:	f000 fb4f 	bl	800f324 <__lshift>
 800ec86:	4631      	mov	r1, r6
 800ec88:	ee08 0a10 	vmov	s16, r0
 800ec8c:	f000 fbba 	bl	800f404 <__mcmp>
 800ec90:	2800      	cmp	r0, #0
 800ec92:	dc91      	bgt.n	800ebb8 <_dtoa_r+0xaa8>
 800ec94:	d102      	bne.n	800ec9c <_dtoa_r+0xb8c>
 800ec96:	f01a 0f01 	tst.w	sl, #1
 800ec9a:	d18d      	bne.n	800ebb8 <_dtoa_r+0xaa8>
 800ec9c:	462b      	mov	r3, r5
 800ec9e:	461d      	mov	r5, r3
 800eca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eca4:	2a30      	cmp	r2, #48	; 0x30
 800eca6:	d0fa      	beq.n	800ec9e <_dtoa_r+0xb8e>
 800eca8:	e6d7      	b.n	800ea5a <_dtoa_r+0x94a>
 800ecaa:	9a01      	ldr	r2, [sp, #4]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d184      	bne.n	800ebba <_dtoa_r+0xaaa>
 800ecb0:	9b00      	ldr	r3, [sp, #0]
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	9300      	str	r3, [sp, #0]
 800ecb6:	2331      	movs	r3, #49	; 0x31
 800ecb8:	7013      	strb	r3, [r2, #0]
 800ecba:	e6ce      	b.n	800ea5a <_dtoa_r+0x94a>
 800ecbc:	4b09      	ldr	r3, [pc, #36]	; (800ece4 <_dtoa_r+0xbd4>)
 800ecbe:	f7ff ba95 	b.w	800e1ec <_dtoa_r+0xdc>
 800ecc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	f47f aa6e 	bne.w	800e1a6 <_dtoa_r+0x96>
 800ecca:	4b07      	ldr	r3, [pc, #28]	; (800ece8 <_dtoa_r+0xbd8>)
 800eccc:	f7ff ba8e 	b.w	800e1ec <_dtoa_r+0xdc>
 800ecd0:	9b02      	ldr	r3, [sp, #8]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	dcae      	bgt.n	800ec34 <_dtoa_r+0xb24>
 800ecd6:	9b06      	ldr	r3, [sp, #24]
 800ecd8:	2b02      	cmp	r3, #2
 800ecda:	f73f aea8 	bgt.w	800ea2e <_dtoa_r+0x91e>
 800ecde:	e7a9      	b.n	800ec34 <_dtoa_r+0xb24>
 800ece0:	08010ac7 	.word	0x08010ac7
 800ece4:	08010a24 	.word	0x08010a24
 800ece8:	08010a48 	.word	0x08010a48

0800ecec <std>:
 800ecec:	2300      	movs	r3, #0
 800ecee:	b510      	push	{r4, lr}
 800ecf0:	4604      	mov	r4, r0
 800ecf2:	e9c0 3300 	strd	r3, r3, [r0]
 800ecf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ecfa:	6083      	str	r3, [r0, #8]
 800ecfc:	8181      	strh	r1, [r0, #12]
 800ecfe:	6643      	str	r3, [r0, #100]	; 0x64
 800ed00:	81c2      	strh	r2, [r0, #14]
 800ed02:	6183      	str	r3, [r0, #24]
 800ed04:	4619      	mov	r1, r3
 800ed06:	2208      	movs	r2, #8
 800ed08:	305c      	adds	r0, #92	; 0x5c
 800ed0a:	f7fe fbb9 	bl	800d480 <memset>
 800ed0e:	4b05      	ldr	r3, [pc, #20]	; (800ed24 <std+0x38>)
 800ed10:	6263      	str	r3, [r4, #36]	; 0x24
 800ed12:	4b05      	ldr	r3, [pc, #20]	; (800ed28 <std+0x3c>)
 800ed14:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed16:	4b05      	ldr	r3, [pc, #20]	; (800ed2c <std+0x40>)
 800ed18:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed1a:	4b05      	ldr	r3, [pc, #20]	; (800ed30 <std+0x44>)
 800ed1c:	6224      	str	r4, [r4, #32]
 800ed1e:	6323      	str	r3, [r4, #48]	; 0x30
 800ed20:	bd10      	pop	{r4, pc}
 800ed22:	bf00      	nop
 800ed24:	0800fba1 	.word	0x0800fba1
 800ed28:	0800fbc3 	.word	0x0800fbc3
 800ed2c:	0800fbfb 	.word	0x0800fbfb
 800ed30:	0800fc1f 	.word	0x0800fc1f

0800ed34 <_cleanup_r>:
 800ed34:	4901      	ldr	r1, [pc, #4]	; (800ed3c <_cleanup_r+0x8>)
 800ed36:	f000 b8af 	b.w	800ee98 <_fwalk_reent>
 800ed3a:	bf00      	nop
 800ed3c:	0800ff35 	.word	0x0800ff35

0800ed40 <__sfmoreglue>:
 800ed40:	b570      	push	{r4, r5, r6, lr}
 800ed42:	2268      	movs	r2, #104	; 0x68
 800ed44:	1e4d      	subs	r5, r1, #1
 800ed46:	4355      	muls	r5, r2
 800ed48:	460e      	mov	r6, r1
 800ed4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed4e:	f7fe fc0b 	bl	800d568 <_malloc_r>
 800ed52:	4604      	mov	r4, r0
 800ed54:	b140      	cbz	r0, 800ed68 <__sfmoreglue+0x28>
 800ed56:	2100      	movs	r1, #0
 800ed58:	e9c0 1600 	strd	r1, r6, [r0]
 800ed5c:	300c      	adds	r0, #12
 800ed5e:	60a0      	str	r0, [r4, #8]
 800ed60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed64:	f7fe fb8c 	bl	800d480 <memset>
 800ed68:	4620      	mov	r0, r4
 800ed6a:	bd70      	pop	{r4, r5, r6, pc}

0800ed6c <__sfp_lock_acquire>:
 800ed6c:	4801      	ldr	r0, [pc, #4]	; (800ed74 <__sfp_lock_acquire+0x8>)
 800ed6e:	f000 b8b8 	b.w	800eee2 <__retarget_lock_acquire_recursive>
 800ed72:	bf00      	nop
 800ed74:	200081fd 	.word	0x200081fd

0800ed78 <__sfp_lock_release>:
 800ed78:	4801      	ldr	r0, [pc, #4]	; (800ed80 <__sfp_lock_release+0x8>)
 800ed7a:	f000 b8b3 	b.w	800eee4 <__retarget_lock_release_recursive>
 800ed7e:	bf00      	nop
 800ed80:	200081fd 	.word	0x200081fd

0800ed84 <__sinit_lock_acquire>:
 800ed84:	4801      	ldr	r0, [pc, #4]	; (800ed8c <__sinit_lock_acquire+0x8>)
 800ed86:	f000 b8ac 	b.w	800eee2 <__retarget_lock_acquire_recursive>
 800ed8a:	bf00      	nop
 800ed8c:	200081fe 	.word	0x200081fe

0800ed90 <__sinit_lock_release>:
 800ed90:	4801      	ldr	r0, [pc, #4]	; (800ed98 <__sinit_lock_release+0x8>)
 800ed92:	f000 b8a7 	b.w	800eee4 <__retarget_lock_release_recursive>
 800ed96:	bf00      	nop
 800ed98:	200081fe 	.word	0x200081fe

0800ed9c <__sinit>:
 800ed9c:	b510      	push	{r4, lr}
 800ed9e:	4604      	mov	r4, r0
 800eda0:	f7ff fff0 	bl	800ed84 <__sinit_lock_acquire>
 800eda4:	69a3      	ldr	r3, [r4, #24]
 800eda6:	b11b      	cbz	r3, 800edb0 <__sinit+0x14>
 800eda8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edac:	f7ff bff0 	b.w	800ed90 <__sinit_lock_release>
 800edb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800edb4:	6523      	str	r3, [r4, #80]	; 0x50
 800edb6:	4b13      	ldr	r3, [pc, #76]	; (800ee04 <__sinit+0x68>)
 800edb8:	4a13      	ldr	r2, [pc, #76]	; (800ee08 <__sinit+0x6c>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	62a2      	str	r2, [r4, #40]	; 0x28
 800edbe:	42a3      	cmp	r3, r4
 800edc0:	bf04      	itt	eq
 800edc2:	2301      	moveq	r3, #1
 800edc4:	61a3      	streq	r3, [r4, #24]
 800edc6:	4620      	mov	r0, r4
 800edc8:	f000 f820 	bl	800ee0c <__sfp>
 800edcc:	6060      	str	r0, [r4, #4]
 800edce:	4620      	mov	r0, r4
 800edd0:	f000 f81c 	bl	800ee0c <__sfp>
 800edd4:	60a0      	str	r0, [r4, #8]
 800edd6:	4620      	mov	r0, r4
 800edd8:	f000 f818 	bl	800ee0c <__sfp>
 800eddc:	2200      	movs	r2, #0
 800edde:	60e0      	str	r0, [r4, #12]
 800ede0:	2104      	movs	r1, #4
 800ede2:	6860      	ldr	r0, [r4, #4]
 800ede4:	f7ff ff82 	bl	800ecec <std>
 800ede8:	68a0      	ldr	r0, [r4, #8]
 800edea:	2201      	movs	r2, #1
 800edec:	2109      	movs	r1, #9
 800edee:	f7ff ff7d 	bl	800ecec <std>
 800edf2:	68e0      	ldr	r0, [r4, #12]
 800edf4:	2202      	movs	r2, #2
 800edf6:	2112      	movs	r1, #18
 800edf8:	f7ff ff78 	bl	800ecec <std>
 800edfc:	2301      	movs	r3, #1
 800edfe:	61a3      	str	r3, [r4, #24]
 800ee00:	e7d2      	b.n	800eda8 <__sinit+0xc>
 800ee02:	bf00      	nop
 800ee04:	08010a10 	.word	0x08010a10
 800ee08:	0800ed35 	.word	0x0800ed35

0800ee0c <__sfp>:
 800ee0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee0e:	4607      	mov	r7, r0
 800ee10:	f7ff ffac 	bl	800ed6c <__sfp_lock_acquire>
 800ee14:	4b1e      	ldr	r3, [pc, #120]	; (800ee90 <__sfp+0x84>)
 800ee16:	681e      	ldr	r6, [r3, #0]
 800ee18:	69b3      	ldr	r3, [r6, #24]
 800ee1a:	b913      	cbnz	r3, 800ee22 <__sfp+0x16>
 800ee1c:	4630      	mov	r0, r6
 800ee1e:	f7ff ffbd 	bl	800ed9c <__sinit>
 800ee22:	3648      	adds	r6, #72	; 0x48
 800ee24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ee28:	3b01      	subs	r3, #1
 800ee2a:	d503      	bpl.n	800ee34 <__sfp+0x28>
 800ee2c:	6833      	ldr	r3, [r6, #0]
 800ee2e:	b30b      	cbz	r3, 800ee74 <__sfp+0x68>
 800ee30:	6836      	ldr	r6, [r6, #0]
 800ee32:	e7f7      	b.n	800ee24 <__sfp+0x18>
 800ee34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ee38:	b9d5      	cbnz	r5, 800ee70 <__sfp+0x64>
 800ee3a:	4b16      	ldr	r3, [pc, #88]	; (800ee94 <__sfp+0x88>)
 800ee3c:	60e3      	str	r3, [r4, #12]
 800ee3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee42:	6665      	str	r5, [r4, #100]	; 0x64
 800ee44:	f000 f84c 	bl	800eee0 <__retarget_lock_init_recursive>
 800ee48:	f7ff ff96 	bl	800ed78 <__sfp_lock_release>
 800ee4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ee50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ee54:	6025      	str	r5, [r4, #0]
 800ee56:	61a5      	str	r5, [r4, #24]
 800ee58:	2208      	movs	r2, #8
 800ee5a:	4629      	mov	r1, r5
 800ee5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee60:	f7fe fb0e 	bl	800d480 <memset>
 800ee64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ee68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ee6c:	4620      	mov	r0, r4
 800ee6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee70:	3468      	adds	r4, #104	; 0x68
 800ee72:	e7d9      	b.n	800ee28 <__sfp+0x1c>
 800ee74:	2104      	movs	r1, #4
 800ee76:	4638      	mov	r0, r7
 800ee78:	f7ff ff62 	bl	800ed40 <__sfmoreglue>
 800ee7c:	4604      	mov	r4, r0
 800ee7e:	6030      	str	r0, [r6, #0]
 800ee80:	2800      	cmp	r0, #0
 800ee82:	d1d5      	bne.n	800ee30 <__sfp+0x24>
 800ee84:	f7ff ff78 	bl	800ed78 <__sfp_lock_release>
 800ee88:	230c      	movs	r3, #12
 800ee8a:	603b      	str	r3, [r7, #0]
 800ee8c:	e7ee      	b.n	800ee6c <__sfp+0x60>
 800ee8e:	bf00      	nop
 800ee90:	08010a10 	.word	0x08010a10
 800ee94:	ffff0001 	.word	0xffff0001

0800ee98 <_fwalk_reent>:
 800ee98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee9c:	4606      	mov	r6, r0
 800ee9e:	4688      	mov	r8, r1
 800eea0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eea4:	2700      	movs	r7, #0
 800eea6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eeaa:	f1b9 0901 	subs.w	r9, r9, #1
 800eeae:	d505      	bpl.n	800eebc <_fwalk_reent+0x24>
 800eeb0:	6824      	ldr	r4, [r4, #0]
 800eeb2:	2c00      	cmp	r4, #0
 800eeb4:	d1f7      	bne.n	800eea6 <_fwalk_reent+0xe>
 800eeb6:	4638      	mov	r0, r7
 800eeb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eebc:	89ab      	ldrh	r3, [r5, #12]
 800eebe:	2b01      	cmp	r3, #1
 800eec0:	d907      	bls.n	800eed2 <_fwalk_reent+0x3a>
 800eec2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eec6:	3301      	adds	r3, #1
 800eec8:	d003      	beq.n	800eed2 <_fwalk_reent+0x3a>
 800eeca:	4629      	mov	r1, r5
 800eecc:	4630      	mov	r0, r6
 800eece:	47c0      	blx	r8
 800eed0:	4307      	orrs	r7, r0
 800eed2:	3568      	adds	r5, #104	; 0x68
 800eed4:	e7e9      	b.n	800eeaa <_fwalk_reent+0x12>
	...

0800eed8 <_localeconv_r>:
 800eed8:	4800      	ldr	r0, [pc, #0]	; (800eedc <_localeconv_r+0x4>)
 800eeda:	4770      	bx	lr
 800eedc:	20000170 	.word	0x20000170

0800eee0 <__retarget_lock_init_recursive>:
 800eee0:	4770      	bx	lr

0800eee2 <__retarget_lock_acquire_recursive>:
 800eee2:	4770      	bx	lr

0800eee4 <__retarget_lock_release_recursive>:
 800eee4:	4770      	bx	lr
	...

0800eee8 <__malloc_lock>:
 800eee8:	4801      	ldr	r0, [pc, #4]	; (800eef0 <__malloc_lock+0x8>)
 800eeea:	f7ff bffa 	b.w	800eee2 <__retarget_lock_acquire_recursive>
 800eeee:	bf00      	nop
 800eef0:	200081fc 	.word	0x200081fc

0800eef4 <__malloc_unlock>:
 800eef4:	4801      	ldr	r0, [pc, #4]	; (800eefc <__malloc_unlock+0x8>)
 800eef6:	f7ff bff5 	b.w	800eee4 <__retarget_lock_release_recursive>
 800eefa:	bf00      	nop
 800eefc:	200081fc 	.word	0x200081fc

0800ef00 <_Balloc>:
 800ef00:	b570      	push	{r4, r5, r6, lr}
 800ef02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ef04:	4604      	mov	r4, r0
 800ef06:	460d      	mov	r5, r1
 800ef08:	b976      	cbnz	r6, 800ef28 <_Balloc+0x28>
 800ef0a:	2010      	movs	r0, #16
 800ef0c:	f7fe fa9a 	bl	800d444 <malloc>
 800ef10:	4602      	mov	r2, r0
 800ef12:	6260      	str	r0, [r4, #36]	; 0x24
 800ef14:	b920      	cbnz	r0, 800ef20 <_Balloc+0x20>
 800ef16:	4b18      	ldr	r3, [pc, #96]	; (800ef78 <_Balloc+0x78>)
 800ef18:	4818      	ldr	r0, [pc, #96]	; (800ef7c <_Balloc+0x7c>)
 800ef1a:	2166      	movs	r1, #102	; 0x66
 800ef1c:	f000 ff56 	bl	800fdcc <__assert_func>
 800ef20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef24:	6006      	str	r6, [r0, #0]
 800ef26:	60c6      	str	r6, [r0, #12]
 800ef28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ef2a:	68f3      	ldr	r3, [r6, #12]
 800ef2c:	b183      	cbz	r3, 800ef50 <_Balloc+0x50>
 800ef2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef30:	68db      	ldr	r3, [r3, #12]
 800ef32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ef36:	b9b8      	cbnz	r0, 800ef68 <_Balloc+0x68>
 800ef38:	2101      	movs	r1, #1
 800ef3a:	fa01 f605 	lsl.w	r6, r1, r5
 800ef3e:	1d72      	adds	r2, r6, #5
 800ef40:	0092      	lsls	r2, r2, #2
 800ef42:	4620      	mov	r0, r4
 800ef44:	f000 fb60 	bl	800f608 <_calloc_r>
 800ef48:	b160      	cbz	r0, 800ef64 <_Balloc+0x64>
 800ef4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ef4e:	e00e      	b.n	800ef6e <_Balloc+0x6e>
 800ef50:	2221      	movs	r2, #33	; 0x21
 800ef52:	2104      	movs	r1, #4
 800ef54:	4620      	mov	r0, r4
 800ef56:	f000 fb57 	bl	800f608 <_calloc_r>
 800ef5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef5c:	60f0      	str	r0, [r6, #12]
 800ef5e:	68db      	ldr	r3, [r3, #12]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d1e4      	bne.n	800ef2e <_Balloc+0x2e>
 800ef64:	2000      	movs	r0, #0
 800ef66:	bd70      	pop	{r4, r5, r6, pc}
 800ef68:	6802      	ldr	r2, [r0, #0]
 800ef6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ef6e:	2300      	movs	r3, #0
 800ef70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ef74:	e7f7      	b.n	800ef66 <_Balloc+0x66>
 800ef76:	bf00      	nop
 800ef78:	08010a55 	.word	0x08010a55
 800ef7c:	08010b38 	.word	0x08010b38

0800ef80 <_Bfree>:
 800ef80:	b570      	push	{r4, r5, r6, lr}
 800ef82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ef84:	4605      	mov	r5, r0
 800ef86:	460c      	mov	r4, r1
 800ef88:	b976      	cbnz	r6, 800efa8 <_Bfree+0x28>
 800ef8a:	2010      	movs	r0, #16
 800ef8c:	f7fe fa5a 	bl	800d444 <malloc>
 800ef90:	4602      	mov	r2, r0
 800ef92:	6268      	str	r0, [r5, #36]	; 0x24
 800ef94:	b920      	cbnz	r0, 800efa0 <_Bfree+0x20>
 800ef96:	4b09      	ldr	r3, [pc, #36]	; (800efbc <_Bfree+0x3c>)
 800ef98:	4809      	ldr	r0, [pc, #36]	; (800efc0 <_Bfree+0x40>)
 800ef9a:	218a      	movs	r1, #138	; 0x8a
 800ef9c:	f000 ff16 	bl	800fdcc <__assert_func>
 800efa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800efa4:	6006      	str	r6, [r0, #0]
 800efa6:	60c6      	str	r6, [r0, #12]
 800efa8:	b13c      	cbz	r4, 800efba <_Bfree+0x3a>
 800efaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800efac:	6862      	ldr	r2, [r4, #4]
 800efae:	68db      	ldr	r3, [r3, #12]
 800efb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800efb4:	6021      	str	r1, [r4, #0]
 800efb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800efba:	bd70      	pop	{r4, r5, r6, pc}
 800efbc:	08010a55 	.word	0x08010a55
 800efc0:	08010b38 	.word	0x08010b38

0800efc4 <__multadd>:
 800efc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efc8:	690d      	ldr	r5, [r1, #16]
 800efca:	4607      	mov	r7, r0
 800efcc:	460c      	mov	r4, r1
 800efce:	461e      	mov	r6, r3
 800efd0:	f101 0c14 	add.w	ip, r1, #20
 800efd4:	2000      	movs	r0, #0
 800efd6:	f8dc 3000 	ldr.w	r3, [ip]
 800efda:	b299      	uxth	r1, r3
 800efdc:	fb02 6101 	mla	r1, r2, r1, r6
 800efe0:	0c1e      	lsrs	r6, r3, #16
 800efe2:	0c0b      	lsrs	r3, r1, #16
 800efe4:	fb02 3306 	mla	r3, r2, r6, r3
 800efe8:	b289      	uxth	r1, r1
 800efea:	3001      	adds	r0, #1
 800efec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eff0:	4285      	cmp	r5, r0
 800eff2:	f84c 1b04 	str.w	r1, [ip], #4
 800eff6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800effa:	dcec      	bgt.n	800efd6 <__multadd+0x12>
 800effc:	b30e      	cbz	r6, 800f042 <__multadd+0x7e>
 800effe:	68a3      	ldr	r3, [r4, #8]
 800f000:	42ab      	cmp	r3, r5
 800f002:	dc19      	bgt.n	800f038 <__multadd+0x74>
 800f004:	6861      	ldr	r1, [r4, #4]
 800f006:	4638      	mov	r0, r7
 800f008:	3101      	adds	r1, #1
 800f00a:	f7ff ff79 	bl	800ef00 <_Balloc>
 800f00e:	4680      	mov	r8, r0
 800f010:	b928      	cbnz	r0, 800f01e <__multadd+0x5a>
 800f012:	4602      	mov	r2, r0
 800f014:	4b0c      	ldr	r3, [pc, #48]	; (800f048 <__multadd+0x84>)
 800f016:	480d      	ldr	r0, [pc, #52]	; (800f04c <__multadd+0x88>)
 800f018:	21b5      	movs	r1, #181	; 0xb5
 800f01a:	f000 fed7 	bl	800fdcc <__assert_func>
 800f01e:	6922      	ldr	r2, [r4, #16]
 800f020:	3202      	adds	r2, #2
 800f022:	f104 010c 	add.w	r1, r4, #12
 800f026:	0092      	lsls	r2, r2, #2
 800f028:	300c      	adds	r0, #12
 800f02a:	f7fe fa1b 	bl	800d464 <memcpy>
 800f02e:	4621      	mov	r1, r4
 800f030:	4638      	mov	r0, r7
 800f032:	f7ff ffa5 	bl	800ef80 <_Bfree>
 800f036:	4644      	mov	r4, r8
 800f038:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f03c:	3501      	adds	r5, #1
 800f03e:	615e      	str	r6, [r3, #20]
 800f040:	6125      	str	r5, [r4, #16]
 800f042:	4620      	mov	r0, r4
 800f044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f048:	08010ac7 	.word	0x08010ac7
 800f04c:	08010b38 	.word	0x08010b38

0800f050 <__hi0bits>:
 800f050:	0c03      	lsrs	r3, r0, #16
 800f052:	041b      	lsls	r3, r3, #16
 800f054:	b9d3      	cbnz	r3, 800f08c <__hi0bits+0x3c>
 800f056:	0400      	lsls	r0, r0, #16
 800f058:	2310      	movs	r3, #16
 800f05a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f05e:	bf04      	itt	eq
 800f060:	0200      	lsleq	r0, r0, #8
 800f062:	3308      	addeq	r3, #8
 800f064:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f068:	bf04      	itt	eq
 800f06a:	0100      	lsleq	r0, r0, #4
 800f06c:	3304      	addeq	r3, #4
 800f06e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f072:	bf04      	itt	eq
 800f074:	0080      	lsleq	r0, r0, #2
 800f076:	3302      	addeq	r3, #2
 800f078:	2800      	cmp	r0, #0
 800f07a:	db05      	blt.n	800f088 <__hi0bits+0x38>
 800f07c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f080:	f103 0301 	add.w	r3, r3, #1
 800f084:	bf08      	it	eq
 800f086:	2320      	moveq	r3, #32
 800f088:	4618      	mov	r0, r3
 800f08a:	4770      	bx	lr
 800f08c:	2300      	movs	r3, #0
 800f08e:	e7e4      	b.n	800f05a <__hi0bits+0xa>

0800f090 <__lo0bits>:
 800f090:	6803      	ldr	r3, [r0, #0]
 800f092:	f013 0207 	ands.w	r2, r3, #7
 800f096:	4601      	mov	r1, r0
 800f098:	d00b      	beq.n	800f0b2 <__lo0bits+0x22>
 800f09a:	07da      	lsls	r2, r3, #31
 800f09c:	d423      	bmi.n	800f0e6 <__lo0bits+0x56>
 800f09e:	0798      	lsls	r0, r3, #30
 800f0a0:	bf49      	itett	mi
 800f0a2:	085b      	lsrmi	r3, r3, #1
 800f0a4:	089b      	lsrpl	r3, r3, #2
 800f0a6:	2001      	movmi	r0, #1
 800f0a8:	600b      	strmi	r3, [r1, #0]
 800f0aa:	bf5c      	itt	pl
 800f0ac:	600b      	strpl	r3, [r1, #0]
 800f0ae:	2002      	movpl	r0, #2
 800f0b0:	4770      	bx	lr
 800f0b2:	b298      	uxth	r0, r3
 800f0b4:	b9a8      	cbnz	r0, 800f0e2 <__lo0bits+0x52>
 800f0b6:	0c1b      	lsrs	r3, r3, #16
 800f0b8:	2010      	movs	r0, #16
 800f0ba:	b2da      	uxtb	r2, r3
 800f0bc:	b90a      	cbnz	r2, 800f0c2 <__lo0bits+0x32>
 800f0be:	3008      	adds	r0, #8
 800f0c0:	0a1b      	lsrs	r3, r3, #8
 800f0c2:	071a      	lsls	r2, r3, #28
 800f0c4:	bf04      	itt	eq
 800f0c6:	091b      	lsreq	r3, r3, #4
 800f0c8:	3004      	addeq	r0, #4
 800f0ca:	079a      	lsls	r2, r3, #30
 800f0cc:	bf04      	itt	eq
 800f0ce:	089b      	lsreq	r3, r3, #2
 800f0d0:	3002      	addeq	r0, #2
 800f0d2:	07da      	lsls	r2, r3, #31
 800f0d4:	d403      	bmi.n	800f0de <__lo0bits+0x4e>
 800f0d6:	085b      	lsrs	r3, r3, #1
 800f0d8:	f100 0001 	add.w	r0, r0, #1
 800f0dc:	d005      	beq.n	800f0ea <__lo0bits+0x5a>
 800f0de:	600b      	str	r3, [r1, #0]
 800f0e0:	4770      	bx	lr
 800f0e2:	4610      	mov	r0, r2
 800f0e4:	e7e9      	b.n	800f0ba <__lo0bits+0x2a>
 800f0e6:	2000      	movs	r0, #0
 800f0e8:	4770      	bx	lr
 800f0ea:	2020      	movs	r0, #32
 800f0ec:	4770      	bx	lr
	...

0800f0f0 <__i2b>:
 800f0f0:	b510      	push	{r4, lr}
 800f0f2:	460c      	mov	r4, r1
 800f0f4:	2101      	movs	r1, #1
 800f0f6:	f7ff ff03 	bl	800ef00 <_Balloc>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	b928      	cbnz	r0, 800f10a <__i2b+0x1a>
 800f0fe:	4b05      	ldr	r3, [pc, #20]	; (800f114 <__i2b+0x24>)
 800f100:	4805      	ldr	r0, [pc, #20]	; (800f118 <__i2b+0x28>)
 800f102:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f106:	f000 fe61 	bl	800fdcc <__assert_func>
 800f10a:	2301      	movs	r3, #1
 800f10c:	6144      	str	r4, [r0, #20]
 800f10e:	6103      	str	r3, [r0, #16]
 800f110:	bd10      	pop	{r4, pc}
 800f112:	bf00      	nop
 800f114:	08010ac7 	.word	0x08010ac7
 800f118:	08010b38 	.word	0x08010b38

0800f11c <__multiply>:
 800f11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f120:	4691      	mov	r9, r2
 800f122:	690a      	ldr	r2, [r1, #16]
 800f124:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f128:	429a      	cmp	r2, r3
 800f12a:	bfb8      	it	lt
 800f12c:	460b      	movlt	r3, r1
 800f12e:	460c      	mov	r4, r1
 800f130:	bfbc      	itt	lt
 800f132:	464c      	movlt	r4, r9
 800f134:	4699      	movlt	r9, r3
 800f136:	6927      	ldr	r7, [r4, #16]
 800f138:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f13c:	68a3      	ldr	r3, [r4, #8]
 800f13e:	6861      	ldr	r1, [r4, #4]
 800f140:	eb07 060a 	add.w	r6, r7, sl
 800f144:	42b3      	cmp	r3, r6
 800f146:	b085      	sub	sp, #20
 800f148:	bfb8      	it	lt
 800f14a:	3101      	addlt	r1, #1
 800f14c:	f7ff fed8 	bl	800ef00 <_Balloc>
 800f150:	b930      	cbnz	r0, 800f160 <__multiply+0x44>
 800f152:	4602      	mov	r2, r0
 800f154:	4b44      	ldr	r3, [pc, #272]	; (800f268 <__multiply+0x14c>)
 800f156:	4845      	ldr	r0, [pc, #276]	; (800f26c <__multiply+0x150>)
 800f158:	f240 115d 	movw	r1, #349	; 0x15d
 800f15c:	f000 fe36 	bl	800fdcc <__assert_func>
 800f160:	f100 0514 	add.w	r5, r0, #20
 800f164:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f168:	462b      	mov	r3, r5
 800f16a:	2200      	movs	r2, #0
 800f16c:	4543      	cmp	r3, r8
 800f16e:	d321      	bcc.n	800f1b4 <__multiply+0x98>
 800f170:	f104 0314 	add.w	r3, r4, #20
 800f174:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f178:	f109 0314 	add.w	r3, r9, #20
 800f17c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f180:	9202      	str	r2, [sp, #8]
 800f182:	1b3a      	subs	r2, r7, r4
 800f184:	3a15      	subs	r2, #21
 800f186:	f022 0203 	bic.w	r2, r2, #3
 800f18a:	3204      	adds	r2, #4
 800f18c:	f104 0115 	add.w	r1, r4, #21
 800f190:	428f      	cmp	r7, r1
 800f192:	bf38      	it	cc
 800f194:	2204      	movcc	r2, #4
 800f196:	9201      	str	r2, [sp, #4]
 800f198:	9a02      	ldr	r2, [sp, #8]
 800f19a:	9303      	str	r3, [sp, #12]
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d80c      	bhi.n	800f1ba <__multiply+0x9e>
 800f1a0:	2e00      	cmp	r6, #0
 800f1a2:	dd03      	ble.n	800f1ac <__multiply+0x90>
 800f1a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d05a      	beq.n	800f262 <__multiply+0x146>
 800f1ac:	6106      	str	r6, [r0, #16]
 800f1ae:	b005      	add	sp, #20
 800f1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1b4:	f843 2b04 	str.w	r2, [r3], #4
 800f1b8:	e7d8      	b.n	800f16c <__multiply+0x50>
 800f1ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800f1be:	f1ba 0f00 	cmp.w	sl, #0
 800f1c2:	d024      	beq.n	800f20e <__multiply+0xf2>
 800f1c4:	f104 0e14 	add.w	lr, r4, #20
 800f1c8:	46a9      	mov	r9, r5
 800f1ca:	f04f 0c00 	mov.w	ip, #0
 800f1ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f1d2:	f8d9 1000 	ldr.w	r1, [r9]
 800f1d6:	fa1f fb82 	uxth.w	fp, r2
 800f1da:	b289      	uxth	r1, r1
 800f1dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800f1e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f1e4:	f8d9 2000 	ldr.w	r2, [r9]
 800f1e8:	4461      	add	r1, ip
 800f1ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f1ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800f1f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f1f6:	b289      	uxth	r1, r1
 800f1f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f1fc:	4577      	cmp	r7, lr
 800f1fe:	f849 1b04 	str.w	r1, [r9], #4
 800f202:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f206:	d8e2      	bhi.n	800f1ce <__multiply+0xb2>
 800f208:	9a01      	ldr	r2, [sp, #4]
 800f20a:	f845 c002 	str.w	ip, [r5, r2]
 800f20e:	9a03      	ldr	r2, [sp, #12]
 800f210:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f214:	3304      	adds	r3, #4
 800f216:	f1b9 0f00 	cmp.w	r9, #0
 800f21a:	d020      	beq.n	800f25e <__multiply+0x142>
 800f21c:	6829      	ldr	r1, [r5, #0]
 800f21e:	f104 0c14 	add.w	ip, r4, #20
 800f222:	46ae      	mov	lr, r5
 800f224:	f04f 0a00 	mov.w	sl, #0
 800f228:	f8bc b000 	ldrh.w	fp, [ip]
 800f22c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f230:	fb09 220b 	mla	r2, r9, fp, r2
 800f234:	4492      	add	sl, r2
 800f236:	b289      	uxth	r1, r1
 800f238:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f23c:	f84e 1b04 	str.w	r1, [lr], #4
 800f240:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f244:	f8be 1000 	ldrh.w	r1, [lr]
 800f248:	0c12      	lsrs	r2, r2, #16
 800f24a:	fb09 1102 	mla	r1, r9, r2, r1
 800f24e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f252:	4567      	cmp	r7, ip
 800f254:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f258:	d8e6      	bhi.n	800f228 <__multiply+0x10c>
 800f25a:	9a01      	ldr	r2, [sp, #4]
 800f25c:	50a9      	str	r1, [r5, r2]
 800f25e:	3504      	adds	r5, #4
 800f260:	e79a      	b.n	800f198 <__multiply+0x7c>
 800f262:	3e01      	subs	r6, #1
 800f264:	e79c      	b.n	800f1a0 <__multiply+0x84>
 800f266:	bf00      	nop
 800f268:	08010ac7 	.word	0x08010ac7
 800f26c:	08010b38 	.word	0x08010b38

0800f270 <__pow5mult>:
 800f270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f274:	4615      	mov	r5, r2
 800f276:	f012 0203 	ands.w	r2, r2, #3
 800f27a:	4606      	mov	r6, r0
 800f27c:	460f      	mov	r7, r1
 800f27e:	d007      	beq.n	800f290 <__pow5mult+0x20>
 800f280:	4c25      	ldr	r4, [pc, #148]	; (800f318 <__pow5mult+0xa8>)
 800f282:	3a01      	subs	r2, #1
 800f284:	2300      	movs	r3, #0
 800f286:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f28a:	f7ff fe9b 	bl	800efc4 <__multadd>
 800f28e:	4607      	mov	r7, r0
 800f290:	10ad      	asrs	r5, r5, #2
 800f292:	d03d      	beq.n	800f310 <__pow5mult+0xa0>
 800f294:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f296:	b97c      	cbnz	r4, 800f2b8 <__pow5mult+0x48>
 800f298:	2010      	movs	r0, #16
 800f29a:	f7fe f8d3 	bl	800d444 <malloc>
 800f29e:	4602      	mov	r2, r0
 800f2a0:	6270      	str	r0, [r6, #36]	; 0x24
 800f2a2:	b928      	cbnz	r0, 800f2b0 <__pow5mult+0x40>
 800f2a4:	4b1d      	ldr	r3, [pc, #116]	; (800f31c <__pow5mult+0xac>)
 800f2a6:	481e      	ldr	r0, [pc, #120]	; (800f320 <__pow5mult+0xb0>)
 800f2a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f2ac:	f000 fd8e 	bl	800fdcc <__assert_func>
 800f2b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f2b4:	6004      	str	r4, [r0, #0]
 800f2b6:	60c4      	str	r4, [r0, #12]
 800f2b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f2bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f2c0:	b94c      	cbnz	r4, 800f2d6 <__pow5mult+0x66>
 800f2c2:	f240 2171 	movw	r1, #625	; 0x271
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	f7ff ff12 	bl	800f0f0 <__i2b>
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	6003      	str	r3, [r0, #0]
 800f2d6:	f04f 0900 	mov.w	r9, #0
 800f2da:	07eb      	lsls	r3, r5, #31
 800f2dc:	d50a      	bpl.n	800f2f4 <__pow5mult+0x84>
 800f2de:	4639      	mov	r1, r7
 800f2e0:	4622      	mov	r2, r4
 800f2e2:	4630      	mov	r0, r6
 800f2e4:	f7ff ff1a 	bl	800f11c <__multiply>
 800f2e8:	4639      	mov	r1, r7
 800f2ea:	4680      	mov	r8, r0
 800f2ec:	4630      	mov	r0, r6
 800f2ee:	f7ff fe47 	bl	800ef80 <_Bfree>
 800f2f2:	4647      	mov	r7, r8
 800f2f4:	106d      	asrs	r5, r5, #1
 800f2f6:	d00b      	beq.n	800f310 <__pow5mult+0xa0>
 800f2f8:	6820      	ldr	r0, [r4, #0]
 800f2fa:	b938      	cbnz	r0, 800f30c <__pow5mult+0x9c>
 800f2fc:	4622      	mov	r2, r4
 800f2fe:	4621      	mov	r1, r4
 800f300:	4630      	mov	r0, r6
 800f302:	f7ff ff0b 	bl	800f11c <__multiply>
 800f306:	6020      	str	r0, [r4, #0]
 800f308:	f8c0 9000 	str.w	r9, [r0]
 800f30c:	4604      	mov	r4, r0
 800f30e:	e7e4      	b.n	800f2da <__pow5mult+0x6a>
 800f310:	4638      	mov	r0, r7
 800f312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f316:	bf00      	nop
 800f318:	08010c88 	.word	0x08010c88
 800f31c:	08010a55 	.word	0x08010a55
 800f320:	08010b38 	.word	0x08010b38

0800f324 <__lshift>:
 800f324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f328:	460c      	mov	r4, r1
 800f32a:	6849      	ldr	r1, [r1, #4]
 800f32c:	6923      	ldr	r3, [r4, #16]
 800f32e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f332:	68a3      	ldr	r3, [r4, #8]
 800f334:	4607      	mov	r7, r0
 800f336:	4691      	mov	r9, r2
 800f338:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f33c:	f108 0601 	add.w	r6, r8, #1
 800f340:	42b3      	cmp	r3, r6
 800f342:	db0b      	blt.n	800f35c <__lshift+0x38>
 800f344:	4638      	mov	r0, r7
 800f346:	f7ff fddb 	bl	800ef00 <_Balloc>
 800f34a:	4605      	mov	r5, r0
 800f34c:	b948      	cbnz	r0, 800f362 <__lshift+0x3e>
 800f34e:	4602      	mov	r2, r0
 800f350:	4b2a      	ldr	r3, [pc, #168]	; (800f3fc <__lshift+0xd8>)
 800f352:	482b      	ldr	r0, [pc, #172]	; (800f400 <__lshift+0xdc>)
 800f354:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f358:	f000 fd38 	bl	800fdcc <__assert_func>
 800f35c:	3101      	adds	r1, #1
 800f35e:	005b      	lsls	r3, r3, #1
 800f360:	e7ee      	b.n	800f340 <__lshift+0x1c>
 800f362:	2300      	movs	r3, #0
 800f364:	f100 0114 	add.w	r1, r0, #20
 800f368:	f100 0210 	add.w	r2, r0, #16
 800f36c:	4618      	mov	r0, r3
 800f36e:	4553      	cmp	r3, sl
 800f370:	db37      	blt.n	800f3e2 <__lshift+0xbe>
 800f372:	6920      	ldr	r0, [r4, #16]
 800f374:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f378:	f104 0314 	add.w	r3, r4, #20
 800f37c:	f019 091f 	ands.w	r9, r9, #31
 800f380:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f384:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f388:	d02f      	beq.n	800f3ea <__lshift+0xc6>
 800f38a:	f1c9 0e20 	rsb	lr, r9, #32
 800f38e:	468a      	mov	sl, r1
 800f390:	f04f 0c00 	mov.w	ip, #0
 800f394:	681a      	ldr	r2, [r3, #0]
 800f396:	fa02 f209 	lsl.w	r2, r2, r9
 800f39a:	ea42 020c 	orr.w	r2, r2, ip
 800f39e:	f84a 2b04 	str.w	r2, [sl], #4
 800f3a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3a6:	4298      	cmp	r0, r3
 800f3a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f3ac:	d8f2      	bhi.n	800f394 <__lshift+0x70>
 800f3ae:	1b03      	subs	r3, r0, r4
 800f3b0:	3b15      	subs	r3, #21
 800f3b2:	f023 0303 	bic.w	r3, r3, #3
 800f3b6:	3304      	adds	r3, #4
 800f3b8:	f104 0215 	add.w	r2, r4, #21
 800f3bc:	4290      	cmp	r0, r2
 800f3be:	bf38      	it	cc
 800f3c0:	2304      	movcc	r3, #4
 800f3c2:	f841 c003 	str.w	ip, [r1, r3]
 800f3c6:	f1bc 0f00 	cmp.w	ip, #0
 800f3ca:	d001      	beq.n	800f3d0 <__lshift+0xac>
 800f3cc:	f108 0602 	add.w	r6, r8, #2
 800f3d0:	3e01      	subs	r6, #1
 800f3d2:	4638      	mov	r0, r7
 800f3d4:	612e      	str	r6, [r5, #16]
 800f3d6:	4621      	mov	r1, r4
 800f3d8:	f7ff fdd2 	bl	800ef80 <_Bfree>
 800f3dc:	4628      	mov	r0, r5
 800f3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	e7c1      	b.n	800f36e <__lshift+0x4a>
 800f3ea:	3904      	subs	r1, #4
 800f3ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f3f4:	4298      	cmp	r0, r3
 800f3f6:	d8f9      	bhi.n	800f3ec <__lshift+0xc8>
 800f3f8:	e7ea      	b.n	800f3d0 <__lshift+0xac>
 800f3fa:	bf00      	nop
 800f3fc:	08010ac7 	.word	0x08010ac7
 800f400:	08010b38 	.word	0x08010b38

0800f404 <__mcmp>:
 800f404:	b530      	push	{r4, r5, lr}
 800f406:	6902      	ldr	r2, [r0, #16]
 800f408:	690c      	ldr	r4, [r1, #16]
 800f40a:	1b12      	subs	r2, r2, r4
 800f40c:	d10e      	bne.n	800f42c <__mcmp+0x28>
 800f40e:	f100 0314 	add.w	r3, r0, #20
 800f412:	3114      	adds	r1, #20
 800f414:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f418:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f41c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f420:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f424:	42a5      	cmp	r5, r4
 800f426:	d003      	beq.n	800f430 <__mcmp+0x2c>
 800f428:	d305      	bcc.n	800f436 <__mcmp+0x32>
 800f42a:	2201      	movs	r2, #1
 800f42c:	4610      	mov	r0, r2
 800f42e:	bd30      	pop	{r4, r5, pc}
 800f430:	4283      	cmp	r3, r0
 800f432:	d3f3      	bcc.n	800f41c <__mcmp+0x18>
 800f434:	e7fa      	b.n	800f42c <__mcmp+0x28>
 800f436:	f04f 32ff 	mov.w	r2, #4294967295
 800f43a:	e7f7      	b.n	800f42c <__mcmp+0x28>

0800f43c <__mdiff>:
 800f43c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f440:	460c      	mov	r4, r1
 800f442:	4606      	mov	r6, r0
 800f444:	4611      	mov	r1, r2
 800f446:	4620      	mov	r0, r4
 800f448:	4690      	mov	r8, r2
 800f44a:	f7ff ffdb 	bl	800f404 <__mcmp>
 800f44e:	1e05      	subs	r5, r0, #0
 800f450:	d110      	bne.n	800f474 <__mdiff+0x38>
 800f452:	4629      	mov	r1, r5
 800f454:	4630      	mov	r0, r6
 800f456:	f7ff fd53 	bl	800ef00 <_Balloc>
 800f45a:	b930      	cbnz	r0, 800f46a <__mdiff+0x2e>
 800f45c:	4b3a      	ldr	r3, [pc, #232]	; (800f548 <__mdiff+0x10c>)
 800f45e:	4602      	mov	r2, r0
 800f460:	f240 2132 	movw	r1, #562	; 0x232
 800f464:	4839      	ldr	r0, [pc, #228]	; (800f54c <__mdiff+0x110>)
 800f466:	f000 fcb1 	bl	800fdcc <__assert_func>
 800f46a:	2301      	movs	r3, #1
 800f46c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f470:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f474:	bfa4      	itt	ge
 800f476:	4643      	movge	r3, r8
 800f478:	46a0      	movge	r8, r4
 800f47a:	4630      	mov	r0, r6
 800f47c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f480:	bfa6      	itte	ge
 800f482:	461c      	movge	r4, r3
 800f484:	2500      	movge	r5, #0
 800f486:	2501      	movlt	r5, #1
 800f488:	f7ff fd3a 	bl	800ef00 <_Balloc>
 800f48c:	b920      	cbnz	r0, 800f498 <__mdiff+0x5c>
 800f48e:	4b2e      	ldr	r3, [pc, #184]	; (800f548 <__mdiff+0x10c>)
 800f490:	4602      	mov	r2, r0
 800f492:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f496:	e7e5      	b.n	800f464 <__mdiff+0x28>
 800f498:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f49c:	6926      	ldr	r6, [r4, #16]
 800f49e:	60c5      	str	r5, [r0, #12]
 800f4a0:	f104 0914 	add.w	r9, r4, #20
 800f4a4:	f108 0514 	add.w	r5, r8, #20
 800f4a8:	f100 0e14 	add.w	lr, r0, #20
 800f4ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f4b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f4b4:	f108 0210 	add.w	r2, r8, #16
 800f4b8:	46f2      	mov	sl, lr
 800f4ba:	2100      	movs	r1, #0
 800f4bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800f4c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f4c4:	fa1f f883 	uxth.w	r8, r3
 800f4c8:	fa11 f18b 	uxtah	r1, r1, fp
 800f4cc:	0c1b      	lsrs	r3, r3, #16
 800f4ce:	eba1 0808 	sub.w	r8, r1, r8
 800f4d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f4d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f4da:	fa1f f888 	uxth.w	r8, r8
 800f4de:	1419      	asrs	r1, r3, #16
 800f4e0:	454e      	cmp	r6, r9
 800f4e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f4e6:	f84a 3b04 	str.w	r3, [sl], #4
 800f4ea:	d8e7      	bhi.n	800f4bc <__mdiff+0x80>
 800f4ec:	1b33      	subs	r3, r6, r4
 800f4ee:	3b15      	subs	r3, #21
 800f4f0:	f023 0303 	bic.w	r3, r3, #3
 800f4f4:	3304      	adds	r3, #4
 800f4f6:	3415      	adds	r4, #21
 800f4f8:	42a6      	cmp	r6, r4
 800f4fa:	bf38      	it	cc
 800f4fc:	2304      	movcc	r3, #4
 800f4fe:	441d      	add	r5, r3
 800f500:	4473      	add	r3, lr
 800f502:	469e      	mov	lr, r3
 800f504:	462e      	mov	r6, r5
 800f506:	4566      	cmp	r6, ip
 800f508:	d30e      	bcc.n	800f528 <__mdiff+0xec>
 800f50a:	f10c 0203 	add.w	r2, ip, #3
 800f50e:	1b52      	subs	r2, r2, r5
 800f510:	f022 0203 	bic.w	r2, r2, #3
 800f514:	3d03      	subs	r5, #3
 800f516:	45ac      	cmp	ip, r5
 800f518:	bf38      	it	cc
 800f51a:	2200      	movcc	r2, #0
 800f51c:	441a      	add	r2, r3
 800f51e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f522:	b17b      	cbz	r3, 800f544 <__mdiff+0x108>
 800f524:	6107      	str	r7, [r0, #16]
 800f526:	e7a3      	b.n	800f470 <__mdiff+0x34>
 800f528:	f856 8b04 	ldr.w	r8, [r6], #4
 800f52c:	fa11 f288 	uxtah	r2, r1, r8
 800f530:	1414      	asrs	r4, r2, #16
 800f532:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f536:	b292      	uxth	r2, r2
 800f538:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f53c:	f84e 2b04 	str.w	r2, [lr], #4
 800f540:	1421      	asrs	r1, r4, #16
 800f542:	e7e0      	b.n	800f506 <__mdiff+0xca>
 800f544:	3f01      	subs	r7, #1
 800f546:	e7ea      	b.n	800f51e <__mdiff+0xe2>
 800f548:	08010ac7 	.word	0x08010ac7
 800f54c:	08010b38 	.word	0x08010b38

0800f550 <__d2b>:
 800f550:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f554:	4689      	mov	r9, r1
 800f556:	2101      	movs	r1, #1
 800f558:	ec57 6b10 	vmov	r6, r7, d0
 800f55c:	4690      	mov	r8, r2
 800f55e:	f7ff fccf 	bl	800ef00 <_Balloc>
 800f562:	4604      	mov	r4, r0
 800f564:	b930      	cbnz	r0, 800f574 <__d2b+0x24>
 800f566:	4602      	mov	r2, r0
 800f568:	4b25      	ldr	r3, [pc, #148]	; (800f600 <__d2b+0xb0>)
 800f56a:	4826      	ldr	r0, [pc, #152]	; (800f604 <__d2b+0xb4>)
 800f56c:	f240 310a 	movw	r1, #778	; 0x30a
 800f570:	f000 fc2c 	bl	800fdcc <__assert_func>
 800f574:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f578:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f57c:	bb35      	cbnz	r5, 800f5cc <__d2b+0x7c>
 800f57e:	2e00      	cmp	r6, #0
 800f580:	9301      	str	r3, [sp, #4]
 800f582:	d028      	beq.n	800f5d6 <__d2b+0x86>
 800f584:	4668      	mov	r0, sp
 800f586:	9600      	str	r6, [sp, #0]
 800f588:	f7ff fd82 	bl	800f090 <__lo0bits>
 800f58c:	9900      	ldr	r1, [sp, #0]
 800f58e:	b300      	cbz	r0, 800f5d2 <__d2b+0x82>
 800f590:	9a01      	ldr	r2, [sp, #4]
 800f592:	f1c0 0320 	rsb	r3, r0, #32
 800f596:	fa02 f303 	lsl.w	r3, r2, r3
 800f59a:	430b      	orrs	r3, r1
 800f59c:	40c2      	lsrs	r2, r0
 800f59e:	6163      	str	r3, [r4, #20]
 800f5a0:	9201      	str	r2, [sp, #4]
 800f5a2:	9b01      	ldr	r3, [sp, #4]
 800f5a4:	61a3      	str	r3, [r4, #24]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	bf14      	ite	ne
 800f5aa:	2202      	movne	r2, #2
 800f5ac:	2201      	moveq	r2, #1
 800f5ae:	6122      	str	r2, [r4, #16]
 800f5b0:	b1d5      	cbz	r5, 800f5e8 <__d2b+0x98>
 800f5b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f5b6:	4405      	add	r5, r0
 800f5b8:	f8c9 5000 	str.w	r5, [r9]
 800f5bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f5c0:	f8c8 0000 	str.w	r0, [r8]
 800f5c4:	4620      	mov	r0, r4
 800f5c6:	b003      	add	sp, #12
 800f5c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f5d0:	e7d5      	b.n	800f57e <__d2b+0x2e>
 800f5d2:	6161      	str	r1, [r4, #20]
 800f5d4:	e7e5      	b.n	800f5a2 <__d2b+0x52>
 800f5d6:	a801      	add	r0, sp, #4
 800f5d8:	f7ff fd5a 	bl	800f090 <__lo0bits>
 800f5dc:	9b01      	ldr	r3, [sp, #4]
 800f5de:	6163      	str	r3, [r4, #20]
 800f5e0:	2201      	movs	r2, #1
 800f5e2:	6122      	str	r2, [r4, #16]
 800f5e4:	3020      	adds	r0, #32
 800f5e6:	e7e3      	b.n	800f5b0 <__d2b+0x60>
 800f5e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f5ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f5f0:	f8c9 0000 	str.w	r0, [r9]
 800f5f4:	6918      	ldr	r0, [r3, #16]
 800f5f6:	f7ff fd2b 	bl	800f050 <__hi0bits>
 800f5fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f5fe:	e7df      	b.n	800f5c0 <__d2b+0x70>
 800f600:	08010ac7 	.word	0x08010ac7
 800f604:	08010b38 	.word	0x08010b38

0800f608 <_calloc_r>:
 800f608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f60a:	fba1 2402 	umull	r2, r4, r1, r2
 800f60e:	b94c      	cbnz	r4, 800f624 <_calloc_r+0x1c>
 800f610:	4611      	mov	r1, r2
 800f612:	9201      	str	r2, [sp, #4]
 800f614:	f7fd ffa8 	bl	800d568 <_malloc_r>
 800f618:	9a01      	ldr	r2, [sp, #4]
 800f61a:	4605      	mov	r5, r0
 800f61c:	b930      	cbnz	r0, 800f62c <_calloc_r+0x24>
 800f61e:	4628      	mov	r0, r5
 800f620:	b003      	add	sp, #12
 800f622:	bd30      	pop	{r4, r5, pc}
 800f624:	220c      	movs	r2, #12
 800f626:	6002      	str	r2, [r0, #0]
 800f628:	2500      	movs	r5, #0
 800f62a:	e7f8      	b.n	800f61e <_calloc_r+0x16>
 800f62c:	4621      	mov	r1, r4
 800f62e:	f7fd ff27 	bl	800d480 <memset>
 800f632:	e7f4      	b.n	800f61e <_calloc_r+0x16>

0800f634 <__ssputs_r>:
 800f634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f638:	688e      	ldr	r6, [r1, #8]
 800f63a:	429e      	cmp	r6, r3
 800f63c:	4682      	mov	sl, r0
 800f63e:	460c      	mov	r4, r1
 800f640:	4690      	mov	r8, r2
 800f642:	461f      	mov	r7, r3
 800f644:	d838      	bhi.n	800f6b8 <__ssputs_r+0x84>
 800f646:	898a      	ldrh	r2, [r1, #12]
 800f648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f64c:	d032      	beq.n	800f6b4 <__ssputs_r+0x80>
 800f64e:	6825      	ldr	r5, [r4, #0]
 800f650:	6909      	ldr	r1, [r1, #16]
 800f652:	eba5 0901 	sub.w	r9, r5, r1
 800f656:	6965      	ldr	r5, [r4, #20]
 800f658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f65c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f660:	3301      	adds	r3, #1
 800f662:	444b      	add	r3, r9
 800f664:	106d      	asrs	r5, r5, #1
 800f666:	429d      	cmp	r5, r3
 800f668:	bf38      	it	cc
 800f66a:	461d      	movcc	r5, r3
 800f66c:	0553      	lsls	r3, r2, #21
 800f66e:	d531      	bpl.n	800f6d4 <__ssputs_r+0xa0>
 800f670:	4629      	mov	r1, r5
 800f672:	f7fd ff79 	bl	800d568 <_malloc_r>
 800f676:	4606      	mov	r6, r0
 800f678:	b950      	cbnz	r0, 800f690 <__ssputs_r+0x5c>
 800f67a:	230c      	movs	r3, #12
 800f67c:	f8ca 3000 	str.w	r3, [sl]
 800f680:	89a3      	ldrh	r3, [r4, #12]
 800f682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f686:	81a3      	strh	r3, [r4, #12]
 800f688:	f04f 30ff 	mov.w	r0, #4294967295
 800f68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f690:	6921      	ldr	r1, [r4, #16]
 800f692:	464a      	mov	r2, r9
 800f694:	f7fd fee6 	bl	800d464 <memcpy>
 800f698:	89a3      	ldrh	r3, [r4, #12]
 800f69a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f69e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6a2:	81a3      	strh	r3, [r4, #12]
 800f6a4:	6126      	str	r6, [r4, #16]
 800f6a6:	6165      	str	r5, [r4, #20]
 800f6a8:	444e      	add	r6, r9
 800f6aa:	eba5 0509 	sub.w	r5, r5, r9
 800f6ae:	6026      	str	r6, [r4, #0]
 800f6b0:	60a5      	str	r5, [r4, #8]
 800f6b2:	463e      	mov	r6, r7
 800f6b4:	42be      	cmp	r6, r7
 800f6b6:	d900      	bls.n	800f6ba <__ssputs_r+0x86>
 800f6b8:	463e      	mov	r6, r7
 800f6ba:	6820      	ldr	r0, [r4, #0]
 800f6bc:	4632      	mov	r2, r6
 800f6be:	4641      	mov	r1, r8
 800f6c0:	f000 fd10 	bl	80100e4 <memmove>
 800f6c4:	68a3      	ldr	r3, [r4, #8]
 800f6c6:	1b9b      	subs	r3, r3, r6
 800f6c8:	60a3      	str	r3, [r4, #8]
 800f6ca:	6823      	ldr	r3, [r4, #0]
 800f6cc:	4433      	add	r3, r6
 800f6ce:	6023      	str	r3, [r4, #0]
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	e7db      	b.n	800f68c <__ssputs_r+0x58>
 800f6d4:	462a      	mov	r2, r5
 800f6d6:	f000 fd1f 	bl	8010118 <_realloc_r>
 800f6da:	4606      	mov	r6, r0
 800f6dc:	2800      	cmp	r0, #0
 800f6de:	d1e1      	bne.n	800f6a4 <__ssputs_r+0x70>
 800f6e0:	6921      	ldr	r1, [r4, #16]
 800f6e2:	4650      	mov	r0, sl
 800f6e4:	f7fd fed4 	bl	800d490 <_free_r>
 800f6e8:	e7c7      	b.n	800f67a <__ssputs_r+0x46>
	...

0800f6ec <_svfiprintf_r>:
 800f6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f0:	4698      	mov	r8, r3
 800f6f2:	898b      	ldrh	r3, [r1, #12]
 800f6f4:	061b      	lsls	r3, r3, #24
 800f6f6:	b09d      	sub	sp, #116	; 0x74
 800f6f8:	4607      	mov	r7, r0
 800f6fa:	460d      	mov	r5, r1
 800f6fc:	4614      	mov	r4, r2
 800f6fe:	d50e      	bpl.n	800f71e <_svfiprintf_r+0x32>
 800f700:	690b      	ldr	r3, [r1, #16]
 800f702:	b963      	cbnz	r3, 800f71e <_svfiprintf_r+0x32>
 800f704:	2140      	movs	r1, #64	; 0x40
 800f706:	f7fd ff2f 	bl	800d568 <_malloc_r>
 800f70a:	6028      	str	r0, [r5, #0]
 800f70c:	6128      	str	r0, [r5, #16]
 800f70e:	b920      	cbnz	r0, 800f71a <_svfiprintf_r+0x2e>
 800f710:	230c      	movs	r3, #12
 800f712:	603b      	str	r3, [r7, #0]
 800f714:	f04f 30ff 	mov.w	r0, #4294967295
 800f718:	e0d1      	b.n	800f8be <_svfiprintf_r+0x1d2>
 800f71a:	2340      	movs	r3, #64	; 0x40
 800f71c:	616b      	str	r3, [r5, #20]
 800f71e:	2300      	movs	r3, #0
 800f720:	9309      	str	r3, [sp, #36]	; 0x24
 800f722:	2320      	movs	r3, #32
 800f724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f728:	f8cd 800c 	str.w	r8, [sp, #12]
 800f72c:	2330      	movs	r3, #48	; 0x30
 800f72e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f8d8 <_svfiprintf_r+0x1ec>
 800f732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f736:	f04f 0901 	mov.w	r9, #1
 800f73a:	4623      	mov	r3, r4
 800f73c:	469a      	mov	sl, r3
 800f73e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f742:	b10a      	cbz	r2, 800f748 <_svfiprintf_r+0x5c>
 800f744:	2a25      	cmp	r2, #37	; 0x25
 800f746:	d1f9      	bne.n	800f73c <_svfiprintf_r+0x50>
 800f748:	ebba 0b04 	subs.w	fp, sl, r4
 800f74c:	d00b      	beq.n	800f766 <_svfiprintf_r+0x7a>
 800f74e:	465b      	mov	r3, fp
 800f750:	4622      	mov	r2, r4
 800f752:	4629      	mov	r1, r5
 800f754:	4638      	mov	r0, r7
 800f756:	f7ff ff6d 	bl	800f634 <__ssputs_r>
 800f75a:	3001      	adds	r0, #1
 800f75c:	f000 80aa 	beq.w	800f8b4 <_svfiprintf_r+0x1c8>
 800f760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f762:	445a      	add	r2, fp
 800f764:	9209      	str	r2, [sp, #36]	; 0x24
 800f766:	f89a 3000 	ldrb.w	r3, [sl]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	f000 80a2 	beq.w	800f8b4 <_svfiprintf_r+0x1c8>
 800f770:	2300      	movs	r3, #0
 800f772:	f04f 32ff 	mov.w	r2, #4294967295
 800f776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f77a:	f10a 0a01 	add.w	sl, sl, #1
 800f77e:	9304      	str	r3, [sp, #16]
 800f780:	9307      	str	r3, [sp, #28]
 800f782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f786:	931a      	str	r3, [sp, #104]	; 0x68
 800f788:	4654      	mov	r4, sl
 800f78a:	2205      	movs	r2, #5
 800f78c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f790:	4851      	ldr	r0, [pc, #324]	; (800f8d8 <_svfiprintf_r+0x1ec>)
 800f792:	f7f0 fd35 	bl	8000200 <memchr>
 800f796:	9a04      	ldr	r2, [sp, #16]
 800f798:	b9d8      	cbnz	r0, 800f7d2 <_svfiprintf_r+0xe6>
 800f79a:	06d0      	lsls	r0, r2, #27
 800f79c:	bf44      	itt	mi
 800f79e:	2320      	movmi	r3, #32
 800f7a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7a4:	0711      	lsls	r1, r2, #28
 800f7a6:	bf44      	itt	mi
 800f7a8:	232b      	movmi	r3, #43	; 0x2b
 800f7aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7ae:	f89a 3000 	ldrb.w	r3, [sl]
 800f7b2:	2b2a      	cmp	r3, #42	; 0x2a
 800f7b4:	d015      	beq.n	800f7e2 <_svfiprintf_r+0xf6>
 800f7b6:	9a07      	ldr	r2, [sp, #28]
 800f7b8:	4654      	mov	r4, sl
 800f7ba:	2000      	movs	r0, #0
 800f7bc:	f04f 0c0a 	mov.w	ip, #10
 800f7c0:	4621      	mov	r1, r4
 800f7c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7c6:	3b30      	subs	r3, #48	; 0x30
 800f7c8:	2b09      	cmp	r3, #9
 800f7ca:	d94e      	bls.n	800f86a <_svfiprintf_r+0x17e>
 800f7cc:	b1b0      	cbz	r0, 800f7fc <_svfiprintf_r+0x110>
 800f7ce:	9207      	str	r2, [sp, #28]
 800f7d0:	e014      	b.n	800f7fc <_svfiprintf_r+0x110>
 800f7d2:	eba0 0308 	sub.w	r3, r0, r8
 800f7d6:	fa09 f303 	lsl.w	r3, r9, r3
 800f7da:	4313      	orrs	r3, r2
 800f7dc:	9304      	str	r3, [sp, #16]
 800f7de:	46a2      	mov	sl, r4
 800f7e0:	e7d2      	b.n	800f788 <_svfiprintf_r+0x9c>
 800f7e2:	9b03      	ldr	r3, [sp, #12]
 800f7e4:	1d19      	adds	r1, r3, #4
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	9103      	str	r1, [sp, #12]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	bfbb      	ittet	lt
 800f7ee:	425b      	neglt	r3, r3
 800f7f0:	f042 0202 	orrlt.w	r2, r2, #2
 800f7f4:	9307      	strge	r3, [sp, #28]
 800f7f6:	9307      	strlt	r3, [sp, #28]
 800f7f8:	bfb8      	it	lt
 800f7fa:	9204      	strlt	r2, [sp, #16]
 800f7fc:	7823      	ldrb	r3, [r4, #0]
 800f7fe:	2b2e      	cmp	r3, #46	; 0x2e
 800f800:	d10c      	bne.n	800f81c <_svfiprintf_r+0x130>
 800f802:	7863      	ldrb	r3, [r4, #1]
 800f804:	2b2a      	cmp	r3, #42	; 0x2a
 800f806:	d135      	bne.n	800f874 <_svfiprintf_r+0x188>
 800f808:	9b03      	ldr	r3, [sp, #12]
 800f80a:	1d1a      	adds	r2, r3, #4
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	9203      	str	r2, [sp, #12]
 800f810:	2b00      	cmp	r3, #0
 800f812:	bfb8      	it	lt
 800f814:	f04f 33ff 	movlt.w	r3, #4294967295
 800f818:	3402      	adds	r4, #2
 800f81a:	9305      	str	r3, [sp, #20]
 800f81c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f8e8 <_svfiprintf_r+0x1fc>
 800f820:	7821      	ldrb	r1, [r4, #0]
 800f822:	2203      	movs	r2, #3
 800f824:	4650      	mov	r0, sl
 800f826:	f7f0 fceb 	bl	8000200 <memchr>
 800f82a:	b140      	cbz	r0, 800f83e <_svfiprintf_r+0x152>
 800f82c:	2340      	movs	r3, #64	; 0x40
 800f82e:	eba0 000a 	sub.w	r0, r0, sl
 800f832:	fa03 f000 	lsl.w	r0, r3, r0
 800f836:	9b04      	ldr	r3, [sp, #16]
 800f838:	4303      	orrs	r3, r0
 800f83a:	3401      	adds	r4, #1
 800f83c:	9304      	str	r3, [sp, #16]
 800f83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f842:	4826      	ldr	r0, [pc, #152]	; (800f8dc <_svfiprintf_r+0x1f0>)
 800f844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f848:	2206      	movs	r2, #6
 800f84a:	f7f0 fcd9 	bl	8000200 <memchr>
 800f84e:	2800      	cmp	r0, #0
 800f850:	d038      	beq.n	800f8c4 <_svfiprintf_r+0x1d8>
 800f852:	4b23      	ldr	r3, [pc, #140]	; (800f8e0 <_svfiprintf_r+0x1f4>)
 800f854:	bb1b      	cbnz	r3, 800f89e <_svfiprintf_r+0x1b2>
 800f856:	9b03      	ldr	r3, [sp, #12]
 800f858:	3307      	adds	r3, #7
 800f85a:	f023 0307 	bic.w	r3, r3, #7
 800f85e:	3308      	adds	r3, #8
 800f860:	9303      	str	r3, [sp, #12]
 800f862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f864:	4433      	add	r3, r6
 800f866:	9309      	str	r3, [sp, #36]	; 0x24
 800f868:	e767      	b.n	800f73a <_svfiprintf_r+0x4e>
 800f86a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f86e:	460c      	mov	r4, r1
 800f870:	2001      	movs	r0, #1
 800f872:	e7a5      	b.n	800f7c0 <_svfiprintf_r+0xd4>
 800f874:	2300      	movs	r3, #0
 800f876:	3401      	adds	r4, #1
 800f878:	9305      	str	r3, [sp, #20]
 800f87a:	4619      	mov	r1, r3
 800f87c:	f04f 0c0a 	mov.w	ip, #10
 800f880:	4620      	mov	r0, r4
 800f882:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f886:	3a30      	subs	r2, #48	; 0x30
 800f888:	2a09      	cmp	r2, #9
 800f88a:	d903      	bls.n	800f894 <_svfiprintf_r+0x1a8>
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d0c5      	beq.n	800f81c <_svfiprintf_r+0x130>
 800f890:	9105      	str	r1, [sp, #20]
 800f892:	e7c3      	b.n	800f81c <_svfiprintf_r+0x130>
 800f894:	fb0c 2101 	mla	r1, ip, r1, r2
 800f898:	4604      	mov	r4, r0
 800f89a:	2301      	movs	r3, #1
 800f89c:	e7f0      	b.n	800f880 <_svfiprintf_r+0x194>
 800f89e:	ab03      	add	r3, sp, #12
 800f8a0:	9300      	str	r3, [sp, #0]
 800f8a2:	462a      	mov	r2, r5
 800f8a4:	4b0f      	ldr	r3, [pc, #60]	; (800f8e4 <_svfiprintf_r+0x1f8>)
 800f8a6:	a904      	add	r1, sp, #16
 800f8a8:	4638      	mov	r0, r7
 800f8aa:	f7fd ff71 	bl	800d790 <_printf_float>
 800f8ae:	1c42      	adds	r2, r0, #1
 800f8b0:	4606      	mov	r6, r0
 800f8b2:	d1d6      	bne.n	800f862 <_svfiprintf_r+0x176>
 800f8b4:	89ab      	ldrh	r3, [r5, #12]
 800f8b6:	065b      	lsls	r3, r3, #25
 800f8b8:	f53f af2c 	bmi.w	800f714 <_svfiprintf_r+0x28>
 800f8bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f8be:	b01d      	add	sp, #116	; 0x74
 800f8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8c4:	ab03      	add	r3, sp, #12
 800f8c6:	9300      	str	r3, [sp, #0]
 800f8c8:	462a      	mov	r2, r5
 800f8ca:	4b06      	ldr	r3, [pc, #24]	; (800f8e4 <_svfiprintf_r+0x1f8>)
 800f8cc:	a904      	add	r1, sp, #16
 800f8ce:	4638      	mov	r0, r7
 800f8d0:	f7fe fa02 	bl	800dcd8 <_printf_i>
 800f8d4:	e7eb      	b.n	800f8ae <_svfiprintf_r+0x1c2>
 800f8d6:	bf00      	nop
 800f8d8:	08010c94 	.word	0x08010c94
 800f8dc:	08010c9e 	.word	0x08010c9e
 800f8e0:	0800d791 	.word	0x0800d791
 800f8e4:	0800f635 	.word	0x0800f635
 800f8e8:	08010c9a 	.word	0x08010c9a

0800f8ec <__sfputc_r>:
 800f8ec:	6893      	ldr	r3, [r2, #8]
 800f8ee:	3b01      	subs	r3, #1
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	b410      	push	{r4}
 800f8f4:	6093      	str	r3, [r2, #8]
 800f8f6:	da08      	bge.n	800f90a <__sfputc_r+0x1e>
 800f8f8:	6994      	ldr	r4, [r2, #24]
 800f8fa:	42a3      	cmp	r3, r4
 800f8fc:	db01      	blt.n	800f902 <__sfputc_r+0x16>
 800f8fe:	290a      	cmp	r1, #10
 800f900:	d103      	bne.n	800f90a <__sfputc_r+0x1e>
 800f902:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f906:	f000 b98f 	b.w	800fc28 <__swbuf_r>
 800f90a:	6813      	ldr	r3, [r2, #0]
 800f90c:	1c58      	adds	r0, r3, #1
 800f90e:	6010      	str	r0, [r2, #0]
 800f910:	7019      	strb	r1, [r3, #0]
 800f912:	4608      	mov	r0, r1
 800f914:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f918:	4770      	bx	lr

0800f91a <__sfputs_r>:
 800f91a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f91c:	4606      	mov	r6, r0
 800f91e:	460f      	mov	r7, r1
 800f920:	4614      	mov	r4, r2
 800f922:	18d5      	adds	r5, r2, r3
 800f924:	42ac      	cmp	r4, r5
 800f926:	d101      	bne.n	800f92c <__sfputs_r+0x12>
 800f928:	2000      	movs	r0, #0
 800f92a:	e007      	b.n	800f93c <__sfputs_r+0x22>
 800f92c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f930:	463a      	mov	r2, r7
 800f932:	4630      	mov	r0, r6
 800f934:	f7ff ffda 	bl	800f8ec <__sfputc_r>
 800f938:	1c43      	adds	r3, r0, #1
 800f93a:	d1f3      	bne.n	800f924 <__sfputs_r+0xa>
 800f93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f940 <_vfiprintf_r>:
 800f940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f944:	460d      	mov	r5, r1
 800f946:	b09d      	sub	sp, #116	; 0x74
 800f948:	4614      	mov	r4, r2
 800f94a:	4698      	mov	r8, r3
 800f94c:	4606      	mov	r6, r0
 800f94e:	b118      	cbz	r0, 800f958 <_vfiprintf_r+0x18>
 800f950:	6983      	ldr	r3, [r0, #24]
 800f952:	b90b      	cbnz	r3, 800f958 <_vfiprintf_r+0x18>
 800f954:	f7ff fa22 	bl	800ed9c <__sinit>
 800f958:	4b89      	ldr	r3, [pc, #548]	; (800fb80 <_vfiprintf_r+0x240>)
 800f95a:	429d      	cmp	r5, r3
 800f95c:	d11b      	bne.n	800f996 <_vfiprintf_r+0x56>
 800f95e:	6875      	ldr	r5, [r6, #4]
 800f960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f962:	07d9      	lsls	r1, r3, #31
 800f964:	d405      	bmi.n	800f972 <_vfiprintf_r+0x32>
 800f966:	89ab      	ldrh	r3, [r5, #12]
 800f968:	059a      	lsls	r2, r3, #22
 800f96a:	d402      	bmi.n	800f972 <_vfiprintf_r+0x32>
 800f96c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f96e:	f7ff fab8 	bl	800eee2 <__retarget_lock_acquire_recursive>
 800f972:	89ab      	ldrh	r3, [r5, #12]
 800f974:	071b      	lsls	r3, r3, #28
 800f976:	d501      	bpl.n	800f97c <_vfiprintf_r+0x3c>
 800f978:	692b      	ldr	r3, [r5, #16]
 800f97a:	b9eb      	cbnz	r3, 800f9b8 <_vfiprintf_r+0x78>
 800f97c:	4629      	mov	r1, r5
 800f97e:	4630      	mov	r0, r6
 800f980:	f000 f9b6 	bl	800fcf0 <__swsetup_r>
 800f984:	b1c0      	cbz	r0, 800f9b8 <_vfiprintf_r+0x78>
 800f986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f988:	07dc      	lsls	r4, r3, #31
 800f98a:	d50e      	bpl.n	800f9aa <_vfiprintf_r+0x6a>
 800f98c:	f04f 30ff 	mov.w	r0, #4294967295
 800f990:	b01d      	add	sp, #116	; 0x74
 800f992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f996:	4b7b      	ldr	r3, [pc, #492]	; (800fb84 <_vfiprintf_r+0x244>)
 800f998:	429d      	cmp	r5, r3
 800f99a:	d101      	bne.n	800f9a0 <_vfiprintf_r+0x60>
 800f99c:	68b5      	ldr	r5, [r6, #8]
 800f99e:	e7df      	b.n	800f960 <_vfiprintf_r+0x20>
 800f9a0:	4b79      	ldr	r3, [pc, #484]	; (800fb88 <_vfiprintf_r+0x248>)
 800f9a2:	429d      	cmp	r5, r3
 800f9a4:	bf08      	it	eq
 800f9a6:	68f5      	ldreq	r5, [r6, #12]
 800f9a8:	e7da      	b.n	800f960 <_vfiprintf_r+0x20>
 800f9aa:	89ab      	ldrh	r3, [r5, #12]
 800f9ac:	0598      	lsls	r0, r3, #22
 800f9ae:	d4ed      	bmi.n	800f98c <_vfiprintf_r+0x4c>
 800f9b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9b2:	f7ff fa97 	bl	800eee4 <__retarget_lock_release_recursive>
 800f9b6:	e7e9      	b.n	800f98c <_vfiprintf_r+0x4c>
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	9309      	str	r3, [sp, #36]	; 0x24
 800f9bc:	2320      	movs	r3, #32
 800f9be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9c6:	2330      	movs	r3, #48	; 0x30
 800f9c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fb8c <_vfiprintf_r+0x24c>
 800f9cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9d0:	f04f 0901 	mov.w	r9, #1
 800f9d4:	4623      	mov	r3, r4
 800f9d6:	469a      	mov	sl, r3
 800f9d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9dc:	b10a      	cbz	r2, 800f9e2 <_vfiprintf_r+0xa2>
 800f9de:	2a25      	cmp	r2, #37	; 0x25
 800f9e0:	d1f9      	bne.n	800f9d6 <_vfiprintf_r+0x96>
 800f9e2:	ebba 0b04 	subs.w	fp, sl, r4
 800f9e6:	d00b      	beq.n	800fa00 <_vfiprintf_r+0xc0>
 800f9e8:	465b      	mov	r3, fp
 800f9ea:	4622      	mov	r2, r4
 800f9ec:	4629      	mov	r1, r5
 800f9ee:	4630      	mov	r0, r6
 800f9f0:	f7ff ff93 	bl	800f91a <__sfputs_r>
 800f9f4:	3001      	adds	r0, #1
 800f9f6:	f000 80aa 	beq.w	800fb4e <_vfiprintf_r+0x20e>
 800f9fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9fc:	445a      	add	r2, fp
 800f9fe:	9209      	str	r2, [sp, #36]	; 0x24
 800fa00:	f89a 3000 	ldrb.w	r3, [sl]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	f000 80a2 	beq.w	800fb4e <_vfiprintf_r+0x20e>
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	f04f 32ff 	mov.w	r2, #4294967295
 800fa10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa14:	f10a 0a01 	add.w	sl, sl, #1
 800fa18:	9304      	str	r3, [sp, #16]
 800fa1a:	9307      	str	r3, [sp, #28]
 800fa1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa20:	931a      	str	r3, [sp, #104]	; 0x68
 800fa22:	4654      	mov	r4, sl
 800fa24:	2205      	movs	r2, #5
 800fa26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa2a:	4858      	ldr	r0, [pc, #352]	; (800fb8c <_vfiprintf_r+0x24c>)
 800fa2c:	f7f0 fbe8 	bl	8000200 <memchr>
 800fa30:	9a04      	ldr	r2, [sp, #16]
 800fa32:	b9d8      	cbnz	r0, 800fa6c <_vfiprintf_r+0x12c>
 800fa34:	06d1      	lsls	r1, r2, #27
 800fa36:	bf44      	itt	mi
 800fa38:	2320      	movmi	r3, #32
 800fa3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa3e:	0713      	lsls	r3, r2, #28
 800fa40:	bf44      	itt	mi
 800fa42:	232b      	movmi	r3, #43	; 0x2b
 800fa44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa48:	f89a 3000 	ldrb.w	r3, [sl]
 800fa4c:	2b2a      	cmp	r3, #42	; 0x2a
 800fa4e:	d015      	beq.n	800fa7c <_vfiprintf_r+0x13c>
 800fa50:	9a07      	ldr	r2, [sp, #28]
 800fa52:	4654      	mov	r4, sl
 800fa54:	2000      	movs	r0, #0
 800fa56:	f04f 0c0a 	mov.w	ip, #10
 800fa5a:	4621      	mov	r1, r4
 800fa5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa60:	3b30      	subs	r3, #48	; 0x30
 800fa62:	2b09      	cmp	r3, #9
 800fa64:	d94e      	bls.n	800fb04 <_vfiprintf_r+0x1c4>
 800fa66:	b1b0      	cbz	r0, 800fa96 <_vfiprintf_r+0x156>
 800fa68:	9207      	str	r2, [sp, #28]
 800fa6a:	e014      	b.n	800fa96 <_vfiprintf_r+0x156>
 800fa6c:	eba0 0308 	sub.w	r3, r0, r8
 800fa70:	fa09 f303 	lsl.w	r3, r9, r3
 800fa74:	4313      	orrs	r3, r2
 800fa76:	9304      	str	r3, [sp, #16]
 800fa78:	46a2      	mov	sl, r4
 800fa7a:	e7d2      	b.n	800fa22 <_vfiprintf_r+0xe2>
 800fa7c:	9b03      	ldr	r3, [sp, #12]
 800fa7e:	1d19      	adds	r1, r3, #4
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	9103      	str	r1, [sp, #12]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	bfbb      	ittet	lt
 800fa88:	425b      	neglt	r3, r3
 800fa8a:	f042 0202 	orrlt.w	r2, r2, #2
 800fa8e:	9307      	strge	r3, [sp, #28]
 800fa90:	9307      	strlt	r3, [sp, #28]
 800fa92:	bfb8      	it	lt
 800fa94:	9204      	strlt	r2, [sp, #16]
 800fa96:	7823      	ldrb	r3, [r4, #0]
 800fa98:	2b2e      	cmp	r3, #46	; 0x2e
 800fa9a:	d10c      	bne.n	800fab6 <_vfiprintf_r+0x176>
 800fa9c:	7863      	ldrb	r3, [r4, #1]
 800fa9e:	2b2a      	cmp	r3, #42	; 0x2a
 800faa0:	d135      	bne.n	800fb0e <_vfiprintf_r+0x1ce>
 800faa2:	9b03      	ldr	r3, [sp, #12]
 800faa4:	1d1a      	adds	r2, r3, #4
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	9203      	str	r2, [sp, #12]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	bfb8      	it	lt
 800faae:	f04f 33ff 	movlt.w	r3, #4294967295
 800fab2:	3402      	adds	r4, #2
 800fab4:	9305      	str	r3, [sp, #20]
 800fab6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fb9c <_vfiprintf_r+0x25c>
 800faba:	7821      	ldrb	r1, [r4, #0]
 800fabc:	2203      	movs	r2, #3
 800fabe:	4650      	mov	r0, sl
 800fac0:	f7f0 fb9e 	bl	8000200 <memchr>
 800fac4:	b140      	cbz	r0, 800fad8 <_vfiprintf_r+0x198>
 800fac6:	2340      	movs	r3, #64	; 0x40
 800fac8:	eba0 000a 	sub.w	r0, r0, sl
 800facc:	fa03 f000 	lsl.w	r0, r3, r0
 800fad0:	9b04      	ldr	r3, [sp, #16]
 800fad2:	4303      	orrs	r3, r0
 800fad4:	3401      	adds	r4, #1
 800fad6:	9304      	str	r3, [sp, #16]
 800fad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fadc:	482c      	ldr	r0, [pc, #176]	; (800fb90 <_vfiprintf_r+0x250>)
 800fade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fae2:	2206      	movs	r2, #6
 800fae4:	f7f0 fb8c 	bl	8000200 <memchr>
 800fae8:	2800      	cmp	r0, #0
 800faea:	d03f      	beq.n	800fb6c <_vfiprintf_r+0x22c>
 800faec:	4b29      	ldr	r3, [pc, #164]	; (800fb94 <_vfiprintf_r+0x254>)
 800faee:	bb1b      	cbnz	r3, 800fb38 <_vfiprintf_r+0x1f8>
 800faf0:	9b03      	ldr	r3, [sp, #12]
 800faf2:	3307      	adds	r3, #7
 800faf4:	f023 0307 	bic.w	r3, r3, #7
 800faf8:	3308      	adds	r3, #8
 800fafa:	9303      	str	r3, [sp, #12]
 800fafc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fafe:	443b      	add	r3, r7
 800fb00:	9309      	str	r3, [sp, #36]	; 0x24
 800fb02:	e767      	b.n	800f9d4 <_vfiprintf_r+0x94>
 800fb04:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb08:	460c      	mov	r4, r1
 800fb0a:	2001      	movs	r0, #1
 800fb0c:	e7a5      	b.n	800fa5a <_vfiprintf_r+0x11a>
 800fb0e:	2300      	movs	r3, #0
 800fb10:	3401      	adds	r4, #1
 800fb12:	9305      	str	r3, [sp, #20]
 800fb14:	4619      	mov	r1, r3
 800fb16:	f04f 0c0a 	mov.w	ip, #10
 800fb1a:	4620      	mov	r0, r4
 800fb1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb20:	3a30      	subs	r2, #48	; 0x30
 800fb22:	2a09      	cmp	r2, #9
 800fb24:	d903      	bls.n	800fb2e <_vfiprintf_r+0x1ee>
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d0c5      	beq.n	800fab6 <_vfiprintf_r+0x176>
 800fb2a:	9105      	str	r1, [sp, #20]
 800fb2c:	e7c3      	b.n	800fab6 <_vfiprintf_r+0x176>
 800fb2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb32:	4604      	mov	r4, r0
 800fb34:	2301      	movs	r3, #1
 800fb36:	e7f0      	b.n	800fb1a <_vfiprintf_r+0x1da>
 800fb38:	ab03      	add	r3, sp, #12
 800fb3a:	9300      	str	r3, [sp, #0]
 800fb3c:	462a      	mov	r2, r5
 800fb3e:	4b16      	ldr	r3, [pc, #88]	; (800fb98 <_vfiprintf_r+0x258>)
 800fb40:	a904      	add	r1, sp, #16
 800fb42:	4630      	mov	r0, r6
 800fb44:	f7fd fe24 	bl	800d790 <_printf_float>
 800fb48:	4607      	mov	r7, r0
 800fb4a:	1c78      	adds	r0, r7, #1
 800fb4c:	d1d6      	bne.n	800fafc <_vfiprintf_r+0x1bc>
 800fb4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb50:	07d9      	lsls	r1, r3, #31
 800fb52:	d405      	bmi.n	800fb60 <_vfiprintf_r+0x220>
 800fb54:	89ab      	ldrh	r3, [r5, #12]
 800fb56:	059a      	lsls	r2, r3, #22
 800fb58:	d402      	bmi.n	800fb60 <_vfiprintf_r+0x220>
 800fb5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb5c:	f7ff f9c2 	bl	800eee4 <__retarget_lock_release_recursive>
 800fb60:	89ab      	ldrh	r3, [r5, #12]
 800fb62:	065b      	lsls	r3, r3, #25
 800fb64:	f53f af12 	bmi.w	800f98c <_vfiprintf_r+0x4c>
 800fb68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb6a:	e711      	b.n	800f990 <_vfiprintf_r+0x50>
 800fb6c:	ab03      	add	r3, sp, #12
 800fb6e:	9300      	str	r3, [sp, #0]
 800fb70:	462a      	mov	r2, r5
 800fb72:	4b09      	ldr	r3, [pc, #36]	; (800fb98 <_vfiprintf_r+0x258>)
 800fb74:	a904      	add	r1, sp, #16
 800fb76:	4630      	mov	r0, r6
 800fb78:	f7fe f8ae 	bl	800dcd8 <_printf_i>
 800fb7c:	e7e4      	b.n	800fb48 <_vfiprintf_r+0x208>
 800fb7e:	bf00      	nop
 800fb80:	08010af8 	.word	0x08010af8
 800fb84:	08010b18 	.word	0x08010b18
 800fb88:	08010ad8 	.word	0x08010ad8
 800fb8c:	08010c94 	.word	0x08010c94
 800fb90:	08010c9e 	.word	0x08010c9e
 800fb94:	0800d791 	.word	0x0800d791
 800fb98:	0800f91b 	.word	0x0800f91b
 800fb9c:	08010c9a 	.word	0x08010c9a

0800fba0 <__sread>:
 800fba0:	b510      	push	{r4, lr}
 800fba2:	460c      	mov	r4, r1
 800fba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fba8:	f000 fae6 	bl	8010178 <_read_r>
 800fbac:	2800      	cmp	r0, #0
 800fbae:	bfab      	itete	ge
 800fbb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fbb2:	89a3      	ldrhlt	r3, [r4, #12]
 800fbb4:	181b      	addge	r3, r3, r0
 800fbb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fbba:	bfac      	ite	ge
 800fbbc:	6563      	strge	r3, [r4, #84]	; 0x54
 800fbbe:	81a3      	strhlt	r3, [r4, #12]
 800fbc0:	bd10      	pop	{r4, pc}

0800fbc2 <__swrite>:
 800fbc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbc6:	461f      	mov	r7, r3
 800fbc8:	898b      	ldrh	r3, [r1, #12]
 800fbca:	05db      	lsls	r3, r3, #23
 800fbcc:	4605      	mov	r5, r0
 800fbce:	460c      	mov	r4, r1
 800fbd0:	4616      	mov	r6, r2
 800fbd2:	d505      	bpl.n	800fbe0 <__swrite+0x1e>
 800fbd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbd8:	2302      	movs	r3, #2
 800fbda:	2200      	movs	r2, #0
 800fbdc:	f000 f9f8 	bl	800ffd0 <_lseek_r>
 800fbe0:	89a3      	ldrh	r3, [r4, #12]
 800fbe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fbea:	81a3      	strh	r3, [r4, #12]
 800fbec:	4632      	mov	r2, r6
 800fbee:	463b      	mov	r3, r7
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbf6:	f000 b869 	b.w	800fccc <_write_r>

0800fbfa <__sseek>:
 800fbfa:	b510      	push	{r4, lr}
 800fbfc:	460c      	mov	r4, r1
 800fbfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc02:	f000 f9e5 	bl	800ffd0 <_lseek_r>
 800fc06:	1c43      	adds	r3, r0, #1
 800fc08:	89a3      	ldrh	r3, [r4, #12]
 800fc0a:	bf15      	itete	ne
 800fc0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fc0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fc12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fc16:	81a3      	strheq	r3, [r4, #12]
 800fc18:	bf18      	it	ne
 800fc1a:	81a3      	strhne	r3, [r4, #12]
 800fc1c:	bd10      	pop	{r4, pc}

0800fc1e <__sclose>:
 800fc1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc22:	f000 b8f1 	b.w	800fe08 <_close_r>
	...

0800fc28 <__swbuf_r>:
 800fc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc2a:	460e      	mov	r6, r1
 800fc2c:	4614      	mov	r4, r2
 800fc2e:	4605      	mov	r5, r0
 800fc30:	b118      	cbz	r0, 800fc3a <__swbuf_r+0x12>
 800fc32:	6983      	ldr	r3, [r0, #24]
 800fc34:	b90b      	cbnz	r3, 800fc3a <__swbuf_r+0x12>
 800fc36:	f7ff f8b1 	bl	800ed9c <__sinit>
 800fc3a:	4b21      	ldr	r3, [pc, #132]	; (800fcc0 <__swbuf_r+0x98>)
 800fc3c:	429c      	cmp	r4, r3
 800fc3e:	d12b      	bne.n	800fc98 <__swbuf_r+0x70>
 800fc40:	686c      	ldr	r4, [r5, #4]
 800fc42:	69a3      	ldr	r3, [r4, #24]
 800fc44:	60a3      	str	r3, [r4, #8]
 800fc46:	89a3      	ldrh	r3, [r4, #12]
 800fc48:	071a      	lsls	r2, r3, #28
 800fc4a:	d52f      	bpl.n	800fcac <__swbuf_r+0x84>
 800fc4c:	6923      	ldr	r3, [r4, #16]
 800fc4e:	b36b      	cbz	r3, 800fcac <__swbuf_r+0x84>
 800fc50:	6923      	ldr	r3, [r4, #16]
 800fc52:	6820      	ldr	r0, [r4, #0]
 800fc54:	1ac0      	subs	r0, r0, r3
 800fc56:	6963      	ldr	r3, [r4, #20]
 800fc58:	b2f6      	uxtb	r6, r6
 800fc5a:	4283      	cmp	r3, r0
 800fc5c:	4637      	mov	r7, r6
 800fc5e:	dc04      	bgt.n	800fc6a <__swbuf_r+0x42>
 800fc60:	4621      	mov	r1, r4
 800fc62:	4628      	mov	r0, r5
 800fc64:	f000 f966 	bl	800ff34 <_fflush_r>
 800fc68:	bb30      	cbnz	r0, 800fcb8 <__swbuf_r+0x90>
 800fc6a:	68a3      	ldr	r3, [r4, #8]
 800fc6c:	3b01      	subs	r3, #1
 800fc6e:	60a3      	str	r3, [r4, #8]
 800fc70:	6823      	ldr	r3, [r4, #0]
 800fc72:	1c5a      	adds	r2, r3, #1
 800fc74:	6022      	str	r2, [r4, #0]
 800fc76:	701e      	strb	r6, [r3, #0]
 800fc78:	6963      	ldr	r3, [r4, #20]
 800fc7a:	3001      	adds	r0, #1
 800fc7c:	4283      	cmp	r3, r0
 800fc7e:	d004      	beq.n	800fc8a <__swbuf_r+0x62>
 800fc80:	89a3      	ldrh	r3, [r4, #12]
 800fc82:	07db      	lsls	r3, r3, #31
 800fc84:	d506      	bpl.n	800fc94 <__swbuf_r+0x6c>
 800fc86:	2e0a      	cmp	r6, #10
 800fc88:	d104      	bne.n	800fc94 <__swbuf_r+0x6c>
 800fc8a:	4621      	mov	r1, r4
 800fc8c:	4628      	mov	r0, r5
 800fc8e:	f000 f951 	bl	800ff34 <_fflush_r>
 800fc92:	b988      	cbnz	r0, 800fcb8 <__swbuf_r+0x90>
 800fc94:	4638      	mov	r0, r7
 800fc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc98:	4b0a      	ldr	r3, [pc, #40]	; (800fcc4 <__swbuf_r+0x9c>)
 800fc9a:	429c      	cmp	r4, r3
 800fc9c:	d101      	bne.n	800fca2 <__swbuf_r+0x7a>
 800fc9e:	68ac      	ldr	r4, [r5, #8]
 800fca0:	e7cf      	b.n	800fc42 <__swbuf_r+0x1a>
 800fca2:	4b09      	ldr	r3, [pc, #36]	; (800fcc8 <__swbuf_r+0xa0>)
 800fca4:	429c      	cmp	r4, r3
 800fca6:	bf08      	it	eq
 800fca8:	68ec      	ldreq	r4, [r5, #12]
 800fcaa:	e7ca      	b.n	800fc42 <__swbuf_r+0x1a>
 800fcac:	4621      	mov	r1, r4
 800fcae:	4628      	mov	r0, r5
 800fcb0:	f000 f81e 	bl	800fcf0 <__swsetup_r>
 800fcb4:	2800      	cmp	r0, #0
 800fcb6:	d0cb      	beq.n	800fc50 <__swbuf_r+0x28>
 800fcb8:	f04f 37ff 	mov.w	r7, #4294967295
 800fcbc:	e7ea      	b.n	800fc94 <__swbuf_r+0x6c>
 800fcbe:	bf00      	nop
 800fcc0:	08010af8 	.word	0x08010af8
 800fcc4:	08010b18 	.word	0x08010b18
 800fcc8:	08010ad8 	.word	0x08010ad8

0800fccc <_write_r>:
 800fccc:	b538      	push	{r3, r4, r5, lr}
 800fcce:	4d07      	ldr	r5, [pc, #28]	; (800fcec <_write_r+0x20>)
 800fcd0:	4604      	mov	r4, r0
 800fcd2:	4608      	mov	r0, r1
 800fcd4:	4611      	mov	r1, r2
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	602a      	str	r2, [r5, #0]
 800fcda:	461a      	mov	r2, r3
 800fcdc:	f7f9 fd14 	bl	8009708 <_write>
 800fce0:	1c43      	adds	r3, r0, #1
 800fce2:	d102      	bne.n	800fcea <_write_r+0x1e>
 800fce4:	682b      	ldr	r3, [r5, #0]
 800fce6:	b103      	cbz	r3, 800fcea <_write_r+0x1e>
 800fce8:	6023      	str	r3, [r4, #0]
 800fcea:	bd38      	pop	{r3, r4, r5, pc}
 800fcec:	20008200 	.word	0x20008200

0800fcf0 <__swsetup_r>:
 800fcf0:	4b32      	ldr	r3, [pc, #200]	; (800fdbc <__swsetup_r+0xcc>)
 800fcf2:	b570      	push	{r4, r5, r6, lr}
 800fcf4:	681d      	ldr	r5, [r3, #0]
 800fcf6:	4606      	mov	r6, r0
 800fcf8:	460c      	mov	r4, r1
 800fcfa:	b125      	cbz	r5, 800fd06 <__swsetup_r+0x16>
 800fcfc:	69ab      	ldr	r3, [r5, #24]
 800fcfe:	b913      	cbnz	r3, 800fd06 <__swsetup_r+0x16>
 800fd00:	4628      	mov	r0, r5
 800fd02:	f7ff f84b 	bl	800ed9c <__sinit>
 800fd06:	4b2e      	ldr	r3, [pc, #184]	; (800fdc0 <__swsetup_r+0xd0>)
 800fd08:	429c      	cmp	r4, r3
 800fd0a:	d10f      	bne.n	800fd2c <__swsetup_r+0x3c>
 800fd0c:	686c      	ldr	r4, [r5, #4]
 800fd0e:	89a3      	ldrh	r3, [r4, #12]
 800fd10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd14:	0719      	lsls	r1, r3, #28
 800fd16:	d42c      	bmi.n	800fd72 <__swsetup_r+0x82>
 800fd18:	06dd      	lsls	r5, r3, #27
 800fd1a:	d411      	bmi.n	800fd40 <__swsetup_r+0x50>
 800fd1c:	2309      	movs	r3, #9
 800fd1e:	6033      	str	r3, [r6, #0]
 800fd20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fd24:	81a3      	strh	r3, [r4, #12]
 800fd26:	f04f 30ff 	mov.w	r0, #4294967295
 800fd2a:	e03e      	b.n	800fdaa <__swsetup_r+0xba>
 800fd2c:	4b25      	ldr	r3, [pc, #148]	; (800fdc4 <__swsetup_r+0xd4>)
 800fd2e:	429c      	cmp	r4, r3
 800fd30:	d101      	bne.n	800fd36 <__swsetup_r+0x46>
 800fd32:	68ac      	ldr	r4, [r5, #8]
 800fd34:	e7eb      	b.n	800fd0e <__swsetup_r+0x1e>
 800fd36:	4b24      	ldr	r3, [pc, #144]	; (800fdc8 <__swsetup_r+0xd8>)
 800fd38:	429c      	cmp	r4, r3
 800fd3a:	bf08      	it	eq
 800fd3c:	68ec      	ldreq	r4, [r5, #12]
 800fd3e:	e7e6      	b.n	800fd0e <__swsetup_r+0x1e>
 800fd40:	0758      	lsls	r0, r3, #29
 800fd42:	d512      	bpl.n	800fd6a <__swsetup_r+0x7a>
 800fd44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd46:	b141      	cbz	r1, 800fd5a <__swsetup_r+0x6a>
 800fd48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd4c:	4299      	cmp	r1, r3
 800fd4e:	d002      	beq.n	800fd56 <__swsetup_r+0x66>
 800fd50:	4630      	mov	r0, r6
 800fd52:	f7fd fb9d 	bl	800d490 <_free_r>
 800fd56:	2300      	movs	r3, #0
 800fd58:	6363      	str	r3, [r4, #52]	; 0x34
 800fd5a:	89a3      	ldrh	r3, [r4, #12]
 800fd5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fd60:	81a3      	strh	r3, [r4, #12]
 800fd62:	2300      	movs	r3, #0
 800fd64:	6063      	str	r3, [r4, #4]
 800fd66:	6923      	ldr	r3, [r4, #16]
 800fd68:	6023      	str	r3, [r4, #0]
 800fd6a:	89a3      	ldrh	r3, [r4, #12]
 800fd6c:	f043 0308 	orr.w	r3, r3, #8
 800fd70:	81a3      	strh	r3, [r4, #12]
 800fd72:	6923      	ldr	r3, [r4, #16]
 800fd74:	b94b      	cbnz	r3, 800fd8a <__swsetup_r+0x9a>
 800fd76:	89a3      	ldrh	r3, [r4, #12]
 800fd78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fd7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd80:	d003      	beq.n	800fd8a <__swsetup_r+0x9a>
 800fd82:	4621      	mov	r1, r4
 800fd84:	4630      	mov	r0, r6
 800fd86:	f000 f95b 	bl	8010040 <__smakebuf_r>
 800fd8a:	89a0      	ldrh	r0, [r4, #12]
 800fd8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd90:	f010 0301 	ands.w	r3, r0, #1
 800fd94:	d00a      	beq.n	800fdac <__swsetup_r+0xbc>
 800fd96:	2300      	movs	r3, #0
 800fd98:	60a3      	str	r3, [r4, #8]
 800fd9a:	6963      	ldr	r3, [r4, #20]
 800fd9c:	425b      	negs	r3, r3
 800fd9e:	61a3      	str	r3, [r4, #24]
 800fda0:	6923      	ldr	r3, [r4, #16]
 800fda2:	b943      	cbnz	r3, 800fdb6 <__swsetup_r+0xc6>
 800fda4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fda8:	d1ba      	bne.n	800fd20 <__swsetup_r+0x30>
 800fdaa:	bd70      	pop	{r4, r5, r6, pc}
 800fdac:	0781      	lsls	r1, r0, #30
 800fdae:	bf58      	it	pl
 800fdb0:	6963      	ldrpl	r3, [r4, #20]
 800fdb2:	60a3      	str	r3, [r4, #8]
 800fdb4:	e7f4      	b.n	800fda0 <__swsetup_r+0xb0>
 800fdb6:	2000      	movs	r0, #0
 800fdb8:	e7f7      	b.n	800fdaa <__swsetup_r+0xba>
 800fdba:	bf00      	nop
 800fdbc:	2000001c 	.word	0x2000001c
 800fdc0:	08010af8 	.word	0x08010af8
 800fdc4:	08010b18 	.word	0x08010b18
 800fdc8:	08010ad8 	.word	0x08010ad8

0800fdcc <__assert_func>:
 800fdcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fdce:	4614      	mov	r4, r2
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	4b09      	ldr	r3, [pc, #36]	; (800fdf8 <__assert_func+0x2c>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	4605      	mov	r5, r0
 800fdd8:	68d8      	ldr	r0, [r3, #12]
 800fdda:	b14c      	cbz	r4, 800fdf0 <__assert_func+0x24>
 800fddc:	4b07      	ldr	r3, [pc, #28]	; (800fdfc <__assert_func+0x30>)
 800fdde:	9100      	str	r1, [sp, #0]
 800fde0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fde4:	4906      	ldr	r1, [pc, #24]	; (800fe00 <__assert_func+0x34>)
 800fde6:	462b      	mov	r3, r5
 800fde8:	f000 f8e0 	bl	800ffac <fiprintf>
 800fdec:	f000 f9e3 	bl	80101b6 <abort>
 800fdf0:	4b04      	ldr	r3, [pc, #16]	; (800fe04 <__assert_func+0x38>)
 800fdf2:	461c      	mov	r4, r3
 800fdf4:	e7f3      	b.n	800fdde <__assert_func+0x12>
 800fdf6:	bf00      	nop
 800fdf8:	2000001c 	.word	0x2000001c
 800fdfc:	08010ca5 	.word	0x08010ca5
 800fe00:	08010cb2 	.word	0x08010cb2
 800fe04:	08010ce0 	.word	0x08010ce0

0800fe08 <_close_r>:
 800fe08:	b538      	push	{r3, r4, r5, lr}
 800fe0a:	4d06      	ldr	r5, [pc, #24]	; (800fe24 <_close_r+0x1c>)
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	4604      	mov	r4, r0
 800fe10:	4608      	mov	r0, r1
 800fe12:	602b      	str	r3, [r5, #0]
 800fe14:	f000 fa44 	bl	80102a0 <_close>
 800fe18:	1c43      	adds	r3, r0, #1
 800fe1a:	d102      	bne.n	800fe22 <_close_r+0x1a>
 800fe1c:	682b      	ldr	r3, [r5, #0]
 800fe1e:	b103      	cbz	r3, 800fe22 <_close_r+0x1a>
 800fe20:	6023      	str	r3, [r4, #0]
 800fe22:	bd38      	pop	{r3, r4, r5, pc}
 800fe24:	20008200 	.word	0x20008200

0800fe28 <__sflush_r>:
 800fe28:	898a      	ldrh	r2, [r1, #12]
 800fe2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe2e:	4605      	mov	r5, r0
 800fe30:	0710      	lsls	r0, r2, #28
 800fe32:	460c      	mov	r4, r1
 800fe34:	d458      	bmi.n	800fee8 <__sflush_r+0xc0>
 800fe36:	684b      	ldr	r3, [r1, #4]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	dc05      	bgt.n	800fe48 <__sflush_r+0x20>
 800fe3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	dc02      	bgt.n	800fe48 <__sflush_r+0x20>
 800fe42:	2000      	movs	r0, #0
 800fe44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe4a:	2e00      	cmp	r6, #0
 800fe4c:	d0f9      	beq.n	800fe42 <__sflush_r+0x1a>
 800fe4e:	2300      	movs	r3, #0
 800fe50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fe54:	682f      	ldr	r7, [r5, #0]
 800fe56:	602b      	str	r3, [r5, #0]
 800fe58:	d032      	beq.n	800fec0 <__sflush_r+0x98>
 800fe5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fe5c:	89a3      	ldrh	r3, [r4, #12]
 800fe5e:	075a      	lsls	r2, r3, #29
 800fe60:	d505      	bpl.n	800fe6e <__sflush_r+0x46>
 800fe62:	6863      	ldr	r3, [r4, #4]
 800fe64:	1ac0      	subs	r0, r0, r3
 800fe66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe68:	b10b      	cbz	r3, 800fe6e <__sflush_r+0x46>
 800fe6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe6c:	1ac0      	subs	r0, r0, r3
 800fe6e:	2300      	movs	r3, #0
 800fe70:	4602      	mov	r2, r0
 800fe72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe74:	6a21      	ldr	r1, [r4, #32]
 800fe76:	4628      	mov	r0, r5
 800fe78:	47b0      	blx	r6
 800fe7a:	1c43      	adds	r3, r0, #1
 800fe7c:	89a3      	ldrh	r3, [r4, #12]
 800fe7e:	d106      	bne.n	800fe8e <__sflush_r+0x66>
 800fe80:	6829      	ldr	r1, [r5, #0]
 800fe82:	291d      	cmp	r1, #29
 800fe84:	d82c      	bhi.n	800fee0 <__sflush_r+0xb8>
 800fe86:	4a2a      	ldr	r2, [pc, #168]	; (800ff30 <__sflush_r+0x108>)
 800fe88:	40ca      	lsrs	r2, r1
 800fe8a:	07d6      	lsls	r6, r2, #31
 800fe8c:	d528      	bpl.n	800fee0 <__sflush_r+0xb8>
 800fe8e:	2200      	movs	r2, #0
 800fe90:	6062      	str	r2, [r4, #4]
 800fe92:	04d9      	lsls	r1, r3, #19
 800fe94:	6922      	ldr	r2, [r4, #16]
 800fe96:	6022      	str	r2, [r4, #0]
 800fe98:	d504      	bpl.n	800fea4 <__sflush_r+0x7c>
 800fe9a:	1c42      	adds	r2, r0, #1
 800fe9c:	d101      	bne.n	800fea2 <__sflush_r+0x7a>
 800fe9e:	682b      	ldr	r3, [r5, #0]
 800fea0:	b903      	cbnz	r3, 800fea4 <__sflush_r+0x7c>
 800fea2:	6560      	str	r0, [r4, #84]	; 0x54
 800fea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fea6:	602f      	str	r7, [r5, #0]
 800fea8:	2900      	cmp	r1, #0
 800feaa:	d0ca      	beq.n	800fe42 <__sflush_r+0x1a>
 800feac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800feb0:	4299      	cmp	r1, r3
 800feb2:	d002      	beq.n	800feba <__sflush_r+0x92>
 800feb4:	4628      	mov	r0, r5
 800feb6:	f7fd faeb 	bl	800d490 <_free_r>
 800feba:	2000      	movs	r0, #0
 800febc:	6360      	str	r0, [r4, #52]	; 0x34
 800febe:	e7c1      	b.n	800fe44 <__sflush_r+0x1c>
 800fec0:	6a21      	ldr	r1, [r4, #32]
 800fec2:	2301      	movs	r3, #1
 800fec4:	4628      	mov	r0, r5
 800fec6:	47b0      	blx	r6
 800fec8:	1c41      	adds	r1, r0, #1
 800feca:	d1c7      	bne.n	800fe5c <__sflush_r+0x34>
 800fecc:	682b      	ldr	r3, [r5, #0]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d0c4      	beq.n	800fe5c <__sflush_r+0x34>
 800fed2:	2b1d      	cmp	r3, #29
 800fed4:	d001      	beq.n	800feda <__sflush_r+0xb2>
 800fed6:	2b16      	cmp	r3, #22
 800fed8:	d101      	bne.n	800fede <__sflush_r+0xb6>
 800feda:	602f      	str	r7, [r5, #0]
 800fedc:	e7b1      	b.n	800fe42 <__sflush_r+0x1a>
 800fede:	89a3      	ldrh	r3, [r4, #12]
 800fee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fee4:	81a3      	strh	r3, [r4, #12]
 800fee6:	e7ad      	b.n	800fe44 <__sflush_r+0x1c>
 800fee8:	690f      	ldr	r7, [r1, #16]
 800feea:	2f00      	cmp	r7, #0
 800feec:	d0a9      	beq.n	800fe42 <__sflush_r+0x1a>
 800feee:	0793      	lsls	r3, r2, #30
 800fef0:	680e      	ldr	r6, [r1, #0]
 800fef2:	bf08      	it	eq
 800fef4:	694b      	ldreq	r3, [r1, #20]
 800fef6:	600f      	str	r7, [r1, #0]
 800fef8:	bf18      	it	ne
 800fefa:	2300      	movne	r3, #0
 800fefc:	eba6 0807 	sub.w	r8, r6, r7
 800ff00:	608b      	str	r3, [r1, #8]
 800ff02:	f1b8 0f00 	cmp.w	r8, #0
 800ff06:	dd9c      	ble.n	800fe42 <__sflush_r+0x1a>
 800ff08:	6a21      	ldr	r1, [r4, #32]
 800ff0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ff0c:	4643      	mov	r3, r8
 800ff0e:	463a      	mov	r2, r7
 800ff10:	4628      	mov	r0, r5
 800ff12:	47b0      	blx	r6
 800ff14:	2800      	cmp	r0, #0
 800ff16:	dc06      	bgt.n	800ff26 <__sflush_r+0xfe>
 800ff18:	89a3      	ldrh	r3, [r4, #12]
 800ff1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff1e:	81a3      	strh	r3, [r4, #12]
 800ff20:	f04f 30ff 	mov.w	r0, #4294967295
 800ff24:	e78e      	b.n	800fe44 <__sflush_r+0x1c>
 800ff26:	4407      	add	r7, r0
 800ff28:	eba8 0800 	sub.w	r8, r8, r0
 800ff2c:	e7e9      	b.n	800ff02 <__sflush_r+0xda>
 800ff2e:	bf00      	nop
 800ff30:	20400001 	.word	0x20400001

0800ff34 <_fflush_r>:
 800ff34:	b538      	push	{r3, r4, r5, lr}
 800ff36:	690b      	ldr	r3, [r1, #16]
 800ff38:	4605      	mov	r5, r0
 800ff3a:	460c      	mov	r4, r1
 800ff3c:	b913      	cbnz	r3, 800ff44 <_fflush_r+0x10>
 800ff3e:	2500      	movs	r5, #0
 800ff40:	4628      	mov	r0, r5
 800ff42:	bd38      	pop	{r3, r4, r5, pc}
 800ff44:	b118      	cbz	r0, 800ff4e <_fflush_r+0x1a>
 800ff46:	6983      	ldr	r3, [r0, #24]
 800ff48:	b90b      	cbnz	r3, 800ff4e <_fflush_r+0x1a>
 800ff4a:	f7fe ff27 	bl	800ed9c <__sinit>
 800ff4e:	4b14      	ldr	r3, [pc, #80]	; (800ffa0 <_fflush_r+0x6c>)
 800ff50:	429c      	cmp	r4, r3
 800ff52:	d11b      	bne.n	800ff8c <_fflush_r+0x58>
 800ff54:	686c      	ldr	r4, [r5, #4]
 800ff56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d0ef      	beq.n	800ff3e <_fflush_r+0xa>
 800ff5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ff60:	07d0      	lsls	r0, r2, #31
 800ff62:	d404      	bmi.n	800ff6e <_fflush_r+0x3a>
 800ff64:	0599      	lsls	r1, r3, #22
 800ff66:	d402      	bmi.n	800ff6e <_fflush_r+0x3a>
 800ff68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff6a:	f7fe ffba 	bl	800eee2 <__retarget_lock_acquire_recursive>
 800ff6e:	4628      	mov	r0, r5
 800ff70:	4621      	mov	r1, r4
 800ff72:	f7ff ff59 	bl	800fe28 <__sflush_r>
 800ff76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff78:	07da      	lsls	r2, r3, #31
 800ff7a:	4605      	mov	r5, r0
 800ff7c:	d4e0      	bmi.n	800ff40 <_fflush_r+0xc>
 800ff7e:	89a3      	ldrh	r3, [r4, #12]
 800ff80:	059b      	lsls	r3, r3, #22
 800ff82:	d4dd      	bmi.n	800ff40 <_fflush_r+0xc>
 800ff84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff86:	f7fe ffad 	bl	800eee4 <__retarget_lock_release_recursive>
 800ff8a:	e7d9      	b.n	800ff40 <_fflush_r+0xc>
 800ff8c:	4b05      	ldr	r3, [pc, #20]	; (800ffa4 <_fflush_r+0x70>)
 800ff8e:	429c      	cmp	r4, r3
 800ff90:	d101      	bne.n	800ff96 <_fflush_r+0x62>
 800ff92:	68ac      	ldr	r4, [r5, #8]
 800ff94:	e7df      	b.n	800ff56 <_fflush_r+0x22>
 800ff96:	4b04      	ldr	r3, [pc, #16]	; (800ffa8 <_fflush_r+0x74>)
 800ff98:	429c      	cmp	r4, r3
 800ff9a:	bf08      	it	eq
 800ff9c:	68ec      	ldreq	r4, [r5, #12]
 800ff9e:	e7da      	b.n	800ff56 <_fflush_r+0x22>
 800ffa0:	08010af8 	.word	0x08010af8
 800ffa4:	08010b18 	.word	0x08010b18
 800ffa8:	08010ad8 	.word	0x08010ad8

0800ffac <fiprintf>:
 800ffac:	b40e      	push	{r1, r2, r3}
 800ffae:	b503      	push	{r0, r1, lr}
 800ffb0:	4601      	mov	r1, r0
 800ffb2:	ab03      	add	r3, sp, #12
 800ffb4:	4805      	ldr	r0, [pc, #20]	; (800ffcc <fiprintf+0x20>)
 800ffb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffba:	6800      	ldr	r0, [r0, #0]
 800ffbc:	9301      	str	r3, [sp, #4]
 800ffbe:	f7ff fcbf 	bl	800f940 <_vfiprintf_r>
 800ffc2:	b002      	add	sp, #8
 800ffc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffc8:	b003      	add	sp, #12
 800ffca:	4770      	bx	lr
 800ffcc:	2000001c 	.word	0x2000001c

0800ffd0 <_lseek_r>:
 800ffd0:	b538      	push	{r3, r4, r5, lr}
 800ffd2:	4d07      	ldr	r5, [pc, #28]	; (800fff0 <_lseek_r+0x20>)
 800ffd4:	4604      	mov	r4, r0
 800ffd6:	4608      	mov	r0, r1
 800ffd8:	4611      	mov	r1, r2
 800ffda:	2200      	movs	r2, #0
 800ffdc:	602a      	str	r2, [r5, #0]
 800ffde:	461a      	mov	r2, r3
 800ffe0:	f000 f986 	bl	80102f0 <_lseek>
 800ffe4:	1c43      	adds	r3, r0, #1
 800ffe6:	d102      	bne.n	800ffee <_lseek_r+0x1e>
 800ffe8:	682b      	ldr	r3, [r5, #0]
 800ffea:	b103      	cbz	r3, 800ffee <_lseek_r+0x1e>
 800ffec:	6023      	str	r3, [r4, #0]
 800ffee:	bd38      	pop	{r3, r4, r5, pc}
 800fff0:	20008200 	.word	0x20008200

0800fff4 <__swhatbuf_r>:
 800fff4:	b570      	push	{r4, r5, r6, lr}
 800fff6:	460e      	mov	r6, r1
 800fff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fffc:	2900      	cmp	r1, #0
 800fffe:	b096      	sub	sp, #88	; 0x58
 8010000:	4614      	mov	r4, r2
 8010002:	461d      	mov	r5, r3
 8010004:	da08      	bge.n	8010018 <__swhatbuf_r+0x24>
 8010006:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801000a:	2200      	movs	r2, #0
 801000c:	602a      	str	r2, [r5, #0]
 801000e:	061a      	lsls	r2, r3, #24
 8010010:	d410      	bmi.n	8010034 <__swhatbuf_r+0x40>
 8010012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010016:	e00e      	b.n	8010036 <__swhatbuf_r+0x42>
 8010018:	466a      	mov	r2, sp
 801001a:	f000 f8d3 	bl	80101c4 <_fstat_r>
 801001e:	2800      	cmp	r0, #0
 8010020:	dbf1      	blt.n	8010006 <__swhatbuf_r+0x12>
 8010022:	9a01      	ldr	r2, [sp, #4]
 8010024:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010028:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801002c:	425a      	negs	r2, r3
 801002e:	415a      	adcs	r2, r3
 8010030:	602a      	str	r2, [r5, #0]
 8010032:	e7ee      	b.n	8010012 <__swhatbuf_r+0x1e>
 8010034:	2340      	movs	r3, #64	; 0x40
 8010036:	2000      	movs	r0, #0
 8010038:	6023      	str	r3, [r4, #0]
 801003a:	b016      	add	sp, #88	; 0x58
 801003c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010040 <__smakebuf_r>:
 8010040:	898b      	ldrh	r3, [r1, #12]
 8010042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010044:	079d      	lsls	r5, r3, #30
 8010046:	4606      	mov	r6, r0
 8010048:	460c      	mov	r4, r1
 801004a:	d507      	bpl.n	801005c <__smakebuf_r+0x1c>
 801004c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010050:	6023      	str	r3, [r4, #0]
 8010052:	6123      	str	r3, [r4, #16]
 8010054:	2301      	movs	r3, #1
 8010056:	6163      	str	r3, [r4, #20]
 8010058:	b002      	add	sp, #8
 801005a:	bd70      	pop	{r4, r5, r6, pc}
 801005c:	ab01      	add	r3, sp, #4
 801005e:	466a      	mov	r2, sp
 8010060:	f7ff ffc8 	bl	800fff4 <__swhatbuf_r>
 8010064:	9900      	ldr	r1, [sp, #0]
 8010066:	4605      	mov	r5, r0
 8010068:	4630      	mov	r0, r6
 801006a:	f7fd fa7d 	bl	800d568 <_malloc_r>
 801006e:	b948      	cbnz	r0, 8010084 <__smakebuf_r+0x44>
 8010070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010074:	059a      	lsls	r2, r3, #22
 8010076:	d4ef      	bmi.n	8010058 <__smakebuf_r+0x18>
 8010078:	f023 0303 	bic.w	r3, r3, #3
 801007c:	f043 0302 	orr.w	r3, r3, #2
 8010080:	81a3      	strh	r3, [r4, #12]
 8010082:	e7e3      	b.n	801004c <__smakebuf_r+0xc>
 8010084:	4b0d      	ldr	r3, [pc, #52]	; (80100bc <__smakebuf_r+0x7c>)
 8010086:	62b3      	str	r3, [r6, #40]	; 0x28
 8010088:	89a3      	ldrh	r3, [r4, #12]
 801008a:	6020      	str	r0, [r4, #0]
 801008c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010090:	81a3      	strh	r3, [r4, #12]
 8010092:	9b00      	ldr	r3, [sp, #0]
 8010094:	6163      	str	r3, [r4, #20]
 8010096:	9b01      	ldr	r3, [sp, #4]
 8010098:	6120      	str	r0, [r4, #16]
 801009a:	b15b      	cbz	r3, 80100b4 <__smakebuf_r+0x74>
 801009c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100a0:	4630      	mov	r0, r6
 80100a2:	f000 f8a1 	bl	80101e8 <_isatty_r>
 80100a6:	b128      	cbz	r0, 80100b4 <__smakebuf_r+0x74>
 80100a8:	89a3      	ldrh	r3, [r4, #12]
 80100aa:	f023 0303 	bic.w	r3, r3, #3
 80100ae:	f043 0301 	orr.w	r3, r3, #1
 80100b2:	81a3      	strh	r3, [r4, #12]
 80100b4:	89a0      	ldrh	r0, [r4, #12]
 80100b6:	4305      	orrs	r5, r0
 80100b8:	81a5      	strh	r5, [r4, #12]
 80100ba:	e7cd      	b.n	8010058 <__smakebuf_r+0x18>
 80100bc:	0800ed35 	.word	0x0800ed35

080100c0 <__ascii_mbtowc>:
 80100c0:	b082      	sub	sp, #8
 80100c2:	b901      	cbnz	r1, 80100c6 <__ascii_mbtowc+0x6>
 80100c4:	a901      	add	r1, sp, #4
 80100c6:	b142      	cbz	r2, 80100da <__ascii_mbtowc+0x1a>
 80100c8:	b14b      	cbz	r3, 80100de <__ascii_mbtowc+0x1e>
 80100ca:	7813      	ldrb	r3, [r2, #0]
 80100cc:	600b      	str	r3, [r1, #0]
 80100ce:	7812      	ldrb	r2, [r2, #0]
 80100d0:	1e10      	subs	r0, r2, #0
 80100d2:	bf18      	it	ne
 80100d4:	2001      	movne	r0, #1
 80100d6:	b002      	add	sp, #8
 80100d8:	4770      	bx	lr
 80100da:	4610      	mov	r0, r2
 80100dc:	e7fb      	b.n	80100d6 <__ascii_mbtowc+0x16>
 80100de:	f06f 0001 	mvn.w	r0, #1
 80100e2:	e7f8      	b.n	80100d6 <__ascii_mbtowc+0x16>

080100e4 <memmove>:
 80100e4:	4288      	cmp	r0, r1
 80100e6:	b510      	push	{r4, lr}
 80100e8:	eb01 0402 	add.w	r4, r1, r2
 80100ec:	d902      	bls.n	80100f4 <memmove+0x10>
 80100ee:	4284      	cmp	r4, r0
 80100f0:	4623      	mov	r3, r4
 80100f2:	d807      	bhi.n	8010104 <memmove+0x20>
 80100f4:	1e43      	subs	r3, r0, #1
 80100f6:	42a1      	cmp	r1, r4
 80100f8:	d008      	beq.n	801010c <memmove+0x28>
 80100fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010102:	e7f8      	b.n	80100f6 <memmove+0x12>
 8010104:	4402      	add	r2, r0
 8010106:	4601      	mov	r1, r0
 8010108:	428a      	cmp	r2, r1
 801010a:	d100      	bne.n	801010e <memmove+0x2a>
 801010c:	bd10      	pop	{r4, pc}
 801010e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010112:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010116:	e7f7      	b.n	8010108 <memmove+0x24>

08010118 <_realloc_r>:
 8010118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801011c:	4680      	mov	r8, r0
 801011e:	4614      	mov	r4, r2
 8010120:	460e      	mov	r6, r1
 8010122:	b921      	cbnz	r1, 801012e <_realloc_r+0x16>
 8010124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010128:	4611      	mov	r1, r2
 801012a:	f7fd ba1d 	b.w	800d568 <_malloc_r>
 801012e:	b92a      	cbnz	r2, 801013c <_realloc_r+0x24>
 8010130:	f7fd f9ae 	bl	800d490 <_free_r>
 8010134:	4625      	mov	r5, r4
 8010136:	4628      	mov	r0, r5
 8010138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801013c:	f000 f864 	bl	8010208 <_malloc_usable_size_r>
 8010140:	4284      	cmp	r4, r0
 8010142:	4607      	mov	r7, r0
 8010144:	d802      	bhi.n	801014c <_realloc_r+0x34>
 8010146:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801014a:	d812      	bhi.n	8010172 <_realloc_r+0x5a>
 801014c:	4621      	mov	r1, r4
 801014e:	4640      	mov	r0, r8
 8010150:	f7fd fa0a 	bl	800d568 <_malloc_r>
 8010154:	4605      	mov	r5, r0
 8010156:	2800      	cmp	r0, #0
 8010158:	d0ed      	beq.n	8010136 <_realloc_r+0x1e>
 801015a:	42bc      	cmp	r4, r7
 801015c:	4622      	mov	r2, r4
 801015e:	4631      	mov	r1, r6
 8010160:	bf28      	it	cs
 8010162:	463a      	movcs	r2, r7
 8010164:	f7fd f97e 	bl	800d464 <memcpy>
 8010168:	4631      	mov	r1, r6
 801016a:	4640      	mov	r0, r8
 801016c:	f7fd f990 	bl	800d490 <_free_r>
 8010170:	e7e1      	b.n	8010136 <_realloc_r+0x1e>
 8010172:	4635      	mov	r5, r6
 8010174:	e7df      	b.n	8010136 <_realloc_r+0x1e>
	...

08010178 <_read_r>:
 8010178:	b538      	push	{r3, r4, r5, lr}
 801017a:	4d07      	ldr	r5, [pc, #28]	; (8010198 <_read_r+0x20>)
 801017c:	4604      	mov	r4, r0
 801017e:	4608      	mov	r0, r1
 8010180:	4611      	mov	r1, r2
 8010182:	2200      	movs	r2, #0
 8010184:	602a      	str	r2, [r5, #0]
 8010186:	461a      	mov	r2, r3
 8010188:	f000 f8ba 	bl	8010300 <_read>
 801018c:	1c43      	adds	r3, r0, #1
 801018e:	d102      	bne.n	8010196 <_read_r+0x1e>
 8010190:	682b      	ldr	r3, [r5, #0]
 8010192:	b103      	cbz	r3, 8010196 <_read_r+0x1e>
 8010194:	6023      	str	r3, [r4, #0]
 8010196:	bd38      	pop	{r3, r4, r5, pc}
 8010198:	20008200 	.word	0x20008200

0801019c <__ascii_wctomb>:
 801019c:	b149      	cbz	r1, 80101b2 <__ascii_wctomb+0x16>
 801019e:	2aff      	cmp	r2, #255	; 0xff
 80101a0:	bf85      	ittet	hi
 80101a2:	238a      	movhi	r3, #138	; 0x8a
 80101a4:	6003      	strhi	r3, [r0, #0]
 80101a6:	700a      	strbls	r2, [r1, #0]
 80101a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80101ac:	bf98      	it	ls
 80101ae:	2001      	movls	r0, #1
 80101b0:	4770      	bx	lr
 80101b2:	4608      	mov	r0, r1
 80101b4:	4770      	bx	lr

080101b6 <abort>:
 80101b6:	b508      	push	{r3, lr}
 80101b8:	2006      	movs	r0, #6
 80101ba:	f000 f855 	bl	8010268 <raise>
 80101be:	2001      	movs	r0, #1
 80101c0:	f000 f8b4 	bl	801032c <_exit>

080101c4 <_fstat_r>:
 80101c4:	b538      	push	{r3, r4, r5, lr}
 80101c6:	4d07      	ldr	r5, [pc, #28]	; (80101e4 <_fstat_r+0x20>)
 80101c8:	2300      	movs	r3, #0
 80101ca:	4604      	mov	r4, r0
 80101cc:	4608      	mov	r0, r1
 80101ce:	4611      	mov	r1, r2
 80101d0:	602b      	str	r3, [r5, #0]
 80101d2:	f000 f86d 	bl	80102b0 <_fstat>
 80101d6:	1c43      	adds	r3, r0, #1
 80101d8:	d102      	bne.n	80101e0 <_fstat_r+0x1c>
 80101da:	682b      	ldr	r3, [r5, #0]
 80101dc:	b103      	cbz	r3, 80101e0 <_fstat_r+0x1c>
 80101de:	6023      	str	r3, [r4, #0]
 80101e0:	bd38      	pop	{r3, r4, r5, pc}
 80101e2:	bf00      	nop
 80101e4:	20008200 	.word	0x20008200

080101e8 <_isatty_r>:
 80101e8:	b538      	push	{r3, r4, r5, lr}
 80101ea:	4d06      	ldr	r5, [pc, #24]	; (8010204 <_isatty_r+0x1c>)
 80101ec:	2300      	movs	r3, #0
 80101ee:	4604      	mov	r4, r0
 80101f0:	4608      	mov	r0, r1
 80101f2:	602b      	str	r3, [r5, #0]
 80101f4:	f000 f86c 	bl	80102d0 <_isatty>
 80101f8:	1c43      	adds	r3, r0, #1
 80101fa:	d102      	bne.n	8010202 <_isatty_r+0x1a>
 80101fc:	682b      	ldr	r3, [r5, #0]
 80101fe:	b103      	cbz	r3, 8010202 <_isatty_r+0x1a>
 8010200:	6023      	str	r3, [r4, #0]
 8010202:	bd38      	pop	{r3, r4, r5, pc}
 8010204:	20008200 	.word	0x20008200

08010208 <_malloc_usable_size_r>:
 8010208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801020c:	1f18      	subs	r0, r3, #4
 801020e:	2b00      	cmp	r3, #0
 8010210:	bfbc      	itt	lt
 8010212:	580b      	ldrlt	r3, [r1, r0]
 8010214:	18c0      	addlt	r0, r0, r3
 8010216:	4770      	bx	lr

08010218 <_raise_r>:
 8010218:	291f      	cmp	r1, #31
 801021a:	b538      	push	{r3, r4, r5, lr}
 801021c:	4604      	mov	r4, r0
 801021e:	460d      	mov	r5, r1
 8010220:	d904      	bls.n	801022c <_raise_r+0x14>
 8010222:	2316      	movs	r3, #22
 8010224:	6003      	str	r3, [r0, #0]
 8010226:	f04f 30ff 	mov.w	r0, #4294967295
 801022a:	bd38      	pop	{r3, r4, r5, pc}
 801022c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801022e:	b112      	cbz	r2, 8010236 <_raise_r+0x1e>
 8010230:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010234:	b94b      	cbnz	r3, 801024a <_raise_r+0x32>
 8010236:	4620      	mov	r0, r4
 8010238:	f000 f830 	bl	801029c <_getpid_r>
 801023c:	462a      	mov	r2, r5
 801023e:	4601      	mov	r1, r0
 8010240:	4620      	mov	r0, r4
 8010242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010246:	f000 b817 	b.w	8010278 <_kill_r>
 801024a:	2b01      	cmp	r3, #1
 801024c:	d00a      	beq.n	8010264 <_raise_r+0x4c>
 801024e:	1c59      	adds	r1, r3, #1
 8010250:	d103      	bne.n	801025a <_raise_r+0x42>
 8010252:	2316      	movs	r3, #22
 8010254:	6003      	str	r3, [r0, #0]
 8010256:	2001      	movs	r0, #1
 8010258:	e7e7      	b.n	801022a <_raise_r+0x12>
 801025a:	2400      	movs	r4, #0
 801025c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010260:	4628      	mov	r0, r5
 8010262:	4798      	blx	r3
 8010264:	2000      	movs	r0, #0
 8010266:	e7e0      	b.n	801022a <_raise_r+0x12>

08010268 <raise>:
 8010268:	4b02      	ldr	r3, [pc, #8]	; (8010274 <raise+0xc>)
 801026a:	4601      	mov	r1, r0
 801026c:	6818      	ldr	r0, [r3, #0]
 801026e:	f7ff bfd3 	b.w	8010218 <_raise_r>
 8010272:	bf00      	nop
 8010274:	2000001c 	.word	0x2000001c

08010278 <_kill_r>:
 8010278:	b538      	push	{r3, r4, r5, lr}
 801027a:	4d07      	ldr	r5, [pc, #28]	; (8010298 <_kill_r+0x20>)
 801027c:	2300      	movs	r3, #0
 801027e:	4604      	mov	r4, r0
 8010280:	4608      	mov	r0, r1
 8010282:	4611      	mov	r1, r2
 8010284:	602b      	str	r3, [r5, #0]
 8010286:	f000 f82b 	bl	80102e0 <_kill>
 801028a:	1c43      	adds	r3, r0, #1
 801028c:	d102      	bne.n	8010294 <_kill_r+0x1c>
 801028e:	682b      	ldr	r3, [r5, #0]
 8010290:	b103      	cbz	r3, 8010294 <_kill_r+0x1c>
 8010292:	6023      	str	r3, [r4, #0]
 8010294:	bd38      	pop	{r3, r4, r5, pc}
 8010296:	bf00      	nop
 8010298:	20008200 	.word	0x20008200

0801029c <_getpid_r>:
 801029c:	f000 b810 	b.w	80102c0 <_getpid>

080102a0 <_close>:
 80102a0:	4b02      	ldr	r3, [pc, #8]	; (80102ac <_close+0xc>)
 80102a2:	2258      	movs	r2, #88	; 0x58
 80102a4:	601a      	str	r2, [r3, #0]
 80102a6:	f04f 30ff 	mov.w	r0, #4294967295
 80102aa:	4770      	bx	lr
 80102ac:	20008200 	.word	0x20008200

080102b0 <_fstat>:
 80102b0:	4b02      	ldr	r3, [pc, #8]	; (80102bc <_fstat+0xc>)
 80102b2:	2258      	movs	r2, #88	; 0x58
 80102b4:	601a      	str	r2, [r3, #0]
 80102b6:	f04f 30ff 	mov.w	r0, #4294967295
 80102ba:	4770      	bx	lr
 80102bc:	20008200 	.word	0x20008200

080102c0 <_getpid>:
 80102c0:	4b02      	ldr	r3, [pc, #8]	; (80102cc <_getpid+0xc>)
 80102c2:	2258      	movs	r2, #88	; 0x58
 80102c4:	601a      	str	r2, [r3, #0]
 80102c6:	f04f 30ff 	mov.w	r0, #4294967295
 80102ca:	4770      	bx	lr
 80102cc:	20008200 	.word	0x20008200

080102d0 <_isatty>:
 80102d0:	4b02      	ldr	r3, [pc, #8]	; (80102dc <_isatty+0xc>)
 80102d2:	2258      	movs	r2, #88	; 0x58
 80102d4:	601a      	str	r2, [r3, #0]
 80102d6:	2000      	movs	r0, #0
 80102d8:	4770      	bx	lr
 80102da:	bf00      	nop
 80102dc:	20008200 	.word	0x20008200

080102e0 <_kill>:
 80102e0:	4b02      	ldr	r3, [pc, #8]	; (80102ec <_kill+0xc>)
 80102e2:	2258      	movs	r2, #88	; 0x58
 80102e4:	601a      	str	r2, [r3, #0]
 80102e6:	f04f 30ff 	mov.w	r0, #4294967295
 80102ea:	4770      	bx	lr
 80102ec:	20008200 	.word	0x20008200

080102f0 <_lseek>:
 80102f0:	4b02      	ldr	r3, [pc, #8]	; (80102fc <_lseek+0xc>)
 80102f2:	2258      	movs	r2, #88	; 0x58
 80102f4:	601a      	str	r2, [r3, #0]
 80102f6:	f04f 30ff 	mov.w	r0, #4294967295
 80102fa:	4770      	bx	lr
 80102fc:	20008200 	.word	0x20008200

08010300 <_read>:
 8010300:	4b02      	ldr	r3, [pc, #8]	; (801030c <_read+0xc>)
 8010302:	2258      	movs	r2, #88	; 0x58
 8010304:	601a      	str	r2, [r3, #0]
 8010306:	f04f 30ff 	mov.w	r0, #4294967295
 801030a:	4770      	bx	lr
 801030c:	20008200 	.word	0x20008200

08010310 <_sbrk>:
 8010310:	4a04      	ldr	r2, [pc, #16]	; (8010324 <_sbrk+0x14>)
 8010312:	6811      	ldr	r1, [r2, #0]
 8010314:	4603      	mov	r3, r0
 8010316:	b909      	cbnz	r1, 801031c <_sbrk+0xc>
 8010318:	4903      	ldr	r1, [pc, #12]	; (8010328 <_sbrk+0x18>)
 801031a:	6011      	str	r1, [r2, #0]
 801031c:	6810      	ldr	r0, [r2, #0]
 801031e:	4403      	add	r3, r0
 8010320:	6013      	str	r3, [r2, #0]
 8010322:	4770      	bx	lr
 8010324:	20008204 	.word	0x20008204
 8010328:	20008208 	.word	0x20008208

0801032c <_exit>:
 801032c:	e7fe      	b.n	801032c <_exit>
	...

08010330 <_init>:
 8010330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010332:	bf00      	nop
 8010334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010336:	bc08      	pop	{r3}
 8010338:	469e      	mov	lr, r3
 801033a:	4770      	bx	lr

0801033c <_fini>:
 801033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801033e:	bf00      	nop
 8010340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010342:	bc08      	pop	{r3}
 8010344:	469e      	mov	lr, r3
 8010346:	4770      	bx	lr


OBC_SDK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe38  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000854  0800ffe8  0800ffe8  0001ffe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801083c  0801083c  0002083c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08010840  08010840  00020840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  20000000  08010844  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000301ec  2**0
                  CONTENTS
  7 .bss          0000801c  200001ec  200001ec  000301ec  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  20008208  20008208  000301ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002391e  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005179  00000000  00000000  00053b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001de0  00000000  00000000  00058cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001b88  00000000  00000000  0005aa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000b8d2  00000000  00000000  0005c620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a5a3  00000000  00000000  00067ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f5b2d  00000000  00000000  00092495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00187fc2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008d78  00000000  00000000  00188014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000b4  00000000  00000000  00190d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001c7  00000000  00000000  00190e40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ffd0 	.word	0x0800ffd0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	0800ffd0 	.word	0x0800ffd0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <Main_Task>:
bool LOW_POWER_MODE = 0;

/*
 * @brief Main Task/Thread
 */
void Main_Task(void const * argument){
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b08f      	sub	sp, #60	; 0x3c
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
    debug_printf("Starting Main function.\r\n");
 8000bd0:	4878      	ldr	r0, [pc, #480]	; (8000db4 <Main_Task+0x1ec>)
 8000bd2:	f002 fd13 	bl	80035fc <debug_printf>

    debug_led_green(5,500);
 8000bd6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bda:	2005      	movs	r0, #5
 8000bdc:	f002 fd74 	bl	80036c8 <debug_led_green>
    //Initialize Mutexes with CMSIS RTOS
    // EPS I2C
    osMutexDef(EPS_I2C_Mutex);
 8000be0:	2300      	movs	r3, #0
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
    EPS_I2C_Mutex = osMutexCreate(osMutex(EPS_I2C_Mutex));
 8000be4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000be8:	4618      	mov	r0, r3
 8000bea:	f009 fc9a 	bl	800a522 <osMutexCreate>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4a71      	ldr	r2, [pc, #452]	; (8000db8 <Main_Task+0x1f0>)
 8000bf2:	6013      	str	r3, [r2, #0]

    // UART
    osMutexDef(UART_Mutex);
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    UART_Mutex = osMutexCreate(osMutex(UART_Mutex));
 8000bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f009 fc90 	bl	800a522 <osMutexCreate>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a6d      	ldr	r2, [pc, #436]	; (8000dbc <Main_Task+0x1f4>)
 8000c06:	6013      	str	r3, [r2, #0]

    // I2C Errors
    osMutexDef(Num_I2C_Errors_Mutex);
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    Num_I2C_Errors_Mutex = osMutexCreate(osMutex(Num_I2C_Errors_Mutex));
 8000c0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c10:	4618      	mov	r0, r3
 8000c12:	f009 fc86 	bl	800a522 <osMutexCreate>
 8000c16:	4603      	mov	r3, r0
 8000c18:	4a69      	ldr	r2, [pc, #420]	; (8000dc0 <Main_Task+0x1f8>)
 8000c1a:	6013      	str	r3, [r2, #0]

    // Battery
    osMutexDef(Battery_Capacity_Mutex);
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    Battery_Capacity_Mutex = osMutexCreate(osMutex(Battery_Capacity_Mutex));
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	4618      	mov	r0, r3
 8000c26:	f009 fc7c 	bl	800a522 <osMutexCreate>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4a65      	ldr	r2, [pc, #404]	; (8000dc4 <Main_Task+0x1fc>)
 8000c2e:	6013      	str	r3, [r2, #0]

    // ADCS
    osMutexDef(ADCS_Active_Mutex);
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
    ADCS_Active_Mutex = osMutexCreate(osMutex(ADCS_Active_Mutex));
 8000c34:	f107 0320 	add.w	r3, r7, #32
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f009 fc72 	bl	800a522 <osMutexCreate>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	4a61      	ldr	r2, [pc, #388]	; (8000dc8 <Main_Task+0x200>)
 8000c42:	6013      	str	r3, [r2, #0]

    // Low Power
    osMutexDef(Low_Power_Mode_Mutex);
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
    Low_Power_Mode_Mutex = osMutexCreate(osMutex(Low_Power_Mode_Mutex));
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f009 fc68 	bl	800a522 <osMutexCreate>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4a5d      	ldr	r2, [pc, #372]	; (8000dcc <Main_Task+0x204>)
 8000c56:	6013      	str	r3, [r2, #0]

    // UHF
    osMutexDef(UHF_UART_Mutex);
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
    UHF_UART_Mutex = osMutexCreate(osMutex(UHF_UART_Mutex));
 8000c5c:	f107 0318 	add.w	r3, r7, #24
 8000c60:	4618      	mov	r0, r3
 8000c62:	f009 fc5e 	bl	800a522 <osMutexCreate>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4a59      	ldr	r2, [pc, #356]	; (8000dd0 <Main_Task+0x208>)
 8000c6a:	6013      	str	r3, [r2, #0]

    // Power on UHF code goes here
    HAL_StatusTypeDef status2 = HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    status2 = enable_UHF();
 8000c72:	f001 f8e7 	bl	8001e44 <enable_UHF>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    debug_printf("Commanding EPS to enable UHF");
 8000c7c:	4855      	ldr	r0, [pc, #340]	; (8000dd4 <Main_Task+0x20c>)
 8000c7e:	f002 fcbd 	bl	80035fc <debug_printf>
    if(status2 != HAL_OK){
 8000c82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d002      	beq.n	8000c90 <Main_Task+0xc8>
        debug_printf("EPS UHF Enable Error");
 8000c8a:	4853      	ldr	r0, [pc, #332]	; (8000dd8 <Main_Task+0x210>)
 8000c8c:	f002 fcb6 	bl	80035fc <debug_printf>
    }
    osDelay(5000); //Delay to allow the UHF to turn on properly (not the problem but probably good practice)
 8000c90:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c94:	f009 fc31 	bl	800a4fa <osDelay>

    // Turns on SDR/Payload
    enable_Payload();
 8000c98:	f001 f8b0 	bl	8001dfc <enable_Payload>
    debug_printf("Commanding EPS to enable payload");
 8000c9c:	484f      	ldr	r0, [pc, #316]	; (8000ddc <Main_Task+0x214>)
 8000c9e:	f002 fcad 	bl	80035fc <debug_printf>

    // Turns on Boost Board
    enable_Boost_Board();
 8000ca2:	f001 f899 	bl	8001dd8 <enable_Boost_Board>
    debug_printf("Commanding EPS to enable Boost Board");
 8000ca6:	484e      	ldr	r0, [pc, #312]	; (8000de0 <Main_Task+0x218>)
 8000ca8:	f002 fca8 	bl	80035fc <debug_printf>
    // Magnetometer Deployment is done by the ADCS function

    // Antenna Deployment
    // TODO: Antenna Deployment Function Goes Here (DO NOT RUN WITH ACTUAL ANTENNA UNTIL FLIGHT, IT IS SINGLE USE)
    //DEPLOY_ANTENNA(30);
    debug_printf("Sending 0x1F to I2C slave address 0x33");
 8000cac:	484d      	ldr	r0, [pc, #308]	; (8000de4 <Main_Task+0x21c>)
 8000cae:	f002 fca5 	bl	80035fc <debug_printf>

    // Beacon Configuration
    uint8_t initial_beacon_text[14] = "Hello, Earth!";
 8000cb2:	4b4d      	ldr	r3, [pc, #308]	; (8000de8 <Main_Task+0x220>)
 8000cb4:	f107 0408 	add.w	r4, r7, #8
 8000cb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cba:	c407      	stmia	r4!, {r0, r1, r2}
 8000cbc:	8023      	strh	r3, [r4, #0]
    status2 = SET_BEACON_PERIOD(10);
 8000cbe:	200a      	movs	r0, #10
 8000cc0:	f002 fb34 	bl	800332c <SET_BEACON_PERIOD>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (status2 != HAL_OK){
 8000cca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d004      	beq.n	8000cdc <Main_Task+0x114>
       debug_led_amber(10,50);
 8000cd2:	2132      	movs	r1, #50	; 0x32
 8000cd4:	200a      	movs	r0, #10
 8000cd6:	f002 fd21 	bl	800371c <debug_led_amber>
 8000cda:	e003      	b.n	8000ce4 <Main_Task+0x11c>
    } else{
        debug_led_green(10,50);
 8000cdc:	2132      	movs	r1, #50	; 0x32
 8000cde:	200a      	movs	r0, #10
 8000ce0:	f002 fcf2 	bl	80036c8 <debug_led_green>
    }

    osDelay(1000);
 8000ce4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce8:	f009 fc07 	bl	800a4fa <osDelay>

    status2 = SET_BEACON_TEXT(initial_beacon_text, 14);
 8000cec:	f107 0308 	add.w	r3, r7, #8
 8000cf0:	210e      	movs	r1, #14
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 fb5e 	bl	80033b4 <SET_BEACON_TEXT>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (status2 != HAL_OK) {
 8000cfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d004      	beq.n	8000d10 <Main_Task+0x148>
       debug_led_amber(10,50);
 8000d06:	2132      	movs	r1, #50	; 0x32
 8000d08:	200a      	movs	r0, #10
 8000d0a:	f002 fd07 	bl	800371c <debug_led_amber>
 8000d0e:	e003      	b.n	8000d18 <Main_Task+0x150>
    } else{
        debug_led_green(10,50);
 8000d10:	2132      	movs	r1, #50	; 0x32
 8000d12:	200a      	movs	r0, #10
 8000d14:	f002 fcd8 	bl	80036c8 <debug_led_green>
    }
    osDelay(1000);
 8000d18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d1c:	f009 fbed 	bl	800a4fa <osDelay>


    status2 = END_BEACON();
 8000d20:	f002 fab1 	bl	8003286 <END_BEACON>
 8000d24:	4603      	mov	r3, r0
 8000d26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status2 != HAL_OK) {
 8000d2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d004      	beq.n	8000d3c <Main_Task+0x174>
       debug_led_amber(10,50);
 8000d32:	2132      	movs	r1, #50	; 0x32
 8000d34:	200a      	movs	r0, #10
 8000d36:	f002 fcf1 	bl	800371c <debug_led_amber>
 8000d3a:	e003      	b.n	8000d44 <Main_Task+0x17c>
    } else {
        debug_led_green(10,50);
 8000d3c:	2132      	movs	r1, #50	; 0x32
 8000d3e:	200a      	movs	r0, #10
 8000d40:	f002 fcc2 	bl	80036c8 <debug_led_green>
    }

    osDelay(1000);
 8000d44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d48:	f009 fbd7 	bl	800a4fa <osDelay>


    status2 = START_BEACON();
 8000d4c:	f002 fa46 	bl	80031dc <START_BEACON>
 8000d50:	4603      	mov	r3, r0
 8000d52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status2 != HAL_OK) {
 8000d56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d004      	beq.n	8000d68 <Main_Task+0x1a0>
       debug_led_amber(10,50);
 8000d5e:	2132      	movs	r1, #50	; 0x32
 8000d60:	200a      	movs	r0, #10
 8000d62:	f002 fcdb 	bl	800371c <debug_led_amber>
 8000d66:	e003      	b.n	8000d70 <Main_Task+0x1a8>
    } else {
        debug_led_green(10,50);
 8000d68:	2132      	movs	r1, #50	; 0x32
 8000d6a:	200a      	movs	r0, #10
 8000d6c:	f002 fcac 	bl	80036c8 <debug_led_green>
    }

    osDelay(1000);
 8000d70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d74:	f009 fbc1 	bl	800a4fa <osDelay>
    // Enable Transparent Mode
    // TODO: Send command to UHF transceiver to enable transparent mode

    // Detumbling Sequence
    // TODO: Detumbling functions (ADCS) go here
    debug_printf("Beginning detumbling sequence");
 8000d78:	481c      	ldr	r0, [pc, #112]	; (8000dec <Main_Task+0x224>)
 8000d7a:	f002 fc3f 	bl	80035fc <debug_printf>
    * TODO: Create health checks:
    * EPS, ADCS, SDR, OBC, UHF transceiver
    */

    // Flashes the lights to let you know that the startup sequence completed, then starts other threads
    debug_led_green(10,50);
 8000d7e:	2132      	movs	r1, #50	; 0x32
 8000d80:	200a      	movs	r0, #10
 8000d82:	f002 fca1 	bl	80036c8 <debug_led_green>
    debug_led_amber(10,50);
 8000d86:	2132      	movs	r1, #50	; 0x32
 8000d88:	200a      	movs	r0, #10
 8000d8a:	f002 fcc7 	bl	800371c <debug_led_amber>

    while(1){
        GREEN_LED_ON();
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <Main_Task+0x228>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <Main_Task+0x228>)
 8000d94:	f043 0310 	orr.w	r3, r3, #16
 8000d98:	6153      	str	r3, [r2, #20]
        osDelay(150);
 8000d9a:	2096      	movs	r0, #150	; 0x96
 8000d9c:	f009 fbad 	bl	800a4fa <osDelay>
        GREEN_LED_OFF();
 8000da0:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <Main_Task+0x228>)
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <Main_Task+0x228>)
 8000da6:	f023 0310 	bic.w	r3, r3, #16
 8000daa:	6153      	str	r3, [r2, #20]
        osDelay(150);
 8000dac:	2096      	movs	r0, #150	; 0x96
 8000dae:	f009 fba4 	bl	800a4fa <osDelay>
        GREEN_LED_ON();
 8000db2:	e7ec      	b.n	8000d8e <Main_Task+0x1c6>
 8000db4:	0800ffec 	.word	0x0800ffec
 8000db8:	20000228 	.word	0x20000228
 8000dbc:	2000022c 	.word	0x2000022c
 8000dc0:	20000230 	.word	0x20000230
 8000dc4:	20000234 	.word	0x20000234
 8000dc8:	20000238 	.word	0x20000238
 8000dcc:	2000023c 	.word	0x2000023c
 8000dd0:	20000240 	.word	0x20000240
 8000dd4:	08010008 	.word	0x08010008
 8000dd8:	08010028 	.word	0x08010028
 8000ddc:	08010040 	.word	0x08010040
 8000de0:	08010064 	.word	0x08010064
 8000de4:	0801008c 	.word	0x0801008c
 8000de8:	080100d4 	.word	0x080100d4
 8000dec:	080100b4 	.word	0x080100b4
 8000df0:	40020800 	.word	0x40020800

08000df4 <UHF_Rx_Task>:
}

/*
 * @brief main UHF Task/Thread
 */
void UHF_Rx_Task(void const * argument){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
    debug_printf("Starting UHF reception function.\r\n");
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <UHF_Rx_Task+0x18>)
 8000dfe:	f002 fbfd 	bl	80035fc <debug_printf>

    //HAL_UART_Receive_IT(&huart6,GroundStationRxBuffer, 4); //These have been moved to main.c where they are declared and defined
    //HAL_UART_Receive_IT(&huart1,GroundStationRxBuffer, 4);

    while(1){
        osDelay(10000); //The actual handleCySatPacket stuff should run in the callback so we shouldn't need this thread at all
 8000e02:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e06:	f009 fb78 	bl	800a4fa <osDelay>
 8000e0a:	e7fa      	b.n	8000e02 <UHF_Rx_Task+0xe>
 8000e0c:	080100e4 	.word	0x080100e4

08000e10 <UHF_Tx_Task>:
}

/*
 * @brief main UHF Task/Thread
 */
void UHF_Tx_Task(void const * argument){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
    debug_printf("Starting UHF function.\r\n");
 8000e18:	4803      	ldr	r0, [pc, #12]	; (8000e28 <UHF_Tx_Task+0x18>)
 8000e1a:	f002 fbef 	bl	80035fc <debug_printf>

    while(1){
        //AMBER_LED_ON();
        //HAL_UART_Transmit(&huart6, 1234567890123456789012345678901234567890, 40, 1000);
        //AMBER_LED_OFF();
        osDelay(5000);
 8000e1e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e22:	f009 fb6a 	bl	800a4fa <osDelay>
 8000e26:	e7fa      	b.n	8000e1e <UHF_Tx_Task+0xe>
 8000e28:	08010108 	.word	0x08010108

08000e2c <ADCS_Task>:


/*
 * @brief main ADCS Task/Thread
 */
void ADCS_Task(void const * argument){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
    osDelay(999999999999); //TODO: Remove, this is for testing
 8000e34:	481a      	ldr	r0, [pc, #104]	; (8000ea0 <ADCS_Task+0x74>)
 8000e36:	f009 fb60 	bl	800a4fa <osDelay>
    debug_printf("Starting ADCS function.\r\n");
 8000e3a:	481a      	ldr	r0, [pc, #104]	; (8000ea4 <ADCS_Task+0x78>)
 8000e3c:	f002 fbde 	bl	80035fc <debug_printf>

    HAL_StatusTypeDef status;
    //status = enable_EPS_Output_1(); //Enabling the boost board is done in the main task
    status = enable_EPS_5v_Bus();
 8000e40:	f000 ff82 	bl	8001d48 <enable_EPS_5v_Bus>
 8000e44:	4603      	mov	r3, r0
 8000e46:	73fb      	strb	r3, [r7, #15]
    status = enable_EPS_LUP_3v();
 8000e48:	f000 ff90 	bl	8001d6c <enable_EPS_LUP_3v>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	73fb      	strb	r3, [r7, #15]
    status = enable_EPS_LUP_5v();
 8000e50:	f000 ff95 	bl	8001d7e <enable_EPS_LUP_5v>
 8000e54:	4603      	mov	r3, r0
 8000e56:	73fb      	strb	r3, [r7, #15]
        debug_printf("Pitch did not stay constant!\r\n");
    else if(result == FAULT_Y_RATE)
        debug_printf("Did not go to 0 y-rate and then back up to Y-Thompson rate.\r\n");
        */ //Ask Lexi about this stuff

    osMutexWait(ADCS_Active_Mutex, 500);
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <ADCS_Task+0x7c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e60:	4618      	mov	r0, r3
 8000e62:	f009 fb6b 	bl	800a53c <osMutexWait>
    ADCS_ACTIVE = 1;
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <ADCS_Task+0x80>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ADCS_Active_Mutex);
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <ADCS_Task+0x7c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f009 fbb3 	bl	800a5dc <osMutexRelease>
    while(1){
        GREEN_LED_ON();
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <ADCS_Task+0x84>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <ADCS_Task+0x84>)
 8000e7c:	f043 0310 	orr.w	r3, r3, #16
 8000e80:	6153      	str	r3, [r2, #20]
        osDelay(1000);
 8000e82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e86:	f009 fb38 	bl	800a4fa <osDelay>
        GREEN_LED_OFF();
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <ADCS_Task+0x84>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <ADCS_Task+0x84>)
 8000e90:	f023 0310 	bic.w	r3, r3, #16
 8000e94:	6153      	str	r3, [r2, #20]
        osDelay(1000);
 8000e96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e9a:	f009 fb2e 	bl	800a4fa <osDelay>
        GREEN_LED_ON();
 8000e9e:	e7ea      	b.n	8000e76 <ADCS_Task+0x4a>
 8000ea0:	d4a50fff 	.word	0xd4a50fff
 8000ea4:	08010124 	.word	0x08010124
 8000ea8:	20000238 	.word	0x20000238
 8000eac:	2000020c 	.word	0x2000020c
 8000eb0:	40020800 	.word	0x40020800

08000eb4 <BatteryCapacity_Task>:
}

/*
 * @brief Task/Thread responsible for calculating battery capacity
 */
void BatteryCapacity_Task(void const * argument){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b092      	sub	sp, #72	; 0x48
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    osDelay(999999999999); //TODO: Remove, this is for testing
 8000ebc:	4881      	ldr	r0, [pc, #516]	; (80010c4 <BatteryCapacity_Task+0x210>)
 8000ebe:	f009 fb1c 	bl	800a4fa <osDelay>
    debug_printf("Starting battery capacity function.\r\n");
 8000ec2:	4881      	ldr	r0, [pc, #516]	; (80010c8 <BatteryCapacity_Task+0x214>)
 8000ec4:	f002 fb9a 	bl	80035fc <debug_printf>
    float y_voltage, y_neg_current, y_pos_current;
    float z_voltage, z_neg_current, z_pos_current;
    float total_input_power;
    float total_output_power;

    uint32_t PreviousWakeTime = osKernelSysTick();
 8000ec8:	f009 fae0 	bl	800a48c <osKernelSysTick>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60fb      	str	r3, [r7, #12]

    while(1){

        READ_EPS_INPUT_CONDITION(&input_conditions);
 8000ed0:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fdb3 	bl	8001a40 <READ_EPS_INPUT_CONDITION>
        if((input_conditions & 0x20)==0x20){ // Charge Complete
 8000eda:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000edc:	f003 0320 	and.w	r3, r3, #32
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00f      	beq.n	8000f04 <BatteryCapacity_Task+0x50>
            osMutexWait(Battery_Capacity_Mutex, 500);
 8000ee4:	4b79      	ldr	r3, [pc, #484]	; (80010cc <BatteryCapacity_Task+0x218>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000eec:	4618      	mov	r0, r3
 8000eee:	f009 fb25 	bl	800a53c <osMutexWait>
            BATTERY_CAPACITY = original_battery_capacity;
 8000ef2:	4a77      	ldr	r2, [pc, #476]	; (80010d0 <BatteryCapacity_Task+0x21c>)
 8000ef4:	4b77      	ldr	r3, [pc, #476]	; (80010d4 <BatteryCapacity_Task+0x220>)
 8000ef6:	601a      	str	r2, [r3, #0]
            osMutexRelease(Battery_Capacity_Mutex);
 8000ef8:	4b74      	ldr	r3, [pc, #464]	; (80010cc <BatteryCapacity_Task+0x218>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f009 fb6d 	bl	800a5dc <osMutexRelease>
 8000f02:	e033      	b.n	8000f6c <BatteryCapacity_Task+0xb8>
        }
        else{ // Not Fully Charged
            READ_EPS_5V_CURRENT(&Five_Bus_Current);
 8000f04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 fc61 	bl	80017d0 <READ_EPS_5V_CURRENT>
            READ_EPS_3V_CURRENT(&Three_Bus_Current);
 8000f0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fc2a 	bl	800176c <READ_EPS_3V_CURRENT>

            total_output_power = (5*Five_Bus_Current)+(3*Three_Bus_Current);
 8000f18:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000f1c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000f20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f24:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f28:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000f2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f34:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            osMutexWait(Battery_Capacity_Mutex, 500);
 8000f38:	4b64      	ldr	r3, [pc, #400]	; (80010cc <BatteryCapacity_Task+0x218>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f40:	4618      	mov	r0, r3
 8000f42:	f009 fafb 	bl	800a53c <osMutexWait>
            BATTERY_CAPACITY -= total_output_power/3600;
 8000f46:	4b63      	ldr	r3, [pc, #396]	; (80010d4 <BatteryCapacity_Task+0x220>)
 8000f48:	ed93 7a00 	vldr	s14, [r3]
 8000f4c:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8000f50:	ed9f 6a61 	vldr	s12, [pc, #388]	; 80010d8 <BatteryCapacity_Task+0x224>
 8000f54:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5c:	4b5d      	ldr	r3, [pc, #372]	; (80010d4 <BatteryCapacity_Task+0x220>)
 8000f5e:	edc3 7a00 	vstr	s15, [r3]
            osMutexRelease(Battery_Capacity_Mutex);
 8000f62:	4b5a      	ldr	r3, [pc, #360]	; (80010cc <BatteryCapacity_Task+0x218>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f009 fb38 	bl	800a5dc <osMutexRelease>
        }

        if((input_conditions & 0x40)==0x40){ // Charge in Progress
 8000f6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d072      	beq.n	800105c <BatteryCapacity_Task+0x1a8>
            READ_EPS_SOLAR_X_VOLTAGE(&x_voltage);
 8000f76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fa34 	bl	80013e8 <READ_EPS_SOLAR_X_VOLTAGE>
            READ_EPS_SOLAR_X_NEG_CURRENT(&x_neg_current);
 8000f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 fa61 	bl	800144c <READ_EPS_SOLAR_X_NEG_CURRENT>
            READ_EPS_SOLAR_X_POS_CURRENT(&x_pos_current);
 8000f8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fa8e 	bl	80014b0 <READ_EPS_SOLAR_X_POS_CURRENT>

            READ_EPS_SOLAR_Y_VOLTAGE(&y_voltage);
 8000f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 fabb 	bl	8001514 <READ_EPS_SOLAR_Y_VOLTAGE>
            READ_EPS_SOLAR_Y_NEG_CURRENT(&y_neg_current);
 8000f9e:	f107 0320 	add.w	r3, r7, #32
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 fae8 	bl	8001578 <READ_EPS_SOLAR_Y_NEG_CURRENT>
            READ_EPS_SOLAR_Y_POS_CURRENT(&y_pos_current);
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fb15 	bl	80015dc <READ_EPS_SOLAR_Y_POS_CURRENT>

            READ_EPS_SOLAR_Z_VOLTAGE(&z_voltage);
 8000fb2:	f107 0318 	add.w	r3, r7, #24
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fb42 	bl	8001640 <READ_EPS_SOLAR_Z_VOLTAGE>
            READ_EPS_SOLAR_Z_NEG_CURRENT(&z_neg_current);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 fb6f 	bl	80016a4 <READ_EPS_SOLAR_Z_NEG_CURRENT>
            READ_EPS_SOLAR_Z_POS_CURRENT(&z_pos_current);
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 fb9c 	bl	8001708 <READ_EPS_SOLAR_Z_POS_CURRENT>

            total_input_power = (x_voltage*(x_neg_current+x_pos_current));
 8000fd0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000fd4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000fd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fdc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            total_input_power += (y_voltage*(y_neg_current+y_pos_current));
 8000fe8:	ed97 7a08 	vldr	s14, [r7, #32]
 8000fec:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ff0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ff4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ffc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001004:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            total_input_power += (z_voltage*(z_neg_current+z_pos_current));
 8001008:	ed97 7a05 	vldr	s14, [r7, #20]
 800100c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001010:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001014:	edd7 7a06 	vldr	s15, [r7, #24]
 8001018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001024:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

            osMutexWait(Battery_Capacity_Mutex, 500);
 8001028:	4b28      	ldr	r3, [pc, #160]	; (80010cc <BatteryCapacity_Task+0x218>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001030:	4618      	mov	r0, r3
 8001032:	f009 fa83 	bl	800a53c <osMutexWait>
            BATTERY_CAPACITY += total_input_power/3600;
 8001036:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800103a:	eddf 6a27 	vldr	s13, [pc, #156]	; 80010d8 <BatteryCapacity_Task+0x224>
 800103e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <BatteryCapacity_Task+0x220>)
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <BatteryCapacity_Task+0x220>)
 800104e:	edc3 7a00 	vstr	s15, [r3]
            osMutexRelease(Battery_Capacity_Mutex);
 8001052:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <BatteryCapacity_Task+0x218>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f009 fac0 	bl	800a5dc <osMutexRelease>
        }
        osMutexWait(Battery_Capacity_Mutex, 500);
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <BatteryCapacity_Task+0x218>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001064:	4618      	mov	r0, r3
 8001066:	f009 fa69 	bl	800a53c <osMutexWait>
        osMutexWait(Low_Power_Mode_Mutex, 500);
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <BatteryCapacity_Task+0x228>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001072:	4618      	mov	r0, r3
 8001074:	f009 fa62 	bl	800a53c <osMutexWait>
        if(BATTERY_CAPACITY < 3){
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <BatteryCapacity_Task+0x220>)
 800107a:	edd3 7a00 	vldr	s15, [r3]
 800107e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108a:	d408      	bmi.n	800109e <BatteryCapacity_Task+0x1ea>
            //LOW_POWER_MODE = 1; //TODO: Uncomment this, I commented it for testing
        }
        else if((LOW_POWER_MODE==1)&(BATTERY_CAPACITY>8)){
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <BatteryCapacity_Task+0x220>)
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800109a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            //LOW_POWER_MODE = 0;
        }
        osMutexRelease(Low_Power_Mode_Mutex);
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <BatteryCapacity_Task+0x228>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f009 fa9a 	bl	800a5dc <osMutexRelease>
        osMutexRelease(Battery_Capacity_Mutex);
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <BatteryCapacity_Task+0x218>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f009 fa95 	bl	800a5dc <osMutexRelease>

        osDelayUntil(&PreviousWakeTime, 1000); // Delay for 1 second
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010ba:	4618      	mov	r0, r3
 80010bc:	f009 facf 	bl	800a65e <osDelayUntil>
        READ_EPS_INPUT_CONDITION(&input_conditions);
 80010c0:	e706      	b.n	8000ed0 <BatteryCapacity_Task+0x1c>
 80010c2:	bf00      	nop
 80010c4:	d4a50fff 	.word	0xd4a50fff
 80010c8:	08010140 	.word	0x08010140
 80010cc:	20000234 	.word	0x20000234
 80010d0:	418f102e 	.word	0x418f102e
 80010d4:	20000000 	.word	0x20000000
 80010d8:	45610000 	.word	0x45610000
 80010dc:	2000023c 	.word	0x2000023c

080010e0 <parseCySatPacket>:
/**
 * @brief Takes in an array containing the cysat packet in byte form and builds a struct from it
 * @param packet: the byte array containing the packet within, with the first byte being the start character
 * @retval The struct representing this CySat packet
 */
CySat_Packet_t parseCySatPacket(uint8_t* packet){
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
    CySat_Packet_t cySatPacket;
    cySatPacket.Subsystem_Type = packet[1];
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	785b      	ldrb	r3, [r3, #1]
 80010ee:	733b      	strb	r3, [r7, #12]
    cySatPacket.Command = packet[2];
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	789b      	ldrb	r3, [r3, #2]
 80010f4:	737b      	strb	r3, [r7, #13]
    cySatPacket.Data_Length = packet[3];
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	78db      	ldrb	r3, [r3, #3]
 80010fa:	73bb      	strb	r3, [r7, #14]
    cySatPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * cySatPacket.Data_Length);
 80010fc:	7bbb      	ldrb	r3, [r7, #14]
 80010fe:	4618      	mov	r0, r3
 8001100:	f00b fff0 	bl	800d0e4 <malloc>
 8001104:	4603      	mov	r3, r0
 8001106:	613b      	str	r3, [r7, #16]
    memcpy(cySatPacket.Data, packet+4, cySatPacket.Data_Length);
 8001108:	6938      	ldr	r0, [r7, #16]
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	3304      	adds	r3, #4
 800110e:	7bba      	ldrb	r2, [r7, #14]
 8001110:	4619      	mov	r1, r3
 8001112:	f00b fff7 	bl	800d104 <memcpy>
    cySatPacket.Checksum = packet[cySatPacket.Data_Length+4];
 8001116:	7bbb      	ldrb	r3, [r7, #14]
 8001118:	3304      	adds	r3, #4
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	753b      	strb	r3, [r7, #20]
    return cySatPacket;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	461c      	mov	r4, r3
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800112e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	371c      	adds	r7, #28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd90      	pop	{r4, r7, pc}
	...

0800113c <sendCySatPacket>:
 * @brief Takes in a packet and sends it to the Ground Station via UART serial connection
 * @param packet: A struct representing the CySat packet you wish to send
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
HAL_StatusTypeDef sendCySatPacket(CySat_Packet_t packet){
 800113c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001140:	b089      	sub	sp, #36	; 0x24
 8001142:	af00      	add	r7, sp, #0
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800114a:	466b      	mov	r3, sp
 800114c:	461e      	mov	r6, r3
    uint8_t message[packet.Data_Length + 5];
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	1d59      	adds	r1, r3, #5
 8001152:	1e4b      	subs	r3, r1, #1
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	460a      	mov	r2, r1
 8001158:	2300      	movs	r3, #0
 800115a:	4690      	mov	r8, r2
 800115c:	4699      	mov	r9, r3
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800116a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800116e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001172:	460a      	mov	r2, r1
 8001174:	2300      	movs	r3, #0
 8001176:	4614      	mov	r4, r2
 8001178:	461d      	mov	r5, r3
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	f04f 0300 	mov.w	r3, #0
 8001182:	00eb      	lsls	r3, r5, #3
 8001184:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001188:	00e2      	lsls	r2, r4, #3
 800118a:	460b      	mov	r3, r1
 800118c:	3307      	adds	r3, #7
 800118e:	08db      	lsrs	r3, r3, #3
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	ebad 0d03 	sub.w	sp, sp, r3
 8001196:	466b      	mov	r3, sp
 8001198:	3300      	adds	r3, #0
 800119a:	613b      	str	r3, [r7, #16]

    //build byte array
    message[0] = 0xFF; //start byte
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	22ff      	movs	r2, #255	; 0xff
 80011a0:	701a      	strb	r2, [r3, #0]
    message[1] = packet.Subsystem_Type;
 80011a2:	793a      	ldrb	r2, [r7, #4]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	705a      	strb	r2, [r3, #1]
    message[2] = packet.Command;
 80011a8:	797a      	ldrb	r2, [r7, #5]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	709a      	strb	r2, [r3, #2]
    message[3] = packet.Data_Length;
 80011ae:	79ba      	ldrb	r2, [r7, #6]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	70da      	strb	r2, [r3, #3]
    int i;
    for(i = 0; i < packet.Data_Length; i++){
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
 80011b8:	e00a      	b.n	80011d0 <sendCySatPacket+0x94>
        message[i + 4] = packet.Data[i];
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	441a      	add	r2, r3
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	3304      	adds	r3, #4
 80011c4:	7811      	ldrb	r1, [r2, #0]
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < packet.Data_Length; i++){
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	3301      	adds	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
 80011d0:	79bb      	ldrb	r3, [r7, #6]
 80011d2:	461a      	mov	r2, r3
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	4293      	cmp	r3, r2
 80011d8:	dbef      	blt.n	80011ba <sendCySatPacket+0x7e>
    }
    message[4 + packet.Data_Length] = packet.Checksum;
 80011da:	79bb      	ldrb	r3, [r7, #6]
 80011dc:	3304      	adds	r3, #4
 80011de:	7b39      	ldrb	r1, [r7, #12]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	54d1      	strb	r1, [r2, r3]

    HAL_StatusTypeDef status = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	77fb      	strb	r3, [r7, #31]
    if(packet.Subsystem_Type == OBC_SUBSYSTEM_TYPE){
 80011e8:	793b      	ldrb	r3, [r7, #4]
 80011ea:	2b0a      	cmp	r3, #10
 80011ec:	d10c      	bne.n	8001208 <sendCySatPacket+0xcc>
        status = HAL_UART_Transmit(&huart1, message, packet.Data_Length + 5, 1000); //send the message over uart, but timeout after 1s
 80011ee:	79bb      	ldrb	r3, [r7, #6]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	3305      	adds	r3, #5
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	6939      	ldr	r1, [r7, #16]
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <sendCySatPacket+0xf8>)
 80011fe:	f006 fd14 	bl	8007c2a <HAL_UART_Transmit>
 8001202:	4603      	mov	r3, r0
 8001204:	77fb      	strb	r3, [r7, #31]
 8001206:	e00e      	b.n	8001226 <sendCySatPacket+0xea>
    }
    else if(packet.Subsystem_Type == PAYLOAD_SUBSYSTEM_TYPE){
 8001208:	793b      	ldrb	r3, [r7, #4]
 800120a:	2b28      	cmp	r3, #40	; 0x28
 800120c:	d10b      	bne.n	8001226 <sendCySatPacket+0xea>
        status = HAL_UART_Transmit(&huart6, message, packet.Data_Length + 5, 1000); //send the message over uart, but timeout after 1s
 800120e:	79bb      	ldrb	r3, [r7, #6]
 8001210:	b29b      	uxth	r3, r3
 8001212:	3305      	adds	r3, #5
 8001214:	b29a      	uxth	r2, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	6939      	ldr	r1, [r7, #16]
 800121c:	4806      	ldr	r0, [pc, #24]	; (8001238 <sendCySatPacket+0xfc>)
 800121e:	f006 fd04 	bl	8007c2a <HAL_UART_Transmit>
 8001222:	4603      	mov	r3, r0
 8001224:	77fb      	strb	r3, [r7, #31]
    }
    return status;
 8001226:	7ffb      	ldrb	r3, [r7, #31]
 8001228:	46b5      	mov	sp, r6
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	; 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001234:	200006bc 	.word	0x200006bc
 8001238:	200006fc 	.word	0x200006fc

0800123c <generateCySatChecksum>:
/**
  * @brief Gives you the checksum byte value for a submitted packet
  * @param packet: The packet for which you want to generate a packet
  * @retval The 1 byte packet checksum that has been generated
  */
uint8_t generateCySatChecksum(CySat_Packet_t packet){
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	61bb      	str	r3, [r7, #24]

    //add components of the packet together (NOT including the checksum)
    sum += packet.Subsystem_Type;
 800124c:	793b      	ldrb	r3, [r7, #4]
 800124e:	461a      	mov	r2, r3
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	4413      	add	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
    sum += packet.Command;
 8001256:	797b      	ldrb	r3, [r7, #5]
 8001258:	461a      	mov	r2, r3
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	4413      	add	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
    sum += packet.Data_Length;
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	461a      	mov	r2, r3
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	4413      	add	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	e00a      	b.n	8001286 <generateCySatChecksum+0x4a>
        sum += packet.Data[i];
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	4413      	add	r3, r2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4413      	add	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	3301      	adds	r3, #1
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	461a      	mov	r2, r3
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	4293      	cmp	r3, r2
 800128e:	dbef      	blt.n	8001270 <generateCySatChecksum+0x34>
    }

    //take the lowest 8 bits
    uint8_t byte = (uint8_t) sum & 0xFF;
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	75fb      	strb	r3, [r7, #23]

    //subtract from 0xFF
    return 0xFF - byte;
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	43db      	mvns	r3, r3
 8001298:	b2db      	uxtb	r3, r3
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <validateCySatChecksum>:
/**
  * @brief Returns if the checksum of a given packet is correct or not
  * @param packet: The packet you have just received and want to check
  * @retval 1 if the checksum is correct for the data in the packet, otherwise it returns a 0
  */
uint8_t validateCySatChecksum(CySat_Packet_t packet){
 80012a6:	b480      	push	{r7}
 80012a8:	b087      	sub	sp, #28
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]

    //add components of the packet together (INCLUDING the checksum)
    sum += packet.Subsystem_Type;
 80012b6:	793b      	ldrb	r3, [r7, #4]
 80012b8:	461a      	mov	r2, r3
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4413      	add	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
    sum += packet.Command;
 80012c0:	797b      	ldrb	r3, [r7, #5]
 80012c2:	461a      	mov	r2, r3
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4413      	add	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
    sum += packet.Data_Length;
 80012ca:	79bb      	ldrb	r3, [r7, #6]
 80012cc:	461a      	mov	r2, r3
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4413      	add	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	e00a      	b.n	80012f0 <validateCySatChecksum+0x4a>
        sum += packet.Data[i];
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	4413      	add	r3, r2
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4413      	add	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3301      	adds	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	79bb      	ldrb	r3, [r7, #6]
 80012f2:	461a      	mov	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	4293      	cmp	r3, r2
 80012f8:	dbef      	blt.n	80012da <validateCySatChecksum+0x34>
    }
    sum += packet.Checksum;
 80012fa:	7b3b      	ldrb	r3, [r7, #12]
 80012fc:	461a      	mov	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4413      	add	r3, r2
 8001302:	613b      	str	r3, [r7, #16]

    //if the last 8 bits equal 0xFF, it is correct
    if((sum & 0xFF) == 0xFF){
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2bff      	cmp	r3, #255	; 0xff
 800130a:	d101      	bne.n	8001310 <validateCySatChecksum+0x6a>
        return 1;
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <validateCySatChecksum+0x6c>
    }
    else{
        return 0;
 8001310:	2300      	movs	r3, #0
    }
}
 8001312:	4618      	mov	r0, r3
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <READ_EPS_BATTERY_VOLTAGE>:
/**
  * @brief Reads the voltage level of the EPS battery voltage bus and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_VOLTAGE(float* volt_ptr){
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 1; //battery voltage command
 800132c:	2301      	movs	r3, #1
 800132e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001330:	f107 0208 	add.w	r2, r7, #8
 8001334:	7bbb      	ldrb	r3, [r7, #14]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fddd 	bl	8001ef8 <EPS_READ>
 800133e:	4603      	mov	r3, r0
 8001340:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <READ_EPS_BATTERY_VOLTAGE+0x2c>
        return status;
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	e014      	b.n	8001376 <READ_EPS_BATTERY_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800134c:	7a3b      	ldrb	r3, [r7, #8]
 800134e:	b29b      	uxth	r3, r3
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	b29a      	uxth	r2, r3
 8001354:	7a7b      	ldrb	r3, [r7, #9]
 8001356:	b29b      	uxth	r3, r3
 8001358:	4413      	add	r3, r2
 800135a:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0023394775f * (float) raw_voltage; //multiply by the conversion coeff
 800135c:	89bb      	ldrh	r3, [r7, #12]
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001366:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001380 <READ_EPS_BATTERY_VOLTAGE+0x60>
 800136a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0023394775 * 4095 = 9.58 V
    return status;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	3b1951eb 	.word	0x3b1951eb

08001384 <READ_EPS_BATTERY_CURRENT>:
/**
  * @brief Reads the current level of the EPS battery bus and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_CURRENT(float* curr_ptr){
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 2; //battery current command
 8001390:	2302      	movs	r3, #2
 8001392:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001394:	f107 0208 	add.w	r2, r7, #8
 8001398:	7bbb      	ldrb	r3, [r7, #14]
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fdab 	bl	8001ef8 <EPS_READ>
 80013a2:	4603      	mov	r3, r0
 80013a4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <READ_EPS_BATTERY_CURRENT+0x2c>
        return status;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	e014      	b.n	80013da <READ_EPS_BATTERY_CURRENT+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80013b0:	7a3b      	ldrb	r3, [r7, #8]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	7a7b      	ldrb	r3, [r7, #9]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4413      	add	r3, r2
 80013be:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0030517578f * (float) raw_value; //multiply by the conversion coeff
 80013c0:	89bb      	ldrh	r3, [r7, #12]
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ca:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80013e4 <READ_EPS_BATTERY_CURRENT+0x60>
 80013ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0030517578f * 4095 = 12.497 A
    return status;
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	3b480000 	.word	0x3b480000

080013e8 <READ_EPS_SOLAR_X_VOLTAGE>:
/**
  * @brief Reads the voltage of the X-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_VOLTAGE(float* volt_ptr){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80013f0:	2301      	movs	r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 5; //solar panel x-axis voltage command
 80013f4:	2305      	movs	r3, #5
 80013f6:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80013f8:	f107 0208 	add.w	r2, r7, #8
 80013fc:	7bbb      	ldrb	r3, [r7, #14]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fd79 	bl	8001ef8 <EPS_READ>
 8001406:	4603      	mov	r3, r0
 8001408:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <READ_EPS_SOLAR_X_VOLTAGE+0x2c>
        return status;
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	e014      	b.n	800143e <READ_EPS_SOLAR_X_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001414:	7a3b      	ldrb	r3, [r7, #8]
 8001416:	b29b      	uxth	r3, r3
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	b29a      	uxth	r2, r3
 800141c:	7a7b      	ldrb	r3, [r7, #9]
 800141e:	b29b      	uxth	r3, r3
 8001420:	4413      	add	r3, r2
 8001422:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 8001424:	89bb      	ldrh	r3, [r7, #12]
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800142e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001448 <READ_EPS_SOLAR_X_VOLTAGE+0x60>
 8001432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	edc3 7a00 	vstr	s15, [r3]
    return status;
 800143c:	7bfb      	ldrb	r3, [r7, #15]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	3b200000 	.word	0x3b200000

0800144c <READ_EPS_SOLAR_X_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the X- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_NEG_CURRENT(float* curr_ptr){
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 6; //solar panel x- current command
 8001458:	2306      	movs	r3, #6
 800145a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800145c:	f107 0208 	add.w	r2, r7, #8
 8001460:	7bbb      	ldrb	r3, [r7, #14]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fd47 	bl	8001ef8 <EPS_READ>
 800146a:	4603      	mov	r3, r0
 800146c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <READ_EPS_SOLAR_X_NEG_CURRENT+0x2c>
        return status;
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	e014      	b.n	80014a2 <READ_EPS_SOLAR_X_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001478:	7a3b      	ldrb	r3, [r7, #8]
 800147a:	b29b      	uxth	r3, r3
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	b29a      	uxth	r2, r3
 8001480:	7a7b      	ldrb	r3, [r7, #9]
 8001482:	b29b      	uxth	r3, r3
 8001484:	4413      	add	r3, r2
 8001486:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001488:	89bb      	ldrh	r3, [r7, #12]
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001492:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80014ac <READ_EPS_SOLAR_X_NEG_CURRENT+0x60>
 8001496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	3a200001 	.word	0x3a200001

080014b0 <READ_EPS_SOLAR_X_POS_CURRENT>:
/**
  * @brief Reads the voltage of the X+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_POS_CURRENT(float* curr_ptr){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80014b8:	2301      	movs	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 7; //solar panel x+ current command
 80014bc:	2307      	movs	r3, #7
 80014be:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80014c0:	f107 0208 	add.w	r2, r7, #8
 80014c4:	7bbb      	ldrb	r3, [r7, #14]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fd15 	bl	8001ef8 <EPS_READ>
 80014ce:	4603      	mov	r3, r0
 80014d0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <READ_EPS_SOLAR_X_POS_CURRENT+0x2c>
        return status;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	e014      	b.n	8001506 <READ_EPS_SOLAR_X_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80014dc:	7a3b      	ldrb	r3, [r7, #8]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	7a7b      	ldrb	r3, [r7, #9]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4413      	add	r3, r2
 80014ea:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 80014ec:	89bb      	ldrh	r3, [r7, #12]
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001510 <READ_EPS_SOLAR_X_POS_CURRENT+0x60>
 80014fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	3a200001 	.word	0x3a200001

08001514 <READ_EPS_SOLAR_Y_VOLTAGE>:
/**
  * @brief Reads the voltage of the Y-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_VOLTAGE(float* volt_ptr){
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800151c:	2301      	movs	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 8; //solar panel y-axis voltage command
 8001520:	2308      	movs	r3, #8
 8001522:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001524:	f107 0208 	add.w	r2, r7, #8
 8001528:	7bbb      	ldrb	r3, [r7, #14]
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f000 fce3 	bl	8001ef8 <EPS_READ>
 8001532:	4603      	mov	r3, r0
 8001534:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <READ_EPS_SOLAR_Y_VOLTAGE+0x2c>
        return status;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	e014      	b.n	800156a <READ_EPS_SOLAR_Y_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001540:	7a3b      	ldrb	r3, [r7, #8]
 8001542:	b29b      	uxth	r3, r3
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	b29a      	uxth	r2, r3
 8001548:	7a7b      	ldrb	r3, [r7, #9]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 8001550:	89bb      	ldrh	r3, [r7, #12]
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800155a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001574 <READ_EPS_SOLAR_Y_VOLTAGE+0x60>
 800155e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001568:	7bfb      	ldrb	r3, [r7, #15]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	3b200000 	.word	0x3b200000

08001578 <READ_EPS_SOLAR_Y_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the Y- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_NEG_CURRENT(float* curr_ptr){
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 9; //solar panel y- current command
 8001584:	2309      	movs	r3, #9
 8001586:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001588:	f107 0208 	add.w	r2, r7, #8
 800158c:	7bbb      	ldrb	r3, [r7, #14]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f000 fcb1 	bl	8001ef8 <EPS_READ>
 8001596:	4603      	mov	r3, r0
 8001598:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <READ_EPS_SOLAR_Y_NEG_CURRENT+0x2c>
        return status;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	e014      	b.n	80015ce <READ_EPS_SOLAR_Y_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80015a4:	7a3b      	ldrb	r3, [r7, #8]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	7a7b      	ldrb	r3, [r7, #9]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 80015b4:	89bb      	ldrh	r3, [r7, #12]
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015be:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80015d8 <READ_EPS_SOLAR_Y_NEG_CURRENT+0x60>
 80015c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	3a200001 	.word	0x3a200001

080015dc <READ_EPS_SOLAR_Y_POS_CURRENT>:
/**
  * @brief Reads the voltage of the Y+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_POS_CURRENT(float* curr_ptr){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80015e4:	2301      	movs	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 10; //solar panel y+ current command
 80015e8:	230a      	movs	r3, #10
 80015ea:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80015ec:	f107 0208 	add.w	r2, r7, #8
 80015f0:	7bbb      	ldrb	r3, [r7, #14]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fc7f 	bl	8001ef8 <EPS_READ>
 80015fa:	4603      	mov	r3, r0
 80015fc:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <READ_EPS_SOLAR_Y_POS_CURRENT+0x2c>
        return status;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	e014      	b.n	8001632 <READ_EPS_SOLAR_Y_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001608:	7a3b      	ldrb	r3, [r7, #8]
 800160a:	b29b      	uxth	r3, r3
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	b29a      	uxth	r2, r3
 8001610:	7a7b      	ldrb	r3, [r7, #9]
 8001612:	b29b      	uxth	r3, r3
 8001614:	4413      	add	r3, r2
 8001616:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001618:	89bb      	ldrh	r3, [r7, #12]
 800161a:	ee07 3a90 	vmov	s15, r3
 800161e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001622:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800163c <READ_EPS_SOLAR_Y_POS_CURRENT+0x60>
 8001626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	3a200001 	.word	0x3a200001

08001640 <READ_EPS_SOLAR_Z_VOLTAGE>:
/**
  * @brief Reads the voltage of the Y-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_VOLTAGE(float* volt_ptr){
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 11; //solar panel z-axis voltage command
 800164c:	230b      	movs	r3, #11
 800164e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001650:	f107 0208 	add.w	r2, r7, #8
 8001654:	7bbb      	ldrb	r3, [r7, #14]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f000 fc4d 	bl	8001ef8 <EPS_READ>
 800165e:	4603      	mov	r3, r0
 8001660:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <READ_EPS_SOLAR_Z_VOLTAGE+0x2c>
        return status;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	e014      	b.n	8001696 <READ_EPS_SOLAR_Z_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800166c:	7a3b      	ldrb	r3, [r7, #8]
 800166e:	b29b      	uxth	r3, r3
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	b29a      	uxth	r2, r3
 8001674:	7a7b      	ldrb	r3, [r7, #9]
 8001676:	b29b      	uxth	r3, r3
 8001678:	4413      	add	r3, r2
 800167a:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 800167c:	89bb      	ldrh	r3, [r7, #12]
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001686:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80016a0 <READ_EPS_SOLAR_Z_VOLTAGE+0x60>
 800168a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001694:	7bfb      	ldrb	r3, [r7, #15]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	3b200000 	.word	0x3b200000

080016a4 <READ_EPS_SOLAR_Z_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the Z- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_NEG_CURRENT(float* curr_ptr){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80016ac:	2301      	movs	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 12; //solar panel z- current command
 80016b0:	230c      	movs	r3, #12
 80016b2:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80016b4:	f107 0208 	add.w	r2, r7, #8
 80016b8:	7bbb      	ldrb	r3, [r7, #14]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 fc1b 	bl	8001ef8 <EPS_READ>
 80016c2:	4603      	mov	r3, r0
 80016c4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <READ_EPS_SOLAR_Z_NEG_CURRENT+0x2c>
        return status;
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	e014      	b.n	80016fa <READ_EPS_SOLAR_Z_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80016d0:	7a3b      	ldrb	r3, [r7, #8]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	7a7b      	ldrb	r3, [r7, #9]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4413      	add	r3, r2
 80016de:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 80016e0:	89bb      	ldrh	r3, [r7, #12]
 80016e2:	ee07 3a90 	vmov	s15, r3
 80016e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ea:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001704 <READ_EPS_SOLAR_Z_NEG_CURRENT+0x60>
 80016ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	3a200001 	.word	0x3a200001

08001708 <READ_EPS_SOLAR_Z_POS_CURRENT>:
/**
  * @brief Reads the voltage of the Z+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_POS_CURRENT(float* curr_ptr){
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 13; //solar panel z+ current command
 8001714:	230d      	movs	r3, #13
 8001716:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001718:	f107 0208 	add.w	r2, r7, #8
 800171c:	7bbb      	ldrb	r3, [r7, #14]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fbe9 	bl	8001ef8 <EPS_READ>
 8001726:	4603      	mov	r3, r0
 8001728:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <READ_EPS_SOLAR_Z_POS_CURRENT+0x2c>
        return status;
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	e014      	b.n	800175e <READ_EPS_SOLAR_Z_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001734:	7a3b      	ldrb	r3, [r7, #8]
 8001736:	b29b      	uxth	r3, r3
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	b29a      	uxth	r2, r3
 800173c:	7a7b      	ldrb	r3, [r7, #9]
 800173e:	b29b      	uxth	r3, r3
 8001740:	4413      	add	r3, r2
 8001742:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001744:	89bb      	ldrh	r3, [r7, #12]
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800174e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001768 <READ_EPS_SOLAR_Z_POS_CURRENT+0x60>
 8001752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	edc3 7a00 	vstr	s15, [r3]
    return status;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	3a200001 	.word	0x3a200001

0800176c <READ_EPS_3V_CURRENT>:
/**
  * @brief Reads the current of the EPS 3.3v bus in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_3V_CURRENT(float* curr_ptr){
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 14; //3.3v bus current command
 8001778:	230e      	movs	r3, #14
 800177a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800177c:	f107 0208 	add.w	r2, r7, #8
 8001780:	7bbb      	ldrb	r3, [r7, #14]
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fbb7 	bl	8001ef8 <EPS_READ>
 800178a:	4603      	mov	r3, r0
 800178c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <READ_EPS_3V_CURRENT+0x2c>
        return status;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	e014      	b.n	80017c2 <READ_EPS_3V_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001798:	7a3b      	ldrb	r3, [r7, #8]
 800179a:	b29b      	uxth	r3, r3
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	b29a      	uxth	r2, r3
 80017a0:	7a7b      	ldrb	r3, [r7, #9]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0020345052f * (float) raw_current; //multiply by the conversion coeff
 80017a8:	89bb      	ldrh	r3, [r7, #12]
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017b2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80017cc <READ_EPS_3V_CURRENT+0x60>
 80017b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	3b055555 	.word	0x3b055555

080017d0 <READ_EPS_5V_CURRENT>:
/**
  * @brief Reads the current of the EPS 5v bus in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_5V_CURRENT(float* curr_ptr){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 15; //5v bus current command
 80017dc:	230f      	movs	r3, #15
 80017de:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80017e0:	f107 0208 	add.w	r2, r7, #8
 80017e4:	7bbb      	ldrb	r3, [r7, #14]
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 fb85 	bl	8001ef8 <EPS_READ>
 80017ee:	4603      	mov	r3, r0
 80017f0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <READ_EPS_5V_CURRENT+0x2c>
        return status;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	e014      	b.n	8001826 <READ_EPS_5V_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80017fc:	7a3b      	ldrb	r3, [r7, #8]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	b29a      	uxth	r2, r3
 8001804:	7a7b      	ldrb	r3, [r7, #9]
 8001806:	b29b      	uxth	r3, r3
 8001808:	4413      	add	r3, r2
 800180a:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0020345052f * (float) raw_current; //multiply by the conversion coeff
 800180c:	89bb      	ldrh	r3, [r7, #12]
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001816:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001830 <READ_EPS_5V_CURRENT+0x60>
 800181a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	3b055555 	.word	0x3b055555

08001834 <READ_EPS_MCU_TEMP>:
/**
  * @brief Reads the temperature of the EPS microcontroller in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_MCU_TEMP(float* temp_ptr){
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 18; //MCU temperature command
 8001840:	2312      	movs	r3, #18
 8001842:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001844:	f107 0208 	add.w	r2, r7, #8
 8001848:	7bbb      	ldrb	r3, [r7, #14]
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fb53 	bl	8001ef8 <EPS_READ>
 8001852:	4603      	mov	r3, r0
 8001854:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <READ_EPS_MCU_TEMP+0x2c>
        return status;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	e01c      	b.n	800189a <READ_EPS_MCU_TEMP+0x66>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001860:	7a3b      	ldrb	r3, [r7, #8]
 8001862:	b29b      	uxth	r3, r3
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	b29a      	uxth	r2, r3
 8001868:	7a7b      	ldrb	r3, [r7, #9]
 800186a:	b29b      	uxth	r3, r3
 800186c:	4413      	add	r3, r2
 800186e:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = (((float) raw_value * 0.0006103516f) - 0.986f) / 0.00355f;
 8001870:	89bb      	ldrh	r3, [r7, #12]
 8001872:	ee07 3a90 	vmov	s15, r3
 8001876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800187a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80018a4 <READ_EPS_MCU_TEMP+0x70>
 800187e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001882:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80018a8 <READ_EPS_MCU_TEMP+0x74>
 8001886:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800188a:	eddf 6a08 	vldr	s13, [pc, #32]	; 80018ac <READ_EPS_MCU_TEMP+0x78>
 800188e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	3a200001 	.word	0x3a200001
 80018a8:	3f7c6a7f 	.word	0x3f7c6a7f
 80018ac:	3b68a71e 	.word	0x3b68a71e

080018b0 <READ_EPS_BATT_1_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 1 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_1_TEMP(float* temp_ptr){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80018b8:	2301      	movs	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 19; //battery cell 1 temperature command
 80018bc:	2313      	movs	r3, #19
 80018be:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80018c0:	f107 0208 	add.w	r2, r7, #8
 80018c4:	7bbb      	ldrb	r3, [r7, #14]
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 fb15 	bl	8001ef8 <EPS_READ>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <READ_EPS_BATT_1_TEMP+0x2c>
        return status;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	e014      	b.n	8001906 <READ_EPS_BATT_1_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80018dc:	7a3b      	ldrb	r3, [r7, #8]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	7a7b      	ldrb	r3, [r7, #9]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 80018ec:	89bb      	ldrh	r3, [r7, #12]
 80018ee:	ee07 3a90 	vmov	s15, r3
 80018f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018f6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001910 <READ_EPS_BATT_1_TEMP+0x60>
 80018fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001904:	7bfb      	ldrb	r3, [r7, #15]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	3b800000 	.word	0x3b800000

08001914 <READ_EPS_BATT_2_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 2 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_2_TEMP(float* temp_ptr){
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 20; //battery cell 2 temperature command
 8001920:	2314      	movs	r3, #20
 8001922:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001924:	f107 0208 	add.w	r2, r7, #8
 8001928:	7bbb      	ldrb	r3, [r7, #14]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f000 fae3 	bl	8001ef8 <EPS_READ>
 8001932:	4603      	mov	r3, r0
 8001934:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <READ_EPS_BATT_2_TEMP+0x2c>
        return status;
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	e014      	b.n	800196a <READ_EPS_BATT_2_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001940:	7a3b      	ldrb	r3, [r7, #8]
 8001942:	b29b      	uxth	r3, r3
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b29a      	uxth	r2, r3
 8001948:	7a7b      	ldrb	r3, [r7, #9]
 800194a:	b29b      	uxth	r3, r3
 800194c:	4413      	add	r3, r2
 800194e:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8001950:	89bb      	ldrh	r3, [r7, #12]
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800195a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001974 <READ_EPS_BATT_2_TEMP+0x60>
 800195e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	3b800000 	.word	0x3b800000

08001978 <READ_EPS_BATT_3_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 3 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_3_TEMP(float* temp_ptr){
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 21; //battery cell 3 temperature command
 8001984:	2315      	movs	r3, #21
 8001986:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001988:	f107 0208 	add.w	r2, r7, #8
 800198c:	7bbb      	ldrb	r3, [r7, #14]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f000 fab1 	bl	8001ef8 <EPS_READ>
 8001996:	4603      	mov	r3, r0
 8001998:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <READ_EPS_BATT_3_TEMP+0x2c>
        return status;
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	e014      	b.n	80019ce <READ_EPS_BATT_3_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80019a4:	7a3b      	ldrb	r3, [r7, #8]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	7a7b      	ldrb	r3, [r7, #9]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 80019b4:	89bb      	ldrh	r3, [r7, #12]
 80019b6:	ee07 3a90 	vmov	s15, r3
 80019ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019be:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80019d8 <READ_EPS_BATT_3_TEMP+0x60>
 80019c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	3b800000 	.word	0x3b800000

080019dc <READ_EPS_BATT_4_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 4 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_4_TEMP(float* temp_ptr){
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 22; //battery cell 4 temperature command
 80019e8:	2316      	movs	r3, #22
 80019ea:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80019ec:	f107 0208 	add.w	r2, r7, #8
 80019f0:	7bbb      	ldrb	r3, [r7, #14]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 fa7f 	bl	8001ef8 <EPS_READ>
 80019fa:	4603      	mov	r3, r0
 80019fc:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <READ_EPS_BATT_4_TEMP+0x2c>
        return status;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	e014      	b.n	8001a32 <READ_EPS_BATT_4_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001a08:	7a3b      	ldrb	r3, [r7, #8]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	7a7b      	ldrb	r3, [r7, #9]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	4413      	add	r3, r2
 8001a16:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8001a18:	89bb      	ldrh	r3, [r7, #12]
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a22:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001a3c <READ_EPS_BATT_4_TEMP+0x60>
 8001a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	3b800000 	.word	0x3b800000

08001a40 <READ_EPS_INPUT_CONDITION>:
/**
  * @brief Reads raw return value of the Input Condition command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_INPUT_CONDITION(uint16_t *cond_ptr){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 23; //input conditions command
 8001a4c:	2317      	movs	r3, #23
 8001a4e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001a50:	f107 020c 	add.w	r2, r7, #12
 8001a54:	7bbb      	ldrb	r3, [r7, #14]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 fa4d 	bl	8001ef8 <EPS_READ>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <READ_EPS_INPUT_CONDITION+0x2c>
        return status;
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	e00a      	b.n	8001a82 <READ_EPS_INPUT_CONDITION+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001a6c:	7b3b      	ldrb	r3, [r7, #12]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	7b7b      	ldrb	r3, [r7, #13]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	801a      	strh	r2, [r3, #0]
    return status;
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <READ_EPS_OUTPUT_CONDITION1>:
/**
  * @brief Reads raw return value of the Output Condition 1 command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OUTPUT_CONDITION1(uint16_t *cond_ptr){
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001a92:	2301      	movs	r3, #1
 8001a94:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 24; //output conditions command
 8001a96:	2318      	movs	r3, #24
 8001a98:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001a9a:	f107 020c 	add.w	r2, r7, #12
 8001a9e:	7bbb      	ldrb	r3, [r7, #14]
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 fa28 	bl	8001ef8 <EPS_READ>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <READ_EPS_OUTPUT_CONDITION1+0x2c>
        return status;
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	e00a      	b.n	8001acc <READ_EPS_OUTPUT_CONDITION1+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001ab6:	7b3b      	ldrb	r3, [r7, #12]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	7b7b      	ldrb	r3, [r7, #13]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	801a      	strh	r2, [r3, #0]
    return status;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <READ_EPS_OUTPUT_CONDITION2>:
/**
  * @brief Reads raw return value of the Output Condition 2 command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OUTPUT_CONDITION2(uint16_t *cond_ptr){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001adc:	2301      	movs	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 24; //output conditions command
 8001ae0:	2318      	movs	r3, #24
 8001ae2:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001ae4:	f107 020c 	add.w	r2, r7, #12
 8001ae8:	7bbb      	ldrb	r3, [r7, #14]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 fa03 	bl	8001ef8 <EPS_READ>
 8001af2:	4603      	mov	r3, r0
 8001af4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <READ_EPS_OUTPUT_CONDITION2+0x2c>
        return status;
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	e00a      	b.n	8001b16 <READ_EPS_OUTPUT_CONDITION2+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001b00:	7b3b      	ldrb	r3, [r7, #12]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	7b7b      	ldrb	r3, [r7, #13]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	801a      	strh	r2, [r3, #0]
    return status;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <READ_EPS_POWER_ON_CYCLES>:
/**
  * @brief Reads the current count of EPS power cycles and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_POWER_ON_CYCLES(uint16_t *count_ptr){
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001b26:	2301      	movs	r3, #1
 8001b28:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 26; //power on cycles count command
 8001b2a:	231a      	movs	r3, #26
 8001b2c:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001b2e:	f107 020c 	add.w	r2, r7, #12
 8001b32:	7bbb      	ldrb	r3, [r7, #14]
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 f9de 	bl	8001ef8 <EPS_READ>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <READ_EPS_POWER_ON_CYCLES+0x2c>
        return status;
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	e00a      	b.n	8001b60 <READ_EPS_POWER_ON_CYCLES+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001b4a:	7b3b      	ldrb	r3, [r7, #12]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	7b7b      	ldrb	r3, [r7, #13]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	801a      	strh	r2, [r3, #0]
    return status;
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <READ_EPS_UNDER_VOLT_COUNT>:
/**
  * @brief Reads the current count of EPS under-voltage occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_UNDER_VOLT_COUNT(uint16_t *count_ptr){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 27; //under voltage count command
 8001b74:	231b      	movs	r3, #27
 8001b76:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001b78:	f107 020c 	add.w	r2, r7, #12
 8001b7c:	7bbb      	ldrb	r3, [r7, #14]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 f9b9 	bl	8001ef8 <EPS_READ>
 8001b86:	4603      	mov	r3, r0
 8001b88:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <READ_EPS_UNDER_VOLT_COUNT+0x2c>
        return status;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	e00a      	b.n	8001baa <READ_EPS_UNDER_VOLT_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001b94:	7b3b      	ldrb	r3, [r7, #12]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	7b7b      	ldrb	r3, [r7, #13]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	801a      	strh	r2, [r3, #0]
    return status;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <READ_EPS_SHORT_CIRCUIT_COUNT>:
/**
  * @brief Reads the current count of EPS short-circuit occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SHORT_CIRCUIT_COUNT(uint16_t *count_ptr){
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b084      	sub	sp, #16
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001bba:	2301      	movs	r3, #1
 8001bbc:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 28; //short circuit count command
 8001bbe:	231c      	movs	r3, #28
 8001bc0:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001bc2:	f107 020c 	add.w	r2, r7, #12
 8001bc6:	7bbb      	ldrb	r3, [r7, #14]
 8001bc8:	4611      	mov	r1, r2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f994 	bl	8001ef8 <EPS_READ>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <READ_EPS_SHORT_CIRCUIT_COUNT+0x2c>
        return status;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	e00a      	b.n	8001bf4 <READ_EPS_SHORT_CIRCUIT_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001bde:	7b3b      	ldrb	r3, [r7, #12]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	7b7b      	ldrb	r3, [r7, #13]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	4413      	add	r3, r2
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	801a      	strh	r2, [r3, #0]
    return status;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <READ_EPS_OVER_TEMP_COUNT>:
/**
  * @brief Reads the current count of EPS over-temp occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OVER_TEMP_COUNT(uint16_t *count_ptr){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001c04:	2301      	movs	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 29; //over temperature count command
 8001c08:	231d      	movs	r3, #29
 8001c0a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001c0c:	f107 020c 	add.w	r2, r7, #12
 8001c10:	7bbb      	ldrb	r3, [r7, #14]
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 f96f 	bl	8001ef8 <EPS_READ>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <READ_EPS_OVER_TEMP_COUNT+0x2c>
        return status;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	e00a      	b.n	8001c3e <READ_EPS_OVER_TEMP_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001c28:	7b3b      	ldrb	r3, [r7, #12]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	7b7b      	ldrb	r3, [r7, #13]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	801a      	strh	r2, [r3, #0]
    return status;
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <READ_EPS_CHARGE_CYCLES>:
/**
  * @brief Reads the current count of EPS battery charge cycles and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_CHARGE_CYCLES(uint16_t *count_ptr){
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001c4e:	2301      	movs	r3, #1
 8001c50:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 48; //charging cycles count command
 8001c52:	2330      	movs	r3, #48	; 0x30
 8001c54:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001c56:	f107 020c 	add.w	r2, r7, #12
 8001c5a:	7bbb      	ldrb	r3, [r7, #14]
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f94a 	bl	8001ef8 <EPS_READ>
 8001c64:	4603      	mov	r3, r0
 8001c66:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <READ_EPS_CHARGE_CYCLES+0x2c>
        return status;
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	e00a      	b.n	8001c88 <READ_EPS_CHARGE_CYCLES+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001c72:	7b3b      	ldrb	r3, [r7, #12]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	7b7b      	ldrb	r3, [r7, #13]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	801a      	strh	r2, [r3, #0]
    return status;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <READ_EPS_DEFAULTS1>:
/**
  * @brief Reads the default values of LUPs and fast charge modes and stores the value in the pointed to address
  * @param default_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_DEFAULTS1(uint16_t *default_ptr){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 43; //output 1 default value command
 8001c9c:	232b      	movs	r3, #43	; 0x2b
 8001c9e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001ca0:	f107 020c 	add.w	r2, r7, #12
 8001ca4:	7bbb      	ldrb	r3, [r7, #14]
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 f925 	bl	8001ef8 <EPS_READ>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <READ_EPS_DEFAULTS1+0x2c>
        return status;
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	e00a      	b.n	8001cd2 <READ_EPS_DEFAULTS1+0x42>
    }
    (*default_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001cbc:	7b3b      	ldrb	r3, [r7, #12]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	7b7b      	ldrb	r3, [r7, #13]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	801a      	strh	r2, [r3, #0]
    return status;
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <READ_EPS_DEFAULTS2>:
/**
  * @brief Reads the default values of OUT1-OUT6 and stores the value in the pointed to address
  * @param default_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_DEFAULTS2(uint16_t *default_ptr){
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 44; //output 3 default value command
 8001ce6:	232c      	movs	r3, #44	; 0x2c
 8001ce8:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001cea:	f107 020c 	add.w	r2, r7, #12
 8001cee:	7bbb      	ldrb	r3, [r7, #14]
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 f900 	bl	8001ef8 <EPS_READ>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <READ_EPS_DEFAULTS2+0x2c>
        return status;
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	e00a      	b.n	8001d1c <READ_EPS_DEFAULTS2+0x42>
    }
    (*default_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001d06:	7b3b      	ldrb	r3, [r7, #12]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	7b7b      	ldrb	r3, [r7, #13]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	801a      	strh	r2, [r3, #0]
    return status;
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <enable_EPS_Vbatt_Bus>:


/********************************************** WRITE FUNCTIONS **********************************************************************************/
HAL_StatusTypeDef enable_EPS_Vbatt_Bus(){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
    return EPS_WRITE(1, 1); //turn command 1 to the ON state
 8001d28:	2101      	movs	r1, #1
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f000 f948 	bl	8001fc0 <EPS_WRITE>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <disable_EPS_Vbatt_Bus>:

HAL_StatusTypeDef disable_EPS_Vbatt_Bus(){
 8001d36:	b580      	push	{r7, lr}
 8001d38:	af00      	add	r7, sp, #0
    return EPS_WRITE(1, 2); //turn command 1 to the FORCE OFF state
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f000 f93f 	bl	8001fc0 <EPS_WRITE>
 8001d42:	4603      	mov	r3, r0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <enable_EPS_5v_Bus>:

HAL_StatusTypeDef disable_EPS_BCR_Bus(){
    return EPS_WRITE(2, 0); //turn command 2 to the OFF state
}

HAL_StatusTypeDef enable_EPS_5v_Bus(){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
    return EPS_WRITE(4, 1); //turn command 4 to the ON state
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	2004      	movs	r0, #4
 8001d50:	f000 f936 	bl	8001fc0 <EPS_WRITE>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <disable_EPS_5v_Bus>:

HAL_StatusTypeDef disable_EPS_5v_Bus(){
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	af00      	add	r7, sp, #0
    return EPS_WRITE(4, 2); //turn command 4 to the FORCE OFF state
 8001d5e:	2102      	movs	r1, #2
 8001d60:	2004      	movs	r0, #4
 8001d62:	f000 f92d 	bl	8001fc0 <EPS_WRITE>
 8001d66:	4603      	mov	r3, r0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <enable_EPS_LUP_3v>:

HAL_StatusTypeDef enable_EPS_LUP_3v(){
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
    return EPS_WRITE(5, 0); //turn command 5 to the ON state
 8001d70:	2100      	movs	r1, #0
 8001d72:	2005      	movs	r0, #5
 8001d74:	f000 f924 	bl	8001fc0 <EPS_WRITE>
 8001d78:	4603      	mov	r3, r0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <enable_EPS_LUP_5v>:

HAL_StatusTypeDef disable_EPS_LUP_3v(){
    return EPS_WRITE(5, 1); //turn command 5 to the OFF state
}

HAL_StatusTypeDef enable_EPS_LUP_5v(){
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	af00      	add	r7, sp, #0
    return EPS_WRITE(6, 0); //turn command 6 to the ON state
 8001d82:	2100      	movs	r1, #0
 8001d84:	2006      	movs	r0, #6
 8001d86:	f000 f91b 	bl	8001fc0 <EPS_WRITE>
 8001d8a:	4603      	mov	r3, r0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <enable_EPS_Fast_Charge1>:

HAL_StatusTypeDef disable_EPS_LUP_5v(){
    return EPS_WRITE(6, 1); //turn command 6 to the OFF state
}

HAL_StatusTypeDef enable_EPS_Fast_Charge1(){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
    return EPS_WRITE(8, 1); //turn command 8 to the ON state (HIGH = Fast?, LOW = Slow?)
 8001d94:	2101      	movs	r1, #1
 8001d96:	2008      	movs	r0, #8
 8001d98:	f000 f912 	bl	8001fc0 <EPS_WRITE>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <disable_EPS_Fast_Charge1>:

HAL_StatusTypeDef disable_EPS_Fast_Charge1(){
 8001da2:	b580      	push	{r7, lr}
 8001da4:	af00      	add	r7, sp, #0
    return EPS_WRITE(8, 0); //turn command 8 to the ON state (HIGH = Fast?, LOW = Slow?)
 8001da6:	2100      	movs	r1, #0
 8001da8:	2008      	movs	r0, #8
 8001daa:	f000 f909 	bl	8001fc0 <EPS_WRITE>
 8001dae:	4603      	mov	r3, r0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <enable_EPS_Fast_Charge2>:

HAL_StatusTypeDef enable_EPS_Fast_Charge2(){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
    return EPS_WRITE(9, 1); //turn command 9 to the ON state (HIGH = Fast?, LOW = Slow?)
 8001db8:	2101      	movs	r1, #1
 8001dba:	2009      	movs	r0, #9
 8001dbc:	f000 f900 	bl	8001fc0 <EPS_WRITE>
 8001dc0:	4603      	mov	r3, r0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <disable_EPS_Fast_Charge2>:

HAL_StatusTypeDef disable_EPS_Fast_Charge2(){
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	af00      	add	r7, sp, #0
    return EPS_WRITE(9, 0); //turn command 9 to the OFF state (HIGH = Fast?, LOW = Slow?)
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2009      	movs	r0, #9
 8001dce:	f000 f8f7 	bl	8001fc0 <EPS_WRITE>
 8001dd2:	4603      	mov	r3, r0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <enable_Boost_Board>:

HAL_StatusTypeDef enable_Boost_Board(){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
    return EPS_WRITE(10, 1); //turn command 10 to the ON state
 8001ddc:	2101      	movs	r1, #1
 8001dde:	200a      	movs	r0, #10
 8001de0:	f000 f8ee 	bl	8001fc0 <EPS_WRITE>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	bd80      	pop	{r7, pc}

08001dea <disable_Boost_Board>:

HAL_StatusTypeDef disable_Boost_Board(){
 8001dea:	b580      	push	{r7, lr}
 8001dec:	af00      	add	r7, sp, #0
    return EPS_WRITE(10, 0); //turn command 10 to the OFF state
 8001dee:	2100      	movs	r1, #0
 8001df0:	200a      	movs	r0, #10
 8001df2:	f000 f8e5 	bl	8001fc0 <EPS_WRITE>
 8001df6:	4603      	mov	r3, r0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <enable_Payload>:

HAL_StatusTypeDef enable_Payload(){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
    return EPS_WRITE(11, 1); //turn command 11 to the ON state
 8001e00:	2101      	movs	r1, #1
 8001e02:	200b      	movs	r0, #11
 8001e04:	f000 f8dc 	bl	8001fc0 <EPS_WRITE>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <disable_Payload>:

HAL_StatusTypeDef disable_Payload(){
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	af00      	add	r7, sp, #0
    return EPS_WRITE(11, 0); //turn command 11 to the OFF state
 8001e12:	2100      	movs	r1, #0
 8001e14:	200b      	movs	r0, #11
 8001e16:	f000 f8d3 	bl	8001fc0 <EPS_WRITE>
 8001e1a:	4603      	mov	r3, r0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <enable_EPS_Output_3>:

HAL_StatusTypeDef enable_EPS_Output_3(){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
    return EPS_WRITE(12, 1); //turn command 12 to the ON state
 8001e24:	2101      	movs	r1, #1
 8001e26:	200c      	movs	r0, #12
 8001e28:	f000 f8ca 	bl	8001fc0 <EPS_WRITE>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <disable_EPS_Output_3>:

HAL_StatusTypeDef disable_EPS_Output_3(){
 8001e32:	b580      	push	{r7, lr}
 8001e34:	af00      	add	r7, sp, #0
    return EPS_WRITE(12, 0); //turn command 12 to the OFF state
 8001e36:	2100      	movs	r1, #0
 8001e38:	200c      	movs	r0, #12
 8001e3a:	f000 f8c1 	bl	8001fc0 <EPS_WRITE>
 8001e3e:	4603      	mov	r3, r0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <enable_UHF>:

HAL_StatusTypeDef enable_UHF(){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
    return EPS_WRITE(14, 1); //turn command 14 to the ON state
 8001e48:	2101      	movs	r1, #1
 8001e4a:	200e      	movs	r0, #14
 8001e4c:	f000 f8b8 	bl	8001fc0 <EPS_WRITE>
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <disable_UHF>:

HAL_StatusTypeDef disable_UHF(){
 8001e56:	b580      	push	{r7, lr}
 8001e58:	af00      	add	r7, sp, #0
//    osThreadTerminate(myUHFTask);
//    osThreadDef(myUHFTask, UHF_Task, osPriorityNormal, 0, 512);
//    osThreadCreate(osThread(myUHFTask), NULL);
    return EPS_WRITE(14, 0); //turn command 14 to the OFF state
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	200e      	movs	r0, #14
 8001e5e:	f000 f8af 	bl	8001fc0 <EPS_WRITE>
 8001e62:	4603      	mov	r3, r0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <enable_EPS_Output_6>:

HAL_StatusTypeDef enable_EPS_Output_6(){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
    return EPS_WRITE(15, 1); //turn command 15 to the ON state
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	200f      	movs	r0, #15
 8001e70:	f000 f8a6 	bl	8001fc0 <EPS_WRITE>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <disable_EPS_Output_6>:

HAL_StatusTypeDef disable_EPS_Output_6(){
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	af00      	add	r7, sp, #0
    return EPS_WRITE(15, 0); //turn command 15 to the OFF state
 8001e7e:	2100      	movs	r1, #0
 8001e80:	200f      	movs	r0, #15
 8001e82:	f000 f89d 	bl	8001fc0 <EPS_WRITE>
 8001e86:	4603      	mov	r3, r0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <enable_EPS_Batt_Heater_1>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_1(){
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
    return EPS_WRITE(16, 1); //turn command 16 to the ON state
 8001e90:	2101      	movs	r1, #1
 8001e92:	2010      	movs	r0, #16
 8001e94:	f000 f894 	bl	8001fc0 <EPS_WRITE>
 8001e98:	4603      	mov	r3, r0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <disable_EPS_Batt_Heater_1>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_1(){
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	af00      	add	r7, sp, #0
    return EPS_WRITE(16, 0); //turn command 16 to the OFF state
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	2010      	movs	r0, #16
 8001ea6:	f000 f88b 	bl	8001fc0 <EPS_WRITE>
 8001eaa:	4603      	mov	r3, r0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <enable_EPS_Batt_Heater_2>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_2(){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
    return EPS_WRITE(17, 1); //turn command 17 to the ON state
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	2011      	movs	r0, #17
 8001eb8:	f000 f882 	bl	8001fc0 <EPS_WRITE>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <disable_EPS_Batt_Heater_2>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_2(){
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	af00      	add	r7, sp, #0
    return EPS_WRITE(17, 0); //turn command 17 to the OFF state
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	2011      	movs	r0, #17
 8001eca:	f000 f879 	bl	8001fc0 <EPS_WRITE>
 8001ece:	4603      	mov	r3, r0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <enable_EPS_Batt_Heater_3>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_3(){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
    return EPS_WRITE(18, 1); //turn command 18 to the ON state
 8001ed8:	2101      	movs	r1, #1
 8001eda:	2012      	movs	r0, #18
 8001edc:	f000 f870 	bl	8001fc0 <EPS_WRITE>
 8001ee0:	4603      	mov	r3, r0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <disable_EPS_Batt_Heater_3>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_3(){
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	af00      	add	r7, sp, #0
    return EPS_WRITE(18, 0); //turn command 18 to the OFF state
 8001eea:	2100      	movs	r1, #0
 8001eec:	2012      	movs	r0, #18
 8001eee:	f000 f867 	bl	8001fc0 <EPS_WRITE>
 8001ef2:	4603      	mov	r3, r0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <EPS_READ>:
  * @brief Sends a write command to the EPS module over a given I2C instance and reads back a response
  * @param command : the command to be used on the transceiver
  * @param data_ptr : A pointer to allow information from the health check to be viewed.
  * @retval Returns if the hal function call succeeded, or if it failed
  */
HAL_StatusTypeDef EPS_READ(uint8_t command, uint8_t* data_ptr){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	4603      	mov	r3, r0
 8001f00:	6039      	str	r1, [r7, #0]
 8001f02:	71fb      	strb	r3, [r7, #7]
    osMutexWait(EPS_I2C_Mutex, 2500);
 8001f04:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <EPS_READ+0xb8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f008 fb15 	bl	800a53c <osMutexWait>

    HAL_StatusTypeDef status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	73fb      	strb	r3, [r7, #15]
    status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), &command, 1, EPS_I2C_TIMEOUT);
 8001f16:	1dfa      	adds	r2, r7, #7
 8001f18:	2364      	movs	r3, #100	; 0x64
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	2130      	movs	r1, #48	; 0x30
 8001f20:	4824      	ldr	r0, [pc, #144]	; (8001fb4 <EPS_READ+0xbc>)
 8001f22:	f002 fb53 	bl	80045cc <HAL_I2C_Master_Transmit>
 8001f26:	4603      	mov	r3, r0
 8001f28:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d017      	beq.n	8001f60 <EPS_READ+0x68>
        osMutexWait(Num_I2C_Errors_Mutex, 500);
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <EPS_READ+0xc0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f008 faff 	bl	800a53c <osMutexWait>
        NUM_I2C_ERRORS++;
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <EPS_READ+0xc4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <EPS_READ+0xc4>)
 8001f46:	6013      	str	r3, [r2, #0]
        osMutexRelease(Num_I2C_Errors_Mutex);
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <EPS_READ+0xc0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f008 fb45 	bl	800a5dc <osMutexRelease>
        osMutexRelease(EPS_I2C_Mutex);
 8001f52:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <EPS_READ+0xb8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f008 fb40 	bl	800a5dc <osMutexRelease>
        return status;
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	e023      	b.n	8001fa8 <EPS_READ+0xb0>
    }
    status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), data_ptr, 2, EPS_I2C_TIMEOUT);
 8001f60:	2364      	movs	r3, #100	; 0x64
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	2302      	movs	r3, #2
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	2130      	movs	r1, #48	; 0x30
 8001f6a:	4812      	ldr	r0, [pc, #72]	; (8001fb4 <EPS_READ+0xbc>)
 8001f6c:	f002 fc3c 	bl	80047e8 <HAL_I2C_Master_Receive>
 8001f70:	4603      	mov	r3, r0
 8001f72:	73fb      	strb	r3, [r7, #15]

    if(status != HAL_OK){
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d010      	beq.n	8001f9c <EPS_READ+0xa4>
        osMutexWait(Num_I2C_Errors_Mutex, 500);
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <EPS_READ+0xc0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001f82:	4618      	mov	r0, r3
 8001f84:	f008 fada 	bl	800a53c <osMutexWait>
        NUM_I2C_ERRORS++;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <EPS_READ+0xc4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <EPS_READ+0xc4>)
 8001f90:	6013      	str	r3, [r2, #0]
        osMutexRelease(Num_I2C_Errors_Mutex);
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <EPS_READ+0xc0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f008 fb20 	bl	800a5dc <osMutexRelease>
    }

    osMutexRelease(EPS_I2C_Mutex);
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <EPS_READ+0xb8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f008 fb1b 	bl	800a5dc <osMutexRelease>
    return status;
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000228 	.word	0x20000228
 8001fb4:	200002a0 	.word	0x200002a0
 8001fb8:	20000230 	.word	0x20000230
 8001fbc:	20000208 	.word	0x20000208

08001fc0 <EPS_WRITE>:
/**
  * @brief Sends a write command to the EPS module over a given I2C instance
  * @param state: the state to set the output specified by the command to (0 or 1)
  * @retval Returns if the hal function call succeeded, or if it failed
  */
HAL_StatusTypeDef EPS_WRITE(uint8_t command, uint8_t state){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	460a      	mov	r2, r1
 8001fca:	71fb      	strb	r3, [r7, #7]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	71bb      	strb	r3, [r7, #6]
    osMutexWait(EPS_I2C_Mutex, 1500);
 8001fd0:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <EPS_WRITE+0xd0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f008 faaf 	bl	800a53c <osMutexWait>

    HAL_StatusTypeDef status = HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2];
    data[0] = command;
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	733b      	strb	r3, [r7, #12]
    data[1] = state;
 8001fe6:	79bb      	ldrb	r3, [r7, #6]
 8001fe8:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Master_Transmit(&hi2c1, (EPS_I2C_ADDRESS << 0x1), data, 2, EPS_I2C_TIMEOUT); //Possibly size needs to be 3, and data should maybe be replaced with data buffer
 8001fea:	f107 020c 	add.w	r2, r7, #12
 8001fee:	2364      	movs	r3, #100	; 0x64
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	2130      	movs	r1, #48	; 0x30
 8001ff6:	4827      	ldr	r0, [pc, #156]	; (8002094 <EPS_WRITE+0xd4>)
 8001ff8:	f002 fae8 	bl	80045cc <HAL_I2C_Master_Transmit>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]

    if(status != HAL_OK){
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d039      	beq.n	800207a <EPS_WRITE+0xba>
        osMutexWait(Num_I2C_Errors_Mutex, 500);
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <EPS_WRITE+0xd8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800200e:	4618      	mov	r0, r3
 8002010:	f008 fa94 	bl	800a53c <osMutexWait>
        NUM_I2C_ERRORS++;
 8002014:	4b21      	ldr	r3, [pc, #132]	; (800209c <EPS_WRITE+0xdc>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	4a20      	ldr	r2, [pc, #128]	; (800209c <EPS_WRITE+0xdc>)
 800201c:	6013      	str	r3, [r2, #0]
        osMutexRelease(Num_I2C_Errors_Mutex);
 800201e:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <EPS_WRITE+0xd8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f008 fada 	bl	800a5dc <osMutexRelease>
        if(status == HAL_ERROR){
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d103      	bne.n	8002036 <EPS_WRITE+0x76>
            debug_led_green(50,50);
 800202e:	2132      	movs	r1, #50	; 0x32
 8002030:	2032      	movs	r0, #50	; 0x32
 8002032:	f001 fb49 	bl	80036c8 <debug_led_green>
        }
        if(status == HAL_BUSY){
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d103      	bne.n	8002044 <EPS_WRITE+0x84>
            debug_led_amber(50,50);
 800203c:	2132      	movs	r1, #50	; 0x32
 800203e:	2032      	movs	r0, #50	; 0x32
 8002040:	f001 fb6c 	bl	800371c <debug_led_amber>
        }
        if(status == HAL_TIMEOUT){
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	2b03      	cmp	r3, #3
 8002048:	d117      	bne.n	800207a <EPS_WRITE+0xba>
            debug_led_green(10,50);
 800204a:	2132      	movs	r1, #50	; 0x32
 800204c:	200a      	movs	r0, #10
 800204e:	f001 fb3b 	bl	80036c8 <debug_led_green>
            debug_led_amber(10,50);
 8002052:	2132      	movs	r1, #50	; 0x32
 8002054:	200a      	movs	r0, #10
 8002056:	f001 fb61 	bl	800371c <debug_led_amber>
            debug_led_green(10,50);
 800205a:	2132      	movs	r1, #50	; 0x32
 800205c:	200a      	movs	r0, #10
 800205e:	f001 fb33 	bl	80036c8 <debug_led_green>
            debug_led_amber(10,50);
 8002062:	2132      	movs	r1, #50	; 0x32
 8002064:	200a      	movs	r0, #10
 8002066:	f001 fb59 	bl	800371c <debug_led_amber>
            debug_led_green(10,50);
 800206a:	2132      	movs	r1, #50	; 0x32
 800206c:	200a      	movs	r0, #10
 800206e:	f001 fb2b 	bl	80036c8 <debug_led_green>
            debug_led_amber(10,50);
 8002072:	2132      	movs	r1, #50	; 0x32
 8002074:	200a      	movs	r0, #10
 8002076:	f001 fb51 	bl	800371c <debug_led_amber>
        }


    }

    osMutexRelease(EPS_I2C_Mutex);
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <EPS_WRITE+0xd0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f008 faac 	bl	800a5dc <osMutexRelease>
    return status;
 8002084:	7bfb      	ldrb	r3, [r7, #15]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000228 	.word	0x20000228
 8002094:	200002a0 	.word	0x200002a0
 8002098:	20000230 	.word	0x20000230
 800209c:	20000208 	.word	0x20000208

080020a0 <sendErrorPacket>:
/**
 * @brief This function sends an error packet to the Ground Station
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
int sendErrorPacket(){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
    CySat_Packet_t cySatPacket;
    cySatPacket.Subsystem_Type = OBC_SUBSYSTEM_TYPE;
 80020a6:	230a      	movs	r3, #10
 80020a8:	713b      	strb	r3, [r7, #4]
    cySatPacket.Command = 0xFF;
 80020aa:	23ff      	movs	r3, #255	; 0xff
 80020ac:	717b      	strb	r3, [r7, #5]
    cySatPacket.Data_Length = 0x02;
 80020ae:	2302      	movs	r3, #2
 80020b0:	71bb      	strb	r3, [r7, #6]
    cySatPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 2);
 80020b2:	2002      	movs	r0, #2
 80020b4:	f00b f816 	bl	800d0e4 <malloc>
 80020b8:	4603      	mov	r3, r0
 80020ba:	60bb      	str	r3, [r7, #8]
    cySatPacket.Data[0] = 0xFF;
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	22ff      	movs	r2, #255	; 0xff
 80020c0:	701a      	strb	r2, [r3, #0]
    cySatPacket.Data[1] = 0xFF;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	3301      	adds	r3, #1
 80020c6:	22ff      	movs	r2, #255	; 0xff
 80020c8:	701a      	strb	r2, [r3, #0]
    cySatPacket.Checksum = generateCySatChecksum(cySatPacket);
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020d0:	f7ff f8b4 	bl	800123c <generateCySatChecksum>
 80020d4:	4603      	mov	r3, r0
 80020d6:	733b      	strb	r3, [r7, #12]
    return sendCySatPacket(cySatPacket);
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020de:	f7ff f82d 	bl	800113c <sendCySatPacket>
 80020e2:	4603      	mov	r3, r0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <handleCySatPacket>:
/**
 * @brief This function takes in a newly received CySat Packet and acts upon the command within
 * @param packet: the packet to handle
 * @retval A zero indicates success, -1 means the command or subtype is unrecognized, else means failure
 */
int handleCySatPacket(CySat_Packet_t packet){
 80020ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ee:	b0b9      	sub	sp, #228	; 0xe4
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    HAL_StatusTypeDef status;
    CySat_Packet_t outgoingPacket;
    switch(packet.Subsystem_Type){
 80020f8:	793b      	ldrb	r3, [r7, #4]
 80020fa:	2b28      	cmp	r3, #40	; 0x28
 80020fc:	dc48      	bgt.n	8002190 <handleCySatPacket+0xa4>
 80020fe:	2b0a      	cmp	r3, #10
 8002100:	f2c1 805c 	blt.w	80031bc <handleCySatPacket+0x10d0>
 8002104:	3b0a      	subs	r3, #10
 8002106:	2b1e      	cmp	r3, #30
 8002108:	f201 8058 	bhi.w	80031bc <handleCySatPacket+0x10d0>
 800210c:	a201      	add	r2, pc, #4	; (adr r2, 8002114 <handleCySatPacket+0x28>)
 800210e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002112:	bf00      	nop
 8002114:	0800219b 	.word	0x0800219b
 8002118:	080031bd 	.word	0x080031bd
 800211c:	080031bd 	.word	0x080031bd
 8002120:	080031bd 	.word	0x080031bd
 8002124:	080031bd 	.word	0x080031bd
 8002128:	080031bd 	.word	0x080031bd
 800212c:	080031bd 	.word	0x080031bd
 8002130:	080031bd 	.word	0x080031bd
 8002134:	080031bd 	.word	0x080031bd
 8002138:	080031bd 	.word	0x080031bd
 800213c:	080031c3 	.word	0x080031c3
 8002140:	080031bd 	.word	0x080031bd
 8002144:	080031bd 	.word	0x080031bd
 8002148:	080031bd 	.word	0x080031bd
 800214c:	080031bd 	.word	0x080031bd
 8002150:	080031bd 	.word	0x080031bd
 8002154:	080031bd 	.word	0x080031bd
 8002158:	080031bd 	.word	0x080031bd
 800215c:	080031bd 	.word	0x080031bd
 8002160:	080031bd 	.word	0x080031bd
 8002164:	08002397 	.word	0x08002397
 8002168:	080031bd 	.word	0x080031bd
 800216c:	080031bd 	.word	0x080031bd
 8002170:	080031bd 	.word	0x080031bd
 8002174:	080031bd 	.word	0x080031bd
 8002178:	080031bd 	.word	0x080031bd
 800217c:	080031bd 	.word	0x080031bd
 8002180:	080031bd 	.word	0x080031bd
 8002184:	080031bd 	.word	0x080031bd
 8002188:	080031bd 	.word	0x080031bd
 800218c:	080031c3 	.word	0x080031c3
 8002190:	2b5a      	cmp	r3, #90	; 0x5a
 8002192:	f001 8018 	beq.w	80031c6 <handleCySatPacket+0x10da>
 8002196:	f001 b811 	b.w	80031bc <handleCySatPacket+0x10d0>
        case OBC_SUBSYSTEM_TYPE: //OBC
            switch(packet.Command){
 800219a:	797b      	ldrb	r3, [r7, #5]
 800219c:	3b01      	subs	r3, #1
 800219e:	2b0b      	cmp	r3, #11
 80021a0:	f201 8013 	bhi.w	80031ca <handleCySatPacket+0x10de>
 80021a4:	a201      	add	r2, pc, #4	; (adr r2, 80021ac <handleCySatPacket+0xc0>)
 80021a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021aa:	bf00      	nop
 80021ac:	080021dd 	.word	0x080021dd
 80021b0:	080031cb 	.word	0x080031cb
 80021b4:	0800226f 	.word	0x0800226f
 80021b8:	080031cb 	.word	0x080031cb
 80021bc:	08002303 	.word	0x08002303
 80021c0:	080031cb 	.word	0x080031cb
 80021c4:	08002303 	.word	0x08002303
 80021c8:	080031cb 	.word	0x080031cb
 80021cc:	08002303 	.word	0x08002303
 80021d0:	08002303 	.word	0x08002303
 80021d4:	080031cb 	.word	0x080031cb
 80021d8:	08002303 	.word	0x08002303
                case 0x01: { //Ping Request
                    char message[58] = "Alive and well, Ames! Congratulations to the CySat-1 Team!";
 80021dc:	4bd4      	ldr	r3, [pc, #848]	; (8002530 <handleCySatPacket+0x444>)
 80021de:	f107 0410 	add.w	r4, r7, #16
 80021e2:	461d      	mov	r5, r3
 80021e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021f4:	c403      	stmia	r4!, {r0, r1}
 80021f6:	8022      	strh	r2, [r4, #0]
                    outgoingPacket.Subsystem_Type = OBC_SUBSYSTEM_TYPE;
 80021f8:	230a      	movs	r3, #10
 80021fa:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x00; //Ping response
 80021fe:	2300      	movs	r3, #0
 8002200:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x3A;
 8002204:	233a      	movs	r3, #58	; 0x3a
 8002206:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 58);
 800220a:	203a      	movs	r0, #58	; 0x3a
 800220c:	f00a ff6a 	bl	800d0e4 <malloc>
 8002210:	4603      	mov	r3, r0
 8002212:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    memcpy(outgoingPacket.Data,message,58); //This too IDK seriously this might not work
 8002216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800221a:	f107 0410 	add.w	r4, r7, #16
 800221e:	469c      	mov	ip, r3
 8002220:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002224:	4665      	mov	r5, ip
 8002226:	4626      	mov	r6, r4
 8002228:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800222a:	6028      	str	r0, [r5, #0]
 800222c:	6069      	str	r1, [r5, #4]
 800222e:	60aa      	str	r2, [r5, #8]
 8002230:	60eb      	str	r3, [r5, #12]
 8002232:	3410      	adds	r4, #16
 8002234:	f10c 0c10 	add.w	ip, ip, #16
 8002238:	4574      	cmp	r4, lr
 800223a:	d1f3      	bne.n	8002224 <handleCySatPacket+0x138>
 800223c:	4662      	mov	r2, ip
 800223e:	4623      	mov	r3, r4
 8002240:	cb03      	ldmia	r3!, {r0, r1}
 8002242:	6010      	str	r0, [r2, #0]
 8002244:	6051      	str	r1, [r2, #4]
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	8113      	strh	r3, [r2, #8]
                    //outgoingPacket.Data[57]=message[57]; //I don't know what I'm doing please check this
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 800224a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800224e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002252:	f7fe fff3 	bl	800123c <generateCySatChecksum>
 8002256:	4603      	mov	r3, r0
 8002258:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    return sendCySatPacket(outgoingPacket); //send the response
 800225c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002260:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002264:	f7fe ff6a 	bl	800113c <sendCySatPacket>
 8002268:	4603      	mov	r3, r0
 800226a:	f000 bfb2 	b.w	80031d2 <handleCySatPacket+0x10e6>
                }
                case 0x03: { //Shutoff Beacon Request
                    status=END_BEACON();
 800226e:	f001 f80a 	bl	8003286 <END_BEACON>
 8002272:	4603      	mov	r3, r0
 8002274:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002278:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <handleCySatPacket+0x19c>
                        return -1;
 8002280:	f04f 33ff 	mov.w	r3, #4294967295
 8002284:	f000 bfa5 	b.w	80031d2 <handleCySatPacket+0x10e6>
                    }

                    uint16_t data1 = FloatToUnsigned16bits(status);
 8002288:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800228c:	ee07 3a90 	vmov	s15, r3
 8002290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002294:	eeb0 0a67 	vmov.f32	s0, s15
 8002298:	f001 fa6a 	bl	8003770 <FloatToUnsigned16bits>
 800229c:	4603      	mov	r3, r0
 800229e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

                    outgoingPacket.Subsystem_Type = OBC_SUBSYSTEM_TYPE;
 80022a2:	230a      	movs	r3, #10
 80022a4:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x02; //Shutoff Beacon response
 80022a8:	2302      	movs	r3, #2
 80022aa:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x02;
 80022ae:	2302      	movs	r3, #2
 80022b0:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 2);
 80022b4:	2002      	movs	r0, #2
 80022b6:	f00a ff15 	bl	800d0e4 <malloc>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 80022c0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 80022d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022d4:	3301      	adds	r3, #1
 80022d6:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 80022de:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80022e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022e6:	f7fe ffa9 	bl	800123c <generateCySatChecksum>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    return sendCySatPacket(outgoingPacket); //send the response
 80022f0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80022f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022f8:	f7fe ff20 	bl	800113c <sendCySatPacket>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f000 bf68 	b.w	80031d2 <handleCySatPacket+0x10e6>
                }
                case 0x0A: { //Set beacon text
                    //This will have to wait for transmission of text this is gonna be hard
                }
                case 0x0C: { //Enable Beacon
                    status=START_BEACON();
 8002302:	f000 ff6b 	bl	80031dc <START_BEACON>
 8002306:	4603      	mov	r3, r0
 8002308:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 800230c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <handleCySatPacket+0x230>
                        return -1;
 8002314:	f04f 33ff 	mov.w	r3, #4294967295
 8002318:	f000 bf5b 	b.w	80031d2 <handleCySatPacket+0x10e6>
                    }

                    uint16_t data1 = FloatToUnsigned16bits(status);
 800231c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002320:	ee07 3a90 	vmov	s15, r3
 8002324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002328:	eeb0 0a67 	vmov.f32	s0, s15
 800232c:	f001 fa20 	bl	8003770 <FloatToUnsigned16bits>
 8002330:	4603      	mov	r3, r0
 8002332:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8

                    outgoingPacket.Subsystem_Type = OBC_SUBSYSTEM_TYPE;
 8002336:	230a      	movs	r3, #10
 8002338:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x0B; //Enable Beacon response
 800233c:	230b      	movs	r3, #11
 800233e:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x02;
 8002342:	2302      	movs	r3, #2
 8002344:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 2);
 8002348:	2002      	movs	r0, #2
 800234a:	f00a fecb 	bl	800d0e4 <malloc>
 800234e:	4603      	mov	r3, r0
 8002350:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002354:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	b29a      	uxth	r2, r3
 800235c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002368:	3301      	adds	r3, #1
 800236a:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002372:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002376:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800237a:	f7fe ff5f 	bl	800123c <generateCySatChecksum>
 800237e:	4603      	mov	r3, r0
 8002380:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    return sendCySatPacket(outgoingPacket); //send the response
 8002384:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002388:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800238c:	f7fe fed6 	bl	800113c <sendCySatPacket>
 8002390:	4603      	mov	r3, r0
 8002392:	f000 bf1e 	b.w	80031d2 <handleCySatPacket+0x10e6>
        case ADCS_SUBSYSTEM_TYPE: //ADCS

            break;

        case EPS_SUBSYSTEM_TYPE: //EPS
            switch(packet.Command){
 8002396:	797b      	ldrb	r3, [r7, #5]
 8002398:	3b01      	subs	r3, #1
 800239a:	2b10      	cmp	r3, #16
 800239c:	f200 8717 	bhi.w	80031ce <handleCySatPacket+0x10e2>
 80023a0:	a201      	add	r2, pc, #4	; (adr r2, 80023a8 <handleCySatPacket+0x2bc>)
 80023a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a6:	bf00      	nop
 80023a8:	080023ed 	.word	0x080023ed
 80023ac:	080031cf 	.word	0x080031cf
 80023b0:	080024d1 	.word	0x080024d1
 80023b4:	080031cf 	.word	0x080031cf
 80023b8:	0800261d 	.word	0x0800261d
 80023bc:	080031cf 	.word	0x080031cf
 80023c0:	08002765 	.word	0x08002765
 80023c4:	080031cf 	.word	0x080031cf
 80023c8:	080028ad 	.word	0x080028ad
 80023cc:	080031cf 	.word	0x080031cf
 80023d0:	080029a3 	.word	0x080029a3
 80023d4:	080031cf 	.word	0x080031cf
 80023d8:	08002b85 	.word	0x08002b85
 80023dc:	080031cf 	.word	0x080031cf
 80023e0:	08002cc3 	.word	0x08002cc3
 80023e4:	080031cf 	.word	0x080031cf
 80023e8:	08002e49 	.word	0x08002e49
                case 0x01: { //Battery Pack Voltage/Current Request
                    float voltage, current;
                    status = READ_EPS_BATTERY_VOLTAGE(&voltage); //read the voltage from the EPS Battery Pack
 80023ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe ff95 	bl	8001320 <READ_EPS_BATTERY_VOLTAGE>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80023fc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <handleCySatPacket+0x320>
                        return -1;
 8002404:	f04f 33ff 	mov.w	r3, #4294967295
 8002408:	f000 bee3 	b.w	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_BATTERY_CURRENT(&current); //read the current from the EPS Battery Pack
 800240c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe ffb7 	bl	8001384 <READ_EPS_BATTERY_CURRENT>
 8002416:	4603      	mov	r3, r0
 8002418:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 800241c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <handleCySatPacket+0x340>
                        return -1;
 8002424:	f04f 33ff 	mov.w	r3, #4294967295
 8002428:	f000 bed3 	b.w	80031d2 <handleCySatPacket+0x10e6>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(voltage);
 800242c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002430:	eeb0 0a67 	vmov.f32	s0, s15
 8002434:	f001 f99c 	bl	8003770 <FloatToUnsigned16bits>
 8002438:	4603      	mov	r3, r0
 800243a:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
                    uint16_t data2 = FloatToUnsigned16bits(current);
 800243e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002442:	eeb0 0a67 	vmov.f32	s0, s15
 8002446:	f001 f993 	bl	8003770 <FloatToUnsigned16bits>
 800244a:	4603      	mov	r3, r0
 800244c:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002450:	231e      	movs	r3, #30
 8002452:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x00; //Battery Pack Voltage/Current Response
 8002456:	2300      	movs	r3, #0
 8002458:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x04;
 800245c:	2304      	movs	r3, #4
 800245e:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 8002462:	2004      	movs	r0, #4
 8002464:	f00a fe3e 	bl	800d0e4 <malloc>
 8002468:	4603      	mov	r3, r0
 800246a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 800246e:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8002472:	0a1b      	lsrs	r3, r3, #8
 8002474:	b29a      	uxth	r2, r3
 8002476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 800247e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002482:	3301      	adds	r3, #1
 8002484:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 800248c:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	b29a      	uxth	r2, r3
 8002494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002498:	3302      	adds	r3, #2
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 800249e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024a2:	3303      	adds	r3, #3
 80024a4:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 80024ac:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80024b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024b4:	f7fe fec2 	bl	800123c <generateCySatChecksum>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    return sendCySatPacket(outgoingPacket); //send the response
 80024be:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80024c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024c6:	f7fe fe39 	bl	800113c <sendCySatPacket>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f000 be81 	b.w	80031d2 <handleCySatPacket+0x10e6>
                }
                case 0x03: { //Solar Panel X Status Request
                    float x_voltage, x_neg_current, x_pos_current;
                    status = READ_EPS_SOLAR_X_VOLTAGE(&x_voltage); //read the Solar Panel X axis voltage
 80024d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe ff87 	bl	80013e8 <READ_EPS_SOLAR_X_VOLTAGE>
 80024da:	4603      	mov	r3, r0
 80024dc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80024e0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <handleCySatPacket+0x404>
                        return -1;
 80024e8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ec:	f000 be71 	b.w	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SOLAR_X_NEG_CURRENT(&x_neg_current); //read the Solar Panel X- current
 80024f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe ffa9 	bl	800144c <READ_EPS_SOLAR_X_NEG_CURRENT>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002500:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <handleCySatPacket+0x424>
                        return -1;
 8002508:	f04f 33ff 	mov.w	r3, #4294967295
 800250c:	f000 be61 	b.w	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SOLAR_X_POS_CURRENT(&x_pos_current); //read the Solar Panel X+ current
 8002510:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe ffcb 	bl	80014b0 <READ_EPS_SOLAR_X_POS_CURRENT>
 800251a:	4603      	mov	r3, r0
 800251c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002520:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <handleCySatPacket+0x448>
                        return -1;
 8002528:	f04f 33ff 	mov.w	r3, #4294967295
 800252c:	f000 be51 	b.w	80031d2 <handleCySatPacket+0x10e6>
 8002530:	08010168 	.word	0x08010168
                    }
                    uint16_t data1 = FloatToUnsigned16bits(x_voltage);
 8002534:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002538:	eeb0 0a67 	vmov.f32	s0, s15
 800253c:	f001 f918 	bl	8003770 <FloatToUnsigned16bits>
 8002540:	4603      	mov	r3, r0
 8002542:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
                    uint16_t data2 = FloatToUnsigned16bits(x_neg_current);
 8002546:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800254a:	eeb0 0a67 	vmov.f32	s0, s15
 800254e:	f001 f90f 	bl	8003770 <FloatToUnsigned16bits>
 8002552:	4603      	mov	r3, r0
 8002554:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
                    uint16_t data3 = FloatToUnsigned16bits(x_pos_current);
 8002558:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800255c:	eeb0 0a67 	vmov.f32	s0, s15
 8002560:	f001 f906 	bl	8003770 <FloatToUnsigned16bits>
 8002564:	4603      	mov	r3, r0
 8002566:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 800256a:	231e      	movs	r3, #30
 800256c:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x02; //Solar Panel X Status Response
 8002570:	2302      	movs	r3, #2
 8002572:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x06;
 8002576:	2306      	movs	r3, #6
 8002578:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 800257c:	2006      	movs	r0, #6
 800257e:	f00a fdb1 	bl	800d0e4 <malloc>
 8002582:	4603      	mov	r3, r0
 8002584:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002588:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	b29a      	uxth	r2, r3
 8002590:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002598:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800259c:	3301      	adds	r3, #1
 800259e:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 80025a6:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025b2:	3302      	adds	r3, #2
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 80025b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025bc:	3303      	adds	r3, #3
 80025be:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 80025c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025d2:	3304      	adds	r3, #4
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 80025d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025dc:	3305      	adds	r3, #5
 80025de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 80025e6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80025ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80025ee:	f7fe fe25 	bl	800123c <generateCySatChecksum>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 80025f8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80025fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002600:	f7fe fd9c 	bl	800113c <sendCySatPacket>
 8002604:	4603      	mov	r3, r0
 8002606:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 800260a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800260e:	4618      	mov	r0, r3
 8002610:	f00a fd70 	bl	800d0f4 <free>
                    return status; //send the response
 8002614:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002618:	f000 bddb 	b.w	80031d2 <handleCySatPacket+0x10e6>
                }
                case 0x05: { //Solar Panel Y Status Request
                    float y_voltage, y_neg_current, y_pos_current;
                    status = READ_EPS_SOLAR_Y_VOLTAGE(&y_voltage); //read the Solar Panel Y axis voltage
 800261c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe ff77 	bl	8001514 <READ_EPS_SOLAR_Y_VOLTAGE>
 8002626:	4603      	mov	r3, r0
 8002628:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 800262c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <handleCySatPacket+0x550>
                        return -1;
 8002634:	f04f 33ff 	mov.w	r3, #4294967295
 8002638:	f000 bdcb 	b.w	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SOLAR_Y_NEG_CURRENT(&y_neg_current); //read the Solar Panel Y- current
 800263c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe ff99 	bl	8001578 <READ_EPS_SOLAR_Y_NEG_CURRENT>
 8002646:	4603      	mov	r3, r0
 8002648:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 800264c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <handleCySatPacket+0x570>
                        return -1;
 8002654:	f04f 33ff 	mov.w	r3, #4294967295
 8002658:	f000 bdbb 	b.w	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SOLAR_Y_POS_CURRENT(&y_pos_current); //read the Solar Panel Y+ current
 800265c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe ffbb 	bl	80015dc <READ_EPS_SOLAR_Y_POS_CURRENT>
 8002666:	4603      	mov	r3, r0
 8002668:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 800266c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <handleCySatPacket+0x590>
                        return -1;
 8002674:	f04f 33ff 	mov.w	r3, #4294967295
 8002678:	f000 bdab 	b.w	80031d2 <handleCySatPacket+0x10e6>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(y_voltage);
 800267c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002680:	eeb0 0a67 	vmov.f32	s0, s15
 8002684:	f001 f874 	bl	8003770 <FloatToUnsigned16bits>
 8002688:	4603      	mov	r3, r0
 800268a:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                    uint16_t data2 = FloatToUnsigned16bits(y_neg_current);
 800268e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002692:	eeb0 0a67 	vmov.f32	s0, s15
 8002696:	f001 f86b 	bl	8003770 <FloatToUnsigned16bits>
 800269a:	4603      	mov	r3, r0
 800269c:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
                    uint16_t data3 = FloatToUnsigned16bits(y_pos_current);
 80026a0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80026a4:	eeb0 0a67 	vmov.f32	s0, s15
 80026a8:	f001 f862 	bl	8003770 <FloatToUnsigned16bits>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80026b2:	231e      	movs	r3, #30
 80026b4:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x04; //Solar Panel Y Status Response
 80026b8:	2304      	movs	r3, #4
 80026ba:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x06;
 80026be:	2306      	movs	r3, #6
 80026c0:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 80026c4:	2006      	movs	r0, #6
 80026c6:	f00a fd0d 	bl	800d0e4 <malloc>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 80026d0:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 80026e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026e4:	3301      	adds	r3, #1
 80026e6:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 80026ee:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80026f2:	0a1b      	lsrs	r3, r3, #8
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026fa:	3302      	adds	r3, #2
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002700:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002704:	3303      	adds	r3, #3
 8002706:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 800270e:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8002712:	0a1b      	lsrs	r3, r3, #8
 8002714:	b29a      	uxth	r2, r3
 8002716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800271a:	3304      	adds	r3, #4
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8002720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002724:	3305      	adds	r3, #5
 8002726:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 800272e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002732:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002736:	f7fe fd81 	bl	800123c <generateCySatChecksum>
 800273a:	4603      	mov	r3, r0
 800273c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 8002740:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002744:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002748:	f7fe fcf8 	bl	800113c <sendCySatPacket>
 800274c:	4603      	mov	r3, r0
 800274e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 8002752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002756:	4618      	mov	r0, r3
 8002758:	f00a fccc 	bl	800d0f4 <free>
                    return status; //send the response
 800275c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002760:	f000 bd37 	b.w	80031d2 <handleCySatPacket+0x10e6>
                }
                case 0x07: { //Solar Panel Z Status Request
                    float z_voltage, z_neg_current, z_pos_current;
                    status = READ_EPS_SOLAR_Z_VOLTAGE(&z_voltage); //read the Solar Panel Z axis voltage
 8002764:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002768:	4618      	mov	r0, r3
 800276a:	f7fe ff69 	bl	8001640 <READ_EPS_SOLAR_Z_VOLTAGE>
 800276e:	4603      	mov	r3, r0
 8002770:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002774:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <handleCySatPacket+0x698>
                        return -1;
 800277c:	f04f 33ff 	mov.w	r3, #4294967295
 8002780:	f000 bd27 	b.w	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SOLAR_Z_NEG_CURRENT(&z_neg_current); //read the Solar Panel Z- current
 8002784:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe ff8b 	bl	80016a4 <READ_EPS_SOLAR_Z_NEG_CURRENT>
 800278e:	4603      	mov	r3, r0
 8002790:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002794:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <handleCySatPacket+0x6b8>
                        return -1;
 800279c:	f04f 33ff 	mov.w	r3, #4294967295
 80027a0:	f000 bd17 	b.w	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SOLAR_Z_POS_CURRENT(&z_pos_current); //read the Solar Panel Z+ current
 80027a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe ffad 	bl	8001708 <READ_EPS_SOLAR_Z_POS_CURRENT>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80027b4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <handleCySatPacket+0x6d8>
                        return -1;
 80027bc:	f04f 33ff 	mov.w	r3, #4294967295
 80027c0:	f000 bd07 	b.w	80031d2 <handleCySatPacket+0x10e6>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(z_voltage);
 80027c4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80027c8:	eeb0 0a67 	vmov.f32	s0, s15
 80027cc:	f000 ffd0 	bl	8003770 <FloatToUnsigned16bits>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
                    uint16_t data2 = FloatToUnsigned16bits(z_neg_current);
 80027d6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80027da:	eeb0 0a67 	vmov.f32	s0, s15
 80027de:	f000 ffc7 	bl	8003770 <FloatToUnsigned16bits>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
                    uint16_t data3 = FloatToUnsigned16bits(z_pos_current);
 80027e8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80027ec:	eeb0 0a67 	vmov.f32	s0, s15
 80027f0:	f000 ffbe 	bl	8003770 <FloatToUnsigned16bits>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80027fa:	231e      	movs	r3, #30
 80027fc:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x06; //Solar Panel Z Status Response
 8002800:	2306      	movs	r3, #6
 8002802:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x06;
 8002806:	2306      	movs	r3, #6
 8002808:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 800280c:	2006      	movs	r0, #6
 800280e:	f00a fc69 	bl	800d0e4 <malloc>
 8002812:	4603      	mov	r3, r0
 8002814:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800281c:	0a1b      	lsrs	r3, r3, #8
 800281e:	b29a      	uxth	r2, r3
 8002820:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800282c:	3301      	adds	r3, #1
 800282e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8002836:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	b29a      	uxth	r2, r3
 800283e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002842:	3302      	adds	r3, #2
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800284c:	3303      	adds	r3, #3
 800284e:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 8002856:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800285a:	0a1b      	lsrs	r3, r3, #8
 800285c:	b29a      	uxth	r2, r3
 800285e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002862:	3304      	adds	r3, #4
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8002868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800286c:	3305      	adds	r3, #5
 800286e:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002876:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800287a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800287e:	f7fe fcdd 	bl	800123c <generateCySatChecksum>
 8002882:	4603      	mov	r3, r0
 8002884:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 8002888:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800288c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002890:	f7fe fc54 	bl	800113c <sendCySatPacket>
 8002894:	4603      	mov	r3, r0
 8002896:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 800289a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800289e:	4618      	mov	r0, r3
 80028a0:	f00a fc28 	bl	800d0f4 <free>
                    return status; //send the response
 80028a4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80028a8:	f000 bc93 	b.w	80031d2 <handleCySatPacket+0x10e6>
                }
                case 0x09: { //BUS Current Request
                    float current_3, current_5;
                    status = READ_EPS_3V_CURRENT(&current_3); //read the 3.3v BUS current
 80028ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe ff5b 	bl	800176c <READ_EPS_3V_CURRENT>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80028bc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <handleCySatPacket+0x7e0>
                        return -1;
 80028c4:	f04f 33ff 	mov.w	r3, #4294967295
 80028c8:	f000 bc83 	b.w	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_5V_CURRENT(&current_5); //read the 5v BUS current
 80028cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe ff7d 	bl	80017d0 <READ_EPS_5V_CURRENT>
 80028d6:	4603      	mov	r3, r0
 80028d8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80028dc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <handleCySatPacket+0x800>
                        return -1;
 80028e4:	f04f 33ff 	mov.w	r3, #4294967295
 80028e8:	f000 bc73 	b.w	80031d2 <handleCySatPacket+0x10e6>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(current_3);
 80028ec:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80028f0:	eeb0 0a67 	vmov.f32	s0, s15
 80028f4:	f000 ff3c 	bl	8003770 <FloatToUnsigned16bits>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
                    uint16_t data2 = FloatToUnsigned16bits(current_5);
 80028fe:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002902:	eeb0 0a67 	vmov.f32	s0, s15
 8002906:	f000 ff33 	bl	8003770 <FloatToUnsigned16bits>
 800290a:	4603      	mov	r3, r0
 800290c:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002910:	231e      	movs	r3, #30
 8002912:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x08; //BUS Current Response
 8002916:	2308      	movs	r3, #8
 8002918:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x04;
 800291c:	2304      	movs	r3, #4
 800291e:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 8002922:	2004      	movs	r0, #4
 8002924:	f00a fbde 	bl	800d0e4 <malloc>
 8002928:	4603      	mov	r3, r0
 800292a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 800292e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	b29a      	uxth	r2, r3
 8002936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 800293e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002942:	3301      	adds	r3, #1
 8002944:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 800294c:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	b29a      	uxth	r2, r3
 8002954:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002958:	3302      	adds	r3, #2
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 800295e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002962:	3303      	adds	r3, #3
 8002964:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 800296c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002970:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002974:	f7fe fc62 	bl	800123c <generateCySatChecksum>
 8002978:	4603      	mov	r3, r0
 800297a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 800297e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002982:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002986:	f7fe fbd9 	bl	800113c <sendCySatPacket>
 800298a:	4603      	mov	r3, r0
 800298c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 8002990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002994:	4618      	mov	r0, r3
 8002996:	f00a fbad 	bl	800d0f4 <free>
                    return status; //send the response
 800299a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800299e:	f000 bc18 	b.w	80031d2 <handleCySatPacket+0x10e6>
                }
                case 0x0B: { //Temperature Request
                    float mcu_temp, battery1_temp, battery2_temp, battery3_temp, battery4_temp;
                    status = READ_EPS_MCU_TEMP(&mcu_temp); //read the MCU Temperature
 80029a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe ff44 	bl	8001834 <READ_EPS_MCU_TEMP>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80029b2:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <handleCySatPacket+0x8d6>
                        return -1;
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295
 80029be:	f000 bc08 	b.w	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_BATT_1_TEMP(&battery1_temp); //read the Battery Cell 1 Temperature
 80029c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe ff72 	bl	80018b0 <READ_EPS_BATT_1_TEMP>
 80029cc:	4603      	mov	r3, r0
 80029ce:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80029d2:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <handleCySatPacket+0x8f4>
                        return -1;
 80029da:	f04f 33ff 	mov.w	r3, #4294967295
 80029de:	e3f8      	b.n	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_BATT_2_TEMP(&battery2_temp); //read the Battery Cell 2 Temperature
 80029e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe ff95 	bl	8001914 <READ_EPS_BATT_2_TEMP>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 80029f0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <handleCySatPacket+0x912>
                        return -1;
 80029f8:	f04f 33ff 	mov.w	r3, #4294967295
 80029fc:	e3e9      	b.n	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_BATT_3_TEMP(&battery3_temp); //read the Battery Cell 3 Temperature
 80029fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe ffb8 	bl	8001978 <READ_EPS_BATT_3_TEMP>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002a0e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <handleCySatPacket+0x930>
                        return -1;
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1a:	e3da      	b.n	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_BATT_4_TEMP(&battery4_temp); //read the Battery Cell 4 Temperature
 8002a1c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe ffdb 	bl	80019dc <READ_EPS_BATT_4_TEMP>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002a2c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <handleCySatPacket+0x94e>
                        return -1;
 8002a34:	f04f 33ff 	mov.w	r3, #4294967295
 8002a38:	e3cb      	b.n	80031d2 <handleCySatPacket+0x10e6>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(mcu_temp);
 8002a3a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a42:	f000 fe95 	bl	8003770 <FloatToUnsigned16bits>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
                    uint16_t data2 = FloatToUnsigned16bits(battery1_temp);
 8002a4c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002a50:	eeb0 0a67 	vmov.f32	s0, s15
 8002a54:	f000 fe8c 	bl	8003770 <FloatToUnsigned16bits>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
                    uint16_t data3 = FloatToUnsigned16bits(battery2_temp);
 8002a5e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002a62:	eeb0 0a67 	vmov.f32	s0, s15
 8002a66:	f000 fe83 	bl	8003770 <FloatToUnsigned16bits>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
                    uint16_t data4 = FloatToUnsigned16bits(battery3_temp);
 8002a70:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002a74:	eeb0 0a67 	vmov.f32	s0, s15
 8002a78:	f000 fe7a 	bl	8003770 <FloatToUnsigned16bits>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
                    uint16_t data5 = FloatToUnsigned16bits(battery4_temp);
 8002a82:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002a86:	eeb0 0a67 	vmov.f32	s0, s15
 8002a8a:	f000 fe71 	bl	8003770 <FloatToUnsigned16bits>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002a94:	231e      	movs	r3, #30
 8002a96:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x0A; //Temperature Response
 8002a9a:	230a      	movs	r3, #10
 8002a9c:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x0A;
 8002aa0:	230a      	movs	r3, #10
 8002aa2:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 10);
 8002aa6:	200a      	movs	r0, #10
 8002aa8:	f00a fb1c 	bl	800d0e4 <malloc>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002ab2:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8002ad0:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002adc:	3302      	adds	r3, #2
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ae6:	3303      	adds	r3, #3
 8002ae8:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 8002af0:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8002af4:	0a1b      	lsrs	r3, r3, #8
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002afc:	3304      	adds	r3, #4
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8002b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b06:	3305      	adds	r3, #5
 8002b08:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[6] = (data4 & 0xFF00) >> 8;
 8002b10:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b1c:	3306      	adds	r3, #6
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[7] = data4 & 0xFF;
 8002b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b26:	3307      	adds	r3, #7
 8002b28:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[8] = (data5 & 0xFF00) >> 8;
 8002b30:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b3c:	3308      	adds	r3, #8
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[9] = data5 & 0xFF;
 8002b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b46:	3309      	adds	r3, #9
 8002b48:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002b50:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002b54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b58:	f7fe fb70 	bl	800123c <generateCySatChecksum>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 8002b62:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002b66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b6a:	f7fe fae7 	bl	800113c <sendCySatPacket>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 8002b74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f00a fabb 	bl	800d0f4 <free>
                    return status; //send the response
 8002b7e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002b82:	e326      	b.n	80031d2 <handleCySatPacket+0x10e6>
                }
                case 0x0D: { //Input, Output, and Default Conditions Request
                    uint16_t input, output1, output2, defaults1, defaults2;
                    status = READ_EPS_INPUT_CONDITION(&input); //read the Input Conditions
 8002b84:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe ff59 	bl	8001a40 <READ_EPS_INPUT_CONDITION>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002b94:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <handleCySatPacket+0xab6>
                        return -1;
 8002b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba0:	e317      	b.n	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_OUTPUT_CONDITION1(&output1); //read the Output 1 Conditions
 8002ba2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe ff6f 	bl	8001a8a <READ_EPS_OUTPUT_CONDITION1>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002bb2:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <handleCySatPacket+0xad4>
                        return -1;
 8002bba:	f04f 33ff 	mov.w	r3, #4294967295
 8002bbe:	e308      	b.n	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_OUTPUT_CONDITION2(&output2); //read the Output 2 Conditions
 8002bc0:	f107 035a 	add.w	r3, r7, #90	; 0x5a
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe ff85 	bl	8001ad4 <READ_EPS_OUTPUT_CONDITION2>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002bd0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <handleCySatPacket+0xaf2>
                        return -1;
 8002bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bdc:	e2f9      	b.n	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_DEFAULTS1(&defaults1); //read the Defaults 1 Conditions
 8002bde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff f854 	bl	8001c90 <READ_EPS_DEFAULTS1>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002bee:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <handleCySatPacket+0xb10>
                        return -1;
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfa:	e2ea      	b.n	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_DEFAULTS2(&defaults2); //read the Defaults 2 Conditions
 8002bfc:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff f86a 	bl	8001cda <READ_EPS_DEFAULTS2>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002c0c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <handleCySatPacket+0xb2e>
                        return -1;
 8002c14:	f04f 33ff 	mov.w	r3, #4294967295
 8002c18:	e2db      	b.n	80031d2 <handleCySatPacket+0x10e6>
                    }

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002c1a:	231e      	movs	r3, #30
 8002c1c:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x0C; //Input, Output, and Default Conditions Response
 8002c20:	230c      	movs	r3, #12
 8002c22:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x06;
 8002c26:	2306      	movs	r3, #6
 8002c28:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 8002c2c:	2006      	movs	r0, #6
 8002c2e:	f00a fa59 	bl	800d0e4 <malloc>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = input & 0xFF;
 8002c38:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8002c3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = (output1 & 0xFF00) >> 8;
 8002c44:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c50:	3301      	adds	r3, #1
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = output1 & 0xFF;
 8002c56:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c5e:	3302      	adds	r3, #2
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = output2 & 0xFF;
 8002c64:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8002c68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c6c:	3303      	adds	r3, #3
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = defaults1 & 0xFF;
 8002c72:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8002c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = defaults2 & 0xFF;
 8002c80:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8002c84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c88:	3305      	adds	r3, #5
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002c8e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002c92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c96:	f7fe fad1 	bl	800123c <generateCySatChecksum>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 8002ca0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002ca4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ca8:	f7fe fa48 	bl	800113c <sendCySatPacket>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 8002cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f00a fa1c 	bl	800d0f4 <free>
                    return status; //send the response
 8002cbc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002cc0:	e287      	b.n	80031d2 <handleCySatPacket+0x10e6>
                }
                case 0x0F: { //Counter Check Request
                    uint16_t power_on, under_voltage, short_circuited, over_temp, charging_cycles;
                    status = READ_EPS_POWER_ON_CYCLES(&power_on); //read the MCU Temperature
 8002cc2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe ff29 	bl	8001b1e <READ_EPS_POWER_ON_CYCLES>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002cd2:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <handleCySatPacket+0xbf4>
                        return -1;
 8002cda:	f04f 33ff 	mov.w	r3, #4294967295
 8002cde:	e278      	b.n	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_UNDER_VOLT_COUNT(&under_voltage); //read the Battery Cell 1 Temperature
 8002ce0:	f107 0352 	add.w	r3, r7, #82	; 0x52
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe ff3f 	bl	8001b68 <READ_EPS_UNDER_VOLT_COUNT>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002cf0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <handleCySatPacket+0xc12>
                        return -1;
 8002cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfc:	e269      	b.n	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_SHORT_CIRCUIT_COUNT(&short_circuited); //read the Battery Cell 2 Temperature
 8002cfe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe ff55 	bl	8001bb2 <READ_EPS_SHORT_CIRCUIT_COUNT>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002d0e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <handleCySatPacket+0xc30>
                        return -1;
 8002d16:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1a:	e25a      	b.n	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_OVER_TEMP_COUNT(&over_temp); //read the Battery Cell 3 Temperature
 8002d1c:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fe ff6b 	bl	8001bfc <READ_EPS_OVER_TEMP_COUNT>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002d2c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <handleCySatPacket+0xc4e>
                        return -1;
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295
 8002d38:	e24b      	b.n	80031d2 <handleCySatPacket+0x10e6>
                    }
                    status = READ_EPS_CHARGE_CYCLES(&charging_cycles); //read the Battery Cell 4 Temperature
 8002d3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe ff81 	bl	8001c46 <READ_EPS_CHARGE_CYCLES>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    if(status != HAL_OK){
 8002d4a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <handleCySatPacket+0xc6c>
                        return -1;
 8002d52:	f04f 33ff 	mov.w	r3, #4294967295
 8002d56:	e23c      	b.n	80031d2 <handleCySatPacket+0x10e6>
                    }

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002d58:	231e      	movs	r3, #30
 8002d5a:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x0E; //Temperature Response
 8002d5e:	230e      	movs	r3, #14
 8002d60:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x0A;
 8002d64:	230a      	movs	r3, #10
 8002d66:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 10);
 8002d6a:	200a      	movs	r0, #10
 8002d6c:	f00a f9ba 	bl	800d0e4 <malloc>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    outgoingPacket.Data[0] = (power_on & 0xFF00) >> 8;
 8002d76:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002d7a:	0a1b      	lsrs	r3, r3, #8
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = power_on & 0xFF;
 8002d86:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8002d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d8e:	3301      	adds	r3, #1
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (under_voltage & 0xFF00) >> 8;
 8002d94:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002da0:	3302      	adds	r3, #2
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = under_voltage & 0xFF;
 8002da6:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8002daa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dae:	3303      	adds	r3, #3
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (short_circuited & 0xFF00) >> 8;
 8002db4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002db8:	0a1b      	lsrs	r3, r3, #8
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = short_circuited & 0xFF;
 8002dc6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dce:	3305      	adds	r3, #5
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[6] = (over_temp & 0xFF00) >> 8;
 8002dd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dd8:	0a1b      	lsrs	r3, r3, #8
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002de0:	3306      	adds	r3, #6
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[7] = over_temp & 0xFF;
 8002de6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dee:	3307      	adds	r3, #7
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[8] = (charging_cycles & 0xFF00) >> 8;
 8002df4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002df8:	0a1b      	lsrs	r3, r3, #8
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e00:	3308      	adds	r3, #8
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[9] = charging_cycles & 0xFF;
 8002e06:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e0e:	3309      	adds	r3, #9
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002e14:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002e18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e1c:	f7fe fa0e 	bl	800123c <generateCySatChecksum>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 8002e26:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002e2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e2e:	f7fe f985 	bl	800113c <sendCySatPacket>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 8002e38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f00a f959 	bl	800d0f4 <free>
                    return status; //send the response
 8002e42:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002e46:	e1c4      	b.n	80031d2 <handleCySatPacket+0x10e6>
                }
                case 0x11: { //Enable/Disable Request
                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002e48:	231e      	movs	r3, #30
 8002e4a:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
                    outgoingPacket.Command = 0x10; //Enable/Disable Response
 8002e4e:	2310      	movs	r3, #16
 8002e50:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                    outgoingPacket.Data_Length = 0x01;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t));
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	f00a f942 	bl	800d0e4 <malloc>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    if(validateCySatChecksum(packet)==0){
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e6c:	f7fe fa1b 	bl	80012a6 <validateCySatChecksum>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d104      	bne.n	8002e80 <handleCySatPacket+0xd94>
                        outgoingPacket.Data[0] = 0;
 8002e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
 8002e7e:	e183      	b.n	8003188 <handleCySatPacket+0x109c>
                    }
                    else{
                        switch(packet.Data[0]){
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	2b0e      	cmp	r3, #14
 8002e88:	f200 817e 	bhi.w	8003188 <handleCySatPacket+0x109c>
 8002e8c:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <handleCySatPacket+0xda8>)
 8002e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e92:	bf00      	nop
 8002e94:	08002ed1 	.word	0x08002ed1
 8002e98:	08003189 	.word	0x08003189
 8002e9c:	08003189 	.word	0x08003189
 8002ea0:	08002f0b 	.word	0x08002f0b
 8002ea4:	08003189 	.word	0x08003189
 8002ea8:	08002f45 	.word	0x08002f45
 8002eac:	08002f7f 	.word	0x08002f7f
 8002eb0:	08002fb9 	.word	0x08002fb9
 8002eb4:	08002ff3 	.word	0x08002ff3
 8002eb8:	0800302d 	.word	0x0800302d
 8002ebc:	08003067 	.word	0x08003067
 8002ec0:	080030a1 	.word	0x080030a1
 8002ec4:	080030db 	.word	0x080030db
 8002ec8:	08003115 	.word	0x08003115
 8002ecc:	0800314f 	.word	0x0800314f
                            case 0x01:{ //Enable/Disable Battery BUS
                                if(packet.Data[1] == 0){
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <handleCySatPacket+0xdfc>
                                    outgoingPacket.Data[0] = disable_EPS_Vbatt_Bus();
 8002eda:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8002ede:	f7fe ff2a 	bl	8001d36 <disable_EPS_Vbatt_Bus>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Vbatt_Bus();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002ee6:	e14f      	b.n	8003188 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	3301      	adds	r3, #1
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d106      	bne.n	8002f00 <handleCySatPacket+0xe14>
                                    outgoingPacket.Data[0] = enable_EPS_Vbatt_Bus();
 8002ef2:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8002ef6:	f7fe ff15 	bl	8001d24 <enable_EPS_Vbatt_Bus>
 8002efa:	4603      	mov	r3, r0
 8002efc:	7023      	strb	r3, [r4, #0]
                                break;
 8002efe:	e143      	b.n	8003188 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 8002f00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
                                break;
 8002f08:	e13e      	b.n	8003188 <handleCySatPacket+0x109c>
                            }
                            case 0x04:{ //Enable/Disable 5v BUS
                                if(packet.Data[1] == 0){
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d106      	bne.n	8002f22 <handleCySatPacket+0xe36>
                                    outgoingPacket.Data[0] = disable_EPS_5v_Bus();
 8002f14:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8002f18:	f7fe ff1f 	bl	8001d5a <disable_EPS_5v_Bus>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_5v_Bus();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002f20:	e132      	b.n	8003188 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	3301      	adds	r3, #1
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d106      	bne.n	8002f3a <handleCySatPacket+0xe4e>
                                    outgoingPacket.Data[0] = enable_EPS_5v_Bus();
 8002f2c:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8002f30:	f7fe ff0a 	bl	8001d48 <enable_EPS_5v_Bus>
 8002f34:	4603      	mov	r3, r0
 8002f36:	7023      	strb	r3, [r4, #0]
                                break;
 8002f38:	e126      	b.n	8003188 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 8002f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
                                break;
 8002f42:	e121      	b.n	8003188 <handleCySatPacket+0x109c>
                            }
                            case 0x06:{ //Enable/Disable Fast/Slow Battery Charge 1
                                if(packet.Data[1] == 0){
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	3301      	adds	r3, #1
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <handleCySatPacket+0xe70>
                                    outgoingPacket.Data[0] = disable_EPS_Fast_Charge1();
 8002f4e:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8002f52:	f7fe ff26 	bl	8001da2 <disable_EPS_Fast_Charge1>
 8002f56:	4603      	mov	r3, r0
 8002f58:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002f5a:	e115      	b.n	8003188 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d106      	bne.n	8002f74 <handleCySatPacket+0xe88>
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge1();
 8002f66:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8002f6a:	f7fe ff11 	bl	8001d90 <enable_EPS_Fast_Charge1>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	7023      	strb	r3, [r4, #0]
                                break;
 8002f72:	e109      	b.n	8003188 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 8002f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
                                break;
 8002f7c:	e104      	b.n	8003188 <handleCySatPacket+0x109c>
                            }
                            case 0x07:{ //Enable/Disable Fast/Slow Battery Charge 2
                                if(packet.Data[1] == 0){
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	3301      	adds	r3, #1
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d106      	bne.n	8002f96 <handleCySatPacket+0xeaa>
                                    outgoingPacket.Data[0] = disable_EPS_Fast_Charge2();
 8002f88:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8002f8c:	f7fe ff1b 	bl	8001dc6 <disable_EPS_Fast_Charge2>
 8002f90:	4603      	mov	r3, r0
 8002f92:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002f94:	e0f8      	b.n	8003188 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d106      	bne.n	8002fae <handleCySatPacket+0xec2>
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge2();
 8002fa0:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8002fa4:	f7fe ff06 	bl	8001db4 <enable_EPS_Fast_Charge2>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	7023      	strb	r3, [r4, #0]
                                break;
 8002fac:	e0ec      	b.n	8003188 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 8002fae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
                                break;
 8002fb6:	e0e7      	b.n	8003188 <handleCySatPacket+0x109c>
                            }
                            case 0x08:{ //Enable/Disable Out1/Boost Board
                                if(packet.Data[1] == 0){
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <handleCySatPacket+0xee4>
                                    outgoingPacket.Data[0] = disable_Boost_Board();
 8002fc2:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8002fc6:	f7fe ff10 	bl	8001dea <disable_Boost_Board>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_Boost_Board();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8002fce:	e0db      	b.n	8003188 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d106      	bne.n	8002fe8 <handleCySatPacket+0xefc>
                                    outgoingPacket.Data[0] = enable_Boost_Board();
 8002fda:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8002fde:	f7fe fefb 	bl	8001dd8 <enable_Boost_Board>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	7023      	strb	r3, [r4, #0]
                                break;
 8002fe6:	e0cf      	b.n	8003188 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 8002fe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
                                break;
 8002ff0:	e0ca      	b.n	8003188 <handleCySatPacket+0x109c>
                            }
                            case 0x09:{ //Enable/Disable Out2
                                if(packet.Data[1] == 0){
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d106      	bne.n	800300a <handleCySatPacket+0xf1e>
                                    outgoingPacket.Data[0] = disable_Payload();
 8002ffc:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003000:	f7fe ff05 	bl	8001e0e <disable_Payload>
 8003004:	4603      	mov	r3, r0
 8003006:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_Payload();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8003008:	e0be      	b.n	8003188 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	3301      	adds	r3, #1
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d106      	bne.n	8003022 <handleCySatPacket+0xf36>
                                    outgoingPacket.Data[0] = enable_Payload();
 8003014:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003018:	f7fe fef0 	bl	8001dfc <enable_Payload>
 800301c:	4603      	mov	r3, r0
 800301e:	7023      	strb	r3, [r4, #0]
                                break;
 8003020:	e0b2      	b.n	8003188 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 8003022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003026:	2200      	movs	r2, #0
 8003028:	701a      	strb	r2, [r3, #0]
                                break;
 800302a:	e0ad      	b.n	8003188 <handleCySatPacket+0x109c>
                            }
                            case 0x0A:{ //Enable/Disable Out3
                                if(packet.Data[1] == 0){
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	3301      	adds	r3, #1
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <handleCySatPacket+0xf58>
                                    outgoingPacket.Data[0] = disable_EPS_Output_3();
 8003036:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800303a:	f7fe fefa 	bl	8001e32 <disable_EPS_Output_3>
 800303e:	4603      	mov	r3, r0
 8003040:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_3();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8003042:	e0a1      	b.n	8003188 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	3301      	adds	r3, #1
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d106      	bne.n	800305c <handleCySatPacket+0xf70>
                                    outgoingPacket.Data[0] = enable_EPS_Output_3();
 800304e:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003052:	f7fe fee5 	bl	8001e20 <enable_EPS_Output_3>
 8003056:	4603      	mov	r3, r0
 8003058:	7023      	strb	r3, [r4, #0]
                                break;
 800305a:	e095      	b.n	8003188 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 800305c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
                                break;
 8003064:	e090      	b.n	8003188 <handleCySatPacket+0x109c>
                            }
                            case 0x0B:{ //Enable/Disable Out5/UHF
                                if(packet.Data[1] == 0){
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	3301      	adds	r3, #1
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d106      	bne.n	800307e <handleCySatPacket+0xf92>
                                    outgoingPacket.Data[0] = disable_UHF();
 8003070:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003074:	f7fe feef 	bl	8001e56 <disable_UHF>
 8003078:	4603      	mov	r3, r0
 800307a:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_UHF();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800307c:	e084      	b.n	8003188 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	3301      	adds	r3, #1
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d106      	bne.n	8003096 <handleCySatPacket+0xfaa>
                                    outgoingPacket.Data[0] = enable_UHF();
 8003088:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800308c:	f7fe feda 	bl	8001e44 <enable_UHF>
 8003090:	4603      	mov	r3, r0
 8003092:	7023      	strb	r3, [r4, #0]
                                break;
 8003094:	e078      	b.n	8003188 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 8003096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
                                break;
 800309e:	e073      	b.n	8003188 <handleCySatPacket+0x109c>
                            }
                            case 0x0C:{ //Enable/Disable Out6
                                if(packet.Data[1] == 0){
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	3301      	adds	r3, #1
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <handleCySatPacket+0xfcc>
                                    outgoingPacket.Data[0] = disable_EPS_Output_6();
 80030aa:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80030ae:	f7fe fee4 	bl	8001e7a <disable_EPS_Output_6>
 80030b2:	4603      	mov	r3, r0
 80030b4:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_6();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80030b6:	e067      	b.n	8003188 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	3301      	adds	r3, #1
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d106      	bne.n	80030d0 <handleCySatPacket+0xfe4>
                                    outgoingPacket.Data[0] = enable_EPS_Output_6();
 80030c2:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80030c6:	f7fe fecf 	bl	8001e68 <enable_EPS_Output_6>
 80030ca:	4603      	mov	r3, r0
 80030cc:	7023      	strb	r3, [r4, #0]
                                break;
 80030ce:	e05b      	b.n	8003188 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 80030d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
                                break;
 80030d8:	e056      	b.n	8003188 <handleCySatPacket+0x109c>
                            }
                            case 0x0D:{ //Enable/Disable Heater 1
                                if(packet.Data[1] == 0){
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	3301      	adds	r3, #1
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d106      	bne.n	80030f2 <handleCySatPacket+0x1006>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_1();
 80030e4:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80030e8:	f7fe fed9 	bl	8001e9e <disable_EPS_Batt_Heater_1>
 80030ec:	4603      	mov	r3, r0
 80030ee:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80030f0:	e04a      	b.n	8003188 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	3301      	adds	r3, #1
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d106      	bne.n	800310a <handleCySatPacket+0x101e>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_1();
 80030fc:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003100:	f7fe fec4 	bl	8001e8c <enable_EPS_Batt_Heater_1>
 8003104:	4603      	mov	r3, r0
 8003106:	7023      	strb	r3, [r4, #0]
                                break;
 8003108:	e03e      	b.n	8003188 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 800310a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
                                break;
 8003112:	e039      	b.n	8003188 <handleCySatPacket+0x109c>
                            }
                            case 0x0E:{ //Enable/Disable Heater 2
                                if(packet.Data[1] == 0){
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	3301      	adds	r3, #1
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <handleCySatPacket+0x1040>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_2();
 800311e:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003122:	f7fe fece 	bl	8001ec2 <disable_EPS_Batt_Heater_2>
 8003126:	4603      	mov	r3, r0
 8003128:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800312a:	e02d      	b.n	8003188 <handleCySatPacket+0x109c>
                                else if(packet.Data[1] == 1){
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	3301      	adds	r3, #1
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d106      	bne.n	8003144 <handleCySatPacket+0x1058>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_2();
 8003136:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800313a:	f7fe feb9 	bl	8001eb0 <enable_EPS_Batt_Heater_2>
 800313e:	4603      	mov	r3, r0
 8003140:	7023      	strb	r3, [r4, #0]
                                break;
 8003142:	e021      	b.n	8003188 <handleCySatPacket+0x109c>
                                    outgoingPacket.Data[0] = 0x00;
 8003144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
                                break;
 800314c:	e01c      	b.n	8003188 <handleCySatPacket+0x109c>
                            }
                            case 0x0F:{ //Enable/Disable Heater 3
                                if(packet.Data[1] == 0){
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	3301      	adds	r3, #1
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d106      	bne.n	8003166 <handleCySatPacket+0x107a>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_3();
 8003158:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800315c:	f7fe fec3 	bl	8001ee6 <disable_EPS_Batt_Heater_3>
 8003160:	4603      	mov	r3, r0
 8003162:	7023      	strb	r3, [r4, #0]
                                }
                                else{

                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8003164:	e00f      	b.n	8003186 <handleCySatPacket+0x109a>
                                else if(packet.Data[1] == 1){
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	3301      	adds	r3, #1
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d106      	bne.n	800317e <handleCySatPacket+0x1092>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_3();
 8003170:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8003174:	f7fe feae 	bl	8001ed4 <enable_EPS_Batt_Heater_3>
 8003178:	4603      	mov	r3, r0
 800317a:	7023      	strb	r3, [r4, #0]
                                break;
 800317c:	e003      	b.n	8003186 <handleCySatPacket+0x109a>
                                    outgoingPacket.Data[0] = 0x00;
 800317e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
                                break;
 8003186:	bf00      	nop
                            }
                        }
                    }
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8003188:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800318c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003190:	f7fe f854 	bl	800123c <generateCySatChecksum>
 8003194:	4603      	mov	r3, r0
 8003196:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
                    status = sendCySatPacket(outgoingPacket);
 800319a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800319e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031a2:	f7fd ffcb 	bl	800113c <sendCySatPacket>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
                    free(outgoingPacket.Data);
 80031ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031b0:	4618      	mov	r0, r3
 80031b2:	f009 ff9f 	bl	800d0f4 <free>
                    return status; //send the response
 80031b6:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80031ba:	e00a      	b.n	80031d2 <handleCySatPacket+0x10e6>
        case EOL_SUBSYSTEM_TYPE: //End of Life

            break;

        default:
            return -1;
 80031bc:	f04f 33ff 	mov.w	r3, #4294967295
 80031c0:	e007      	b.n	80031d2 <handleCySatPacket+0x10e6>
            break;
 80031c2:	bf00      	nop
 80031c4:	e004      	b.n	80031d0 <handleCySatPacket+0x10e4>
            break;
 80031c6:	bf00      	nop
 80031c8:	e002      	b.n	80031d0 <handleCySatPacket+0x10e4>
            break;
 80031ca:	bf00      	nop
 80031cc:	e000      	b.n	80031d0 <handleCySatPacket+0x10e4>
            break;
 80031ce:	bf00      	nop
    }

    return 0;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	37e4      	adds	r7, #228	; 0xe4
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031da:	bf00      	nop

080031dc <START_BEACON>:
/***************************************** BEACON COMMANDS **********************************************************************/

/**
 * @brief Turns on the beacon.
 */
HAL_StatusTypeDef START_BEACON(){
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08e      	sub	sp, #56	; 0x38
 80031e0:	af00      	add	r7, sp, #0
    uint8_t data[23];
    uint8_t bits[4];
    HAL_StatusTypeDef status = GET_UHF_STATUS(data);
 80031e2:	f107 0320 	add.w	r3, r7, #32
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f94e 	bl	8003488 <GET_UHF_STATUS>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(status != HAL_OK){
 80031f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <START_BEACON+0x24>
        return status;
 80031fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80031fe:	e03e      	b.n	800327e <START_BEACON+0xa2>
    }

    //Perserve other settings and only enable beacon
    bits[0] = data[9];
 8003200:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003204:	773b      	strb	r3, [r7, #28]
    bits[1] = data[10];
 8003206:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800320a:	777b      	strb	r3, [r7, #29]
    bits[2] = ((data[11] - 0x30) | 0x04) + 0x30; //set bit 6(BCN) to 1
 800320c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003210:	3b30      	subs	r3, #48	; 0x30
 8003212:	b2db      	uxtb	r3, r3
 8003214:	b25b      	sxtb	r3, r3
 8003216:	f043 0304 	orr.w	r3, r3, #4
 800321a:	b25b      	sxtb	r3, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	3330      	adds	r3, #48	; 0x30
 8003220:	b2db      	uxtb	r3, r3
 8003222:	77bb      	strb	r3, [r7, #30]
    bits[3] = data[13];
 8003224:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003228:	77fb      	strb	r3, [r7, #31]


    uint8_t command[22];
    command[0] = 'E';
 800322a:	2345      	movs	r3, #69	; 0x45
 800322c:	713b      	strb	r3, [r7, #4]
    command[1] = 'S';
 800322e:	2353      	movs	r3, #83	; 0x53
 8003230:	717b      	strb	r3, [r7, #5]
    command[2] = '+';
 8003232:	232b      	movs	r3, #43	; 0x2b
 8003234:	71bb      	strb	r3, [r7, #6]
    command[3] = 'W';
 8003236:	2357      	movs	r3, #87	; 0x57
 8003238:	71fb      	strb	r3, [r7, #7]
    command[4] = '2';
 800323a:	2332      	movs	r3, #50	; 0x32
 800323c:	723b      	strb	r3, [r7, #8]
    command[5] = '2';
 800323e:	2332      	movs	r3, #50	; 0x32
 8003240:	727b      	strb	r3, [r7, #9]
    command[6] = '0';
 8003242:	2330      	movs	r3, #48	; 0x30
 8003244:	72bb      	strb	r3, [r7, #10]
    command[7] = '0';
 8003246:	2330      	movs	r3, #48	; 0x30
 8003248:	72fb      	strb	r3, [r7, #11]
    command[8] = bits[0];
 800324a:	7f3b      	ldrb	r3, [r7, #28]
 800324c:	733b      	strb	r3, [r7, #12]
    command[9] = bits[1];
 800324e:	7f7b      	ldrb	r3, [r7, #29]
 8003250:	737b      	strb	r3, [r7, #13]
    command[10] = bits[2];
 8003252:	7fbb      	ldrb	r3, [r7, #30]
 8003254:	73bb      	strb	r3, [r7, #14]
    command[11] = bits[3];
 8003256:	7ffb      	ldrb	r3, [r7, #31]
 8003258:	73fb      	strb	r3, [r7, #15]
    command[12] = ' ';
 800325a:	2320      	movs	r3, #32
 800325c:	743b      	strb	r3, [r7, #16]
    crc32(command, 12, &command[13]);
 800325e:	1d3b      	adds	r3, r7, #4
 8003260:	f103 020d 	add.w	r2, r3, #13
 8003264:	1d3b      	adds	r3, r7, #4
 8003266:	210c      	movs	r1, #12
 8003268:	4618      	mov	r0, r3
 800326a:	f000 faab 	bl	80037c4 <crc32>
    command[21] = 0x0D;
 800326e:	230d      	movs	r3, #13
 8003270:	767b      	strb	r3, [r7, #25]
    return UHF_WRITE(command, 22);
 8003272:	1d3b      	adds	r3, r7, #4
 8003274:	2116      	movs	r1, #22
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f970 	bl	800355c <UHF_WRITE>
 800327c:	4603      	mov	r3, r0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3738      	adds	r7, #56	; 0x38
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <END_BEACON>:

/**
 * @brief Turns off the beacon.
 */
HAL_StatusTypeDef END_BEACON(){
 8003286:	b580      	push	{r7, lr}
 8003288:	b08e      	sub	sp, #56	; 0x38
 800328a:	af00      	add	r7, sp, #0
    uint8_t data[23];
    uint8_t bits[4];
    HAL_StatusTypeDef status = GET_UHF_STATUS(data);
 800328c:	f107 0320 	add.w	r3, r7, #32
 8003290:	4618      	mov	r0, r3
 8003292:	f000 f8f9 	bl	8003488 <GET_UHF_STATUS>
 8003296:	4603      	mov	r3, r0
 8003298:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(status != HAL_OK){
 800329c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <END_BEACON+0x24>
        return status;
 80032a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032a8:	e03c      	b.n	8003324 <END_BEACON+0x9e>
    }

    //Perserve other settings and only enable beacon
    bits[0] = data[9];
 80032aa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80032ae:	773b      	strb	r3, [r7, #28]
    bits[1] = data[10];
 80032b0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80032b4:	777b      	strb	r3, [r7, #29]
    bits[2] = ((data[11] - 0x30) & 0xFB) + 0x30; //set bit 6(BCN) to 0
 80032b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032ba:	3b30      	subs	r3, #48	; 0x30
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	f023 0304 	bic.w	r3, r3, #4
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	3330      	adds	r3, #48	; 0x30
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	77bb      	strb	r3, [r7, #30]
    bits[3] = data[13];
 80032ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80032ce:	77fb      	strb	r3, [r7, #31]


    uint8_t command[22];
    command[0] = 'E';
 80032d0:	2345      	movs	r3, #69	; 0x45
 80032d2:	713b      	strb	r3, [r7, #4]
    command[1] = 'S';
 80032d4:	2353      	movs	r3, #83	; 0x53
 80032d6:	717b      	strb	r3, [r7, #5]
    command[2] = '+';
 80032d8:	232b      	movs	r3, #43	; 0x2b
 80032da:	71bb      	strb	r3, [r7, #6]
    command[3] = 'W';
 80032dc:	2357      	movs	r3, #87	; 0x57
 80032de:	71fb      	strb	r3, [r7, #7]
    command[4] = '2';
 80032e0:	2332      	movs	r3, #50	; 0x32
 80032e2:	723b      	strb	r3, [r7, #8]
    command[5] = '2';
 80032e4:	2332      	movs	r3, #50	; 0x32
 80032e6:	727b      	strb	r3, [r7, #9]
    command[6] = '0';
 80032e8:	2330      	movs	r3, #48	; 0x30
 80032ea:	72bb      	strb	r3, [r7, #10]
    command[7] = '0';
 80032ec:	2330      	movs	r3, #48	; 0x30
 80032ee:	72fb      	strb	r3, [r7, #11]
    command[8] = bits[0];
 80032f0:	7f3b      	ldrb	r3, [r7, #28]
 80032f2:	733b      	strb	r3, [r7, #12]
    command[9] = bits[1];
 80032f4:	7f7b      	ldrb	r3, [r7, #29]
 80032f6:	737b      	strb	r3, [r7, #13]
    command[10] = bits[2];
 80032f8:	7fbb      	ldrb	r3, [r7, #30]
 80032fa:	73bb      	strb	r3, [r7, #14]
    command[11] = bits[3];
 80032fc:	7ffb      	ldrb	r3, [r7, #31]
 80032fe:	73fb      	strb	r3, [r7, #15]
    command[12] = ' ';
 8003300:	2320      	movs	r3, #32
 8003302:	743b      	strb	r3, [r7, #16]
    crc32(command, 12, &command[13]);
 8003304:	1d3b      	adds	r3, r7, #4
 8003306:	f103 020d 	add.w	r2, r3, #13
 800330a:	1d3b      	adds	r3, r7, #4
 800330c:	210c      	movs	r1, #12
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fa58 	bl	80037c4 <crc32>
    command[21] = 0x0D;
 8003314:	230d      	movs	r3, #13
 8003316:	767b      	strb	r3, [r7, #25]
    return UHF_WRITE(command, 22);
 8003318:	1d3b      	adds	r3, r7, #4
 800331a:	2116      	movs	r1, #22
 800331c:	4618      	mov	r0, r3
 800331e:	f000 f91d 	bl	800355c <UHF_WRITE>
 8003322:	4603      	mov	r3, r0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3738      	adds	r7, #56	; 0x38
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <SET_BEACON_PERIOD>:
 * minimum is: 1 second
 * Maximum is: 65535 seconds
 *
 * @param period : The period in seconds for the beacon to be set to.
 */
HAL_StatusTypeDef SET_BEACON_PERIOD(uint16_t period){
 800332c:	b580      	push	{r7, lr}
 800332e:	b08c      	sub	sp, #48	; 0x30
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	80fb      	strh	r3, [r7, #6]
    uint8_t command[26];
    command[0] = 'E';
 8003336:	2345      	movs	r3, #69	; 0x45
 8003338:	753b      	strb	r3, [r7, #20]
    command[1] = 'S';
 800333a:	2353      	movs	r3, #83	; 0x53
 800333c:	757b      	strb	r3, [r7, #21]
    command[2] = '+';
 800333e:	232b      	movs	r3, #43	; 0x2b
 8003340:	75bb      	strb	r3, [r7, #22]
    command[3] = 'W';
 8003342:	2357      	movs	r3, #87	; 0x57
 8003344:	75fb      	strb	r3, [r7, #23]
    command[4] = '2';
 8003346:	2332      	movs	r3, #50	; 0x32
 8003348:	763b      	strb	r3, [r7, #24]
    command[5] = '2';
 800334a:	2332      	movs	r3, #50	; 0x32
 800334c:	767b      	strb	r3, [r7, #25]
    command[6] = '0';
 800334e:	2330      	movs	r3, #48	; 0x30
 8003350:	76bb      	strb	r3, [r7, #26]
    command[7] = '7';
 8003352:	2337      	movs	r3, #55	; 0x37
 8003354:	76fb      	strb	r3, [r7, #27]
    command[8] = '0';
 8003356:	2330      	movs	r3, #48	; 0x30
 8003358:	773b      	strb	r3, [r7, #28]
    command[9] = '0';
 800335a:	2330      	movs	r3, #48	; 0x30
 800335c:	777b      	strb	r3, [r7, #29]
    command[10] = '0';
 800335e:	2330      	movs	r3, #48	; 0x30
 8003360:	77bb      	strb	r3, [r7, #30]
    command[11] = '0';
 8003362:	2330      	movs	r3, #48	; 0x30
 8003364:	77fb      	strb	r3, [r7, #31]
    char temp[5];
    sprintf(temp, "%04X", period);
 8003366:	88fa      	ldrh	r2, [r7, #6]
 8003368:	f107 030c 	add.w	r3, r7, #12
 800336c:	4910      	ldr	r1, [pc, #64]	; (80033b0 <SET_BEACON_PERIOD+0x84>)
 800336e:	4618      	mov	r0, r3
 8003370:	f00a fc38 	bl	800dbe4 <siprintf>
 8003374:	68fb      	ldr	r3, [r7, #12]
    memcpy(&command[12], temp, 4);
 8003376:	623b      	str	r3, [r7, #32]
    command[16] = ' ';
 8003378:	2320      	movs	r3, #32
 800337a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    crc32(command, 16, &command[17]);
 800337e:	f107 0314 	add.w	r3, r7, #20
 8003382:	f103 0211 	add.w	r2, r3, #17
 8003386:	f107 0314 	add.w	r3, r7, #20
 800338a:	2110      	movs	r1, #16
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fa19 	bl	80037c4 <crc32>
    command[25] = 0x0D;
 8003392:	230d      	movs	r3, #13
 8003394:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    return UHF_WRITE(command, 26);
 8003398:	f107 0314 	add.w	r3, r7, #20
 800339c:	211a      	movs	r1, #26
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f8dc 	bl	800355c <UHF_WRITE>
 80033a4:	4603      	mov	r3, r0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3730      	adds	r7, #48	; 0x30
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	080101a4 	.word	0x080101a4

080033b4 <SET_BEACON_TEXT>:
 * @brief This will set the beacon message to any text. Assuming it is within the range of allowed size.
 *
 * @param text : The message to be placed in the beacon.
 * @param size : The size needs to be under 0x62 to fit in the size of endurosat beacon format.
 */
HAL_StatusTypeDef SET_BEACON_TEXT(uint8_t* text, uint8_t size){
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08c      	sub	sp, #48	; 0x30
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	70fb      	strb	r3, [r7, #3]
    if(size >= 0x62){        // To avoid the size limit of 0x62
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	2b61      	cmp	r3, #97	; 0x61
 80033c4:	d904      	bls.n	80033d0 <SET_BEACON_TEXT+0x1c>
        debug_printf("Beacon Text is too long");
 80033c6:	482e      	ldr	r0, [pc, #184]	; (8003480 <SET_BEACON_TEXT+0xcc>)
 80033c8:	f000 f918 	bl	80035fc <debug_printf>
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e052      	b.n	8003476 <SET_BEACON_TEXT+0xc2>
    }

    /* Write command ES+W22FB */
    uint8_t command[37];
    command[0] = 'E';
 80033d0:	2345      	movs	r3, #69	; 0x45
 80033d2:	723b      	strb	r3, [r7, #8]
    command[1] = 'S';
 80033d4:	2353      	movs	r3, #83	; 0x53
 80033d6:	727b      	strb	r3, [r7, #9]
    command[2] = '+';
 80033d8:	232b      	movs	r3, #43	; 0x2b
 80033da:	72bb      	strb	r3, [r7, #10]
    command[3] = 'W';
 80033dc:	2357      	movs	r3, #87	; 0x57
 80033de:	72fb      	strb	r3, [r7, #11]
    command[4] = '2';
 80033e0:	2332      	movs	r3, #50	; 0x32
 80033e2:	733b      	strb	r3, [r7, #12]
    command[5] = '2';
 80033e4:	2332      	movs	r3, #50	; 0x32
 80033e6:	737b      	strb	r3, [r7, #13]
    command[6] = 'F';
 80033e8:	2346      	movs	r3, #70	; 0x46
 80033ea:	73bb      	strb	r3, [r7, #14]
    command[7] = 'B';
 80033ec:	2342      	movs	r3, #66	; 0x42
 80033ee:	73fb      	strb	r3, [r7, #15]
    command[8] = '0';
 80033f0:	2330      	movs	r3, #48	; 0x30
 80033f2:	743b      	strb	r3, [r7, #16]
    command[9] = 'E';
 80033f4:	2345      	movs	r3, #69	; 0x45
 80033f6:	747b      	strb	r3, [r7, #17]
    command[10] = 'H';
 80033f8:	2348      	movs	r3, #72	; 0x48
 80033fa:	74bb      	strb	r3, [r7, #18]
    command[11] = 'e';
 80033fc:	2365      	movs	r3, #101	; 0x65
 80033fe:	74fb      	strb	r3, [r7, #19]
    command[12] = 'l';
 8003400:	236c      	movs	r3, #108	; 0x6c
 8003402:	753b      	strb	r3, [r7, #20]
    command[13] = 'l';
 8003404:	236c      	movs	r3, #108	; 0x6c
 8003406:	757b      	strb	r3, [r7, #21]
    command[14] = 'o';
 8003408:	236f      	movs	r3, #111	; 0x6f
 800340a:	75bb      	strb	r3, [r7, #22]
    command[15] = ',';
 800340c:	232c      	movs	r3, #44	; 0x2c
 800340e:	75fb      	strb	r3, [r7, #23]
    command[16] = ' ';
 8003410:	2320      	movs	r3, #32
 8003412:	763b      	strb	r3, [r7, #24]
    command[17] = 'E';
 8003414:	2345      	movs	r3, #69	; 0x45
 8003416:	767b      	strb	r3, [r7, #25]
    command[18] = 'a';
 8003418:	2361      	movs	r3, #97	; 0x61
 800341a:	76bb      	strb	r3, [r7, #26]
    command[19] = 'r';
 800341c:	2372      	movs	r3, #114	; 0x72
 800341e:	76fb      	strb	r3, [r7, #27]
    command[20] = 't';
 8003420:	2374      	movs	r3, #116	; 0x74
 8003422:	773b      	strb	r3, [r7, #28]
    command[21] = 'h';
 8003424:	2368      	movs	r3, #104	; 0x68
 8003426:	777b      	strb	r3, [r7, #29]
    command[22] = '!';
 8003428:	2321      	movs	r3, #33	; 0x21
 800342a:	77bb      	strb	r3, [r7, #30]
//    while(text[i] != '\0'){
//        command[i+10] = text[i]; // Start at pos 10
//        i++;
//    }

    command[23] = ' ';
 800342c:	2320      	movs	r3, #32
 800342e:	77fb      	strb	r3, [r7, #31]
    crc32(command, 24, &command[24]); // Add checksum to command
 8003430:	f107 0308 	add.w	r3, r7, #8
 8003434:	f103 0218 	add.w	r2, r3, #24
 8003438:	f107 0308 	add.w	r3, r7, #8
 800343c:	2118      	movs	r1, #24
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f9c0 	bl	80037c4 <crc32>

    command[32] = '<';
 8003444:	233c      	movs	r3, #60	; 0x3c
 8003446:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    command[33] = 'C';
 800344a:	2343      	movs	r3, #67	; 0x43
 800344c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    command[34] = 'R';
 8003450:	2352      	movs	r3, #82	; 0x52
 8003452:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    command[35] = '>';
 8003456:	233e      	movs	r3, #62	; 0x3e
 8003458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
//    /* Append <CR> */
//    char delim[5] = "<CR>";
//    memcpy(&command[i + 19], delim, 4); // Add <CR> (36)

    /* Send to UHF */
    debug_printf("%s", command);
 800345c:	f107 0308 	add.w	r3, r7, #8
 8003460:	4619      	mov	r1, r3
 8003462:	4808      	ldr	r0, [pc, #32]	; (8003484 <SET_BEACON_TEXT+0xd0>)
 8003464:	f000 f8ca 	bl	80035fc <debug_printf>
    return UHF_WRITE(command, 37);
 8003468:	f107 0308 	add.w	r3, r7, #8
 800346c:	2125      	movs	r1, #37	; 0x25
 800346e:	4618      	mov	r0, r3
 8003470:	f000 f874 	bl	800355c <UHF_WRITE>
 8003474:	4603      	mov	r3, r0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3730      	adds	r7, #48	; 0x30
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	080101ac 	.word	0x080101ac
 8003484:	080101c4 	.word	0x080101c4

08003488 <GET_UHF_STATUS>:
/**
 * @brief Gets the status control word of the uhf and is placed in the data pointer.
 * @param data : A pointer to allow the ESTCC response to be read
 *
 */
HAL_StatusTypeDef GET_UHF_STATUS(uint8_t* data){
 8003488:	b5b0      	push	{r4, r5, r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
    uint8_t read_command[] = "ES+R2200 BD888E1F\r";
 8003490:	4b12      	ldr	r3, [pc, #72]	; (80034dc <GET_UHF_STATUS+0x54>)
 8003492:	f107 040c 	add.w	r4, r7, #12
 8003496:	461d      	mov	r5, r3
 8003498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800349a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800349c:	682b      	ldr	r3, [r5, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	8022      	strh	r2, [r4, #0]
 80034a2:	3402      	adds	r4, #2
 80034a4:	0c1b      	lsrs	r3, r3, #16
 80034a6:	7023      	strb	r3, [r4, #0]
    HAL_StatusTypeDef status = UHF_READ(read_command, data, 18, 23);
 80034a8:	f107 000c 	add.w	r0, r7, #12
 80034ac:	2317      	movs	r3, #23
 80034ae:	2212      	movs	r2, #18
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	f000 f815 	bl	80034e0 <UHF_READ>
 80034b6:	4603      	mov	r3, r0
 80034b8:	77fb      	strb	r3, [r7, #31]
    if(data[0]!='O' || data[1]!='K'){
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b4f      	cmp	r3, #79	; 0x4f
 80034c0:	d104      	bne.n	80034cc <GET_UHF_STATUS+0x44>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3301      	adds	r3, #1
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b4b      	cmp	r3, #75	; 0x4b
 80034ca:	d001      	beq.n	80034d0 <GET_UHF_STATUS+0x48>
            return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <GET_UHF_STATUS+0x4a>
    }
    return status;
 80034d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3720      	adds	r7, #32
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bdb0      	pop	{r4, r5, r7, pc}
 80034da:	bf00      	nop
 80034dc:	080101d0 	.word	0x080101d0

080034e0 <UHF_READ>:
 * @param command  :the command to be used on the transceiver
 * @param data_ptr :A pointer to allow information from the health check to be viewed.
 * @param in_byte  :The size of the command that is being sent
 * @param out_byte : The size of the expected return./How long to listen for.
 */
HAL_StatusTypeDef UHF_READ(uint8_t command[], uint8_t* data_ptr, uint8_t in_byte, uint8_t out_byte){
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	4611      	mov	r1, r2
 80034ec:	461a      	mov	r2, r3
 80034ee:	460b      	mov	r3, r1
 80034f0:	71fb      	strb	r3, [r7, #7]
 80034f2:	4613      	mov	r3, r2
 80034f4:	71bb      	strb	r3, [r7, #6]
    osMutexWait(UART_Mutex, 2500);
 80034f6:	4b17      	ldr	r3, [pc, #92]	; (8003554 <UHF_READ+0x74>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80034fe:	4618      	mov	r0, r3
 8003500:	f007 f81c 	bl	800a53c <osMutexWait>
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, command, in_byte, UHF_UART_TIMEOUT);
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	b29a      	uxth	r2, r3
 8003508:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800350c:	68f9      	ldr	r1, [r7, #12]
 800350e:	4812      	ldr	r0, [pc, #72]	; (8003558 <UHF_READ+0x78>)
 8003510:	f004 fb8b 	bl	8007c2a <HAL_UART_Transmit>
 8003514:	4603      	mov	r3, r0
 8003516:	75fb      	strb	r3, [r7, #23]
    if(status != HAL_OK){
 8003518:	7dfb      	ldrb	r3, [r7, #23]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d006      	beq.n	800352c <UHF_READ+0x4c>
        osMutexRelease(UART_Mutex);
 800351e:	4b0d      	ldr	r3, [pc, #52]	; (8003554 <UHF_READ+0x74>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f007 f85a 	bl	800a5dc <osMutexRelease>
        return status;
 8003528:	7dfb      	ldrb	r3, [r7, #23]
 800352a:	e00f      	b.n	800354c <UHF_READ+0x6c>
    }
    status = HAL_UART_Receive(&huart1, data_ptr, out_byte, UHF_UART_TIMEOUT);
 800352c:	79bb      	ldrb	r3, [r7, #6]
 800352e:	b29a      	uxth	r2, r3
 8003530:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	4808      	ldr	r0, [pc, #32]	; (8003558 <UHF_READ+0x78>)
 8003538:	f004 fc10 	bl	8007d5c <HAL_UART_Receive>
 800353c:	4603      	mov	r3, r0
 800353e:	75fb      	strb	r3, [r7, #23]
    osMutexRelease(UART_Mutex);
 8003540:	4b04      	ldr	r3, [pc, #16]	; (8003554 <UHF_READ+0x74>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f007 f849 	bl	800a5dc <osMutexRelease>
    return status;
 800354a:	7dfb      	ldrb	r3, [r7, #23]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	2000022c 	.word	0x2000022c
 8003558:	200006bc 	.word	0x200006bc

0800355c <UHF_WRITE>:
/**
 * @brief Sends a write command to the UHF over UART
 * @param command  :the command to be used on the transceiver
 * @param in_byte  :The size of the command that is being sent
 */
HAL_StatusTypeDef UHF_WRITE(uint8_t command[], uint8_t in_byte){
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	70fb      	strb	r3, [r7, #3]
    osMutexWait(UART_Mutex, 2500);
 8003568:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <UHF_WRITE+0x8c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003570:	4618      	mov	r0, r3
 8003572:	f006 ffe3 	bl	800a53c <osMutexWait>
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, command, in_byte, UHF_UART_TIMEOUT);
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	b29a      	uxth	r2, r3
 800357a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	481a      	ldr	r0, [pc, #104]	; (80035ec <UHF_WRITE+0x90>)
 8003582:	f004 fb52 	bl	8007c2a <HAL_UART_Transmit>
 8003586:	4603      	mov	r3, r0
 8003588:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d009      	beq.n	80035a4 <UHF_WRITE+0x48>
        debug_printf("UHF_WRITE: UART Tx Fail");
 8003590:	4817      	ldr	r0, [pc, #92]	; (80035f0 <UHF_WRITE+0x94>)
 8003592:	f000 f833 	bl	80035fc <debug_printf>
        osMutexRelease(UART_Mutex);
 8003596:	4b14      	ldr	r3, [pc, #80]	; (80035e8 <UHF_WRITE+0x8c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f007 f81e 	bl	800a5dc <osMutexRelease>
        return status;
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	e01d      	b.n	80035e0 <UHF_WRITE+0x84>
    }

    uint8_t data[2];
    status = HAL_UART_Receive(&huart1, data, 2, UHF_UART_TIMEOUT);
 80035a4:	f107 010c 	add.w	r1, r7, #12
 80035a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ac:	2202      	movs	r2, #2
 80035ae:	480f      	ldr	r0, [pc, #60]	; (80035ec <UHF_WRITE+0x90>)
 80035b0:	f004 fbd4 	bl	8007d5c <HAL_UART_Receive>
 80035b4:	4603      	mov	r3, r0
 80035b6:	73fb      	strb	r3, [r7, #15]
    osMutexRelease(UART_Mutex);
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <UHF_WRITE+0x8c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f007 f80d 	bl	800a5dc <osMutexRelease>
    if(data[0]!= 'O' || data[1]!= 'K'){
 80035c2:	7b3b      	ldrb	r3, [r7, #12]
 80035c4:	2b4f      	cmp	r3, #79	; 0x4f
 80035c6:	d102      	bne.n	80035ce <UHF_WRITE+0x72>
 80035c8:	7b7b      	ldrb	r3, [r7, #13]
 80035ca:	2b4b      	cmp	r3, #75	; 0x4b
 80035cc:	d004      	beq.n	80035d8 <UHF_WRITE+0x7c>
        debug_printf("UHF_WRITE: UART Rx FAIL");
 80035ce:	4809      	ldr	r0, [pc, #36]	; (80035f4 <UHF_WRITE+0x98>)
 80035d0:	f000 f814 	bl	80035fc <debug_printf>
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e003      	b.n	80035e0 <UHF_WRITE+0x84>
    }

    debug_printf("UHF_WRITE: Success");
 80035d8:	4807      	ldr	r0, [pc, #28]	; (80035f8 <UHF_WRITE+0x9c>)
 80035da:	f000 f80f 	bl	80035fc <debug_printf>
    return status;
 80035de:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	2000022c 	.word	0x2000022c
 80035ec:	200006bc 	.word	0x200006bc
 80035f0:	0801029c 	.word	0x0801029c
 80035f4:	080102b4 	.word	0x080102b4
 80035f8:	080102cc 	.word	0x080102cc

080035fc <debug_printf>:

/**
  * @brief Formats and prints data out on to the debug UART line. Formatting works in standard printf fashion
  * @retval Returns the status of the HAL UART transmission
  */
HAL_StatusTypeDef debug_printf(char* format, ...){
 80035fc:	b40f      	push	{r0, r1, r2, r3}
 80035fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
 8003606:	466b      	mov	r3, sp
 8003608:	4698      	mov	r8, r3

    uint32_t bufferSize = 512;
 800360a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800360e:	61bb      	str	r3, [r7, #24]
    uint8_t formatBuffer[bufferSize];
 8003610:	69be      	ldr	r6, [r7, #24]
 8003612:	4633      	mov	r3, r6
 8003614:	3b01      	subs	r3, #1
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	2300      	movs	r3, #0
 800361a:	4634      	mov	r4, r6
 800361c:	461d      	mov	r5, r3
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	00eb      	lsls	r3, r5, #3
 8003628:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800362c:	00e2      	lsls	r2, r4, #3
 800362e:	2300      	movs	r3, #0
 8003630:	4630      	mov	r0, r6
 8003632:	4619      	mov	r1, r3
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	00cb      	lsls	r3, r1, #3
 800363e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003642:	00c2      	lsls	r2, r0, #3
 8003644:	1df3      	adds	r3, r6, #7
 8003646:	08db      	lsrs	r3, r3, #3
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	ebad 0d03 	sub.w	sp, sp, r3
 800364e:	466b      	mov	r3, sp
 8003650:	3300      	adds	r3, #0
 8003652:	613b      	str	r3, [r7, #16]

    va_list args;
    va_start(args, format);
 8003654:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003658:	60bb      	str	r3, [r7, #8]
    int len = vsnprintf(formatBuffer, bufferSize, format, args); //warning due to use of uint8_t instead of int8_t
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800365e:	69b9      	ldr	r1, [r7, #24]
 8003660:	6938      	ldr	r0, [r7, #16]
 8003662:	f00a fb0b 	bl	800dc7c <vsniprintf>
 8003666:	60f8      	str	r0, [r7, #12]
    va_end(args);

    HAL_StatusTypeDef status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	77fb      	strb	r3, [r7, #31]
    if (len > 0) {
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	dd1b      	ble.n	80036aa <debug_printf+0xae>
        status = HAL_UART_Transmit(&huart6, formatBuffer, len, 1000);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	b29a      	uxth	r2, r3
 8003676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800367a:	6939      	ldr	r1, [r7, #16]
 800367c:	4810      	ldr	r0, [pc, #64]	; (80036c0 <debug_printf+0xc4>)
 800367e:	f004 fad4 	bl	8007c2a <HAL_UART_Transmit>
 8003682:	4603      	mov	r3, r0
 8003684:	77fb      	strb	r3, [r7, #31]
        uint8_t crlf[] = "\r\n";
 8003686:	4a0f      	ldr	r2, [pc, #60]	; (80036c4 <debug_printf+0xc8>)
 8003688:	1d3b      	adds	r3, r7, #4
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	4611      	mov	r1, r2
 800368e:	8019      	strh	r1, [r3, #0]
 8003690:	3302      	adds	r3, #2
 8003692:	0c12      	lsrs	r2, r2, #16
 8003694:	701a      	strb	r2, [r3, #0]
        status = HAL_UART_Transmit(&huart6, crlf, 2, 1000); //sends a carrige return and a line feed to UART (meant for putty/windows)
 8003696:	1d39      	adds	r1, r7, #4
 8003698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800369c:	2202      	movs	r2, #2
 800369e:	4808      	ldr	r0, [pc, #32]	; (80036c0 <debug_printf+0xc4>)
 80036a0:	f004 fac3 	bl	8007c2a <HAL_UART_Transmit>
 80036a4:	4603      	mov	r3, r0
 80036a6:	77fb      	strb	r3, [r7, #31]
 80036a8:	e001      	b.n	80036ae <debug_printf+0xb2>
    }
    else{
        status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 80036ae:	7ffb      	ldrb	r3, [r7, #31]
 80036b0:	46c5      	mov	sp, r8
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036bc:	b004      	add	sp, #16
 80036be:	4770      	bx	lr
 80036c0:	200006fc 	.word	0x200006fc
 80036c4:	080102e0 	.word	0x080102e0

080036c8 <debug_led_green>:
/**
 * Flash the Green LED located on the OBC
 * @param count - The number of cycles to flash
 * @param period - The amount of time in milliseconds between LED states
 */
void debug_led_green(int count, int period){
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
    int i;
    for (i = 0; i < count; ++i)
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	e016      	b.n	8003706 <debug_led_green+0x3e>
    {
        GREEN_LED_ON();
 80036d8:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <debug_led_green+0x50>)
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	4a0e      	ldr	r2, [pc, #56]	; (8003718 <debug_led_green+0x50>)
 80036de:	f043 0310 	orr.w	r3, r3, #16
 80036e2:	6153      	str	r3, [r2, #20]
        HAL_Delay(period);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f9d0 	bl	8003a8c <HAL_Delay>
        GREEN_LED_OFF();
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <debug_led_green+0x50>)
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	4a09      	ldr	r2, [pc, #36]	; (8003718 <debug_led_green+0x50>)
 80036f2:	f023 0310 	bic.w	r3, r3, #16
 80036f6:	6153      	str	r3, [r2, #20]
        HAL_Delay(period);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 f9c6 	bl	8003a8c <HAL_Delay>
    for (i = 0; i < count; ++i)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3301      	adds	r3, #1
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	429a      	cmp	r2, r3
 800370c:	dbe4      	blt.n	80036d8 <debug_led_green+0x10>
    }
}
 800370e:	bf00      	nop
 8003710:	bf00      	nop
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40020800 	.word	0x40020800

0800371c <debug_led_amber>:
/**
 * Flash the Amber LED located on the OBC
 * @param count - The number of cycles to flash
 * @param period - The amount of time in milliseconds between LED states
 */
void debug_led_amber(int count, int period){
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
    int i;
    for (i = 0; i < count; ++i)
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	e016      	b.n	800375a <debug_led_amber+0x3e>
    {
        AMBER_LED_ON();
 800372c:	4b0f      	ldr	r3, [pc, #60]	; (800376c <debug_led_amber+0x50>)
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	4a0e      	ldr	r2, [pc, #56]	; (800376c <debug_led_amber+0x50>)
 8003732:	f043 0320 	orr.w	r3, r3, #32
 8003736:	6153      	str	r3, [r2, #20]
        HAL_Delay(period);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f9a6 	bl	8003a8c <HAL_Delay>
        AMBER_LED_OFF();
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <debug_led_amber+0x50>)
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	4a09      	ldr	r2, [pc, #36]	; (800376c <debug_led_amber+0x50>)
 8003746:	f023 0320 	bic.w	r3, r3, #32
 800374a:	6153      	str	r3, [r2, #20]
        HAL_Delay(period);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f99c 	bl	8003a8c <HAL_Delay>
    for (i = 0; i < count; ++i)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3301      	adds	r3, #1
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	429a      	cmp	r2, r3
 8003760:	dbe4      	blt.n	800372c <debug_led_amber+0x10>
    }
}
 8003762:	bf00      	nop
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40020800 	.word	0x40020800

08003770 <FloatToUnsigned16bits>:
  * @brief Converts a float into a uint16_t
  * @param bytes: an array of bytes the same size as a float in bytes
  * @param float_value: the float value to convert into a uint16_t
  * @retval The 16 bit unsigned integer
  */
uint16_t FloatToUnsigned16bits(float float_value){
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t x = *((uint32_t*)&float_value);
 800377a:	1d3b      	adds	r3, r7, #4
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	60fb      	str	r3, [r7, #12]
    return ((x>>16)&0x8000)|((((x&0x7f800000)-0x38000000)>>13)&0x7c00)|((x>>13)&0x03ff);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	0c1b      	lsrs	r3, r3, #16
 8003784:	b29b      	uxth	r3, r3
 8003786:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800378a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 8003796:	f103 4348 	add.w	r3, r3, #3355443200	; 0xc8000000
 800379a:	0b5b      	lsrs	r3, r3, #13
 800379c:	b29b      	uxth	r3, r3
 800379e:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	4313      	orrs	r3, r2
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	0b5b      	lsrs	r3, r3, #13
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	4313      	orrs	r3, r2
 80037b6:	b29b      	uxth	r3, r3
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <crc32>:
 * @brief Calculates the crc32 value for the message
 * @param message: contains the message to be used for calculation of the crc32.
 * @param crc_ascii: contains the crc value as an 8 byte string
 * @retval returns a uint32_t to as the value of the crc32.
 */
uint32_t crc32(uint8_t* message, int length, uint8_t* crc_ascii) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	; 0x28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
   int i, j;
  // debug_printf("%s",message);
   uint32_t byte, crc, mask;

   i = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
   crc = 0xFFFFFFFF;
 80037d4:	f04f 33ff 	mov.w	r3, #4294967295
 80037d8:	61fb      	str	r3, [r7, #28]
   while (i < length) {
 80037da:	e020      	b.n	800381e <crc32+0x5a>
      byte = message[i];                //get the next byte of message
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4413      	add	r3, r2
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	61bb      	str	r3, [r7, #24]
      crc = crc ^ byte;                 //^ is bitwise XOR
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	4053      	eors	r3, r2
 80037ec:	61fb      	str	r3, [r7, #28]
      for (j = 7; j >= 0; j--) {
 80037ee:	2307      	movs	r3, #7
 80037f0:	623b      	str	r3, [r7, #32]
 80037f2:	e00e      	b.n	8003812 <crc32+0x4e>
         mask = -(crc & 1);     // make mask
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	425b      	negs	r3, r3
 80037fc:	617b      	str	r3, [r7, #20]
         crc = (crc >> 1) ^ (0xEDB88320 & mask);  //shift crc and apply mask
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	085a      	lsrs	r2, r3, #1
 8003802:	6979      	ldr	r1, [r7, #20]
 8003804:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <crc32+0x7c>)
 8003806:	400b      	ands	r3, r1
 8003808:	4053      	eors	r3, r2
 800380a:	61fb      	str	r3, [r7, #28]
      for (j = 7; j >= 0; j--) {
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	3b01      	subs	r3, #1
 8003810:	623b      	str	r3, [r7, #32]
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	2b00      	cmp	r3, #0
 8003816:	daed      	bge.n	80037f4 <crc32+0x30>
      }
      i++;
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	3301      	adds	r3, #1
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
   while (i < length) {
 800381e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	429a      	cmp	r2, r3
 8003824:	dbda      	blt.n	80037dc <crc32+0x18>
   }
   crc = ~crc;
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	43db      	mvns	r3, r3
 800382a:	61fb      	str	r3, [r7, #28]
   sprintf(crc_ascii, "%lX", crc);
 800382c:	69fa      	ldr	r2, [r7, #28]
 800382e:	4905      	ldr	r1, [pc, #20]	; (8003844 <crc32+0x80>)
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f00a f9d7 	bl	800dbe4 <siprintf>
   return crc;
 8003836:	69fb      	ldr	r3, [r7, #28]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3728      	adds	r7, #40	; 0x28
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	edb88320 	.word	0xedb88320
 8003844:	08010338 	.word	0x08010338

08003848 <main>:

/**
 * CySat 1 Mission Execution
 */
int main(void)
{
 8003848:	b5b0      	push	{r4, r5, r7, lr}
 800384a:	b09a      	sub	sp, #104	; 0x68
 800384c:	af00      	add	r7, sp, #0
    //SCB->VTOR = APPL_ADDRESS;

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800384e:	f000 f8e1 	bl	8003a14 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 8003852:	f005 fdd3 	bl	80093fc <SystemClock_Config>

    HAL_Delay(INITIAL_WAIT); // Delay for the specified 30 minutes
 8003856:	f241 7070 	movw	r0, #6000	; 0x1770
 800385a:	f000 f917 	bl	8003a8c <HAL_Delay>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800385e:	f005 fe4f 	bl	8009500 <MX_GPIO_Init>
    MX_I2C1_Init();
 8003862:	f005 ffe9 	bl	8009838 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8003866:	f006 f85f 	bl	8009928 <MX_USART1_UART_Init>
    MX_UART4_Init();
 800386a:	f006 f833 	bl	80098d4 <MX_UART4_Init>
    MX_USART6_UART_Init();
 800386e:	f006 f885 	bl	800997c <MX_USART6_UART_Init>
    MX_SDIO_SD_Init();
 8003872:	f006 f80f 	bl	8009894 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 8003876:	f006 f987 	bl	8009b88 <MX_FATFS_Init>
    // Commands the start of data reception because I can't define it in AppTasks.c without having to mess around with #including stuff
    //HAL_UART_Receive_IT(&huart6,GroundStationRxBuffer, 4);
    //HAL_UART_Receive_IT(&huart1,GroundStationRxBuffer, 4);

    /* Initialize task threads */
    osThreadDef(myMainTask, Main_Task, osPriorityRealtime, 0, 512);
 800387a:	4b2b      	ldr	r3, [pc, #172]	; (8003928 <main+0xe0>)
 800387c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8003880:	461d      	mov	r5, r3
 8003882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003886:	682b      	ldr	r3, [r5, #0]
 8003888:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myMainTask), NULL);
 800388a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f006 fe0b 	bl	800a4ac <osThreadCreate>

    osThreadDef(myUHFRxTask, UHF_Rx_Task, osPriorityNormal, 0, 512);
 8003896:	4b25      	ldr	r3, [pc, #148]	; (800392c <main+0xe4>)
 8003898:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800389c:	461d      	mov	r5, r3
 800389e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038a2:	682b      	ldr	r3, [r5, #0]
 80038a4:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myUHFRxTask), NULL);
 80038a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038aa:	2100      	movs	r1, #0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f006 fdfd 	bl	800a4ac <osThreadCreate>

    osThreadDef(myUHFTxTask, UHF_Tx_Task, osPriorityNormal, 0, 512);
 80038b2:	4b1f      	ldr	r3, [pc, #124]	; (8003930 <main+0xe8>)
 80038b4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80038b8:	461d      	mov	r5, r3
 80038ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038be:	682b      	ldr	r3, [r5, #0]
 80038c0:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myUHFTxTask), NULL);
 80038c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f006 fdef 	bl	800a4ac <osThreadCreate>

    osThreadDef(myADCSTask, ADCS_Task, osPriorityNormal, 0, 1024);
 80038ce:	4b19      	ldr	r3, [pc, #100]	; (8003934 <main+0xec>)
 80038d0:	f107 0418 	add.w	r4, r7, #24
 80038d4:	461d      	mov	r5, r3
 80038d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038da:	682b      	ldr	r3, [r5, #0]
 80038dc:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myADCSTask), NULL);
 80038de:	f107 0318 	add.w	r3, r7, #24
 80038e2:	2100      	movs	r1, #0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f006 fde1 	bl	800a4ac <osThreadCreate>

    osThreadDef(myBatteryCapacityTask, BatteryCapacity_Task, osPriorityNormal, 0, 256);
 80038ea:	4b13      	ldr	r3, [pc, #76]	; (8003938 <main+0xf0>)
 80038ec:	1d3c      	adds	r4, r7, #4
 80038ee:	461d      	mov	r5, r3
 80038f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038f4:	682b      	ldr	r3, [r5, #0]
 80038f6:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myBatteryCapacityTask), NULL);
 80038f8:	1d3b      	adds	r3, r7, #4
 80038fa:	2100      	movs	r1, #0
 80038fc:	4618      	mov	r0, r3
 80038fe:	f006 fdd5 	bl	800a4ac <osThreadCreate>

    /* Start scheduler */
    osKernelStart();
 8003902:	f006 fdbc 	bl	800a47e <osKernelStart>
    // Enable Transparent Mode
    // TODO: Send command to UHF transceiver to enable transparent mode

    // Detumbling Sequence
    // TODO: Detumbling functions (ADCS) go here
    debug_printf("Beginning detumbling sequence");
 8003906:	480d      	ldr	r0, [pc, #52]	; (800393c <main+0xf4>)
 8003908:	f7ff fe78 	bl	80035fc <debug_printf>
    */

   // HAL_Delay(15000); // Delay for 15 seconds to allow ADCS to boot-up in application mode

    /* Receive via STM UART */
    GroundStationRxDataLength = 4;
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <main+0xf8>)
 800390e:	2204      	movs	r2, #4
 8003910:	601a      	str	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart6, (uint8_t*) &GroundStationRxBuffer, 4);
 8003912:	2204      	movs	r2, #4
 8003914:	490b      	ldr	r1, [pc, #44]	; (8003944 <main+0xfc>)
 8003916:	480c      	ldr	r0, [pc, #48]	; (8003948 <main+0x100>)
 8003918:	f004 fac6 	bl	8007ea8 <HAL_UART_Receive_IT>
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3768      	adds	r7, #104	; 0x68
 8003922:	46bd      	mov	sp, r7
 8003924:	bdb0      	pop	{r4, r5, r7, pc}
 8003926:	bf00      	nop
 8003928:	080103a4 	.word	0x080103a4
 800392c:	080103b8 	.word	0x080103b8
 8003930:	080103cc 	.word	0x080103cc
 8003934:	080103e0 	.word	0x080103e0
 8003938:	080103f4 	.word	0x080103f4
 800393c:	08010384 	.word	0x08010384
 8003940:	2000021c 	.word	0x2000021c
 8003944:	20000214 	.word	0x20000214
 8003948:	200006fc 	.word	0x200006fc

0800394c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a04      	ldr	r2, [pc, #16]	; (800396c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d101      	bne.n	8003962 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800395e:	f000 f87b 	bl	8003a58 <HAL_IncTick>
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40010000 	.word	0x40010000

08003970 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
#ifdef DEBUG_ENABLE
  while(1)
  {
      debug_led_green(5, 2000);
 8003974:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003978:	2005      	movs	r0, #5
 800397a:	f7ff fea5 	bl	80036c8 <debug_led_green>
      debug_led_amber(5, 2000);
 800397e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003982:	2005      	movs	r0, #5
 8003984:	f7ff feca 	bl	800371c <debug_led_amber>
      debug_led_green(5, 2000);
 8003988:	e7f4      	b.n	8003974 <Error_Handler+0x4>
	...

0800398c <HAL_UART_RxCpltCallback>:
{
    Error_Handler();
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
    if(huart == &huart6){ //OBC connected to Payload/USB
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a1c      	ldr	r2, [pc, #112]	; (8003a08 <HAL_UART_RxCpltCallback+0x7c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d116      	bne.n	80039ca <HAL_UART_RxCpltCallback+0x3e>
        if(handleCySatPacket(parseCySatPacket(GroundStationRxBuffer)) == -1){ //error occurred
 800399c:	f107 0308 	add.w	r3, r7, #8
 80039a0:	491a      	ldr	r1, [pc, #104]	; (8003a0c <HAL_UART_RxCpltCallback+0x80>)
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fd fb9c 	bl	80010e0 <parseCySatPacket>
 80039a8:	f107 0308 	add.w	r3, r7, #8
 80039ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80039b0:	f7fe fb9c 	bl	80020ec <handleCySatPacket>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ba:	d101      	bne.n	80039c0 <HAL_UART_RxCpltCallback+0x34>
            sendErrorPacket();
 80039bc:	f7fe fb70 	bl	80020a0 <sendErrorPacket>
        }
        HAL_UART_Receive_IT(&huart6,GroundStationRxBuffer, 4);
 80039c0:	2204      	movs	r2, #4
 80039c2:	4912      	ldr	r1, [pc, #72]	; (8003a0c <HAL_UART_RxCpltCallback+0x80>)
 80039c4:	4810      	ldr	r0, [pc, #64]	; (8003a08 <HAL_UART_RxCpltCallback+0x7c>)
 80039c6:	f004 fa6f 	bl	8007ea8 <HAL_UART_Receive_IT>
    }
    if(huart == &huart1){ //I think this is for the UHF transceiver but I'm not sure -Steven
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a10      	ldr	r2, [pc, #64]	; (8003a10 <HAL_UART_RxCpltCallback+0x84>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d116      	bne.n	8003a00 <HAL_UART_RxCpltCallback+0x74>
        if(handleCySatPacket(parseCySatPacket(GroundStationRxBuffer)) == -1){ //error occurred
 80039d2:	f107 0314 	add.w	r3, r7, #20
 80039d6:	490d      	ldr	r1, [pc, #52]	; (8003a0c <HAL_UART_RxCpltCallback+0x80>)
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fd fb81 	bl	80010e0 <parseCySatPacket>
 80039de:	f107 0314 	add.w	r3, r7, #20
 80039e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80039e6:	f7fe fb81 	bl	80020ec <handleCySatPacket>
 80039ea:	4603      	mov	r3, r0
 80039ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_RxCpltCallback+0x6a>
            sendErrorPacket();
 80039f2:	f7fe fb55 	bl	80020a0 <sendErrorPacket>
        }
        HAL_UART_Receive_IT(&huart1,GroundStationRxBuffer, 4);
 80039f6:	2204      	movs	r2, #4
 80039f8:	4904      	ldr	r1, [pc, #16]	; (8003a0c <HAL_UART_RxCpltCallback+0x80>)
 80039fa:	4805      	ldr	r0, [pc, #20]	; (8003a10 <HAL_UART_RxCpltCallback+0x84>)
 80039fc:	f004 fa54 	bl	8007ea8 <HAL_UART_Receive_IT>
    }
}
 8003a00:	bf00      	nop
 8003a02:	3720      	adds	r7, #32
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	200006fc 	.word	0x200006fc
 8003a0c:	20000214 	.word	0x20000214
 8003a10:	200006bc 	.word	0x200006bc

08003a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a18:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <HAL_Init+0x40>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a0d      	ldr	r2, [pc, #52]	; (8003a54 <HAL_Init+0x40>)
 8003a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a24:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <HAL_Init+0x40>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a0a      	ldr	r2, [pc, #40]	; (8003a54 <HAL_Init+0x40>)
 8003a2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a30:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <HAL_Init+0x40>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a07      	ldr	r2, [pc, #28]	; (8003a54 <HAL_Init+0x40>)
 8003a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a3c:	2003      	movs	r0, #3
 8003a3e:	f000 f90f 	bl	8003c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a42:	200f      	movs	r0, #15
 8003a44:	f006 fb94 	bl	800a170 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003a48:	f006 f9b6 	bl	8009db8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40023c00 	.word	0x40023c00

08003a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  uwTick++;
 8003a5c:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <HAL_IncTick+0x18>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3301      	adds	r3, #1
 8003a62:	4a03      	ldr	r2, [pc, #12]	; (8003a70 <HAL_IncTick+0x18>)
 8003a64:	6013      	str	r3, [r2, #0]
}
 8003a66:	bf00      	nop
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	20000254 	.word	0x20000254

08003a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  return uwTick;
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <HAL_GetTick+0x14>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000254 	.word	0x20000254

08003a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a94:	f7ff ffee 	bl	8003a74 <HAL_GetTick>
 8003a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa4:	d002      	beq.n	8003aac <HAL_Delay+0x20>
  {
     wait++;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003aac:	bf00      	nop
 8003aae:	f7ff ffe1 	bl	8003a74 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d8f7      	bhi.n	8003aae <HAL_Delay+0x22>
  {
  }
}
 8003abe:	bf00      	nop
 8003ac0:	bf00      	nop
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <NVIC_SetPriorityGrouping+0x44>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003afa:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <NVIC_SetPriorityGrouping+0x44>)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	60d3      	str	r3, [r2, #12]
}
 8003b00:	bf00      	nop
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b14:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <NVIC_GetPriorityGrouping+0x18>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	0a1b      	lsrs	r3, r3, #8
 8003b1a:	f003 0307 	and.w	r3, r3, #7
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	e000ed00 	.word	0xe000ed00

08003b2c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	f003 021f 	and.w	r2, r3, #31
 8003b3c:	4907      	ldr	r1, [pc, #28]	; (8003b5c <NVIC_EnableIRQ+0x30>)
 8003b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	2001      	movs	r0, #1
 8003b46:	fa00 f202 	lsl.w	r2, r0, r2
 8003b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	e000e100 	.word	0xe000e100

08003b60 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	6039      	str	r1, [r7, #0]
 8003b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	da0b      	bge.n	8003b8c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	490c      	ldr	r1, [pc, #48]	; (8003bac <NVIC_SetPriority+0x4c>)
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	3b04      	subs	r3, #4
 8003b82:	0112      	lsls	r2, r2, #4
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	440b      	add	r3, r1
 8003b88:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b8a:	e009      	b.n	8003ba0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	4907      	ldr	r1, [pc, #28]	; (8003bb0 <NVIC_SetPriority+0x50>)
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	0112      	lsls	r2, r2, #4
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	e000ed00 	.word	0xe000ed00
 8003bb0:	e000e100 	.word	0xe000e100

08003bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b089      	sub	sp, #36	; 0x24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f1c3 0307 	rsb	r3, r3, #7
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	bf28      	it	cs
 8003bd2:	2304      	movcs	r3, #4
 8003bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	2b06      	cmp	r3, #6
 8003bdc:	d902      	bls.n	8003be4 <NVIC_EncodePriority+0x30>
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	3b03      	subs	r3, #3
 8003be2:	e000      	b.n	8003be6 <NVIC_EncodePriority+0x32>
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43da      	mvns	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	401a      	ands	r2, r3
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	fa01 f303 	lsl.w	r3, r1, r3
 8003c06:	43d9      	mvns	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c0c:	4313      	orrs	r3, r2
         );
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3724      	adds	r7, #36	; 0x24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c2c:	d301      	bcc.n	8003c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e00f      	b.n	8003c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c32:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <SysTick_Config+0x40>)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c3a:	210f      	movs	r1, #15
 8003c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c40:	f7ff ff8e 	bl	8003b60 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c44:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <SysTick_Config+0x40>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c4a:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <SysTick_Config+0x40>)
 8003c4c:	2207      	movs	r2, #7
 8003c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	e000e010 	.word	0xe000e010

08003c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ff2d 	bl	8003ac8 <NVIC_SetPriorityGrouping>
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b086      	sub	sp, #24
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
 8003c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c88:	f7ff ff42 	bl	8003b10 <NVIC_GetPriorityGrouping>
 8003c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	6978      	ldr	r0, [r7, #20]
 8003c94:	f7ff ff8e 	bl	8003bb4 <NVIC_EncodePriority>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff ff5d 	bl	8003b60 <NVIC_SetPriority>
}
 8003ca6:	bf00      	nop
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff ff35 	bl	8003b2c <NVIC_EnableIRQ>
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff ffa2 	bl	8003c1c <SysTick_Config>
 8003cd8:	4603      	mov	r3, r0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d106      	bne.n	8003d00 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003cf8:	f043 0304 	orr.w	r3, r3, #4
 8003cfc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8003cfe:	e005      	b.n	8003d0c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003d06:	f023 0304 	bic.w	r3, r3, #4
 8003d0a:	6013      	str	r3, [r2, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	e000e010 	.word	0xe000e010

08003d1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d004      	beq.n	8003d3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2280      	movs	r2, #128	; 0x80
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e00c      	b.n	8003d54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2205      	movs	r2, #5
 8003d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0201 	bic.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d6c:	4b8e      	ldr	r3, [pc, #568]	; (8003fa8 <HAL_DMA_IRQHandler+0x248>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a8e      	ldr	r2, [pc, #568]	; (8003fac <HAL_DMA_IRQHandler+0x24c>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	0a9b      	lsrs	r3, r3, #10
 8003d78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8a:	2208      	movs	r2, #8
 8003d8c:	409a      	lsls	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d01a      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d013      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0204 	bic.w	r2, r2, #4
 8003db2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db8:	2208      	movs	r2, #8
 8003dba:	409a      	lsls	r2, r3
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc4:	f043 0201 	orr.w	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd0:	4a77      	ldr	r2, [pc, #476]	; (8003fb0 <HAL_DMA_IRQHandler+0x250>)
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d012      	beq.n	8003e02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00b      	beq.n	8003e02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dee:	4a70      	ldr	r2, [pc, #448]	; (8003fb0 <HAL_DMA_IRQHandler+0x250>)
 8003df0:	409a      	lsls	r2, r3
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfa:	f043 0202 	orr.w	r2, r3, #2
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	4a6b      	ldr	r2, [pc, #428]	; (8003fb4 <HAL_DMA_IRQHandler+0x254>)
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d012      	beq.n	8003e38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00b      	beq.n	8003e38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e24:	4a63      	ldr	r2, [pc, #396]	; (8003fb4 <HAL_DMA_IRQHandler+0x254>)
 8003e26:	409a      	lsls	r2, r3
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e30:	f043 0204 	orr.w	r2, r3, #4
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3c:	2210      	movs	r2, #16
 8003e3e:	409a      	lsls	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d043      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d03c      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5a:	2210      	movs	r2, #16
 8003e5c:	409a      	lsls	r2, r3
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d018      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d108      	bne.n	8003e90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d024      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	4798      	blx	r3
 8003e8e:	e01f      	b.n	8003ed0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d01b      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	4798      	blx	r3
 8003ea0:	e016      	b.n	8003ed0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d107      	bne.n	8003ec0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0208 	bic.w	r2, r2, #8
 8003ebe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8093 	beq.w	8004008 <HAL_DMA_IRQHandler+0x2a8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 808b 	beq.w	8004008 <HAL_DMA_IRQHandler+0x2a8>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	409a      	lsls	r2, r3
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b05      	cmp	r3, #5
 8003f08:	d137      	bne.n	8003f7a <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0216 	bic.w	r2, r2, #22
 8003f18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695a      	ldr	r2, [r3, #20]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d103      	bne.n	8003f3a <HAL_DMA_IRQHandler+0x1da>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d007      	beq.n	8003f4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0208 	bic.w	r2, r2, #8
 8003f48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4e:	223f      	movs	r2, #63	; 0x3f
 8003f50:	409a      	lsls	r2, r3
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 8082 	beq.w	8004074 <HAL_DMA_IRQHandler+0x314>
        {
          hdma->XferAbortCallback(hdma);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	4798      	blx	r3
        }
        return;
 8003f78:	e07c      	b.n	8004074 <HAL_DMA_IRQHandler+0x314>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d020      	beq.n	8003fca <HAL_DMA_IRQHandler+0x26a>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d110      	bne.n	8003fb8 <HAL_DMA_IRQHandler+0x258>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d034      	beq.n	8004008 <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	4798      	blx	r3
 8003fa6:	e02f      	b.n	8004008 <HAL_DMA_IRQHandler+0x2a8>
 8003fa8:	20000014 	.word	0x20000014
 8003fac:	1b4e81b5 	.word	0x1b4e81b5
 8003fb0:	00800001 	.word	0x00800001
 8003fb4:	00800004 	.word	0x00800004
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d023      	beq.n	8004008 <HAL_DMA_IRQHandler+0x2a8>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	4798      	blx	r3
 8003fc8:	e01e      	b.n	8004008 <HAL_DMA_IRQHandler+0x2a8>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10f      	bne.n	8003ff8 <HAL_DMA_IRQHandler+0x298>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0210 	bic.w	r2, r2, #16
 8003fe6:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_DMA_IRQHandler+0x2a8>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400c:	2b00      	cmp	r3, #0
 800400e:	d032      	beq.n	8004076 <HAL_DMA_IRQHandler+0x316>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d022      	beq.n	8004062 <HAL_DMA_IRQHandler+0x302>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2205      	movs	r2, #5
 8004020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0201 	bic.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	3301      	adds	r3, #1
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	429a      	cmp	r2, r3
 800403e:	d307      	bcc.n	8004050 <HAL_DMA_IRQHandler+0x2f0>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f2      	bne.n	8004034 <HAL_DMA_IRQHandler+0x2d4>
 800404e:	e000      	b.n	8004052 <HAL_DMA_IRQHandler+0x2f2>
          break;
 8004050:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004066:	2b00      	cmp	r3, #0
 8004068:	d005      	beq.n	8004076 <HAL_DMA_IRQHandler+0x316>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	4798      	blx	r3
 8004072:	e000      	b.n	8004076 <HAL_DMA_IRQHandler+0x316>
        return;
 8004074:	bf00      	nop
    }
  }
}
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800407c:	b480      	push	{r7}
 800407e:	b089      	sub	sp, #36	; 0x24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800408e:	2300      	movs	r3, #0
 8004090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	e177      	b.n	8004388 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004098:	2201      	movs	r2, #1
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4013      	ands	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	f040 8166 	bne.w	8004382 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d003      	beq.n	80040c6 <HAL_GPIO_Init+0x4a>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b12      	cmp	r3, #18
 80040c4:	d123      	bne.n	800410e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	08da      	lsrs	r2, r3, #3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3208      	adds	r2, #8
 80040ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	220f      	movs	r2, #15
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	43db      	mvns	r3, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4013      	ands	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	08da      	lsrs	r2, r3, #3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3208      	adds	r2, #8
 8004108:	69b9      	ldr	r1, [r7, #24]
 800410a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	2203      	movs	r2, #3
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	43db      	mvns	r3, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4013      	ands	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f003 0203 	and.w	r2, r3, #3
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	4313      	orrs	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d00b      	beq.n	8004162 <HAL_GPIO_Init+0xe6>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d007      	beq.n	8004162 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004156:	2b11      	cmp	r3, #17
 8004158:	d003      	beq.n	8004162 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b12      	cmp	r3, #18
 8004160:	d130      	bne.n	80041c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	2203      	movs	r2, #3
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4013      	ands	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4313      	orrs	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004198:	2201      	movs	r2, #1
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	4013      	ands	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f003 0201 	and.w	r2, r3, #1
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	2203      	movs	r2, #3
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	43db      	mvns	r3, r3
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	4013      	ands	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80c0 	beq.w	8004382 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	4b66      	ldr	r3, [pc, #408]	; (80043a0 <HAL_GPIO_Init+0x324>)
 8004208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420a:	4a65      	ldr	r2, [pc, #404]	; (80043a0 <HAL_GPIO_Init+0x324>)
 800420c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004210:	6453      	str	r3, [r2, #68]	; 0x44
 8004212:	4b63      	ldr	r3, [pc, #396]	; (80043a0 <HAL_GPIO_Init+0x324>)
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800421e:	4a61      	ldr	r2, [pc, #388]	; (80043a4 <HAL_GPIO_Init+0x328>)
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	089b      	lsrs	r3, r3, #2
 8004224:	3302      	adds	r3, #2
 8004226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800422a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	220f      	movs	r2, #15
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4013      	ands	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a58      	ldr	r2, [pc, #352]	; (80043a8 <HAL_GPIO_Init+0x32c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d037      	beq.n	80042ba <HAL_GPIO_Init+0x23e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a57      	ldr	r2, [pc, #348]	; (80043ac <HAL_GPIO_Init+0x330>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d031      	beq.n	80042b6 <HAL_GPIO_Init+0x23a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a56      	ldr	r2, [pc, #344]	; (80043b0 <HAL_GPIO_Init+0x334>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d02b      	beq.n	80042b2 <HAL_GPIO_Init+0x236>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a55      	ldr	r2, [pc, #340]	; (80043b4 <HAL_GPIO_Init+0x338>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d025      	beq.n	80042ae <HAL_GPIO_Init+0x232>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a54      	ldr	r2, [pc, #336]	; (80043b8 <HAL_GPIO_Init+0x33c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d01f      	beq.n	80042aa <HAL_GPIO_Init+0x22e>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a53      	ldr	r2, [pc, #332]	; (80043bc <HAL_GPIO_Init+0x340>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d019      	beq.n	80042a6 <HAL_GPIO_Init+0x22a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a52      	ldr	r2, [pc, #328]	; (80043c0 <HAL_GPIO_Init+0x344>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d013      	beq.n	80042a2 <HAL_GPIO_Init+0x226>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a51      	ldr	r2, [pc, #324]	; (80043c4 <HAL_GPIO_Init+0x348>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00d      	beq.n	800429e <HAL_GPIO_Init+0x222>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a50      	ldr	r2, [pc, #320]	; (80043c8 <HAL_GPIO_Init+0x34c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d007      	beq.n	800429a <HAL_GPIO_Init+0x21e>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a4f      	ldr	r2, [pc, #316]	; (80043cc <HAL_GPIO_Init+0x350>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d101      	bne.n	8004296 <HAL_GPIO_Init+0x21a>
 8004292:	2309      	movs	r3, #9
 8004294:	e012      	b.n	80042bc <HAL_GPIO_Init+0x240>
 8004296:	230a      	movs	r3, #10
 8004298:	e010      	b.n	80042bc <HAL_GPIO_Init+0x240>
 800429a:	2308      	movs	r3, #8
 800429c:	e00e      	b.n	80042bc <HAL_GPIO_Init+0x240>
 800429e:	2307      	movs	r3, #7
 80042a0:	e00c      	b.n	80042bc <HAL_GPIO_Init+0x240>
 80042a2:	2306      	movs	r3, #6
 80042a4:	e00a      	b.n	80042bc <HAL_GPIO_Init+0x240>
 80042a6:	2305      	movs	r3, #5
 80042a8:	e008      	b.n	80042bc <HAL_GPIO_Init+0x240>
 80042aa:	2304      	movs	r3, #4
 80042ac:	e006      	b.n	80042bc <HAL_GPIO_Init+0x240>
 80042ae:	2303      	movs	r3, #3
 80042b0:	e004      	b.n	80042bc <HAL_GPIO_Init+0x240>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e002      	b.n	80042bc <HAL_GPIO_Init+0x240>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <HAL_GPIO_Init+0x240>
 80042ba:	2300      	movs	r3, #0
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	f002 0203 	and.w	r2, r2, #3
 80042c2:	0092      	lsls	r2, r2, #2
 80042c4:	4093      	lsls	r3, r2
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042cc:	4935      	ldr	r1, [pc, #212]	; (80043a4 <HAL_GPIO_Init+0x328>)
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	089b      	lsrs	r3, r3, #2
 80042d2:	3302      	adds	r3, #2
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042da:	4b3d      	ldr	r3, [pc, #244]	; (80043d0 <HAL_GPIO_Init+0x354>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	43db      	mvns	r3, r3
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	4013      	ands	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042fe:	4a34      	ldr	r2, [pc, #208]	; (80043d0 <HAL_GPIO_Init+0x354>)
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004304:	4b32      	ldr	r3, [pc, #200]	; (80043d0 <HAL_GPIO_Init+0x354>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	43db      	mvns	r3, r3
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	4013      	ands	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004328:	4a29      	ldr	r2, [pc, #164]	; (80043d0 <HAL_GPIO_Init+0x354>)
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800432e:	4b28      	ldr	r3, [pc, #160]	; (80043d0 <HAL_GPIO_Init+0x354>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	43db      	mvns	r3, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4013      	ands	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004352:	4a1f      	ldr	r2, [pc, #124]	; (80043d0 <HAL_GPIO_Init+0x354>)
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004358:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <HAL_GPIO_Init+0x354>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	43db      	mvns	r3, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4013      	ands	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800437c:	4a14      	ldr	r2, [pc, #80]	; (80043d0 <HAL_GPIO_Init+0x354>)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	3301      	adds	r3, #1
 8004386:	61fb      	str	r3, [r7, #28]
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	2b0f      	cmp	r3, #15
 800438c:	f67f ae84 	bls.w	8004098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004390:	bf00      	nop
 8004392:	bf00      	nop
 8004394:	3724      	adds	r7, #36	; 0x24
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40023800 	.word	0x40023800
 80043a4:	40013800 	.word	0x40013800
 80043a8:	40020000 	.word	0x40020000
 80043ac:	40020400 	.word	0x40020400
 80043b0:	40020800 	.word	0x40020800
 80043b4:	40020c00 	.word	0x40020c00
 80043b8:	40021000 	.word	0x40021000
 80043bc:	40021400 	.word	0x40021400
 80043c0:	40021800 	.word	0x40021800
 80043c4:	40021c00 	.word	0x40021c00
 80043c8:	40022000 	.word	0x40022000
 80043cc:	40022400 	.word	0x40022400
 80043d0:	40013c00 	.word	0x40013c00

080043d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	807b      	strh	r3, [r7, #2]
 80043e0:	4613      	mov	r3, r2
 80043e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043e4:	787b      	ldrb	r3, [r7, #1]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043ea:	887a      	ldrh	r2, [r7, #2]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043f0:	e003      	b.n	80043fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043f2:	887b      	ldrh	r3, [r7, #2]
 80043f4:	041a      	lsls	r2, r3, #16
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	619a      	str	r2, [r3, #24]
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
	...

08004408 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e0c9      	b.n	80045b6 <HAL_I2C_Init+0x1ae>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f005 fcf0 	bl	8009e1c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2224      	movs	r2, #36	; 0x24
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0201 	bic.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004454:	f001 fae6 	bl	8005a24 <HAL_RCC_GetPCLK1Freq>
 8004458:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	4a58      	ldr	r2, [pc, #352]	; (80045c0 <HAL_I2C_Init+0x1b8>)
 800445e:	fba2 2303 	umull	r2, r3, r2, r3
 8004462:	0c9b      	lsrs	r3, r3, #18
 8004464:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4a54      	ldr	r2, [pc, #336]	; (80045c4 <HAL_I2C_Init+0x1bc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d802      	bhi.n	800447e <HAL_I2C_Init+0x76>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3301      	adds	r3, #1
 800447c:	e009      	b.n	8004492 <HAL_I2C_Init+0x8a>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004484:	fb02 f303 	mul.w	r3, r2, r3
 8004488:	4a4f      	ldr	r2, [pc, #316]	; (80045c8 <HAL_I2C_Init+0x1c0>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	099b      	lsrs	r3, r3, #6
 8004490:	3301      	adds	r3, #1
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6812      	ldr	r2, [r2, #0]
 8004496:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	4a49      	ldr	r2, [pc, #292]	; (80045c4 <HAL_I2C_Init+0x1bc>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d813      	bhi.n	80044ca <HAL_I2C_Init+0xc2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80044ae:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d006      	beq.n	80044c6 <HAL_I2C_Init+0xbe>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c4:	e045      	b.n	8004552 <HAL_I2C_Init+0x14a>
 80044c6:	2304      	movs	r3, #4
 80044c8:	e043      	b.n	8004552 <HAL_I2C_Init+0x14a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10f      	bne.n	80044f2 <HAL_I2C_Init+0xea>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	4413      	add	r3, r2
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	bf0c      	ite	eq
 80044ea:	2301      	moveq	r3, #1
 80044ec:	2300      	movne	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	e010      	b.n	8004514 <HAL_I2C_Init+0x10c>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	009a      	lsls	r2, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	fbb2 f3f3 	udiv	r3, r2, r3
 8004506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800450a:	2b00      	cmp	r3, #0
 800450c:	bf0c      	ite	eq
 800450e:	2301      	moveq	r3, #1
 8004510:	2300      	movne	r3, #0
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <HAL_I2C_Init+0x114>
 8004518:	2301      	movs	r3, #1
 800451a:	e01a      	b.n	8004552 <HAL_I2C_Init+0x14a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10a      	bne.n	800453a <HAL_I2C_Init+0x132>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	4413      	add	r3, r2
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004538:	e00b      	b.n	8004552 <HAL_I2C_Init+0x14a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	009a      	lsls	r2, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	fbb2 f3f3 	udiv	r3, r2, r3
 800454e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6812      	ldr	r2, [r2, #0]
 8004556:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69d9      	ldr	r1, [r3, #28]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1a      	ldr	r2, [r3, #32]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6919      	ldr	r1, [r3, #16]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6959      	ldr	r1, [r3, #20]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699a      	ldr	r2, [r3, #24]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	431bde83 	.word	0x431bde83
 80045c4:	000186a0 	.word	0x000186a0
 80045c8:	10624dd3 	.word	0x10624dd3

080045cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	607a      	str	r2, [r7, #4]
 80045d6:	461a      	mov	r2, r3
 80045d8:	460b      	mov	r3, r1
 80045da:	817b      	strh	r3, [r7, #10]
 80045dc:	4613      	mov	r3, r2
 80045de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045e4:	f7ff fa46 	bl	8003a74 <HAL_GetTick>
 80045e8:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b20      	cmp	r3, #32
 80045f4:	f040 80ee 	bne.w	80047d4 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	2319      	movs	r3, #25
 80045fe:	2201      	movs	r2, #1
 8004600:	4977      	ldr	r1, [pc, #476]	; (80047e0 <HAL_I2C_Master_Transmit+0x214>)
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 fc6c 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 800460e:	2302      	movs	r3, #2
 8004610:	e0e1      	b.n	80047d6 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_I2C_Master_Transmit+0x54>
 800461c:	2302      	movs	r3, #2
 800461e:	e0da      	b.n	80047d6 <HAL_I2C_Master_Transmit+0x20a>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b01      	cmp	r3, #1
 8004634:	d007      	beq.n	8004646 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 0201 	orr.w	r2, r2, #1
 8004644:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004654:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2221      	movs	r2, #33	; 0x21
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2210      	movs	r2, #16
 8004662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	893a      	ldrh	r2, [r7, #8]
 8004676:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4a5a      	ldr	r2, [pc, #360]	; (80047e4 <HAL_I2C_Master_Transmit+0x218>)
 800467c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004688:	8979      	ldrh	r1, [r7, #10]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	6a3a      	ldr	r2, [r7, #32]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 fadc 	bl	8004c4c <I2C_MasterRequestWrite>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00f      	beq.n	80046ba <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d105      	bne.n	80046ae <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR; //Error is happening here -Steven
 80046aa:	2301      	movs	r3, #1
 80046ac:	e093      	b.n	80047d6 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e08d      	b.n	80047d6 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 80046d0:	e066      	b.n	80047a0 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	6a39      	ldr	r1, [r7, #32]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 fcc1 	bl	800505e <I2C_WaitOnTXEFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00f      	beq.n	8004702 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d109      	bne.n	80046fe <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e06b      	b.n	80047d6 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e069      	b.n	80047d6 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	1c59      	adds	r1, r3, #1
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	6251      	str	r1, [r2, #36]	; 0x24
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b04      	cmp	r3, #4
 800473a:	d119      	bne.n	8004770 <HAL_I2C_Master_Transmit+0x1a4>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004740:	2b00      	cmp	r3, #0
 8004742:	d015      	beq.n	8004770 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	1c59      	adds	r1, r3, #1
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	6251      	str	r1, [r2, #36]	; 0x24
 800474e:	781a      	ldrb	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475a:	b29b      	uxth	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	6a39      	ldr	r1, [r7, #32]
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 fcaf 	bl	80050d8 <I2C_WaitOnBTFFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00f      	beq.n	80047a0 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	2b04      	cmp	r3, #4
 8004786:	d109      	bne.n	800479c <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004796:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e01c      	b.n	80047d6 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e01a      	b.n	80047d6 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d194      	bne.n	80046d2 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047d0:	2300      	movs	r3, #0
 80047d2:	e000      	b.n	80047d6 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80047d4:	2302      	movs	r3, #2
  }
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	00100002 	.word	0x00100002
 80047e4:	ffff0000 	.word	0xffff0000

080047e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08c      	sub	sp, #48	; 0x30
 80047ec:	af02      	add	r7, sp, #8
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	607a      	str	r2, [r7, #4]
 80047f2:	461a      	mov	r2, r3
 80047f4:	460b      	mov	r3, r1
 80047f6:	817b      	strh	r3, [r7, #10]
 80047f8:	4613      	mov	r3, r2
 80047fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004800:	f7ff f938 	bl	8003a74 <HAL_GetTick>
 8004804:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b20      	cmp	r3, #32
 8004810:	f040 8215 	bne.w	8004c3e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	2319      	movs	r3, #25
 800481a:	2201      	movs	r2, #1
 800481c:	4985      	ldr	r1, [pc, #532]	; (8004a34 <HAL_I2C_Master_Receive+0x24c>)
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 fb5e 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800482a:	2302      	movs	r3, #2
 800482c:	e208      	b.n	8004c40 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_I2C_Master_Receive+0x54>
 8004838:	2302      	movs	r3, #2
 800483a:	e201      	b.n	8004c40 <HAL_I2C_Master_Receive+0x458>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b01      	cmp	r3, #1
 8004850:	d007      	beq.n	8004862 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0201 	orr.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004870:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2222      	movs	r2, #34	; 0x22
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2210      	movs	r2, #16
 800487e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	893a      	ldrh	r2, [r7, #8]
 8004892:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4a68      	ldr	r2, [pc, #416]	; (8004a38 <HAL_I2C_Master_Receive+0x250>)
 8004898:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048a4:	8979      	ldrh	r1, [r7, #10]
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fa50 	bl	8004d50 <I2C_MasterRequestRead>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00f      	beq.n	80048d6 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d105      	bne.n	80048ca <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e1ba      	b.n	8004c40 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e1b4      	b.n	8004c40 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d113      	bne.n	8004906 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048de:	2300      	movs	r3, #0
 80048e0:	623b      	str	r3, [r7, #32]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	623b      	str	r3, [r7, #32]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	623b      	str	r3, [r7, #32]
 80048f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	e188      	b.n	8004c18 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490a:	2b01      	cmp	r3, #1
 800490c:	d11b      	bne.n	8004946 <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	61fb      	str	r3, [r7, #28]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	61fb      	str	r3, [r7, #28]
 8004932:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	e168      	b.n	8004c18 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494a:	2b02      	cmp	r3, #2
 800494c:	d11b      	bne.n	8004986 <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800495c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800496c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800496e:	2300      	movs	r3, #0
 8004970:	61bb      	str	r3, [r7, #24]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	e148      	b.n	8004c18 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004994:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 80049ac:	e134      	b.n	8004c18 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	f200 80eb 	bhi.w	8004b8e <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d127      	bne.n	8004a10 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80049c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fbc4 	bl	8005152 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d007      	beq.n	80049e0 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	d101      	bne.n	80049dc <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e131      	b.n	8004c40 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e12f      	b.n	8004c40 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6918      	ldr	r0, [r3, #16]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	1c59      	adds	r1, r3, #1
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	6251      	str	r1, [r2, #36]	; 0x24
 80049f0:	b2c2      	uxtb	r2, r0
 80049f2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a0e:	e103      	b.n	8004c18 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d14a      	bne.n	8004aae <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	2200      	movs	r2, #0
 8004a20:	4906      	ldr	r1, [pc, #24]	; (8004a3c <HAL_I2C_Master_Receive+0x254>)
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 fa5c 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d008      	beq.n	8004a40 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e106      	b.n	8004c40 <HAL_I2C_Master_Receive+0x458>
 8004a32:	bf00      	nop
 8004a34:	00100002 	.word	0x00100002
 8004a38:	ffff0000 	.word	0xffff0000
 8004a3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6918      	ldr	r0, [r3, #16]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	1c59      	adds	r1, r3, #1
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	6251      	str	r1, [r2, #36]	; 0x24
 8004a60:	b2c2      	uxtb	r2, r0
 8004a62:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6918      	ldr	r0, [r3, #16]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	1c59      	adds	r1, r3, #1
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	6251      	str	r1, [r2, #36]	; 0x24
 8004a8e:	b2c2      	uxtb	r2, r0
 8004a90:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004aac:	e0b4      	b.n	8004c18 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	4964      	ldr	r1, [pc, #400]	; (8004c48 <HAL_I2C_Master_Receive+0x460>)
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 fa11 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e0bb      	b.n	8004c40 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6918      	ldr	r0, [r3, #16]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	1c59      	adds	r1, r3, #1
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	6251      	str	r1, [r2, #36]	; 0x24
 8004ae8:	b2c2      	uxtb	r2, r0
 8004aea:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	494e      	ldr	r1, [pc, #312]	; (8004c48 <HAL_I2C_Master_Receive+0x460>)
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 f9e5 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e08f      	b.n	8004c40 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6918      	ldr	r0, [r3, #16]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	1c59      	adds	r1, r3, #1
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	6251      	str	r1, [r2, #36]	; 0x24
 8004b40:	b2c2      	uxtb	r2, r0
 8004b42:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6918      	ldr	r0, [r3, #16]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	1c59      	adds	r1, r3, #1
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	6251      	str	r1, [r2, #36]	; 0x24
 8004b6e:	b2c2      	uxtb	r2, r0
 8004b70:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b8c:	e044      	b.n	8004c18 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8004b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 fadd 	bl	8005152 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d007      	beq.n	8004bae <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	2b20      	cmp	r3, #32
 8004ba4:	d101      	bne.n	8004baa <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e04a      	b.n	8004c40 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e048      	b.n	8004c40 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6918      	ldr	r0, [r3, #16]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	1c59      	adds	r1, r3, #1
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	6251      	str	r1, [r2, #36]	; 0x24
 8004bbe:	b2c2      	uxtb	r2, r0
 8004bc0:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d116      	bne.n	8004c18 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6918      	ldr	r0, [r3, #16]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	1c59      	adds	r1, r3, #1
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	6251      	str	r1, [r2, #36]	; 0x24
 8004bfa:	b2c2      	uxtb	r2, r0
 8004bfc:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f47f aec6 	bne.w	80049ae <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e000      	b.n	8004c40 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004c3e:	2302      	movs	r3, #2
  }
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3728      	adds	r7, #40	; 0x28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	00010004 	.word	0x00010004

08004c4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	607a      	str	r2, [r7, #4]
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d006      	beq.n	8004c76 <I2C_MasterRequestWrite+0x2a>
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d003      	beq.n	8004c76 <I2C_MasterRequestWrite+0x2a>
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c74:	d108      	bne.n	8004c88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	e00b      	b.n	8004ca0 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	2b12      	cmp	r3, #18
 8004c8e:	d107      	bne.n	8004ca0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c9e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 f917 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e041      	b.n	8004d40 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cc4:	d108      	bne.n	8004cd8 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cc6:	897b      	ldrh	r3, [r7, #10]
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cd4:	611a      	str	r2, [r3, #16]
 8004cd6:	e021      	b.n	8004d1c <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cd8:	897b      	ldrh	r3, [r7, #10]
 8004cda:	11db      	asrs	r3, r3, #7
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	f003 0306 	and.w	r3, r3, #6
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	f063 030f 	orn	r3, r3, #15
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	4914      	ldr	r1, [pc, #80]	; (8004d48 <I2C_MasterRequestWrite+0xfc>)
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f943 	bl	8004f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d007      	beq.n	8004d12 <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d101      	bne.n	8004d0e <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e018      	b.n	8004d40 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e016      	b.n	8004d40 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d12:	897b      	ldrh	r3, [r7, #10]
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	490a      	ldr	r1, [pc, #40]	; (8004d4c <I2C_MasterRequestWrite+0x100>)
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 f92d 	bl	8004f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d101      	bne.n	8004d3a <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e002      	b.n	8004d40 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e000      	b.n	8004d40 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	00010008 	.word	0x00010008
 8004d4c:	00010002 	.word	0x00010002

08004d50 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	607a      	str	r2, [r7, #4]
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d74:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d006      	beq.n	8004d8a <I2C_MasterRequestRead+0x3a>
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d003      	beq.n	8004d8a <I2C_MasterRequestRead+0x3a>
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d88:	d108      	bne.n	8004d9c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	e00b      	b.n	8004db4 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da0:	2b11      	cmp	r3, #17
 8004da2:	d107      	bne.n	8004db4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004db2:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f88d 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e07f      	b.n	8004ed0 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dd8:	d108      	bne.n	8004dec <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004dda:	897b      	ldrh	r3, [r7, #10]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	f043 0301 	orr.w	r3, r3, #1
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	611a      	str	r2, [r3, #16]
 8004dea:	e05f      	b.n	8004eac <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004dec:	897b      	ldrh	r3, [r7, #10]
 8004dee:	11db      	asrs	r3, r3, #7
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	f003 0306 	and.w	r3, r3, #6
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	f063 030f 	orn	r3, r3, #15
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	4933      	ldr	r1, [pc, #204]	; (8004ed8 <I2C_MasterRequestRead+0x188>)
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 f8b9 	bl	8004f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d007      	beq.n	8004e26 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d101      	bne.n	8004e22 <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e056      	b.n	8004ed0 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e054      	b.n	8004ed0 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e26:	897b      	ldrh	r3, [r7, #10]
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	4929      	ldr	r1, [pc, #164]	; (8004edc <I2C_MasterRequestRead+0x18c>)
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 f8a3 	bl	8004f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d007      	beq.n	8004e52 <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d101      	bne.n	8004e4e <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e040      	b.n	8004ed0 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e03e      	b.n	8004ed0 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e52:	2300      	movs	r3, #0
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e76:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f82b 	bl	8004ee0 <I2C_WaitOnFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e01d      	b.n	8004ed0 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004e94:	897b      	ldrh	r3, [r7, #10]
 8004e96:	11db      	asrs	r3, r3, #7
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f003 0306 	and.w	r3, r3, #6
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f063 030e 	orn	r3, r3, #14
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	490a      	ldr	r1, [pc, #40]	; (8004edc <I2C_MasterRequestRead+0x18c>)
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 f865 	bl	8004f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d007      	beq.n	8004ece <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d101      	bne.n	8004eca <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e002      	b.n	8004ed0 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e000      	b.n	8004ed0 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	00010008 	.word	0x00010008
 8004edc:	00010002 	.word	0x00010002

08004ee0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	4613      	mov	r3, r2
 8004eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8004ef0:	e01f      	b.n	8004f32 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef8:	d01b      	beq.n	8004f32 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d007      	beq.n	8004f10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f00:	f7fe fdb8 	bl	8003a74 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d210      	bcs.n	8004f32 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e023      	b.n	8004f7a <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	0c1b      	lsrs	r3, r3, #16
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d10d      	bne.n	8004f58 <I2C_WaitOnFlagUntilTimeout+0x78>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	43da      	mvns	r2, r3
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	4013      	ands	r3, r2
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	bf0c      	ite	eq
 8004f4e:	2301      	moveq	r3, #1
 8004f50:	2300      	movne	r3, #0
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	461a      	mov	r2, r3
 8004f56:	e00c      	b.n	8004f72 <I2C_WaitOnFlagUntilTimeout+0x92>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	43da      	mvns	r2, r3
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4013      	ands	r3, r2
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	bf0c      	ite	eq
 8004f6a:	2301      	moveq	r3, #1
 8004f6c:	2300      	movne	r3, #0
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	79fb      	ldrb	r3, [r7, #7]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d0bc      	beq.n	8004ef2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
 8004f8e:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f90:	e040      	b.n	8005014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa0:	d11c      	bne.n	8004fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fba:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e03c      	b.n	8005056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe2:	d017      	beq.n	8005014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8004fea:	f7fe fd43 	bl	8003a74 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d20c      	bcs.n	8005014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e020      	b.n	8005056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	0c1b      	lsrs	r3, r3, #16
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b01      	cmp	r3, #1
 800501c:	d10c      	bne.n	8005038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	43da      	mvns	r2, r3
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	4013      	ands	r3, r2
 800502a:	b29b      	uxth	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	bf14      	ite	ne
 8005030:	2301      	movne	r3, #1
 8005032:	2300      	moveq	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	e00b      	b.n	8005050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	43da      	mvns	r2, r3
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4013      	ands	r3, r2
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	bf14      	ite	ne
 800504a:	2301      	movne	r3, #1
 800504c:	2300      	moveq	r3, #0
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d19e      	bne.n	8004f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800506a:	e029      	b.n	80050c0 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 f8ba 	bl	80051e6 <I2C_IsAcknowledgeFailed>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e029      	b.n	80050d0 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005082:	d01d      	beq.n	80050c0 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800508a:	f7fe fcf3 	bl	8003a74 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	429a      	cmp	r2, r3
 8005098:	d212      	bcs.n	80050c0 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f043 0220 	orr.w	r2, r3, #32
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e007      	b.n	80050d0 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ca:	2b80      	cmp	r3, #128	; 0x80
 80050cc:	d1ce      	bne.n	800506c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050e4:	e029      	b.n	800513a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 f87d 	bl	80051e6 <I2C_IsAcknowledgeFailed>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e029      	b.n	800514a <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fc:	d01d      	beq.n	800513a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005104:	f7fe fcb6 	bl	8003a74 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	429a      	cmp	r2, r3
 8005112:	d212      	bcs.n	800513a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	f043 0220 	orr.w	r2, r3, #32
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2220      	movs	r2, #32
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e007      	b.n	800514a <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b04      	cmp	r3, #4
 8005146:	d1ce      	bne.n	80050e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800515e:	e036      	b.n	80051ce <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b10      	cmp	r3, #16
 800516c:	d114      	bne.n	8005198 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f06f 0210 	mvn.w	r2, #16
 8005176:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e022      	b.n	80051de <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d007      	beq.n	80051ae <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800519e:	f7fe fc69 	bl	8003a74 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d20f      	bcs.n	80051ce <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f043 0220 	orr.w	r2, r3, #32
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e007      	b.n	80051de <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d8:	2b40      	cmp	r3, #64	; 0x40
 80051da:	d1c1      	bne.n	8005160 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051fc:	d114      	bne.n	8005228 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005206:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2204      	movs	r2, #4
 800520c:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e000      	b.n	800522a <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
	...

08005238 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08e      	sub	sp, #56	; 0x38
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8005240:	2300      	movs	r3, #0
 8005242:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	d075      	beq.n	800533c <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005250:	4b92      	ldr	r3, [pc, #584]	; (800549c <HAL_RCC_OscConfig+0x264>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 030c 	and.w	r3, r3, #12
 8005258:	2b04      	cmp	r3, #4
 800525a:	d00c      	beq.n	8005276 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800525c:	4b8f      	ldr	r3, [pc, #572]	; (800549c <HAL_RCC_OscConfig+0x264>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005264:	2b08      	cmp	r3, #8
 8005266:	d112      	bne.n	800528e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005268:	4b8c      	ldr	r3, [pc, #560]	; (800549c <HAL_RCC_OscConfig+0x264>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005274:	d10b      	bne.n	800528e <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005276:	4b89      	ldr	r3, [pc, #548]	; (800549c <HAL_RCC_OscConfig+0x264>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d05b      	beq.n	800533a <HAL_RCC_OscConfig+0x102>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d157      	bne.n	800533a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e222      	b.n	80056d4 <HAL_RCC_OscConfig+0x49c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005296:	d106      	bne.n	80052a6 <HAL_RCC_OscConfig+0x6e>
 8005298:	4b80      	ldr	r3, [pc, #512]	; (800549c <HAL_RCC_OscConfig+0x264>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a7f      	ldr	r2, [pc, #508]	; (800549c <HAL_RCC_OscConfig+0x264>)
 800529e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	e01d      	b.n	80052e2 <HAL_RCC_OscConfig+0xaa>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052ae:	d10c      	bne.n	80052ca <HAL_RCC_OscConfig+0x92>
 80052b0:	4b7a      	ldr	r3, [pc, #488]	; (800549c <HAL_RCC_OscConfig+0x264>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a79      	ldr	r2, [pc, #484]	; (800549c <HAL_RCC_OscConfig+0x264>)
 80052b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	4b77      	ldr	r3, [pc, #476]	; (800549c <HAL_RCC_OscConfig+0x264>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a76      	ldr	r2, [pc, #472]	; (800549c <HAL_RCC_OscConfig+0x264>)
 80052c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	e00b      	b.n	80052e2 <HAL_RCC_OscConfig+0xaa>
 80052ca:	4b74      	ldr	r3, [pc, #464]	; (800549c <HAL_RCC_OscConfig+0x264>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a73      	ldr	r2, [pc, #460]	; (800549c <HAL_RCC_OscConfig+0x264>)
 80052d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	4b71      	ldr	r3, [pc, #452]	; (800549c <HAL_RCC_OscConfig+0x264>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a70      	ldr	r2, [pc, #448]	; (800549c <HAL_RCC_OscConfig+0x264>)
 80052dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052e0:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d013      	beq.n	8005312 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ea:	f7fe fbc3 	bl	8003a74 <HAL_GetTick>
 80052ee:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052f2:	f7fe fbbf 	bl	8003a74 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b64      	cmp	r3, #100	; 0x64
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e1e7      	b.n	80056d4 <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005304:	4b65      	ldr	r3, [pc, #404]	; (800549c <HAL_RCC_OscConfig+0x264>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCC_OscConfig+0xba>
 8005310:	e014      	b.n	800533c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005312:	f7fe fbaf 	bl	8003a74 <HAL_GetTick>
 8005316:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005318:	e008      	b.n	800532c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800531a:	f7fe fbab 	bl	8003a74 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b64      	cmp	r3, #100	; 0x64
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e1d3      	b.n	80056d4 <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800532c:	4b5b      	ldr	r3, [pc, #364]	; (800549c <HAL_RCC_OscConfig+0x264>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1f0      	bne.n	800531a <HAL_RCC_OscConfig+0xe2>
 8005338:	e000      	b.n	800533c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800533a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d077      	beq.n	8005438 <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005348:	4b54      	ldr	r3, [pc, #336]	; (800549c <HAL_RCC_OscConfig+0x264>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f003 030c 	and.w	r3, r3, #12
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00b      	beq.n	800536c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005354:	4b51      	ldr	r3, [pc, #324]	; (800549c <HAL_RCC_OscConfig+0x264>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800535c:	2b08      	cmp	r3, #8
 800535e:	d126      	bne.n	80053ae <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005360:	4b4e      	ldr	r3, [pc, #312]	; (800549c <HAL_RCC_OscConfig+0x264>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d120      	bne.n	80053ae <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800536c:	4b4b      	ldr	r3, [pc, #300]	; (800549c <HAL_RCC_OscConfig+0x264>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d005      	beq.n	8005384 <HAL_RCC_OscConfig+0x14c>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d001      	beq.n	8005384 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e1a7      	b.n	80056d4 <HAL_RCC_OscConfig+0x49c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005384:	4b45      	ldr	r3, [pc, #276]	; (800549c <HAL_RCC_OscConfig+0x264>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6919      	ldr	r1, [r3, #16]
 8005390:	23f8      	movs	r3, #248	; 0xf8
 8005392:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005396:	fa93 f3a3 	rbit	r3, r3
 800539a:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800539c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539e:	fab3 f383 	clz	r3, r3
 80053a2:	fa01 f303 	lsl.w	r3, r1, r3
 80053a6:	493d      	ldr	r1, [pc, #244]	; (800549c <HAL_RCC_OscConfig+0x264>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ac:	e044      	b.n	8005438 <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d02a      	beq.n	800540c <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053b6:	4b3a      	ldr	r3, [pc, #232]	; (80054a0 <HAL_RCC_OscConfig+0x268>)
 80053b8:	2201      	movs	r2, #1
 80053ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053bc:	f7fe fb5a 	bl	8003a74 <HAL_GetTick>
 80053c0:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053c4:	f7fe fb56 	bl	8003a74 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e17e      	b.n	80056d4 <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d6:	4b31      	ldr	r3, [pc, #196]	; (800549c <HAL_RCC_OscConfig+0x264>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0f0      	beq.n	80053c4 <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e2:	4b2e      	ldr	r3, [pc, #184]	; (800549c <HAL_RCC_OscConfig+0x264>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6919      	ldr	r1, [r3, #16]
 80053ee:	23f8      	movs	r3, #248	; 0xf8
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	fa93 f3a3 	rbit	r3, r3
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	fab3 f383 	clz	r3, r3
 8005400:	fa01 f303 	lsl.w	r3, r1, r3
 8005404:	4925      	ldr	r1, [pc, #148]	; (800549c <HAL_RCC_OscConfig+0x264>)
 8005406:	4313      	orrs	r3, r2
 8005408:	600b      	str	r3, [r1, #0]
 800540a:	e015      	b.n	8005438 <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800540c:	4b24      	ldr	r3, [pc, #144]	; (80054a0 <HAL_RCC_OscConfig+0x268>)
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005412:	f7fe fb2f 	bl	8003a74 <HAL_GetTick>
 8005416:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005418:	e008      	b.n	800542c <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800541a:	f7fe fb2b 	bl	8003a74 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e153      	b.n	80056d4 <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542c:	4b1b      	ldr	r3, [pc, #108]	; (800549c <HAL_RCC_OscConfig+0x264>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1f0      	bne.n	800541a <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d037      	beq.n	80054b4 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d016      	beq.n	800547a <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800544c:	4b15      	ldr	r3, [pc, #84]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 800544e:	2201      	movs	r2, #1
 8005450:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005452:	f7fe fb0f 	bl	8003a74 <HAL_GetTick>
 8005456:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800545a:	f7fe fb0b 	bl	8003a74 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e133      	b.n	80056d4 <HAL_RCC_OscConfig+0x49c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800546c:	4b0b      	ldr	r3, [pc, #44]	; (800549c <HAL_RCC_OscConfig+0x264>)
 800546e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0f0      	beq.n	800545a <HAL_RCC_OscConfig+0x222>
 8005478:	e01c      	b.n	80054b4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800547a:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <HAL_RCC_OscConfig+0x26c>)
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005480:	f7fe faf8 	bl	8003a74 <HAL_GetTick>
 8005484:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005486:	e00f      	b.n	80054a8 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005488:	f7fe faf4 	bl	8003a74 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d908      	bls.n	80054a8 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e11c      	b.n	80056d4 <HAL_RCC_OscConfig+0x49c>
 800549a:	bf00      	nop
 800549c:	40023800 	.word	0x40023800
 80054a0:	42470000 	.word	0x42470000
 80054a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054a8:	4b8c      	ldr	r3, [pc, #560]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 80054aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e9      	bne.n	8005488 <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d07d      	beq.n	80055bc <HAL_RCC_OscConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054c0:	2300      	movs	r3, #0
 80054c2:	60bb      	str	r3, [r7, #8]
 80054c4:	4b85      	ldr	r3, [pc, #532]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 80054c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c8:	4a84      	ldr	r2, [pc, #528]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 80054ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ce:	6413      	str	r3, [r2, #64]	; 0x40
 80054d0:	4b82      	ldr	r3, [pc, #520]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 80054d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d8:	60bb      	str	r3, [r7, #8]
 80054da:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80054dc:	4b80      	ldr	r3, [pc, #512]	; (80056e0 <HAL_RCC_OscConfig+0x4a8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a7f      	ldr	r2, [pc, #508]	; (80056e0 <HAL_RCC_OscConfig+0x4a8>)
 80054e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e6:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 80054e8:	f7fe fac4 	bl	8003a74 <HAL_GetTick>
 80054ec:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x2ca>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054f0:	f7fe fac0 	bl	8003a74 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x2ca>
      {
        return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e0e8      	b.n	80056d4 <HAL_RCC_OscConfig+0x49c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005502:	4b77      	ldr	r3, [pc, #476]	; (80056e0 <HAL_RCC_OscConfig+0x4a8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0f0      	beq.n	80054f0 <HAL_RCC_OscConfig+0x2b8>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d106      	bne.n	8005524 <HAL_RCC_OscConfig+0x2ec>
 8005516:	4b71      	ldr	r3, [pc, #452]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 8005518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551a:	4a70      	ldr	r2, [pc, #448]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 800551c:	f043 0301 	orr.w	r3, r3, #1
 8005520:	6713      	str	r3, [r2, #112]	; 0x70
 8005522:	e01c      	b.n	800555e <HAL_RCC_OscConfig+0x326>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	2b05      	cmp	r3, #5
 800552a:	d10c      	bne.n	8005546 <HAL_RCC_OscConfig+0x30e>
 800552c:	4b6b      	ldr	r3, [pc, #428]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 800552e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005530:	4a6a      	ldr	r2, [pc, #424]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 8005532:	f043 0304 	orr.w	r3, r3, #4
 8005536:	6713      	str	r3, [r2, #112]	; 0x70
 8005538:	4b68      	ldr	r3, [pc, #416]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 800553a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553c:	4a67      	ldr	r2, [pc, #412]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 800553e:	f043 0301 	orr.w	r3, r3, #1
 8005542:	6713      	str	r3, [r2, #112]	; 0x70
 8005544:	e00b      	b.n	800555e <HAL_RCC_OscConfig+0x326>
 8005546:	4b65      	ldr	r3, [pc, #404]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 8005548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554a:	4a64      	ldr	r2, [pc, #400]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 800554c:	f023 0301 	bic.w	r3, r3, #1
 8005550:	6713      	str	r3, [r2, #112]	; 0x70
 8005552:	4b62      	ldr	r3, [pc, #392]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 8005554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005556:	4a61      	ldr	r2, [pc, #388]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 8005558:	f023 0304 	bic.w	r3, r3, #4
 800555c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d015      	beq.n	8005592 <HAL_RCC_OscConfig+0x35a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005566:	f7fe fa85 	bl	8003a74 <HAL_GetTick>
 800556a:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800556c:	e00a      	b.n	8005584 <HAL_RCC_OscConfig+0x34c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800556e:	f7fe fa81 	bl	8003a74 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	f241 3288 	movw	r2, #5000	; 0x1388
 800557c:	4293      	cmp	r3, r2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x34c>
        {
          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e0a7      	b.n	80056d4 <HAL_RCC_OscConfig+0x49c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005584:	4b55      	ldr	r3, [pc, #340]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 8005586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0ee      	beq.n	800556e <HAL_RCC_OscConfig+0x336>
 8005590:	e014      	b.n	80055bc <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005592:	f7fe fa6f 	bl	8003a74 <HAL_GetTick>
 8005596:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005598:	e00a      	b.n	80055b0 <HAL_RCC_OscConfig+0x378>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800559a:	f7fe fa6b 	bl	8003a74 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d901      	bls.n	80055b0 <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e091      	b.n	80056d4 <HAL_RCC_OscConfig+0x49c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055b0:	4b4a      	ldr	r3, [pc, #296]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 80055b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1ee      	bne.n	800559a <HAL_RCC_OscConfig+0x362>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 8086 	beq.w	80056d2 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055c6:	4b45      	ldr	r3, [pc, #276]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 030c 	and.w	r3, r3, #12
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d07d      	beq.n	80056ce <HAL_RCC_OscConfig+0x496>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d162      	bne.n	80056a0 <HAL_RCC_OscConfig+0x468>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055da:	4b42      	ldr	r3, [pc, #264]	; (80056e4 <HAL_RCC_OscConfig+0x4ac>)
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e0:	f7fe fa48 	bl	8003a74 <HAL_GetTick>
 80055e4:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_OscConfig+0x3c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055e8:	f7fe fa44 	bl	8003a74 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x3c2>
          {
            return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e06c      	b.n	80056d4 <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055fa:	4b38      	ldr	r3, [pc, #224]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1f0      	bne.n	80055e8 <HAL_RCC_OscConfig+0x3b0>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69da      	ldr	r2, [r3, #28]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005614:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	fa93 f3a3 	rbit	r3, r3
 8005620:	60fb      	str	r3, [r7, #12]
  return(result);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	fab3 f383 	clz	r3, r3
 8005628:	fa01 f303 	lsl.w	r3, r1, r3
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005632:	085b      	lsrs	r3, r3, #1
 8005634:	1e59      	subs	r1, r3, #1
 8005636:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800563a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	fa93 f3a3 	rbit	r3, r3
 8005642:	617b      	str	r3, [r7, #20]
  return(result);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	fab3 f383 	clz	r3, r3
 800564a:	fa01 f303 	lsl.w	r3, r1, r3
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005654:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	fa93 f3a3 	rbit	r3, r3
 8005660:	61fb      	str	r3, [r7, #28]
  return(result);
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	fab3 f383 	clz	r3, r3
 8005668:	fa01 f303 	lsl.w	r3, r1, r3
 800566c:	491b      	ldr	r1, [pc, #108]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 800566e:	4313      	orrs	r3, r2
 8005670:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005672:	4b1c      	ldr	r3, [pc, #112]	; (80056e4 <HAL_RCC_OscConfig+0x4ac>)
 8005674:	2201      	movs	r2, #1
 8005676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005678:	f7fe f9fc 	bl	8003a74 <HAL_GetTick>
 800567c:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005680:	f7fe f9f8 	bl	8003a74 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e020      	b.n	80056d4 <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005692:	4b12      	ldr	r3, [pc, #72]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0f0      	beq.n	8005680 <HAL_RCC_OscConfig+0x448>
 800569e:	e018      	b.n	80056d2 <HAL_RCC_OscConfig+0x49a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a0:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <HAL_RCC_OscConfig+0x4ac>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a6:	f7fe f9e5 	bl	8003a74 <HAL_GetTick>
 80056aa:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ae:	f7fe f9e1 	bl	8003a74 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e009      	b.n	80056d4 <HAL_RCC_OscConfig+0x49c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <HAL_RCC_OscConfig+0x4a4>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1f0      	bne.n	80056ae <HAL_RCC_OscConfig+0x476>
 80056cc:	e001      	b.n	80056d2 <HAL_RCC_OscConfig+0x49a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <HAL_RCC_OscConfig+0x49c>
    }
  }
  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3738      	adds	r7, #56	; 0x38
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40023800 	.word	0x40023800
 80056e0:	40007000 	.word	0x40007000
 80056e4:	42470060 	.word	0x42470060

080056e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80056f6:	4b81      	ldr	r3, [pc, #516]	; (80058fc <HAL_RCC_ClockConfig+0x214>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	d90c      	bls.n	800571e <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005704:	4b7d      	ldr	r3, [pc, #500]	; (80058fc <HAL_RCC_ClockConfig+0x214>)
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800570c:	4b7b      	ldr	r3, [pc, #492]	; (80058fc <HAL_RCC_ClockConfig+0x214>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d001      	beq.n	800571e <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e0ea      	b.n	80058f4 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d008      	beq.n	800573c <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800572a:	4b75      	ldr	r3, [pc, #468]	; (8005900 <HAL_RCC_ClockConfig+0x218>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	4972      	ldr	r1, [pc, #456]	; (8005900 <HAL_RCC_ClockConfig+0x218>)
 8005738:	4313      	orrs	r3, r2
 800573a:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 8086 	beq.w	8005856 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d107      	bne.n	8005762 <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005752:	4b6b      	ldr	r3, [pc, #428]	; (8005900 <HAL_RCC_ClockConfig+0x218>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d119      	bne.n	8005792 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e0c8      	b.n	80058f4 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2b02      	cmp	r3, #2
 8005768:	d003      	beq.n	8005772 <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800576e:	2b03      	cmp	r3, #3
 8005770:	d107      	bne.n	8005782 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005772:	4b63      	ldr	r3, [pc, #396]	; (8005900 <HAL_RCC_ClockConfig+0x218>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d109      	bne.n	8005792 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e0b8      	b.n	80058f4 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005782:	4b5f      	ldr	r3, [pc, #380]	; (8005900 <HAL_RCC_ClockConfig+0x218>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e0b0      	b.n	80058f4 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005792:	4b5b      	ldr	r3, [pc, #364]	; (8005900 <HAL_RCC_ClockConfig+0x218>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f023 0203 	bic.w	r2, r3, #3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	4958      	ldr	r1, [pc, #352]	; (8005900 <HAL_RCC_ClockConfig+0x218>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057a4:	f7fe f966 	bl	8003a74 <HAL_GetTick>
 80057a8:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d112      	bne.n	80057d8 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80057b2:	e00a      	b.n	80057ca <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057b4:	f7fe f95e 	bl	8003a74 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e094      	b.n	80058f4 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80057ca:	4b4d      	ldr	r3, [pc, #308]	; (8005900 <HAL_RCC_ClockConfig+0x218>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 030c 	and.w	r3, r3, #12
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d1ee      	bne.n	80057b4 <HAL_RCC_ClockConfig+0xcc>
 80057d6:	e03e      	b.n	8005856 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d112      	bne.n	8005806 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057e0:	e00a      	b.n	80057f8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057e2:	f7fe f947 	bl	8003a74 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e07d      	b.n	80058f4 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057f8:	4b41      	ldr	r3, [pc, #260]	; (8005900 <HAL_RCC_ClockConfig+0x218>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 030c 	and.w	r3, r3, #12
 8005800:	2b08      	cmp	r3, #8
 8005802:	d1ee      	bne.n	80057e2 <HAL_RCC_ClockConfig+0xfa>
 8005804:	e027      	b.n	8005856 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2b03      	cmp	r3, #3
 800580c:	d11d      	bne.n	800584a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800580e:	e00a      	b.n	8005826 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005810:	f7fe f930 	bl	8003a74 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	f241 3288 	movw	r2, #5000	; 0x1388
 800581e:	4293      	cmp	r3, r2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e066      	b.n	80058f4 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8005826:	4b36      	ldr	r3, [pc, #216]	; (8005900 <HAL_RCC_ClockConfig+0x218>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f003 030c 	and.w	r3, r3, #12
 800582e:	2b0c      	cmp	r3, #12
 8005830:	d1ee      	bne.n	8005810 <HAL_RCC_ClockConfig+0x128>
 8005832:	e010      	b.n	8005856 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005834:	f7fe f91e 	bl	8003a74 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005842:	4293      	cmp	r3, r2
 8005844:	d901      	bls.n	800584a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e054      	b.n	80058f4 <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800584a:	4b2d      	ldr	r3, [pc, #180]	; (8005900 <HAL_RCC_ClockConfig+0x218>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f003 030c 	and.w	r3, r3, #12
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1ee      	bne.n	8005834 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8005856:	4b29      	ldr	r3, [pc, #164]	; (80058fc <HAL_RCC_ClockConfig+0x214>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 030f 	and.w	r3, r3, #15
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d20c      	bcs.n	800587e <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005864:	4b25      	ldr	r3, [pc, #148]	; (80058fc <HAL_RCC_ClockConfig+0x214>)
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800586c:	4b23      	ldr	r3, [pc, #140]	; (80058fc <HAL_RCC_ClockConfig+0x214>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d001      	beq.n	800587e <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e03a      	b.n	80058f4 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	2b00      	cmp	r3, #0
 8005888:	d008      	beq.n	800589c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800588a:	4b1d      	ldr	r3, [pc, #116]	; (8005900 <HAL_RCC_ClockConfig+0x218>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	491a      	ldr	r1, [pc, #104]	; (8005900 <HAL_RCC_ClockConfig+0x218>)
 8005898:	4313      	orrs	r3, r2
 800589a:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d009      	beq.n	80058bc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058a8:	4b15      	ldr	r3, [pc, #84]	; (8005900 <HAL_RCC_ClockConfig+0x218>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	4912      	ldr	r1, [pc, #72]	; (8005900 <HAL_RCC_ClockConfig+0x218>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80058bc:	f000 f826 	bl	800590c <HAL_RCC_GetSysClockFreq>
 80058c0:	4601      	mov	r1, r0
 80058c2:	4b0f      	ldr	r3, [pc, #60]	; (8005900 <HAL_RCC_ClockConfig+0x218>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80058ca:	23f0      	movs	r3, #240	; 0xf0
 80058cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	fa93 f3a3 	rbit	r3, r3
 80058d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	fab3 f383 	clz	r3, r3
 80058dc:	fa22 f303 	lsr.w	r3, r2, r3
 80058e0:	4a08      	ldr	r2, [pc, #32]	; (8005904 <HAL_RCC_ClockConfig+0x21c>)
 80058e2:	5cd3      	ldrb	r3, [r2, r3]
 80058e4:	fa21 f303 	lsr.w	r3, r1, r3
 80058e8:	4a07      	ldr	r2, [pc, #28]	; (8005908 <HAL_RCC_ClockConfig+0x220>)
 80058ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80058ec:	200f      	movs	r0, #15
 80058ee:	f004 fc3f 	bl	800a170 <HAL_InitTick>
  
  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40023c00 	.word	0x40023c00
 8005900:	40023800 	.word	0x40023800
 8005904:	08010430 	.word	0x08010430
 8005908:	20000014 	.word	0x20000014

0800590c <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800590c:	b480      	push	{r7}
 800590e:	b08b      	sub	sp, #44	; 0x2c
 8005910:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	61fb      	str	r3, [r7, #28]
 8005916:	2300      	movs	r3, #0
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
 800591a:	2300      	movs	r3, #0
 800591c:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005922:	4b38      	ldr	r3, [pc, #224]	; (8005a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 030c 	and.w	r3, r3, #12
 800592a:	2b08      	cmp	r3, #8
 800592c:	d00c      	beq.n	8005948 <HAL_RCC_GetSysClockFreq+0x3c>
 800592e:	2b08      	cmp	r3, #8
 8005930:	d85d      	bhi.n	80059ee <HAL_RCC_GetSysClockFreq+0xe2>
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <HAL_RCC_GetSysClockFreq+0x30>
 8005936:	2b04      	cmp	r3, #4
 8005938:	d003      	beq.n	8005942 <HAL_RCC_GetSysClockFreq+0x36>
 800593a:	e058      	b.n	80059ee <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800593c:	4b32      	ldr	r3, [pc, #200]	; (8005a08 <HAL_RCC_GetSysClockFreq+0xfc>)
 800593e:	623b      	str	r3, [r7, #32]
       break;
 8005940:	e058      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005942:	4b31      	ldr	r3, [pc, #196]	; (8005a08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005944:	623b      	str	r3, [r7, #32]
      break;
 8005946:	e055      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005948:	4b2e      	ldr	r3, [pc, #184]	; (8005a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005950:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005952:	4b2c      	ldr	r3, [pc, #176]	; (8005a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d017      	beq.n	800598e <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800595e:	4a2a      	ldr	r2, [pc, #168]	; (8005a08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	fbb2 f2f3 	udiv	r2, r2, r3
 8005966:	4b27      	ldr	r3, [pc, #156]	; (8005a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005968:	6859      	ldr	r1, [r3, #4]
 800596a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800596e:	400b      	ands	r3, r1
 8005970:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8005974:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005976:	6979      	ldr	r1, [r7, #20]
 8005978:	fa91 f1a1 	rbit	r1, r1
 800597c:	6139      	str	r1, [r7, #16]
  return(result);
 800597e:	6939      	ldr	r1, [r7, #16]
 8005980:	fab1 f181 	clz	r1, r1
 8005984:	40cb      	lsrs	r3, r1
 8005986:	fb02 f303 	mul.w	r3, r2, r3
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
 800598c:	e016      	b.n	80059bc <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800598e:	4a1e      	ldr	r2, [pc, #120]	; (8005a08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	fbb2 f2f3 	udiv	r2, r2, r3
 8005996:	4b1b      	ldr	r3, [pc, #108]	; (8005a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005998:	6859      	ldr	r1, [r3, #4]
 800599a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800599e:	400b      	ands	r3, r1
 80059a0:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80059a4:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a6:	68f9      	ldr	r1, [r7, #12]
 80059a8:	fa91 f1a1 	rbit	r1, r1
 80059ac:	60b9      	str	r1, [r7, #8]
  return(result);
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	fab1 f181 	clz	r1, r1
 80059b4:	40cb      	lsrs	r3, r1
 80059b6:	fb02 f303 	mul.w	r3, r2, r3
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80059bc:	4b11      	ldr	r3, [pc, #68]	; (8005a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059c4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80059c8:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	fa93 f3a3 	rbit	r3, r3
 80059d0:	603b      	str	r3, [r7, #0]
  return(result);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	fab3 f383 	clz	r3, r3
 80059d8:	fa22 f303 	lsr.w	r3, r2, r3
 80059dc:	3301      	adds	r3, #1
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 80059e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ea:	623b      	str	r3, [r7, #32]
      break;
 80059ec:	e002      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059ee:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <HAL_RCC_GetSysClockFreq+0xfc>)
 80059f0:	623b      	str	r3, [r7, #32]
      break;
 80059f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059f4:	6a3b      	ldr	r3, [r7, #32]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	372c      	adds	r7, #44	; 0x2c
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	40023800 	.word	0x40023800
 8005a08:	00f42400 	.word	0x00f42400

08005a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a10:	4b03      	ldr	r3, [pc, #12]	; (8005a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a12:	681b      	ldr	r3, [r3, #0]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	20000014 	.word	0x20000014

08005a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8005a2a:	f7ff ffef 	bl	8005a0c <HAL_RCC_GetHCLKFreq>
 8005a2e:	4601      	mov	r1, r0
 8005a30:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a38:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005a3c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	fa93 f3a3 	rbit	r3, r3
 8005a44:	603b      	str	r3, [r7, #0]
  return(result);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	fab3 f383 	clz	r3, r3
 8005a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a50:	4a04      	ldr	r2, [pc, #16]	; (8005a64 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005a52:	5cd3      	ldrb	r3, [r2, r3]
 8005a54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40023800 	.word	0x40023800
 8005a64:	08010440 	.word	0x08010440

08005a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8005a6e:	f7ff ffcd 	bl	8005a0c <HAL_RCC_GetHCLKFreq>
 8005a72:	4601      	mov	r1, r0
 8005a74:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8005a7c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005a80:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	fa93 f3a3 	rbit	r3, r3
 8005a88:	603b      	str	r3, [r7, #0]
  return(result);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	fab3 f383 	clz	r3, r3
 8005a90:	fa22 f303 	lsr.w	r3, r2, r3
 8005a94:	4a04      	ldr	r2, [pc, #16]	; (8005aa8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005a96:	5cd3      	ldrb	r3, [r2, r3]
 8005a98:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40023800 	.word	0x40023800
 8005aa8:	08010440 	.word	0x08010440

08005aac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	220f      	movs	r2, #15
 8005aba:	601a      	str	r2, [r3, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005abc:	4b12      	ldr	r3, [pc, #72]	; (8005b08 <HAL_RCC_GetClockConfig+0x5c>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 0203 	and.w	r2, r3, #3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005ac8:	4b0f      	ldr	r3, [pc, #60]	; (8005b08 <HAL_RCC_GetClockConfig+0x5c>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005ad4:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <HAL_RCC_GetClockConfig+0x5c>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005ae0:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <HAL_RCC_GetClockConfig+0x5c>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	08db      	lsrs	r3, r3, #3
 8005ae6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005aee:	4b07      	ldr	r3, [pc, #28]	; (8005b0c <HAL_RCC_GetClockConfig+0x60>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 020f 	and.w	r2, r3, #15
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	601a      	str	r2, [r3, #0]
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	40023c00 	.word	0x40023c00

08005b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b09c      	sub	sp, #112	; 0x70
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t tmpreg1 = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	66bb      	str	r3, [r7, #104]	; 0x68
  
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division   
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d106      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x2a>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 8082 	beq.w	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
        
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();    
 8005b3a:	4bac      	ldr	r3, [pc, #688]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b40:	f7fd ff98 	bl	8003a74 <HAL_GetTick>
 8005b44:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b46:	e008      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b48:	f7fd ff94 	bl	8003a74 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d901      	bls.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x4a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e1eb      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b5a:	4ba5      	ldr	r3, [pc, #660]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1f0      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x38>
    }
    
    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added   
      only for I2S configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d01e      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b7e:	fa93 f3a3 	rbit	r3, r3
 8005b82:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 8005b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b86:	fab3 f383 	clz	r3, r3
 8005b8a:	409a      	lsls	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6899      	ldr	r1, [r3, #8]
 8005b90:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005b94:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b98:	fa93 f3a3 	rbit	r3, r3
 8005b9c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ba0:	fab3 f383 	clz	r3, r3
 8005ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba8:	4991      	ldr	r1, [pc, #580]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
  
    /*---------------------------- SAI configuration -------------------------*/ 
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d02a      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
      
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005bbc:	4b8c      	ldr	r3, [pc, #560]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005bc6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005bca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bce:	fa93 f3a3 	rbit	r3, r3
 8005bd2:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8005bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd6:	fab3 f383 	clz	r3, r3
 8005bda:	fa22 f303 	lsr.w	r3, r2, r3
 8005bde:	66bb      	str	r3, [r7, #104]	; 0x68
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	019a      	lsls	r2, r3, #6
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	061b      	lsls	r3, r3, #24
 8005bec:	431a      	orrs	r2, r3
 8005bee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bf0:	071b      	lsls	r3, r3, #28
 8005bf2:	497f      	ldr	r1, [pc, #508]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005bfa:	4b7d      	ldr	r3, [pc, #500]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c00:	f023 021f 	bic.w	r2, r3, #31
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	4979      	ldr	r1, [pc, #484]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c12:	4b76      	ldr	r3, [pc, #472]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c18:	f7fd ff2c 	bl	8003a74 <HAL_GetTick>
 8005c1c:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c20:	f7fd ff28 	bl	8003a74 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e17f      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c32:	4b6f      	ldr	r3, [pc, #444]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0f0      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x110>
    
  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x148>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 80d7 	beq.w	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8005c58:	4b66      	ldr	r3, [pc, #408]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c5e:	f7fd ff09 	bl	8003a74 <HAL_GetTick>
 8005c62:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c64:	e008      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005c66:	f7fd ff05 	bl	8003a74 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x168>
      { 
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e15c      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c78:	4b5d      	ldr	r3, [pc, #372]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c84:	d0ef      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x156>
    }
    
    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0304 	and.w	r3, r3, #4
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d04b      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8005c92:	4b57      	ldr	r3, [pc, #348]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c98:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005c9c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005ca0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca4:	fa93 f3a3 	rbit	r3, r3
 8005ca8:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	fab3 f383 	clz	r3, r3
 8005cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb4:	66bb      	str	r3, [r7, #104]	; 0x68
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691a      	ldr	r2, [r3, #16]
 8005cba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc2:	fa93 f3a3 	rbit	r3, r3
 8005cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	fab3 f383 	clz	r3, r3
 8005cce:	409a      	lsls	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6959      	ldr	r1, [r3, #20]
 8005cd4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005cd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cdc:	fa93 f3a3 	rbit	r3, r3
 8005ce0:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8005ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce4:	fab3 f383 	clz	r3, r3
 8005ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cec:	431a      	orrs	r2, r3
 8005cee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf6:	fa93 f3a3 	rbit	r3, r3
 8005cfa:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cfe:	fab3 f383 	clz	r3, r3
 8005d02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d04:	fa01 f303 	lsl.w	r3, r1, r3
 8005d08:	4939      	ldr	r1, [pc, #228]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d10:	4b37      	ldr	r3, [pc, #220]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d16:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	021b      	lsls	r3, r3, #8
 8005d22:	4933      	ldr	r1, [pc, #204]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    
    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d049      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8005d36:	4b2e      	ldr	r3, [pc, #184]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d40:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005d44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	fa93 f3a3 	rbit	r3, r3
 8005d4c:	613b      	str	r3, [r7, #16]
  return(result);
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	fab3 f383 	clz	r3, r3
 8005d54:	fa22 f303 	lsr.w	r3, r2, r3
 8005d58:	66bb      	str	r3, [r7, #104]	; 0x68
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691a      	ldr	r2, [r3, #16]
 8005d5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	fa93 f3a3 	rbit	r3, r3
 8005d6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	fab3 f383 	clz	r3, r3
 8005d72:	409a      	lsls	r2, r3
 8005d74:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	fa93 f3a3 	rbit	r3, r3
 8005d80:	623b      	str	r3, [r7, #32]
  return(result);
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	fab3 f383 	clz	r3, r3
 8005d88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6999      	ldr	r1, [r3, #24]
 8005d94:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005d98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9c:	fa93 f3a3 	rbit	r3, r3
 8005da0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	fab3 f383 	clz	r3, r3
 8005da8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dac:	4910      	ldr	r1, [pc, #64]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005db4:	4b0e      	ldr	r3, [pc, #56]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	490b      	ldr	r1, [pc, #44]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005dca:	4b0a      	ldr	r3, [pc, #40]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005dcc:	2201      	movs	r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dd0:	f7fd fe50 	bl	8003a74 <HAL_GetTick>
 8005dd4:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005dd6:	e00f      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005dd8:	f7fd fe4c 	bl	8003a74 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d908      	bls.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      { 
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e0a3      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8005dea:	bf00      	nop
 8005dec:	42470068 	.word	0x42470068
 8005df0:	40023800 	.word	0x40023800
 8005df4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005df8:	4b50      	ldr	r3, [pc, #320]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e04:	d1e8      	bne.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    }  
  }
  /*--------------------------------------------------------------------------*/
    
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 8083 	beq.w	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e14:	2300      	movs	r3, #0
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	4b48      	ldr	r3, [pc, #288]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1c:	4a47      	ldr	r2, [pc, #284]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e22:	6413      	str	r3, [r2, #64]	; 0x40
 8005e24:	4b45      	ldr	r3, [pc, #276]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
      
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e30:	4b43      	ldr	r3, [pc, #268]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a42      	ldr	r2, [pc, #264]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8005e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e3a:	6013      	str	r3, [r2, #0]
      
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e3c:	f7fd fe1a 	bl	8003a74 <HAL_GetTick>
 8005e40:	66f8      	str	r0, [r7, #108]	; 0x6c
      
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e42:	e008      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x346>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e44:	f7fd fe16 	bl	8003a74 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x346>
      {
        return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e06d      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x422>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e56:	4b3a      	ldr	r3, [pc, #232]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0f0      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x334>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e62:	4b36      	ldr	r3, [pc, #216]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e6a:	66bb      	str	r3, [r7, #104]	; 0x68
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d02f      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d028      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e80:	4b2e      	ldr	r3, [pc, #184]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e88:	66bb      	str	r3, [r7, #104]	; 0x68
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e8a:	4b2e      	ldr	r3, [pc, #184]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e90:	4b2c      	ldr	r3, [pc, #176]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e96:	4a29      	ldr	r2, [pc, #164]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e9c:	4b27      	ldr	r3, [pc, #156]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d014      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005ea8:	f7fd fde4 	bl	8003a74 <HAL_GetTick>
 8005eac:	66f8      	str	r0, [r7, #108]	; 0x6c
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eae:	e00a      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eb0:	f7fd fde0 	bl	8003a74 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e035      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ec6:	4b1d      	ldr	r3, [pc, #116]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0ee      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ede:	d10d      	bne.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005ee0:	4b16      	ldr	r3, [pc, #88]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef4:	4911      	ldr	r1, [pc, #68]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	608b      	str	r3, [r1, #8]
 8005efa:	e005      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005efc:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	4a0e      	ldr	r2, [pc, #56]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005f02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f06:	6093      	str	r3, [r2, #8]
 8005f08:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005f0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f14:	4909      	ldr	r1, [pc, #36]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0310 	and.w	r3, r3, #16
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d004      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005f2c:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005f2e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3770      	adds	r7, #112	; 0x70
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40023800 	.word	0x40023800
 8005f40:	40007000 	.word	0x40007000
 8005f44:	42470e40 	.word	0x42470e40
 8005f48:	424711e0 	.word	0x424711e0

08005f4c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e01d      	b.n	8005f9a <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d105      	bne.n	8005f76 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f003 ffd5 	bl	8009f20 <HAL_SD_MspInit>
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2203      	movs	r2, #3
 8005f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f810 	bl	8005fa4 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
	...

08005fa4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005fa4:	b5b0      	push	{r4, r5, r7, lr}
 8005fa6:	b08e      	sub	sp, #56	; 0x38
 8005fa8:	af04      	add	r7, sp, #16
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005fac:	2300      	movs	r3, #0
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005fc4:	2376      	movs	r3, #118	; 0x76
 8005fc6:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681d      	ldr	r5, [r3, #0]
 8005fcc:	466c      	mov	r4, sp
 8005fce:	f107 0318 	add.w	r3, r7, #24
 8005fd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005fd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005fda:	f107 030c 	add.w	r3, r7, #12
 8005fde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	f002 fc7f 	bl	80088e4 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8005fe6:	4b1c      	ldr	r3, [pc, #112]	; (8006058 <HAL_SD_InitCard+0xb4>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f002 fcc0 	bl	8008976 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005ff6:	4b18      	ldr	r3, [pc, #96]	; (8006058 <HAL_SD_InitCard+0xb4>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8005ffc:	2002      	movs	r0, #2
 8005ffe:	f7fd fd45 	bl	8003a8c <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f001 f90c 	bl	8007220 <SD_PowerON>
 8006008:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00b      	beq.n	8006028 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e013      	b.n	8006050 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f001 f82f 	bl	800708c <SD_InitCard>
 800602e:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00b      	beq.n	800604e <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	431a      	orrs	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3728      	adds	r7, #40	; 0x28
 8006054:	46bd      	mov	sp, r7
 8006056:	bdb0      	pop	{r4, r5, r7, pc}
 8006058:	422580a0 	.word	0x422580a0

0800605c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800605c:	b590      	push	{r4, r7, lr}
 800605e:	b08f      	sub	sp, #60	; 0x3c
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800606a:	2300      	movs	r3, #0
 800606c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 800606e:	f7fd fd01 	bl	8003a74 <HAL_GetTick>
 8006072:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 8006074:	2300      	movs	r3, #0
 8006076:	633b      	str	r3, [r7, #48]	; 0x30
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d107      	bne.n	8006092 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e177      	b.n	8006382 <HAL_SD_ReadBlocks+0x326>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b01      	cmp	r3, #1
 800609c:	f040 816a 	bne.w	8006374 <HAL_SD_ReadBlocks+0x318>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	441a      	add	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d907      	bls.n	80060c4 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e15e      	b.n	8006382 <HAL_SD_ReadBlocks+0x326>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2203      	movs	r2, #3
 80060c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2200      	movs	r2, #0
 80060d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d002      	beq.n	80060e2 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	025b      	lsls	r3, r3, #9
 80060e0:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060ea:	4618      	mov	r0, r3
 80060ec:	f002 fcd7 	bl	8008a9e <SDMMC_CmdBlockLength>
 80060f0:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80060f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d010      	beq.n	800611a <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006100:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006108:	431a      	orrs	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e133      	b.n	8006382 <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800611a:	f04f 33ff 	mov.w	r3, #4294967295
 800611e:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	025b      	lsls	r3, r3, #9
 8006124:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006126:	2390      	movs	r3, #144	; 0x90
 8006128:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800612a:	2302      	movs	r3, #2
 800612c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800612e:	2300      	movs	r3, #0
 8006130:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006132:	2301      	movs	r3, #1
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f107 0210 	add.w	r2, r7, #16
 800613e:	4611      	mov	r1, r2
 8006140:	4618      	mov	r0, r3
 8006142:	f002 fc80 	bl	8008a46 <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d90a      	bls.n	8006162 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2202      	movs	r2, #2
 8006150:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	4618      	mov	r0, r3
 800615a:	f002 fce8 	bl	8008b2e <SDMMC_CmdReadMultiBlock>
 800615e:	6378      	str	r0, [r7, #52]	; 0x34
 8006160:	e009      	b.n	8006176 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2201      	movs	r2, #1
 8006166:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	4618      	mov	r0, r3
 8006170:	f002 fcb9 	bl	8008ae6 <SDMMC_CmdReadSingleBlock>
 8006174:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006178:	2b00      	cmp	r3, #0
 800617a:	d04a      	beq.n	8006212 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006184:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800618a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618c:	431a      	orrs	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e0f1      	b.n	8006382 <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d016      	beq.n	80061da <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80061ac:	2300      	movs	r3, #0
 80061ae:	633b      	str	r3, [r7, #48]	; 0x30
 80061b0:	e00d      	b.n	80061ce <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6819      	ldr	r1, [r3, #0]
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061bc:	18d4      	adds	r4, r2, r3
 80061be:	4608      	mov	r0, r1
 80061c0:	f002 fbbb 	bl	800893a <SDIO_ReadFIFO>
 80061c4:	4603      	mov	r3, r0
 80061c6:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	3301      	adds	r3, #1
 80061cc:	633b      	str	r3, [r7, #48]	; 0x30
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	2b07      	cmp	r3, #7
 80061d2:	d9ee      	bls.n	80061b2 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	3320      	adds	r3, #32
 80061d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80061da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d007      	beq.n	80061f0 <HAL_SD_ReadBlocks+0x194>
 80061e0:	f7fd fc48 	bl	8003a74 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d810      	bhi.n	8006212 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80061f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e0b7      	b.n	8006382 <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006218:	f240 332a 	movw	r3, #810	; 0x32a
 800621c:	4013      	ands	r3, r2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0bd      	beq.n	800619e <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622c:	2b00      	cmp	r3, #0
 800622e:	d020      	beq.n	8006272 <HAL_SD_ReadBlocks+0x216>
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d91d      	bls.n	8006272 <HAL_SD_ReadBlocks+0x216>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623a:	2b03      	cmp	r3, #3
 800623c:	d019      	beq.n	8006272 <HAL_SD_ReadBlocks+0x216>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4618      	mov	r0, r3
 8006244:	f002 fce0 	bl	8008c08 <SDMMC_CmdStopTransfer>
 8006248:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 800624a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624c:	2b00      	cmp	r3, #0
 800624e:	d010      	beq.n	8006272 <HAL_SD_ReadBlocks+0x216>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006258:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800625e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006260:	431a      	orrs	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e087      	b.n	8006382 <HAL_SD_ReadBlocks+0x326>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006278:	f003 0308 	and.w	r3, r3, #8
 800627c:	2b00      	cmp	r3, #0
 800627e:	d010      	beq.n	80062a2 <HAL_SD_ReadBlocks+0x246>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006288:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628e:	f043 0208 	orr.w	r2, r3, #8
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e06f      	b.n	8006382 <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d010      	beq.n	80062d2 <HAL_SD_ReadBlocks+0x276>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80062b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062be:	f043 0202 	orr.w	r2, r3, #2
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e057      	b.n	8006382 <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d8:	f003 0320 	and.w	r3, r3, #32
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d037      	beq.n	8006350 <HAL_SD_ReadBlocks+0x2f4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80062e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ee:	f043 0220 	orr.w	r2, r3, #32
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e03f      	b.n	8006382 <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f002 fb17 	bl	800893a <SDIO_ReadFIFO>
 800630c:	4602      	mov	r2, r0
 800630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006310:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8006312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006314:	3304      	adds	r3, #4
 8006316:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8006318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800631a:	2b00      	cmp	r3, #0
 800631c:	d007      	beq.n	800632e <HAL_SD_ReadBlocks+0x2d2>
 800631e:	f7fd fba9 	bl	8003a74 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800632a:	429a      	cmp	r2, r3
 800632c:	d810      	bhi.n	8006350 <HAL_SD_ReadBlocks+0x2f4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006336:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e018      	b.n	8006382 <HAL_SD_ReadBlocks+0x326>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1d1      	bne.n	8006302 <HAL_SD_ReadBlocks+0x2a6>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006366:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	e006      	b.n	8006382 <HAL_SD_ReadBlocks+0x326>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006378:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
  }
}
 8006382:	4618      	mov	r0, r3
 8006384:	373c      	adds	r7, #60	; 0x3c
 8006386:	46bd      	mov	sp, r7
 8006388:	bd90      	pop	{r4, r7, pc}

0800638a <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b08e      	sub	sp, #56	; 0x38
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	607a      	str	r2, [r7, #4]
 8006396:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006398:	2300      	movs	r3, #0
 800639a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 800639c:	f7fd fb6a 	bl	8003a74 <HAL_GetTick>
 80063a0:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d107      	bne.n	80063c0 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e160      	b.n	8006682 <HAL_SD_WriteBlocks+0x2f8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	f040 8153 	bne.w	8006674 <HAL_SD_WriteBlocks+0x2ea>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	441a      	add	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063de:	429a      	cmp	r2, r3
 80063e0:	d907      	bls.n	80063f2 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e147      	b.n	8006682 <HAL_SD_WriteBlocks+0x2f8>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2203      	movs	r2, #3
 80063f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2200      	movs	r2, #0
 8006400:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006406:	2b01      	cmp	r3, #1
 8006408:	d002      	beq.n	8006410 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	025b      	lsls	r3, r3, #9
 800640e:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006418:	4618      	mov	r0, r3
 800641a:	f002 fb40 	bl	8008a9e <SDMMC_CmdBlockLength>
 800641e:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8006420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006422:	2b00      	cmp	r3, #0
 8006424:	d010      	beq.n	8006448 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800642e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006436:	431a      	orrs	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e11c      	b.n	8006682 <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d90a      	bls.n	8006464 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6879      	ldr	r1, [r7, #4]
 800645a:	4618      	mov	r0, r3
 800645c:	f002 fbaf 	bl	8008bbe <SDMMC_CmdWriteMultiBlock>
 8006460:	6378      	str	r0, [r7, #52]	; 0x34
 8006462:	e009      	b.n	8006478 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2210      	movs	r2, #16
 8006468:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	4618      	mov	r0, r3
 8006472:	f002 fb80 	bl	8008b76 <SDMMC_CmdWriteSingleBlock>
 8006476:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647a:	2b00      	cmp	r3, #0
 800647c:	d010      	beq.n	80064a0 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006486:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800648c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648e:	431a      	orrs	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e0f0      	b.n	8006682 <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80064a0:	f04f 33ff 	mov.w	r3, #4294967295
 80064a4:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	025b      	lsls	r3, r3, #9
 80064aa:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80064ac:	2390      	movs	r3, #144	; 0x90
 80064ae:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80064b0:	2300      	movs	r3, #0
 80064b2:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80064b8:	2301      	movs	r3, #1
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f107 0210 	add.w	r2, r7, #16
 80064c4:	4611      	mov	r1, r2
 80064c6:	4618      	mov	r0, r3
 80064c8:	f002 fabd 	bl	8008a46 <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80064cc:	e037      	b.n	800653e <HAL_SD_WriteBlocks+0x1b4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, /*SDIO_FLAG_TXUNDERR |*/ SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d014      	beq.n	8006506 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80064dc:	2300      	movs	r3, #0
 80064de:	633b      	str	r3, [r7, #48]	; 0x30
 80064e0:	e00b      	b.n	80064fa <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6818      	ldr	r0, [r3, #0]
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ec:	4413      	add	r3, r2
 80064ee:	4619      	mov	r1, r3
 80064f0:	f002 fa30 	bl	8008954 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80064f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f6:	3301      	adds	r3, #1
 80064f8:	633b      	str	r3, [r7, #48]	; 0x30
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	2b07      	cmp	r3, #7
 80064fe:	d9f0      	bls.n	80064e2 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8006500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006502:	3320      	adds	r3, #32
 8006504:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8006506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006508:	2b00      	cmp	r3, #0
 800650a:	d007      	beq.n	800651c <HAL_SD_WriteBlocks+0x192>
 800650c:	f7fd fab2 	bl	8003a74 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006518:	429a      	cmp	r2, r3
 800651a:	d810      	bhi.n	800653e <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006524:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800652a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652c:	431a      	orrs	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e0a1      	b.n	8006682 <HAL_SD_WriteBlocks+0x2f8>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006544:	f240 331a 	movw	r3, #794	; 0x31a
 8006548:	4013      	ands	r3, r2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0bf      	beq.n	80064ce <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006558:	2b00      	cmp	r3, #0
 800655a:	d020      	beq.n	800659e <HAL_SD_WriteBlocks+0x214>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d91d      	bls.n	800659e <HAL_SD_WriteBlocks+0x214>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006566:	2b03      	cmp	r3, #3
 8006568:	d019      	beq.n	800659e <HAL_SD_WriteBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4618      	mov	r0, r3
 8006570:	f002 fb4a 	bl	8008c08 <SDMMC_CmdStopTransfer>
 8006574:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8006576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006578:	2b00      	cmp	r3, #0
 800657a:	d010      	beq.n	800659e <HAL_SD_WriteBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006584:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658c:	431a      	orrs	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e071      	b.n	8006682 <HAL_SD_WriteBlocks+0x2f8>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a4:	f003 0308 	and.w	r3, r3, #8
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d010      	beq.n	80065ce <HAL_SD_WriteBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80065b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	f043 0208 	orr.w	r2, r3, #8
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e059      	b.n	8006682 <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d010      	beq.n	80065fe <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80065e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	f043 0202 	orr.w	r2, r3, #2
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e041      	b.n	8006682 <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006604:	f003 0310 	and.w	r3, r3, #16
 8006608:	2b00      	cmp	r3, #0
 800660a:	d010      	beq.n	800662e <HAL_SD_WriteBlocks+0x2a4>
    {
      // Clear all the static flags
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006614:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661a:	f043 0210 	orr.w	r2, r3, #16
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e029      	b.n	8006682 <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_STA_STBITERR))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006638:	2b00      	cmp	r3, #0
 800663a:	d010      	beq.n	800665e <HAL_SD_WriteBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006644:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_GENERAL_UNKNOWN_ERR;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e011      	b.n	8006682 <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006666:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8006670:	2300      	movs	r3, #0
 8006672:	e006      	b.n	8006682 <HAL_SD_WriteBlocks+0x2f8>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006678:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
  }
}
 8006682:	4618      	mov	r0, r3
 8006684:	3738      	adds	r7, #56	; 0x38
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
	...

0800668c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006694:	2300      	movs	r3, #0
 8006696:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 808d 	beq.w	80067c2 <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066b0:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6812      	ldr	r2, [r2, #0]
 80066bc:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80066c0:	f023 0302 	bic.w	r3, r3, #2
 80066c4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d03a      	beq.n	8006748 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d105      	bne.n	80066ea <HAL_SD_IRQHandler+0x5e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d011      	beq.n	800670e <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f002 fa8a 	bl	8008c08 <SDMMC_CmdStopTransfer>
 80066f4:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d008      	beq.n	800670e <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f939 	bl	8006980 <HAL_SD_ErrorCallback>
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006716:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d105      	bne.n	8006738 <HAL_SD_IRQHandler+0xac>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <HAL_SD_IRQHandler+0xb4>
      {
        HAL_SD_RxCpltCallback(hsd);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f917 	bl	800696c <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 800673e:	e103      	b.n	8006948 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f909 	bl	8006958 <HAL_SD_TxCpltCallback>
}
 8006746:	e0ff      	b.n	8006948 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 80f9 	beq.w	8006948 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675a:	f003 0320 	and.w	r3, r3, #32
 800675e:	2b00      	cmp	r3, #0
 8006760:	d011      	beq.n	8006786 <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	f002 fa4e 	bl	8008c08 <SDMMC_CmdStopTransfer>
 800676c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d008      	beq.n	8006786 <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f8fd 	bl	8006980 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	f040 80da 	bne.w	8006948 <HAL_SD_IRQHandler+0x2bc>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	f040 80d3 	bne.w	8006948 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0208 	bic.w	r2, r2, #8
 80067b0:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f8cc 	bl	8006958 <HAL_SD_TxCpltCallback>
}
 80067c0:	e0c2      	b.n	8006948 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d008      	beq.n	80067e2 <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80067d8:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 ff7d 	bl	80076da <SD_Write_IT>
}
 80067e0:	e0b2      	b.n	8006948 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d008      	beq.n	8006802 <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80067f8:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 ff45 	bl	800768a <SD_Read_IT>
}
 8006800:	e0a2      	b.n	8006948 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006808:	f240 233a 	movw	r3, #570	; 0x23a
 800680c:	4013      	ands	r3, r2
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 809a 	beq.w	8006948 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d005      	beq.n	800682e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006826:	f043 0202 	orr.w	r2, r3, #2
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006834:	f003 0308 	and.w	r3, r3, #8
 8006838:	2b00      	cmp	r3, #0
 800683a:	d005      	beq.n	8006848 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006840:	f043 0208 	orr.w	r2, r3, #8
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684e:	f003 0320 	and.w	r3, r3, #32
 8006852:	2b00      	cmp	r3, #0
 8006854:	d005      	beq.n	8006862 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685a:	f043 0220 	orr.w	r2, r3, #32
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006868:	f003 0310 	and.w	r3, r3, #16
 800686c:	2b00      	cmp	r3, #0
 800686e:	d005      	beq.n	800687c <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006874:	f043 0210 	orr.w	r2, r3, #16
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006886:	2b00      	cmp	r3, #0
 8006888:	d005      	beq.n	8006896 <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688e:	f043 0208 	orr.w	r2, r3, #8
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800689e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6812      	ldr	r2, [r2, #0]
 80068aa:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80068ae:	f023 0302 	bic.w	r3, r3, #2
 80068b2:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d036      	beq.n	800692e <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d011      	beq.n	80068ec <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068cc:	4a20      	ldr	r2, [pc, #128]	; (8006950 <HAL_SD_IRQHandler+0x2c4>)
 80068ce:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fd fa21 	bl	8003d1c <HAL_DMA_Abort_IT>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d033      	beq.n	8006948 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fb55 	bl	8006f94 <SD_DMATxAbort>
}
 80068ea:	e02d      	b.n	8006948 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d011      	beq.n	8006918 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f8:	4a16      	ldr	r2, [pc, #88]	; (8006954 <HAL_SD_IRQHandler+0x2c8>)
 80068fa:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006900:	4618      	mov	r0, r3
 8006902:	f7fd fa0b 	bl	8003d1c <HAL_DMA_Abort_IT>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d01d      	beq.n	8006948 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fb7d 	bl	8007010 <SD_DMARxAbort>
}
 8006916:	e017      	b.n	8006948 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f834 	bl	8006994 <HAL_SD_AbortCallback>
}
 800692c:	e00c      	b.n	8006948 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b00      	cmp	r3, #0
 8006938:	d006      	beq.n	8006948 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f81c 	bl	8006980 <HAL_SD_ErrorCallback>
}
 8006948:	bf00      	nop
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	08006f95 	.word	0x08006f95
 8006954:	08007011 	.word	0x08007011

08006958 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
 __weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069ba:	0e1b      	lsrs	r3, r3, #24
 80069bc:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	099b      	lsrs	r3, r3, #6
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	f003 0303 	and.w	r3, r3, #3
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	089b      	lsrs	r3, r3, #2
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	f003 030f 	and.w	r3, r3, #15
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069f0:	0c1b      	lsrs	r3, r3, #16
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a02:	0a1b      	lsrs	r3, r3, #8
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a24:	0e1b      	lsrs	r3, r3, #24
 8006a26:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	011b      	lsls	r3, r3, #4
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a38:	0c1b      	lsrs	r3, r3, #16
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	88db      	ldrh	r3, [r3, #6]
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	091b      	lsrs	r3, r3, #4
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	4313      	orrs	r3, r2
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	f003 030f 	and.w	r3, r3, #15
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a6a:	0a1b      	lsrs	r3, r3, #8
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	09db      	lsrs	r3, r3, #7
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	099b      	lsrs	r3, r3, #6
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	095b      	lsrs	r3, r3, #5
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	091b      	lsrs	r3, r3, #4
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f040 8087 	bne.w	8006bce <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	029b      	lsls	r3, r3, #10
 8006ac4:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	691a      	ldr	r2, [r3, #16]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	431a      	orrs	r2, r3
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ae6:	0e1b      	lsrs	r3, r3, #24
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	691a      	ldr	r2, [r3, #16]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	099b      	lsrs	r3, r3, #6
 8006af4:	f003 0303 	and.w	r3, r3, #3
 8006af8:	431a      	orrs	r2, r3
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	08db      	lsrs	r3, r3, #3
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	f003 0307 	and.w	r3, r3, #7
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	f003 0307 	and.w	r3, r3, #7
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b20:	0c1b      	lsrs	r3, r3, #16
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	095b      	lsrs	r3, r3, #5
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	089b      	lsrs	r3, r3, #2
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	f003 0307 	and.w	r3, r3, #7
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	005b      	lsls	r3, r3, #1
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	f003 0306 	and.w	r3, r3, #6
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b5c:	0a1b      	lsrs	r3, r3, #8
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	7e1b      	ldrb	r3, [r3, #24]
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	09db      	lsrs	r3, r3, #7
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	4313      	orrs	r3, r2
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	7e1b      	ldrb	r3, [r3, #24]
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	3302      	adds	r3, #2
 8006b8e:	2201      	movs	r2, #1
 8006b90:	fa02 f303 	lsl.w	r3, r2, r3
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006b98:	fb03 f202 	mul.w	r2, r3, r2
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	7a1b      	ldrb	r3, [r3, #8]
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	2301      	movs	r3, #1
 8006baa:	fa03 f202 	lsl.w	r2, r3, r2
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006bba:	0a52      	lsrs	r2, r2, #9
 8006bbc:	fb03 f202 	mul.w	r2, r3, r2
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bca:	661a      	str	r2, [r3, #96]	; 0x60
 8006bcc:	e04d      	b.n	8006c6a <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d138      	bne.n	8006c48 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	041b      	lsls	r3, r3, #16
 8006be2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bee:	0e1b      	lsrs	r3, r3, #24
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	691a      	ldr	r2, [r3, #16]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	021b      	lsls	r3, r3, #8
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c06:	0c1b      	lsrs	r3, r3, #16
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	691a      	ldr	r2, [r3, #16]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	431a      	orrs	r2, r3
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c1c:	0a1b      	lsrs	r3, r3, #8
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	3301      	adds	r3, #1
 8006c28:	029a      	lsls	r2, r3, #10
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	655a      	str	r2, [r3, #84]	; 0x54
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c3c:	659a      	str	r2, [r3, #88]	; 0x58
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	661a      	str	r2, [r3, #96]	; 0x60
 8006c46:	e010      	b.n	8006c6a <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006c50:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c56:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e0c1      	b.n	8006dee <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	099b      	lsrs	r3, r3, #6
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	005b      	lsls	r3, r3, #1
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	7e9b      	ldrb	r3, [r3, #26]
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	09db      	lsrs	r3, r3, #7
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc0:	0e1b      	lsrs	r3, r3, #24
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	09db      	lsrs	r3, r3, #7
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	095b      	lsrs	r3, r3, #5
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	f003 0303 	and.w	r3, r3, #3
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	089b      	lsrs	r3, r3, #2
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	f003 0307 	and.w	r3, r3, #7
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	f003 030c 	and.w	r3, r3, #12
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0c:	0c1b      	lsrs	r3, r3, #16
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	7fdb      	ldrb	r3, [r3, #31]
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	099b      	lsrs	r3, r3, #6
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	f003 0303 	and.w	r3, r3, #3
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	4313      	orrs	r3, r2
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	095b      	lsrs	r3, r3, #5
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5a:	0a1b      	lsrs	r3, r3, #8
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	09db      	lsrs	r3, r3, #7
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	099b      	lsrs	r3, r3, #6
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	095b      	lsrs	r3, r3, #5
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	091b      	lsrs	r3, r3, #4
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	089b      	lsrs	r3, r3, #2
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	f003 0303 	and.w	r3, r3, #3
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	f003 0303 	and.w	r3, r3, #3
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	085b      	lsrs	r3, r3, #1
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006e52:	b5b0      	push	{r4, r5, r7, lr}
 8006e54:	b08e      	sub	sp, #56	; 0x38
 8006e56:	af04      	add	r7, sp, #16
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2203      	movs	r2, #3
 8006e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d02e      	beq.n	8006ece <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e76:	d106      	bne.n	8006e86 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	639a      	str	r2, [r3, #56]	; 0x38
 8006e84:	e029      	b.n	8006eda <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e8c:	d10a      	bne.n	8006ea4 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fa98 	bl	80073c4 <SD_WideBus_Enable>
 8006e94:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	639a      	str	r2, [r3, #56]	; 0x38
 8006ea2:	e01a      	b.n	8006eda <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10a      	bne.n	8006ec0 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fad7 	bl	800745e <SD_WideBus_Disable>
 8006eb0:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	431a      	orrs	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	639a      	str	r2, [r3, #56]	; 0x38
 8006ebe:	e00c      	b.n	8006eda <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	639a      	str	r2, [r3, #56]	; 0x38
 8006ecc:	e005      	b.n	8006eda <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00a      	beq.n	8006ef8 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006eea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e024      	b.n	8006f42 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681d      	ldr	r5, [r3, #0]
 8006f1e:	466c      	mov	r4, sp
 8006f20:	f107 0318 	add.w	r3, r7, #24
 8006f24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006f28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006f2c:	f107 030c 	add.w	r3, r7, #12
 8006f30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f32:	4628      	mov	r0, r5
 8006f34:	f001 fcd6 	bl	80088e4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3728      	adds	r7, #40	; 0x28
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bdb0      	pop	{r4, r5, r7, pc}

08006f4a <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b086      	sub	sp, #24
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8006f52:	2304      	movs	r3, #4
 8006f54:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006f56:	2300      	movs	r3, #0
 8006f58:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8006f5e:	f107 030c 	add.w	r3, r7, #12
 8006f62:	4619      	mov	r1, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fa03 	bl	8007370 <SD_SendStatus>
 8006f6a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	0a5b      	lsrs	r3, r3, #9
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	f003 030f 	and.w	r3, r3, #15
 8006f88:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8006f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d002      	beq.n	8006fb0 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d127      	bne.n	8007008 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f7ff ffc6 	bl	8006f4a <HAL_SD_GetCardState>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006fd0:	7afb      	ldrb	r3, [r7, #11]
 8006fd2:	2b06      	cmp	r3, #6
 8006fd4:	d002      	beq.n	8006fdc <SD_DMATxAbort+0x48>
 8006fd6:	7afb      	ldrb	r3, [r7, #11]
 8006fd8:	2b05      	cmp	r3, #5
 8006fda:	d115      	bne.n	8007008 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f001 fe11 	bl	8008c08 <SDMMC_CmdStopTransfer>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fec:	431a      	orrs	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <SD_DMATxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f7ff fcca 	bl	8006994 <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 8007000:	e002      	b.n	8007008 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f7ff fcbc 	bl	8006980 <HAL_SD_ErrorCallback>
}
 8007008:	bf00      	nop
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007030:	2b00      	cmp	r3, #0
 8007032:	d127      	bne.n	8007084 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f7ff ff88 	bl	8006f4a <HAL_SD_GetCardState>
 800703a:	4603      	mov	r3, r0
 800703c:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800704c:	7afb      	ldrb	r3, [r7, #11]
 800704e:	2b06      	cmp	r3, #6
 8007050:	d002      	beq.n	8007058 <SD_DMARxAbort+0x48>
 8007052:	7afb      	ldrb	r3, [r7, #11]
 8007054:	2b05      	cmp	r3, #5
 8007056:	d115      	bne.n	8007084 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4618      	mov	r0, r3
 800705e:	f001 fdd3 	bl	8008c08 <SDMMC_CmdStopTransfer>
 8007062:	4602      	mov	r2, r0
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007068:	431a      	orrs	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <SD_DMARxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f7ff fc8c 	bl	8006994 <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 800707c:	e002      	b.n	8007084 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f7ff fc7e 	bl	8006980 <HAL_SD_ErrorCallback>
}
 8007084:	bf00      	nop
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800708c:	b5b0      	push	{r4, r5, r7, lr}
 800708e:	b094      	sub	sp, #80	; 0x50
 8007090:	af04      	add	r7, sp, #16
 8007092:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007094:	2300      	movs	r3, #0
 8007096:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8007098:	2301      	movs	r3, #1
 800709a:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f001 fc76 	bl	8008992 <SDIO_GetPowerState>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d102      	bne.n	80070b2 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80070ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80070b0:	e0b2      	b.n	8007218 <SD_InitCard+0x18c>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d02f      	beq.n	800711a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4618      	mov	r0, r3
 80070c0:	f001 febc 	bl	8008e3c <SDMMC_CmdSendCID>
 80070c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80070c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <SD_InitCard+0x44>
    {
      return errorstate;
 80070cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ce:	e0a3      	b.n	8007218 <SD_InitCard+0x18c>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2100      	movs	r1, #0
 80070d6:	4618      	mov	r0, r3
 80070d8:	f001 fca0 	bl	8008a1c <SDIO_GetResponse>
 80070dc:	4602      	mov	r2, r0
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2104      	movs	r1, #4
 80070e8:	4618      	mov	r0, r3
 80070ea:	f001 fc97 	bl	8008a1c <SDIO_GetResponse>
 80070ee:	4602      	mov	r2, r0
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2108      	movs	r1, #8
 80070fa:	4618      	mov	r0, r3
 80070fc:	f001 fc8e 	bl	8008a1c <SDIO_GetResponse>
 8007100:	4602      	mov	r2, r0
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	210c      	movs	r1, #12
 800710c:	4618      	mov	r0, r3
 800710e:	f001 fc85 	bl	8008a1c <SDIO_GetResponse>
 8007112:	4602      	mov	r2, r0
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711e:	2b03      	cmp	r3, #3
 8007120:	d00d      	beq.n	800713e <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f107 020e 	add.w	r2, r7, #14
 800712a:	4611      	mov	r1, r2
 800712c:	4618      	mov	r0, r3
 800712e:	f001 fec6 	bl	8008ebe <SDMMC_CmdSetRelAdd>
 8007132:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <SD_InitCard+0xb2>
    {
      return errorstate;
 800713a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800713c:	e06c      	b.n	8007218 <SD_InitCard+0x18c>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007142:	2b03      	cmp	r3, #3
 8007144:	d036      	beq.n	80071b4 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007146:	89fb      	ldrh	r3, [r7, #14]
 8007148:	461a      	mov	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007156:	041b      	lsls	r3, r3, #16
 8007158:	4619      	mov	r1, r3
 800715a:	4610      	mov	r0, r2
 800715c:	f001 fe8e 	bl	8008e7c <SDMMC_CmdSendCSD>
 8007160:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <SD_InitCard+0xe0>
    {
      return errorstate;
 8007168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800716a:	e055      	b.n	8007218 <SD_InitCard+0x18c>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2100      	movs	r1, #0
 8007172:	4618      	mov	r0, r3
 8007174:	f001 fc52 	bl	8008a1c <SDIO_GetResponse>
 8007178:	4602      	mov	r2, r0
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2104      	movs	r1, #4
 8007184:	4618      	mov	r0, r3
 8007186:	f001 fc49 	bl	8008a1c <SDIO_GetResponse>
 800718a:	4602      	mov	r2, r0
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2108      	movs	r1, #8
 8007196:	4618      	mov	r0, r3
 8007198:	f001 fc40 	bl	8008a1c <SDIO_GetResponse>
 800719c:	4602      	mov	r2, r0
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	210c      	movs	r1, #12
 80071a8:	4618      	mov	r0, r3
 80071aa:	f001 fc37 	bl	8008a1c <SDIO_GetResponse>
 80071ae:	4602      	mov	r2, r0
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2104      	movs	r1, #4
 80071ba:	4618      	mov	r0, r3
 80071bc:	f001 fc2e 	bl	8008a1c <SDIO_GetResponse>
 80071c0:	4603      	mov	r3, r0
 80071c2:	0d1a      	lsrs	r2, r3, #20
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80071c8:	f107 0310 	add.w	r3, r7, #16
 80071cc:	4619      	mov	r1, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7ff fbea 	bl	80069a8 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6819      	ldr	r1, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071dc:	041b      	lsls	r3, r3, #16
 80071de:	2200      	movs	r2, #0
 80071e0:	461c      	mov	r4, r3
 80071e2:	4615      	mov	r5, r2
 80071e4:	4622      	mov	r2, r4
 80071e6:	462b      	mov	r3, r5
 80071e8:	4608      	mov	r0, r1
 80071ea:	f001 fd31 	bl	8008c50 <SDMMC_CmdSelDesel>
 80071ee:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80071f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <SD_InitCard+0x16e>
  {
    return errorstate;
 80071f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f8:	e00e      	b.n	8007218 <SD_InitCard+0x18c>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681d      	ldr	r5, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	466c      	mov	r4, sp
 8007202:	f103 0210 	add.w	r2, r3, #16
 8007206:	ca07      	ldmia	r2, {r0, r1, r2}
 8007208:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800720c:	3304      	adds	r3, #4
 800720e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007210:	4628      	mov	r0, r5
 8007212:	f001 fb67 	bl	80088e4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3740      	adds	r7, #64	; 0x40
 800721c:	46bd      	mov	sp, r7
 800721e:	bdb0      	pop	{r4, r5, r7, pc}

08007220 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	2300      	movs	r3, #0
 8007232:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007234:	2300      	movs	r3, #0
 8007236:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4618      	mov	r0, r3
 800723e:	f001 fd2c 	bl	8008c9a <SDMMC_CmdGoIdleState>
 8007242:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <SD_PowerON+0x2e>
  {
    return errorstate;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	e08c      	b.n	8007368 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4618      	mov	r0, r3
 8007254:	f001 fd41 	bl	8008cda <SDMMC_CmdOperCond>
 8007258:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d03d      	beq.n	80072dc <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8007266:	e032      	b.n	80072ce <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	60ba      	str	r2, [r7, #8]
 800726e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007272:	4293      	cmp	r3, r2
 8007274:	d102      	bne.n	800727c <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007276:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800727a:	e075      	b.n	8007368 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2100      	movs	r1, #0
 8007282:	4618      	mov	r0, r3
 8007284:	f001 fd4a 	bl	8008d1c <SDMMC_CmdAppCommand>
 8007288:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007290:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007294:	e068      	b.n	8007368 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2100      	movs	r1, #0
 800729c:	4618      	mov	r0, r3
 800729e:	f001 fd61 	bl	8008d64 <SDMMC_CmdAppOperCommand>
 80072a2:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d002      	beq.n	80072b0 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80072ae:	e05b      	b.n	8007368 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2100      	movs	r1, #0
 80072b6:	4618      	mov	r0, r3
 80072b8:	f001 fbb0 	bl	8008a1c <SDIO_GetResponse>
 80072bc:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	0fdb      	lsrs	r3, r3, #31
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d101      	bne.n	80072ca <SD_PowerON+0xaa>
 80072c6:	2301      	movs	r3, #1
 80072c8:	e000      	b.n	80072cc <SD_PowerON+0xac>
 80072ca:	2300      	movs	r3, #0
 80072cc:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0c9      	beq.n	8007268 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	645a      	str	r2, [r3, #68]	; 0x44
 80072da:	e044      	b.n	8007366 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 80072e2:	e031      	b.n	8007348 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	60ba      	str	r2, [r7, #8]
 80072ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d102      	bne.n	80072f8 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80072f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072f6:	e037      	b.n	8007368 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2100      	movs	r1, #0
 80072fe:	4618      	mov	r0, r3
 8007300:	f001 fd0c 	bl	8008d1c <SDMMC_CmdAppCommand>
 8007304:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <SD_PowerON+0xf0>
      {
        return errorstate;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	e02b      	b.n	8007368 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007318:	4618      	mov	r0, r3
 800731a:	f001 fd23 	bl	8008d64 <SDMMC_CmdAppOperCommand>
 800731e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <SD_PowerON+0x10a>
      {
        return errorstate;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	e01e      	b.n	8007368 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2100      	movs	r1, #0
 8007330:	4618      	mov	r0, r3
 8007332:	f001 fb73 	bl	8008a1c <SDIO_GetResponse>
 8007336:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	0fdb      	lsrs	r3, r3, #31
 800733c:	2b01      	cmp	r3, #1
 800733e:	d101      	bne.n	8007344 <SD_PowerON+0x124>
 8007340:	2301      	movs	r3, #1
 8007342:	e000      	b.n	8007346 <SD_PowerON+0x126>
 8007344:	2300      	movs	r3, #0
 8007346:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0ca      	beq.n	80072e4 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	645a      	str	r2, [r3, #68]	; 0x44
 800735e:	e002      	b.n	8007366 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800737a:	2300      	movs	r3, #0
 800737c:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d102      	bne.n	800738a <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8007384:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007388:	e018      	b.n	80073bc <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007392:	041b      	lsls	r3, r3, #16
 8007394:	4619      	mov	r1, r3
 8007396:	4610      	mov	r0, r2
 8007398:	f001 fdb4 	bl	8008f04 <SDMMC_CmdSendStatus>
 800739c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <SD_SendStatus+0x38>
  {
    return errorstate;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	e009      	b.n	80073bc <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2100      	movs	r1, #0
 80073ae:	4618      	mov	r0, r3
 80073b0:	f001 fb34 	bl	8008a1c <SDIO_GetResponse>
 80073b4:	4602      	mov	r2, r0
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	2300      	movs	r3, #0
 80073d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80073d4:	2300      	movs	r3, #0
 80073d6:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2100      	movs	r1, #0
 80073de:	4618      	mov	r0, r3
 80073e0:	f001 fb1c 	bl	8008a1c <SDIO_GetResponse>
 80073e4:	4603      	mov	r3, r0
 80073e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073ee:	d102      	bne.n	80073f6 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80073f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073f4:	e02f      	b.n	8007456 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80073f6:	f107 030c 	add.w	r3, r7, #12
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f87b 	bl	80074f8 <SD_FindSCR>
 8007402:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	e023      	b.n	8007456 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01c      	beq.n	8007452 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007420:	041b      	lsls	r3, r3, #16
 8007422:	4619      	mov	r1, r3
 8007424:	4610      	mov	r0, r2
 8007426:	f001 fc79 	bl	8008d1c <SDMMC_CmdAppCommand>
 800742a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	e00f      	b.n	8007456 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2102      	movs	r1, #2
 800743c:	4618      	mov	r0, r3
 800743e:	f001 fcb6 	bl	8008dae <SDMMC_CmdBusWidth>
 8007442:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d001      	beq.n	800744e <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	e003      	b.n	8007456 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800744e:	2300      	movs	r3, #0
 8007450:	e001      	b.n	8007456 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007452:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b086      	sub	sp, #24
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007466:	2300      	movs	r3, #0
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	2300      	movs	r3, #0
 800746c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800746e:	2300      	movs	r3, #0
 8007470:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2100      	movs	r1, #0
 8007478:	4618      	mov	r0, r3
 800747a:	f001 facf 	bl	8008a1c <SDIO_GetResponse>
 800747e:	4603      	mov	r3, r0
 8007480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007484:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007488:	d102      	bne.n	8007490 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800748a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800748e:	e02f      	b.n	80074f0 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007490:	f107 030c 	add.w	r3, r7, #12
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f82e 	bl	80074f8 <SD_FindSCR>
 800749c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	e023      	b.n	80074f0 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d01c      	beq.n	80074ec <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ba:	041b      	lsls	r3, r3, #16
 80074bc:	4619      	mov	r1, r3
 80074be:	4610      	mov	r0, r2
 80074c0:	f001 fc2c 	bl	8008d1c <SDMMC_CmdAppCommand>
 80074c4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	e00f      	b.n	80074f0 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2100      	movs	r1, #0
 80074d6:	4618      	mov	r0, r3
 80074d8:	f001 fc69 	bl	8008dae <SDMMC_CmdBusWidth>
 80074dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	e003      	b.n	80074f0 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 80074e8:	2300      	movs	r3, #0
 80074ea:	e001      	b.n	80074f0 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80074ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80074f8:	b590      	push	{r4, r7, lr}
 80074fa:	b08f      	sub	sp, #60	; 0x3c
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007502:	2300      	movs	r3, #0
 8007504:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8007506:	f7fc fab5 	bl	8003a74 <HAL_GetTick>
 800750a:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007510:	2300      	movs	r3, #0
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	2300      	movs	r3, #0
 8007516:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2108      	movs	r1, #8
 800751e:	4618      	mov	r0, r3
 8007520:	f001 fabd 	bl	8008a9e <SDMMC_CmdBlockLength>
 8007524:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8007526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <SD_FindSCR+0x38>
  {
    return errorstate;
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	e0a8      	b.n	8007682 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007538:	041b      	lsls	r3, r3, #16
 800753a:	4619      	mov	r1, r3
 800753c:	4610      	mov	r0, r2
 800753e:	f001 fbed 	bl	8008d1c <SDMMC_CmdAppCommand>
 8007542:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <SD_FindSCR+0x56>
  {
    return errorstate;
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	e099      	b.n	8007682 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800754e:	f04f 33ff 	mov.w	r3, #4294967295
 8007552:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8007554:	2308      	movs	r3, #8
 8007556:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007558:	2330      	movs	r3, #48	; 0x30
 800755a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800755c:	2302      	movs	r3, #2
 800755e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007560:	2300      	movs	r3, #0
 8007562:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007564:	2301      	movs	r3, #1
 8007566:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f107 0214 	add.w	r2, r7, #20
 8007570:	4611      	mov	r1, r2
 8007572:	4618      	mov	r0, r3
 8007574:	f001 fa67 	bl	8008a46 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4618      	mov	r0, r3
 800757e:	f001 fc3a 	bl	8008df6 <SDMMC_CmdSendSCR>
 8007582:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	2b00      	cmp	r3, #0
 8007588:	d022      	beq.n	80075d0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	e079      	b.n	8007682 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00e      	beq.n	80075ba <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6819      	ldr	r1, [r3, #0]
 80075a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	f107 020c 	add.w	r2, r7, #12
 80075a8:	18d4      	adds	r4, r2, r3
 80075aa:	4608      	mov	r0, r1
 80075ac:	f001 f9c5 	bl	800893a <SDIO_ReadFIFO>
 80075b0:	4603      	mov	r3, r0
 80075b2:	6023      	str	r3, [r4, #0]
      index++;
 80075b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b6:	3301      	adds	r3, #1
 80075b8:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80075ba:	f7fc fa5b 	bl	8003a74 <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c8:	d102      	bne.n	80075d0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80075ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075ce:	e058      	b.n	8007682 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075d6:	f240 432a 	movw	r3, #1066	; 0x42a
 80075da:	4013      	ands	r3, r2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0d6      	beq.n	800758e <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e6:	f003 0308 	and.w	r3, r3, #8
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d005      	beq.n	80075fa <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2208      	movs	r2, #8
 80075f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80075f6:	2308      	movs	r3, #8
 80075f8:	e043      	b.n	8007682 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007600:	f003 0302 	and.w	r3, r3, #2
 8007604:	2b00      	cmp	r3, #0
 8007606:	d005      	beq.n	8007614 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2202      	movs	r2, #2
 800760e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007610:	2302      	movs	r3, #2
 8007612:	e036      	b.n	8007682 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b00      	cmp	r3, #0
 8007620:	d005      	beq.n	800762e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2220      	movs	r2, #32
 8007628:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800762a:	2320      	movs	r3, #32
 800762c:	e029      	b.n	8007682 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007636:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	061a      	lsls	r2, r3, #24
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	021b      	lsls	r3, r3, #8
 8007640:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007644:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	0a1b      	lsrs	r3, r3, #8
 800764a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800764e:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800765a:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800765c:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	061a      	lsls	r2, r3, #24
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	021b      	lsls	r3, r3, #8
 8007666:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800766a:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	0a1b      	lsrs	r3, r3, #8
 8007670:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8007674:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	0e1b      	lsrs	r3, r3, #24
 800767a:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	373c      	adds	r7, #60	; 0x3c
 8007686:	46bd      	mov	sp, r7
 8007688:	bd90      	pop	{r4, r7, pc}

0800768a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800768a:	b590      	push	{r4, r7, lr}
 800768c:	b085      	sub	sp, #20
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769a:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 800769c:	2300      	movs	r3, #0
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	e00d      	b.n	80076be <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6819      	ldr	r1, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	18d4      	adds	r4, r2, r3
 80076ae:	4608      	mov	r0, r1
 80076b0:	f001 f943 	bl	800893a <SDIO_ReadFIFO>
 80076b4:	4603      	mov	r3, r0
 80076b6:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3301      	adds	r3, #1
 80076bc:	60fb      	str	r3, [r7, #12]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b07      	cmp	r3, #7
 80076c2:	d9ee      	bls.n	80076a2 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c8:	f103 0220 	add.w	r2, r3, #32
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd90      	pop	{r4, r7, pc}

080076da <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 80076ec:	2300      	movs	r3, #0
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	e00b      	b.n	800770a <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6818      	ldr	r0, [r3, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	4413      	add	r3, r2
 80076fe:	4619      	mov	r1, r3
 8007700:	f001 f928 	bl	8008954 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	3301      	adds	r3, #1
 8007708:	60fb      	str	r3, [r7, #12]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b07      	cmp	r3, #7
 800770e:	d9f0      	bls.n	80076f2 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a1b      	ldr	r3, [r3, #32]
 8007714:	f103 0220 	add.w	r2, r3, #32
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e01d      	b.n	8007774 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b00      	cmp	r3, #0
 8007742:	d106      	bne.n	8007752 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f002 fc33 	bl	8009fb8 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2202      	movs	r2, #2
 8007756:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	3304      	adds	r3, #4
 8007762:	4619      	mov	r1, r3
 8007764:	4610      	mov	r0, r2
 8007766:	f000 f955 	bl	8007a14 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <HAL_TIM_Base_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68da      	ldr	r2, [r3, #12]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f042 0201 	orr.w	r2, r2, #1
 8007792:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f042 0201 	orr.w	r2, r2, #1
 80077a2:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b082      	sub	sp, #8
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d122      	bne.n	800780e <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d11b      	bne.n	800780e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f06f 0202 	mvn.w	r2, #2
 80077de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	f003 0303 	and.w	r3, r3, #3
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d003      	beq.n	80077fc <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f8ee 	bl	80079d6 <HAL_TIM_IC_CaptureCallback>
 80077fa:	e005      	b.n	8007808 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f8e0 	bl	80079c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f8f1 	bl	80079ea <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	f003 0304 	and.w	r3, r3, #4
 8007818:	2b04      	cmp	r3, #4
 800781a:	d122      	bne.n	8007862 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f003 0304 	and.w	r3, r3, #4
 8007826:	2b04      	cmp	r3, #4
 8007828:	d11b      	bne.n	8007862 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f06f 0204 	mvn.w	r2, #4
 8007832:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007844:	2b00      	cmp	r3, #0
 8007846:	d003      	beq.n	8007850 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f8c4 	bl	80079d6 <HAL_TIM_IC_CaptureCallback>
 800784e:	e005      	b.n	800785c <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f8b6 	bl	80079c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f8c7 	bl	80079ea <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	f003 0308 	and.w	r3, r3, #8
 800786c:	2b08      	cmp	r3, #8
 800786e:	d122      	bne.n	80078b6 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	f003 0308 	and.w	r3, r3, #8
 800787a:	2b08      	cmp	r3, #8
 800787c:	d11b      	bne.n	80078b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f06f 0208 	mvn.w	r2, #8
 8007886:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2204      	movs	r2, #4
 800788c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	f003 0303 	and.w	r3, r3, #3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d003      	beq.n	80078a4 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f89a 	bl	80079d6 <HAL_TIM_IC_CaptureCallback>
 80078a2:	e005      	b.n	80078b0 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f88c 	bl	80079c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f89d 	bl	80079ea <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	f003 0310 	and.w	r3, r3, #16
 80078c0:	2b10      	cmp	r3, #16
 80078c2:	d122      	bne.n	800790a <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f003 0310 	and.w	r3, r3, #16
 80078ce:	2b10      	cmp	r3, #16
 80078d0:	d11b      	bne.n	800790a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f06f 0210 	mvn.w	r2, #16
 80078da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2208      	movs	r2, #8
 80078e0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d003      	beq.n	80078f8 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f870 	bl	80079d6 <HAL_TIM_IC_CaptureCallback>
 80078f6:	e005      	b.n	8007904 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f862 	bl	80079c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f873 	bl	80079ea <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b01      	cmp	r3, #1
 8007916:	d10e      	bne.n	8007936 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b01      	cmp	r3, #1
 8007924:	d107      	bne.n	8007936 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f06f 0201 	mvn.w	r2, #1
 800792e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7fc f80b 	bl	800394c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007940:	2b80      	cmp	r3, #128	; 0x80
 8007942:	d10e      	bne.n	8007962 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800794e:	2b80      	cmp	r3, #128	; 0x80
 8007950:	d107      	bne.n	8007962 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800795a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f90d 	bl	8007b7c <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796c:	2b40      	cmp	r3, #64	; 0x40
 800796e:	d10e      	bne.n	800798e <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800797a:	2b40      	cmp	r3, #64	; 0x40
 800797c:	d107      	bne.n	800798e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007986:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f838 	bl	80079fe <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	f003 0320 	and.w	r3, r3, #32
 8007998:	2b20      	cmp	r3, #32
 800799a:	d10e      	bne.n	80079ba <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	f003 0320 	and.w	r3, r3, #32
 80079a6:	2b20      	cmp	r3, #32
 80079a8:	d107      	bne.n	80079ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f06f 0220 	mvn.w	r2, #32
 80079b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f8d7 	bl	8007b68 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80079ba:	bf00      	nop
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079ca:	bf00      	nop
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079de:	bf00      	nop
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079f2:	bf00      	nop
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a06:	bf00      	nop
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
	...

08007a14 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a44      	ldr	r2, [pc, #272]	; (8007b3c <TIM_Base_SetConfig+0x128>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d013      	beq.n	8007a58 <TIM_Base_SetConfig+0x44>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a36:	d00f      	beq.n	8007a58 <TIM_Base_SetConfig+0x44>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a41      	ldr	r2, [pc, #260]	; (8007b40 <TIM_Base_SetConfig+0x12c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d00b      	beq.n	8007a58 <TIM_Base_SetConfig+0x44>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a40      	ldr	r2, [pc, #256]	; (8007b44 <TIM_Base_SetConfig+0x130>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d007      	beq.n	8007a58 <TIM_Base_SetConfig+0x44>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a3f      	ldr	r2, [pc, #252]	; (8007b48 <TIM_Base_SetConfig+0x134>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d003      	beq.n	8007a58 <TIM_Base_SetConfig+0x44>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a3e      	ldr	r2, [pc, #248]	; (8007b4c <TIM_Base_SetConfig+0x138>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d101      	bne.n	8007a5c <TIM_Base_SetConfig+0x48>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e000      	b.n	8007a5e <TIM_Base_SetConfig+0x4a>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d008      	beq.n	8007a74 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a31      	ldr	r2, [pc, #196]	; (8007b3c <TIM_Base_SetConfig+0x128>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d02b      	beq.n	8007ad4 <TIM_Base_SetConfig+0xc0>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a82:	d027      	beq.n	8007ad4 <TIM_Base_SetConfig+0xc0>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a2e      	ldr	r2, [pc, #184]	; (8007b40 <TIM_Base_SetConfig+0x12c>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d023      	beq.n	8007ad4 <TIM_Base_SetConfig+0xc0>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a2d      	ldr	r2, [pc, #180]	; (8007b44 <TIM_Base_SetConfig+0x130>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d01f      	beq.n	8007ad4 <TIM_Base_SetConfig+0xc0>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a2c      	ldr	r2, [pc, #176]	; (8007b48 <TIM_Base_SetConfig+0x134>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d01b      	beq.n	8007ad4 <TIM_Base_SetConfig+0xc0>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a2b      	ldr	r2, [pc, #172]	; (8007b4c <TIM_Base_SetConfig+0x138>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d017      	beq.n	8007ad4 <TIM_Base_SetConfig+0xc0>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a2a      	ldr	r2, [pc, #168]	; (8007b50 <TIM_Base_SetConfig+0x13c>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d013      	beq.n	8007ad4 <TIM_Base_SetConfig+0xc0>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a29      	ldr	r2, [pc, #164]	; (8007b54 <TIM_Base_SetConfig+0x140>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d00f      	beq.n	8007ad4 <TIM_Base_SetConfig+0xc0>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a28      	ldr	r2, [pc, #160]	; (8007b58 <TIM_Base_SetConfig+0x144>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d00b      	beq.n	8007ad4 <TIM_Base_SetConfig+0xc0>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a27      	ldr	r2, [pc, #156]	; (8007b5c <TIM_Base_SetConfig+0x148>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d007      	beq.n	8007ad4 <TIM_Base_SetConfig+0xc0>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a26      	ldr	r2, [pc, #152]	; (8007b60 <TIM_Base_SetConfig+0x14c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d003      	beq.n	8007ad4 <TIM_Base_SetConfig+0xc0>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a25      	ldr	r2, [pc, #148]	; (8007b64 <TIM_Base_SetConfig+0x150>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d101      	bne.n	8007ad8 <TIM_Base_SetConfig+0xc4>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e000      	b.n	8007ada <TIM_Base_SetConfig+0xc6>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d008      	beq.n	8007af0 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	689a      	ldr	r2, [r3, #8]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a0c      	ldr	r2, [pc, #48]	; (8007b3c <TIM_Base_SetConfig+0x128>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d003      	beq.n	8007b16 <TIM_Base_SetConfig+0x102>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a0e      	ldr	r2, [pc, #56]	; (8007b4c <TIM_Base_SetConfig+0x138>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d101      	bne.n	8007b1a <TIM_Base_SetConfig+0x106>
 8007b16:	2301      	movs	r3, #1
 8007b18:	e000      	b.n	8007b1c <TIM_Base_SetConfig+0x108>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d003      	beq.n	8007b28 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	691a      	ldr	r2, [r3, #16]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	615a      	str	r2, [r3, #20]
}
 8007b2e:	bf00      	nop
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	40010000 	.word	0x40010000
 8007b40:	40000400 	.word	0x40000400
 8007b44:	40000800 	.word	0x40000800
 8007b48:	40000c00 	.word	0x40000c00
 8007b4c:	40010400 	.word	0x40010400
 8007b50:	40014000 	.word	0x40014000
 8007b54:	40014400 	.word	0x40014400
 8007b58:	40014800 	.word	0x40014800
 8007b5c:	40001800 	.word	0x40001800
 8007b60:	40001c00 	.word	0x40001c00
 8007b64:	40002000 	.word	0x40002000

08007b68 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e03f      	b.n	8007c22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d106      	bne.n	8007bbc <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f002 fa20 	bl	8009ffc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2224      	movs	r2, #36	; 0x24
 8007bc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bd2:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fc45 	bl	8008464 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	691a      	ldr	r2, [r3, #16]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	695a      	ldr	r2, [r3, #20]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bf8:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68da      	ldr	r2, [r3, #12]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c08:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b088      	sub	sp, #32
 8007c2e:	af02      	add	r7, sp, #8
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	603b      	str	r3, [r7, #0]
 8007c36:	4613      	mov	r3, r2
 8007c38:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	f040 8083 	bne.w	8007d52 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL ) || (Size == 0)) 
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <HAL_UART_Transmit+0x2e>
 8007c52:	88fb      	ldrh	r3, [r7, #6]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e07b      	b.n	8007d54 <HAL_UART_Transmit+0x12a>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d101      	bne.n	8007c6a <HAL_UART_Transmit+0x40>
 8007c66:	2302      	movs	r3, #2
 8007c68:	e074      	b.n	8007d54 <HAL_UART_Transmit+0x12a>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2221      	movs	r2, #33	; 0x21
 8007c7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007c80:	f7fb fef8 	bl	8003a74 <HAL_GetTick>
 8007c84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	88fa      	ldrh	r2, [r7, #6]
 8007c8a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	88fa      	ldrh	r2, [r7, #6]
 8007c90:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8007c92:	e042      	b.n	8007d1a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007caa:	d122      	bne.n	8007cf2 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2180      	movs	r1, #128	; 0x80
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 fa52 	bl	8008160 <UART_WaitOnFlagUntilTimeout>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e046      	b.n	8007d54 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	881b      	ldrh	r3, [r3, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cd8:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d103      	bne.n	8007cea <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	3302      	adds	r3, #2
 8007ce6:	60bb      	str	r3, [r7, #8]
 8007ce8:	e017      	b.n	8007d1a <HAL_UART_Transmit+0xf0>
        }
        else
        { 
          pData +=1U;
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	3301      	adds	r3, #1
 8007cee:	60bb      	str	r3, [r7, #8]
 8007cf0:	e013      	b.n	8007d1a <HAL_UART_Transmit+0xf0>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2180      	movs	r1, #128	; 0x80
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 fa2f 	bl	8008160 <UART_WaitOnFlagUntilTimeout>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e023      	b.n	8007d54 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	1c5a      	adds	r2, r3, #1
 8007d10:	60ba      	str	r2, [r7, #8]
 8007d12:	781a      	ldrb	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1b7      	bne.n	8007c94 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2140      	movs	r1, #64	; 0x40
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 fa16 	bl	8008160 <UART_WaitOnFlagUntilTimeout>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <HAL_UART_Transmit+0x114>
    { 
      return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e00a      	b.n	8007d54 <HAL_UART_Transmit+0x12a>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2220      	movs	r2, #32
 8007d42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	e000      	b.n	8007d54 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007d52:	2302      	movs	r3, #2
  }
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{ 
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b088      	sub	sp, #32
 8007d60:	af02      	add	r7, sp, #8
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b20      	cmp	r3, #32
 8007d7a:	f040 8090 	bne.w	8007e9e <HAL_UART_Receive+0x142>
  {
    if((pData == NULL ) || (Size == 0)) 
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <HAL_UART_Receive+0x2e>
 8007d84:	88fb      	ldrh	r3, [r7, #6]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e088      	b.n	8007ea0 <HAL_UART_Receive+0x144>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d101      	bne.n	8007d9c <HAL_UART_Receive+0x40>
 8007d98:	2302      	movs	r3, #2
 8007d9a:	e081      	b.n	8007ea0 <HAL_UART_Receive+0x144>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2222      	movs	r2, #34	; 0x22
 8007dae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007db2:	f7fb fe5f 	bl	8003a74 <HAL_GetTick>
 8007db6:	6178      	str	r0, [r7, #20]
        
    huart->RxXferSize = Size; 
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	88fa      	ldrh	r2, [r7, #6]
 8007dbc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	88fa      	ldrh	r2, [r7, #6]
 8007dc2:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8007dc4:	e05c      	b.n	8007e80 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ddc:	d12b      	bne.n	8007e36 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2200      	movs	r2, #0
 8007de6:	2120      	movs	r1, #32
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f000 f9b9 	bl	8008160 <UART_WaitOnFlagUntilTimeout>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e053      	b.n	8007ea0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*) pData;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10c      	bne.n	8007e1e <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	3302      	adds	r3, #2
 8007e1a:	60bb      	str	r3, [r7, #8]
 8007e1c:	e030      	b.n	8007e80 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	3301      	adds	r3, #1
 8007e32:	60bb      	str	r3, [r7, #8]
 8007e34:	e024      	b.n	8007e80 <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	2120      	movs	r1, #32
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 f98d 	bl	8008160 <UART_WaitOnFlagUntilTimeout>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d001      	beq.n	8007e50 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e027      	b.n	8007ea0 <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d108      	bne.n	8007e6a <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6859      	ldr	r1, [r3, #4]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	60ba      	str	r2, [r7, #8]
 8007e64:	b2ca      	uxtb	r2, r1
 8007e66:	701a      	strb	r2, [r3, #0]
 8007e68:	e00a      	b.n	8007e80 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	1c59      	adds	r1, r3, #1
 8007e76:	60b9      	str	r1, [r7, #8]
 8007e78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007e7c:	b2d2      	uxtb	r2, r2
 8007e7e:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d19d      	bne.n	8007dc6 <HAL_UART_Receive+0x6a>
        
      }
    }
    
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	e000      	b.n	8007ea0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;   
 8007e9e:	2302      	movs	r3, #2
  }
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3718      	adds	r7, #24
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b20      	cmp	r3, #32
 8007ec0:	d138      	bne.n	8007f34 <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d002      	beq.n	8007ece <HAL_UART_Receive_IT+0x26>
 8007ec8:	88fb      	ldrh	r3, [r7, #6]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e031      	b.n	8007f36 <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d101      	bne.n	8007ee0 <HAL_UART_Receive_IT+0x38>
 8007edc:	2302      	movs	r3, #2
 8007ede:	e02a      	b.n	8007f36 <HAL_UART_Receive_IT+0x8e>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	88fa      	ldrh	r2, [r7, #6]
 8007ef2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	88fa      	ldrh	r2, [r7, #6]
 8007ef8:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2222      	movs	r2, #34	; 0x22
 8007f04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	695a      	ldr	r2, [r3, #20]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f042 0201 	orr.w	r2, r2, #1
 8007f1e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68da      	ldr	r2, [r3, #12]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007f2e:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	e000      	b.n	8007f36 <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 8007f34:	2302      	movs	r3, #2
  }
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
	...

08007f44 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b088      	sub	sp, #32
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	f003 030f 	and.w	r3, r3, #15
 8007f72:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10d      	bne.n	8007f96 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	f003 0320 	and.w	r3, r3, #32
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d008      	beq.n	8007f96 <HAL_UART_IRQHandler+0x52>
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	f003 0320 	and.w	r3, r3, #32
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f9d0 	bl	8008334 <UART_Receive_IT>
      return;
 8007f94:	e0cb      	b.n	800812e <HAL_UART_IRQHandler+0x1ea>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 80ab 	beq.w	80080f4 <HAL_UART_IRQHandler+0x1b0>
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d105      	bne.n	8007fb4 <HAL_UART_IRQHandler+0x70>
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f000 80a0 	beq.w	80080f4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <HAL_UART_IRQHandler+0x90>
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d005      	beq.n	8007fd4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fcc:	f043 0201 	orr.w	r2, r3, #1
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	f003 0304 	and.w	r3, r3, #4
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00a      	beq.n	8007ff4 <HAL_UART_IRQHandler+0xb0>
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d005      	beq.n	8007ff4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fec:	f043 0202 	orr.w	r2, r3, #2
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00a      	beq.n	8008014 <HAL_UART_IRQHandler+0xd0>
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	f003 0301 	and.w	r3, r3, #1
 8008004:	2b00      	cmp	r3, #0
 8008006:	d005      	beq.n	8008014 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800800c:	f043 0204 	orr.w	r2, r3, #4
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	f003 0308 	and.w	r3, r3, #8
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00a      	beq.n	8008034 <HAL_UART_IRQHandler+0xf0>
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f003 0301 	and.w	r3, r3, #1
 8008024:	2b00      	cmp	r3, #0
 8008026:	d005      	beq.n	8008034 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800802c:	f043 0208 	orr.w	r2, r3, #8
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008038:	2b00      	cmp	r3, #0
 800803a:	d077      	beq.n	800812c <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	f003 0320 	and.w	r3, r3, #32
 8008042:	2b00      	cmp	r3, #0
 8008044:	d007      	beq.n	8008056 <HAL_UART_IRQHandler+0x112>
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	f003 0320 	and.w	r3, r3, #32
 800804c:	2b00      	cmp	r3, #0
 800804e:	d002      	beq.n	8008056 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f96f 	bl	8008334 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	695b      	ldr	r3, [r3, #20]
 800805c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008060:	2b00      	cmp	r3, #0
 8008062:	bf14      	ite	ne
 8008064:	2301      	movne	r3, #1
 8008066:	2300      	moveq	r3, #0
 8008068:	b2db      	uxtb	r3, r3
 800806a:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008070:	f003 0308 	and.w	r3, r3, #8
 8008074:	2b00      	cmp	r3, #0
 8008076:	d102      	bne.n	800807e <HAL_UART_IRQHandler+0x13a>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d031      	beq.n	80080e2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f8b8 	bl	80081f4 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808e:	2b00      	cmp	r3, #0
 8008090:	d023      	beq.n	80080da <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	695a      	ldr	r2, [r3, #20]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080a0:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d013      	beq.n	80080d2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ae:	4a21      	ldr	r2, [pc, #132]	; (8008134 <HAL_UART_IRQHandler+0x1f0>)
 80080b0:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fb fe30 	bl	8003d1c <HAL_DMA_Abort_IT>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d016      	beq.n	80080f0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80080cc:	4610      	mov	r0, r2
 80080ce:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d0:	e00e      	b.n	80080f0 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f83a 	bl	800814c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d8:	e00a      	b.n	80080f0 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f836 	bl	800814c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e0:	e006      	b.n	80080f0 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f832 	bl	800814c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80080ee:	e01d      	b.n	800812c <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f0:	bf00      	nop
    return;
 80080f2:	e01b      	b.n	800812c <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d008      	beq.n	8008110 <HAL_UART_IRQHandler+0x1cc>
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008104:	2b00      	cmp	r3, #0
 8008106:	d003      	beq.n	8008110 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f8a5 	bl	8008258 <UART_Transmit_IT>
    return;
 800810e:	e00e      	b.n	800812e <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008116:	2b00      	cmp	r3, #0
 8008118:	d009      	beq.n	800812e <HAL_UART_IRQHandler+0x1ea>
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008120:	2b00      	cmp	r3, #0
 8008122:	d004      	beq.n	800812e <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f8ed 	bl	8008304 <UART_EndTransmit_IT>
    return;
 800812a:	e000      	b.n	800812e <HAL_UART_IRQHandler+0x1ea>
    return;
 800812c:	bf00      	nop
  }
}
 800812e:	3720      	adds	r7, #32
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	08008231 	.word	0x08008231

08008138 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	603b      	str	r3, [r7, #0]
 800816c:	4613      	mov	r3, r2
 800816e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8008170:	e02c      	b.n	80081cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008178:	d028      	beq.n	80081cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d007      	beq.n	8008190 <UART_WaitOnFlagUntilTimeout+0x30>
 8008180:	f7fb fc78 	bl	8003a74 <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	429a      	cmp	r2, r3
 800818e:	d21d      	bcs.n	80081cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68da      	ldr	r2, [r3, #12]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800819e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	695a      	ldr	r2, [r3, #20]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f022 0201 	bic.w	r2, r2, #1
 80081ae:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2220      	movs	r2, #32
 80081b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2220      	movs	r2, #32
 80081bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e00f      	b.n	80081ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	4013      	ands	r3, r2
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	429a      	cmp	r2, r3
 80081da:	bf0c      	ite	eq
 80081dc:	2301      	moveq	r3, #1
 80081de:	2300      	movne	r3, #0
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	461a      	mov	r2, r3
 80081e4:	79fb      	ldrb	r3, [r7, #7]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d0c3      	beq.n	8008172 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68da      	ldr	r2, [r3, #12]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800820a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	695a      	ldr	r2, [r3, #20]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0201 	bic.w	r2, r2, #1
 800821a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2220      	movs	r2, #32
 8008220:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f7ff ff7e 	bl	800814c <HAL_UART_ErrorCallback>
}
 8008250:	bf00      	nop
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008266:	b2db      	uxtb	r3, r3
 8008268:	2b21      	cmp	r3, #33	; 0x21
 800826a:	d144      	bne.n	80082f6 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008274:	d11a      	bne.n	80082ac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	461a      	mov	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800828a:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d105      	bne.n	80082a0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a1b      	ldr	r3, [r3, #32]
 8008298:	1c9a      	adds	r2, r3, #2
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	621a      	str	r2, [r3, #32]
 800829e:	e00e      	b.n	80082be <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a1b      	ldr	r3, [r3, #32]
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	621a      	str	r2, [r3, #32]
 80082aa:	e008      	b.n	80082be <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	1c59      	adds	r1, r3, #1
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	6211      	str	r1, [r2, #32]
 80082b6:	781a      	ldrb	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	3b01      	subs	r3, #1
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	4619      	mov	r1, r3
 80082cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10f      	bne.n	80082f2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68da      	ldr	r2, [r3, #12]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68da      	ldr	r2, [r3, #12]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	e000      	b.n	80082f8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80082f6:	2302      	movs	r3, #2
  }
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68da      	ldr	r2, [r3, #12]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800831a:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2220      	movs	r2, #32
 8008320:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7ff ff07 	bl	8008138 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]


  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b22      	cmp	r3, #34	; 0x22
 8008346:	f040 8088 	bne.w	800845a <UART_Receive_IT+0x126>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008352:	d123      	bne.n	800839c <UART_Receive_IT+0x68>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008358:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10e      	bne.n	8008380 <UART_Receive_IT+0x4c>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	b29b      	uxth	r3, r3
 800836a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836e:	b29a      	uxth	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008378:	1c9a      	adds	r2, r3, #2
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	629a      	str	r2, [r3, #40]	; 0x28
 800837e:	e029      	b.n	80083d4 <UART_Receive_IT+0xa0>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	b29b      	uxth	r3, r3
 8008388:	b2db      	uxtb	r3, r3
 800838a:	b29a      	uxth	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	629a      	str	r2, [r3, #40]	; 0x28
 800839a:	e01b      	b.n	80083d4 <UART_Receive_IT+0xa0>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10a      	bne.n	80083ba <UART_Receive_IT+0x86>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6858      	ldr	r0, [r3, #4]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ae:	1c59      	adds	r1, r3, #1
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	6291      	str	r1, [r2, #40]	; 0x28
 80083b4:	b2c2      	uxtb	r2, r0
 80083b6:	701a      	strb	r2, [r3, #0]
 80083b8:	e00c      	b.n	80083d4 <UART_Receive_IT+0xa0>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c6:	1c58      	adds	r0, r3, #1
 80083c8:	6879      	ldr	r1, [r7, #4]
 80083ca:	6288      	str	r0, [r1, #40]	; 0x28
 80083cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80083d0:	b2d2      	uxtb	r2, r2
 80083d2:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083d8:	b29b      	uxth	r3, r3
 80083da:	3b01      	subs	r3, #1
 80083dc:	b29b      	uxth	r3, r3
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	4619      	mov	r1, r3
 80083e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d136      	bne.n	8008456 <UART_Receive_IT+0x122>
    {
        //This allows the buffer to resize based on length of the Ground Station commands over UART
        if((*(huart->pRxBuffPtr-1)!= 0) && (huart->RxXferSize == 4)){
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ec:	3b01      	subs	r3, #1
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d017      	beq.n	8008424 <UART_Receive_IT+0xf0>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083f8:	2b04      	cmp	r3, #4
 80083fa:	d113      	bne.n	8008424 <UART_Receive_IT+0xf0>
            huart->RxXferCount = *(huart->pRxBuffPtr-1) + 1;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008400:	3b01      	subs	r3, #1
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	b29b      	uxth	r3, r3
 8008406:	3301      	adds	r3, #1
 8008408:	b29a      	uxth	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	85da      	strh	r2, [r3, #46]	; 0x2e
            huart->RxXferSize = *(huart->pRxBuffPtr-1) + 5;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008412:	3b01      	subs	r3, #1
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	b29b      	uxth	r3, r3
 8008418:	3305      	adds	r3, #5
 800841a:	b29a      	uxth	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	859a      	strh	r2, [r3, #44]	; 0x2c
            return HAL_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	e01b      	b.n	800845c <UART_Receive_IT+0x128>
        }
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68da      	ldr	r2, [r3, #12]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008432:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	695a      	ldr	r2, [r3, #20]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0201 	bic.w	r2, r2, #1
 8008442:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2220      	movs	r2, #32
 8008448:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7fb fa9d 	bl	800398c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	e002      	b.n	800845c <UART_Receive_IT+0x128>
    }
    return HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	e000      	b.n	800845c <UART_Receive_IT+0x128>
  }
  else
  {
    return HAL_BUSY;
 800845a:	2302      	movs	r3, #2
  }

#endif
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008464:	b5b0      	push	{r4, r5, r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800846c:	2300      	movs	r3, #0
 800846e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800847e:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	4313      	orrs	r3, r2
 8008488:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80084a0:	f023 030c 	bic.w	r3, r3, #12
 80084a4:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	689a      	ldr	r2, [r3, #8]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	431a      	orrs	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	431a      	orrs	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	4313      	orrs	r3, r2
 80084c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084d8:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	69db      	ldr	r3, [r3, #28]
 80084f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084f4:	f040 80e4 	bne.w	80086c0 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4aab      	ldr	r2, [pc, #684]	; (80087ac <UART_SetConfig+0x348>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d004      	beq.n	800850c <UART_SetConfig+0xa8>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4aaa      	ldr	r2, [pc, #680]	; (80087b0 <UART_SetConfig+0x34c>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d16c      	bne.n	80085e6 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800850c:	f7fd faac 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 8008510:	4602      	mov	r2, r0
 8008512:	4613      	mov	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	009a      	lsls	r2, r3, #2
 800851a:	441a      	add	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	005b      	lsls	r3, r3, #1
 8008522:	fbb2 f3f3 	udiv	r3, r2, r3
 8008526:	4aa3      	ldr	r2, [pc, #652]	; (80087b4 <UART_SetConfig+0x350>)
 8008528:	fba2 2303 	umull	r2, r3, r2, r3
 800852c:	095b      	lsrs	r3, r3, #5
 800852e:	011c      	lsls	r4, r3, #4
 8008530:	f7fd fa9a 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 8008534:	4602      	mov	r2, r0
 8008536:	4613      	mov	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	4413      	add	r3, r2
 800853c:	009a      	lsls	r2, r3, #2
 800853e:	441a      	add	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	fbb2 f5f3 	udiv	r5, r2, r3
 800854a:	f7fd fa8d 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 800854e:	4602      	mov	r2, r0
 8008550:	4613      	mov	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	009a      	lsls	r2, r3, #2
 8008558:	441a      	add	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	005b      	lsls	r3, r3, #1
 8008560:	fbb2 f3f3 	udiv	r3, r2, r3
 8008564:	4a93      	ldr	r2, [pc, #588]	; (80087b4 <UART_SetConfig+0x350>)
 8008566:	fba2 2303 	umull	r2, r3, r2, r3
 800856a:	095b      	lsrs	r3, r3, #5
 800856c:	2264      	movs	r2, #100	; 0x64
 800856e:	fb02 f303 	mul.w	r3, r2, r3
 8008572:	1aeb      	subs	r3, r5, r3
 8008574:	00db      	lsls	r3, r3, #3
 8008576:	3332      	adds	r3, #50	; 0x32
 8008578:	4a8e      	ldr	r2, [pc, #568]	; (80087b4 <UART_SetConfig+0x350>)
 800857a:	fba2 2303 	umull	r2, r3, r2, r3
 800857e:	095b      	lsrs	r3, r3, #5
 8008580:	005b      	lsls	r3, r3, #1
 8008582:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008586:	441c      	add	r4, r3
 8008588:	f7fd fa6e 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 800858c:	4602      	mov	r2, r0
 800858e:	4613      	mov	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	009a      	lsls	r2, r3, #2
 8008596:	441a      	add	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	005b      	lsls	r3, r3, #1
 800859e:	fbb2 f5f3 	udiv	r5, r2, r3
 80085a2:	f7fd fa61 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 80085a6:	4602      	mov	r2, r0
 80085a8:	4613      	mov	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	009a      	lsls	r2, r3, #2
 80085b0:	441a      	add	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	005b      	lsls	r3, r3, #1
 80085b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085bc:	4a7d      	ldr	r2, [pc, #500]	; (80087b4 <UART_SetConfig+0x350>)
 80085be:	fba2 2303 	umull	r2, r3, r2, r3
 80085c2:	095b      	lsrs	r3, r3, #5
 80085c4:	2264      	movs	r2, #100	; 0x64
 80085c6:	fb02 f303 	mul.w	r3, r2, r3
 80085ca:	1aeb      	subs	r3, r5, r3
 80085cc:	00db      	lsls	r3, r3, #3
 80085ce:	3332      	adds	r3, #50	; 0x32
 80085d0:	4a78      	ldr	r2, [pc, #480]	; (80087b4 <UART_SetConfig+0x350>)
 80085d2:	fba2 2303 	umull	r2, r3, r2, r3
 80085d6:	095b      	lsrs	r3, r3, #5
 80085d8:	f003 0207 	and.w	r2, r3, #7
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4422      	add	r2, r4
 80085e2:	609a      	str	r2, [r3, #8]
 80085e4:	e154      	b.n	8008890 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80085e6:	f7fd fa1d 	bl	8005a24 <HAL_RCC_GetPCLK1Freq>
 80085ea:	4602      	mov	r2, r0
 80085ec:	4613      	mov	r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	009a      	lsls	r2, r3, #2
 80085f4:	441a      	add	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	005b      	lsls	r3, r3, #1
 80085fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008600:	4a6c      	ldr	r2, [pc, #432]	; (80087b4 <UART_SetConfig+0x350>)
 8008602:	fba2 2303 	umull	r2, r3, r2, r3
 8008606:	095b      	lsrs	r3, r3, #5
 8008608:	011c      	lsls	r4, r3, #4
 800860a:	f7fd fa0b 	bl	8005a24 <HAL_RCC_GetPCLK1Freq>
 800860e:	4602      	mov	r2, r0
 8008610:	4613      	mov	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	009a      	lsls	r2, r3, #2
 8008618:	441a      	add	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	005b      	lsls	r3, r3, #1
 8008620:	fbb2 f5f3 	udiv	r5, r2, r3
 8008624:	f7fd f9fe 	bl	8005a24 <HAL_RCC_GetPCLK1Freq>
 8008628:	4602      	mov	r2, r0
 800862a:	4613      	mov	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	009a      	lsls	r2, r3, #2
 8008632:	441a      	add	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	005b      	lsls	r3, r3, #1
 800863a:	fbb2 f3f3 	udiv	r3, r2, r3
 800863e:	4a5d      	ldr	r2, [pc, #372]	; (80087b4 <UART_SetConfig+0x350>)
 8008640:	fba2 2303 	umull	r2, r3, r2, r3
 8008644:	095b      	lsrs	r3, r3, #5
 8008646:	2264      	movs	r2, #100	; 0x64
 8008648:	fb02 f303 	mul.w	r3, r2, r3
 800864c:	1aeb      	subs	r3, r5, r3
 800864e:	00db      	lsls	r3, r3, #3
 8008650:	3332      	adds	r3, #50	; 0x32
 8008652:	4a58      	ldr	r2, [pc, #352]	; (80087b4 <UART_SetConfig+0x350>)
 8008654:	fba2 2303 	umull	r2, r3, r2, r3
 8008658:	095b      	lsrs	r3, r3, #5
 800865a:	005b      	lsls	r3, r3, #1
 800865c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008660:	441c      	add	r4, r3
 8008662:	f7fd f9df 	bl	8005a24 <HAL_RCC_GetPCLK1Freq>
 8008666:	4602      	mov	r2, r0
 8008668:	4613      	mov	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	009a      	lsls	r2, r3, #2
 8008670:	441a      	add	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	005b      	lsls	r3, r3, #1
 8008678:	fbb2 f5f3 	udiv	r5, r2, r3
 800867c:	f7fd f9d2 	bl	8005a24 <HAL_RCC_GetPCLK1Freq>
 8008680:	4602      	mov	r2, r0
 8008682:	4613      	mov	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	009a      	lsls	r2, r3, #2
 800868a:	441a      	add	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	005b      	lsls	r3, r3, #1
 8008692:	fbb2 f3f3 	udiv	r3, r2, r3
 8008696:	4a47      	ldr	r2, [pc, #284]	; (80087b4 <UART_SetConfig+0x350>)
 8008698:	fba2 2303 	umull	r2, r3, r2, r3
 800869c:	095b      	lsrs	r3, r3, #5
 800869e:	2264      	movs	r2, #100	; 0x64
 80086a0:	fb02 f303 	mul.w	r3, r2, r3
 80086a4:	1aeb      	subs	r3, r5, r3
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	3332      	adds	r3, #50	; 0x32
 80086aa:	4a42      	ldr	r2, [pc, #264]	; (80087b4 <UART_SetConfig+0x350>)
 80086ac:	fba2 2303 	umull	r2, r3, r2, r3
 80086b0:	095b      	lsrs	r3, r3, #5
 80086b2:	f003 0207 	and.w	r2, r3, #7
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4422      	add	r2, r4
 80086bc:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80086be:	e0e7      	b.n	8008890 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a39      	ldr	r2, [pc, #228]	; (80087ac <UART_SetConfig+0x348>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d004      	beq.n	80086d4 <UART_SetConfig+0x270>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a38      	ldr	r2, [pc, #224]	; (80087b0 <UART_SetConfig+0x34c>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d171      	bne.n	80087b8 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80086d4:	f7fd f9c8 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 80086d8:	4602      	mov	r2, r0
 80086da:	4613      	mov	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	009a      	lsls	r2, r3, #2
 80086e2:	441a      	add	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ee:	4a31      	ldr	r2, [pc, #196]	; (80087b4 <UART_SetConfig+0x350>)
 80086f0:	fba2 2303 	umull	r2, r3, r2, r3
 80086f4:	095b      	lsrs	r3, r3, #5
 80086f6:	011c      	lsls	r4, r3, #4
 80086f8:	f7fd f9b6 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 80086fc:	4602      	mov	r2, r0
 80086fe:	4613      	mov	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	009a      	lsls	r2, r3, #2
 8008706:	441a      	add	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	fbb2 f5f3 	udiv	r5, r2, r3
 8008712:	f7fd f9a9 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 8008716:	4602      	mov	r2, r0
 8008718:	4613      	mov	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4413      	add	r3, r2
 800871e:	009a      	lsls	r2, r3, #2
 8008720:	441a      	add	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	fbb2 f3f3 	udiv	r3, r2, r3
 800872c:	4a21      	ldr	r2, [pc, #132]	; (80087b4 <UART_SetConfig+0x350>)
 800872e:	fba2 2303 	umull	r2, r3, r2, r3
 8008732:	095b      	lsrs	r3, r3, #5
 8008734:	2264      	movs	r2, #100	; 0x64
 8008736:	fb02 f303 	mul.w	r3, r2, r3
 800873a:	1aeb      	subs	r3, r5, r3
 800873c:	011b      	lsls	r3, r3, #4
 800873e:	3332      	adds	r3, #50	; 0x32
 8008740:	4a1c      	ldr	r2, [pc, #112]	; (80087b4 <UART_SetConfig+0x350>)
 8008742:	fba2 2303 	umull	r2, r3, r2, r3
 8008746:	095b      	lsrs	r3, r3, #5
 8008748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800874c:	441c      	add	r4, r3
 800874e:	f7fd f98b 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 8008752:	4602      	mov	r2, r0
 8008754:	4613      	mov	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4413      	add	r3, r2
 800875a:	009a      	lsls	r2, r3, #2
 800875c:	441a      	add	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	fbb2 f5f3 	udiv	r5, r2, r3
 8008768:	f7fd f97e 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 800876c:	4602      	mov	r2, r0
 800876e:	4613      	mov	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	009a      	lsls	r2, r3, #2
 8008776:	441a      	add	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008782:	4a0c      	ldr	r2, [pc, #48]	; (80087b4 <UART_SetConfig+0x350>)
 8008784:	fba2 2303 	umull	r2, r3, r2, r3
 8008788:	095b      	lsrs	r3, r3, #5
 800878a:	2264      	movs	r2, #100	; 0x64
 800878c:	fb02 f303 	mul.w	r3, r2, r3
 8008790:	1aeb      	subs	r3, r5, r3
 8008792:	011b      	lsls	r3, r3, #4
 8008794:	3332      	adds	r3, #50	; 0x32
 8008796:	4a07      	ldr	r2, [pc, #28]	; (80087b4 <UART_SetConfig+0x350>)
 8008798:	fba2 2303 	umull	r2, r3, r2, r3
 800879c:	095b      	lsrs	r3, r3, #5
 800879e:	f003 020f 	and.w	r2, r3, #15
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4422      	add	r2, r4
 80087a8:	609a      	str	r2, [r3, #8]
 80087aa:	e071      	b.n	8008890 <UART_SetConfig+0x42c>
 80087ac:	40011000 	.word	0x40011000
 80087b0:	40011400 	.word	0x40011400
 80087b4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80087b8:	f7fd f934 	bl	8005a24 <HAL_RCC_GetPCLK1Freq>
 80087bc:	4602      	mov	r2, r0
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	009a      	lsls	r2, r3, #2
 80087c6:	441a      	add	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d2:	4a31      	ldr	r2, [pc, #196]	; (8008898 <UART_SetConfig+0x434>)
 80087d4:	fba2 2303 	umull	r2, r3, r2, r3
 80087d8:	095b      	lsrs	r3, r3, #5
 80087da:	011c      	lsls	r4, r3, #4
 80087dc:	f7fd f922 	bl	8005a24 <HAL_RCC_GetPCLK1Freq>
 80087e0:	4602      	mov	r2, r0
 80087e2:	4613      	mov	r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	009a      	lsls	r2, r3, #2
 80087ea:	441a      	add	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	fbb2 f5f3 	udiv	r5, r2, r3
 80087f6:	f7fd f915 	bl	8005a24 <HAL_RCC_GetPCLK1Freq>
 80087fa:	4602      	mov	r2, r0
 80087fc:	4613      	mov	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	009a      	lsls	r2, r3, #2
 8008804:	441a      	add	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008810:	4a21      	ldr	r2, [pc, #132]	; (8008898 <UART_SetConfig+0x434>)
 8008812:	fba2 2303 	umull	r2, r3, r2, r3
 8008816:	095b      	lsrs	r3, r3, #5
 8008818:	2264      	movs	r2, #100	; 0x64
 800881a:	fb02 f303 	mul.w	r3, r2, r3
 800881e:	1aeb      	subs	r3, r5, r3
 8008820:	011b      	lsls	r3, r3, #4
 8008822:	3332      	adds	r3, #50	; 0x32
 8008824:	4a1c      	ldr	r2, [pc, #112]	; (8008898 <UART_SetConfig+0x434>)
 8008826:	fba2 2303 	umull	r2, r3, r2, r3
 800882a:	095b      	lsrs	r3, r3, #5
 800882c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008830:	441c      	add	r4, r3
 8008832:	f7fd f8f7 	bl	8005a24 <HAL_RCC_GetPCLK1Freq>
 8008836:	4602      	mov	r2, r0
 8008838:	4613      	mov	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	009a      	lsls	r2, r3, #2
 8008840:	441a      	add	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	fbb2 f5f3 	udiv	r5, r2, r3
 800884c:	f7fd f8ea 	bl	8005a24 <HAL_RCC_GetPCLK1Freq>
 8008850:	4602      	mov	r2, r0
 8008852:	4613      	mov	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	009a      	lsls	r2, r3, #2
 800885a:	441a      	add	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	fbb2 f3f3 	udiv	r3, r2, r3
 8008866:	4a0c      	ldr	r2, [pc, #48]	; (8008898 <UART_SetConfig+0x434>)
 8008868:	fba2 2303 	umull	r2, r3, r2, r3
 800886c:	095b      	lsrs	r3, r3, #5
 800886e:	2264      	movs	r2, #100	; 0x64
 8008870:	fb02 f303 	mul.w	r3, r2, r3
 8008874:	1aeb      	subs	r3, r5, r3
 8008876:	011b      	lsls	r3, r3, #4
 8008878:	3332      	adds	r3, #50	; 0x32
 800887a:	4a07      	ldr	r2, [pc, #28]	; (8008898 <UART_SetConfig+0x434>)
 800887c:	fba2 2303 	umull	r2, r3, r2, r3
 8008880:	095b      	lsrs	r3, r3, #5
 8008882:	f003 020f 	and.w	r2, r3, #15
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4422      	add	r2, r4
 800888c:	609a      	str	r2, [r3, #8]
}
 800888e:	e7ff      	b.n	8008890 <UART_SetConfig+0x42c>
 8008890:	bf00      	nop
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bdb0      	pop	{r4, r5, r7, pc}
 8008898:	51eb851f 	.word	0x51eb851f

0800889c <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if(hwwdg == NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e016      	b.n	80088dc <HAL_WWDG_Init+0x40>
  assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));

  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f001 fc3c 	bl	800a12c <HAL_WWDG_MspInit>

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68da      	ldr	r2, [r3, #12]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80088c0:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	691a      	ldr	r2, [r3, #16]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	ea42 0103 	orr.w	r1, r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	689a      	ldr	r2, [r3, #8]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80088e4:	b084      	sub	sp, #16
 80088e6:	b480      	push	{r7}
 80088e8:	b085      	sub	sp, #20
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	f107 001c 	add.w	r0, r7, #28
 80088f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 80088f6:	2300      	movs	r3, #0
 80088f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80088fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80088fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80088fe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008902:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008904:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008906:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800890a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800890c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800890e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	4313      	orrs	r3, r2
 8008914:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800891e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	431a      	orrs	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	b004      	add	sp, #16
 8008938:	4770      	bx	lr

0800893a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800893a:	b480      	push	{r7}
 800893c:	b083      	sub	sp, #12
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008948:	4618      	mov	r0, r3
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2203      	movs	r2, #3
 8008982:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008992:	b480      	push	{r7}
 8008994:	b083      	sub	sp, #12
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0303 	and.w	r3, r3, #3
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80089ae:	b480      	push	{r7}
 80089b0:	b085      	sub	sp, #20
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
 80089b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80089cc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80089d2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80089d8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	4313      	orrs	r3, r2
 80089de:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80089e8:	f023 030f 	bic.w	r3, r3, #15
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	431a      	orrs	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b083      	sub	sp, #12
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	b2db      	uxtb	r3, r3
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	3314      	adds	r3, #20
 8008a2e:	461a      	mov	r2, r3
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	4413      	add	r3, r2
 8008a34:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
}  
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3714      	adds	r7, #20
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b085      	sub	sp, #20
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	685a      	ldr	r2, [r3, #4]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a6c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008a72:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008a78:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	431a      	orrs	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008a90:	2300      	movs	r3, #0

}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b088      	sub	sp, #32
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008ab0:	2310      	movs	r3, #16
 8008ab2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ab4:	2340      	movs	r3, #64	; 0x40
 8008ab6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ac0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ac2:	f107 0308 	add.w	r3, r7, #8
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f7ff ff70 	bl	80089ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008ace:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008ad2:	2110      	movs	r1, #16
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fa63 	bl	8008fa0 <SDMMC_GetCmdResp1>
 8008ada:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008adc:	69fb      	ldr	r3, [r7, #28]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3720      	adds	r7, #32
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b088      	sub	sp, #32
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008af0:	2300      	movs	r3, #0
 8008af2:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008af8:	2311      	movs	r3, #17
 8008afa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008afc:	2340      	movs	r3, #64	; 0x40
 8008afe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b00:	2300      	movs	r3, #0
 8008b02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b08:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b0a:	f107 0308 	add.w	r3, r7, #8
 8008b0e:	4619      	mov	r1, r3
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7ff ff4c 	bl	80089ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008b16:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008b1a:	2111      	movs	r1, #17
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fa3f 	bl	8008fa0 <SDMMC_GetCmdResp1>
 8008b22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b24:	69fb      	ldr	r3, [r7, #28]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3720      	adds	r7, #32
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b088      	sub	sp, #32
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008b40:	2312      	movs	r3, #18
 8008b42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b44:	2340      	movs	r3, #64	; 0x40
 8008b46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b50:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b52:	f107 0308 	add.w	r3, r7, #8
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7ff ff28 	bl	80089ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008b5e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008b62:	2112      	movs	r1, #18
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fa1b 	bl	8008fa0 <SDMMC_GetCmdResp1>
 8008b6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b6c:	69fb      	ldr	r3, [r7, #28]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3720      	adds	r7, #32
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b088      	sub	sp, #32
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008b80:	2300      	movs	r3, #0
 8008b82:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008b88:	2318      	movs	r3, #24
 8008b8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b8c:	2340      	movs	r3, #64	; 0x40
 8008b8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b90:	2300      	movs	r3, #0
 8008b92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b98:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b9a:	f107 0308 	add.w	r3, r7, #8
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7ff ff04 	bl	80089ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008ba6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008baa:	2118      	movs	r1, #24
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f9f7 	bl	8008fa0 <SDMMC_GetCmdResp1>
 8008bb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bb4:	69fb      	ldr	r3, [r7, #28]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3720      	adds	r7, #32
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b088      	sub	sp, #32
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008bd0:	2319      	movs	r3, #25
 8008bd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008bd4:	2340      	movs	r3, #64	; 0x40
 8008bd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008be0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008be2:	f107 0308 	add.w	r3, r7, #8
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f7ff fee0 	bl	80089ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008bee:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008bf2:	2119      	movs	r1, #25
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 f9d3 	bl	8008fa0 <SDMMC_GetCmdResp1>
 8008bfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bfc:	69fb      	ldr	r3, [r7, #28]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3720      	adds	r7, #32
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
	...

08008c08 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b088      	sub	sp, #32
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008c10:	2300      	movs	r3, #0
 8008c12:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008c18:	230c      	movs	r3, #12
 8008c1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c1c:	2340      	movs	r3, #64	; 0x40
 8008c1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c20:	2300      	movs	r3, #0
 8008c22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c28:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c2a:	f107 0308 	add.w	r3, r7, #8
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7ff febc 	bl	80089ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8008c36:	4a05      	ldr	r2, [pc, #20]	; (8008c4c <SDMMC_CmdStopTransfer+0x44>)
 8008c38:	210c      	movs	r1, #12
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f9b0 	bl	8008fa0 <SDMMC_GetCmdResp1>
 8008c40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c42:	69fb      	ldr	r3, [r7, #28]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3720      	adds	r7, #32
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	05f5e100 	.word	0x05f5e100

08008c50 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b08a      	sub	sp, #40	; 0x28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008c64:	2307      	movs	r3, #7
 8008c66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c68:	2340      	movs	r3, #64	; 0x40
 8008c6a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c74:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c76:	f107 0310 	add.w	r3, r7, #16
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f7ff fe96 	bl	80089ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008c82:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008c86:	2107      	movs	r1, #7
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f000 f989 	bl	8008fa0 <SDMMC_GetCmdResp1>
 8008c8e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3728      	adds	r7, #40	; 0x28
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b088      	sub	sp, #32
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008caa:	2300      	movs	r3, #0
 8008cac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cba:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008cbc:	f107 0308 	add.w	r3, r7, #8
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff fe73 	bl	80089ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f93f 	bl	8008f4c <SDMMC_GetCmdError>
 8008cce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cd0:	69fb      	ldr	r3, [r7, #28]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3720      	adds	r7, #32
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b088      	sub	sp, #32
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008ce6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008cea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008cec:	2308      	movs	r3, #8
 8008cee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008cf0:	2340      	movs	r3, #64	; 0x40
 8008cf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cfc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008cfe:	f107 0308 	add.w	r3, r7, #8
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7ff fe52 	bl	80089ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fb10 	bl	8009330 <SDMMC_GetCmdResp7>
 8008d10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d12:	69fb      	ldr	r3, [r7, #28]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3720      	adds	r7, #32
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b088      	sub	sp, #32
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008d26:	2300      	movs	r3, #0
 8008d28:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008d2e:	2337      	movs	r3, #55	; 0x37
 8008d30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d32:	2340      	movs	r3, #64	; 0x40
 8008d34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d36:	2300      	movs	r3, #0
 8008d38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d3e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d40:	f107 0308 	add.w	r3, r7, #8
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f7ff fe31 	bl	80089ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008d4c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008d50:	2137      	movs	r1, #55	; 0x37
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f924 	bl	8008fa0 <SDMMC_GetCmdResp1>
 8008d58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d5a:	69fb      	ldr	r3, [r7, #28]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3720      	adds	r7, #32
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b088      	sub	sp, #32
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008d7e:	2329      	movs	r3, #41	; 0x29
 8008d80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d82:	2340      	movs	r3, #64	; 0x40
 8008d84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d86:	2300      	movs	r3, #0
 8008d88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d8e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d90:	f107 0308 	add.w	r3, r7, #8
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff fe09 	bl	80089ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fa25 	bl	80091ec <SDMMC_GetCmdResp3>
 8008da2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008da4:	69fb      	ldr	r3, [r7, #28]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3720      	adds	r7, #32
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b088      	sub	sp, #32
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008db8:	2300      	movs	r3, #0
 8008dba:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008dc0:	2306      	movs	r3, #6
 8008dc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008dc4:	2340      	movs	r3, #64	; 0x40
 8008dc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dd0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dd2:	f107 0308 	add.w	r3, r7, #8
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff fde8 	bl	80089ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008dde:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008de2:	2106      	movs	r1, #6
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f8db 	bl	8008fa0 <SDMMC_GetCmdResp1>
 8008dea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dec:	69fb      	ldr	r3, [r7, #28]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3720      	adds	r7, #32
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b088      	sub	sp, #32
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008e06:	2333      	movs	r3, #51	; 0x33
 8008e08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e0a:	2340      	movs	r3, #64	; 0x40
 8008e0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e16:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e18:	f107 0308 	add.w	r3, r7, #8
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7ff fdc5 	bl	80089ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008e24:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008e28:	2133      	movs	r1, #51	; 0x33
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f8b8 	bl	8008fa0 <SDMMC_GetCmdResp1>
 8008e30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e32:	69fb      	ldr	r3, [r7, #28]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3720      	adds	r7, #32
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b088      	sub	sp, #32
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008e44:	2300      	movs	r3, #0
 8008e46:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008e50:	23c0      	movs	r3, #192	; 0xc0
 8008e52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e54:	2300      	movs	r3, #0
 8008e56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e5c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e5e:	f107 0308 	add.w	r3, r7, #8
 8008e62:	4619      	mov	r1, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff fda2 	bl	80089ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f97e 	bl	800916c <SDMMC_GetCmdResp2>
 8008e70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e72:	69fb      	ldr	r3, [r7, #28]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3720      	adds	r7, #32
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b088      	sub	sp, #32
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008e86:	2300      	movs	r3, #0
 8008e88:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008e8e:	2309      	movs	r3, #9
 8008e90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008e92:	23c0      	movs	r3, #192	; 0xc0
 8008e94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e96:	2300      	movs	r3, #0
 8008e98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e9e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ea0:	f107 0308 	add.w	r3, r7, #8
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f7ff fd81 	bl	80089ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f95d 	bl	800916c <SDMMC_GetCmdResp2>
 8008eb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eb4:	69fb      	ldr	r3, [r7, #28]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3720      	adds	r7, #32
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b088      	sub	sp, #32
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ed4:	2340      	movs	r3, #64	; 0x40
 8008ed6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ee0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ee2:	f107 0308 	add.w	r3, r7, #8
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7ff fd60 	bl	80089ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008eee:	683a      	ldr	r2, [r7, #0]
 8008ef0:	2103      	movs	r1, #3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f9ae 	bl	8009254 <SDMMC_GetCmdResp6>
 8008ef8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008efa:	69fb      	ldr	r3, [r7, #28]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3720      	adds	r7, #32
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b088      	sub	sp, #32
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008f16:	230d      	movs	r3, #13
 8008f18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f1a:	2340      	movs	r3, #64	; 0x40
 8008f1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f26:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f28:	f107 0308 	add.w	r3, r7, #8
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7ff fd3d 	bl	80089ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008f34:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008f38:	210d      	movs	r1, #13
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f830 	bl	8008fa0 <SDMMC_GetCmdResp1>
 8008f40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f42:	69fb      	ldr	r3, [r7, #28]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3720      	adds	r7, #32
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008f4c:	b490      	push	{r4, r7}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008f54:	4b10      	ldr	r3, [pc, #64]	; (8008f98 <SDMMC_GetCmdError+0x4c>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a10      	ldr	r2, [pc, #64]	; (8008f9c <SDMMC_GetCmdError+0x50>)
 8008f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f5e:	0a5b      	lsrs	r3, r3, #9
 8008f60:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008f64:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008f68:	4623      	mov	r3, r4
 8008f6a:	1e5c      	subs	r4, r3, #1
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d102      	bne.n	8008f76 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f74:	e00a      	b.n	8008f8c <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d0f2      	beq.n	8008f68 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008f88:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bc90      	pop	{r4, r7}
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	20000014 	.word	0x20000014
 8008f9c:	10624dd3 	.word	0x10624dd3

08008fa0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008fa0:	b590      	push	{r4, r7, lr}
 8008fa2:	b087      	sub	sp, #28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	607a      	str	r2, [r7, #4]
 8008fac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008fae:	4b6c      	ldr	r3, [pc, #432]	; (8009160 <SDMMC_GetCmdResp1+0x1c0>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a6c      	ldr	r2, [pc, #432]	; (8009164 <SDMMC_GetCmdResp1+0x1c4>)
 8008fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb8:	0a5b      	lsrs	r3, r3, #9
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008fc0:	4623      	mov	r3, r4
 8008fc2:	1e5c      	subs	r4, r3, #1
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d102      	bne.n	8008fce <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008fc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fcc:	e0c3      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d0f2      	beq.n	8008fc0 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fde:	f003 0304 	and.w	r3, r3, #4
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d004      	beq.n	8008ff0 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2204      	movs	r2, #4
 8008fea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008fec:	2304      	movs	r3, #4
 8008fee:	e0b2      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d004      	beq.n	8009006 <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2201      	movs	r2, #1
 8009000:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009002:	2301      	movs	r3, #1
 8009004:	e0a7      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f7ff fcfb 	bl	8008a02 <SDIO_GetCommandResponse>
 800900c:	4603      	mov	r3, r0
 800900e:	461a      	mov	r2, r3
 8009010:	7afb      	ldrb	r3, [r7, #11]
 8009012:	4293      	cmp	r3, r2
 8009014:	d001      	beq.n	800901a <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009016:	2301      	movs	r3, #1
 8009018:	e09d      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009020:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009022:	2100      	movs	r1, #0
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f7ff fcf9 	bl	8008a1c <SDIO_GetResponse>
 800902a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	4b4e      	ldr	r3, [pc, #312]	; (8009168 <SDMMC_GetCmdResp1+0x1c8>)
 8009030:	4013      	ands	r3, r2
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8009036:	2300      	movs	r3, #0
 8009038:	e08d      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	2b00      	cmp	r3, #0
 800903e:	da02      	bge.n	8009046 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009040:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009044:	e087      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009050:	2340      	movs	r3, #64	; 0x40
 8009052:	e080      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800905e:	2380      	movs	r3, #128	; 0x80
 8009060:	e079      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d002      	beq.n	8009072 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800906c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009070:	e071      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d002      	beq.n	8009082 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800907c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009080:	e069      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d002      	beq.n	8009092 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800908c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009090:	e061      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d002      	beq.n	80090a2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800909c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090a0:	e059      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d002      	beq.n	80090b2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80090ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090b0:	e051      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d002      	beq.n	80090c2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80090bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80090c0:	e049      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d002      	beq.n	80090d2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80090cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80090d0:	e041      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d002      	beq.n	80090e2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 80090dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090e0:	e039      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d002      	beq.n	80090f2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80090ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090f0:	e031      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80090fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009100:	e029      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d002      	beq.n	8009112 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800910c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009110:	e021      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009118:	2b00      	cmp	r3, #0
 800911a:	d002      	beq.n	8009122 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800911c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009120:	e019      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d002      	beq.n	8009132 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800912c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009130:	e011      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009138:	2b00      	cmp	r3, #0
 800913a:	d002      	beq.n	8009142 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800913c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009140:	e009      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f003 0308 	and.w	r3, r3, #8
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800914c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009150:	e001      	b.n	8009156 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009156:	4618      	mov	r0, r3
 8009158:	371c      	adds	r7, #28
 800915a:	46bd      	mov	sp, r7
 800915c:	bd90      	pop	{r4, r7, pc}
 800915e:	bf00      	nop
 8009160:	20000014 	.word	0x20000014
 8009164:	10624dd3 	.word	0x10624dd3
 8009168:	fdffe008 	.word	0xfdffe008

0800916c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800916c:	b490      	push	{r4, r7}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009174:	4b1b      	ldr	r3, [pc, #108]	; (80091e4 <SDMMC_GetCmdResp2+0x78>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a1b      	ldr	r2, [pc, #108]	; (80091e8 <SDMMC_GetCmdResp2+0x7c>)
 800917a:	fba2 2303 	umull	r2, r3, r2, r3
 800917e:	0a5b      	lsrs	r3, r3, #9
 8009180:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009184:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009188:	4623      	mov	r3, r4
 800918a:	1e5c      	subs	r4, r3, #1
 800918c:	2b00      	cmp	r3, #0
 800918e:	d102      	bne.n	8009196 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009190:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009194:	e020      	b.n	80091d8 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d0f2      	beq.n	8009188 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a6:	f003 0304 	and.w	r3, r3, #4
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d004      	beq.n	80091b8 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2204      	movs	r2, #4
 80091b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80091b4:	2304      	movs	r3, #4
 80091b6:	e00f      	b.n	80091d8 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d004      	beq.n	80091ce <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e004      	b.n	80091d8 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80091d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bc90      	pop	{r4, r7}
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	20000014 	.word	0x20000014
 80091e8:	10624dd3 	.word	0x10624dd3

080091ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80091ec:	b490      	push	{r4, r7}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80091f4:	4b15      	ldr	r3, [pc, #84]	; (800924c <SDMMC_GetCmdResp3+0x60>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a15      	ldr	r2, [pc, #84]	; (8009250 <SDMMC_GetCmdResp3+0x64>)
 80091fa:	fba2 2303 	umull	r2, r3, r2, r3
 80091fe:	0a5b      	lsrs	r3, r3, #9
 8009200:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009204:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009208:	4623      	mov	r3, r4
 800920a:	1e5c      	subs	r4, r3, #1
 800920c:	2b00      	cmp	r3, #0
 800920e:	d102      	bne.n	8009216 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009210:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009214:	e015      	b.n	8009242 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800921e:	2b00      	cmp	r3, #0
 8009220:	d0f2      	beq.n	8009208 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009226:	f003 0304 	and.w	r3, r3, #4
 800922a:	2b00      	cmp	r3, #0
 800922c:	d004      	beq.n	8009238 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2204      	movs	r2, #4
 8009232:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009234:	2304      	movs	r3, #4
 8009236:	e004      	b.n	8009242 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800923e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3708      	adds	r7, #8
 8009246:	46bd      	mov	sp, r7
 8009248:	bc90      	pop	{r4, r7}
 800924a:	4770      	bx	lr
 800924c:	20000014 	.word	0x20000014
 8009250:	10624dd3 	.word	0x10624dd3

08009254 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009254:	b590      	push	{r4, r7, lr}
 8009256:	b087      	sub	sp, #28
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	460b      	mov	r3, r1
 800925e:	607a      	str	r2, [r7, #4]
 8009260:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009262:	4b31      	ldr	r3, [pc, #196]	; (8009328 <SDMMC_GetCmdResp6+0xd4>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a31      	ldr	r2, [pc, #196]	; (800932c <SDMMC_GetCmdResp6+0xd8>)
 8009268:	fba2 2303 	umull	r2, r3, r2, r3
 800926c:	0a5b      	lsrs	r3, r3, #9
 800926e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009272:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009276:	4623      	mov	r3, r4
 8009278:	1e5c      	subs	r4, r3, #1
 800927a:	2b00      	cmp	r3, #0
 800927c:	d102      	bne.n	8009284 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800927e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009282:	e04c      	b.n	800931e <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009288:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800928c:	2b00      	cmp	r3, #0
 800928e:	d0f2      	beq.n	8009276 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009294:	f003 0304 	and.w	r3, r3, #4
 8009298:	2b00      	cmp	r3, #0
 800929a:	d004      	beq.n	80092a6 <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2204      	movs	r2, #4
 80092a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092a2:	2304      	movs	r3, #4
 80092a4:	e03b      	b.n	800931e <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d004      	beq.n	80092bc <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2201      	movs	r2, #1
 80092b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e030      	b.n	800931e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f7ff fba0 	bl	8008a02 <SDIO_GetCommandResponse>
 80092c2:	4603      	mov	r3, r0
 80092c4:	461a      	mov	r2, r3
 80092c6:	7afb      	ldrb	r3, [r7, #11]
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d001      	beq.n	80092d0 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e026      	b.n	800931e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80092d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80092d8:	2100      	movs	r1, #0
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f7ff fb9e 	bl	8008a1c <SDIO_GetResponse>
 80092e0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d106      	bne.n	80092fa <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	0c1b      	lsrs	r3, r3, #16
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80092f6:	2300      	movs	r3, #0
 80092f8:	e011      	b.n	800931e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009308:	e009      	b.n	800931e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d002      	beq.n	800931a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009318:	e001      	b.n	800931e <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800931a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800931e:	4618      	mov	r0, r3
 8009320:	371c      	adds	r7, #28
 8009322:	46bd      	mov	sp, r7
 8009324:	bd90      	pop	{r4, r7, pc}
 8009326:	bf00      	nop
 8009328:	20000014 	.word	0x20000014
 800932c:	10624dd3 	.word	0x10624dd3

08009330 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009330:	b490      	push	{r4, r7}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009338:	4b18      	ldr	r3, [pc, #96]	; (800939c <SDMMC_GetCmdResp7+0x6c>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a18      	ldr	r2, [pc, #96]	; (80093a0 <SDMMC_GetCmdResp7+0x70>)
 800933e:	fba2 2303 	umull	r2, r3, r2, r3
 8009342:	0a5b      	lsrs	r3, r3, #9
 8009344:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009348:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800934c:	4623      	mov	r3, r4
 800934e:	1e5c      	subs	r4, r3, #1
 8009350:	2b00      	cmp	r3, #0
 8009352:	d102      	bne.n	800935a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009354:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009358:	e01a      	b.n	8009390 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800935e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009362:	2b00      	cmp	r3, #0
 8009364:	d0f2      	beq.n	800934c <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800936a:	f003 0304 	and.w	r3, r3, #4
 800936e:	2b00      	cmp	r3, #0
 8009370:	d004      	beq.n	800937c <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2240      	movs	r2, #64	; 0x40
 8009376:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009378:	2304      	movs	r3, #4
 800937a:	e009      	b.n	8009390 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2240      	movs	r2, #64	; 0x40
 800938c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800938e:	2300      	movs	r3, #0
  
}
 8009390:	4618      	mov	r0, r3
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bc90      	pop	{r4, r7}
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	20000014 	.word	0x20000014
 80093a0:	10624dd3 	.word	0x10624dd3

080093a4 <_write>:
//
//	return _n;
//}

int _write(int file, char *data, int len)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d00a      	beq.n	80093cc <_write+0x28>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d007      	beq.n	80093cc <_write+0x28>
   {
      errno = EBADF;
 80093bc:	f003 fe68 	bl	800d090 <__errno>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2209      	movs	r2, #9
 80093c4:	601a      	str	r2, [r3, #0]
      return -1;
 80093c6:	f04f 33ff 	mov.w	r3, #4294967295
 80093ca:	e010      	b.n	80093ee <_write+0x4a>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit((UART_HandleTypeDef *)COMM, (uint8_t*)data, len, 1000);
 80093cc:	4b0a      	ldr	r3, [pc, #40]	; (80093f8 <_write+0x54>)
 80093ce:	6818      	ldr	r0, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80093d8:	68b9      	ldr	r1, [r7, #8]
 80093da:	f7fe fc26 	bl	8007c2a <HAL_UART_Transmit>
 80093de:	4603      	mov	r3, r0
 80093e0:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 80093e2:	7dfb      	ldrb	r3, [r7, #23]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <_write+0x48>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	e000      	b.n	80093ee <_write+0x4a>
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3718      	adds	r7, #24
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	20000004 	.word	0x20000004

080093fc <SystemClock_Config>:
*/

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b0a0      	sub	sp, #128	; 0x80
 8009400:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009402:	2300      	movs	r3, #0
 8009404:	60bb      	str	r3, [r7, #8]
 8009406:	4b3b      	ldr	r3, [pc, #236]	; (80094f4 <SystemClock_Config+0xf8>)
 8009408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940a:	4a3a      	ldr	r2, [pc, #232]	; (80094f4 <SystemClock_Config+0xf8>)
 800940c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009410:	6413      	str	r3, [r2, #64]	; 0x40
 8009412:	4b38      	ldr	r3, [pc, #224]	; (80094f4 <SystemClock_Config+0xf8>)
 8009414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800941a:	60bb      	str	r3, [r7, #8]
 800941c:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800941e:	2300      	movs	r3, #0
 8009420:	607b      	str	r3, [r7, #4]
 8009422:	4b35      	ldr	r3, [pc, #212]	; (80094f8 <SystemClock_Config+0xfc>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800942a:	4a33      	ldr	r2, [pc, #204]	; (80094f8 <SystemClock_Config+0xfc>)
 800942c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009430:	6013      	str	r3, [r2, #0]
 8009432:	4b31      	ldr	r3, [pc, #196]	; (80094f8 <SystemClock_Config+0xfc>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800943a:	607b      	str	r3, [r7, #4]
 800943c:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800943e:	2305      	movs	r3, #5
 8009440:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009446:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009448:	2301      	movs	r3, #1
 800944a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800944c:	2302      	movs	r3, #2
 800944e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009450:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009454:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8009456:	2310      	movs	r3, #16
 8009458:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 192;
 800945a:	23c0      	movs	r3, #192	; 0xc0
 800945c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800945e:	2302      	movs	r3, #2
 8009460:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8009462:	2304      	movs	r3, #4
 8009464:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009466:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800946a:	4618      	mov	r0, r3
 800946c:	f7fb fee4 	bl	8005238 <HAL_RCC_OscConfig>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8009476:	f7fa fa7b 	bl	8003970 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800947a:	230f      	movs	r3, #15
 800947c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800947e:	2302      	movs	r3, #2
 8009480:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009482:	2300      	movs	r3, #0
 8009484:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009486:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800948a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800948c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009490:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8009492:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009496:	2103      	movs	r1, #3
 8009498:	4618      	mov	r0, r3
 800949a:	f7fc f925 	bl	80056e8 <HAL_RCC_ClockConfig>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d001      	beq.n	80094a8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80094a4:	f7fa fa64 	bl	8003970 <Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80094a8:	2320      	movs	r3, #32
 80094aa:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80094ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80094b2:	f107 030c 	add.w	r3, r7, #12
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fc fb2a 	bl	8005b10 <HAL_RCCEx_PeriphCLKConfig>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80094c2:	f7fa fa55 	bl	8003970 <Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80094c6:	f7fc faa1 	bl	8005a0c <HAL_RCC_GetHCLKFreq>
 80094ca:	4603      	mov	r3, r0
 80094cc:	4a0b      	ldr	r2, [pc, #44]	; (80094fc <SystemClock_Config+0x100>)
 80094ce:	fba2 2303 	umull	r2, r3, r2, r3
 80094d2:	099b      	lsrs	r3, r3, #6
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fa fbf8 	bl	8003cca <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80094da:	2004      	movs	r0, #4
 80094dc:	f7fa fc02 	bl	8003ce4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80094e0:	2200      	movs	r2, #0
 80094e2:	210f      	movs	r1, #15
 80094e4:	f04f 30ff 	mov.w	r0, #4294967295
 80094e8:	f7fa fbc5 	bl	8003c76 <HAL_NVIC_SetPriority>
}
 80094ec:	bf00      	nop
 80094ee:	3780      	adds	r7, #128	; 0x80
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	40023800 	.word	0x40023800
 80094f8:	40007000 	.word	0x40007000
 80094fc:	10624dd3 	.word	0x10624dd3

08009500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b08e      	sub	sp, #56	; 0x38
 8009504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009506:	2300      	movs	r3, #0
 8009508:	623b      	str	r3, [r7, #32]
 800950a:	4bb2      	ldr	r3, [pc, #712]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 800950c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950e:	4ab1      	ldr	r2, [pc, #708]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 8009510:	f043 0310 	orr.w	r3, r3, #16
 8009514:	6313      	str	r3, [r2, #48]	; 0x30
 8009516:	4baf      	ldr	r3, [pc, #700]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 8009518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951a:	f003 0310 	and.w	r3, r3, #16
 800951e:	623b      	str	r3, [r7, #32]
 8009520:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8009522:	2300      	movs	r3, #0
 8009524:	61fb      	str	r3, [r7, #28]
 8009526:	4bab      	ldr	r3, [pc, #684]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 8009528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952a:	4aaa      	ldr	r2, [pc, #680]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 800952c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009530:	6313      	str	r3, [r2, #48]	; 0x30
 8009532:	4ba8      	ldr	r3, [pc, #672]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 8009534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800953a:	61fb      	str	r3, [r7, #28]
 800953c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800953e:	2300      	movs	r3, #0
 8009540:	61bb      	str	r3, [r7, #24]
 8009542:	4ba4      	ldr	r3, [pc, #656]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 8009544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009546:	4aa3      	ldr	r2, [pc, #652]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 8009548:	f043 0304 	orr.w	r3, r3, #4
 800954c:	6313      	str	r3, [r2, #48]	; 0x30
 800954e:	4ba1      	ldr	r3, [pc, #644]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 8009550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009552:	f003 0304 	and.w	r3, r3, #4
 8009556:	61bb      	str	r3, [r7, #24]
 8009558:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800955a:	2300      	movs	r3, #0
 800955c:	617b      	str	r3, [r7, #20]
 800955e:	4b9d      	ldr	r3, [pc, #628]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 8009560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009562:	4a9c      	ldr	r2, [pc, #624]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 8009564:	f043 0320 	orr.w	r3, r3, #32
 8009568:	6313      	str	r3, [r2, #48]	; 0x30
 800956a:	4b9a      	ldr	r3, [pc, #616]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 800956c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800956e:	f003 0320 	and.w	r3, r3, #32
 8009572:	617b      	str	r3, [r7, #20]
 8009574:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009576:	2300      	movs	r3, #0
 8009578:	613b      	str	r3, [r7, #16]
 800957a:	4b96      	ldr	r3, [pc, #600]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 800957c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957e:	4a95      	ldr	r2, [pc, #596]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 8009580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009584:	6313      	str	r3, [r2, #48]	; 0x30
 8009586:	4b93      	ldr	r3, [pc, #588]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 8009588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800958e:	613b      	str	r3, [r7, #16]
 8009590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009592:	2300      	movs	r3, #0
 8009594:	60fb      	str	r3, [r7, #12]
 8009596:	4b8f      	ldr	r3, [pc, #572]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 8009598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800959a:	4a8e      	ldr	r2, [pc, #568]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 800959c:	f043 0301 	orr.w	r3, r3, #1
 80095a0:	6313      	str	r3, [r2, #48]	; 0x30
 80095a2:	4b8c      	ldr	r3, [pc, #560]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 80095a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a6:	f003 0301 	and.w	r3, r3, #1
 80095aa:	60fb      	str	r3, [r7, #12]
 80095ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80095ae:	2300      	movs	r3, #0
 80095b0:	60bb      	str	r3, [r7, #8]
 80095b2:	4b88      	ldr	r3, [pc, #544]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 80095b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b6:	4a87      	ldr	r2, [pc, #540]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 80095b8:	f043 0302 	orr.w	r3, r3, #2
 80095bc:	6313      	str	r3, [r2, #48]	; 0x30
 80095be:	4b85      	ldr	r3, [pc, #532]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 80095c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c2:	f003 0302 	and.w	r3, r3, #2
 80095c6:	60bb      	str	r3, [r7, #8]
 80095c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80095ca:	2300      	movs	r3, #0
 80095cc:	607b      	str	r3, [r7, #4]
 80095ce:	4b81      	ldr	r3, [pc, #516]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 80095d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d2:	4a80      	ldr	r2, [pc, #512]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 80095d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095d8:	6313      	str	r3, [r2, #48]	; 0x30
 80095da:	4b7e      	ldr	r3, [pc, #504]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 80095dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e2:	607b      	str	r3, [r7, #4]
 80095e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80095e6:	2300      	movs	r3, #0
 80095e8:	603b      	str	r3, [r7, #0]
 80095ea:	4b7a      	ldr	r3, [pc, #488]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 80095ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ee:	4a79      	ldr	r2, [pc, #484]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 80095f0:	f043 0308 	orr.w	r3, r3, #8
 80095f4:	6313      	str	r3, [r2, #48]	; 0x30
 80095f6:	4b77      	ldr	r3, [pc, #476]	; (80097d4 <MX_GPIO_Init+0x2d4>)
 80095f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095fa:	f003 0308 	and.w	r3, r3, #8
 80095fe:	603b      	str	r3, [r7, #0]
 8009600:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PAN4_VGY_GPIO_Port, PAN4_VGY_Pin, GPIO_PIN_RESET);
 8009602:	2200      	movs	r2, #0
 8009604:	2104      	movs	r1, #4
 8009606:	4874      	ldr	r0, [pc, #464]	; (80097d8 <MX_GPIO_Init+0x2d8>)
 8009608:	f7fa fee4 	bl	80043d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PAN5_CS2_Pin|LED_G_Pin|LED_Y_Pin, GPIO_PIN_SET);
 800960c:	2201      	movs	r2, #1
 800960e:	f242 0130 	movw	r1, #8240	; 0x2030
 8009612:	4872      	ldr	r0, [pc, #456]	; (80097dc <MX_GPIO_Init+0x2dc>)
 8009614:	f7fa fede 	bl	80043d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, PAN5_CS1_Pin|PAN6_CS2_Pin|PAN6_CS1_Pin|PAN1_CS2_Pin
 8009618:	2201      	movs	r2, #1
 800961a:	f640 61ff 	movw	r1, #3839	; 0xeff
 800961e:	4870      	ldr	r0, [pc, #448]	; (80097e0 <MX_GPIO_Init+0x2e0>)
 8009620:	f7fa fed8 	bl	80043d4 <HAL_GPIO_WritePin>
                          |PAN1_CS1_Pin|PAN2_CS2_Pin|PAN2_CS1_Pin|PAN3_CS2_Pin
                          |PAN3_CS1_Pin|PAN4_CS2_Pin|PAN4_CS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SBAND_CS_GPIO_Port, SBAND_CS_Pin, GPIO_PIN_RESET);
 8009624:	2200      	movs	r2, #0
 8009626:	2140      	movs	r1, #64	; 0x40
 8009628:	486e      	ldr	r0, [pc, #440]	; (80097e4 <MX_GPIO_Init+0x2e4>)
 800962a:	f7fa fed3 	bl	80043d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PAN5_DIR1_Pin|PAN5_DIR2_Pin|PAN6_DIR1_Pin|PAN6_DIR2_Pin
 800962e:	2200      	movs	r2, #0
 8009630:	f24e 217c 	movw	r1, #57980	; 0xe27c
 8009634:	486c      	ldr	r0, [pc, #432]	; (80097e8 <MX_GPIO_Init+0x2e8>)
 8009636:	f7fa fecd 	bl	80043d4 <HAL_GPIO_WritePin>
  // Turn-off the second MAG sensor due lack of I2C arbitration MAG1/MAG2
  HAL_GPIO_WritePin(GPIOH, MAG1_EN_Pin|MAG2_EN_Pin, GPIO_PIN_SET);
#endif

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800963a:	2201      	movs	r2, #1
 800963c:	2110      	movs	r1, #16
 800963e:	486b      	ldr	r0, [pc, #428]	; (80097ec <MX_GPIO_Init+0x2ec>)
 8009640:	f7fa fec8 	bl	80043d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PAN5_VGY_Pin|PAN6_VGY_Pin|PAN1_VGY_Pin|PAN2_VGY_Pin
 8009644:	2200      	movs	r2, #0
 8009646:	21e6      	movs	r1, #230	; 0xe6
 8009648:	4869      	ldr	r0, [pc, #420]	; (80097f0 <MX_GPIO_Init+0x2f0>)
 800964a:	f7fa fec3 	bl	80043d4 <HAL_GPIO_WritePin>
                          |PAN3_VGY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OBC_OUT5_Pin|PAN4_DIR1_Pin|FLASH_NCS_Pin|OBC_OUT3_Pin
 800964e:	2200      	movs	r2, #0
 8009650:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8009654:	4867      	ldr	r0, [pc, #412]	; (80097f4 <MX_GPIO_Init+0x2f4>)
 8009656:	f7fa febd 	bl	80043d4 <HAL_GPIO_WritePin>
                          |OBC_OUT2_Pin|OBC_OUT1_Pin, GPIO_PIN_RESET);

  /* Camera power supply disable by default */
  HAL_GPIO_WritePin(GPIOG, OBC_OUT1_Pin, GPIO_PIN_RESET);
 800965a:	2200      	movs	r2, #0
 800965c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009660:	4864      	ldr	r0, [pc, #400]	; (80097f4 <MX_GPIO_Init+0x2f4>)
 8009662:	f7fa feb7 	bl	80043d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_EN_Pin|OBC_OUT4_Pin, GPIO_PIN_RESET);
 8009666:	2200      	movs	r2, #0
 8009668:	2148      	movs	r1, #72	; 0x48
 800966a:	4863      	ldr	r0, [pc, #396]	; (80097f8 <MX_GPIO_Init+0x2f8>)
 800966c:	f7fa feb2 	bl	80043d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PAN4_VGY_Pin */
  GPIO_InitStruct.Pin = PAN4_VGY_Pin;
 8009670:	2304      	movs	r3, #4
 8009672:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8009674:	2311      	movs	r3, #17
 8009676:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009678:	2300      	movs	r3, #0
 800967a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800967c:	2300      	movs	r3, #0
 800967e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PAN4_VGY_GPIO_Port, &GPIO_InitStruct);
 8009680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009684:	4619      	mov	r1, r3
 8009686:	4854      	ldr	r0, [pc, #336]	; (80097d8 <MX_GPIO_Init+0x2d8>)
 8009688:	f7fa fcf8 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IRQ_Pin */
  GPIO_InitStruct.Pin = M2_IRQ_Pin;
 800968c:	2340      	movs	r3, #64	; 0x40
 800968e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009690:	4b5a      	ldr	r3, [pc, #360]	; (80097fc <MX_GPIO_Init+0x2fc>)
 8009692:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009694:	2300      	movs	r3, #0
 8009696:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M2_IRQ_GPIO_Port, &GPIO_InitStruct);
 8009698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800969c:	4619      	mov	r1, r3
 800969e:	484e      	ldr	r0, [pc, #312]	; (80097d8 <MX_GPIO_Init+0x2d8>)
 80096a0:	f7fa fcec 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_IRQ_Pin */
  GPIO_InitStruct.Pin = M1_IRQ_Pin;
 80096a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80096aa:	4b54      	ldr	r3, [pc, #336]	; (80097fc <MX_GPIO_Init+0x2fc>)
 80096ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M1_IRQ_GPIO_Port, &GPIO_InitStruct);
 80096b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096b6:	4619      	mov	r1, r3
 80096b8:	4849      	ldr	r0, [pc, #292]	; (80097e0 <MX_GPIO_Init+0x2e0>)
 80096ba:	f7fa fcdf 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_CS2_Pin LED_G_Pin LED_Y_Pin */
  GPIO_InitStruct.Pin = PAN5_CS2_Pin|LED_G_Pin|LED_Y_Pin;
 80096be:	f242 0330 	movw	r3, #8240	; 0x2030
 80096c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096c4:	2301      	movs	r3, #1
 80096c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096c8:	2300      	movs	r3, #0
 80096ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096cc:	2300      	movs	r3, #0
 80096ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80096d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096d4:	4619      	mov	r1, r3
 80096d6:	4841      	ldr	r0, [pc, #260]	; (80097dc <MX_GPIO_Init+0x2dc>)
 80096d8:	f7fa fcd0 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_CS1_Pin PAN6_CS2_Pin PAN6_CS1_Pin PAN1_CS2_Pin
                           PAN1_CS1_Pin PAN2_CS2_Pin PAN2_CS1_Pin PAN3_CS2_Pin
                           PAN3_CS1_Pin PAN4_CS2_Pin PAN4_CS1_Pin */
  GPIO_InitStruct.Pin = PAN5_CS1_Pin|PAN6_CS2_Pin|PAN6_CS1_Pin|PAN1_CS2_Pin
 80096dc:	f640 63ff 	movw	r3, #3839	; 0xeff
 80096e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |PAN1_CS1_Pin|PAN2_CS2_Pin|PAN2_CS1_Pin|PAN3_CS2_Pin
                          |PAN3_CS1_Pin|PAN4_CS2_Pin|PAN4_CS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096e2:	2301      	movs	r3, #1
 80096e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096e6:	2300      	movs	r3, #0
 80096e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096ea:	2300      	movs	r3, #0
 80096ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80096ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096f2:	4619      	mov	r1, r3
 80096f4:	483a      	ldr	r0, [pc, #232]	; (80097e0 <MX_GPIO_Init+0x2e0>)
 80096f6:	f7fa fcc1 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pin : SBAND_CS_Pin */
  GPIO_InitStruct.Pin = SBAND_CS_Pin;
 80096fa:	2340      	movs	r3, #64	; 0x40
 80096fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096fe:	2301      	movs	r3, #1
 8009700:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009702:	2300      	movs	r3, #0
 8009704:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009706:	2300      	movs	r3, #0
 8009708:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SBAND_CS_GPIO_Port, &GPIO_InitStruct);
 800970a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800970e:	4619      	mov	r1, r3
 8009710:	4834      	ldr	r0, [pc, #208]	; (80097e4 <MX_GPIO_Init+0x2e4>)
 8009712:	f7fa fcb3 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pin : SBAND_IRQ_Pin */
  GPIO_InitStruct.Pin = SBAND_IRQ_Pin;
 8009716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800971a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800971c:	4b37      	ldr	r3, [pc, #220]	; (80097fc <MX_GPIO_Init+0x2fc>)
 800971e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009720:	2300      	movs	r3, #0
 8009722:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SBAND_IRQ_GPIO_Port, &GPIO_InitStruct);
 8009724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009728:	4619      	mov	r1, r3
 800972a:	482e      	ldr	r0, [pc, #184]	; (80097e4 <MX_GPIO_Init+0x2e4>)
 800972c:	f7fa fca6 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_DIR1_Pin PAN5_DIR2_Pin PAN6_DIR1_Pin PAN6_DIR2_Pin
                           ACC1_EN_Pin ACC2_EN_Pin MAG1_EN_Pin MAG2_EN_Pin
                           PAN4_DIR2_Pin */
  GPIO_InitStruct.Pin = PAN5_DIR1_Pin|PAN5_DIR2_Pin|PAN6_DIR1_Pin|PAN6_DIR2_Pin
 8009730:	f24e 033c 	movw	r3, #57404	; 0xe03c
 8009734:	627b      	str	r3, [r7, #36]	; 0x24
                          |MAG1_EN_Pin|MAG2_EN_Pin
                          |PAN4_DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009736:	2301      	movs	r3, #1
 8009738:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800973a:	2300      	movs	r3, #0
 800973c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800973e:	2300      	movs	r3, #0
 8009740:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009746:	4619      	mov	r1, r3
 8009748:	4827      	ldr	r0, [pc, #156]	; (80097e8 <MX_GPIO_Init+0x2e8>)
 800974a:	f7fa fc97 	bl	800407c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ACC1_EN_Pin|ACC2_EN_Pin;
 800974e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8009752:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8009754:	2311      	movs	r3, #17
 8009756:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009758:	2300      	movs	r3, #0
 800975a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800975c:	2300      	movs	r3, #0
 800975e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009764:	4619      	mov	r1, r3
 8009766:	4820      	ldr	r0, [pc, #128]	; (80097e8 <MX_GPIO_Init+0x2e8>)
 8009768:	f7fa fc88 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800976c:	2310      	movs	r3, #16
 800976e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009770:	2301      	movs	r3, #1
 8009772:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009774:	2300      	movs	r3, #0
 8009776:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009778:	2300      	movs	r3, #0
 800977a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800977c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009780:	4619      	mov	r1, r3
 8009782:	481a      	ldr	r0, [pc, #104]	; (80097ec <MX_GPIO_Init+0x2ec>)
 8009784:	f7fa fc7a 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_VGY_Pin PAN6_VGY_Pin PAN1_VGY_Pin PAN2_VGY_Pin
                           PAN3_VGY_Pin */
  GPIO_InitStruct.Pin = PAN5_VGY_Pin|PAN6_VGY_Pin|PAN1_VGY_Pin|PAN2_VGY_Pin
 8009788:	23e6      	movs	r3, #230	; 0xe6
 800978a:	627b      	str	r3, [r7, #36]	; 0x24
                          |PAN3_VGY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800978c:	2311      	movs	r3, #17
 800978e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009790:	2300      	movs	r3, #0
 8009792:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009794:	2300      	movs	r3, #0
 8009796:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800979c:	4619      	mov	r1, r3
 800979e:	4814      	ldr	r0, [pc, #80]	; (80097f0 <MX_GPIO_Init+0x2f0>)
 80097a0:	f7fa fc6c 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pins : OBC_OUT5_Pin PAN4_DIR1_Pin FLASH_NCS_Pin OBC_OUT3_Pin
                           OBC_OUT2_Pin OBC_OUT1_Pin */
  GPIO_InitStruct.Pin = OBC_OUT5_Pin|PAN4_DIR1_Pin|FLASH_NCS_Pin|OBC_OUT3_Pin
 80097a4:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 80097a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |OBC_OUT2_Pin|OBC_OUT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097aa:	2301      	movs	r3, #1
 80097ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097ae:	2300      	movs	r3, #0
 80097b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097b2:	2300      	movs	r3, #0
 80097b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80097b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097ba:	4619      	mov	r1, r3
 80097bc:	480d      	ldr	r0, [pc, #52]	; (80097f4 <MX_GPIO_Init+0x2f4>)
 80097be:	f7fa fc5d 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_EN_Pin OBC_OUT4_Pin */
  GPIO_InitStruct.Pin = SD_EN_Pin|OBC_OUT4_Pin;
 80097c2:	2348      	movs	r3, #72	; 0x48
 80097c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097c6:	2301      	movs	r3, #1
 80097c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097ca:	2300      	movs	r3, #0
 80097cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097ce:	2300      	movs	r3, #0
 80097d0:	e016      	b.n	8009800 <MX_GPIO_Init+0x300>
 80097d2:	bf00      	nop
 80097d4:	40023800 	.word	0x40023800
 80097d8:	40021000 	.word	0x40021000
 80097dc:	40020800 	.word	0x40020800
 80097e0:	40022000 	.word	0x40022000
 80097e4:	40021400 	.word	0x40021400
 80097e8:	40021c00 	.word	0x40021c00
 80097ec:	40020000 	.word	0x40020000
 80097f0:	40020400 	.word	0x40020400
 80097f4:	40021800 	.word	0x40021800
 80097f8:	40020c00 	.word	0x40020c00
 80097fc:	10110000 	.word	0x10110000
 8009800:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009806:	4619      	mov	r1, r3
 8009808:	4809      	ldr	r0, [pc, #36]	; (8009830 <MX_GPIO_Init+0x330>)
 800980a:	f7fa fc37 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 800980e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009814:	2300      	movs	r3, #0
 8009816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009818:	2300      	movs	r3, #0
 800981a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 800981c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009820:	4619      	mov	r1, r3
 8009822:	4804      	ldr	r0, [pc, #16]	; (8009834 <MX_GPIO_Init+0x334>)
 8009824:	f7fa fc2a 	bl	800407c <HAL_GPIO_Init>

}
 8009828:	bf00      	nop
 800982a:	3738      	adds	r7, #56	; 0x38
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	40020c00 	.word	0x40020c00
 8009834:	40021800 	.word	0x40021800

08009838 <MX_I2C1_Init>:

}

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800983c:	4b12      	ldr	r3, [pc, #72]	; (8009888 <MX_I2C1_Init+0x50>)
 800983e:	4a13      	ldr	r2, [pc, #76]	; (800988c <MX_I2C1_Init+0x54>)
 8009840:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8009842:	4b11      	ldr	r3, [pc, #68]	; (8009888 <MX_I2C1_Init+0x50>)
 8009844:	4a12      	ldr	r2, [pc, #72]	; (8009890 <MX_I2C1_Init+0x58>)
 8009846:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009848:	4b0f      	ldr	r3, [pc, #60]	; (8009888 <MX_I2C1_Init+0x50>)
 800984a:	2200      	movs	r2, #0
 800984c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800984e:	4b0e      	ldr	r3, [pc, #56]	; (8009888 <MX_I2C1_Init+0x50>)
 8009850:	2200      	movs	r2, #0
 8009852:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009854:	4b0c      	ldr	r3, [pc, #48]	; (8009888 <MX_I2C1_Init+0x50>)
 8009856:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800985a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800985c:	4b0a      	ldr	r3, [pc, #40]	; (8009888 <MX_I2C1_Init+0x50>)
 800985e:	2200      	movs	r2, #0
 8009860:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009862:	4b09      	ldr	r3, [pc, #36]	; (8009888 <MX_I2C1_Init+0x50>)
 8009864:	2200      	movs	r2, #0
 8009866:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009868:	4b07      	ldr	r3, [pc, #28]	; (8009888 <MX_I2C1_Init+0x50>)
 800986a:	2200      	movs	r2, #0
 800986c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800986e:	4b06      	ldr	r3, [pc, #24]	; (8009888 <MX_I2C1_Init+0x50>)
 8009870:	2200      	movs	r2, #0
 8009872:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009874:	4804      	ldr	r0, [pc, #16]	; (8009888 <MX_I2C1_Init+0x50>)
 8009876:	f7fa fdc7 	bl	8004408 <HAL_I2C_Init>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d001      	beq.n	8009884 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009880:	f7fa f876 	bl	8003970 <Error_Handler>
  }

}
 8009884:	bf00      	nop
 8009886:	bd80      	pop	{r7, pc}
 8009888:	200002a0 	.word	0x200002a0
 800988c:	40005400 	.word	0x40005400
 8009890:	00061a80 	.word	0x00061a80

08009894 <MX_SDIO_SD_Init>:

}

/* SDIO init function */
void MX_SDIO_SD_Init(void)
{
 8009894:	b480      	push	{r7}
 8009896:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8009898:	4b0c      	ldr	r3, [pc, #48]	; (80098cc <MX_SDIO_SD_Init+0x38>)
 800989a:	4a0d      	ldr	r2, [pc, #52]	; (80098d0 <MX_SDIO_SD_Init+0x3c>)
 800989c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800989e:	4b0b      	ldr	r3, [pc, #44]	; (80098cc <MX_SDIO_SD_Init+0x38>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80098a4:	4b09      	ldr	r3, [pc, #36]	; (80098cc <MX_SDIO_SD_Init+0x38>)
 80098a6:	2200      	movs	r2, #0
 80098a8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80098aa:	4b08      	ldr	r3, [pc, #32]	; (80098cc <MX_SDIO_SD_Init+0x38>)
 80098ac:	2200      	movs	r2, #0
 80098ae:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80098b0:	4b06      	ldr	r3, [pc, #24]	; (80098cc <MX_SDIO_SD_Init+0x38>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80098b6:	4b05      	ldr	r3, [pc, #20]	; (80098cc <MX_SDIO_SD_Init+0x38>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = SDIO_TRANSFER_CLK_DIV;
 80098bc:	4b03      	ldr	r3, [pc, #12]	; (80098cc <MX_SDIO_SD_Init+0x38>)
 80098be:	2203      	movs	r2, #3
 80098c0:	619a      	str	r2, [r3, #24]

}
 80098c2:	bf00      	nop
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr
 80098cc:	2000039c 	.word	0x2000039c
 80098d0:	40012c00 	.word	0x40012c00

080098d4 <MX_UART4_Init>:

}

/* UART4 init function */
void MX_UART4_Init(void)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80098d8:	4b11      	ldr	r3, [pc, #68]	; (8009920 <MX_UART4_Init+0x4c>)
 80098da:	4a12      	ldr	r2, [pc, #72]	; (8009924 <MX_UART4_Init+0x50>)
 80098dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80098de:	4b10      	ldr	r3, [pc, #64]	; (8009920 <MX_UART4_Init+0x4c>)
 80098e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80098e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80098e6:	4b0e      	ldr	r3, [pc, #56]	; (8009920 <MX_UART4_Init+0x4c>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80098ec:	4b0c      	ldr	r3, [pc, #48]	; (8009920 <MX_UART4_Init+0x4c>)
 80098ee:	2200      	movs	r2, #0
 80098f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80098f2:	4b0b      	ldr	r3, [pc, #44]	; (8009920 <MX_UART4_Init+0x4c>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80098f8:	4b09      	ldr	r3, [pc, #36]	; (8009920 <MX_UART4_Init+0x4c>)
 80098fa:	220c      	movs	r2, #12
 80098fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80098fe:	4b08      	ldr	r3, [pc, #32]	; (8009920 <MX_UART4_Init+0x4c>)
 8009900:	2200      	movs	r2, #0
 8009902:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8009904:	4b06      	ldr	r3, [pc, #24]	; (8009920 <MX_UART4_Init+0x4c>)
 8009906:	2200      	movs	r2, #0
 8009908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800990a:	4805      	ldr	r0, [pc, #20]	; (8009920 <MX_UART4_Init+0x4c>)
 800990c:	f7fe f940 	bl	8007b90 <HAL_UART_Init>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8009916:	f7fa f82b 	bl	8003970 <Error_Handler>
  }

}
 800991a:	bf00      	nop
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	2000067c 	.word	0x2000067c
 8009924:	40004c00 	.word	0x40004c00

08009928 <MX_USART1_UART_Init>:

/* USART1 init function */
void MX_USART1_UART_Init(void)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800992c:	4b11      	ldr	r3, [pc, #68]	; (8009974 <MX_USART1_UART_Init+0x4c>)
 800992e:	4a12      	ldr	r2, [pc, #72]	; (8009978 <MX_USART1_UART_Init+0x50>)
 8009930:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009932:	4b10      	ldr	r3, [pc, #64]	; (8009974 <MX_USART1_UART_Init+0x4c>)
 8009934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009938:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800993a:	4b0e      	ldr	r3, [pc, #56]	; (8009974 <MX_USART1_UART_Init+0x4c>)
 800993c:	2200      	movs	r2, #0
 800993e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009940:	4b0c      	ldr	r3, [pc, #48]	; (8009974 <MX_USART1_UART_Init+0x4c>)
 8009942:	2200      	movs	r2, #0
 8009944:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009946:	4b0b      	ldr	r3, [pc, #44]	; (8009974 <MX_USART1_UART_Init+0x4c>)
 8009948:	2200      	movs	r2, #0
 800994a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800994c:	4b09      	ldr	r3, [pc, #36]	; (8009974 <MX_USART1_UART_Init+0x4c>)
 800994e:	220c      	movs	r2, #12
 8009950:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009952:	4b08      	ldr	r3, [pc, #32]	; (8009974 <MX_USART1_UART_Init+0x4c>)
 8009954:	2200      	movs	r2, #0
 8009956:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009958:	4b06      	ldr	r3, [pc, #24]	; (8009974 <MX_USART1_UART_Init+0x4c>)
 800995a:	2200      	movs	r2, #0
 800995c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800995e:	4805      	ldr	r0, [pc, #20]	; (8009974 <MX_USART1_UART_Init+0x4c>)
 8009960:	f7fe f916 	bl	8007b90 <HAL_UART_Init>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800996a:	f7fa f801 	bl	8003970 <Error_Handler>
  }

}
 800996e:	bf00      	nop
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	200006bc 	.word	0x200006bc
 8009978:	40011000 	.word	0x40011000

0800997c <MX_USART6_UART_Init>:

/* USART6 init function */
void MX_USART6_UART_Init(void)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8009980:	4b15      	ldr	r3, [pc, #84]	; (80099d8 <MX_USART6_UART_Init+0x5c>)
 8009982:	4a16      	ldr	r2, [pc, #88]	; (80099dc <MX_USART6_UART_Init+0x60>)
 8009984:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8009986:	4b14      	ldr	r3, [pc, #80]	; (80099d8 <MX_USART6_UART_Init+0x5c>)
 8009988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800998c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800998e:	4b12      	ldr	r3, [pc, #72]	; (80099d8 <MX_USART6_UART_Init+0x5c>)
 8009990:	2200      	movs	r2, #0
 8009992:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8009994:	4b10      	ldr	r3, [pc, #64]	; (80099d8 <MX_USART6_UART_Init+0x5c>)
 8009996:	2200      	movs	r2, #0
 8009998:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800999a:	4b0f      	ldr	r3, [pc, #60]	; (80099d8 <MX_USART6_UART_Init+0x5c>)
 800999c:	2200      	movs	r2, #0
 800999e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80099a0:	4b0d      	ldr	r3, [pc, #52]	; (80099d8 <MX_USART6_UART_Init+0x5c>)
 80099a2:	220c      	movs	r2, #12
 80099a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80099a6:	4b0c      	ldr	r3, [pc, #48]	; (80099d8 <MX_USART6_UART_Init+0x5c>)
 80099a8:	2200      	movs	r2, #0
 80099aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80099ac:	4b0a      	ldr	r3, [pc, #40]	; (80099d8 <MX_USART6_UART_Init+0x5c>)
 80099ae:	2200      	movs	r2, #0
 80099b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80099b2:	4809      	ldr	r0, [pc, #36]	; (80099d8 <MX_USART6_UART_Init+0x5c>)
 80099b4:	f7fe f8ec 	bl	8007b90 <HAL_UART_Init>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80099be:	f7f9 ffd7 	bl	8003970 <Error_Handler>
  }
  //Enable interrupts
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80099c2:	2200      	movs	r2, #0
 80099c4:	2100      	movs	r1, #0
 80099c6:	2047      	movs	r0, #71	; 0x47
 80099c8:	f7fa f955 	bl	8003c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 80099cc:	2047      	movs	r0, #71	; 0x47
 80099ce:	f7fa f96e 	bl	8003cae <HAL_NVIC_EnableIRQ>
}
 80099d2:	bf00      	nop
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	200006fc 	.word	0x200006fc
 80099dc:	40011400 	.word	0x40011400

080099e0 <MX_WWDG_Init>:

}

/* WWDG init function */
void MX_WWDG_Init(void)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	af00      	add	r7, sp, #0

  hwwdg.Instance = WWDG;
 80099e4:	4b0d      	ldr	r3, [pc, #52]	; (8009a1c <MX_WWDG_Init+0x3c>)
 80099e6:	4a0e      	ldr	r2, [pc, #56]	; (8009a20 <MX_WWDG_Init+0x40>)
 80099e8:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 80099ea:	4b0c      	ldr	r3, [pc, #48]	; (8009a1c <MX_WWDG_Init+0x3c>)
 80099ec:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80099f0:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 80099f2:	4b0a      	ldr	r3, [pc, #40]	; (8009a1c <MX_WWDG_Init+0x3c>)
 80099f4:	2240      	movs	r2, #64	; 0x40
 80099f6:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 80099f8:	4b08      	ldr	r3, [pc, #32]	; (8009a1c <MX_WWDG_Init+0x3c>)
 80099fa:	2240      	movs	r2, #64	; 0x40
 80099fc:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_ENABLE;
 80099fe:	4b07      	ldr	r3, [pc, #28]	; (8009a1c <MX_WWDG_Init+0x3c>)
 8009a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a04:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8009a06:	4805      	ldr	r0, [pc, #20]	; (8009a1c <MX_WWDG_Init+0x3c>)
 8009a08:	f7fe ff48 	bl	800889c <HAL_WWDG_Init>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d001      	beq.n	8009a16 <MX_WWDG_Init+0x36>
  {
    Error_Handler();
 8009a12:	f7f9 ffad 	bl	8003970 <Error_Handler>
  }

}
 8009a16:	bf00      	nop
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	2000073c 	.word	0x2000073c
 8009a20:	40002c00 	.word	0x40002c00

08009a24 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009a2e:	f000 f89d 	bl	8009b6c <BSP_SD_IsDetected>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d001      	beq.n	8009a3c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e012      	b.n	8009a62 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009a3c:	480b      	ldr	r0, [pc, #44]	; (8009a6c <BSP_SD_Init+0x48>)
 8009a3e:	f7fc fa85 	bl	8005f4c <HAL_SD_Init>
 8009a42:	4603      	mov	r3, r0
 8009a44:	71fb      	strb	r3, [r7, #7]
#ifdef BUS_4BITS
  /* Configure SD Bus width */
  if (sd_state == MSD_OK)
 8009a46:	79fb      	ldrb	r3, [r7, #7]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d109      	bne.n	8009a60 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009a4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009a50:	4806      	ldr	r0, [pc, #24]	; (8009a6c <BSP_SD_Init+0x48>)
 8009a52:	f7fd f9fe 	bl	8006e52 <HAL_SD_ConfigWideBusOperation>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif
  return sd_state;
 8009a60:	79fb      	ldrb	r3, [r7, #7]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	2000039c 	.word	0x2000039c

08009a70 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b088      	sub	sp, #32
 8009a74:	af02      	add	r7, sp, #8
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
 8009a7c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state;

  __HAL_LOCK(&hsd);
 8009a7e:	4b0d      	ldr	r3, [pc, #52]	; (8009ab4 <BSP_SD_ReadBlocks+0x44>)
 8009a80:	7f1b      	ldrb	r3, [r3, #28]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d101      	bne.n	8009a8a <BSP_SD_ReadBlocks+0x1a>
 8009a86:	2302      	movs	r3, #2
 8009a88:	e010      	b.n	8009aac <BSP_SD_ReadBlocks+0x3c>
 8009a8a:	4b0a      	ldr	r3, [pc, #40]	; (8009ab4 <BSP_SD_ReadBlocks+0x44>)
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	771a      	strb	r2, [r3, #28]
  sd_state = HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout);
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	68f9      	ldr	r1, [r7, #12]
 8009a9a:	4806      	ldr	r0, [pc, #24]	; (8009ab4 <BSP_SD_ReadBlocks+0x44>)
 8009a9c:	f7fc fade 	bl	800605c <HAL_SD_ReadBlocks>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	75fb      	strb	r3, [r7, #23]
  __HAL_UNLOCK(&hsd);
 8009aa4:	4b03      	ldr	r3, [pc, #12]	; (8009ab4 <BSP_SD_ReadBlocks+0x44>)
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	771a      	strb	r2, [r3, #28]
  
  return sd_state;  
 8009aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	2000039c 	.word	0x2000039c

08009ab8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b088      	sub	sp, #32
 8009abc:	af02      	add	r7, sp, #8
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
 8009ac4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	75fb      	strb	r3, [r7, #23]

  __HAL_LOCK(&hsd);
 8009aca:	4b0d      	ldr	r3, [pc, #52]	; (8009b00 <BSP_SD_WriteBlocks+0x48>)
 8009acc:	7f1b      	ldrb	r3, [r3, #28]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d101      	bne.n	8009ad6 <BSP_SD_WriteBlocks+0x1e>
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	e010      	b.n	8009af8 <BSP_SD_WriteBlocks+0x40>
 8009ad6:	4b0a      	ldr	r3, [pc, #40]	; (8009b00 <BSP_SD_WriteBlocks+0x48>)
 8009ad8:	2201      	movs	r2, #1
 8009ada:	771a      	strb	r2, [r3, #28]
  sd_state = HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout);
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	68f9      	ldr	r1, [r7, #12]
 8009ae6:	4806      	ldr	r0, [pc, #24]	; (8009b00 <BSP_SD_WriteBlocks+0x48>)
 8009ae8:	f7fc fc4f 	bl	800638a <HAL_SD_WriteBlocks>
 8009aec:	4603      	mov	r3, r0
 8009aee:	75fb      	strb	r3, [r7, #23]
  __HAL_UNLOCK(&hsd);
 8009af0:	4b03      	ldr	r3, [pc, #12]	; (8009b00 <BSP_SD_WriteBlocks+0x48>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	771a      	strb	r2, [r3, #28]

  return sd_state;  
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	2000039c 	.word	0x2000039c

08009b04 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
  uint8_t sd_state;  

  __HAL_LOCK(&hsd);
 8009b0a:	4b0e      	ldr	r3, [pc, #56]	; (8009b44 <BSP_SD_GetCardState+0x40>)
 8009b0c:	7f1b      	ldrb	r3, [r3, #28]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d101      	bne.n	8009b16 <BSP_SD_GetCardState+0x12>
 8009b12:	2302      	movs	r3, #2
 8009b14:	e011      	b.n	8009b3a <BSP_SD_GetCardState+0x36>
 8009b16:	4b0b      	ldr	r3, [pc, #44]	; (8009b44 <BSP_SD_GetCardState+0x40>)
 8009b18:	2201      	movs	r2, #1
 8009b1a:	771a      	strb	r2, [r3, #28]
  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER)
 8009b1c:	4809      	ldr	r0, [pc, #36]	; (8009b44 <BSP_SD_GetCardState+0x40>)
 8009b1e:	f7fd fa14 	bl	8006f4a <HAL_SD_GetCardState>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b04      	cmp	r3, #4
 8009b26:	d102      	bne.n	8009b2e <BSP_SD_GetCardState+0x2a>
    sd_state = HAL_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	71fb      	strb	r3, [r7, #7]
 8009b2c:	e001      	b.n	8009b32 <BSP_SD_GetCardState+0x2e>
  else
    sd_state = HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	71fb      	strb	r3, [r7, #7]
  __HAL_UNLOCK(&hsd);
 8009b32:	4b04      	ldr	r3, [pc, #16]	; (8009b44 <BSP_SD_GetCardState+0x40>)
 8009b34:	2200      	movs	r2, #0
 8009b36:	771a      	strb	r2, [r3, #28]
  
  return sd_state;
 8009b38:	79fb      	ldrb	r3, [r7, #7]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	2000039c 	.word	0x2000039c

08009b48 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b50:	b672      	cpsid	i
}
 8009b52:	bf00      	nop
  /* Get SD card Information */
    __disable_irq();
    HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009b54:	6879      	ldr	r1, [r7, #4]
 8009b56:	4804      	ldr	r0, [pc, #16]	; (8009b68 <BSP_SD_GetCardInfo+0x20>)
 8009b58:	f7fd f94f 	bl	8006dfa <HAL_SD_GetCardInfo>
  __ASM volatile ("cpsie i" : : : "memory");
 8009b5c:	b662      	cpsie	i
}
 8009b5e:	bf00      	nop
    __enable_irq();
}
 8009b60:	bf00      	nop
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	2000039c 	.word	0x2000039c

08009b6c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009b72:	2301      	movs	r3, #1
 8009b74:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8009b76:	79fb      	ldrb	r3, [r7, #7]
 8009b78:	b2db      	uxtb	r3, r3
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
	...

08009b88 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver((Diskio_drvTypeDef*)&SD_Driver, SD_Path);
 8009b8c:	4904      	ldr	r1, [pc, #16]	; (8009ba0 <MX_FATFS_Init+0x18>)
 8009b8e:	4805      	ldr	r0, [pc, #20]	; (8009ba4 <MX_FATFS_Init+0x1c>)
 8009b90:	f000 fc3c 	bl	800a40c <FATFS_LinkDriver>
 8009b94:	4603      	mov	r3, r0
 8009b96:	461a      	mov	r2, r3
 8009b98:	4b03      	ldr	r3, [pc, #12]	; (8009ba8 <MX_FATFS_Init+0x20>)
 8009b9a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009b9c:	bf00      	nop
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	200007dc 	.word	0x200007dc
 8009ba4:	0801041c 	.word	0x0801041c
 8009ba8:	200007d8 	.word	0x200007d8

08009bac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009bb6:	4b0b      	ldr	r3, [pc, #44]	; (8009be4 <SD_initialize+0x38>)
 8009bb8:	2201      	movs	r2, #1
 8009bba:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8009bbc:	f7ff ff32 	bl	8009a24 <BSP_SD_Init>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d107      	bne.n	8009bd6 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009bc6:	4b07      	ldr	r3, [pc, #28]	; (8009be4 <SD_initialize+0x38>)
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	f023 0301 	bic.w	r3, r3, #1
 8009bd0:	b2da      	uxtb	r2, r3
 8009bd2:	4b04      	ldr	r3, [pc, #16]	; (8009be4 <SD_initialize+0x38>)
 8009bd4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009bd6:	4b03      	ldr	r3, [pc, #12]	; (8009be4 <SD_initialize+0x38>)
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	b2db      	uxtb	r3, r3
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3708      	adds	r7, #8
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	20000010 	.word	0x20000010

08009be8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	4603      	mov	r3, r0
 8009bf0:	71fb      	strb	r3, [r7, #7]
  
  if(BSP_SD_GetCardState() != SD_TRANSFER_BUSY)
 8009bf2:	f7ff ff87 	bl	8009b04 <BSP_SD_GetCardState>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d008      	beq.n	8009c0e <SD_status+0x26>
    Stat &= ~STA_BUSY;
 8009bfc:	4b0b      	ldr	r3, [pc, #44]	; (8009c2c <SD_status+0x44>)
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	f023 0308 	bic.w	r3, r3, #8
 8009c06:	b2da      	uxtb	r2, r3
 8009c08:	4b08      	ldr	r3, [pc, #32]	; (8009c2c <SD_status+0x44>)
 8009c0a:	701a      	strb	r2, [r3, #0]
 8009c0c:	e007      	b.n	8009c1e <SD_status+0x36>
  else
    Stat |= STA_BUSY;
 8009c0e:	4b07      	ldr	r3, [pc, #28]	; (8009c2c <SD_status+0x44>)
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	f043 0308 	orr.w	r3, r3, #8
 8009c18:	b2da      	uxtb	r2, r3
 8009c1a:	4b04      	ldr	r3, [pc, #16]	; (8009c2c <SD_status+0x44>)
 8009c1c:	701a      	strb	r2, [r3, #0]
  
  return Stat;
 8009c1e:	4b03      	ldr	r3, [pc, #12]	; (8009c2c <SD_status+0x44>)
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	b2db      	uxtb	r3, r3
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	20000010 	.word	0x20000010

08009c30 <SD_read>:
  */
    
#define MMC_RDWR_TRIES       20
#define MMC_STATUS_TRIES     500
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60b9      	str	r1, [r7, #8]
 8009c38:	607a      	str	r2, [r7, #4]
 8009c3a:	603b      	str	r3, [r7, #0]
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = MMC_RDWR_TRIES;
 8009c40:	2314      	movs	r3, #20
 8009c42:	617b      	str	r3, [r7, #20]

  while (BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t) (sector), count, SD_DATATIMEOUT) != HAL_OK)
 8009c44:	e009      	b.n	8009c5a <SD_read+0x2a>
  {
    if (timeout-- == 0)
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	1e5a      	subs	r2, r3, #1
 8009c4a:	617a      	str	r2, [r7, #20]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d101      	bne.n	8009c54 <SD_read+0x24>
    {
      return RES_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	e020      	b.n	8009c96 <SD_read+0x66>
    }
    osDelay(1);
 8009c54:	2001      	movs	r0, #1
 8009c56:	f000 fc50 	bl	800a4fa <osDelay>
  while (BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t) (sector), count, SD_DATATIMEOUT) != HAL_OK)
 8009c5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	6879      	ldr	r1, [r7, #4]
 8009c62:	68b8      	ldr	r0, [r7, #8]
 8009c64:	f7ff ff04 	bl	8009a70 <BSP_SD_ReadBlocks>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1eb      	bne.n	8009c46 <SD_read+0x16>
  }
  timeout = MMC_STATUS_TRIES;
 8009c6e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009c72:	617b      	str	r3, [r7, #20]
  while (BSP_SD_GetCardState() != HAL_OK)
 8009c74:	e009      	b.n	8009c8a <SD_read+0x5a>
  {
    if (timeout-- == 0)
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	1e5a      	subs	r2, r3, #1
 8009c7a:	617a      	str	r2, [r7, #20]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d101      	bne.n	8009c84 <SD_read+0x54>
    {
      return RES_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	e008      	b.n	8009c96 <SD_read+0x66>
    }
    osDelay(1);
 8009c84:	2001      	movs	r0, #1
 8009c86:	f000 fc38 	bl	800a4fa <osDelay>
  while (BSP_SD_GetCardState() != HAL_OK)
 8009c8a:	f7ff ff3b 	bl	8009b04 <BSP_SD_GetCardState>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d1f0      	bne.n	8009c76 <SD_read+0x46>
  }
  return RES_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3718      	adds	r7, #24
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b086      	sub	sp, #24
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
 8009ca8:	603b      	str	r3, [r7, #0]
 8009caa:	4603      	mov	r3, r0
 8009cac:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = MMC_RDWR_TRIES;
 8009cae:	2314      	movs	r3, #20
 8009cb0:	617b      	str	r3, [r7, #20]

  while (BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_DATATIMEOUT) != HAL_OK)
 8009cb2:	e009      	b.n	8009cc8 <SD_write+0x2a>
  {
    if (timeout-- == 0)
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	1e5a      	subs	r2, r3, #1
 8009cb8:	617a      	str	r2, [r7, #20]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d101      	bne.n	8009cc2 <SD_write+0x24>
    {
      return RES_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e020      	b.n	8009d04 <SD_write+0x66>
    }
    osDelay(1);
 8009cc2:	2001      	movs	r0, #1
 8009cc4:	f000 fc19 	bl	800a4fa <osDelay>
  while (BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_DATATIMEOUT) != HAL_OK)
 8009cc8:	f241 3388 	movw	r3, #5000	; 0x1388
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	6879      	ldr	r1, [r7, #4]
 8009cd0:	68b8      	ldr	r0, [r7, #8]
 8009cd2:	f7ff fef1 	bl	8009ab8 <BSP_SD_WriteBlocks>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1eb      	bne.n	8009cb4 <SD_write+0x16>
  }
  timeout = MMC_STATUS_TRIES;
 8009cdc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009ce0:	617b      	str	r3, [r7, #20]
  while(BSP_SD_GetCardState() != HAL_OK)
 8009ce2:	e009      	b.n	8009cf8 <SD_write+0x5a>
  {
    if (timeout-- == 0)
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	1e5a      	subs	r2, r3, #1
 8009ce8:	617a      	str	r2, [r7, #20]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d101      	bne.n	8009cf2 <SD_write+0x54>
    {
      return RES_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e008      	b.n	8009d04 <SD_write+0x66>
    }
    osDelay(1);
 8009cf2:	2001      	movs	r0, #1
 8009cf4:	f000 fc01 	bl	800a4fa <osDelay>
  while(BSP_SD_GetCardState() != HAL_OK)
 8009cf8:	f7ff ff04 	bl	8009b04 <BSP_SD_GetCardState>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1f0      	bne.n	8009ce4 <SD_write+0x46>
  }    
  return RES_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3718      	adds	r7, #24
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b08c      	sub	sp, #48	; 0x30
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	4603      	mov	r3, r0
 8009d14:	603a      	str	r2, [r7, #0]
 8009d16:	71fb      	strb	r3, [r7, #7]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) 
 8009d22:	4b24      	ldr	r3, [pc, #144]	; (8009db4 <SD_ioctl+0xa8>)
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	f003 0301 	and.w	r3, r3, #1
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d001      	beq.n	8009d34 <SD_ioctl+0x28>
    return RES_NOTRDY;
 8009d30:	2303      	movs	r3, #3
 8009d32:	e03b      	b.n	8009dac <SD_ioctl+0xa0>
  
  switch (cmd)
 8009d34:	79bb      	ldrb	r3, [r7, #6]
 8009d36:	2b03      	cmp	r3, #3
 8009d38:	d833      	bhi.n	8009da2 <SD_ioctl+0x96>
 8009d3a:	a201      	add	r2, pc, #4	; (adr r2, 8009d40 <SD_ioctl+0x34>)
 8009d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d40:	08009d51 	.word	0x08009d51
 8009d44:	08009d59 	.word	0x08009d59
 8009d48:	08009d71 	.word	0x08009d71
 8009d4c:	08009d8b 	.word	0x08009d8b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009d50:	2300      	movs	r3, #0
 8009d52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009d56:	e027      	b.n	8009da8 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009d58:	f107 030c 	add.w	r3, r7, #12
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7ff fef3 	bl	8009b48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009d6e:	e01b      	b.n	8009da8 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009d70:	f107 030c 	add.w	r3, r7, #12
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7ff fee7 	bl	8009b48 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009d88:	e00e      	b.n	8009da8 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009d8a:	f107 030c 	add.w	r3, r7, #12
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7ff feda 	bl	8009b48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8009d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009da0:	e002      	b.n	8009da8 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8009da2:	2304      	movs	r3, #4
 8009da4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8009da8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3730      	adds	r7, #48	; 0x30
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	20000010 	.word	0x20000010

08009db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009dbc:	2003      	movs	r0, #3
 8009dbe:	f7f9 ff4f 	bl	8003c60 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	f06f 000b 	mvn.w	r0, #11
 8009dca:	f7f9 ff54 	bl	8003c76 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8009dce:	2200      	movs	r2, #0
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	f06f 000a 	mvn.w	r0, #10
 8009dd6:	f7f9 ff4e 	bl	8003c76 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8009dda:	2200      	movs	r2, #0
 8009ddc:	2100      	movs	r1, #0
 8009dde:	f06f 0009 	mvn.w	r0, #9
 8009de2:	f7f9 ff48 	bl	8003c76 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8009de6:	2200      	movs	r2, #0
 8009de8:	2100      	movs	r1, #0
 8009dea:	f06f 0004 	mvn.w	r0, #4
 8009dee:	f7f9 ff42 	bl	8003c76 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8009df2:	2200      	movs	r2, #0
 8009df4:	2100      	movs	r1, #0
 8009df6:	f06f 0003 	mvn.w	r0, #3
 8009dfa:	f7f9 ff3c 	bl	8003c76 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009dfe:	2200      	movs	r2, #0
 8009e00:	210f      	movs	r1, #15
 8009e02:	f06f 0001 	mvn.w	r0, #1
 8009e06:	f7f9 ff36 	bl	8003c76 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	210f      	movs	r1, #15
 8009e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e12:	f7f9 ff30 	bl	8003c76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009e16:	bf00      	nop
 8009e18:	bd80      	pop	{r7, pc}
	...

08009e1c <HAL_I2C_MspInit>:
  /* USER CODE END CAN1_MspDeInit 1 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b08a      	sub	sp, #40	; 0x28
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a37      	ldr	r2, [pc, #220]	; (8009f08 <HAL_I2C_MspInit+0xec>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d11f      	bne.n	8009e6e <HAL_I2C_MspInit+0x52>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SYS_SCL_Pin|SYS_SDA_Pin;
 8009e2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009e34:	2312      	movs	r3, #18
 8009e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009e40:	2304      	movs	r3, #4
 8009e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e44:	f107 0314 	add.w	r3, r7, #20
 8009e48:	4619      	mov	r1, r3
 8009e4a:	4830      	ldr	r0, [pc, #192]	; (8009f0c <HAL_I2C_MspInit+0xf0>)
 8009e4c:	f7fa f916 	bl	800407c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009e50:	2300      	movs	r3, #0
 8009e52:	613b      	str	r3, [r7, #16]
 8009e54:	4b2e      	ldr	r3, [pc, #184]	; (8009f10 <HAL_I2C_MspInit+0xf4>)
 8009e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e58:	4a2d      	ldr	r2, [pc, #180]	; (8009f10 <HAL_I2C_MspInit+0xf4>)
 8009e5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8009e60:	4b2b      	ldr	r3, [pc, #172]	; (8009f10 <HAL_I2C_MspInit+0xf4>)
 8009e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e68:	613b      	str	r3, [r7, #16]
 8009e6a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8009e6c:	e048      	b.n	8009f00 <HAL_I2C_MspInit+0xe4>
  else if(hi2c->Instance==I2C2)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a28      	ldr	r2, [pc, #160]	; (8009f14 <HAL_I2C_MspInit+0xf8>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d11f      	bne.n	8009eb8 <HAL_I2C_MspInit+0x9c>
    GPIO_InitStruct.Pin = SEN_SCL_Pin|SEN_SDA_Pin;
 8009e78:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009e7e:	2312      	movs	r3, #18
 8009e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009e82:	2301      	movs	r3, #1
 8009e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e86:	2303      	movs	r3, #3
 8009e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8009e8a:	2304      	movs	r3, #4
 8009e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e8e:	f107 0314 	add.w	r3, r7, #20
 8009e92:	4619      	mov	r1, r3
 8009e94:	481d      	ldr	r0, [pc, #116]	; (8009f0c <HAL_I2C_MspInit+0xf0>)
 8009e96:	f7fa f8f1 	bl	800407c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	60fb      	str	r3, [r7, #12]
 8009e9e:	4b1c      	ldr	r3, [pc, #112]	; (8009f10 <HAL_I2C_MspInit+0xf4>)
 8009ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea2:	4a1b      	ldr	r2, [pc, #108]	; (8009f10 <HAL_I2C_MspInit+0xf4>)
 8009ea4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8009eaa:	4b19      	ldr	r3, [pc, #100]	; (8009f10 <HAL_I2C_MspInit+0xf4>)
 8009eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009eb2:	60fb      	str	r3, [r7, #12]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
}
 8009eb6:	e023      	b.n	8009f00 <HAL_I2C_MspInit+0xe4>
  else if(hi2c->Instance==I2C3)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a16      	ldr	r2, [pc, #88]	; (8009f18 <HAL_I2C_MspInit+0xfc>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d11e      	bne.n	8009f00 <HAL_I2C_MspInit+0xe4>
    GPIO_InitStruct.Pin = PAY_SCL_Pin|PAY_SDA_Pin;
 8009ec2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009ec8:	2312      	movs	r3, #18
 8009eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8009ed4:	2304      	movs	r3, #4
 8009ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009ed8:	f107 0314 	add.w	r3, r7, #20
 8009edc:	4619      	mov	r1, r3
 8009ede:	480f      	ldr	r0, [pc, #60]	; (8009f1c <HAL_I2C_MspInit+0x100>)
 8009ee0:	f7fa f8cc 	bl	800407c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	60bb      	str	r3, [r7, #8]
 8009ee8:	4b09      	ldr	r3, [pc, #36]	; (8009f10 <HAL_I2C_MspInit+0xf4>)
 8009eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eec:	4a08      	ldr	r2, [pc, #32]	; (8009f10 <HAL_I2C_MspInit+0xf4>)
 8009eee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8009ef4:	4b06      	ldr	r3, [pc, #24]	; (8009f10 <HAL_I2C_MspInit+0xf4>)
 8009ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009efc:	60bb      	str	r3, [r7, #8]
 8009efe:	68bb      	ldr	r3, [r7, #8]
}
 8009f00:	bf00      	nop
 8009f02:	3728      	adds	r7, #40	; 0x28
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	40005400 	.word	0x40005400
 8009f0c:	40020400 	.word	0x40020400
 8009f10:	40023800 	.word	0x40023800
 8009f14:	40005800 	.word	0x40005800
 8009f18:	40005c00 	.word	0x40005c00
 8009f1c:	40021c00 	.word	0x40021c00

08009f20 <HAL_SD_MspInit>:
  /* USER CODE END RTC_MspDeInit 1 */

}

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b088      	sub	sp, #32
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDIO)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a1e      	ldr	r2, [pc, #120]	; (8009fa8 <HAL_SD_MspInit+0x88>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d136      	bne.n	8009fa0 <HAL_SD_MspInit+0x80>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8009f32:	2300      	movs	r3, #0
 8009f34:	60bb      	str	r3, [r7, #8]
 8009f36:	4b1d      	ldr	r3, [pc, #116]	; (8009fac <HAL_SD_MspInit+0x8c>)
 8009f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f3a:	4a1c      	ldr	r2, [pc, #112]	; (8009fac <HAL_SD_MspInit+0x8c>)
 8009f3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009f40:	6453      	str	r3, [r2, #68]	; 0x44
 8009f42:	4b1a      	ldr	r3, [pc, #104]	; (8009fac <HAL_SD_MspInit+0x8c>)
 8009f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f4a:	60bb      	str	r3, [r7, #8]
 8009f4c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8009f4e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8009f52:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f54:	2302      	movs	r3, #2
 8009f56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009f60:	230c      	movs	r3, #12
 8009f62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f64:	f107 030c 	add.w	r3, r7, #12
 8009f68:	4619      	mov	r1, r3
 8009f6a:	4811      	ldr	r0, [pc, #68]	; (8009fb0 <HAL_SD_MspInit+0x90>)
 8009f6c:	f7fa f886 	bl	800407c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009f70:	2304      	movs	r3, #4
 8009f72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f74:	2302      	movs	r3, #2
 8009f76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009f80:	230c      	movs	r3, #12
 8009f82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009f84:	f107 030c 	add.w	r3, r7, #12
 8009f88:	4619      	mov	r1, r3
 8009f8a:	480a      	ldr	r0, [pc, #40]	; (8009fb4 <HAL_SD_MspInit+0x94>)
 8009f8c:	f7fa f876 	bl	800407c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SDIO_IRQn, USER_INT_PRIORITY, 0);
 8009f90:	2200      	movs	r2, #0
 8009f92:	2106      	movs	r1, #6
 8009f94:	2031      	movs	r0, #49	; 0x31
 8009f96:	f7f9 fe6e 	bl	8003c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8009f9a:	2031      	movs	r0, #49	; 0x31
 8009f9c:	f7f9 fe87 	bl	8003cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8009fa0:	bf00      	nop
 8009fa2:	3720      	adds	r7, #32
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	40012c00 	.word	0x40012c00
 8009fac:	40023800 	.word	0x40023800
 8009fb0:	40020800 	.word	0x40020800
 8009fb4:	40020c00 	.word	0x40020c00

08009fb8 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM5)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a0b      	ldr	r2, [pc, #44]	; (8009ff4 <HAL_TIM_Base_MspInit+0x3c>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d10d      	bne.n	8009fe6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8009fca:	2300      	movs	r3, #0
 8009fcc:	60fb      	str	r3, [r7, #12]
 8009fce:	4b0a      	ldr	r3, [pc, #40]	; (8009ff8 <HAL_TIM_Base_MspInit+0x40>)
 8009fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd2:	4a09      	ldr	r2, [pc, #36]	; (8009ff8 <HAL_TIM_Base_MspInit+0x40>)
 8009fd4:	f043 0308 	orr.w	r3, r3, #8
 8009fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8009fda:	4b07      	ldr	r3, [pc, #28]	; (8009ff8 <HAL_TIM_Base_MspInit+0x40>)
 8009fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fde:	f003 0308 	and.w	r3, r3, #8
 8009fe2:	60fb      	str	r3, [r7, #12]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8009fe6:	bf00      	nop
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	40000c00 	.word	0x40000c00
 8009ff8:	40023800 	.word	0x40023800

08009ffc <HAL_UART_MspInit>:
  /* USER CODE END TIM5_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b08a      	sub	sp, #40	; 0x28
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a42      	ldr	r2, [pc, #264]	; (800a114 <HAL_UART_MspInit+0x118>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d126      	bne.n	800a05c <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a00e:	2300      	movs	r3, #0
 800a010:	613b      	str	r3, [r7, #16]
 800a012:	4b41      	ldr	r3, [pc, #260]	; (800a118 <HAL_UART_MspInit+0x11c>)
 800a014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a016:	4a40      	ldr	r2, [pc, #256]	; (800a118 <HAL_UART_MspInit+0x11c>)
 800a018:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a01c:	6413      	str	r3, [r2, #64]	; 0x40
 800a01e:	4b3e      	ldr	r3, [pc, #248]	; (800a118 <HAL_UART_MspInit+0x11c>)
 800a020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a026:	613b      	str	r3, [r7, #16]
 800a028:	693b      	ldr	r3, [r7, #16]
  
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a02a:	2303      	movs	r3, #3
 800a02c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a02e:	2302      	movs	r3, #2
 800a030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a032:	2301      	movs	r3, #1
 800a034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a036:	2303      	movs	r3, #3
 800a038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a03a:	2308      	movs	r3, #8
 800a03c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a03e:	f107 0314 	add.w	r3, r7, #20
 800a042:	4619      	mov	r1, r3
 800a044:	4835      	ldr	r0, [pc, #212]	; (800a11c <HAL_UART_MspInit+0x120>)
 800a046:	f7fa f819 	bl	800407c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(UART4_IRQn, USER_INT_PRIORITY, 0);
 800a04a:	2200      	movs	r2, #0
 800a04c:	2106      	movs	r1, #6
 800a04e:	2034      	movs	r0, #52	; 0x34
 800a050:	f7f9 fe11 	bl	8003c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800a054:	2034      	movs	r0, #52	; 0x34
 800a056:	f7f9 fe2a 	bl	8003cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800a05a:	e057      	b.n	800a10c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART1)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a2f      	ldr	r2, [pc, #188]	; (800a120 <HAL_UART_MspInit+0x124>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d127      	bne.n	800a0b6 <HAL_UART_MspInit+0xba>
    __HAL_RCC_USART1_CLK_ENABLE();
 800a066:	2300      	movs	r3, #0
 800a068:	60fb      	str	r3, [r7, #12]
 800a06a:	4b2b      	ldr	r3, [pc, #172]	; (800a118 <HAL_UART_MspInit+0x11c>)
 800a06c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a06e:	4a2a      	ldr	r2, [pc, #168]	; (800a118 <HAL_UART_MspInit+0x11c>)
 800a070:	f043 0310 	orr.w	r3, r3, #16
 800a074:	6453      	str	r3, [r2, #68]	; 0x44
 800a076:	4b28      	ldr	r3, [pc, #160]	; (800a118 <HAL_UART_MspInit+0x11c>)
 800a078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a07a:	f003 0310 	and.w	r3, r3, #16
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800a082:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a088:	2302      	movs	r3, #2
 800a08a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a08c:	2301      	movs	r3, #1
 800a08e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a090:	2303      	movs	r3, #3
 800a092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a094:	2307      	movs	r3, #7
 800a096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a098:	f107 0314 	add.w	r3, r7, #20
 800a09c:	4619      	mov	r1, r3
 800a09e:	481f      	ldr	r0, [pc, #124]	; (800a11c <HAL_UART_MspInit+0x120>)
 800a0a0:	f7f9 ffec 	bl	800407c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, USER_INT_PRIORITY, 0);
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	2106      	movs	r1, #6
 800a0a8:	2025      	movs	r0, #37	; 0x25
 800a0aa:	f7f9 fde4 	bl	8003c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);    
 800a0ae:	2025      	movs	r0, #37	; 0x25
 800a0b0:	f7f9 fdfd 	bl	8003cae <HAL_NVIC_EnableIRQ>
}
 800a0b4:	e02a      	b.n	800a10c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART6)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a1a      	ldr	r2, [pc, #104]	; (800a124 <HAL_UART_MspInit+0x128>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d125      	bne.n	800a10c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART6_CLK_ENABLE();
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	60bb      	str	r3, [r7, #8]
 800a0c4:	4b14      	ldr	r3, [pc, #80]	; (800a118 <HAL_UART_MspInit+0x11c>)
 800a0c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0c8:	4a13      	ldr	r2, [pc, #76]	; (800a118 <HAL_UART_MspInit+0x11c>)
 800a0ca:	f043 0320 	orr.w	r3, r3, #32
 800a0ce:	6453      	str	r3, [r2, #68]	; 0x44
 800a0d0:	4b11      	ldr	r3, [pc, #68]	; (800a118 <HAL_UART_MspInit+0x11c>)
 800a0d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0d4:	f003 0320 	and.w	r3, r3, #32
 800a0d8:	60bb      	str	r3, [r7, #8]
 800a0da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PAY_TX_Pin|PAY_RX_Pin;
 800a0dc:	23c0      	movs	r3, #192	; 0xc0
 800a0de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0e0:	2302      	movs	r3, #2
 800a0e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a0ec:	2308      	movs	r3, #8
 800a0ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a0f0:	f107 0314 	add.w	r3, r7, #20
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	480c      	ldr	r0, [pc, #48]	; (800a128 <HAL_UART_MspInit+0x12c>)
 800a0f8:	f7f9 ffc0 	bl	800407c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, USER_INT_PRIORITY, 0);
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	2106      	movs	r1, #6
 800a100:	2047      	movs	r0, #71	; 0x47
 800a102:	f7f9 fdb8 	bl	8003c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800a106:	2047      	movs	r0, #71	; 0x47
 800a108:	f7f9 fdd1 	bl	8003cae <HAL_NVIC_EnableIRQ>
}
 800a10c:	bf00      	nop
 800a10e:	3728      	adds	r7, #40	; 0x28
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	40004c00 	.word	0x40004c00
 800a118:	40023800 	.word	0x40023800
 800a11c:	40020000 	.word	0x40020000
 800a120:	40011000 	.word	0x40011000
 800a124:	40011400 	.word	0x40011400
 800a128:	40020800 	.word	0x40020800

0800a12c <HAL_WWDG_MspInit>:
  }

}

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]

  if(hwwdg->Instance==WWDG)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a0b      	ldr	r2, [pc, #44]	; (800a168 <HAL_WWDG_MspInit+0x3c>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d10d      	bne.n	800a15a <HAL_WWDG_MspInit+0x2e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 800a13e:	2300      	movs	r3, #0
 800a140:	60fb      	str	r3, [r7, #12]
 800a142:	4b0a      	ldr	r3, [pc, #40]	; (800a16c <HAL_WWDG_MspInit+0x40>)
 800a144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a146:	4a09      	ldr	r2, [pc, #36]	; (800a16c <HAL_WWDG_MspInit+0x40>)
 800a148:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a14c:	6413      	str	r3, [r2, #64]	; 0x40
 800a14e:	4b07      	ldr	r3, [pc, #28]	; (800a16c <HAL_WWDG_MspInit+0x40>)
 800a150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a156:	60fb      	str	r3, [r7, #12]
 800a158:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 800a15a:	bf00      	nop
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	40002c00 	.word	0x40002c00
 800a16c:	40023800 	.word	0x40023800

0800a170 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b08c      	sub	sp, #48	; 0x30
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a178:	2300      	movs	r3, #0
 800a17a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a17c:	2300      	movs	r3, #0
 800a17e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800a180:	2200      	movs	r2, #0
 800a182:	6879      	ldr	r1, [r7, #4]
 800a184:	2019      	movs	r0, #25
 800a186:	f7f9 fd76 	bl	8003c76 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800a18a:	2019      	movs	r0, #25
 800a18c:	f7f9 fd8f 	bl	8003cae <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800a190:	2300      	movs	r3, #0
 800a192:	60fb      	str	r3, [r7, #12]
 800a194:	4b1f      	ldr	r3, [pc, #124]	; (800a214 <HAL_InitTick+0xa4>)
 800a196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a198:	4a1e      	ldr	r2, [pc, #120]	; (800a214 <HAL_InitTick+0xa4>)
 800a19a:	f043 0301 	orr.w	r3, r3, #1
 800a19e:	6453      	str	r3, [r2, #68]	; 0x44
 800a1a0:	4b1c      	ldr	r3, [pc, #112]	; (800a214 <HAL_InitTick+0xa4>)
 800a1a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a4:	f003 0301 	and.w	r3, r3, #1
 800a1a8:	60fb      	str	r3, [r7, #12]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a1ac:	f107 0210 	add.w	r2, r7, #16
 800a1b0:	f107 0314 	add.w	r3, r7, #20
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7fb fc78 	bl	8005aac <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800a1bc:	f7fb fc54 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	005b      	lsls	r3, r3, #1
 800a1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800a1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c8:	4a13      	ldr	r2, [pc, #76]	; (800a218 <HAL_InitTick+0xa8>)
 800a1ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ce:	0c9b      	lsrs	r3, r3, #18
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800a1d4:	4b11      	ldr	r3, [pc, #68]	; (800a21c <HAL_InitTick+0xac>)
 800a1d6:	4a12      	ldr	r2, [pc, #72]	; (800a220 <HAL_InitTick+0xb0>)
 800a1d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800a1da:	4b10      	ldr	r3, [pc, #64]	; (800a21c <HAL_InitTick+0xac>)
 800a1dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a1e0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800a1e2:	4a0e      	ldr	r2, [pc, #56]	; (800a21c <HAL_InitTick+0xac>)
 800a1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800a1e8:	4b0c      	ldr	r3, [pc, #48]	; (800a21c <HAL_InitTick+0xac>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1ee:	4b0b      	ldr	r3, [pc, #44]	; (800a21c <HAL_InitTick+0xac>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800a1f4:	4809      	ldr	r0, [pc, #36]	; (800a21c <HAL_InitTick+0xac>)
 800a1f6:	f7fd fa96 	bl	8007726 <HAL_TIM_Base_Init>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d104      	bne.n	800a20a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800a200:	4806      	ldr	r0, [pc, #24]	; (800a21c <HAL_InitTick+0xac>)
 800a202:	f7fd fabb 	bl	800777c <HAL_TIM_Base_Start_IT>
 800a206:	4603      	mov	r3, r0
 800a208:	e000      	b.n	800a20c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3730      	adds	r7, #48	; 0x30
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	40023800 	.word	0x40023800
 800a218:	431bde83 	.word	0x431bde83
 800a21c:	200007e0 	.word	0x200007e0
 800a220:	40010000 	.word	0x40010000

0800a224 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800a224:	b480      	push	{r7}
 800a226:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a228:	bf00      	nop
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
	...

0800a234 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  *((__IO uint32_t*)MAILBOX_ADDRESS) = MAILBOX_VAL_HARD;
 800a238:	4b03      	ldr	r3, [pc, #12]	; (800a248 <HardFault_Handler+0x14>)
 800a23a:	4a04      	ldr	r2, [pc, #16]	; (800a24c <HardFault_Handler+0x18>)
 800a23c:	601a      	str	r2, [r3, #0]
  MX_WWDG_Init();
 800a23e:	f7ff fbcf 	bl	80099e0 <MX_WWDG_Init>
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	Error_Handler();
 800a242:	f7f9 fb95 	bl	8003970 <Error_Handler>
 800a246:	e7fc      	b.n	800a242 <HardFault_Handler+0xe>
 800a248:	40002854 	.word	0x40002854
 800a24c:	0bad0bad 	.word	0x0bad0bad

0800a250 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800a250:	b480      	push	{r7}
 800a252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a254:	e7fe      	b.n	800a254 <MemManage_Handler+0x4>

0800a256 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800a256:	b480      	push	{r7}
 800a258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a25a:	e7fe      	b.n	800a25a <BusFault_Handler+0x4>

0800a25c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800a25c:	b480      	push	{r7}
 800a25e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a260:	e7fe      	b.n	800a260 <UsageFault_Handler+0x4>

0800a262 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800a262:	b480      	push	{r7}
 800a264:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a266:	bf00      	nop
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800a274:	f000 f9e8 	bl	800a648 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a278:	bf00      	nop
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <SDIO_IRQHandler>:

/**
* @brief This function handles SDIO global interrupt.
*/
void SDIO_IRQHandler(void)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800a280:	4802      	ldr	r0, [pc, #8]	; (800a28c <SDIO_IRQHandler+0x10>)
 800a282:	f7fc fa03 	bl	800668c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800a286:	bf00      	nop
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	2000039c 	.word	0x2000039c

0800a290 <USART1_IRQHandler>:

void  USART1_IRQHandler(void)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 800a294:	4802      	ldr	r0, [pc, #8]	; (800a2a0 <USART1_IRQHandler+0x10>)
 800a296:	f7fd fe55 	bl	8007f44 <HAL_UART_IRQHandler>
}
 800a29a:	bf00      	nop
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	200006bc 	.word	0x200006bc

0800a2a4 <UART4_IRQHandler>:
void  UART4_IRQHandler(void)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart4);
 800a2a8:	4802      	ldr	r0, [pc, #8]	; (800a2b4 <UART4_IRQHandler+0x10>)
 800a2aa:	f7fd fe4b 	bl	8007f44 <HAL_UART_IRQHandler>
}
 800a2ae:	bf00      	nop
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	2000067c 	.word	0x2000067c

0800a2b8 <USART6_IRQHandler>:
void  USART6_IRQHandler(void)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart6);
 800a2bc:	4802      	ldr	r0, [pc, #8]	; (800a2c8 <USART6_IRQHandler+0x10>)
 800a2be:	f7fd fe41 	bl	8007f44 <HAL_UART_IRQHandler>
}
 800a2c2:	bf00      	nop
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	200006fc 	.word	0x200006fc

0800a2cc <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a2d0:	4802      	ldr	r0, [pc, #8]	; (800a2dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 800a2d2:	f7fd fa6e 	bl	80077b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800a2d6:	bf00      	nop
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	200007e0 	.word	0x200007e0

0800a2e0 <DMA2_Stream3_IRQHandler>:

/**
* @brief This function handles DMA2 stream3 global interrupt.
*/
void DMA2_Stream3_IRQHandler(void)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800a2e4:	4802      	ldr	r0, [pc, #8]	; (800a2f0 <DMA2_Stream3_IRQHandler+0x10>)
 800a2e6:	f7f9 fd3b 	bl	8003d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800a2ea:	bf00      	nop
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20000420 	.word	0x20000420

0800a2f4 <DMA2_Stream6_IRQHandler>:

/**
* @brief This function handles DMA2 stream6 global interrupt.
*/
void DMA2_Stream6_IRQHandler(void)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800a2f8:	4802      	ldr	r0, [pc, #8]	; (800a304 <DMA2_Stream6_IRQHandler+0x10>)
 800a2fa:	f7f9 fd31 	bl	8003d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800a2fe:	bf00      	nop
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	20000480 	.word	0x20000480

0800a308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a308:	b480      	push	{r7}
 800a30a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a30c:	4b16      	ldr	r3, [pc, #88]	; (800a368 <SystemInit+0x60>)
 800a30e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a312:	4a15      	ldr	r2, [pc, #84]	; (800a368 <SystemInit+0x60>)
 800a314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a31c:	4b13      	ldr	r3, [pc, #76]	; (800a36c <SystemInit+0x64>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a12      	ldr	r2, [pc, #72]	; (800a36c <SystemInit+0x64>)
 800a322:	f043 0301 	orr.w	r3, r3, #1
 800a326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a328:	4b10      	ldr	r3, [pc, #64]	; (800a36c <SystemInit+0x64>)
 800a32a:	2200      	movs	r2, #0
 800a32c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a32e:	4b0f      	ldr	r3, [pc, #60]	; (800a36c <SystemInit+0x64>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a0e      	ldr	r2, [pc, #56]	; (800a36c <SystemInit+0x64>)
 800a334:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a33c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a33e:	4b0b      	ldr	r3, [pc, #44]	; (800a36c <SystemInit+0x64>)
 800a340:	4a0b      	ldr	r2, [pc, #44]	; (800a370 <SystemInit+0x68>)
 800a342:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a344:	4b09      	ldr	r3, [pc, #36]	; (800a36c <SystemInit+0x64>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a08      	ldr	r2, [pc, #32]	; (800a36c <SystemInit+0x64>)
 800a34a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a34e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a350:	4b06      	ldr	r3, [pc, #24]	; (800a36c <SystemInit+0x64>)
 800a352:	2200      	movs	r2, #0
 800a354:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a356:	4b04      	ldr	r3, [pc, #16]	; (800a368 <SystemInit+0x60>)
 800a358:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a35c:	609a      	str	r2, [r3, #8]
#endif
}
 800a35e:	bf00      	nop
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	e000ed00 	.word	0xe000ed00
 800a36c:	40023800 	.word	0x40023800
 800a370:	24003010 	.word	0x24003010

0800a374 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a374:	b480      	push	{r7}
 800a376:	b087      	sub	sp, #28
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	4613      	mov	r3, r2
 800a380:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a382:	2301      	movs	r3, #1
 800a384:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a386:	2300      	movs	r3, #0
 800a388:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800a38a:	4b1f      	ldr	r3, [pc, #124]	; (800a408 <FATFS_LinkDriverEx+0x94>)
 800a38c:	7a5b      	ldrb	r3, [r3, #9]
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	2b01      	cmp	r3, #1
 800a392:	d831      	bhi.n	800a3f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a394:	4b1c      	ldr	r3, [pc, #112]	; (800a408 <FATFS_LinkDriverEx+0x94>)
 800a396:	7a5b      	ldrb	r3, [r3, #9]
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	461a      	mov	r2, r3
 800a39c:	4b1a      	ldr	r3, [pc, #104]	; (800a408 <FATFS_LinkDriverEx+0x94>)
 800a39e:	2100      	movs	r1, #0
 800a3a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800a3a2:	4b19      	ldr	r3, [pc, #100]	; (800a408 <FATFS_LinkDriverEx+0x94>)
 800a3a4:	7a5b      	ldrb	r3, [r3, #9]
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	4a17      	ldr	r2, [pc, #92]	; (800a408 <FATFS_LinkDriverEx+0x94>)
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	4413      	add	r3, r2
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800a3b2:	4b15      	ldr	r3, [pc, #84]	; (800a408 <FATFS_LinkDriverEx+0x94>)
 800a3b4:	7a5b      	ldrb	r3, [r3, #9]
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	4b13      	ldr	r3, [pc, #76]	; (800a408 <FATFS_LinkDriverEx+0x94>)
 800a3bc:	4413      	add	r3, r2
 800a3be:	79fa      	ldrb	r2, [r7, #7]
 800a3c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a3c2:	4b11      	ldr	r3, [pc, #68]	; (800a408 <FATFS_LinkDriverEx+0x94>)
 800a3c4:	7a5b      	ldrb	r3, [r3, #9]
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	1c5a      	adds	r2, r3, #1
 800a3ca:	b2d1      	uxtb	r1, r2
 800a3cc:	4a0e      	ldr	r2, [pc, #56]	; (800a408 <FATFS_LinkDriverEx+0x94>)
 800a3ce:	7251      	strb	r1, [r2, #9]
 800a3d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a3d2:	7dbb      	ldrb	r3, [r7, #22]
 800a3d4:	3330      	adds	r3, #48	; 0x30
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	223a      	movs	r2, #58	; 0x3a
 800a3e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	3302      	adds	r3, #2
 800a3e8:	222f      	movs	r2, #47	; 0x2f
 800a3ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	3303      	adds	r3, #3
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800a3f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	371c      	adds	r7, #28
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	20000820 	.word	0x20000820

0800a40c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a416:	2200      	movs	r2, #0
 800a418:	6839      	ldr	r1, [r7, #0]
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f7ff ffaa 	bl	800a374 <FATFS_LinkDriverEx>
 800a420:	4603      	mov	r3, r0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a42a:	b480      	push	{r7}
 800a42c:	b085      	sub	sp, #20
 800a42e:	af00      	add	r7, sp, #0
 800a430:	4603      	mov	r3, r0
 800a432:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a434:	2300      	movs	r3, #0
 800a436:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a438:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a43c:	2b84      	cmp	r3, #132	; 0x84
 800a43e:	d005      	beq.n	800a44c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a440:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	4413      	add	r3, r2
 800a448:	3303      	adds	r3, #3
 800a44a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a44c:	68fb      	ldr	r3, [r7, #12]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3714      	adds	r7, #20
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a45a:	b480      	push	{r7}
 800a45c:	b083      	sub	sp, #12
 800a45e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a460:	f3ef 8305 	mrs	r3, IPSR
 800a464:	607b      	str	r3, [r7, #4]
  return(result);
 800a466:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a468:	2b00      	cmp	r3, #0
 800a46a:	bf14      	ite	ne
 800a46c:	2301      	movne	r3, #1
 800a46e:	2300      	moveq	r3, #0
 800a470:	b2db      	uxtb	r3, r3
}
 800a472:	4618      	mov	r0, r3
 800a474:	370c      	adds	r7, #12
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a482:	f001 f937 	bl	800b6f4 <vTaskStartScheduler>
  
  return osOK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a490:	f7ff ffe3 	bl	800a45a <inHandlerMode>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d003      	beq.n	800a4a2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a49a:	f001 fa33 	bl	800b904 <xTaskGetTickCountFromISR>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	e002      	b.n	800a4a8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a4a2:	f001 fa1f 	bl	800b8e4 <xTaskGetTickCount>
 800a4a6:	4603      	mov	r3, r0
  }
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4ae:	b087      	sub	sp, #28
 800a4b0:	af02      	add	r7, sp, #8
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685c      	ldr	r4, [r3, #4]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4c2:	b29e      	uxth	r6, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7ff ffad 	bl	800a42a <makeFreeRtosPriority>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	f107 030c 	add.w	r3, r7, #12
 800a4d6:	9301      	str	r3, [sp, #4]
 800a4d8:	9200      	str	r2, [sp, #0]
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	4632      	mov	r2, r6
 800a4de:	4629      	mov	r1, r5
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f000 ff9d 	bl	800b420 <xTaskCreate>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d001      	beq.n	800a4f0 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	e000      	b.n	800a4f2 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a4fa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b084      	sub	sp, #16
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d001      	beq.n	800a510 <osDelay+0x16>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	e000      	b.n	800a512 <osDelay+0x18>
 800a510:	2301      	movs	r3, #1
 800a512:	4618      	mov	r0, r3
 800a514:	f001 f8ba 	bl	800b68c <vTaskDelay>
  
  return osOK;
 800a518:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b082      	sub	sp, #8
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800a52a:	2001      	movs	r0, #1
 800a52c:	f000 fa37 	bl	800a99e <xQueueCreateMutex>
 800a530:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800a532:	4618      	mov	r0, r3
 800a534:	3708      	adds	r7, #8
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
	...

0800a53c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a546:	2300      	movs	r3, #0
 800a548:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d101      	bne.n	800a554 <osMutexWait+0x18>
    return osErrorParameter;
 800a550:	2380      	movs	r3, #128	; 0x80
 800a552:	e03c      	b.n	800a5ce <osMutexWait+0x92>
  }
  
  ticks = 0;
 800a554:	2300      	movs	r3, #0
 800a556:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55e:	d103      	bne.n	800a568 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a560:	f04f 33ff 	mov.w	r3, #4294967295
 800a564:	60fb      	str	r3, [r7, #12]
 800a566:	e009      	b.n	800a57c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d006      	beq.n	800a57c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d101      	bne.n	800a57c <osMutexWait+0x40>
      ticks = 1;
 800a578:	2301      	movs	r3, #1
 800a57a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a57c:	f7ff ff6d 	bl	800a45a <inHandlerMode>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d017      	beq.n	800a5b6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a586:	f107 0308 	add.w	r3, r7, #8
 800a58a:	461a      	mov	r2, r3
 800a58c:	2100      	movs	r1, #0
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fd58 	bl	800b044 <xQueueReceiveFromISR>
 800a594:	4603      	mov	r3, r0
 800a596:	2b01      	cmp	r3, #1
 800a598:	d001      	beq.n	800a59e <osMutexWait+0x62>
      return osErrorOS;
 800a59a:	23ff      	movs	r3, #255	; 0xff
 800a59c:	e017      	b.n	800a5ce <osMutexWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d013      	beq.n	800a5cc <osMutexWait+0x90>
 800a5a4:	4b0c      	ldr	r3, [pc, #48]	; (800a5d8 <osMutexWait+0x9c>)
 800a5a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5aa:	601a      	str	r2, [r3, #0]
 800a5ac:	f3bf 8f4f 	dsb	sy
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	e00a      	b.n	800a5cc <osMutexWait+0x90>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 fc2b 	bl	800ae18 <xQueueGenericReceive>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d001      	beq.n	800a5cc <osMutexWait+0x90>
    return osErrorOS;
 800a5c8:	23ff      	movs	r3, #255	; 0xff
 800a5ca:	e000      	b.n	800a5ce <osMutexWait+0x92>
  }
  
  return osOK;
 800a5cc:	2300      	movs	r3, #0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	e000ed04 	.word	0xe000ed04

0800a5dc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a5ec:	f7ff ff35 	bl	800a45a <inHandlerMode>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d016      	beq.n	800a624 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a5f6:	f107 0308 	add.w	r3, r7, #8
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 fb7d 	bl	800acfc <xQueueGiveFromISR>
 800a602:	4603      	mov	r3, r0
 800a604:	2b01      	cmp	r3, #1
 800a606:	d001      	beq.n	800a60c <osMutexRelease+0x30>
      return osErrorOS;
 800a608:	23ff      	movs	r3, #255	; 0xff
 800a60a:	e017      	b.n	800a63c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d013      	beq.n	800a63a <osMutexRelease+0x5e>
 800a612:	4b0c      	ldr	r3, [pc, #48]	; (800a644 <osMutexRelease+0x68>)
 800a614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a618:	601a      	str	r2, [r3, #0]
 800a61a:	f3bf 8f4f 	dsb	sy
 800a61e:	f3bf 8f6f 	isb	sy
 800a622:	e00a      	b.n	800a63a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a624:	2300      	movs	r3, #0
 800a626:	2200      	movs	r2, #0
 800a628:	2100      	movs	r1, #0
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f9d0 	bl	800a9d0 <xQueueGenericSend>
 800a630:	4603      	mov	r3, r0
 800a632:	2b01      	cmp	r3, #1
 800a634:	d001      	beq.n	800a63a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a636:	23ff      	movs	r3, #255	; 0xff
 800a638:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a63a:	68fb      	ldr	r3, [r7, #12]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	e000ed04 	.word	0xe000ed04

0800a648 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800a64c:	f001 fc92 	bl	800bf74 <xTaskGetSchedulerState>
 800a650:	4603      	mov	r3, r0
 800a652:	2b01      	cmp	r3, #1
 800a654:	d001      	beq.n	800a65a <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800a656:	f002 fa8f 	bl	800cb78 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800a65a:	bf00      	nop
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800a65e:	b480      	push	{r7}
 800a660:	b083      	sub	sp, #12
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 800a668:	2381      	movs	r3, #129	; 0x81
#endif
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr

0800a676 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a676:	b480      	push	{r7}
 800a678:	b083      	sub	sp, #12
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f103 0208 	add.w	r2, r3, #8
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f04f 32ff 	mov.w	r2, #4294967295
 800a68e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f103 0208 	add.w	r2, r3, #8
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f103 0208 	add.w	r2, r3, #8
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a6aa:	bf00      	nop
 800a6ac:	370c      	adds	r7, #12
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	b083      	sub	sp, #12
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	689a      	ldr	r2, [r3, #8]
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	683a      	ldr	r2, [r7, #0]
 800a6f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	683a      	ldr	r2, [r7, #0]
 800a6fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	1c5a      	adds	r2, r3, #1
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	601a      	str	r2, [r3, #0]
}
 800a70c:	bf00      	nop
 800a70e:	3714      	adds	r7, #20
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72e:	d103      	bne.n	800a738 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	60fb      	str	r3, [r7, #12]
 800a736:	e00c      	b.n	800a752 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	3308      	adds	r3, #8
 800a73c:	60fb      	str	r3, [r7, #12]
 800a73e:	e002      	b.n	800a746 <vListInsert+0x2e>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	60fb      	str	r3, [r7, #12]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d2f6      	bcs.n	800a740 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	685a      	ldr	r2, [r3, #4]
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	683a      	ldr	r2, [r7, #0]
 800a76c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	1c5a      	adds	r2, r3, #1
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	601a      	str	r2, [r3, #0]
}
 800a77e:	bf00      	nop
 800a780:	3714      	adds	r7, #20
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a78a:	b480      	push	{r7}
 800a78c:	b085      	sub	sp, #20
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	6892      	ldr	r2, [r2, #8]
 800a7a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	6852      	ldr	r2, [r2, #4]
 800a7aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d103      	bne.n	800a7be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	689a      	ldr	r2, [r3, #8]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	1e5a      	subs	r2, r3, #1
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
	...

0800a7e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d10a      	bne.n	800a80a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f8:	f383 8811 	msr	BASEPRI, r3
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800a806:	bf00      	nop
 800a808:	e7fe      	b.n	800a808 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a80a:	f002 f923 	bl	800ca54 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a816:	68f9      	ldr	r1, [r7, #12]
 800a818:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a81a:	fb01 f303 	mul.w	r3, r1, r3
 800a81e:	441a      	add	r2, r3
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2200      	movs	r2, #0
 800a828:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a83a:	3b01      	subs	r3, #1
 800a83c:	68f9      	ldr	r1, [r7, #12]
 800a83e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a840:	fb01 f303 	mul.w	r3, r1, r3
 800a844:	441a      	add	r2, r3
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	22ff      	movs	r2, #255	; 0xff
 800a84e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	22ff      	movs	r2, #255	; 0xff
 800a856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d114      	bne.n	800a88a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d01a      	beq.n	800a89e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	3310      	adds	r3, #16
 800a86c:	4618      	mov	r0, r3
 800a86e:	f001 f9c5 	bl	800bbfc <xTaskRemoveFromEventList>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d012      	beq.n	800a89e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a878:	4b0c      	ldr	r3, [pc, #48]	; (800a8ac <xQueueGenericReset+0xcc>)
 800a87a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a87e:	601a      	str	r2, [r3, #0]
 800a880:	f3bf 8f4f 	dsb	sy
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	e009      	b.n	800a89e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3310      	adds	r3, #16
 800a88e:	4618      	mov	r0, r3
 800a890:	f7ff fef1 	bl	800a676 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	3324      	adds	r3, #36	; 0x24
 800a898:	4618      	mov	r0, r3
 800a89a:	f7ff feec 	bl	800a676 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a89e:	f002 f909 	bl	800cab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a8a2:	2301      	movs	r3, #1
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	e000ed04 	.word	0xe000ed04

0800a8b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b08a      	sub	sp, #40	; 0x28
 800a8b4:	af02      	add	r7, sp, #8
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d10a      	bne.n	800a8da <xQueueGenericCreate+0x2a>
	__asm volatile
 800a8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c8:	f383 8811 	msr	BASEPRI, r3
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	613b      	str	r3, [r7, #16]
}
 800a8d6:	bf00      	nop
 800a8d8:	e7fe      	b.n	800a8d8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d102      	bne.n	800a8e6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	61fb      	str	r3, [r7, #28]
 800a8e4:	e004      	b.n	800a8f0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	fb02 f303 	mul.w	r3, r2, r3
 800a8ee:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	3350      	adds	r3, #80	; 0x50
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f002 f9c7 	bl	800cc88 <pvPortMalloc>
 800a8fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d00b      	beq.n	800a91a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	3350      	adds	r3, #80	; 0x50
 800a906:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a908:	79fa      	ldrb	r2, [r7, #7]
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	9300      	str	r3, [sp, #0]
 800a90e:	4613      	mov	r3, r2
 800a910:	697a      	ldr	r2, [r7, #20]
 800a912:	68b9      	ldr	r1, [r7, #8]
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f000 f805 	bl	800a924 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800a91a:	69bb      	ldr	r3, [r7, #24]
	}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3720      	adds	r7, #32
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
 800a930:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d103      	bne.n	800a940 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	69ba      	ldr	r2, [r7, #24]
 800a93c:	601a      	str	r2, [r3, #0]
 800a93e:	e002      	b.n	800a946 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a952:	2101      	movs	r1, #1
 800a954:	69b8      	ldr	r0, [r7, #24]
 800a956:	f7ff ff43 	bl	800a7e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	78fa      	ldrb	r2, [r7, #3]
 800a95e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a962:	bf00      	nop
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b082      	sub	sp, #8
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00e      	beq.n	800a996 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a98a:	2300      	movs	r3, #0
 800a98c:	2200      	movs	r2, #0
 800a98e:	2100      	movs	r1, #0
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 f81d 	bl	800a9d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a996:	bf00      	nop
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b086      	sub	sp, #24
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	617b      	str	r3, [r7, #20]
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a9b0:	79fb      	ldrb	r3, [r7, #7]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	6939      	ldr	r1, [r7, #16]
 800a9b6:	6978      	ldr	r0, [r7, #20]
 800a9b8:	f7ff ff7a 	bl	800a8b0 <xQueueGenericCreate>
 800a9bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f7ff ffd3 	bl	800a96a <prvInitialiseMutex>

		return pxNewQueue;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
	}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3718      	adds	r7, #24
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
	...

0800a9d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b08e      	sub	sp, #56	; 0x38
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
 800a9dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d10a      	bne.n	800aa02 <xQueueGenericSend+0x32>
	__asm volatile
 800a9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f0:	f383 8811 	msr	BASEPRI, r3
 800a9f4:	f3bf 8f6f 	isb	sy
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a9fe:	bf00      	nop
 800aa00:	e7fe      	b.n	800aa00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d103      	bne.n	800aa10 <xQueueGenericSend+0x40>
 800aa08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d101      	bne.n	800aa14 <xQueueGenericSend+0x44>
 800aa10:	2301      	movs	r3, #1
 800aa12:	e000      	b.n	800aa16 <xQueueGenericSend+0x46>
 800aa14:	2300      	movs	r3, #0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10a      	bne.n	800aa30 <xQueueGenericSend+0x60>
	__asm volatile
 800aa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1e:	f383 8811 	msr	BASEPRI, r3
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa2c:	bf00      	nop
 800aa2e:	e7fe      	b.n	800aa2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	d103      	bne.n	800aa3e <xQueueGenericSend+0x6e>
 800aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d101      	bne.n	800aa42 <xQueueGenericSend+0x72>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e000      	b.n	800aa44 <xQueueGenericSend+0x74>
 800aa42:	2300      	movs	r3, #0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10a      	bne.n	800aa5e <xQueueGenericSend+0x8e>
	__asm volatile
 800aa48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4c:	f383 8811 	msr	BASEPRI, r3
 800aa50:	f3bf 8f6f 	isb	sy
 800aa54:	f3bf 8f4f 	dsb	sy
 800aa58:	623b      	str	r3, [r7, #32]
}
 800aa5a:	bf00      	nop
 800aa5c:	e7fe      	b.n	800aa5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa5e:	f001 fa89 	bl	800bf74 <xTaskGetSchedulerState>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d102      	bne.n	800aa6e <xQueueGenericSend+0x9e>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d101      	bne.n	800aa72 <xQueueGenericSend+0xa2>
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e000      	b.n	800aa74 <xQueueGenericSend+0xa4>
 800aa72:	2300      	movs	r3, #0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10a      	bne.n	800aa8e <xQueueGenericSend+0xbe>
	__asm volatile
 800aa78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7c:	f383 8811 	msr	BASEPRI, r3
 800aa80:	f3bf 8f6f 	isb	sy
 800aa84:	f3bf 8f4f 	dsb	sy
 800aa88:	61fb      	str	r3, [r7, #28]
}
 800aa8a:	bf00      	nop
 800aa8c:	e7fe      	b.n	800aa8c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa8e:	f001 ffe1 	bl	800ca54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d302      	bcc.n	800aaa4 <xQueueGenericSend+0xd4>
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d129      	bne.n	800aaf8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	68b9      	ldr	r1, [r7, #8]
 800aaa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaaa:	f000 fb4b 	bl	800b144 <prvCopyDataToQueue>
 800aaae:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d010      	beq.n	800aada <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaba:	3324      	adds	r3, #36	; 0x24
 800aabc:	4618      	mov	r0, r3
 800aabe:	f001 f89d 	bl	800bbfc <xTaskRemoveFromEventList>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d013      	beq.n	800aaf0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aac8:	4b3f      	ldr	r3, [pc, #252]	; (800abc8 <xQueueGenericSend+0x1f8>)
 800aaca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aace:	601a      	str	r2, [r3, #0]
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	e00a      	b.n	800aaf0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d007      	beq.n	800aaf0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aae0:	4b39      	ldr	r3, [pc, #228]	; (800abc8 <xQueueGenericSend+0x1f8>)
 800aae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aae6:	601a      	str	r2, [r3, #0]
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aaf0:	f001 ffe0 	bl	800cab4 <vPortExitCritical>
				return pdPASS;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	e063      	b.n	800abc0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d103      	bne.n	800ab06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aafe:	f001 ffd9 	bl	800cab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ab02:	2300      	movs	r3, #0
 800ab04:	e05c      	b.n	800abc0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d106      	bne.n	800ab1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800ab0c:	f107 0314 	add.w	r3, r7, #20
 800ab10:	4618      	mov	r0, r3
 800ab12:	f001 f8d5 	bl	800bcc0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab16:	2301      	movs	r3, #1
 800ab18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab1a:	f001 ffcb 	bl	800cab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab1e:	f000 fe37 	bl	800b790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab22:	f001 ff97 	bl	800ca54 <vPortEnterCritical>
 800ab26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab2c:	b25b      	sxtb	r3, r3
 800ab2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab32:	d103      	bne.n	800ab3c <xQueueGenericSend+0x16c>
 800ab34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab36:	2200      	movs	r2, #0
 800ab38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab42:	b25b      	sxtb	r3, r3
 800ab44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab48:	d103      	bne.n	800ab52 <xQueueGenericSend+0x182>
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab52:	f001 ffaf 	bl	800cab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab56:	1d3a      	adds	r2, r7, #4
 800ab58:	f107 0314 	add.w	r3, r7, #20
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f001 f8d2 	bl	800bd08 <xTaskCheckForTimeOut>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d124      	bne.n	800abb4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ab6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab6c:	f000 fbe2 	bl	800b334 <prvIsQueueFull>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d018      	beq.n	800aba8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ab76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab78:	3310      	adds	r3, #16
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 ffec 	bl	800bb5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ab84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab86:	f000 fb6d 	bl	800b264 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ab8a:	f000 fe0f 	bl	800b7ac <xTaskResumeAll>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f47f af7c 	bne.w	800aa8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ab96:	4b0c      	ldr	r3, [pc, #48]	; (800abc8 <xQueueGenericSend+0x1f8>)
 800ab98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab9c:	601a      	str	r2, [r3, #0]
 800ab9e:	f3bf 8f4f 	dsb	sy
 800aba2:	f3bf 8f6f 	isb	sy
 800aba6:	e772      	b.n	800aa8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abaa:	f000 fb5b 	bl	800b264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abae:	f000 fdfd 	bl	800b7ac <xTaskResumeAll>
 800abb2:	e76c      	b.n	800aa8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800abb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abb6:	f000 fb55 	bl	800b264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abba:	f000 fdf7 	bl	800b7ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800abbe:	2300      	movs	r3, #0
		}
	}
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3738      	adds	r7, #56	; 0x38
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	e000ed04 	.word	0xe000ed04

0800abcc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b08e      	sub	sp, #56	; 0x38
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
 800abd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800abde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10a      	bne.n	800abfa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800abe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe8:	f383 8811 	msr	BASEPRI, r3
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800abf6:	bf00      	nop
 800abf8:	e7fe      	b.n	800abf8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d103      	bne.n	800ac08 <xQueueGenericSendFromISR+0x3c>
 800ac00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d101      	bne.n	800ac0c <xQueueGenericSendFromISR+0x40>
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e000      	b.n	800ac0e <xQueueGenericSendFromISR+0x42>
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d10a      	bne.n	800ac28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ac12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac16:	f383 8811 	msr	BASEPRI, r3
 800ac1a:	f3bf 8f6f 	isb	sy
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	623b      	str	r3, [r7, #32]
}
 800ac24:	bf00      	nop
 800ac26:	e7fe      	b.n	800ac26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	d103      	bne.n	800ac36 <xQueueGenericSendFromISR+0x6a>
 800ac2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d101      	bne.n	800ac3a <xQueueGenericSendFromISR+0x6e>
 800ac36:	2301      	movs	r3, #1
 800ac38:	e000      	b.n	800ac3c <xQueueGenericSendFromISR+0x70>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10a      	bne.n	800ac56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ac40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac44:	f383 8811 	msr	BASEPRI, r3
 800ac48:	f3bf 8f6f 	isb	sy
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	61fb      	str	r3, [r7, #28]
}
 800ac52:	bf00      	nop
 800ac54:	e7fe      	b.n	800ac54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac56:	f001 ffd7 	bl	800cc08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ac5a:	f3ef 8211 	mrs	r2, BASEPRI
 800ac5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	61ba      	str	r2, [r7, #24]
 800ac70:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ac72:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d302      	bcc.n	800ac88 <xQueueGenericSendFromISR+0xbc>
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d12c      	bne.n	800ace2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ac88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	68b9      	ldr	r1, [r7, #8]
 800ac96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac98:	f000 fa54 	bl	800b144 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac9c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800aca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca4:	d112      	bne.n	800accc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d016      	beq.n	800acdc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb0:	3324      	adds	r3, #36	; 0x24
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 ffa2 	bl	800bbfc <xTaskRemoveFromEventList>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00e      	beq.n	800acdc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00b      	beq.n	800acdc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2201      	movs	r2, #1
 800acc8:	601a      	str	r2, [r3, #0]
 800acca:	e007      	b.n	800acdc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800accc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800acd0:	3301      	adds	r3, #1
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	b25a      	sxtb	r2, r3
 800acd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800acdc:	2301      	movs	r3, #1
 800acde:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ace0:	e001      	b.n	800ace6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ace2:	2300      	movs	r3, #0
 800ace4:	637b      	str	r3, [r7, #52]	; 0x34
 800ace6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
	);
}
 800acf0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800acf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3738      	adds	r7, #56	; 0x38
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b08e      	sub	sp, #56	; 0x38
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d10a      	bne.n	800ad26 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ad10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	623b      	str	r3, [r7, #32]
}
 800ad22:	bf00      	nop
 800ad24:	e7fe      	b.n	800ad24 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ad26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00a      	beq.n	800ad44 <xQueueGiveFromISR+0x48>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	61fb      	str	r3, [r7, #28]
}
 800ad40:	bf00      	nop
 800ad42:	e7fe      	b.n	800ad42 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800ad44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d103      	bne.n	800ad54 <xQueueGiveFromISR+0x58>
 800ad4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d101      	bne.n	800ad58 <xQueueGiveFromISR+0x5c>
 800ad54:	2301      	movs	r3, #1
 800ad56:	e000      	b.n	800ad5a <xQueueGiveFromISR+0x5e>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d10a      	bne.n	800ad74 <xQueueGiveFromISR+0x78>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	61bb      	str	r3, [r7, #24]
}
 800ad70:	bf00      	nop
 800ad72:	e7fe      	b.n	800ad72 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad74:	f001 ff48 	bl	800cc08 <vPortValidateInterruptPriority>
	__asm volatile
 800ad78:	f3ef 8211 	mrs	r2, BASEPRI
 800ad7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad80:	f383 8811 	msr	BASEPRI, r3
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	f3bf 8f4f 	dsb	sy
 800ad8c:	617a      	str	r2, [r7, #20]
 800ad8e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ad90:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad92:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad98:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d22b      	bcs.n	800adfc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ada4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800adae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb0:	1c5a      	adds	r2, r3, #1
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800adb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800adba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adbe:	d112      	bne.n	800ade6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800adc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d016      	beq.n	800adf6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adca:	3324      	adds	r3, #36	; 0x24
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 ff15 	bl	800bbfc <xTaskRemoveFromEventList>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00e      	beq.n	800adf6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00b      	beq.n	800adf6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	2201      	movs	r2, #1
 800ade2:	601a      	str	r2, [r3, #0]
 800ade4:	e007      	b.n	800adf6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ade6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adea:	3301      	adds	r3, #1
 800adec:	b2db      	uxtb	r3, r3
 800adee:	b25a      	sxtb	r2, r3
 800adf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800adf6:	2301      	movs	r3, #1
 800adf8:	637b      	str	r3, [r7, #52]	; 0x34
 800adfa:	e001      	b.n	800ae00 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800adfc:	2300      	movs	r3, #0
 800adfe:	637b      	str	r3, [r7, #52]	; 0x34
 800ae00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae02:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f383 8811 	msr	BASEPRI, r3
}
 800ae0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3738      	adds	r7, #56	; 0x38
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
	...

0800ae18 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b08e      	sub	sp, #56	; 0x38
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	607a      	str	r2, [r7, #4]
 800ae24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ae26:	2300      	movs	r3, #0
 800ae28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d10a      	bne.n	800ae4a <xQueueGenericReceive+0x32>
	__asm volatile
 800ae34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae46:	bf00      	nop
 800ae48:	e7fe      	b.n	800ae48 <xQueueGenericReceive+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d103      	bne.n	800ae58 <xQueueGenericReceive+0x40>
 800ae50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d101      	bne.n	800ae5c <xQueueGenericReceive+0x44>
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e000      	b.n	800ae5e <xQueueGenericReceive+0x46>
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10a      	bne.n	800ae78 <xQueueGenericReceive+0x60>
	__asm volatile
 800ae62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae66:	f383 8811 	msr	BASEPRI, r3
 800ae6a:	f3bf 8f6f 	isb	sy
 800ae6e:	f3bf 8f4f 	dsb	sy
 800ae72:	623b      	str	r3, [r7, #32]
}
 800ae74:	bf00      	nop
 800ae76:	e7fe      	b.n	800ae76 <xQueueGenericReceive+0x5e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae78:	f001 f87c 	bl	800bf74 <xTaskGetSchedulerState>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d102      	bne.n	800ae88 <xQueueGenericReceive+0x70>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d101      	bne.n	800ae8c <xQueueGenericReceive+0x74>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	e000      	b.n	800ae8e <xQueueGenericReceive+0x76>
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10a      	bne.n	800aea8 <xQueueGenericReceive+0x90>
	__asm volatile
 800ae92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae96:	f383 8811 	msr	BASEPRI, r3
 800ae9a:	f3bf 8f6f 	isb	sy
 800ae9e:	f3bf 8f4f 	dsb	sy
 800aea2:	61fb      	str	r3, [r7, #28]
}
 800aea4:	bf00      	nop
 800aea6:	e7fe      	b.n	800aea6 <xQueueGenericReceive+0x8e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800aea8:	f001 fdd4 	bl	800ca54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aeb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d046      	beq.n	800af46 <xQueueGenericReceive+0x12e>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aebe:	68b9      	ldr	r1, [r7, #8]
 800aec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aec2:	f000 f9a9 	bl	800b218 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d121      	bne.n	800af10 <xQueueGenericReceive+0xf8>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800aecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aece:	1e5a      	subs	r2, r3, #1
 800aed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed2:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d104      	bne.n	800aee6 <xQueueGenericReceive+0xce>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800aedc:	f001 f964 	bl	800c1a8 <pvTaskIncrementMutexHeldCount>
 800aee0:	4602      	mov	r2, r0
 800aee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee4:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d027      	beq.n	800af3e <xQueueGenericReceive+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef0:	3310      	adds	r3, #16
 800aef2:	4618      	mov	r0, r3
 800aef4:	f000 fe82 	bl	800bbfc <xTaskRemoveFromEventList>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d01f      	beq.n	800af3e <xQueueGenericReceive+0x126>
						{
							queueYIELD_IF_USING_PREEMPTION();
 800aefe:	4b50      	ldr	r3, [pc, #320]	; (800b040 <xQueueGenericReceive+0x228>)
 800af00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af04:	601a      	str	r2, [r3, #0]
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	e016      	b.n	800af3e <xQueueGenericReceive+0x126>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800af10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af14:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00f      	beq.n	800af3e <xQueueGenericReceive+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af20:	3324      	adds	r3, #36	; 0x24
 800af22:	4618      	mov	r0, r3
 800af24:	f000 fe6a 	bl	800bbfc <xTaskRemoveFromEventList>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d007      	beq.n	800af3e <xQueueGenericReceive+0x126>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800af2e:	4b44      	ldr	r3, [pc, #272]	; (800b040 <xQueueGenericReceive+0x228>)
 800af30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af34:	601a      	str	r2, [r3, #0]
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800af3e:	f001 fdb9 	bl	800cab4 <vPortExitCritical>
				return pdPASS;
 800af42:	2301      	movs	r3, #1
 800af44:	e077      	b.n	800b036 <xQueueGenericReceive+0x21e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d103      	bne.n	800af54 <xQueueGenericReceive+0x13c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af4c:	f001 fdb2 	bl	800cab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800af50:	2300      	movs	r3, #0
 800af52:	e070      	b.n	800b036 <xQueueGenericReceive+0x21e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af56:	2b00      	cmp	r3, #0
 800af58:	d106      	bne.n	800af68 <xQueueGenericReceive+0x150>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800af5a:	f107 0314 	add.w	r3, r7, #20
 800af5e:	4618      	mov	r0, r3
 800af60:	f000 feae 	bl	800bcc0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af64:	2301      	movs	r3, #1
 800af66:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af68:	f001 fda4 	bl	800cab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af6c:	f000 fc10 	bl	800b790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af70:	f001 fd70 	bl	800ca54 <vPortEnterCritical>
 800af74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af7a:	b25b      	sxtb	r3, r3
 800af7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af80:	d103      	bne.n	800af8a <xQueueGenericReceive+0x172>
 800af82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af84:	2200      	movs	r2, #0
 800af86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af90:	b25b      	sxtb	r3, r3
 800af92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af96:	d103      	bne.n	800afa0 <xQueueGenericReceive+0x188>
 800af98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9a:	2200      	movs	r2, #0
 800af9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afa0:	f001 fd88 	bl	800cab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afa4:	1d3a      	adds	r2, r7, #4
 800afa6:	f107 0314 	add.w	r3, r7, #20
 800afaa:	4611      	mov	r1, r2
 800afac:	4618      	mov	r0, r3
 800afae:	f000 feab 	bl	800bd08 <xTaskCheckForTimeOut>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d131      	bne.n	800b01c <xQueueGenericReceive+0x204>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afba:	f000 f9a5 	bl	800b308 <prvIsQueueEmpty>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d025      	beq.n	800b010 <xQueueGenericReceive+0x1f8>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800afc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d108      	bne.n	800afde <xQueueGenericReceive+0x1c6>
					{
						taskENTER_CRITICAL();
 800afcc:	f001 fd42 	bl	800ca54 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800afd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 ffeb 	bl	800bfb0 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800afda:	f001 fd6b 	bl	800cab4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800afde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe0:	3324      	adds	r3, #36	; 0x24
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	4611      	mov	r1, r2
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 fdb8 	bl	800bb5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800afec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afee:	f000 f939 	bl	800b264 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aff2:	f000 fbdb 	bl	800b7ac <xTaskResumeAll>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f47f af55 	bne.w	800aea8 <xQueueGenericReceive+0x90>
				{
					portYIELD_WITHIN_API();
 800affe:	4b10      	ldr	r3, [pc, #64]	; (800b040 <xQueueGenericReceive+0x228>)
 800b000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b004:	601a      	str	r2, [r3, #0]
 800b006:	f3bf 8f4f 	dsb	sy
 800b00a:	f3bf 8f6f 	isb	sy
 800b00e:	e74b      	b.n	800aea8 <xQueueGenericReceive+0x90>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b012:	f000 f927 	bl	800b264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b016:	f000 fbc9 	bl	800b7ac <xTaskResumeAll>
 800b01a:	e745      	b.n	800aea8 <xQueueGenericReceive+0x90>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800b01c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b01e:	f000 f921 	bl	800b264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b022:	f000 fbc3 	bl	800b7ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b026:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b028:	f000 f96e 	bl	800b308 <prvIsQueueEmpty>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	f43f af3a 	beq.w	800aea8 <xQueueGenericReceive+0x90>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b034:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b036:	4618      	mov	r0, r3
 800b038:	3738      	adds	r7, #56	; 0x38
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	e000ed04 	.word	0xe000ed04

0800b044 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b08e      	sub	sp, #56	; 0x38
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b056:	2b00      	cmp	r3, #0
 800b058:	d10a      	bne.n	800b070 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05e:	f383 8811 	msr	BASEPRI, r3
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	623b      	str	r3, [r7, #32]
}
 800b06c:	bf00      	nop
 800b06e:	e7fe      	b.n	800b06e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d103      	bne.n	800b07e <xQueueReceiveFromISR+0x3a>
 800b076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d101      	bne.n	800b082 <xQueueReceiveFromISR+0x3e>
 800b07e:	2301      	movs	r3, #1
 800b080:	e000      	b.n	800b084 <xQueueReceiveFromISR+0x40>
 800b082:	2300      	movs	r3, #0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d10a      	bne.n	800b09e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08c:	f383 8811 	msr	BASEPRI, r3
 800b090:	f3bf 8f6f 	isb	sy
 800b094:	f3bf 8f4f 	dsb	sy
 800b098:	61fb      	str	r3, [r7, #28]
}
 800b09a:	bf00      	nop
 800b09c:	e7fe      	b.n	800b09c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b09e:	f001 fdb3 	bl	800cc08 <vPortValidateInterruptPriority>
	__asm volatile
 800b0a2:	f3ef 8211 	mrs	r2, BASEPRI
 800b0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0aa:	f383 8811 	msr	BASEPRI, r3
 800b0ae:	f3bf 8f6f 	isb	sy
 800b0b2:	f3bf 8f4f 	dsb	sy
 800b0b6:	61ba      	str	r2, [r7, #24]
 800b0b8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b0ba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d02f      	beq.n	800b12a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0d4:	68b9      	ldr	r1, [r7, #8]
 800b0d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0d8:	f000 f89e 	bl	800b218 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800b0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0de:	1e5a      	subs	r2, r3, #1
 800b0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b0e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ec:	d112      	bne.n	800b114 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f0:	691b      	ldr	r3, [r3, #16]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d016      	beq.n	800b124 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f8:	3310      	adds	r3, #16
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 fd7e 	bl	800bbfc <xTaskRemoveFromEventList>
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00e      	beq.n	800b124 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00b      	beq.n	800b124 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	601a      	str	r2, [r3, #0]
 800b112:	e007      	b.n	800b124 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b118:	3301      	adds	r3, #1
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	b25a      	sxtb	r2, r3
 800b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b124:	2301      	movs	r3, #1
 800b126:	637b      	str	r3, [r7, #52]	; 0x34
 800b128:	e001      	b.n	800b12e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b12a:	2300      	movs	r3, #0
 800b12c:	637b      	str	r3, [r7, #52]	; 0x34
 800b12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b130:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	f383 8811 	msr	BASEPRI, r3
}
 800b138:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3738      	adds	r7, #56	; 0x38
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b086      	sub	sp, #24
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b150:	2300      	movs	r3, #0
 800b152:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b158:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10d      	bne.n	800b17e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d14d      	bne.n	800b206 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	4618      	mov	r0, r3
 800b170:	f000 ff94 	bl	800c09c <xTaskPriorityDisinherit>
 800b174:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2200      	movs	r2, #0
 800b17a:	605a      	str	r2, [r3, #4]
 800b17c:	e043      	b.n	800b206 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d119      	bne.n	800b1b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6898      	ldr	r0, [r3, #8]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18c:	461a      	mov	r2, r3
 800b18e:	68b9      	ldr	r1, [r7, #8]
 800b190:	f001 ffb8 	bl	800d104 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	689a      	ldr	r2, [r3, #8]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19c:	441a      	add	r2, r3
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	689a      	ldr	r2, [r3, #8]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d32b      	bcc.n	800b206 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	609a      	str	r2, [r3, #8]
 800b1b6:	e026      	b.n	800b206 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	68d8      	ldr	r0, [r3, #12]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	68b9      	ldr	r1, [r7, #8]
 800b1c4:	f001 ff9e 	bl	800d104 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	68da      	ldr	r2, [r3, #12]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d0:	425b      	negs	r3, r3
 800b1d2:	441a      	add	r2, r3
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	68da      	ldr	r2, [r3, #12]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d207      	bcs.n	800b1f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	685a      	ldr	r2, [r3, #4]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ec:	425b      	negs	r3, r3
 800b1ee:	441a      	add	r2, r3
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	d105      	bne.n	800b206 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d002      	beq.n	800b206 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	3b01      	subs	r3, #1
 800b204:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	1c5a      	adds	r2, r3, #1
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b20e:	697b      	ldr	r3, [r7, #20]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3718      	adds	r7, #24
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b226:	2b00      	cmp	r3, #0
 800b228:	d018      	beq.n	800b25c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	68da      	ldr	r2, [r3, #12]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b232:	441a      	add	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	68da      	ldr	r2, [r3, #12]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	429a      	cmp	r2, r3
 800b242:	d303      	bcc.n	800b24c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	68d9      	ldr	r1, [r3, #12]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b254:	461a      	mov	r2, r3
 800b256:	6838      	ldr	r0, [r7, #0]
 800b258:	f001 ff54 	bl	800d104 <memcpy>
	}
}
 800b25c:	bf00      	nop
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b26c:	f001 fbf2 	bl	800ca54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b276:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b278:	e011      	b.n	800b29e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d012      	beq.n	800b2a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	3324      	adds	r3, #36	; 0x24
 800b286:	4618      	mov	r0, r3
 800b288:	f000 fcb8 	bl	800bbfc <xTaskRemoveFromEventList>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d001      	beq.n	800b296 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b292:	f000 fd99 	bl	800bdc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b296:	7bfb      	ldrb	r3, [r7, #15]
 800b298:	3b01      	subs	r3, #1
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b29e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	dce9      	bgt.n	800b27a <prvUnlockQueue+0x16>
 800b2a6:	e000      	b.n	800b2aa <prvUnlockQueue+0x46>
					break;
 800b2a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	22ff      	movs	r2, #255	; 0xff
 800b2ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b2b2:	f001 fbff 	bl	800cab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b2b6:	f001 fbcd 	bl	800ca54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2c2:	e011      	b.n	800b2e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	691b      	ldr	r3, [r3, #16]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d012      	beq.n	800b2f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	3310      	adds	r3, #16
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f000 fc93 	bl	800bbfc <xTaskRemoveFromEventList>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d001      	beq.n	800b2e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b2dc:	f000 fd74 	bl	800bdc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b2e0:	7bbb      	ldrb	r3, [r7, #14]
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	dce9      	bgt.n	800b2c4 <prvUnlockQueue+0x60>
 800b2f0:	e000      	b.n	800b2f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b2f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	22ff      	movs	r2, #255	; 0xff
 800b2f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b2fc:	f001 fbda 	bl	800cab4 <vPortExitCritical>
}
 800b300:	bf00      	nop
 800b302:	3710      	adds	r7, #16
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b310:	f001 fba0 	bl	800ca54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d102      	bne.n	800b322 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b31c:	2301      	movs	r3, #1
 800b31e:	60fb      	str	r3, [r7, #12]
 800b320:	e001      	b.n	800b326 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b322:	2300      	movs	r3, #0
 800b324:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b326:	f001 fbc5 	bl	800cab4 <vPortExitCritical>

	return xReturn;
 800b32a:	68fb      	ldr	r3, [r7, #12]
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b33c:	f001 fb8a 	bl	800ca54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b348:	429a      	cmp	r2, r3
 800b34a:	d102      	bne.n	800b352 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b34c:	2301      	movs	r3, #1
 800b34e:	60fb      	str	r3, [r7, #12]
 800b350:	e001      	b.n	800b356 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b352:	2300      	movs	r3, #0
 800b354:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b356:	f001 fbad 	bl	800cab4 <vPortExitCritical>

	return xReturn;
 800b35a:	68fb      	ldr	r3, [r7, #12]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3710      	adds	r7, #16
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b36e:	2300      	movs	r3, #0
 800b370:	60fb      	str	r3, [r7, #12]
 800b372:	e014      	b.n	800b39e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b374:	4a0f      	ldr	r2, [pc, #60]	; (800b3b4 <vQueueAddToRegistry+0x50>)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d10b      	bne.n	800b398 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b380:	490c      	ldr	r1, [pc, #48]	; (800b3b4 <vQueueAddToRegistry+0x50>)
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	683a      	ldr	r2, [r7, #0]
 800b386:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b38a:	4a0a      	ldr	r2, [pc, #40]	; (800b3b4 <vQueueAddToRegistry+0x50>)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	00db      	lsls	r3, r3, #3
 800b390:	4413      	add	r3, r2
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b396:	e006      	b.n	800b3a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	3301      	adds	r3, #1
 800b39c:	60fb      	str	r3, [r7, #12]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2b07      	cmp	r3, #7
 800b3a2:	d9e7      	bls.n	800b374 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b3a4:	bf00      	nop
 800b3a6:	bf00      	nop
 800b3a8:	3714      	adds	r7, #20
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	2000082c 	.word	0x2000082c

0800b3b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b3c8:	f001 fb44 	bl	800ca54 <vPortEnterCritical>
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3d2:	b25b      	sxtb	r3, r3
 800b3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d8:	d103      	bne.n	800b3e2 <vQueueWaitForMessageRestricted+0x2a>
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3e8:	b25b      	sxtb	r3, r3
 800b3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ee:	d103      	bne.n	800b3f8 <vQueueWaitForMessageRestricted+0x40>
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3f8:	f001 fb5c 	bl	800cab4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b400:	2b00      	cmp	r3, #0
 800b402:	d106      	bne.n	800b412 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	3324      	adds	r3, #36	; 0x24
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	68b9      	ldr	r1, [r7, #8]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f000 fbc9 	bl	800bba4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b412:	6978      	ldr	r0, [r7, #20]
 800b414:	f7ff ff26 	bl	800b264 <prvUnlockQueue>
	}
 800b418:	bf00      	nop
 800b41a:	3718      	adds	r7, #24
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b420:	b580      	push	{r7, lr}
 800b422:	b08c      	sub	sp, #48	; 0x30
 800b424:	af04      	add	r7, sp, #16
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	603b      	str	r3, [r7, #0]
 800b42c:	4613      	mov	r3, r2
 800b42e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b430:	88fb      	ldrh	r3, [r7, #6]
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	4618      	mov	r0, r3
 800b436:	f001 fc27 	bl	800cc88 <pvPortMalloc>
 800b43a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00e      	beq.n	800b460 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b442:	205c      	movs	r0, #92	; 0x5c
 800b444:	f001 fc20 	bl	800cc88 <pvPortMalloc>
 800b448:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d003      	beq.n	800b458 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	697a      	ldr	r2, [r7, #20]
 800b454:	631a      	str	r2, [r3, #48]	; 0x30
 800b456:	e005      	b.n	800b464 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b458:	6978      	ldr	r0, [r7, #20]
 800b45a:	f001 fcd9 	bl	800ce10 <vPortFree>
 800b45e:	e001      	b.n	800b464 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b460:	2300      	movs	r3, #0
 800b462:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d013      	beq.n	800b492 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b46a:	88fa      	ldrh	r2, [r7, #6]
 800b46c:	2300      	movs	r3, #0
 800b46e:	9303      	str	r3, [sp, #12]
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	9302      	str	r3, [sp, #8]
 800b474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b476:	9301      	str	r3, [sp, #4]
 800b478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47a:	9300      	str	r3, [sp, #0]
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	68b9      	ldr	r1, [r7, #8]
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f000 f80e 	bl	800b4a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b486:	69f8      	ldr	r0, [r7, #28]
 800b488:	f000 f892 	bl	800b5b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b48c:	2301      	movs	r3, #1
 800b48e:	61bb      	str	r3, [r7, #24]
 800b490:	e002      	b.n	800b498 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b492:	f04f 33ff 	mov.w	r3, #4294967295
 800b496:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b498:	69bb      	ldr	r3, [r7, #24]
	}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3720      	adds	r7, #32
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b088      	sub	sp, #32
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	60f8      	str	r0, [r7, #12]
 800b4aa:	60b9      	str	r1, [r7, #8]
 800b4ac:	607a      	str	r2, [r7, #4]
 800b4ae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	21a5      	movs	r1, #165	; 0xa5
 800b4bc:	f001 fe30 	bl	800d120 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	4413      	add	r3, r2
 800b4d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	f023 0307 	bic.w	r3, r3, #7
 800b4d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	f003 0307 	and.w	r3, r3, #7
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d00a      	beq.n	800b4fa <prvInitialiseNewTask+0x58>
	__asm volatile
 800b4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e8:	f383 8811 	msr	BASEPRI, r3
 800b4ec:	f3bf 8f6f 	isb	sy
 800b4f0:	f3bf 8f4f 	dsb	sy
 800b4f4:	617b      	str	r3, [r7, #20]
}
 800b4f6:	bf00      	nop
 800b4f8:	e7fe      	b.n	800b4f8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	61fb      	str	r3, [r7, #28]
 800b4fe:	e012      	b.n	800b526 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b500:	68ba      	ldr	r2, [r7, #8]
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	4413      	add	r3, r2
 800b506:	7819      	ldrb	r1, [r3, #0]
 800b508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b50a:	69fb      	ldr	r3, [r7, #28]
 800b50c:	4413      	add	r3, r2
 800b50e:	3334      	adds	r3, #52	; 0x34
 800b510:	460a      	mov	r2, r1
 800b512:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b514:	68ba      	ldr	r2, [r7, #8]
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	4413      	add	r3, r2
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d006      	beq.n	800b52e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	3301      	adds	r3, #1
 800b524:	61fb      	str	r3, [r7, #28]
 800b526:	69fb      	ldr	r3, [r7, #28]
 800b528:	2b0f      	cmp	r3, #15
 800b52a:	d9e9      	bls.n	800b500 <prvInitialiseNewTask+0x5e>
 800b52c:	e000      	b.n	800b530 <prvInitialiseNewTask+0x8e>
		{
			break;
 800b52e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b532:	2200      	movs	r2, #0
 800b534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53a:	2b06      	cmp	r3, #6
 800b53c:	d901      	bls.n	800b542 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b53e:	2306      	movs	r3, #6
 800b540:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b546:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b54c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b550:	2200      	movs	r2, #0
 800b552:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b556:	3304      	adds	r3, #4
 800b558:	4618      	mov	r0, r3
 800b55a:	f7ff f8ac 	bl	800a6b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b560:	3318      	adds	r3, #24
 800b562:	4618      	mov	r0, r3
 800b564:	f7ff f8a7 	bl	800a6b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b56c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b570:	f1c3 0207 	rsb	r2, r3, #7
 800b574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b576:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b57c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b580:	2200      	movs	r2, #0
 800b582:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b586:	2200      	movs	r2, #0
 800b588:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b58c:	683a      	ldr	r2, [r7, #0]
 800b58e:	68f9      	ldr	r1, [r7, #12]
 800b590:	69b8      	ldr	r0, [r7, #24]
 800b592:	f001 f955 	bl	800c840 <pxPortInitialiseStack>
 800b596:	4602      	mov	r2, r0
 800b598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d002      	beq.n	800b5a8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5a8:	bf00      	nop
 800b5aa:	3720      	adds	r7, #32
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b5b8:	f001 fa4c 	bl	800ca54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b5bc:	4b2c      	ldr	r3, [pc, #176]	; (800b670 <prvAddNewTaskToReadyList+0xc0>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	4a2b      	ldr	r2, [pc, #172]	; (800b670 <prvAddNewTaskToReadyList+0xc0>)
 800b5c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b5c6:	4b2b      	ldr	r3, [pc, #172]	; (800b674 <prvAddNewTaskToReadyList+0xc4>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d109      	bne.n	800b5e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b5ce:	4a29      	ldr	r2, [pc, #164]	; (800b674 <prvAddNewTaskToReadyList+0xc4>)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b5d4:	4b26      	ldr	r3, [pc, #152]	; (800b670 <prvAddNewTaskToReadyList+0xc0>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d110      	bne.n	800b5fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b5dc:	f000 fc18 	bl	800be10 <prvInitialiseTaskLists>
 800b5e0:	e00d      	b.n	800b5fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b5e2:	4b25      	ldr	r3, [pc, #148]	; (800b678 <prvAddNewTaskToReadyList+0xc8>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d109      	bne.n	800b5fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b5ea:	4b22      	ldr	r3, [pc, #136]	; (800b674 <prvAddNewTaskToReadyList+0xc4>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d802      	bhi.n	800b5fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b5f8:	4a1e      	ldr	r2, [pc, #120]	; (800b674 <prvAddNewTaskToReadyList+0xc4>)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b5fe:	4b1f      	ldr	r3, [pc, #124]	; (800b67c <prvAddNewTaskToReadyList+0xcc>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3301      	adds	r3, #1
 800b604:	4a1d      	ldr	r2, [pc, #116]	; (800b67c <prvAddNewTaskToReadyList+0xcc>)
 800b606:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b608:	4b1c      	ldr	r3, [pc, #112]	; (800b67c <prvAddNewTaskToReadyList+0xcc>)
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b614:	2201      	movs	r2, #1
 800b616:	409a      	lsls	r2, r3
 800b618:	4b19      	ldr	r3, [pc, #100]	; (800b680 <prvAddNewTaskToReadyList+0xd0>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4313      	orrs	r3, r2
 800b61e:	4a18      	ldr	r2, [pc, #96]	; (800b680 <prvAddNewTaskToReadyList+0xd0>)
 800b620:	6013      	str	r3, [r2, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b626:	4613      	mov	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4413      	add	r3, r2
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	4a15      	ldr	r2, [pc, #84]	; (800b684 <prvAddNewTaskToReadyList+0xd4>)
 800b630:	441a      	add	r2, r3
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	3304      	adds	r3, #4
 800b636:	4619      	mov	r1, r3
 800b638:	4610      	mov	r0, r2
 800b63a:	f7ff f849 	bl	800a6d0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b63e:	f001 fa39 	bl	800cab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b642:	4b0d      	ldr	r3, [pc, #52]	; (800b678 <prvAddNewTaskToReadyList+0xc8>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00e      	beq.n	800b668 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b64a:	4b0a      	ldr	r3, [pc, #40]	; (800b674 <prvAddNewTaskToReadyList+0xc4>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b654:	429a      	cmp	r2, r3
 800b656:	d207      	bcs.n	800b668 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b658:	4b0b      	ldr	r3, [pc, #44]	; (800b688 <prvAddNewTaskToReadyList+0xd8>)
 800b65a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b65e:	601a      	str	r2, [r3, #0]
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b668:	bf00      	nop
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	2000096c 	.word	0x2000096c
 800b674:	2000086c 	.word	0x2000086c
 800b678:	20000978 	.word	0x20000978
 800b67c:	20000988 	.word	0x20000988
 800b680:	20000974 	.word	0x20000974
 800b684:	20000870 	.word	0x20000870
 800b688:	e000ed04 	.word	0xe000ed04

0800b68c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b694:	2300      	movs	r3, #0
 800b696:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d017      	beq.n	800b6ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b69e:	4b13      	ldr	r3, [pc, #76]	; (800b6ec <vTaskDelay+0x60>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00a      	beq.n	800b6bc <vTaskDelay+0x30>
	__asm volatile
 800b6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6aa:	f383 8811 	msr	BASEPRI, r3
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	f3bf 8f4f 	dsb	sy
 800b6b6:	60bb      	str	r3, [r7, #8]
}
 800b6b8:	bf00      	nop
 800b6ba:	e7fe      	b.n	800b6ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b6bc:	f000 f868 	bl	800b790 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 fd84 	bl	800c1d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b6c8:	f000 f870 	bl	800b7ac <xTaskResumeAll>
 800b6cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d107      	bne.n	800b6e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b6d4:	4b06      	ldr	r3, [pc, #24]	; (800b6f0 <vTaskDelay+0x64>)
 800b6d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6da:	601a      	str	r2, [r3, #0]
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6e4:	bf00      	nop
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	20000994 	.word	0x20000994
 800b6f0:	e000ed04 	.word	0xe000ed04

0800b6f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800b6fa:	4b1f      	ldr	r3, [pc, #124]	; (800b778 <vTaskStartScheduler+0x84>)
 800b6fc:	9301      	str	r3, [sp, #4]
 800b6fe:	2300      	movs	r3, #0
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	2300      	movs	r3, #0
 800b704:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b708:	491c      	ldr	r1, [pc, #112]	; (800b77c <vTaskStartScheduler+0x88>)
 800b70a:	481d      	ldr	r0, [pc, #116]	; (800b780 <vTaskStartScheduler+0x8c>)
 800b70c:	f7ff fe88 	bl	800b420 <xTaskCreate>
 800b710:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2b01      	cmp	r3, #1
 800b716:	d102      	bne.n	800b71e <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 800b718:	f000 fdc0 	bl	800c29c <xTimerCreateTimerTask>
 800b71c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2b01      	cmp	r3, #1
 800b722:	d116      	bne.n	800b752 <vTaskStartScheduler+0x5e>
	__asm volatile
 800b724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b728:	f383 8811 	msr	BASEPRI, r3
 800b72c:	f3bf 8f6f 	isb	sy
 800b730:	f3bf 8f4f 	dsb	sy
 800b734:	60bb      	str	r3, [r7, #8]
}
 800b736:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b738:	4b12      	ldr	r3, [pc, #72]	; (800b784 <vTaskStartScheduler+0x90>)
 800b73a:	f04f 32ff 	mov.w	r2, #4294967295
 800b73e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b740:	4b11      	ldr	r3, [pc, #68]	; (800b788 <vTaskStartScheduler+0x94>)
 800b742:	2201      	movs	r2, #1
 800b744:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b746:	4b11      	ldr	r3, [pc, #68]	; (800b78c <vTaskStartScheduler+0x98>)
 800b748:	2200      	movs	r2, #0
 800b74a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b74c:	f001 f8f4 	bl	800c938 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b750:	e00e      	b.n	800b770 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b758:	d10a      	bne.n	800b770 <vTaskStartScheduler+0x7c>
	__asm volatile
 800b75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75e:	f383 8811 	msr	BASEPRI, r3
 800b762:	f3bf 8f6f 	isb	sy
 800b766:	f3bf 8f4f 	dsb	sy
 800b76a:	607b      	str	r3, [r7, #4]
}
 800b76c:	bf00      	nop
 800b76e:	e7fe      	b.n	800b76e <vTaskStartScheduler+0x7a>
}
 800b770:	bf00      	nop
 800b772:	3710      	adds	r7, #16
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	20000990 	.word	0x20000990
 800b77c:	08010448 	.word	0x08010448
 800b780:	0800bde1 	.word	0x0800bde1
 800b784:	2000098c 	.word	0x2000098c
 800b788:	20000978 	.word	0x20000978
 800b78c:	20000970 	.word	0x20000970

0800b790 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b790:	b480      	push	{r7}
 800b792:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b794:	4b04      	ldr	r3, [pc, #16]	; (800b7a8 <vTaskSuspendAll+0x18>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	3301      	adds	r3, #1
 800b79a:	4a03      	ldr	r2, [pc, #12]	; (800b7a8 <vTaskSuspendAll+0x18>)
 800b79c:	6013      	str	r3, [r2, #0]
}
 800b79e:	bf00      	nop
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr
 800b7a8:	20000994 	.word	0x20000994

0800b7ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b7ba:	4b41      	ldr	r3, [pc, #260]	; (800b8c0 <xTaskResumeAll+0x114>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d10a      	bne.n	800b7d8 <xTaskResumeAll+0x2c>
	__asm volatile
 800b7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c6:	f383 8811 	msr	BASEPRI, r3
 800b7ca:	f3bf 8f6f 	isb	sy
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	603b      	str	r3, [r7, #0]
}
 800b7d4:	bf00      	nop
 800b7d6:	e7fe      	b.n	800b7d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b7d8:	f001 f93c 	bl	800ca54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b7dc:	4b38      	ldr	r3, [pc, #224]	; (800b8c0 <xTaskResumeAll+0x114>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	4a37      	ldr	r2, [pc, #220]	; (800b8c0 <xTaskResumeAll+0x114>)
 800b7e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7e6:	4b36      	ldr	r3, [pc, #216]	; (800b8c0 <xTaskResumeAll+0x114>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d161      	bne.n	800b8b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b7ee:	4b35      	ldr	r3, [pc, #212]	; (800b8c4 <xTaskResumeAll+0x118>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d05d      	beq.n	800b8b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7f6:	e02e      	b.n	800b856 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b7f8:	4b33      	ldr	r3, [pc, #204]	; (800b8c8 <xTaskResumeAll+0x11c>)
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	3318      	adds	r3, #24
 800b804:	4618      	mov	r0, r3
 800b806:	f7fe ffc0 	bl	800a78a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	3304      	adds	r3, #4
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fe ffbb 	bl	800a78a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b818:	2201      	movs	r2, #1
 800b81a:	409a      	lsls	r2, r3
 800b81c:	4b2b      	ldr	r3, [pc, #172]	; (800b8cc <xTaskResumeAll+0x120>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4313      	orrs	r3, r2
 800b822:	4a2a      	ldr	r2, [pc, #168]	; (800b8cc <xTaskResumeAll+0x120>)
 800b824:	6013      	str	r3, [r2, #0]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b82a:	4613      	mov	r3, r2
 800b82c:	009b      	lsls	r3, r3, #2
 800b82e:	4413      	add	r3, r2
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	4a27      	ldr	r2, [pc, #156]	; (800b8d0 <xTaskResumeAll+0x124>)
 800b834:	441a      	add	r2, r3
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	3304      	adds	r3, #4
 800b83a:	4619      	mov	r1, r3
 800b83c:	4610      	mov	r0, r2
 800b83e:	f7fe ff47 	bl	800a6d0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b846:	4b23      	ldr	r3, [pc, #140]	; (800b8d4 <xTaskResumeAll+0x128>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d302      	bcc.n	800b856 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b850:	4b21      	ldr	r3, [pc, #132]	; (800b8d8 <xTaskResumeAll+0x12c>)
 800b852:	2201      	movs	r2, #1
 800b854:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b856:	4b1c      	ldr	r3, [pc, #112]	; (800b8c8 <xTaskResumeAll+0x11c>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d1cc      	bne.n	800b7f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d001      	beq.n	800b868 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b864:	f000 fb60 	bl	800bf28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b868:	4b1c      	ldr	r3, [pc, #112]	; (800b8dc <xTaskResumeAll+0x130>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d010      	beq.n	800b896 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b874:	f000 f858 	bl	800b928 <xTaskIncrementTick>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d002      	beq.n	800b884 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b87e:	4b16      	ldr	r3, [pc, #88]	; (800b8d8 <xTaskResumeAll+0x12c>)
 800b880:	2201      	movs	r2, #1
 800b882:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	3b01      	subs	r3, #1
 800b888:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d1f1      	bne.n	800b874 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b890:	4b12      	ldr	r3, [pc, #72]	; (800b8dc <xTaskResumeAll+0x130>)
 800b892:	2200      	movs	r2, #0
 800b894:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b896:	4b10      	ldr	r3, [pc, #64]	; (800b8d8 <xTaskResumeAll+0x12c>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d009      	beq.n	800b8b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b8a2:	4b0f      	ldr	r3, [pc, #60]	; (800b8e0 <xTaskResumeAll+0x134>)
 800b8a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	f3bf 8f4f 	dsb	sy
 800b8ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8b2:	f001 f8ff 	bl	800cab4 <vPortExitCritical>

	return xAlreadyYielded;
 800b8b6:	68bb      	ldr	r3, [r7, #8]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	20000994 	.word	0x20000994
 800b8c4:	2000096c 	.word	0x2000096c
 800b8c8:	2000092c 	.word	0x2000092c
 800b8cc:	20000974 	.word	0x20000974
 800b8d0:	20000870 	.word	0x20000870
 800b8d4:	2000086c 	.word	0x2000086c
 800b8d8:	20000980 	.word	0x20000980
 800b8dc:	2000097c 	.word	0x2000097c
 800b8e0:	e000ed04 	.word	0xe000ed04

0800b8e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b8ea:	4b05      	ldr	r3, [pc, #20]	; (800b900 <xTaskGetTickCount+0x1c>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b8f0:	687b      	ldr	r3, [r7, #4]
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	370c      	adds	r7, #12
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop
 800b900:	20000970 	.word	0x20000970

0800b904 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b90a:	f001 f97d 	bl	800cc08 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b90e:	2300      	movs	r3, #0
 800b910:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b912:	4b04      	ldr	r3, [pc, #16]	; (800b924 <xTaskGetTickCountFromISR+0x20>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b918:	683b      	ldr	r3, [r7, #0]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3708      	adds	r7, #8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	20000970 	.word	0x20000970

0800b928 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b92e:	2300      	movs	r3, #0
 800b930:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b932:	4b51      	ldr	r3, [pc, #324]	; (800ba78 <xTaskIncrementTick+0x150>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	f040 808d 	bne.w	800ba56 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 800b93c:	4b4f      	ldr	r3, [pc, #316]	; (800ba7c <xTaskIncrementTick+0x154>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	3301      	adds	r3, #1
 800b942:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b944:	4a4d      	ldr	r2, [pc, #308]	; (800ba7c <xTaskIncrementTick+0x154>)
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d120      	bne.n	800b992 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b950:	4b4b      	ldr	r3, [pc, #300]	; (800ba80 <xTaskIncrementTick+0x158>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d00a      	beq.n	800b970 <xTaskIncrementTick+0x48>
	__asm volatile
 800b95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95e:	f383 8811 	msr	BASEPRI, r3
 800b962:	f3bf 8f6f 	isb	sy
 800b966:	f3bf 8f4f 	dsb	sy
 800b96a:	603b      	str	r3, [r7, #0]
}
 800b96c:	bf00      	nop
 800b96e:	e7fe      	b.n	800b96e <xTaskIncrementTick+0x46>
 800b970:	4b43      	ldr	r3, [pc, #268]	; (800ba80 <xTaskIncrementTick+0x158>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	60fb      	str	r3, [r7, #12]
 800b976:	4b43      	ldr	r3, [pc, #268]	; (800ba84 <xTaskIncrementTick+0x15c>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a41      	ldr	r2, [pc, #260]	; (800ba80 <xTaskIncrementTick+0x158>)
 800b97c:	6013      	str	r3, [r2, #0]
 800b97e:	4a41      	ldr	r2, [pc, #260]	; (800ba84 <xTaskIncrementTick+0x15c>)
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	6013      	str	r3, [r2, #0]
 800b984:	4b40      	ldr	r3, [pc, #256]	; (800ba88 <xTaskIncrementTick+0x160>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	3301      	adds	r3, #1
 800b98a:	4a3f      	ldr	r2, [pc, #252]	; (800ba88 <xTaskIncrementTick+0x160>)
 800b98c:	6013      	str	r3, [r2, #0]
 800b98e:	f000 facb 	bl	800bf28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b992:	4b3e      	ldr	r3, [pc, #248]	; (800ba8c <xTaskIncrementTick+0x164>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	693a      	ldr	r2, [r7, #16]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d34d      	bcc.n	800ba38 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b99c:	4b38      	ldr	r3, [pc, #224]	; (800ba80 <xTaskIncrementTick+0x158>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d101      	bne.n	800b9aa <xTaskIncrementTick+0x82>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e000      	b.n	800b9ac <xTaskIncrementTick+0x84>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d004      	beq.n	800b9ba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9b0:	4b36      	ldr	r3, [pc, #216]	; (800ba8c <xTaskIncrementTick+0x164>)
 800b9b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b6:	601a      	str	r2, [r3, #0]
					break;
 800b9b8:	e03e      	b.n	800ba38 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b9ba:	4b31      	ldr	r3, [pc, #196]	; (800ba80 <xTaskIncrementTick+0x158>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b9ca:	693a      	ldr	r2, [r7, #16]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d203      	bcs.n	800b9da <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b9d2:	4a2e      	ldr	r2, [pc, #184]	; (800ba8c <xTaskIncrementTick+0x164>)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6013      	str	r3, [r2, #0]
						break;
 800b9d8:	e02e      	b.n	800ba38 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	3304      	adds	r3, #4
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7fe fed3 	bl	800a78a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d004      	beq.n	800b9f6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	3318      	adds	r3, #24
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7fe feca 	bl	800a78a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	409a      	lsls	r2, r3
 800b9fe:	4b24      	ldr	r3, [pc, #144]	; (800ba90 <xTaskIncrementTick+0x168>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4313      	orrs	r3, r2
 800ba04:	4a22      	ldr	r2, [pc, #136]	; (800ba90 <xTaskIncrementTick+0x168>)
 800ba06:	6013      	str	r3, [r2, #0]
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	4413      	add	r3, r2
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	4a1f      	ldr	r2, [pc, #124]	; (800ba94 <xTaskIncrementTick+0x16c>)
 800ba16:	441a      	add	r2, r3
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	3304      	adds	r3, #4
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	4610      	mov	r0, r2
 800ba20:	f7fe fe56 	bl	800a6d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba28:	4b1b      	ldr	r3, [pc, #108]	; (800ba98 <xTaskIncrementTick+0x170>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d3b4      	bcc.n	800b99c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ba32:	2301      	movs	r3, #1
 800ba34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba36:	e7b1      	b.n	800b99c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba38:	4b17      	ldr	r3, [pc, #92]	; (800ba98 <xTaskIncrementTick+0x170>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba3e:	4915      	ldr	r1, [pc, #84]	; (800ba94 <xTaskIncrementTick+0x16c>)
 800ba40:	4613      	mov	r3, r2
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	4413      	add	r3, r2
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	440b      	add	r3, r1
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d907      	bls.n	800ba60 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800ba50:	2301      	movs	r3, #1
 800ba52:	617b      	str	r3, [r7, #20]
 800ba54:	e004      	b.n	800ba60 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ba56:	4b11      	ldr	r3, [pc, #68]	; (800ba9c <xTaskIncrementTick+0x174>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	4a0f      	ldr	r2, [pc, #60]	; (800ba9c <xTaskIncrementTick+0x174>)
 800ba5e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ba60:	4b0f      	ldr	r3, [pc, #60]	; (800baa0 <xTaskIncrementTick+0x178>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d001      	beq.n	800ba6c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ba6c:	697b      	ldr	r3, [r7, #20]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3718      	adds	r7, #24
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	20000994 	.word	0x20000994
 800ba7c:	20000970 	.word	0x20000970
 800ba80:	20000924 	.word	0x20000924
 800ba84:	20000928 	.word	0x20000928
 800ba88:	20000984 	.word	0x20000984
 800ba8c:	2000098c 	.word	0x2000098c
 800ba90:	20000974 	.word	0x20000974
 800ba94:	20000870 	.word	0x20000870
 800ba98:	2000086c 	.word	0x2000086c
 800ba9c:	2000097c 	.word	0x2000097c
 800baa0:	20000980 	.word	0x20000980

0800baa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800baa4:	b480      	push	{r7}
 800baa6:	b087      	sub	sp, #28
 800baa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800baaa:	4b27      	ldr	r3, [pc, #156]	; (800bb48 <vTaskSwitchContext+0xa4>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d003      	beq.n	800baba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bab2:	4b26      	ldr	r3, [pc, #152]	; (800bb4c <vTaskSwitchContext+0xa8>)
 800bab4:	2201      	movs	r2, #1
 800bab6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bab8:	e03f      	b.n	800bb3a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800baba:	4b24      	ldr	r3, [pc, #144]	; (800bb4c <vTaskSwitchContext+0xa8>)
 800babc:	2200      	movs	r2, #0
 800babe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800bac0:	4b23      	ldr	r3, [pc, #140]	; (800bb50 <vTaskSwitchContext+0xac>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	fab3 f383 	clz	r3, r3
 800bacc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bace:	7afb      	ldrb	r3, [r7, #11]
 800bad0:	f1c3 031f 	rsb	r3, r3, #31
 800bad4:	617b      	str	r3, [r7, #20]
 800bad6:	491f      	ldr	r1, [pc, #124]	; (800bb54 <vTaskSwitchContext+0xb0>)
 800bad8:	697a      	ldr	r2, [r7, #20]
 800bada:	4613      	mov	r3, r2
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	4413      	add	r3, r2
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	440b      	add	r3, r1
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d10a      	bne.n	800bb00 <vTaskSwitchContext+0x5c>
	__asm volatile
 800baea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baee:	f383 8811 	msr	BASEPRI, r3
 800baf2:	f3bf 8f6f 	isb	sy
 800baf6:	f3bf 8f4f 	dsb	sy
 800bafa:	607b      	str	r3, [r7, #4]
}
 800bafc:	bf00      	nop
 800bafe:	e7fe      	b.n	800bafe <vTaskSwitchContext+0x5a>
 800bb00:	697a      	ldr	r2, [r7, #20]
 800bb02:	4613      	mov	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	4413      	add	r3, r2
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	4a12      	ldr	r2, [pc, #72]	; (800bb54 <vTaskSwitchContext+0xb0>)
 800bb0c:	4413      	add	r3, r2
 800bb0e:	613b      	str	r3, [r7, #16]
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	685a      	ldr	r2, [r3, #4]
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	605a      	str	r2, [r3, #4]
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	685a      	ldr	r2, [r3, #4]
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	3308      	adds	r3, #8
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d104      	bne.n	800bb30 <vTaskSwitchContext+0x8c>
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	685a      	ldr	r2, [r3, #4]
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	605a      	str	r2, [r3, #4]
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	4a08      	ldr	r2, [pc, #32]	; (800bb58 <vTaskSwitchContext+0xb4>)
 800bb38:	6013      	str	r3, [r2, #0]
}
 800bb3a:	bf00      	nop
 800bb3c:	371c      	adds	r7, #28
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	20000994 	.word	0x20000994
 800bb4c:	20000980 	.word	0x20000980
 800bb50:	20000974 	.word	0x20000974
 800bb54:	20000870 	.word	0x20000870
 800bb58:	2000086c 	.word	0x2000086c

0800bb5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d10a      	bne.n	800bb82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb70:	f383 8811 	msr	BASEPRI, r3
 800bb74:	f3bf 8f6f 	isb	sy
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	60fb      	str	r3, [r7, #12]
}
 800bb7e:	bf00      	nop
 800bb80:	e7fe      	b.n	800bb80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb82:	4b07      	ldr	r3, [pc, #28]	; (800bba0 <vTaskPlaceOnEventList+0x44>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	3318      	adds	r3, #24
 800bb88:	4619      	mov	r1, r3
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f7fe fdc4 	bl	800a718 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb90:	2101      	movs	r1, #1
 800bb92:	6838      	ldr	r0, [r7, #0]
 800bb94:	f000 fb1c 	bl	800c1d0 <prvAddCurrentTaskToDelayedList>
}
 800bb98:	bf00      	nop
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	2000086c 	.word	0x2000086c

0800bba4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10a      	bne.n	800bbcc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bbb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbba:	f383 8811 	msr	BASEPRI, r3
 800bbbe:	f3bf 8f6f 	isb	sy
 800bbc2:	f3bf 8f4f 	dsb	sy
 800bbc6:	617b      	str	r3, [r7, #20]
}
 800bbc8:	bf00      	nop
 800bbca:	e7fe      	b.n	800bbca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bbcc:	4b0a      	ldr	r3, [pc, #40]	; (800bbf8 <vTaskPlaceOnEventListRestricted+0x54>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	3318      	adds	r3, #24
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	68f8      	ldr	r0, [r7, #12]
 800bbd6:	f7fe fd7b 	bl	800a6d0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d002      	beq.n	800bbe6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bbe0:	f04f 33ff 	mov.w	r3, #4294967295
 800bbe4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bbe6:	6879      	ldr	r1, [r7, #4]
 800bbe8:	68b8      	ldr	r0, [r7, #8]
 800bbea:	f000 faf1 	bl	800c1d0 <prvAddCurrentTaskToDelayedList>
	}
 800bbee:	bf00      	nop
 800bbf0:	3718      	adds	r7, #24
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	2000086c 	.word	0x2000086c

0800bbfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b086      	sub	sp, #24
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d10a      	bne.n	800bc28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc16:	f383 8811 	msr	BASEPRI, r3
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	60fb      	str	r3, [r7, #12]
}
 800bc24:	bf00      	nop
 800bc26:	e7fe      	b.n	800bc26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	3318      	adds	r3, #24
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7fe fdac 	bl	800a78a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc32:	4b1d      	ldr	r3, [pc, #116]	; (800bca8 <xTaskRemoveFromEventList+0xac>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d11c      	bne.n	800bc74 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7fe fda3 	bl	800a78a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc48:	2201      	movs	r2, #1
 800bc4a:	409a      	lsls	r2, r3
 800bc4c:	4b17      	ldr	r3, [pc, #92]	; (800bcac <xTaskRemoveFromEventList+0xb0>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4313      	orrs	r3, r2
 800bc52:	4a16      	ldr	r2, [pc, #88]	; (800bcac <xTaskRemoveFromEventList+0xb0>)
 800bc54:	6013      	str	r3, [r2, #0]
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	4413      	add	r3, r2
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	4a13      	ldr	r2, [pc, #76]	; (800bcb0 <xTaskRemoveFromEventList+0xb4>)
 800bc64:	441a      	add	r2, r3
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	3304      	adds	r3, #4
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	4610      	mov	r0, r2
 800bc6e:	f7fe fd2f 	bl	800a6d0 <vListInsertEnd>
 800bc72:	e005      	b.n	800bc80 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	3318      	adds	r3, #24
 800bc78:	4619      	mov	r1, r3
 800bc7a:	480e      	ldr	r0, [pc, #56]	; (800bcb4 <xTaskRemoveFromEventList+0xb8>)
 800bc7c:	f7fe fd28 	bl	800a6d0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc84:	4b0c      	ldr	r3, [pc, #48]	; (800bcb8 <xTaskRemoveFromEventList+0xbc>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d905      	bls.n	800bc9a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bc92:	4b0a      	ldr	r3, [pc, #40]	; (800bcbc <xTaskRemoveFromEventList+0xc0>)
 800bc94:	2201      	movs	r2, #1
 800bc96:	601a      	str	r2, [r3, #0]
 800bc98:	e001      	b.n	800bc9e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800bc9e:	697b      	ldr	r3, [r7, #20]
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3718      	adds	r7, #24
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	20000994 	.word	0x20000994
 800bcac:	20000974 	.word	0x20000974
 800bcb0:	20000870 	.word	0x20000870
 800bcb4:	2000092c 	.word	0x2000092c
 800bcb8:	2000086c 	.word	0x2000086c
 800bcbc:	20000980 	.word	0x20000980

0800bcc0 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b085      	sub	sp, #20
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d10a      	bne.n	800bce4 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800bcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd2:	f383 8811 	msr	BASEPRI, r3
 800bcd6:	f3bf 8f6f 	isb	sy
 800bcda:	f3bf 8f4f 	dsb	sy
 800bcde:	60fb      	str	r3, [r7, #12]
}
 800bce0:	bf00      	nop
 800bce2:	e7fe      	b.n	800bce2 <vTaskSetTimeOutState+0x22>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bce4:	4b06      	ldr	r3, [pc, #24]	; (800bd00 <vTaskSetTimeOutState+0x40>)
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bcec:	4b05      	ldr	r3, [pc, #20]	; (800bd04 <vTaskSetTimeOutState+0x44>)
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	605a      	str	r2, [r3, #4]
}
 800bcf4:	bf00      	nop
 800bcf6:	3714      	adds	r7, #20
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr
 800bd00:	20000984 	.word	0x20000984
 800bd04:	20000970 	.word	0x20000970

0800bd08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d10a      	bne.n	800bd2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1c:	f383 8811 	msr	BASEPRI, r3
 800bd20:	f3bf 8f6f 	isb	sy
 800bd24:	f3bf 8f4f 	dsb	sy
 800bd28:	60fb      	str	r3, [r7, #12]
}
 800bd2a:	bf00      	nop
 800bd2c:	e7fe      	b.n	800bd2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10a      	bne.n	800bd4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	60bb      	str	r3, [r7, #8]
}
 800bd46:	bf00      	nop
 800bd48:	e7fe      	b.n	800bd48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bd4a:	f000 fe83 	bl	800ca54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bd4e:	4b1c      	ldr	r3, [pc, #112]	; (800bdc0 <xTaskCheckForTimeOut+0xb8>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd5c:	d102      	bne.n	800bd64 <xTaskCheckForTimeOut+0x5c>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	617b      	str	r3, [r7, #20]
 800bd62:	e026      	b.n	800bdb2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	4b16      	ldr	r3, [pc, #88]	; (800bdc4 <xTaskCheckForTimeOut+0xbc>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d007      	beq.n	800bd80 <xTaskCheckForTimeOut+0x78>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	693a      	ldr	r2, [r7, #16]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d302      	bcc.n	800bd80 <xTaskCheckForTimeOut+0x78>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	617b      	str	r3, [r7, #20]
 800bd7e:	e018      	b.n	800bdb2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	693a      	ldr	r2, [r7, #16]
 800bd86:	1ad2      	subs	r2, r2, r3
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d20e      	bcs.n	800bdae <xTaskCheckForTimeOut+0xa6>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6859      	ldr	r1, [r3, #4]
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	1acb      	subs	r3, r1, r3
 800bd9c:	441a      	add	r2, r3
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f7ff ff8c 	bl	800bcc0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	617b      	str	r3, [r7, #20]
 800bdac:	e001      	b.n	800bdb2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			xReturn = pdTRUE;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800bdb2:	f000 fe7f 	bl	800cab4 <vPortExitCritical>

	return xReturn;
 800bdb6:	697b      	ldr	r3, [r7, #20]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3718      	adds	r7, #24
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	20000970 	.word	0x20000970
 800bdc4:	20000984 	.word	0x20000984

0800bdc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bdc8:	b480      	push	{r7}
 800bdca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bdcc:	4b03      	ldr	r3, [pc, #12]	; (800bddc <vTaskMissedYield+0x14>)
 800bdce:	2201      	movs	r2, #1
 800bdd0:	601a      	str	r2, [r3, #0]
}
 800bdd2:	bf00      	nop
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	20000980 	.word	0x20000980

0800bde0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bde8:	f000 f852 	bl	800be90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bdec:	4b06      	ldr	r3, [pc, #24]	; (800be08 <prvIdleTask+0x28>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d9f9      	bls.n	800bde8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bdf4:	4b05      	ldr	r3, [pc, #20]	; (800be0c <prvIdleTask+0x2c>)
 800bdf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdfa:	601a      	str	r2, [r3, #0]
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800be04:	e7f0      	b.n	800bde8 <prvIdleTask+0x8>
 800be06:	bf00      	nop
 800be08:	20000870 	.word	0x20000870
 800be0c:	e000ed04 	.word	0xe000ed04

0800be10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be16:	2300      	movs	r3, #0
 800be18:	607b      	str	r3, [r7, #4]
 800be1a:	e00c      	b.n	800be36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	4613      	mov	r3, r2
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	4413      	add	r3, r2
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	4a12      	ldr	r2, [pc, #72]	; (800be70 <prvInitialiseTaskLists+0x60>)
 800be28:	4413      	add	r3, r2
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7fe fc23 	bl	800a676 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	3301      	adds	r3, #1
 800be34:	607b      	str	r3, [r7, #4]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2b06      	cmp	r3, #6
 800be3a:	d9ef      	bls.n	800be1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be3c:	480d      	ldr	r0, [pc, #52]	; (800be74 <prvInitialiseTaskLists+0x64>)
 800be3e:	f7fe fc1a 	bl	800a676 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be42:	480d      	ldr	r0, [pc, #52]	; (800be78 <prvInitialiseTaskLists+0x68>)
 800be44:	f7fe fc17 	bl	800a676 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be48:	480c      	ldr	r0, [pc, #48]	; (800be7c <prvInitialiseTaskLists+0x6c>)
 800be4a:	f7fe fc14 	bl	800a676 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be4e:	480c      	ldr	r0, [pc, #48]	; (800be80 <prvInitialiseTaskLists+0x70>)
 800be50:	f7fe fc11 	bl	800a676 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be54:	480b      	ldr	r0, [pc, #44]	; (800be84 <prvInitialiseTaskLists+0x74>)
 800be56:	f7fe fc0e 	bl	800a676 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800be5a:	4b0b      	ldr	r3, [pc, #44]	; (800be88 <prvInitialiseTaskLists+0x78>)
 800be5c:	4a05      	ldr	r2, [pc, #20]	; (800be74 <prvInitialiseTaskLists+0x64>)
 800be5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be60:	4b0a      	ldr	r3, [pc, #40]	; (800be8c <prvInitialiseTaskLists+0x7c>)
 800be62:	4a05      	ldr	r2, [pc, #20]	; (800be78 <prvInitialiseTaskLists+0x68>)
 800be64:	601a      	str	r2, [r3, #0]
}
 800be66:	bf00      	nop
 800be68:	3708      	adds	r7, #8
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	20000870 	.word	0x20000870
 800be74:	200008fc 	.word	0x200008fc
 800be78:	20000910 	.word	0x20000910
 800be7c:	2000092c 	.word	0x2000092c
 800be80:	20000940 	.word	0x20000940
 800be84:	20000958 	.word	0x20000958
 800be88:	20000924 	.word	0x20000924
 800be8c:	20000928 	.word	0x20000928

0800be90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be96:	e028      	b.n	800beea <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800be98:	f7ff fc7a 	bl	800b790 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800be9c:	4b17      	ldr	r3, [pc, #92]	; (800befc <prvCheckTasksWaitingTermination+0x6c>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	bf0c      	ite	eq
 800bea4:	2301      	moveq	r3, #1
 800bea6:	2300      	movne	r3, #0
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800beac:	f7ff fc7e 	bl	800b7ac <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d119      	bne.n	800beea <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800beb6:	f000 fdcd 	bl	800ca54 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800beba:	4b10      	ldr	r3, [pc, #64]	; (800befc <prvCheckTasksWaitingTermination+0x6c>)
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	3304      	adds	r3, #4
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7fe fc5f 	bl	800a78a <uxListRemove>
					--uxCurrentNumberOfTasks;
 800becc:	4b0c      	ldr	r3, [pc, #48]	; (800bf00 <prvCheckTasksWaitingTermination+0x70>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	3b01      	subs	r3, #1
 800bed2:	4a0b      	ldr	r2, [pc, #44]	; (800bf00 <prvCheckTasksWaitingTermination+0x70>)
 800bed4:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800bed6:	4b0b      	ldr	r3, [pc, #44]	; (800bf04 <prvCheckTasksWaitingTermination+0x74>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	3b01      	subs	r3, #1
 800bedc:	4a09      	ldr	r2, [pc, #36]	; (800bf04 <prvCheckTasksWaitingTermination+0x74>)
 800bede:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800bee0:	f000 fde8 	bl	800cab4 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800bee4:	6838      	ldr	r0, [r7, #0]
 800bee6:	f000 f80f 	bl	800bf08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800beea:	4b06      	ldr	r3, [pc, #24]	; (800bf04 <prvCheckTasksWaitingTermination+0x74>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d1d2      	bne.n	800be98 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bef2:	bf00      	nop
 800bef4:	bf00      	nop
 800bef6:	3708      	adds	r7, #8
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	20000940 	.word	0x20000940
 800bf00:	2000096c 	.word	0x2000096c
 800bf04:	20000954 	.word	0x20000954

0800bf08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf14:	4618      	mov	r0, r3
 800bf16:	f000 ff7b 	bl	800ce10 <vPortFree>
			vPortFree( pxTCB );
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 ff78 	bl	800ce10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bf20:	bf00      	nop
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf2e:	4b0f      	ldr	r3, [pc, #60]	; (800bf6c <prvResetNextTaskUnblockTime+0x44>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d101      	bne.n	800bf3c <prvResetNextTaskUnblockTime+0x14>
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e000      	b.n	800bf3e <prvResetNextTaskUnblockTime+0x16>
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d004      	beq.n	800bf4c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf42:	4b0b      	ldr	r3, [pc, #44]	; (800bf70 <prvResetNextTaskUnblockTime+0x48>)
 800bf44:	f04f 32ff 	mov.w	r2, #4294967295
 800bf48:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bf4a:	e008      	b.n	800bf5e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bf4c:	4b07      	ldr	r3, [pc, #28]	; (800bf6c <prvResetNextTaskUnblockTime+0x44>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	4a05      	ldr	r2, [pc, #20]	; (800bf70 <prvResetNextTaskUnblockTime+0x48>)
 800bf5c:	6013      	str	r3, [r2, #0]
}
 800bf5e:	bf00      	nop
 800bf60:	370c      	adds	r7, #12
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	20000924 	.word	0x20000924
 800bf70:	2000098c 	.word	0x2000098c

0800bf74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bf7a:	4b0b      	ldr	r3, [pc, #44]	; (800bfa8 <xTaskGetSchedulerState+0x34>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d102      	bne.n	800bf88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf82:	2301      	movs	r3, #1
 800bf84:	607b      	str	r3, [r7, #4]
 800bf86:	e008      	b.n	800bf9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf88:	4b08      	ldr	r3, [pc, #32]	; (800bfac <xTaskGetSchedulerState+0x38>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d102      	bne.n	800bf96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf90:	2302      	movs	r3, #2
 800bf92:	607b      	str	r3, [r7, #4]
 800bf94:	e001      	b.n	800bf9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf96:	2300      	movs	r3, #0
 800bf98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf9a:	687b      	ldr	r3, [r7, #4]
	}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	370c      	adds	r7, #12
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr
 800bfa8:	20000978 	.word	0x20000978
 800bfac:	20000994 	.word	0x20000994

0800bfb0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d062      	beq.n	800c088 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc6:	4b32      	ldr	r3, [pc, #200]	; (800c090 <vTaskPriorityInherit+0xe0>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d25b      	bcs.n	800c088 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	699b      	ldr	r3, [r3, #24]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	db06      	blt.n	800bfe6 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfd8:	4b2d      	ldr	r3, [pc, #180]	; (800c090 <vTaskPriorityInherit+0xe0>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfde:	f1c3 0207 	rsb	r2, r3, #7
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6959      	ldr	r1, [r3, #20]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfee:	4613      	mov	r3, r2
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	4413      	add	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4a27      	ldr	r2, [pc, #156]	; (800c094 <vTaskPriorityInherit+0xe4>)
 800bff8:	4413      	add	r3, r2
 800bffa:	4299      	cmp	r1, r3
 800bffc:	d101      	bne.n	800c002 <vTaskPriorityInherit+0x52>
 800bffe:	2301      	movs	r3, #1
 800c000:	e000      	b.n	800c004 <vTaskPriorityInherit+0x54>
 800c002:	2300      	movs	r3, #0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d03a      	beq.n	800c07e <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	3304      	adds	r3, #4
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7fe fbbc 	bl	800a78a <uxListRemove>
 800c012:	4603      	mov	r3, r0
 800c014:	2b00      	cmp	r3, #0
 800c016:	d115      	bne.n	800c044 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c01c:	491d      	ldr	r1, [pc, #116]	; (800c094 <vTaskPriorityInherit+0xe4>)
 800c01e:	4613      	mov	r3, r2
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	4413      	add	r3, r2
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	440b      	add	r3, r1
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d10a      	bne.n	800c044 <vTaskPriorityInherit+0x94>
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c032:	2201      	movs	r2, #1
 800c034:	fa02 f303 	lsl.w	r3, r2, r3
 800c038:	43da      	mvns	r2, r3
 800c03a:	4b17      	ldr	r3, [pc, #92]	; (800c098 <vTaskPriorityInherit+0xe8>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4013      	ands	r3, r2
 800c040:	4a15      	ldr	r2, [pc, #84]	; (800c098 <vTaskPriorityInherit+0xe8>)
 800c042:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c044:	4b12      	ldr	r3, [pc, #72]	; (800c090 <vTaskPriorityInherit+0xe0>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c052:	2201      	movs	r2, #1
 800c054:	409a      	lsls	r2, r3
 800c056:	4b10      	ldr	r3, [pc, #64]	; (800c098 <vTaskPriorityInherit+0xe8>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4313      	orrs	r3, r2
 800c05c:	4a0e      	ldr	r2, [pc, #56]	; (800c098 <vTaskPriorityInherit+0xe8>)
 800c05e:	6013      	str	r3, [r2, #0]
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c064:	4613      	mov	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	4413      	add	r3, r2
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	4a09      	ldr	r2, [pc, #36]	; (800c094 <vTaskPriorityInherit+0xe4>)
 800c06e:	441a      	add	r2, r3
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	3304      	adds	r3, #4
 800c074:	4619      	mov	r1, r3
 800c076:	4610      	mov	r0, r2
 800c078:	f7fe fb2a 	bl	800a6d0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c07c:	e004      	b.n	800c088 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c07e:	4b04      	ldr	r3, [pc, #16]	; (800c090 <vTaskPriorityInherit+0xe0>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800c088:	bf00      	nop
 800c08a:	3710      	adds	r7, #16
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	2000086c 	.word	0x2000086c
 800c094:	20000870 	.word	0x20000870
 800c098:	20000974 	.word	0x20000974

0800c09c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b086      	sub	sp, #24
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d06e      	beq.n	800c190 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c0b2:	4b3a      	ldr	r3, [pc, #232]	; (800c19c <xTaskPriorityDisinherit+0x100>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	693a      	ldr	r2, [r7, #16]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d00a      	beq.n	800c0d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	60fb      	str	r3, [r7, #12]
}
 800c0ce:	bf00      	nop
 800c0d0:	e7fe      	b.n	800c0d0 <xTaskPriorityDisinherit+0x34>

			configASSERT( pxTCB->uxMutexesHeld );
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10a      	bne.n	800c0f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	60bb      	str	r3, [r7, #8]
}
 800c0ec:	bf00      	nop
 800c0ee:	e7fe      	b.n	800c0ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0f4:	1e5a      	subs	r2, r3, #1
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c102:	429a      	cmp	r2, r3
 800c104:	d044      	beq.n	800c190 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d140      	bne.n	800c190 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	3304      	adds	r3, #4
 800c112:	4618      	mov	r0, r3
 800c114:	f7fe fb39 	bl	800a78a <uxListRemove>
 800c118:	4603      	mov	r3, r0
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d115      	bne.n	800c14a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c122:	491f      	ldr	r1, [pc, #124]	; (800c1a0 <xTaskPriorityDisinherit+0x104>)
 800c124:	4613      	mov	r3, r2
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	4413      	add	r3, r2
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	440b      	add	r3, r1
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d10a      	bne.n	800c14a <xTaskPriorityDisinherit+0xae>
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c138:	2201      	movs	r2, #1
 800c13a:	fa02 f303 	lsl.w	r3, r2, r3
 800c13e:	43da      	mvns	r2, r3
 800c140:	4b18      	ldr	r3, [pc, #96]	; (800c1a4 <xTaskPriorityDisinherit+0x108>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4013      	ands	r3, r2
 800c146:	4a17      	ldr	r2, [pc, #92]	; (800c1a4 <xTaskPriorityDisinherit+0x108>)
 800c148:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c156:	f1c3 0207 	rsb	r2, r3, #7
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c162:	2201      	movs	r2, #1
 800c164:	409a      	lsls	r2, r3
 800c166:	4b0f      	ldr	r3, [pc, #60]	; (800c1a4 <xTaskPriorityDisinherit+0x108>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	4a0d      	ldr	r2, [pc, #52]	; (800c1a4 <xTaskPriorityDisinherit+0x108>)
 800c16e:	6013      	str	r3, [r2, #0]
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c174:	4613      	mov	r3, r2
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	4413      	add	r3, r2
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	4a08      	ldr	r2, [pc, #32]	; (800c1a0 <xTaskPriorityDisinherit+0x104>)
 800c17e:	441a      	add	r2, r3
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	3304      	adds	r3, #4
 800c184:	4619      	mov	r1, r3
 800c186:	4610      	mov	r0, r2
 800c188:	f7fe faa2 	bl	800a6d0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c18c:	2301      	movs	r3, #1
 800c18e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c190:	697b      	ldr	r3, [r7, #20]
	}
 800c192:	4618      	mov	r0, r3
 800c194:	3718      	adds	r7, #24
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	2000086c 	.word	0x2000086c
 800c1a0:	20000870 	.word	0x20000870
 800c1a4:	20000974 	.word	0x20000974

0800c1a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800c1a8:	b480      	push	{r7}
 800c1aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c1ac:	4b07      	ldr	r3, [pc, #28]	; (800c1cc <pvTaskIncrementMutexHeldCount+0x24>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d004      	beq.n	800c1be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c1b4:	4b05      	ldr	r3, [pc, #20]	; (800c1cc <pvTaskIncrementMutexHeldCount+0x24>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c1ba:	3201      	adds	r2, #1
 800c1bc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c1be:	4b03      	ldr	r3, [pc, #12]	; (800c1cc <pvTaskIncrementMutexHeldCount+0x24>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
	}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr
 800c1cc:	2000086c 	.word	0x2000086c

0800c1d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c1da:	4b29      	ldr	r3, [pc, #164]	; (800c280 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1e0:	4b28      	ldr	r3, [pc, #160]	; (800c284 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	3304      	adds	r3, #4
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fe facf 	bl	800a78a <uxListRemove>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10b      	bne.n	800c20a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c1f2:	4b24      	ldr	r3, [pc, #144]	; (800c284 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c1fe:	43da      	mvns	r2, r3
 800c200:	4b21      	ldr	r3, [pc, #132]	; (800c288 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4013      	ands	r3, r2
 800c206:	4a20      	ldr	r2, [pc, #128]	; (800c288 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c208:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c210:	d10a      	bne.n	800c228 <prvAddCurrentTaskToDelayedList+0x58>
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d007      	beq.n	800c228 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c218:	4b1a      	ldr	r3, [pc, #104]	; (800c284 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	3304      	adds	r3, #4
 800c21e:	4619      	mov	r1, r3
 800c220:	481a      	ldr	r0, [pc, #104]	; (800c28c <prvAddCurrentTaskToDelayedList+0xbc>)
 800c222:	f7fe fa55 	bl	800a6d0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c226:	e026      	b.n	800c276 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c228:	68fa      	ldr	r2, [r7, #12]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	4413      	add	r3, r2
 800c22e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c230:	4b14      	ldr	r3, [pc, #80]	; (800c284 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	68ba      	ldr	r2, [r7, #8]
 800c236:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c238:	68ba      	ldr	r2, [r7, #8]
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d209      	bcs.n	800c254 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c240:	4b13      	ldr	r3, [pc, #76]	; (800c290 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	4b0f      	ldr	r3, [pc, #60]	; (800c284 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	3304      	adds	r3, #4
 800c24a:	4619      	mov	r1, r3
 800c24c:	4610      	mov	r0, r2
 800c24e:	f7fe fa63 	bl	800a718 <vListInsert>
}
 800c252:	e010      	b.n	800c276 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c254:	4b0f      	ldr	r3, [pc, #60]	; (800c294 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	4b0a      	ldr	r3, [pc, #40]	; (800c284 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	3304      	adds	r3, #4
 800c25e:	4619      	mov	r1, r3
 800c260:	4610      	mov	r0, r2
 800c262:	f7fe fa59 	bl	800a718 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c266:	4b0c      	ldr	r3, [pc, #48]	; (800c298 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	68ba      	ldr	r2, [r7, #8]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d202      	bcs.n	800c276 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c270:	4a09      	ldr	r2, [pc, #36]	; (800c298 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	6013      	str	r3, [r2, #0]
}
 800c276:	bf00      	nop
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	20000970 	.word	0x20000970
 800c284:	2000086c 	.word	0x2000086c
 800c288:	20000974 	.word	0x20000974
 800c28c:	20000958 	.word	0x20000958
 800c290:	20000928 	.word	0x20000928
 800c294:	20000924 	.word	0x20000924
 800c298:	2000098c 	.word	0x2000098c

0800c29c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c2a6:	f000 fa95 	bl	800c7d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c2aa:	4b11      	ldr	r3, [pc, #68]	; (800c2f0 <xTimerCreateTimerTask+0x54>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00b      	beq.n	800c2ca <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800c2b2:	4b10      	ldr	r3, [pc, #64]	; (800c2f4 <xTimerCreateTimerTask+0x58>)
 800c2b4:	9301      	str	r3, [sp, #4]
 800c2b6:	2303      	movs	r3, #3
 800c2b8:	9300      	str	r3, [sp, #0]
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c2c0:	490d      	ldr	r1, [pc, #52]	; (800c2f8 <xTimerCreateTimerTask+0x5c>)
 800c2c2:	480e      	ldr	r0, [pc, #56]	; (800c2fc <xTimerCreateTimerTask+0x60>)
 800c2c4:	f7ff f8ac 	bl	800b420 <xTaskCreate>
 800c2c8:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d10a      	bne.n	800c2e6 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800c2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	603b      	str	r3, [r7, #0]
}
 800c2e2:	bf00      	nop
 800c2e4:	e7fe      	b.n	800c2e4 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800c2e6:	687b      	ldr	r3, [r7, #4]
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	200009c8 	.word	0x200009c8
 800c2f4:	200009cc 	.word	0x200009cc
 800c2f8:	08010450 	.word	0x08010450
 800c2fc:	0800c41d 	.word	0x0800c41d

0800c300 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b08a      	sub	sp, #40	; 0x28
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	607a      	str	r2, [r7, #4]
 800c30c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c30e:	2300      	movs	r3, #0
 800c310:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d10a      	bne.n	800c32e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31c:	f383 8811 	msr	BASEPRI, r3
 800c320:	f3bf 8f6f 	isb	sy
 800c324:	f3bf 8f4f 	dsb	sy
 800c328:	623b      	str	r3, [r7, #32]
}
 800c32a:	bf00      	nop
 800c32c:	e7fe      	b.n	800c32c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c32e:	4b1a      	ldr	r3, [pc, #104]	; (800c398 <xTimerGenericCommand+0x98>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d02a      	beq.n	800c38c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	2b05      	cmp	r3, #5
 800c346:	dc18      	bgt.n	800c37a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c348:	f7ff fe14 	bl	800bf74 <xTaskGetSchedulerState>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b02      	cmp	r3, #2
 800c350:	d109      	bne.n	800c366 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c352:	4b11      	ldr	r3, [pc, #68]	; (800c398 <xTimerGenericCommand+0x98>)
 800c354:	6818      	ldr	r0, [r3, #0]
 800c356:	f107 0114 	add.w	r1, r7, #20
 800c35a:	2300      	movs	r3, #0
 800c35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c35e:	f7fe fb37 	bl	800a9d0 <xQueueGenericSend>
 800c362:	6278      	str	r0, [r7, #36]	; 0x24
 800c364:	e012      	b.n	800c38c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c366:	4b0c      	ldr	r3, [pc, #48]	; (800c398 <xTimerGenericCommand+0x98>)
 800c368:	6818      	ldr	r0, [r3, #0]
 800c36a:	f107 0114 	add.w	r1, r7, #20
 800c36e:	2300      	movs	r3, #0
 800c370:	2200      	movs	r2, #0
 800c372:	f7fe fb2d 	bl	800a9d0 <xQueueGenericSend>
 800c376:	6278      	str	r0, [r7, #36]	; 0x24
 800c378:	e008      	b.n	800c38c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c37a:	4b07      	ldr	r3, [pc, #28]	; (800c398 <xTimerGenericCommand+0x98>)
 800c37c:	6818      	ldr	r0, [r3, #0]
 800c37e:	f107 0114 	add.w	r1, r7, #20
 800c382:	2300      	movs	r3, #0
 800c384:	683a      	ldr	r2, [r7, #0]
 800c386:	f7fe fc21 	bl	800abcc <xQueueGenericSendFromISR>
 800c38a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3728      	adds	r7, #40	; 0x28
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	200009c8 	.word	0x200009c8

0800c39c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b088      	sub	sp, #32
 800c3a0:	af02      	add	r7, sp, #8
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c3a6:	4b1c      	ldr	r3, [pc, #112]	; (800c418 <prvProcessExpiredTimer+0x7c>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	3304      	adds	r3, #4
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7fe f9e8 	bl	800a78a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	69db      	ldr	r3, [r3, #28]
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d122      	bne.n	800c408 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	699a      	ldr	r2, [r3, #24]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	18d1      	adds	r1, r2, r3
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	683a      	ldr	r2, [r7, #0]
 800c3ce:	6978      	ldr	r0, [r7, #20]
 800c3d0:	f000 f8c8 	bl	800c564 <prvInsertTimerInActiveList>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d016      	beq.n	800c408 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3da:	2300      	movs	r3, #0
 800c3dc:	9300      	str	r3, [sp, #0]
 800c3de:	2300      	movs	r3, #0
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	2100      	movs	r1, #0
 800c3e4:	6978      	ldr	r0, [r7, #20]
 800c3e6:	f7ff ff8b 	bl	800c300 <xTimerGenericCommand>
 800c3ea:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d10a      	bne.n	800c408 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f6:	f383 8811 	msr	BASEPRI, r3
 800c3fa:	f3bf 8f6f 	isb	sy
 800c3fe:	f3bf 8f4f 	dsb	sy
 800c402:	60fb      	str	r3, [r7, #12]
}
 800c404:	bf00      	nop
 800c406:	e7fe      	b.n	800c406 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c40c:	6978      	ldr	r0, [r7, #20]
 800c40e:	4798      	blx	r3
}
 800c410:	bf00      	nop
 800c412:	3718      	adds	r7, #24
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	200009c0 	.word	0x200009c0

0800c41c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c424:	f107 0308 	add.w	r3, r7, #8
 800c428:	4618      	mov	r0, r3
 800c42a:	f000 f857 	bl	800c4dc <prvGetNextExpireTime>
 800c42e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	4619      	mov	r1, r3
 800c434:	68f8      	ldr	r0, [r7, #12]
 800c436:	f000 f803 	bl	800c440 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c43a:	f000 f8d5 	bl	800c5e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c43e:	e7f1      	b.n	800c424 <prvTimerTask+0x8>

0800c440 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c44a:	f7ff f9a1 	bl	800b790 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c44e:	f107 0308 	add.w	r3, r7, #8
 800c452:	4618      	mov	r0, r3
 800c454:	f000 f866 	bl	800c524 <prvSampleTimeNow>
 800c458:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d130      	bne.n	800c4c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d10a      	bne.n	800c47c <prvProcessTimerOrBlockTask+0x3c>
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d806      	bhi.n	800c47c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c46e:	f7ff f99d 	bl	800b7ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c472:	68f9      	ldr	r1, [r7, #12]
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f7ff ff91 	bl	800c39c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c47a:	e024      	b.n	800c4c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d008      	beq.n	800c494 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c482:	4b13      	ldr	r3, [pc, #76]	; (800c4d0 <prvProcessTimerOrBlockTask+0x90>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	bf0c      	ite	eq
 800c48c:	2301      	moveq	r3, #1
 800c48e:	2300      	movne	r3, #0
 800c490:	b2db      	uxtb	r3, r3
 800c492:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c494:	4b0f      	ldr	r3, [pc, #60]	; (800c4d4 <prvProcessTimerOrBlockTask+0x94>)
 800c496:	6818      	ldr	r0, [r3, #0]
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	1ad3      	subs	r3, r2, r3
 800c49e:	683a      	ldr	r2, [r7, #0]
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	f7fe ff89 	bl	800b3b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c4a6:	f7ff f981 	bl	800b7ac <xTaskResumeAll>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10a      	bne.n	800c4c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c4b0:	4b09      	ldr	r3, [pc, #36]	; (800c4d8 <prvProcessTimerOrBlockTask+0x98>)
 800c4b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4b6:	601a      	str	r2, [r3, #0]
 800c4b8:	f3bf 8f4f 	dsb	sy
 800c4bc:	f3bf 8f6f 	isb	sy
}
 800c4c0:	e001      	b.n	800c4c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c4c2:	f7ff f973 	bl	800b7ac <xTaskResumeAll>
}
 800c4c6:	bf00      	nop
 800c4c8:	3710      	adds	r7, #16
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	200009c4 	.word	0x200009c4
 800c4d4:	200009c8 	.word	0x200009c8
 800c4d8:	e000ed04 	.word	0xe000ed04

0800c4dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c4e4:	4b0e      	ldr	r3, [pc, #56]	; (800c520 <prvGetNextExpireTime+0x44>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	bf0c      	ite	eq
 800c4ee:	2301      	moveq	r3, #1
 800c4f0:	2300      	movne	r3, #0
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d105      	bne.n	800c50e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c502:	4b07      	ldr	r3, [pc, #28]	; (800c520 <prvGetNextExpireTime+0x44>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	60fb      	str	r3, [r7, #12]
 800c50c:	e001      	b.n	800c512 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c50e:	2300      	movs	r3, #0
 800c510:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c512:	68fb      	ldr	r3, [r7, #12]
}
 800c514:	4618      	mov	r0, r3
 800c516:	3714      	adds	r7, #20
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr
 800c520:	200009c0 	.word	0x200009c0

0800c524 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c52c:	f7ff f9da 	bl	800b8e4 <xTaskGetTickCount>
 800c530:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c532:	4b0b      	ldr	r3, [pc, #44]	; (800c560 <prvSampleTimeNow+0x3c>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68fa      	ldr	r2, [r7, #12]
 800c538:	429a      	cmp	r2, r3
 800c53a:	d205      	bcs.n	800c548 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c53c:	f000 f8e8 	bl	800c710 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2201      	movs	r2, #1
 800c544:	601a      	str	r2, [r3, #0]
 800c546:	e002      	b.n	800c54e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2200      	movs	r2, #0
 800c54c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c54e:	4a04      	ldr	r2, [pc, #16]	; (800c560 <prvSampleTimeNow+0x3c>)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c554:	68fb      	ldr	r3, [r7, #12]
}
 800c556:	4618      	mov	r0, r3
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	200009d0 	.word	0x200009d0

0800c564 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b086      	sub	sp, #24
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	607a      	str	r2, [r7, #4]
 800c570:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c572:	2300      	movs	r3, #0
 800c574:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	68ba      	ldr	r2, [r7, #8]
 800c57a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	429a      	cmp	r2, r3
 800c588:	d812      	bhi.n	800c5b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	1ad2      	subs	r2, r2, r3
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	699b      	ldr	r3, [r3, #24]
 800c594:	429a      	cmp	r2, r3
 800c596:	d302      	bcc.n	800c59e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c598:	2301      	movs	r3, #1
 800c59a:	617b      	str	r3, [r7, #20]
 800c59c:	e01b      	b.n	800c5d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c59e:	4b10      	ldr	r3, [pc, #64]	; (800c5e0 <prvInsertTimerInActiveList+0x7c>)
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	3304      	adds	r3, #4
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	4610      	mov	r0, r2
 800c5aa:	f7fe f8b5 	bl	800a718 <vListInsert>
 800c5ae:	e012      	b.n	800c5d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d206      	bcs.n	800c5c6 <prvInsertTimerInActiveList+0x62>
 800c5b8:	68ba      	ldr	r2, [r7, #8]
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d302      	bcc.n	800c5c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	617b      	str	r3, [r7, #20]
 800c5c4:	e007      	b.n	800c5d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c5c6:	4b07      	ldr	r3, [pc, #28]	; (800c5e4 <prvInsertTimerInActiveList+0x80>)
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	3304      	adds	r3, #4
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	4610      	mov	r0, r2
 800c5d2:	f7fe f8a1 	bl	800a718 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c5d6:	697b      	ldr	r3, [r7, #20]
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3718      	adds	r7, #24
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	200009c4 	.word	0x200009c4
 800c5e4:	200009c0 	.word	0x200009c0

0800c5e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b08c      	sub	sp, #48	; 0x30
 800c5ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5ee:	e07c      	b.n	800c6ea <prvProcessReceivedCommands+0x102>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	db78      	blt.n	800c6e8 <prvProcessReceivedCommands+0x100>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800c5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fc:	695b      	ldr	r3, [r3, #20]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d004      	beq.n	800c60c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c604:	3304      	adds	r3, #4
 800c606:	4618      	mov	r0, r3
 800c608:	f7fe f8bf 	bl	800a78a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c60c:	1d3b      	adds	r3, r7, #4
 800c60e:	4618      	mov	r0, r3
 800c610:	f7ff ff88 	bl	800c524 <prvSampleTimeNow>
 800c614:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	2b09      	cmp	r3, #9
 800c61a:	d866      	bhi.n	800c6ea <prvProcessReceivedCommands+0x102>
 800c61c:	a201      	add	r2, pc, #4	; (adr r2, 800c624 <prvProcessReceivedCommands+0x3c>)
 800c61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c622:	bf00      	nop
 800c624:	0800c64d 	.word	0x0800c64d
 800c628:	0800c64d 	.word	0x0800c64d
 800c62c:	0800c64d 	.word	0x0800c64d
 800c630:	0800c6eb 	.word	0x0800c6eb
 800c634:	0800c6a9 	.word	0x0800c6a9
 800c638:	0800c6e1 	.word	0x0800c6e1
 800c63c:	0800c64d 	.word	0x0800c64d
 800c640:	0800c64d 	.word	0x0800c64d
 800c644:	0800c6eb 	.word	0x0800c6eb
 800c648:	0800c6a9 	.word	0x0800c6a9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c650:	699b      	ldr	r3, [r3, #24]
 800c652:	18d1      	adds	r1, r2, r3
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6a3a      	ldr	r2, [r7, #32]
 800c658:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c65a:	f7ff ff83 	bl	800c564 <prvInsertTimerInActiveList>
 800c65e:	4603      	mov	r3, r0
 800c660:	2b00      	cmp	r3, #0
 800c662:	d042      	beq.n	800c6ea <prvProcessReceivedCommands+0x102>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c668:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c66a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66e:	69db      	ldr	r3, [r3, #28]
 800c670:	2b01      	cmp	r3, #1
 800c672:	d13a      	bne.n	800c6ea <prvProcessReceivedCommands+0x102>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c678:	699b      	ldr	r3, [r3, #24]
 800c67a:	441a      	add	r2, r3
 800c67c:	2300      	movs	r3, #0
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	2300      	movs	r3, #0
 800c682:	2100      	movs	r1, #0
 800c684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c686:	f7ff fe3b 	bl	800c300 <xTimerGenericCommand>
 800c68a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d12b      	bne.n	800c6ea <prvProcessReceivedCommands+0x102>
	__asm volatile
 800c692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c696:	f383 8811 	msr	BASEPRI, r3
 800c69a:	f3bf 8f6f 	isb	sy
 800c69e:	f3bf 8f4f 	dsb	sy
 800c6a2:	61bb      	str	r3, [r7, #24]
}
 800c6a4:	bf00      	nop
 800c6a6:	e7fe      	b.n	800c6a6 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b0:	699b      	ldr	r3, [r3, #24]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d10a      	bne.n	800c6cc <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800c6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	617b      	str	r3, [r7, #20]
}
 800c6c8:	bf00      	nop
 800c6ca:	e7fe      	b.n	800c6ca <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ce:	699a      	ldr	r2, [r3, #24]
 800c6d0:	6a3b      	ldr	r3, [r7, #32]
 800c6d2:	18d1      	adds	r1, r2, r3
 800c6d4:	6a3b      	ldr	r3, [r7, #32]
 800c6d6:	6a3a      	ldr	r2, [r7, #32]
 800c6d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6da:	f7ff ff43 	bl	800c564 <prvInsertTimerInActiveList>
					break;
 800c6de:	e004      	b.n	800c6ea <prvProcessReceivedCommands+0x102>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 800c6e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6e2:	f000 fb95 	bl	800ce10 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c6e6:	e000      	b.n	800c6ea <prvProcessReceivedCommands+0x102>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c6e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6ea:	4b08      	ldr	r3, [pc, #32]	; (800c70c <prvProcessReceivedCommands+0x124>)
 800c6ec:	6818      	ldr	r0, [r3, #0]
 800c6ee:	f107 0108 	add.w	r1, r7, #8
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f7fe fb8f 	bl	800ae18 <xQueueGenericReceive>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	f47f af77 	bne.w	800c5f0 <prvProcessReceivedCommands+0x8>
	}
}
 800c702:	bf00      	nop
 800c704:	bf00      	nop
 800c706:	3728      	adds	r7, #40	; 0x28
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	200009c8 	.word	0x200009c8

0800c710 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b088      	sub	sp, #32
 800c714:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c716:	e045      	b.n	800c7a4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c718:	4b2c      	ldr	r3, [pc, #176]	; (800c7cc <prvSwitchTimerLists+0xbc>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c722:	4b2a      	ldr	r3, [pc, #168]	; (800c7cc <prvSwitchTimerLists+0xbc>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	3304      	adds	r3, #4
 800c730:	4618      	mov	r0, r3
 800c732:	f7fe f82a 	bl	800a78a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c73a:	68f8      	ldr	r0, [r7, #12]
 800c73c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	69db      	ldr	r3, [r3, #28]
 800c742:	2b01      	cmp	r3, #1
 800c744:	d12e      	bne.n	800c7a4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	699b      	ldr	r3, [r3, #24]
 800c74a:	693a      	ldr	r2, [r7, #16]
 800c74c:	4413      	add	r3, r2
 800c74e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c750:	68ba      	ldr	r2, [r7, #8]
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	429a      	cmp	r2, r3
 800c756:	d90e      	bls.n	800c776 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	68ba      	ldr	r2, [r7, #8]
 800c75c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c764:	4b19      	ldr	r3, [pc, #100]	; (800c7cc <prvSwitchTimerLists+0xbc>)
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	3304      	adds	r3, #4
 800c76c:	4619      	mov	r1, r3
 800c76e:	4610      	mov	r0, r2
 800c770:	f7fd ffd2 	bl	800a718 <vListInsert>
 800c774:	e016      	b.n	800c7a4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c776:	2300      	movs	r3, #0
 800c778:	9300      	str	r3, [sp, #0]
 800c77a:	2300      	movs	r3, #0
 800c77c:	693a      	ldr	r2, [r7, #16]
 800c77e:	2100      	movs	r1, #0
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f7ff fdbd 	bl	800c300 <xTimerGenericCommand>
 800c786:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10a      	bne.n	800c7a4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	603b      	str	r3, [r7, #0]
}
 800c7a0:	bf00      	nop
 800c7a2:	e7fe      	b.n	800c7a2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c7a4:	4b09      	ldr	r3, [pc, #36]	; (800c7cc <prvSwitchTimerLists+0xbc>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d1b4      	bne.n	800c718 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c7ae:	4b07      	ldr	r3, [pc, #28]	; (800c7cc <prvSwitchTimerLists+0xbc>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c7b4:	4b06      	ldr	r3, [pc, #24]	; (800c7d0 <prvSwitchTimerLists+0xc0>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a04      	ldr	r2, [pc, #16]	; (800c7cc <prvSwitchTimerLists+0xbc>)
 800c7ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c7bc:	4a04      	ldr	r2, [pc, #16]	; (800c7d0 <prvSwitchTimerLists+0xc0>)
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	6013      	str	r3, [r2, #0]
}
 800c7c2:	bf00      	nop
 800c7c4:	3718      	adds	r7, #24
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	200009c0 	.word	0x200009c0
 800c7d0:	200009c4 	.word	0x200009c4

0800c7d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c7d8:	f000 f93c 	bl	800ca54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c7dc:	4b12      	ldr	r3, [pc, #72]	; (800c828 <prvCheckForValidListAndQueue+0x54>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d11d      	bne.n	800c820 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800c7e4:	4811      	ldr	r0, [pc, #68]	; (800c82c <prvCheckForValidListAndQueue+0x58>)
 800c7e6:	f7fd ff46 	bl	800a676 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c7ea:	4811      	ldr	r0, [pc, #68]	; (800c830 <prvCheckForValidListAndQueue+0x5c>)
 800c7ec:	f7fd ff43 	bl	800a676 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c7f0:	4b10      	ldr	r3, [pc, #64]	; (800c834 <prvCheckForValidListAndQueue+0x60>)
 800c7f2:	4a0e      	ldr	r2, [pc, #56]	; (800c82c <prvCheckForValidListAndQueue+0x58>)
 800c7f4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c7f6:	4b10      	ldr	r3, [pc, #64]	; (800c838 <prvCheckForValidListAndQueue+0x64>)
 800c7f8:	4a0d      	ldr	r2, [pc, #52]	; (800c830 <prvCheckForValidListAndQueue+0x5c>)
 800c7fa:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	210c      	movs	r1, #12
 800c800:	200a      	movs	r0, #10
 800c802:	f7fe f855 	bl	800a8b0 <xQueueGenericCreate>
 800c806:	4603      	mov	r3, r0
 800c808:	4a07      	ldr	r2, [pc, #28]	; (800c828 <prvCheckForValidListAndQueue+0x54>)
 800c80a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c80c:	4b06      	ldr	r3, [pc, #24]	; (800c828 <prvCheckForValidListAndQueue+0x54>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d005      	beq.n	800c820 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c814:	4b04      	ldr	r3, [pc, #16]	; (800c828 <prvCheckForValidListAndQueue+0x54>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4908      	ldr	r1, [pc, #32]	; (800c83c <prvCheckForValidListAndQueue+0x68>)
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7fe fda2 	bl	800b364 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c820:	f000 f948 	bl	800cab4 <vPortExitCritical>
}
 800c824:	bf00      	nop
 800c826:	bd80      	pop	{r7, pc}
 800c828:	200009c8 	.word	0x200009c8
 800c82c:	20000998 	.word	0x20000998
 800c830:	200009ac 	.word	0x200009ac
 800c834:	200009c0 	.word	0x200009c0
 800c838:	200009c4 	.word	0x200009c4
 800c83c:	08010458 	.word	0x08010458

0800c840 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c840:	b480      	push	{r7}
 800c842:	b085      	sub	sp, #20
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	3b04      	subs	r3, #4
 800c850:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	3b04      	subs	r3, #4
 800c85e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	f023 0201 	bic.w	r2, r3, #1
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	3b04      	subs	r3, #4
 800c86e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c870:	4a0c      	ldr	r2, [pc, #48]	; (800c8a4 <pxPortInitialiseStack+0x64>)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	3b14      	subs	r3, #20
 800c87a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c87c:	687a      	ldr	r2, [r7, #4]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	3b04      	subs	r3, #4
 800c886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f06f 0202 	mvn.w	r2, #2
 800c88e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	3b20      	subs	r3, #32
 800c894:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c896:	68fb      	ldr	r3, [r7, #12]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3714      	adds	r7, #20
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr
 800c8a4:	0800c8a9 	.word	0x0800c8a9

0800c8a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c8ae:	4b0d      	ldr	r3, [pc, #52]	; (800c8e4 <prvTaskExitError+0x3c>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8b6:	d00a      	beq.n	800c8ce <prvTaskExitError+0x26>
	__asm volatile
 800c8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8bc:	f383 8811 	msr	BASEPRI, r3
 800c8c0:	f3bf 8f6f 	isb	sy
 800c8c4:	f3bf 8f4f 	dsb	sy
 800c8c8:	607b      	str	r3, [r7, #4]
}
 800c8ca:	bf00      	nop
 800c8cc:	e7fe      	b.n	800c8cc <prvTaskExitError+0x24>
	__asm volatile
 800c8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d2:	f383 8811 	msr	BASEPRI, r3
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	603b      	str	r3, [r7, #0]
}
 800c8e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	for( ;; );
 800c8e2:	e7fe      	b.n	800c8e2 <prvTaskExitError+0x3a>
 800c8e4:	20000018 	.word	0x20000018
	...

0800c8f0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c8f0:	4b07      	ldr	r3, [pc, #28]	; (800c910 <pxCurrentTCBConst2>)
 800c8f2:	6819      	ldr	r1, [r3, #0]
 800c8f4:	6808      	ldr	r0, [r1, #0]
 800c8f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fa:	f380 8809 	msr	PSP, r0
 800c8fe:	f3bf 8f6f 	isb	sy
 800c902:	f04f 0000 	mov.w	r0, #0
 800c906:	f380 8811 	msr	BASEPRI, r0
 800c90a:	4770      	bx	lr
 800c90c:	f3af 8000 	nop.w

0800c910 <pxCurrentTCBConst2>:
 800c910:	2000086c 	.word	0x2000086c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c914:	bf00      	nop
 800c916:	bf00      	nop

0800c918 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c918:	4806      	ldr	r0, [pc, #24]	; (800c934 <prvPortStartFirstTask+0x1c>)
 800c91a:	6800      	ldr	r0, [r0, #0]
 800c91c:	6800      	ldr	r0, [r0, #0]
 800c91e:	f380 8808 	msr	MSP, r0
 800c922:	b662      	cpsie	i
 800c924:	b661      	cpsie	f
 800c926:	f3bf 8f4f 	dsb	sy
 800c92a:	f3bf 8f6f 	isb	sy
 800c92e:	df00      	svc	0
 800c930:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c932:	bf00      	nop
 800c934:	e000ed08 	.word	0xe000ed08

0800c938 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b086      	sub	sp, #24
 800c93c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c93e:	4b3c      	ldr	r3, [pc, #240]	; (800ca30 <xPortStartScheduler+0xf8>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a3c      	ldr	r2, [pc, #240]	; (800ca34 <xPortStartScheduler+0xfc>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d10a      	bne.n	800c95e <xPortStartScheduler+0x26>
	__asm volatile
 800c948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94c:	f383 8811 	msr	BASEPRI, r3
 800c950:	f3bf 8f6f 	isb	sy
 800c954:	f3bf 8f4f 	dsb	sy
 800c958:	613b      	str	r3, [r7, #16]
}
 800c95a:	bf00      	nop
 800c95c:	e7fe      	b.n	800c95c <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c95e:	4b34      	ldr	r3, [pc, #208]	; (800ca30 <xPortStartScheduler+0xf8>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	4a35      	ldr	r2, [pc, #212]	; (800ca38 <xPortStartScheduler+0x100>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d10a      	bne.n	800c97e <xPortStartScheduler+0x46>
	__asm volatile
 800c968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c96c:	f383 8811 	msr	BASEPRI, r3
 800c970:	f3bf 8f6f 	isb	sy
 800c974:	f3bf 8f4f 	dsb	sy
 800c978:	60fb      	str	r3, [r7, #12]
}
 800c97a:	bf00      	nop
 800c97c:	e7fe      	b.n	800c97c <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c97e:	4b2f      	ldr	r3, [pc, #188]	; (800ca3c <xPortStartScheduler+0x104>)
 800c980:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	b2db      	uxtb	r3, r3
 800c988:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	22ff      	movs	r2, #255	; 0xff
 800c98e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	b2db      	uxtb	r3, r3
 800c996:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c998:	79fb      	ldrb	r3, [r7, #7]
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c9a0:	b2da      	uxtb	r2, r3
 800c9a2:	4b27      	ldr	r3, [pc, #156]	; (800ca40 <xPortStartScheduler+0x108>)
 800c9a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c9a6:	4b27      	ldr	r3, [pc, #156]	; (800ca44 <xPortStartScheduler+0x10c>)
 800c9a8:	2207      	movs	r2, #7
 800c9aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c9ac:	e009      	b.n	800c9c2 <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c9ae:	4b25      	ldr	r3, [pc, #148]	; (800ca44 <xPortStartScheduler+0x10c>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	3b01      	subs	r3, #1
 800c9b4:	4a23      	ldr	r2, [pc, #140]	; (800ca44 <xPortStartScheduler+0x10c>)
 800c9b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c9b8:	79fb      	ldrb	r3, [r7, #7]
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	005b      	lsls	r3, r3, #1
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c9c2:	79fb      	ldrb	r3, [r7, #7]
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9ca:	2b80      	cmp	r3, #128	; 0x80
 800c9cc:	d0ef      	beq.n	800c9ae <xPortStartScheduler+0x76>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c9ce:	4b1d      	ldr	r3, [pc, #116]	; (800ca44 <xPortStartScheduler+0x10c>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	021b      	lsls	r3, r3, #8
 800c9d4:	4a1b      	ldr	r2, [pc, #108]	; (800ca44 <xPortStartScheduler+0x10c>)
 800c9d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c9d8:	4b1a      	ldr	r3, [pc, #104]	; (800ca44 <xPortStartScheduler+0x10c>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c9e0:	4a18      	ldr	r2, [pc, #96]	; (800ca44 <xPortStartScheduler+0x10c>)
 800c9e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	b2da      	uxtb	r2, r3
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c9ec:	4b16      	ldr	r3, [pc, #88]	; (800ca48 <xPortStartScheduler+0x110>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a15      	ldr	r2, [pc, #84]	; (800ca48 <xPortStartScheduler+0x110>)
 800c9f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c9f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c9f8:	4b13      	ldr	r3, [pc, #76]	; (800ca48 <xPortStartScheduler+0x110>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a12      	ldr	r2, [pc, #72]	; (800ca48 <xPortStartScheduler+0x110>)
 800c9fe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ca02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca04:	f000 f8da 	bl	800cbbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca08:	4b10      	ldr	r3, [pc, #64]	; (800ca4c <xPortStartScheduler+0x114>)
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca0e:	f000 f8f1 	bl	800cbf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca12:	4b0f      	ldr	r3, [pc, #60]	; (800ca50 <xPortStartScheduler+0x118>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a0e      	ldr	r2, [pc, #56]	; (800ca50 <xPortStartScheduler+0x118>)
 800ca18:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ca1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca1e:	f7ff ff7b 	bl	800c918 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800ca22:	f7ff ff41 	bl	800c8a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca26:	2300      	movs	r3, #0
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3718      	adds	r7, #24
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}
 800ca30:	e000ed00 	.word	0xe000ed00
 800ca34:	410fc271 	.word	0x410fc271
 800ca38:	410fc270 	.word	0x410fc270
 800ca3c:	e000e400 	.word	0xe000e400
 800ca40:	200009d4 	.word	0x200009d4
 800ca44:	200009d8 	.word	0x200009d8
 800ca48:	e000ed20 	.word	0xe000ed20
 800ca4c:	20000018 	.word	0x20000018
 800ca50:	e000ef34 	.word	0xe000ef34

0800ca54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
	__asm volatile
 800ca5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca5e:	f383 8811 	msr	BASEPRI, r3
 800ca62:	f3bf 8f6f 	isb	sy
 800ca66:	f3bf 8f4f 	dsb	sy
 800ca6a:	607b      	str	r3, [r7, #4]
}
 800ca6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca6e:	4b0f      	ldr	r3, [pc, #60]	; (800caac <vPortEnterCritical+0x58>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	3301      	adds	r3, #1
 800ca74:	4a0d      	ldr	r2, [pc, #52]	; (800caac <vPortEnterCritical+0x58>)
 800ca76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca78:	4b0c      	ldr	r3, [pc, #48]	; (800caac <vPortEnterCritical+0x58>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d10f      	bne.n	800caa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca80:	4b0b      	ldr	r3, [pc, #44]	; (800cab0 <vPortEnterCritical+0x5c>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00a      	beq.n	800caa0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ca8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8e:	f383 8811 	msr	BASEPRI, r3
 800ca92:	f3bf 8f6f 	isb	sy
 800ca96:	f3bf 8f4f 	dsb	sy
 800ca9a:	603b      	str	r3, [r7, #0]
}
 800ca9c:	bf00      	nop
 800ca9e:	e7fe      	b.n	800ca9e <vPortEnterCritical+0x4a>
	}
}
 800caa0:	bf00      	nop
 800caa2:	370c      	adds	r7, #12
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr
 800caac:	20000018 	.word	0x20000018
 800cab0:	e000ed04 	.word	0xe000ed04

0800cab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800caba:	4b12      	ldr	r3, [pc, #72]	; (800cb04 <vPortExitCritical+0x50>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d10a      	bne.n	800cad8 <vPortExitCritical+0x24>
	__asm volatile
 800cac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac6:	f383 8811 	msr	BASEPRI, r3
 800caca:	f3bf 8f6f 	isb	sy
 800cace:	f3bf 8f4f 	dsb	sy
 800cad2:	607b      	str	r3, [r7, #4]
}
 800cad4:	bf00      	nop
 800cad6:	e7fe      	b.n	800cad6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cad8:	4b0a      	ldr	r3, [pc, #40]	; (800cb04 <vPortExitCritical+0x50>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	3b01      	subs	r3, #1
 800cade:	4a09      	ldr	r2, [pc, #36]	; (800cb04 <vPortExitCritical+0x50>)
 800cae0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cae2:	4b08      	ldr	r3, [pc, #32]	; (800cb04 <vPortExitCritical+0x50>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d105      	bne.n	800caf6 <vPortExitCritical+0x42>
 800caea:	2300      	movs	r3, #0
 800caec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	f383 8811 	msr	BASEPRI, r3
}
 800caf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800caf6:	bf00      	nop
 800caf8:	370c      	adds	r7, #12
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr
 800cb02:	bf00      	nop
 800cb04:	20000018 	.word	0x20000018
	...

0800cb10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb10:	f3ef 8009 	mrs	r0, PSP
 800cb14:	f3bf 8f6f 	isb	sy
 800cb18:	4b15      	ldr	r3, [pc, #84]	; (800cb70 <pxCurrentTCBConst>)
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	f01e 0f10 	tst.w	lr, #16
 800cb20:	bf08      	it	eq
 800cb22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cb26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb2a:	6010      	str	r0, [r2, #0]
 800cb2c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 800cb30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cb34:	f380 8811 	msr	BASEPRI, r0
 800cb38:	f3bf 8f4f 	dsb	sy
 800cb3c:	f3bf 8f6f 	isb	sy
 800cb40:	f7fe ffb0 	bl	800baa4 <vTaskSwitchContext>
 800cb44:	f04f 0000 	mov.w	r0, #0
 800cb48:	f380 8811 	msr	BASEPRI, r0
 800cb4c:	bc08      	pop	{r3}
 800cb4e:	6819      	ldr	r1, [r3, #0]
 800cb50:	6808      	ldr	r0, [r1, #0]
 800cb52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb56:	f01e 0f10 	tst.w	lr, #16
 800cb5a:	bf08      	it	eq
 800cb5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cb60:	f380 8809 	msr	PSP, r0
 800cb64:	f3bf 8f6f 	isb	sy
 800cb68:	4770      	bx	lr
 800cb6a:	bf00      	nop
 800cb6c:	f3af 8000 	nop.w

0800cb70 <pxCurrentTCBConst>:
 800cb70:	2000086c 	.word	0x2000086c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb74:	bf00      	nop
 800cb76:	bf00      	nop

0800cb78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	607b      	str	r3, [r7, #4]
}
 800cb90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb92:	f7fe fec9 	bl	800b928 <xTaskIncrementTick>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d003      	beq.n	800cba4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb9c:	4b06      	ldr	r3, [pc, #24]	; (800cbb8 <xPortSysTickHandler+0x40>)
 800cb9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cba2:	601a      	str	r2, [r3, #0]
 800cba4:	2300      	movs	r3, #0
 800cba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	f383 8811 	msr	BASEPRI, r3
}
 800cbae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cbb0:	bf00      	nop
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	e000ed04 	.word	0xe000ed04

0800cbbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cbc0:	4b08      	ldr	r3, [pc, #32]	; (800cbe4 <vPortSetupTimerInterrupt+0x28>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a08      	ldr	r2, [pc, #32]	; (800cbe8 <vPortSetupTimerInterrupt+0x2c>)
 800cbc6:	fba2 2303 	umull	r2, r3, r2, r3
 800cbca:	099b      	lsrs	r3, r3, #6
 800cbcc:	4a07      	ldr	r2, [pc, #28]	; (800cbec <vPortSetupTimerInterrupt+0x30>)
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cbd2:	4b07      	ldr	r3, [pc, #28]	; (800cbf0 <vPortSetupTimerInterrupt+0x34>)
 800cbd4:	2207      	movs	r2, #7
 800cbd6:	601a      	str	r2, [r3, #0]
}
 800cbd8:	bf00      	nop
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr
 800cbe2:	bf00      	nop
 800cbe4:	20000014 	.word	0x20000014
 800cbe8:	10624dd3 	.word	0x10624dd3
 800cbec:	e000e014 	.word	0xe000e014
 800cbf0:	e000e010 	.word	0xe000e010

0800cbf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cbf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cc04 <vPortEnableVFP+0x10>
 800cbf8:	6801      	ldr	r1, [r0, #0]
 800cbfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cbfe:	6001      	str	r1, [r0, #0]
 800cc00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc02:	bf00      	nop
 800cc04:	e000ed88 	.word	0xe000ed88

0800cc08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cc08:	b480      	push	{r7}
 800cc0a:	b085      	sub	sp, #20
 800cc0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800cc0e:	f3ef 8305 	mrs	r3, IPSR
 800cc12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2b0f      	cmp	r3, #15
 800cc18:	d914      	bls.n	800cc44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cc1a:	4a17      	ldr	r2, [pc, #92]	; (800cc78 <vPortValidateInterruptPriority+0x70>)
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	4413      	add	r3, r2
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cc24:	4b15      	ldr	r3, [pc, #84]	; (800cc7c <vPortValidateInterruptPriority+0x74>)
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	7afa      	ldrb	r2, [r7, #11]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d20a      	bcs.n	800cc44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc32:	f383 8811 	msr	BASEPRI, r3
 800cc36:	f3bf 8f6f 	isb	sy
 800cc3a:	f3bf 8f4f 	dsb	sy
 800cc3e:	607b      	str	r3, [r7, #4]
}
 800cc40:	bf00      	nop
 800cc42:	e7fe      	b.n	800cc42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cc44:	4b0e      	ldr	r3, [pc, #56]	; (800cc80 <vPortValidateInterruptPriority+0x78>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cc4c:	4b0d      	ldr	r3, [pc, #52]	; (800cc84 <vPortValidateInterruptPriority+0x7c>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d90a      	bls.n	800cc6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc58:	f383 8811 	msr	BASEPRI, r3
 800cc5c:	f3bf 8f6f 	isb	sy
 800cc60:	f3bf 8f4f 	dsb	sy
 800cc64:	603b      	str	r3, [r7, #0]
}
 800cc66:	bf00      	nop
 800cc68:	e7fe      	b.n	800cc68 <vPortValidateInterruptPriority+0x60>
	}
 800cc6a:	bf00      	nop
 800cc6c:	3714      	adds	r7, #20
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr
 800cc76:	bf00      	nop
 800cc78:	e000e3f0 	.word	0xe000e3f0
 800cc7c:	200009d4 	.word	0x200009d4
 800cc80:	e000ed0c 	.word	0xe000ed0c
 800cc84:	200009d8 	.word	0x200009d8

0800cc88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b08a      	sub	sp, #40	; 0x28
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cc90:	2300      	movs	r3, #0
 800cc92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cc94:	f7fe fd7c 	bl	800b790 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cc98:	4b58      	ldr	r3, [pc, #352]	; (800cdfc <pvPortMalloc+0x174>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d101      	bne.n	800cca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cca0:	f000 f910 	bl	800cec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cca4:	4b56      	ldr	r3, [pc, #344]	; (800ce00 <pvPortMalloc+0x178>)
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4013      	ands	r3, r2
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f040 808e 	bne.w	800cdce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d01d      	beq.n	800ccf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ccb8:	2208      	movs	r2, #8
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f003 0307 	and.w	r3, r3, #7
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d014      	beq.n	800ccf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f023 0307 	bic.w	r3, r3, #7
 800ccd0:	3308      	adds	r3, #8
 800ccd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f003 0307 	and.w	r3, r3, #7
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00a      	beq.n	800ccf4 <pvPortMalloc+0x6c>
	__asm volatile
 800ccde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce2:	f383 8811 	msr	BASEPRI, r3
 800cce6:	f3bf 8f6f 	isb	sy
 800ccea:	f3bf 8f4f 	dsb	sy
 800ccee:	617b      	str	r3, [r7, #20]
}
 800ccf0:	bf00      	nop
 800ccf2:	e7fe      	b.n	800ccf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d069      	beq.n	800cdce <pvPortMalloc+0x146>
 800ccfa:	4b42      	ldr	r3, [pc, #264]	; (800ce04 <pvPortMalloc+0x17c>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d864      	bhi.n	800cdce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cd04:	4b40      	ldr	r3, [pc, #256]	; (800ce08 <pvPortMalloc+0x180>)
 800cd06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cd08:	4b3f      	ldr	r3, [pc, #252]	; (800ce08 <pvPortMalloc+0x180>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd0e:	e004      	b.n	800cd1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d903      	bls.n	800cd2c <pvPortMalloc+0xa4>
 800cd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d1f1      	bne.n	800cd10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cd2c:	4b33      	ldr	r3, [pc, #204]	; (800cdfc <pvPortMalloc+0x174>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d04b      	beq.n	800cdce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd36:	6a3b      	ldr	r3, [r7, #32]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2208      	movs	r2, #8
 800cd3c:	4413      	add	r3, r2
 800cd3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	6a3b      	ldr	r3, [r7, #32]
 800cd46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4a:	685a      	ldr	r2, [r3, #4]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	1ad2      	subs	r2, r2, r3
 800cd50:	2308      	movs	r3, #8
 800cd52:	005b      	lsls	r3, r3, #1
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d91f      	bls.n	800cd98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cd58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd60:	69bb      	ldr	r3, [r7, #24]
 800cd62:	f003 0307 	and.w	r3, r3, #7
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d00a      	beq.n	800cd80 <pvPortMalloc+0xf8>
	__asm volatile
 800cd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6e:	f383 8811 	msr	BASEPRI, r3
 800cd72:	f3bf 8f6f 	isb	sy
 800cd76:	f3bf 8f4f 	dsb	sy
 800cd7a:	613b      	str	r3, [r7, #16]
}
 800cd7c:	bf00      	nop
 800cd7e:	e7fe      	b.n	800cd7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd82:	685a      	ldr	r2, [r3, #4]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	1ad2      	subs	r2, r2, r3
 800cd88:	69bb      	ldr	r3, [r7, #24]
 800cd8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cd92:	69b8      	ldr	r0, [r7, #24]
 800cd94:	f000 f8f8 	bl	800cf88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd98:	4b1a      	ldr	r3, [pc, #104]	; (800ce04 <pvPortMalloc+0x17c>)
 800cd9a:	681a      	ldr	r2, [r3, #0]
 800cd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	1ad3      	subs	r3, r2, r3
 800cda2:	4a18      	ldr	r2, [pc, #96]	; (800ce04 <pvPortMalloc+0x17c>)
 800cda4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cda6:	4b17      	ldr	r3, [pc, #92]	; (800ce04 <pvPortMalloc+0x17c>)
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	4b18      	ldr	r3, [pc, #96]	; (800ce0c <pvPortMalloc+0x184>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d203      	bcs.n	800cdba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cdb2:	4b14      	ldr	r3, [pc, #80]	; (800ce04 <pvPortMalloc+0x17c>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	4a15      	ldr	r2, [pc, #84]	; (800ce0c <pvPortMalloc+0x184>)
 800cdb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdbc:	685a      	ldr	r2, [r3, #4]
 800cdbe:	4b10      	ldr	r3, [pc, #64]	; (800ce00 <pvPortMalloc+0x178>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	431a      	orrs	r2, r3
 800cdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdca:	2200      	movs	r2, #0
 800cdcc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cdce:	f7fe fced 	bl	800b7ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cdd2:	69fb      	ldr	r3, [r7, #28]
 800cdd4:	f003 0307 	and.w	r3, r3, #7
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d00a      	beq.n	800cdf2 <pvPortMalloc+0x16a>
	__asm volatile
 800cddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde0:	f383 8811 	msr	BASEPRI, r3
 800cde4:	f3bf 8f6f 	isb	sy
 800cde8:	f3bf 8f4f 	dsb	sy
 800cdec:	60fb      	str	r3, [r7, #12]
}
 800cdee:	bf00      	nop
 800cdf0:	e7fe      	b.n	800cdf0 <pvPortMalloc+0x168>
	return pvReturn;
 800cdf2:	69fb      	ldr	r3, [r7, #28]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3728      	adds	r7, #40	; 0x28
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	200081e4 	.word	0x200081e4
 800ce00:	200081f0 	.word	0x200081f0
 800ce04:	200081e8 	.word	0x200081e8
 800ce08:	200081dc 	.word	0x200081dc
 800ce0c:	200081ec 	.word	0x200081ec

0800ce10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d048      	beq.n	800ceb4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ce22:	2308      	movs	r3, #8
 800ce24:	425b      	negs	r3, r3
 800ce26:	697a      	ldr	r2, [r7, #20]
 800ce28:	4413      	add	r3, r2
 800ce2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	685a      	ldr	r2, [r3, #4]
 800ce34:	4b21      	ldr	r3, [pc, #132]	; (800cebc <vPortFree+0xac>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4013      	ands	r3, r2
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d10a      	bne.n	800ce54 <vPortFree+0x44>
	__asm volatile
 800ce3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce42:	f383 8811 	msr	BASEPRI, r3
 800ce46:	f3bf 8f6f 	isb	sy
 800ce4a:	f3bf 8f4f 	dsb	sy
 800ce4e:	60fb      	str	r3, [r7, #12]
}
 800ce50:	bf00      	nop
 800ce52:	e7fe      	b.n	800ce52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d00a      	beq.n	800ce72 <vPortFree+0x62>
	__asm volatile
 800ce5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce60:	f383 8811 	msr	BASEPRI, r3
 800ce64:	f3bf 8f6f 	isb	sy
 800ce68:	f3bf 8f4f 	dsb	sy
 800ce6c:	60bb      	str	r3, [r7, #8]
}
 800ce6e:	bf00      	nop
 800ce70:	e7fe      	b.n	800ce70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	685a      	ldr	r2, [r3, #4]
 800ce76:	4b11      	ldr	r3, [pc, #68]	; (800cebc <vPortFree+0xac>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4013      	ands	r3, r2
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d019      	beq.n	800ceb4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d115      	bne.n	800ceb4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	685a      	ldr	r2, [r3, #4]
 800ce8c:	4b0b      	ldr	r3, [pc, #44]	; (800cebc <vPortFree+0xac>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	43db      	mvns	r3, r3
 800ce92:	401a      	ands	r2, r3
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ce98:	f7fe fc7a 	bl	800b790 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	685a      	ldr	r2, [r3, #4]
 800cea0:	4b07      	ldr	r3, [pc, #28]	; (800cec0 <vPortFree+0xb0>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4413      	add	r3, r2
 800cea6:	4a06      	ldr	r2, [pc, #24]	; (800cec0 <vPortFree+0xb0>)
 800cea8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ceaa:	6938      	ldr	r0, [r7, #16]
 800ceac:	f000 f86c 	bl	800cf88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ceb0:	f7fe fc7c 	bl	800b7ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ceb4:	bf00      	nop
 800ceb6:	3718      	adds	r7, #24
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	200081f0 	.word	0x200081f0
 800cec0:	200081e8 	.word	0x200081e8

0800cec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cec4:	b480      	push	{r7}
 800cec6:	b085      	sub	sp, #20
 800cec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ceca:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800cece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ced0:	4b27      	ldr	r3, [pc, #156]	; (800cf70 <prvHeapInit+0xac>)
 800ced2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f003 0307 	and.w	r3, r3, #7
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d00c      	beq.n	800cef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	3307      	adds	r3, #7
 800cee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f023 0307 	bic.w	r3, r3, #7
 800ceea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ceec:	68ba      	ldr	r2, [r7, #8]
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	1ad3      	subs	r3, r2, r3
 800cef2:	4a1f      	ldr	r2, [pc, #124]	; (800cf70 <prvHeapInit+0xac>)
 800cef4:	4413      	add	r3, r2
 800cef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cefc:	4a1d      	ldr	r2, [pc, #116]	; (800cf74 <prvHeapInit+0xb0>)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cf02:	4b1c      	ldr	r3, [pc, #112]	; (800cf74 <prvHeapInit+0xb0>)
 800cf04:	2200      	movs	r2, #0
 800cf06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	68ba      	ldr	r2, [r7, #8]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cf10:	2208      	movs	r2, #8
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	1a9b      	subs	r3, r3, r2
 800cf16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	f023 0307 	bic.w	r3, r3, #7
 800cf1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	4a15      	ldr	r2, [pc, #84]	; (800cf78 <prvHeapInit+0xb4>)
 800cf24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cf26:	4b14      	ldr	r3, [pc, #80]	; (800cf78 <prvHeapInit+0xb4>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cf2e:	4b12      	ldr	r3, [pc, #72]	; (800cf78 <prvHeapInit+0xb4>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	2200      	movs	r2, #0
 800cf34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	68fa      	ldr	r2, [r7, #12]
 800cf3e:	1ad2      	subs	r2, r2, r3
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cf44:	4b0c      	ldr	r3, [pc, #48]	; (800cf78 <prvHeapInit+0xb4>)
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	4a0a      	ldr	r2, [pc, #40]	; (800cf7c <prvHeapInit+0xb8>)
 800cf52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	685b      	ldr	r3, [r3, #4]
 800cf58:	4a09      	ldr	r2, [pc, #36]	; (800cf80 <prvHeapInit+0xbc>)
 800cf5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cf5c:	4b09      	ldr	r3, [pc, #36]	; (800cf84 <prvHeapInit+0xc0>)
 800cf5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cf62:	601a      	str	r2, [r3, #0]
}
 800cf64:	bf00      	nop
 800cf66:	3714      	adds	r7, #20
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr
 800cf70:	200009dc 	.word	0x200009dc
 800cf74:	200081dc 	.word	0x200081dc
 800cf78:	200081e4 	.word	0x200081e4
 800cf7c:	200081ec 	.word	0x200081ec
 800cf80:	200081e8 	.word	0x200081e8
 800cf84:	200081f0 	.word	0x200081f0

0800cf88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b085      	sub	sp, #20
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf90:	4b28      	ldr	r3, [pc, #160]	; (800d034 <prvInsertBlockIntoFreeList+0xac>)
 800cf92:	60fb      	str	r3, [r7, #12]
 800cf94:	e002      	b.n	800cf9c <prvInsertBlockIntoFreeList+0x14>
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	60fb      	str	r3, [r7, #12]
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d8f7      	bhi.n	800cf96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	68ba      	ldr	r2, [r7, #8]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d108      	bne.n	800cfca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	685a      	ldr	r2, [r3, #4]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	441a      	add	r2, r3
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	68ba      	ldr	r2, [r7, #8]
 800cfd4:	441a      	add	r2, r3
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d118      	bne.n	800d010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681a      	ldr	r2, [r3, #0]
 800cfe2:	4b15      	ldr	r3, [pc, #84]	; (800d038 <prvInsertBlockIntoFreeList+0xb0>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d00d      	beq.n	800d006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	685a      	ldr	r2, [r3, #4]
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	441a      	add	r2, r3
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	601a      	str	r2, [r3, #0]
 800d004:	e008      	b.n	800d018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d006:	4b0c      	ldr	r3, [pc, #48]	; (800d038 <prvInsertBlockIntoFreeList+0xb0>)
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	601a      	str	r2, [r3, #0]
 800d00e:	e003      	b.n	800d018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681a      	ldr	r2, [r3, #0]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d018:	68fa      	ldr	r2, [r7, #12]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d002      	beq.n	800d026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d026:	bf00      	nop
 800d028:	3714      	adds	r7, #20
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop
 800d034:	200081dc 	.word	0x200081dc
 800d038:	200081e4 	.word	0x200081e4

0800d03c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800d03c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d074 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d040:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d042:	e003      	b.n	800d04c <LoopCopyDataInit>

0800d044 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d044:	4b0c      	ldr	r3, [pc, #48]	; (800d078 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d046:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d048:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d04a:	3104      	adds	r1, #4

0800d04c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d04c:	480b      	ldr	r0, [pc, #44]	; (800d07c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d04e:	4b0c      	ldr	r3, [pc, #48]	; (800d080 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d050:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d052:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d054:	d3f6      	bcc.n	800d044 <CopyDataInit>
  ldr  r2, =_sbss
 800d056:	4a0b      	ldr	r2, [pc, #44]	; (800d084 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d058:	e002      	b.n	800d060 <LoopFillZerobss>

0800d05a <FillZerobss>:

/* Zero fill the bss segment. */  
 FillZerobss:
  movs  r3, #0
 800d05a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d05c:	f842 3b04 	str.w	r3, [r2], #4

0800d060 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d060:	4b09      	ldr	r3, [pc, #36]	; (800d088 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d062:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d064:	d3f9      	bcc.n	800d05a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d066:	f7fd f94f 	bl	800a308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d06a:	f000 f817 	bl	800d09c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d06e:	f7f6 fbeb 	bl	8003848 <main>
  bx  lr    
 800d072:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d074:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800d078:	08010844 	.word	0x08010844
  ldr  r0, =_sdata
 800d07c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d080:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 800d084:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 800d088:	20008208 	.word	0x20008208

0800d08c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d08c:	e7fe      	b.n	800d08c <ADC_IRQHandler>
	...

0800d090 <__errno>:
 800d090:	4b01      	ldr	r3, [pc, #4]	; (800d098 <__errno+0x8>)
 800d092:	6818      	ldr	r0, [r3, #0]
 800d094:	4770      	bx	lr
 800d096:	bf00      	nop
 800d098:	2000001c 	.word	0x2000001c

0800d09c <__libc_init_array>:
 800d09c:	b570      	push	{r4, r5, r6, lr}
 800d09e:	4d0d      	ldr	r5, [pc, #52]	; (800d0d4 <__libc_init_array+0x38>)
 800d0a0:	4c0d      	ldr	r4, [pc, #52]	; (800d0d8 <__libc_init_array+0x3c>)
 800d0a2:	1b64      	subs	r4, r4, r5
 800d0a4:	10a4      	asrs	r4, r4, #2
 800d0a6:	2600      	movs	r6, #0
 800d0a8:	42a6      	cmp	r6, r4
 800d0aa:	d109      	bne.n	800d0c0 <__libc_init_array+0x24>
 800d0ac:	4d0b      	ldr	r5, [pc, #44]	; (800d0dc <__libc_init_array+0x40>)
 800d0ae:	4c0c      	ldr	r4, [pc, #48]	; (800d0e0 <__libc_init_array+0x44>)
 800d0b0:	f002 ff8e 	bl	800ffd0 <_init>
 800d0b4:	1b64      	subs	r4, r4, r5
 800d0b6:	10a4      	asrs	r4, r4, #2
 800d0b8:	2600      	movs	r6, #0
 800d0ba:	42a6      	cmp	r6, r4
 800d0bc:	d105      	bne.n	800d0ca <__libc_init_array+0x2e>
 800d0be:	bd70      	pop	{r4, r5, r6, pc}
 800d0c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0c4:	4798      	blx	r3
 800d0c6:	3601      	adds	r6, #1
 800d0c8:	e7ee      	b.n	800d0a8 <__libc_init_array+0xc>
 800d0ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0ce:	4798      	blx	r3
 800d0d0:	3601      	adds	r6, #1
 800d0d2:	e7f2      	b.n	800d0ba <__libc_init_array+0x1e>
 800d0d4:	0801083c 	.word	0x0801083c
 800d0d8:	0801083c 	.word	0x0801083c
 800d0dc:	0801083c 	.word	0x0801083c
 800d0e0:	08010840 	.word	0x08010840

0800d0e4 <malloc>:
 800d0e4:	4b02      	ldr	r3, [pc, #8]	; (800d0f0 <malloc+0xc>)
 800d0e6:	4601      	mov	r1, r0
 800d0e8:	6818      	ldr	r0, [r3, #0]
 800d0ea:	f000 b88d 	b.w	800d208 <_malloc_r>
 800d0ee:	bf00      	nop
 800d0f0:	2000001c 	.word	0x2000001c

0800d0f4 <free>:
 800d0f4:	4b02      	ldr	r3, [pc, #8]	; (800d100 <free+0xc>)
 800d0f6:	4601      	mov	r1, r0
 800d0f8:	6818      	ldr	r0, [r3, #0]
 800d0fa:	f000 b819 	b.w	800d130 <_free_r>
 800d0fe:	bf00      	nop
 800d100:	2000001c 	.word	0x2000001c

0800d104 <memcpy>:
 800d104:	440a      	add	r2, r1
 800d106:	4291      	cmp	r1, r2
 800d108:	f100 33ff 	add.w	r3, r0, #4294967295
 800d10c:	d100      	bne.n	800d110 <memcpy+0xc>
 800d10e:	4770      	bx	lr
 800d110:	b510      	push	{r4, lr}
 800d112:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d116:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d11a:	4291      	cmp	r1, r2
 800d11c:	d1f9      	bne.n	800d112 <memcpy+0xe>
 800d11e:	bd10      	pop	{r4, pc}

0800d120 <memset>:
 800d120:	4402      	add	r2, r0
 800d122:	4603      	mov	r3, r0
 800d124:	4293      	cmp	r3, r2
 800d126:	d100      	bne.n	800d12a <memset+0xa>
 800d128:	4770      	bx	lr
 800d12a:	f803 1b01 	strb.w	r1, [r3], #1
 800d12e:	e7f9      	b.n	800d124 <memset+0x4>

0800d130 <_free_r>:
 800d130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d132:	2900      	cmp	r1, #0
 800d134:	d044      	beq.n	800d1c0 <_free_r+0x90>
 800d136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d13a:	9001      	str	r0, [sp, #4]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	f1a1 0404 	sub.w	r4, r1, #4
 800d142:	bfb8      	it	lt
 800d144:	18e4      	addlt	r4, r4, r3
 800d146:	f001 fd1f 	bl	800eb88 <__malloc_lock>
 800d14a:	4a1e      	ldr	r2, [pc, #120]	; (800d1c4 <_free_r+0x94>)
 800d14c:	9801      	ldr	r0, [sp, #4]
 800d14e:	6813      	ldr	r3, [r2, #0]
 800d150:	b933      	cbnz	r3, 800d160 <_free_r+0x30>
 800d152:	6063      	str	r3, [r4, #4]
 800d154:	6014      	str	r4, [r2, #0]
 800d156:	b003      	add	sp, #12
 800d158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d15c:	f001 bd1a 	b.w	800eb94 <__malloc_unlock>
 800d160:	42a3      	cmp	r3, r4
 800d162:	d908      	bls.n	800d176 <_free_r+0x46>
 800d164:	6825      	ldr	r5, [r4, #0]
 800d166:	1961      	adds	r1, r4, r5
 800d168:	428b      	cmp	r3, r1
 800d16a:	bf01      	itttt	eq
 800d16c:	6819      	ldreq	r1, [r3, #0]
 800d16e:	685b      	ldreq	r3, [r3, #4]
 800d170:	1949      	addeq	r1, r1, r5
 800d172:	6021      	streq	r1, [r4, #0]
 800d174:	e7ed      	b.n	800d152 <_free_r+0x22>
 800d176:	461a      	mov	r2, r3
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	b10b      	cbz	r3, 800d180 <_free_r+0x50>
 800d17c:	42a3      	cmp	r3, r4
 800d17e:	d9fa      	bls.n	800d176 <_free_r+0x46>
 800d180:	6811      	ldr	r1, [r2, #0]
 800d182:	1855      	adds	r5, r2, r1
 800d184:	42a5      	cmp	r5, r4
 800d186:	d10b      	bne.n	800d1a0 <_free_r+0x70>
 800d188:	6824      	ldr	r4, [r4, #0]
 800d18a:	4421      	add	r1, r4
 800d18c:	1854      	adds	r4, r2, r1
 800d18e:	42a3      	cmp	r3, r4
 800d190:	6011      	str	r1, [r2, #0]
 800d192:	d1e0      	bne.n	800d156 <_free_r+0x26>
 800d194:	681c      	ldr	r4, [r3, #0]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	6053      	str	r3, [r2, #4]
 800d19a:	4421      	add	r1, r4
 800d19c:	6011      	str	r1, [r2, #0]
 800d19e:	e7da      	b.n	800d156 <_free_r+0x26>
 800d1a0:	d902      	bls.n	800d1a8 <_free_r+0x78>
 800d1a2:	230c      	movs	r3, #12
 800d1a4:	6003      	str	r3, [r0, #0]
 800d1a6:	e7d6      	b.n	800d156 <_free_r+0x26>
 800d1a8:	6825      	ldr	r5, [r4, #0]
 800d1aa:	1961      	adds	r1, r4, r5
 800d1ac:	428b      	cmp	r3, r1
 800d1ae:	bf04      	itt	eq
 800d1b0:	6819      	ldreq	r1, [r3, #0]
 800d1b2:	685b      	ldreq	r3, [r3, #4]
 800d1b4:	6063      	str	r3, [r4, #4]
 800d1b6:	bf04      	itt	eq
 800d1b8:	1949      	addeq	r1, r1, r5
 800d1ba:	6021      	streq	r1, [r4, #0]
 800d1bc:	6054      	str	r4, [r2, #4]
 800d1be:	e7ca      	b.n	800d156 <_free_r+0x26>
 800d1c0:	b003      	add	sp, #12
 800d1c2:	bd30      	pop	{r4, r5, pc}
 800d1c4:	200081f4 	.word	0x200081f4

0800d1c8 <sbrk_aligned>:
 800d1c8:	b570      	push	{r4, r5, r6, lr}
 800d1ca:	4e0e      	ldr	r6, [pc, #56]	; (800d204 <sbrk_aligned+0x3c>)
 800d1cc:	460c      	mov	r4, r1
 800d1ce:	6831      	ldr	r1, [r6, #0]
 800d1d0:	4605      	mov	r5, r0
 800d1d2:	b911      	cbnz	r1, 800d1da <sbrk_aligned+0x12>
 800d1d4:	f000 fcf6 	bl	800dbc4 <_sbrk_r>
 800d1d8:	6030      	str	r0, [r6, #0]
 800d1da:	4621      	mov	r1, r4
 800d1dc:	4628      	mov	r0, r5
 800d1de:	f000 fcf1 	bl	800dbc4 <_sbrk_r>
 800d1e2:	1c43      	adds	r3, r0, #1
 800d1e4:	d00a      	beq.n	800d1fc <sbrk_aligned+0x34>
 800d1e6:	1cc4      	adds	r4, r0, #3
 800d1e8:	f024 0403 	bic.w	r4, r4, #3
 800d1ec:	42a0      	cmp	r0, r4
 800d1ee:	d007      	beq.n	800d200 <sbrk_aligned+0x38>
 800d1f0:	1a21      	subs	r1, r4, r0
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	f000 fce6 	bl	800dbc4 <_sbrk_r>
 800d1f8:	3001      	adds	r0, #1
 800d1fa:	d101      	bne.n	800d200 <sbrk_aligned+0x38>
 800d1fc:	f04f 34ff 	mov.w	r4, #4294967295
 800d200:	4620      	mov	r0, r4
 800d202:	bd70      	pop	{r4, r5, r6, pc}
 800d204:	200081f8 	.word	0x200081f8

0800d208 <_malloc_r>:
 800d208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d20c:	1ccd      	adds	r5, r1, #3
 800d20e:	f025 0503 	bic.w	r5, r5, #3
 800d212:	3508      	adds	r5, #8
 800d214:	2d0c      	cmp	r5, #12
 800d216:	bf38      	it	cc
 800d218:	250c      	movcc	r5, #12
 800d21a:	2d00      	cmp	r5, #0
 800d21c:	4607      	mov	r7, r0
 800d21e:	db01      	blt.n	800d224 <_malloc_r+0x1c>
 800d220:	42a9      	cmp	r1, r5
 800d222:	d905      	bls.n	800d230 <_malloc_r+0x28>
 800d224:	230c      	movs	r3, #12
 800d226:	603b      	str	r3, [r7, #0]
 800d228:	2600      	movs	r6, #0
 800d22a:	4630      	mov	r0, r6
 800d22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d230:	4e2e      	ldr	r6, [pc, #184]	; (800d2ec <_malloc_r+0xe4>)
 800d232:	f001 fca9 	bl	800eb88 <__malloc_lock>
 800d236:	6833      	ldr	r3, [r6, #0]
 800d238:	461c      	mov	r4, r3
 800d23a:	bb34      	cbnz	r4, 800d28a <_malloc_r+0x82>
 800d23c:	4629      	mov	r1, r5
 800d23e:	4638      	mov	r0, r7
 800d240:	f7ff ffc2 	bl	800d1c8 <sbrk_aligned>
 800d244:	1c43      	adds	r3, r0, #1
 800d246:	4604      	mov	r4, r0
 800d248:	d14d      	bne.n	800d2e6 <_malloc_r+0xde>
 800d24a:	6834      	ldr	r4, [r6, #0]
 800d24c:	4626      	mov	r6, r4
 800d24e:	2e00      	cmp	r6, #0
 800d250:	d140      	bne.n	800d2d4 <_malloc_r+0xcc>
 800d252:	6823      	ldr	r3, [r4, #0]
 800d254:	4631      	mov	r1, r6
 800d256:	4638      	mov	r0, r7
 800d258:	eb04 0803 	add.w	r8, r4, r3
 800d25c:	f000 fcb2 	bl	800dbc4 <_sbrk_r>
 800d260:	4580      	cmp	r8, r0
 800d262:	d13a      	bne.n	800d2da <_malloc_r+0xd2>
 800d264:	6821      	ldr	r1, [r4, #0]
 800d266:	3503      	adds	r5, #3
 800d268:	1a6d      	subs	r5, r5, r1
 800d26a:	f025 0503 	bic.w	r5, r5, #3
 800d26e:	3508      	adds	r5, #8
 800d270:	2d0c      	cmp	r5, #12
 800d272:	bf38      	it	cc
 800d274:	250c      	movcc	r5, #12
 800d276:	4629      	mov	r1, r5
 800d278:	4638      	mov	r0, r7
 800d27a:	f7ff ffa5 	bl	800d1c8 <sbrk_aligned>
 800d27e:	3001      	adds	r0, #1
 800d280:	d02b      	beq.n	800d2da <_malloc_r+0xd2>
 800d282:	6823      	ldr	r3, [r4, #0]
 800d284:	442b      	add	r3, r5
 800d286:	6023      	str	r3, [r4, #0]
 800d288:	e00e      	b.n	800d2a8 <_malloc_r+0xa0>
 800d28a:	6822      	ldr	r2, [r4, #0]
 800d28c:	1b52      	subs	r2, r2, r5
 800d28e:	d41e      	bmi.n	800d2ce <_malloc_r+0xc6>
 800d290:	2a0b      	cmp	r2, #11
 800d292:	d916      	bls.n	800d2c2 <_malloc_r+0xba>
 800d294:	1961      	adds	r1, r4, r5
 800d296:	42a3      	cmp	r3, r4
 800d298:	6025      	str	r5, [r4, #0]
 800d29a:	bf18      	it	ne
 800d29c:	6059      	strne	r1, [r3, #4]
 800d29e:	6863      	ldr	r3, [r4, #4]
 800d2a0:	bf08      	it	eq
 800d2a2:	6031      	streq	r1, [r6, #0]
 800d2a4:	5162      	str	r2, [r4, r5]
 800d2a6:	604b      	str	r3, [r1, #4]
 800d2a8:	4638      	mov	r0, r7
 800d2aa:	f104 060b 	add.w	r6, r4, #11
 800d2ae:	f001 fc71 	bl	800eb94 <__malloc_unlock>
 800d2b2:	f026 0607 	bic.w	r6, r6, #7
 800d2b6:	1d23      	adds	r3, r4, #4
 800d2b8:	1af2      	subs	r2, r6, r3
 800d2ba:	d0b6      	beq.n	800d22a <_malloc_r+0x22>
 800d2bc:	1b9b      	subs	r3, r3, r6
 800d2be:	50a3      	str	r3, [r4, r2]
 800d2c0:	e7b3      	b.n	800d22a <_malloc_r+0x22>
 800d2c2:	6862      	ldr	r2, [r4, #4]
 800d2c4:	42a3      	cmp	r3, r4
 800d2c6:	bf0c      	ite	eq
 800d2c8:	6032      	streq	r2, [r6, #0]
 800d2ca:	605a      	strne	r2, [r3, #4]
 800d2cc:	e7ec      	b.n	800d2a8 <_malloc_r+0xa0>
 800d2ce:	4623      	mov	r3, r4
 800d2d0:	6864      	ldr	r4, [r4, #4]
 800d2d2:	e7b2      	b.n	800d23a <_malloc_r+0x32>
 800d2d4:	4634      	mov	r4, r6
 800d2d6:	6876      	ldr	r6, [r6, #4]
 800d2d8:	e7b9      	b.n	800d24e <_malloc_r+0x46>
 800d2da:	230c      	movs	r3, #12
 800d2dc:	603b      	str	r3, [r7, #0]
 800d2de:	4638      	mov	r0, r7
 800d2e0:	f001 fc58 	bl	800eb94 <__malloc_unlock>
 800d2e4:	e7a1      	b.n	800d22a <_malloc_r+0x22>
 800d2e6:	6025      	str	r5, [r4, #0]
 800d2e8:	e7de      	b.n	800d2a8 <_malloc_r+0xa0>
 800d2ea:	bf00      	nop
 800d2ec:	200081f4 	.word	0x200081f4

0800d2f0 <__cvt>:
 800d2f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f4:	ec55 4b10 	vmov	r4, r5, d0
 800d2f8:	2d00      	cmp	r5, #0
 800d2fa:	460e      	mov	r6, r1
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	462b      	mov	r3, r5
 800d300:	bfbb      	ittet	lt
 800d302:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d306:	461d      	movlt	r5, r3
 800d308:	2300      	movge	r3, #0
 800d30a:	232d      	movlt	r3, #45	; 0x2d
 800d30c:	700b      	strb	r3, [r1, #0]
 800d30e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d310:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d314:	4691      	mov	r9, r2
 800d316:	f023 0820 	bic.w	r8, r3, #32
 800d31a:	bfbc      	itt	lt
 800d31c:	4622      	movlt	r2, r4
 800d31e:	4614      	movlt	r4, r2
 800d320:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d324:	d005      	beq.n	800d332 <__cvt+0x42>
 800d326:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d32a:	d100      	bne.n	800d32e <__cvt+0x3e>
 800d32c:	3601      	adds	r6, #1
 800d32e:	2102      	movs	r1, #2
 800d330:	e000      	b.n	800d334 <__cvt+0x44>
 800d332:	2103      	movs	r1, #3
 800d334:	ab03      	add	r3, sp, #12
 800d336:	9301      	str	r3, [sp, #4]
 800d338:	ab02      	add	r3, sp, #8
 800d33a:	9300      	str	r3, [sp, #0]
 800d33c:	ec45 4b10 	vmov	d0, r4, r5
 800d340:	4653      	mov	r3, sl
 800d342:	4632      	mov	r2, r6
 800d344:	f000 fd34 	bl	800ddb0 <_dtoa_r>
 800d348:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d34c:	4607      	mov	r7, r0
 800d34e:	d102      	bne.n	800d356 <__cvt+0x66>
 800d350:	f019 0f01 	tst.w	r9, #1
 800d354:	d022      	beq.n	800d39c <__cvt+0xac>
 800d356:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d35a:	eb07 0906 	add.w	r9, r7, r6
 800d35e:	d110      	bne.n	800d382 <__cvt+0x92>
 800d360:	783b      	ldrb	r3, [r7, #0]
 800d362:	2b30      	cmp	r3, #48	; 0x30
 800d364:	d10a      	bne.n	800d37c <__cvt+0x8c>
 800d366:	2200      	movs	r2, #0
 800d368:	2300      	movs	r3, #0
 800d36a:	4620      	mov	r0, r4
 800d36c:	4629      	mov	r1, r5
 800d36e:	f7f3 fbbb 	bl	8000ae8 <__aeabi_dcmpeq>
 800d372:	b918      	cbnz	r0, 800d37c <__cvt+0x8c>
 800d374:	f1c6 0601 	rsb	r6, r6, #1
 800d378:	f8ca 6000 	str.w	r6, [sl]
 800d37c:	f8da 3000 	ldr.w	r3, [sl]
 800d380:	4499      	add	r9, r3
 800d382:	2200      	movs	r2, #0
 800d384:	2300      	movs	r3, #0
 800d386:	4620      	mov	r0, r4
 800d388:	4629      	mov	r1, r5
 800d38a:	f7f3 fbad 	bl	8000ae8 <__aeabi_dcmpeq>
 800d38e:	b108      	cbz	r0, 800d394 <__cvt+0xa4>
 800d390:	f8cd 900c 	str.w	r9, [sp, #12]
 800d394:	2230      	movs	r2, #48	; 0x30
 800d396:	9b03      	ldr	r3, [sp, #12]
 800d398:	454b      	cmp	r3, r9
 800d39a:	d307      	bcc.n	800d3ac <__cvt+0xbc>
 800d39c:	9b03      	ldr	r3, [sp, #12]
 800d39e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d3a0:	1bdb      	subs	r3, r3, r7
 800d3a2:	4638      	mov	r0, r7
 800d3a4:	6013      	str	r3, [r2, #0]
 800d3a6:	b004      	add	sp, #16
 800d3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3ac:	1c59      	adds	r1, r3, #1
 800d3ae:	9103      	str	r1, [sp, #12]
 800d3b0:	701a      	strb	r2, [r3, #0]
 800d3b2:	e7f0      	b.n	800d396 <__cvt+0xa6>

0800d3b4 <__exponent>:
 800d3b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2900      	cmp	r1, #0
 800d3ba:	bfb8      	it	lt
 800d3bc:	4249      	neglt	r1, r1
 800d3be:	f803 2b02 	strb.w	r2, [r3], #2
 800d3c2:	bfb4      	ite	lt
 800d3c4:	222d      	movlt	r2, #45	; 0x2d
 800d3c6:	222b      	movge	r2, #43	; 0x2b
 800d3c8:	2909      	cmp	r1, #9
 800d3ca:	7042      	strb	r2, [r0, #1]
 800d3cc:	dd2a      	ble.n	800d424 <__exponent+0x70>
 800d3ce:	f10d 0407 	add.w	r4, sp, #7
 800d3d2:	46a4      	mov	ip, r4
 800d3d4:	270a      	movs	r7, #10
 800d3d6:	46a6      	mov	lr, r4
 800d3d8:	460a      	mov	r2, r1
 800d3da:	fb91 f6f7 	sdiv	r6, r1, r7
 800d3de:	fb07 1516 	mls	r5, r7, r6, r1
 800d3e2:	3530      	adds	r5, #48	; 0x30
 800d3e4:	2a63      	cmp	r2, #99	; 0x63
 800d3e6:	f104 34ff 	add.w	r4, r4, #4294967295
 800d3ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d3ee:	4631      	mov	r1, r6
 800d3f0:	dcf1      	bgt.n	800d3d6 <__exponent+0x22>
 800d3f2:	3130      	adds	r1, #48	; 0x30
 800d3f4:	f1ae 0502 	sub.w	r5, lr, #2
 800d3f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d3fc:	1c44      	adds	r4, r0, #1
 800d3fe:	4629      	mov	r1, r5
 800d400:	4561      	cmp	r1, ip
 800d402:	d30a      	bcc.n	800d41a <__exponent+0x66>
 800d404:	f10d 0209 	add.w	r2, sp, #9
 800d408:	eba2 020e 	sub.w	r2, r2, lr
 800d40c:	4565      	cmp	r5, ip
 800d40e:	bf88      	it	hi
 800d410:	2200      	movhi	r2, #0
 800d412:	4413      	add	r3, r2
 800d414:	1a18      	subs	r0, r3, r0
 800d416:	b003      	add	sp, #12
 800d418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d41a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d41e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d422:	e7ed      	b.n	800d400 <__exponent+0x4c>
 800d424:	2330      	movs	r3, #48	; 0x30
 800d426:	3130      	adds	r1, #48	; 0x30
 800d428:	7083      	strb	r3, [r0, #2]
 800d42a:	70c1      	strb	r1, [r0, #3]
 800d42c:	1d03      	adds	r3, r0, #4
 800d42e:	e7f1      	b.n	800d414 <__exponent+0x60>

0800d430 <_printf_float>:
 800d430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d434:	ed2d 8b02 	vpush	{d8}
 800d438:	b08d      	sub	sp, #52	; 0x34
 800d43a:	460c      	mov	r4, r1
 800d43c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d440:	4616      	mov	r6, r2
 800d442:	461f      	mov	r7, r3
 800d444:	4605      	mov	r5, r0
 800d446:	f001 fb97 	bl	800eb78 <_localeconv_r>
 800d44a:	f8d0 a000 	ldr.w	sl, [r0]
 800d44e:	4650      	mov	r0, sl
 800d450:	f7f2 fece 	bl	80001f0 <strlen>
 800d454:	2300      	movs	r3, #0
 800d456:	930a      	str	r3, [sp, #40]	; 0x28
 800d458:	6823      	ldr	r3, [r4, #0]
 800d45a:	9305      	str	r3, [sp, #20]
 800d45c:	f8d8 3000 	ldr.w	r3, [r8]
 800d460:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d464:	3307      	adds	r3, #7
 800d466:	f023 0307 	bic.w	r3, r3, #7
 800d46a:	f103 0208 	add.w	r2, r3, #8
 800d46e:	f8c8 2000 	str.w	r2, [r8]
 800d472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d476:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d47a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d47e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d482:	9307      	str	r3, [sp, #28]
 800d484:	f8cd 8018 	str.w	r8, [sp, #24]
 800d488:	ee08 0a10 	vmov	s16, r0
 800d48c:	4b9f      	ldr	r3, [pc, #636]	; (800d70c <_printf_float+0x2dc>)
 800d48e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d492:	f04f 32ff 	mov.w	r2, #4294967295
 800d496:	f7f3 fb59 	bl	8000b4c <__aeabi_dcmpun>
 800d49a:	bb88      	cbnz	r0, 800d500 <_printf_float+0xd0>
 800d49c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d4a0:	4b9a      	ldr	r3, [pc, #616]	; (800d70c <_printf_float+0x2dc>)
 800d4a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a6:	f7f3 fb33 	bl	8000b10 <__aeabi_dcmple>
 800d4aa:	bb48      	cbnz	r0, 800d500 <_printf_float+0xd0>
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	4640      	mov	r0, r8
 800d4b2:	4649      	mov	r1, r9
 800d4b4:	f7f3 fb22 	bl	8000afc <__aeabi_dcmplt>
 800d4b8:	b110      	cbz	r0, 800d4c0 <_printf_float+0x90>
 800d4ba:	232d      	movs	r3, #45	; 0x2d
 800d4bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4c0:	4b93      	ldr	r3, [pc, #588]	; (800d710 <_printf_float+0x2e0>)
 800d4c2:	4894      	ldr	r0, [pc, #592]	; (800d714 <_printf_float+0x2e4>)
 800d4c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d4c8:	bf94      	ite	ls
 800d4ca:	4698      	movls	r8, r3
 800d4cc:	4680      	movhi	r8, r0
 800d4ce:	2303      	movs	r3, #3
 800d4d0:	6123      	str	r3, [r4, #16]
 800d4d2:	9b05      	ldr	r3, [sp, #20]
 800d4d4:	f023 0204 	bic.w	r2, r3, #4
 800d4d8:	6022      	str	r2, [r4, #0]
 800d4da:	f04f 0900 	mov.w	r9, #0
 800d4de:	9700      	str	r7, [sp, #0]
 800d4e0:	4633      	mov	r3, r6
 800d4e2:	aa0b      	add	r2, sp, #44	; 0x2c
 800d4e4:	4621      	mov	r1, r4
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	f000 f9d8 	bl	800d89c <_printf_common>
 800d4ec:	3001      	adds	r0, #1
 800d4ee:	f040 8090 	bne.w	800d612 <_printf_float+0x1e2>
 800d4f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f6:	b00d      	add	sp, #52	; 0x34
 800d4f8:	ecbd 8b02 	vpop	{d8}
 800d4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d500:	4642      	mov	r2, r8
 800d502:	464b      	mov	r3, r9
 800d504:	4640      	mov	r0, r8
 800d506:	4649      	mov	r1, r9
 800d508:	f7f3 fb20 	bl	8000b4c <__aeabi_dcmpun>
 800d50c:	b140      	cbz	r0, 800d520 <_printf_float+0xf0>
 800d50e:	464b      	mov	r3, r9
 800d510:	2b00      	cmp	r3, #0
 800d512:	bfbc      	itt	lt
 800d514:	232d      	movlt	r3, #45	; 0x2d
 800d516:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d51a:	487f      	ldr	r0, [pc, #508]	; (800d718 <_printf_float+0x2e8>)
 800d51c:	4b7f      	ldr	r3, [pc, #508]	; (800d71c <_printf_float+0x2ec>)
 800d51e:	e7d1      	b.n	800d4c4 <_printf_float+0x94>
 800d520:	6863      	ldr	r3, [r4, #4]
 800d522:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d526:	9206      	str	r2, [sp, #24]
 800d528:	1c5a      	adds	r2, r3, #1
 800d52a:	d13f      	bne.n	800d5ac <_printf_float+0x17c>
 800d52c:	2306      	movs	r3, #6
 800d52e:	6063      	str	r3, [r4, #4]
 800d530:	9b05      	ldr	r3, [sp, #20]
 800d532:	6861      	ldr	r1, [r4, #4]
 800d534:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d538:	2300      	movs	r3, #0
 800d53a:	9303      	str	r3, [sp, #12]
 800d53c:	ab0a      	add	r3, sp, #40	; 0x28
 800d53e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d542:	ab09      	add	r3, sp, #36	; 0x24
 800d544:	ec49 8b10 	vmov	d0, r8, r9
 800d548:	9300      	str	r3, [sp, #0]
 800d54a:	6022      	str	r2, [r4, #0]
 800d54c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d550:	4628      	mov	r0, r5
 800d552:	f7ff fecd 	bl	800d2f0 <__cvt>
 800d556:	9b06      	ldr	r3, [sp, #24]
 800d558:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d55a:	2b47      	cmp	r3, #71	; 0x47
 800d55c:	4680      	mov	r8, r0
 800d55e:	d108      	bne.n	800d572 <_printf_float+0x142>
 800d560:	1cc8      	adds	r0, r1, #3
 800d562:	db02      	blt.n	800d56a <_printf_float+0x13a>
 800d564:	6863      	ldr	r3, [r4, #4]
 800d566:	4299      	cmp	r1, r3
 800d568:	dd41      	ble.n	800d5ee <_printf_float+0x1be>
 800d56a:	f1ab 0b02 	sub.w	fp, fp, #2
 800d56e:	fa5f fb8b 	uxtb.w	fp, fp
 800d572:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d576:	d820      	bhi.n	800d5ba <_printf_float+0x18a>
 800d578:	3901      	subs	r1, #1
 800d57a:	465a      	mov	r2, fp
 800d57c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d580:	9109      	str	r1, [sp, #36]	; 0x24
 800d582:	f7ff ff17 	bl	800d3b4 <__exponent>
 800d586:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d588:	1813      	adds	r3, r2, r0
 800d58a:	2a01      	cmp	r2, #1
 800d58c:	4681      	mov	r9, r0
 800d58e:	6123      	str	r3, [r4, #16]
 800d590:	dc02      	bgt.n	800d598 <_printf_float+0x168>
 800d592:	6822      	ldr	r2, [r4, #0]
 800d594:	07d2      	lsls	r2, r2, #31
 800d596:	d501      	bpl.n	800d59c <_printf_float+0x16c>
 800d598:	3301      	adds	r3, #1
 800d59a:	6123      	str	r3, [r4, #16]
 800d59c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d09c      	beq.n	800d4de <_printf_float+0xae>
 800d5a4:	232d      	movs	r3, #45	; 0x2d
 800d5a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5aa:	e798      	b.n	800d4de <_printf_float+0xae>
 800d5ac:	9a06      	ldr	r2, [sp, #24]
 800d5ae:	2a47      	cmp	r2, #71	; 0x47
 800d5b0:	d1be      	bne.n	800d530 <_printf_float+0x100>
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d1bc      	bne.n	800d530 <_printf_float+0x100>
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	e7b9      	b.n	800d52e <_printf_float+0xfe>
 800d5ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d5be:	d118      	bne.n	800d5f2 <_printf_float+0x1c2>
 800d5c0:	2900      	cmp	r1, #0
 800d5c2:	6863      	ldr	r3, [r4, #4]
 800d5c4:	dd0b      	ble.n	800d5de <_printf_float+0x1ae>
 800d5c6:	6121      	str	r1, [r4, #16]
 800d5c8:	b913      	cbnz	r3, 800d5d0 <_printf_float+0x1a0>
 800d5ca:	6822      	ldr	r2, [r4, #0]
 800d5cc:	07d0      	lsls	r0, r2, #31
 800d5ce:	d502      	bpl.n	800d5d6 <_printf_float+0x1a6>
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	440b      	add	r3, r1
 800d5d4:	6123      	str	r3, [r4, #16]
 800d5d6:	65a1      	str	r1, [r4, #88]	; 0x58
 800d5d8:	f04f 0900 	mov.w	r9, #0
 800d5dc:	e7de      	b.n	800d59c <_printf_float+0x16c>
 800d5de:	b913      	cbnz	r3, 800d5e6 <_printf_float+0x1b6>
 800d5e0:	6822      	ldr	r2, [r4, #0]
 800d5e2:	07d2      	lsls	r2, r2, #31
 800d5e4:	d501      	bpl.n	800d5ea <_printf_float+0x1ba>
 800d5e6:	3302      	adds	r3, #2
 800d5e8:	e7f4      	b.n	800d5d4 <_printf_float+0x1a4>
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	e7f2      	b.n	800d5d4 <_printf_float+0x1a4>
 800d5ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d5f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5f4:	4299      	cmp	r1, r3
 800d5f6:	db05      	blt.n	800d604 <_printf_float+0x1d4>
 800d5f8:	6823      	ldr	r3, [r4, #0]
 800d5fa:	6121      	str	r1, [r4, #16]
 800d5fc:	07d8      	lsls	r0, r3, #31
 800d5fe:	d5ea      	bpl.n	800d5d6 <_printf_float+0x1a6>
 800d600:	1c4b      	adds	r3, r1, #1
 800d602:	e7e7      	b.n	800d5d4 <_printf_float+0x1a4>
 800d604:	2900      	cmp	r1, #0
 800d606:	bfd4      	ite	le
 800d608:	f1c1 0202 	rsble	r2, r1, #2
 800d60c:	2201      	movgt	r2, #1
 800d60e:	4413      	add	r3, r2
 800d610:	e7e0      	b.n	800d5d4 <_printf_float+0x1a4>
 800d612:	6823      	ldr	r3, [r4, #0]
 800d614:	055a      	lsls	r2, r3, #21
 800d616:	d407      	bmi.n	800d628 <_printf_float+0x1f8>
 800d618:	6923      	ldr	r3, [r4, #16]
 800d61a:	4642      	mov	r2, r8
 800d61c:	4631      	mov	r1, r6
 800d61e:	4628      	mov	r0, r5
 800d620:	47b8      	blx	r7
 800d622:	3001      	adds	r0, #1
 800d624:	d12c      	bne.n	800d680 <_printf_float+0x250>
 800d626:	e764      	b.n	800d4f2 <_printf_float+0xc2>
 800d628:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d62c:	f240 80e0 	bls.w	800d7f0 <_printf_float+0x3c0>
 800d630:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d634:	2200      	movs	r2, #0
 800d636:	2300      	movs	r3, #0
 800d638:	f7f3 fa56 	bl	8000ae8 <__aeabi_dcmpeq>
 800d63c:	2800      	cmp	r0, #0
 800d63e:	d034      	beq.n	800d6aa <_printf_float+0x27a>
 800d640:	4a37      	ldr	r2, [pc, #220]	; (800d720 <_printf_float+0x2f0>)
 800d642:	2301      	movs	r3, #1
 800d644:	4631      	mov	r1, r6
 800d646:	4628      	mov	r0, r5
 800d648:	47b8      	blx	r7
 800d64a:	3001      	adds	r0, #1
 800d64c:	f43f af51 	beq.w	800d4f2 <_printf_float+0xc2>
 800d650:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d654:	429a      	cmp	r2, r3
 800d656:	db02      	blt.n	800d65e <_printf_float+0x22e>
 800d658:	6823      	ldr	r3, [r4, #0]
 800d65a:	07d8      	lsls	r0, r3, #31
 800d65c:	d510      	bpl.n	800d680 <_printf_float+0x250>
 800d65e:	ee18 3a10 	vmov	r3, s16
 800d662:	4652      	mov	r2, sl
 800d664:	4631      	mov	r1, r6
 800d666:	4628      	mov	r0, r5
 800d668:	47b8      	blx	r7
 800d66a:	3001      	adds	r0, #1
 800d66c:	f43f af41 	beq.w	800d4f2 <_printf_float+0xc2>
 800d670:	f04f 0800 	mov.w	r8, #0
 800d674:	f104 091a 	add.w	r9, r4, #26
 800d678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d67a:	3b01      	subs	r3, #1
 800d67c:	4543      	cmp	r3, r8
 800d67e:	dc09      	bgt.n	800d694 <_printf_float+0x264>
 800d680:	6823      	ldr	r3, [r4, #0]
 800d682:	079b      	lsls	r3, r3, #30
 800d684:	f100 8105 	bmi.w	800d892 <_printf_float+0x462>
 800d688:	68e0      	ldr	r0, [r4, #12]
 800d68a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d68c:	4298      	cmp	r0, r3
 800d68e:	bfb8      	it	lt
 800d690:	4618      	movlt	r0, r3
 800d692:	e730      	b.n	800d4f6 <_printf_float+0xc6>
 800d694:	2301      	movs	r3, #1
 800d696:	464a      	mov	r2, r9
 800d698:	4631      	mov	r1, r6
 800d69a:	4628      	mov	r0, r5
 800d69c:	47b8      	blx	r7
 800d69e:	3001      	adds	r0, #1
 800d6a0:	f43f af27 	beq.w	800d4f2 <_printf_float+0xc2>
 800d6a4:	f108 0801 	add.w	r8, r8, #1
 800d6a8:	e7e6      	b.n	800d678 <_printf_float+0x248>
 800d6aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	dc39      	bgt.n	800d724 <_printf_float+0x2f4>
 800d6b0:	4a1b      	ldr	r2, [pc, #108]	; (800d720 <_printf_float+0x2f0>)
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	4631      	mov	r1, r6
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	47b8      	blx	r7
 800d6ba:	3001      	adds	r0, #1
 800d6bc:	f43f af19 	beq.w	800d4f2 <_printf_float+0xc2>
 800d6c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d6c4:	4313      	orrs	r3, r2
 800d6c6:	d102      	bne.n	800d6ce <_printf_float+0x29e>
 800d6c8:	6823      	ldr	r3, [r4, #0]
 800d6ca:	07d9      	lsls	r1, r3, #31
 800d6cc:	d5d8      	bpl.n	800d680 <_printf_float+0x250>
 800d6ce:	ee18 3a10 	vmov	r3, s16
 800d6d2:	4652      	mov	r2, sl
 800d6d4:	4631      	mov	r1, r6
 800d6d6:	4628      	mov	r0, r5
 800d6d8:	47b8      	blx	r7
 800d6da:	3001      	adds	r0, #1
 800d6dc:	f43f af09 	beq.w	800d4f2 <_printf_float+0xc2>
 800d6e0:	f04f 0900 	mov.w	r9, #0
 800d6e4:	f104 0a1a 	add.w	sl, r4, #26
 800d6e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6ea:	425b      	negs	r3, r3
 800d6ec:	454b      	cmp	r3, r9
 800d6ee:	dc01      	bgt.n	800d6f4 <_printf_float+0x2c4>
 800d6f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6f2:	e792      	b.n	800d61a <_printf_float+0x1ea>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	4652      	mov	r2, sl
 800d6f8:	4631      	mov	r1, r6
 800d6fa:	4628      	mov	r0, r5
 800d6fc:	47b8      	blx	r7
 800d6fe:	3001      	adds	r0, #1
 800d700:	f43f aef7 	beq.w	800d4f2 <_printf_float+0xc2>
 800d704:	f109 0901 	add.w	r9, r9, #1
 800d708:	e7ee      	b.n	800d6e8 <_printf_float+0x2b8>
 800d70a:	bf00      	nop
 800d70c:	7fefffff 	.word	0x7fefffff
 800d710:	08010464 	.word	0x08010464
 800d714:	08010468 	.word	0x08010468
 800d718:	08010470 	.word	0x08010470
 800d71c:	0801046c 	.word	0x0801046c
 800d720:	08010474 	.word	0x08010474
 800d724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d726:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d728:	429a      	cmp	r2, r3
 800d72a:	bfa8      	it	ge
 800d72c:	461a      	movge	r2, r3
 800d72e:	2a00      	cmp	r2, #0
 800d730:	4691      	mov	r9, r2
 800d732:	dc37      	bgt.n	800d7a4 <_printf_float+0x374>
 800d734:	f04f 0b00 	mov.w	fp, #0
 800d738:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d73c:	f104 021a 	add.w	r2, r4, #26
 800d740:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d742:	9305      	str	r3, [sp, #20]
 800d744:	eba3 0309 	sub.w	r3, r3, r9
 800d748:	455b      	cmp	r3, fp
 800d74a:	dc33      	bgt.n	800d7b4 <_printf_float+0x384>
 800d74c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d750:	429a      	cmp	r2, r3
 800d752:	db3b      	blt.n	800d7cc <_printf_float+0x39c>
 800d754:	6823      	ldr	r3, [r4, #0]
 800d756:	07da      	lsls	r2, r3, #31
 800d758:	d438      	bmi.n	800d7cc <_printf_float+0x39c>
 800d75a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d75c:	9a05      	ldr	r2, [sp, #20]
 800d75e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d760:	1a9a      	subs	r2, r3, r2
 800d762:	eba3 0901 	sub.w	r9, r3, r1
 800d766:	4591      	cmp	r9, r2
 800d768:	bfa8      	it	ge
 800d76a:	4691      	movge	r9, r2
 800d76c:	f1b9 0f00 	cmp.w	r9, #0
 800d770:	dc35      	bgt.n	800d7de <_printf_float+0x3ae>
 800d772:	f04f 0800 	mov.w	r8, #0
 800d776:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d77a:	f104 0a1a 	add.w	sl, r4, #26
 800d77e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d782:	1a9b      	subs	r3, r3, r2
 800d784:	eba3 0309 	sub.w	r3, r3, r9
 800d788:	4543      	cmp	r3, r8
 800d78a:	f77f af79 	ble.w	800d680 <_printf_float+0x250>
 800d78e:	2301      	movs	r3, #1
 800d790:	4652      	mov	r2, sl
 800d792:	4631      	mov	r1, r6
 800d794:	4628      	mov	r0, r5
 800d796:	47b8      	blx	r7
 800d798:	3001      	adds	r0, #1
 800d79a:	f43f aeaa 	beq.w	800d4f2 <_printf_float+0xc2>
 800d79e:	f108 0801 	add.w	r8, r8, #1
 800d7a2:	e7ec      	b.n	800d77e <_printf_float+0x34e>
 800d7a4:	4613      	mov	r3, r2
 800d7a6:	4631      	mov	r1, r6
 800d7a8:	4642      	mov	r2, r8
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	47b8      	blx	r7
 800d7ae:	3001      	adds	r0, #1
 800d7b0:	d1c0      	bne.n	800d734 <_printf_float+0x304>
 800d7b2:	e69e      	b.n	800d4f2 <_printf_float+0xc2>
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	4631      	mov	r1, r6
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	9205      	str	r2, [sp, #20]
 800d7bc:	47b8      	blx	r7
 800d7be:	3001      	adds	r0, #1
 800d7c0:	f43f ae97 	beq.w	800d4f2 <_printf_float+0xc2>
 800d7c4:	9a05      	ldr	r2, [sp, #20]
 800d7c6:	f10b 0b01 	add.w	fp, fp, #1
 800d7ca:	e7b9      	b.n	800d740 <_printf_float+0x310>
 800d7cc:	ee18 3a10 	vmov	r3, s16
 800d7d0:	4652      	mov	r2, sl
 800d7d2:	4631      	mov	r1, r6
 800d7d4:	4628      	mov	r0, r5
 800d7d6:	47b8      	blx	r7
 800d7d8:	3001      	adds	r0, #1
 800d7da:	d1be      	bne.n	800d75a <_printf_float+0x32a>
 800d7dc:	e689      	b.n	800d4f2 <_printf_float+0xc2>
 800d7de:	9a05      	ldr	r2, [sp, #20]
 800d7e0:	464b      	mov	r3, r9
 800d7e2:	4442      	add	r2, r8
 800d7e4:	4631      	mov	r1, r6
 800d7e6:	4628      	mov	r0, r5
 800d7e8:	47b8      	blx	r7
 800d7ea:	3001      	adds	r0, #1
 800d7ec:	d1c1      	bne.n	800d772 <_printf_float+0x342>
 800d7ee:	e680      	b.n	800d4f2 <_printf_float+0xc2>
 800d7f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7f2:	2a01      	cmp	r2, #1
 800d7f4:	dc01      	bgt.n	800d7fa <_printf_float+0x3ca>
 800d7f6:	07db      	lsls	r3, r3, #31
 800d7f8:	d538      	bpl.n	800d86c <_printf_float+0x43c>
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	4642      	mov	r2, r8
 800d7fe:	4631      	mov	r1, r6
 800d800:	4628      	mov	r0, r5
 800d802:	47b8      	blx	r7
 800d804:	3001      	adds	r0, #1
 800d806:	f43f ae74 	beq.w	800d4f2 <_printf_float+0xc2>
 800d80a:	ee18 3a10 	vmov	r3, s16
 800d80e:	4652      	mov	r2, sl
 800d810:	4631      	mov	r1, r6
 800d812:	4628      	mov	r0, r5
 800d814:	47b8      	blx	r7
 800d816:	3001      	adds	r0, #1
 800d818:	f43f ae6b 	beq.w	800d4f2 <_printf_float+0xc2>
 800d81c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d820:	2200      	movs	r2, #0
 800d822:	2300      	movs	r3, #0
 800d824:	f7f3 f960 	bl	8000ae8 <__aeabi_dcmpeq>
 800d828:	b9d8      	cbnz	r0, 800d862 <_printf_float+0x432>
 800d82a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d82c:	f108 0201 	add.w	r2, r8, #1
 800d830:	3b01      	subs	r3, #1
 800d832:	4631      	mov	r1, r6
 800d834:	4628      	mov	r0, r5
 800d836:	47b8      	blx	r7
 800d838:	3001      	adds	r0, #1
 800d83a:	d10e      	bne.n	800d85a <_printf_float+0x42a>
 800d83c:	e659      	b.n	800d4f2 <_printf_float+0xc2>
 800d83e:	2301      	movs	r3, #1
 800d840:	4652      	mov	r2, sl
 800d842:	4631      	mov	r1, r6
 800d844:	4628      	mov	r0, r5
 800d846:	47b8      	blx	r7
 800d848:	3001      	adds	r0, #1
 800d84a:	f43f ae52 	beq.w	800d4f2 <_printf_float+0xc2>
 800d84e:	f108 0801 	add.w	r8, r8, #1
 800d852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d854:	3b01      	subs	r3, #1
 800d856:	4543      	cmp	r3, r8
 800d858:	dcf1      	bgt.n	800d83e <_printf_float+0x40e>
 800d85a:	464b      	mov	r3, r9
 800d85c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d860:	e6dc      	b.n	800d61c <_printf_float+0x1ec>
 800d862:	f04f 0800 	mov.w	r8, #0
 800d866:	f104 0a1a 	add.w	sl, r4, #26
 800d86a:	e7f2      	b.n	800d852 <_printf_float+0x422>
 800d86c:	2301      	movs	r3, #1
 800d86e:	4642      	mov	r2, r8
 800d870:	e7df      	b.n	800d832 <_printf_float+0x402>
 800d872:	2301      	movs	r3, #1
 800d874:	464a      	mov	r2, r9
 800d876:	4631      	mov	r1, r6
 800d878:	4628      	mov	r0, r5
 800d87a:	47b8      	blx	r7
 800d87c:	3001      	adds	r0, #1
 800d87e:	f43f ae38 	beq.w	800d4f2 <_printf_float+0xc2>
 800d882:	f108 0801 	add.w	r8, r8, #1
 800d886:	68e3      	ldr	r3, [r4, #12]
 800d888:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d88a:	1a5b      	subs	r3, r3, r1
 800d88c:	4543      	cmp	r3, r8
 800d88e:	dcf0      	bgt.n	800d872 <_printf_float+0x442>
 800d890:	e6fa      	b.n	800d688 <_printf_float+0x258>
 800d892:	f04f 0800 	mov.w	r8, #0
 800d896:	f104 0919 	add.w	r9, r4, #25
 800d89a:	e7f4      	b.n	800d886 <_printf_float+0x456>

0800d89c <_printf_common>:
 800d89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8a0:	4616      	mov	r6, r2
 800d8a2:	4699      	mov	r9, r3
 800d8a4:	688a      	ldr	r2, [r1, #8]
 800d8a6:	690b      	ldr	r3, [r1, #16]
 800d8a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	bfb8      	it	lt
 800d8b0:	4613      	movlt	r3, r2
 800d8b2:	6033      	str	r3, [r6, #0]
 800d8b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d8b8:	4607      	mov	r7, r0
 800d8ba:	460c      	mov	r4, r1
 800d8bc:	b10a      	cbz	r2, 800d8c2 <_printf_common+0x26>
 800d8be:	3301      	adds	r3, #1
 800d8c0:	6033      	str	r3, [r6, #0]
 800d8c2:	6823      	ldr	r3, [r4, #0]
 800d8c4:	0699      	lsls	r1, r3, #26
 800d8c6:	bf42      	ittt	mi
 800d8c8:	6833      	ldrmi	r3, [r6, #0]
 800d8ca:	3302      	addmi	r3, #2
 800d8cc:	6033      	strmi	r3, [r6, #0]
 800d8ce:	6825      	ldr	r5, [r4, #0]
 800d8d0:	f015 0506 	ands.w	r5, r5, #6
 800d8d4:	d106      	bne.n	800d8e4 <_printf_common+0x48>
 800d8d6:	f104 0a19 	add.w	sl, r4, #25
 800d8da:	68e3      	ldr	r3, [r4, #12]
 800d8dc:	6832      	ldr	r2, [r6, #0]
 800d8de:	1a9b      	subs	r3, r3, r2
 800d8e0:	42ab      	cmp	r3, r5
 800d8e2:	dc26      	bgt.n	800d932 <_printf_common+0x96>
 800d8e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d8e8:	1e13      	subs	r3, r2, #0
 800d8ea:	6822      	ldr	r2, [r4, #0]
 800d8ec:	bf18      	it	ne
 800d8ee:	2301      	movne	r3, #1
 800d8f0:	0692      	lsls	r2, r2, #26
 800d8f2:	d42b      	bmi.n	800d94c <_printf_common+0xb0>
 800d8f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d8f8:	4649      	mov	r1, r9
 800d8fa:	4638      	mov	r0, r7
 800d8fc:	47c0      	blx	r8
 800d8fe:	3001      	adds	r0, #1
 800d900:	d01e      	beq.n	800d940 <_printf_common+0xa4>
 800d902:	6823      	ldr	r3, [r4, #0]
 800d904:	68e5      	ldr	r5, [r4, #12]
 800d906:	6832      	ldr	r2, [r6, #0]
 800d908:	f003 0306 	and.w	r3, r3, #6
 800d90c:	2b04      	cmp	r3, #4
 800d90e:	bf08      	it	eq
 800d910:	1aad      	subeq	r5, r5, r2
 800d912:	68a3      	ldr	r3, [r4, #8]
 800d914:	6922      	ldr	r2, [r4, #16]
 800d916:	bf0c      	ite	eq
 800d918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d91c:	2500      	movne	r5, #0
 800d91e:	4293      	cmp	r3, r2
 800d920:	bfc4      	itt	gt
 800d922:	1a9b      	subgt	r3, r3, r2
 800d924:	18ed      	addgt	r5, r5, r3
 800d926:	2600      	movs	r6, #0
 800d928:	341a      	adds	r4, #26
 800d92a:	42b5      	cmp	r5, r6
 800d92c:	d11a      	bne.n	800d964 <_printf_common+0xc8>
 800d92e:	2000      	movs	r0, #0
 800d930:	e008      	b.n	800d944 <_printf_common+0xa8>
 800d932:	2301      	movs	r3, #1
 800d934:	4652      	mov	r2, sl
 800d936:	4649      	mov	r1, r9
 800d938:	4638      	mov	r0, r7
 800d93a:	47c0      	blx	r8
 800d93c:	3001      	adds	r0, #1
 800d93e:	d103      	bne.n	800d948 <_printf_common+0xac>
 800d940:	f04f 30ff 	mov.w	r0, #4294967295
 800d944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d948:	3501      	adds	r5, #1
 800d94a:	e7c6      	b.n	800d8da <_printf_common+0x3e>
 800d94c:	18e1      	adds	r1, r4, r3
 800d94e:	1c5a      	adds	r2, r3, #1
 800d950:	2030      	movs	r0, #48	; 0x30
 800d952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d956:	4422      	add	r2, r4
 800d958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d95c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d960:	3302      	adds	r3, #2
 800d962:	e7c7      	b.n	800d8f4 <_printf_common+0x58>
 800d964:	2301      	movs	r3, #1
 800d966:	4622      	mov	r2, r4
 800d968:	4649      	mov	r1, r9
 800d96a:	4638      	mov	r0, r7
 800d96c:	47c0      	blx	r8
 800d96e:	3001      	adds	r0, #1
 800d970:	d0e6      	beq.n	800d940 <_printf_common+0xa4>
 800d972:	3601      	adds	r6, #1
 800d974:	e7d9      	b.n	800d92a <_printf_common+0x8e>
	...

0800d978 <_printf_i>:
 800d978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d97c:	7e0f      	ldrb	r7, [r1, #24]
 800d97e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d980:	2f78      	cmp	r7, #120	; 0x78
 800d982:	4691      	mov	r9, r2
 800d984:	4680      	mov	r8, r0
 800d986:	460c      	mov	r4, r1
 800d988:	469a      	mov	sl, r3
 800d98a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d98e:	d807      	bhi.n	800d9a0 <_printf_i+0x28>
 800d990:	2f62      	cmp	r7, #98	; 0x62
 800d992:	d80a      	bhi.n	800d9aa <_printf_i+0x32>
 800d994:	2f00      	cmp	r7, #0
 800d996:	f000 80d8 	beq.w	800db4a <_printf_i+0x1d2>
 800d99a:	2f58      	cmp	r7, #88	; 0x58
 800d99c:	f000 80a3 	beq.w	800dae6 <_printf_i+0x16e>
 800d9a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d9a8:	e03a      	b.n	800da20 <_printf_i+0xa8>
 800d9aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d9ae:	2b15      	cmp	r3, #21
 800d9b0:	d8f6      	bhi.n	800d9a0 <_printf_i+0x28>
 800d9b2:	a101      	add	r1, pc, #4	; (adr r1, 800d9b8 <_printf_i+0x40>)
 800d9b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9b8:	0800da11 	.word	0x0800da11
 800d9bc:	0800da25 	.word	0x0800da25
 800d9c0:	0800d9a1 	.word	0x0800d9a1
 800d9c4:	0800d9a1 	.word	0x0800d9a1
 800d9c8:	0800d9a1 	.word	0x0800d9a1
 800d9cc:	0800d9a1 	.word	0x0800d9a1
 800d9d0:	0800da25 	.word	0x0800da25
 800d9d4:	0800d9a1 	.word	0x0800d9a1
 800d9d8:	0800d9a1 	.word	0x0800d9a1
 800d9dc:	0800d9a1 	.word	0x0800d9a1
 800d9e0:	0800d9a1 	.word	0x0800d9a1
 800d9e4:	0800db31 	.word	0x0800db31
 800d9e8:	0800da55 	.word	0x0800da55
 800d9ec:	0800db13 	.word	0x0800db13
 800d9f0:	0800d9a1 	.word	0x0800d9a1
 800d9f4:	0800d9a1 	.word	0x0800d9a1
 800d9f8:	0800db53 	.word	0x0800db53
 800d9fc:	0800d9a1 	.word	0x0800d9a1
 800da00:	0800da55 	.word	0x0800da55
 800da04:	0800d9a1 	.word	0x0800d9a1
 800da08:	0800d9a1 	.word	0x0800d9a1
 800da0c:	0800db1b 	.word	0x0800db1b
 800da10:	682b      	ldr	r3, [r5, #0]
 800da12:	1d1a      	adds	r2, r3, #4
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	602a      	str	r2, [r5, #0]
 800da18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da20:	2301      	movs	r3, #1
 800da22:	e0a3      	b.n	800db6c <_printf_i+0x1f4>
 800da24:	6820      	ldr	r0, [r4, #0]
 800da26:	6829      	ldr	r1, [r5, #0]
 800da28:	0606      	lsls	r6, r0, #24
 800da2a:	f101 0304 	add.w	r3, r1, #4
 800da2e:	d50a      	bpl.n	800da46 <_printf_i+0xce>
 800da30:	680e      	ldr	r6, [r1, #0]
 800da32:	602b      	str	r3, [r5, #0]
 800da34:	2e00      	cmp	r6, #0
 800da36:	da03      	bge.n	800da40 <_printf_i+0xc8>
 800da38:	232d      	movs	r3, #45	; 0x2d
 800da3a:	4276      	negs	r6, r6
 800da3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da40:	485e      	ldr	r0, [pc, #376]	; (800dbbc <_printf_i+0x244>)
 800da42:	230a      	movs	r3, #10
 800da44:	e019      	b.n	800da7a <_printf_i+0x102>
 800da46:	680e      	ldr	r6, [r1, #0]
 800da48:	602b      	str	r3, [r5, #0]
 800da4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800da4e:	bf18      	it	ne
 800da50:	b236      	sxthne	r6, r6
 800da52:	e7ef      	b.n	800da34 <_printf_i+0xbc>
 800da54:	682b      	ldr	r3, [r5, #0]
 800da56:	6820      	ldr	r0, [r4, #0]
 800da58:	1d19      	adds	r1, r3, #4
 800da5a:	6029      	str	r1, [r5, #0]
 800da5c:	0601      	lsls	r1, r0, #24
 800da5e:	d501      	bpl.n	800da64 <_printf_i+0xec>
 800da60:	681e      	ldr	r6, [r3, #0]
 800da62:	e002      	b.n	800da6a <_printf_i+0xf2>
 800da64:	0646      	lsls	r6, r0, #25
 800da66:	d5fb      	bpl.n	800da60 <_printf_i+0xe8>
 800da68:	881e      	ldrh	r6, [r3, #0]
 800da6a:	4854      	ldr	r0, [pc, #336]	; (800dbbc <_printf_i+0x244>)
 800da6c:	2f6f      	cmp	r7, #111	; 0x6f
 800da6e:	bf0c      	ite	eq
 800da70:	2308      	moveq	r3, #8
 800da72:	230a      	movne	r3, #10
 800da74:	2100      	movs	r1, #0
 800da76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da7a:	6865      	ldr	r5, [r4, #4]
 800da7c:	60a5      	str	r5, [r4, #8]
 800da7e:	2d00      	cmp	r5, #0
 800da80:	bfa2      	ittt	ge
 800da82:	6821      	ldrge	r1, [r4, #0]
 800da84:	f021 0104 	bicge.w	r1, r1, #4
 800da88:	6021      	strge	r1, [r4, #0]
 800da8a:	b90e      	cbnz	r6, 800da90 <_printf_i+0x118>
 800da8c:	2d00      	cmp	r5, #0
 800da8e:	d04d      	beq.n	800db2c <_printf_i+0x1b4>
 800da90:	4615      	mov	r5, r2
 800da92:	fbb6 f1f3 	udiv	r1, r6, r3
 800da96:	fb03 6711 	mls	r7, r3, r1, r6
 800da9a:	5dc7      	ldrb	r7, [r0, r7]
 800da9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800daa0:	4637      	mov	r7, r6
 800daa2:	42bb      	cmp	r3, r7
 800daa4:	460e      	mov	r6, r1
 800daa6:	d9f4      	bls.n	800da92 <_printf_i+0x11a>
 800daa8:	2b08      	cmp	r3, #8
 800daaa:	d10b      	bne.n	800dac4 <_printf_i+0x14c>
 800daac:	6823      	ldr	r3, [r4, #0]
 800daae:	07de      	lsls	r6, r3, #31
 800dab0:	d508      	bpl.n	800dac4 <_printf_i+0x14c>
 800dab2:	6923      	ldr	r3, [r4, #16]
 800dab4:	6861      	ldr	r1, [r4, #4]
 800dab6:	4299      	cmp	r1, r3
 800dab8:	bfde      	ittt	le
 800daba:	2330      	movle	r3, #48	; 0x30
 800dabc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dac0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dac4:	1b52      	subs	r2, r2, r5
 800dac6:	6122      	str	r2, [r4, #16]
 800dac8:	f8cd a000 	str.w	sl, [sp]
 800dacc:	464b      	mov	r3, r9
 800dace:	aa03      	add	r2, sp, #12
 800dad0:	4621      	mov	r1, r4
 800dad2:	4640      	mov	r0, r8
 800dad4:	f7ff fee2 	bl	800d89c <_printf_common>
 800dad8:	3001      	adds	r0, #1
 800dada:	d14c      	bne.n	800db76 <_printf_i+0x1fe>
 800dadc:	f04f 30ff 	mov.w	r0, #4294967295
 800dae0:	b004      	add	sp, #16
 800dae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dae6:	4835      	ldr	r0, [pc, #212]	; (800dbbc <_printf_i+0x244>)
 800dae8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800daec:	6829      	ldr	r1, [r5, #0]
 800daee:	6823      	ldr	r3, [r4, #0]
 800daf0:	f851 6b04 	ldr.w	r6, [r1], #4
 800daf4:	6029      	str	r1, [r5, #0]
 800daf6:	061d      	lsls	r5, r3, #24
 800daf8:	d514      	bpl.n	800db24 <_printf_i+0x1ac>
 800dafa:	07df      	lsls	r7, r3, #31
 800dafc:	bf44      	itt	mi
 800dafe:	f043 0320 	orrmi.w	r3, r3, #32
 800db02:	6023      	strmi	r3, [r4, #0]
 800db04:	b91e      	cbnz	r6, 800db0e <_printf_i+0x196>
 800db06:	6823      	ldr	r3, [r4, #0]
 800db08:	f023 0320 	bic.w	r3, r3, #32
 800db0c:	6023      	str	r3, [r4, #0]
 800db0e:	2310      	movs	r3, #16
 800db10:	e7b0      	b.n	800da74 <_printf_i+0xfc>
 800db12:	6823      	ldr	r3, [r4, #0]
 800db14:	f043 0320 	orr.w	r3, r3, #32
 800db18:	6023      	str	r3, [r4, #0]
 800db1a:	2378      	movs	r3, #120	; 0x78
 800db1c:	4828      	ldr	r0, [pc, #160]	; (800dbc0 <_printf_i+0x248>)
 800db1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800db22:	e7e3      	b.n	800daec <_printf_i+0x174>
 800db24:	0659      	lsls	r1, r3, #25
 800db26:	bf48      	it	mi
 800db28:	b2b6      	uxthmi	r6, r6
 800db2a:	e7e6      	b.n	800dafa <_printf_i+0x182>
 800db2c:	4615      	mov	r5, r2
 800db2e:	e7bb      	b.n	800daa8 <_printf_i+0x130>
 800db30:	682b      	ldr	r3, [r5, #0]
 800db32:	6826      	ldr	r6, [r4, #0]
 800db34:	6961      	ldr	r1, [r4, #20]
 800db36:	1d18      	adds	r0, r3, #4
 800db38:	6028      	str	r0, [r5, #0]
 800db3a:	0635      	lsls	r5, r6, #24
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	d501      	bpl.n	800db44 <_printf_i+0x1cc>
 800db40:	6019      	str	r1, [r3, #0]
 800db42:	e002      	b.n	800db4a <_printf_i+0x1d2>
 800db44:	0670      	lsls	r0, r6, #25
 800db46:	d5fb      	bpl.n	800db40 <_printf_i+0x1c8>
 800db48:	8019      	strh	r1, [r3, #0]
 800db4a:	2300      	movs	r3, #0
 800db4c:	6123      	str	r3, [r4, #16]
 800db4e:	4615      	mov	r5, r2
 800db50:	e7ba      	b.n	800dac8 <_printf_i+0x150>
 800db52:	682b      	ldr	r3, [r5, #0]
 800db54:	1d1a      	adds	r2, r3, #4
 800db56:	602a      	str	r2, [r5, #0]
 800db58:	681d      	ldr	r5, [r3, #0]
 800db5a:	6862      	ldr	r2, [r4, #4]
 800db5c:	2100      	movs	r1, #0
 800db5e:	4628      	mov	r0, r5
 800db60:	f7f2 fb4e 	bl	8000200 <memchr>
 800db64:	b108      	cbz	r0, 800db6a <_printf_i+0x1f2>
 800db66:	1b40      	subs	r0, r0, r5
 800db68:	6060      	str	r0, [r4, #4]
 800db6a:	6863      	ldr	r3, [r4, #4]
 800db6c:	6123      	str	r3, [r4, #16]
 800db6e:	2300      	movs	r3, #0
 800db70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db74:	e7a8      	b.n	800dac8 <_printf_i+0x150>
 800db76:	6923      	ldr	r3, [r4, #16]
 800db78:	462a      	mov	r2, r5
 800db7a:	4649      	mov	r1, r9
 800db7c:	4640      	mov	r0, r8
 800db7e:	47d0      	blx	sl
 800db80:	3001      	adds	r0, #1
 800db82:	d0ab      	beq.n	800dadc <_printf_i+0x164>
 800db84:	6823      	ldr	r3, [r4, #0]
 800db86:	079b      	lsls	r3, r3, #30
 800db88:	d413      	bmi.n	800dbb2 <_printf_i+0x23a>
 800db8a:	68e0      	ldr	r0, [r4, #12]
 800db8c:	9b03      	ldr	r3, [sp, #12]
 800db8e:	4298      	cmp	r0, r3
 800db90:	bfb8      	it	lt
 800db92:	4618      	movlt	r0, r3
 800db94:	e7a4      	b.n	800dae0 <_printf_i+0x168>
 800db96:	2301      	movs	r3, #1
 800db98:	4632      	mov	r2, r6
 800db9a:	4649      	mov	r1, r9
 800db9c:	4640      	mov	r0, r8
 800db9e:	47d0      	blx	sl
 800dba0:	3001      	adds	r0, #1
 800dba2:	d09b      	beq.n	800dadc <_printf_i+0x164>
 800dba4:	3501      	adds	r5, #1
 800dba6:	68e3      	ldr	r3, [r4, #12]
 800dba8:	9903      	ldr	r1, [sp, #12]
 800dbaa:	1a5b      	subs	r3, r3, r1
 800dbac:	42ab      	cmp	r3, r5
 800dbae:	dcf2      	bgt.n	800db96 <_printf_i+0x21e>
 800dbb0:	e7eb      	b.n	800db8a <_printf_i+0x212>
 800dbb2:	2500      	movs	r5, #0
 800dbb4:	f104 0619 	add.w	r6, r4, #25
 800dbb8:	e7f5      	b.n	800dba6 <_printf_i+0x22e>
 800dbba:	bf00      	nop
 800dbbc:	08010476 	.word	0x08010476
 800dbc0:	08010487 	.word	0x08010487

0800dbc4 <_sbrk_r>:
 800dbc4:	b538      	push	{r3, r4, r5, lr}
 800dbc6:	4d06      	ldr	r5, [pc, #24]	; (800dbe0 <_sbrk_r+0x1c>)
 800dbc8:	2300      	movs	r3, #0
 800dbca:	4604      	mov	r4, r0
 800dbcc:	4608      	mov	r0, r1
 800dbce:	602b      	str	r3, [r5, #0]
 800dbd0:	f002 f9ee 	bl	800ffb0 <_sbrk>
 800dbd4:	1c43      	adds	r3, r0, #1
 800dbd6:	d102      	bne.n	800dbde <_sbrk_r+0x1a>
 800dbd8:	682b      	ldr	r3, [r5, #0]
 800dbda:	b103      	cbz	r3, 800dbde <_sbrk_r+0x1a>
 800dbdc:	6023      	str	r3, [r4, #0]
 800dbde:	bd38      	pop	{r3, r4, r5, pc}
 800dbe0:	20008200 	.word	0x20008200

0800dbe4 <siprintf>:
 800dbe4:	b40e      	push	{r1, r2, r3}
 800dbe6:	b500      	push	{lr}
 800dbe8:	b09c      	sub	sp, #112	; 0x70
 800dbea:	ab1d      	add	r3, sp, #116	; 0x74
 800dbec:	9002      	str	r0, [sp, #8]
 800dbee:	9006      	str	r0, [sp, #24]
 800dbf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dbf4:	4809      	ldr	r0, [pc, #36]	; (800dc1c <siprintf+0x38>)
 800dbf6:	9107      	str	r1, [sp, #28]
 800dbf8:	9104      	str	r1, [sp, #16]
 800dbfa:	4909      	ldr	r1, [pc, #36]	; (800dc20 <siprintf+0x3c>)
 800dbfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc00:	9105      	str	r1, [sp, #20]
 800dc02:	6800      	ldr	r0, [r0, #0]
 800dc04:	9301      	str	r3, [sp, #4]
 800dc06:	a902      	add	r1, sp, #8
 800dc08:	f001 fbc0 	bl	800f38c <_svfiprintf_r>
 800dc0c:	9b02      	ldr	r3, [sp, #8]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	701a      	strb	r2, [r3, #0]
 800dc12:	b01c      	add	sp, #112	; 0x70
 800dc14:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc18:	b003      	add	sp, #12
 800dc1a:	4770      	bx	lr
 800dc1c:	2000001c 	.word	0x2000001c
 800dc20:	ffff0208 	.word	0xffff0208

0800dc24 <_vsniprintf_r>:
 800dc24:	b530      	push	{r4, r5, lr}
 800dc26:	4614      	mov	r4, r2
 800dc28:	2c00      	cmp	r4, #0
 800dc2a:	b09b      	sub	sp, #108	; 0x6c
 800dc2c:	4605      	mov	r5, r0
 800dc2e:	461a      	mov	r2, r3
 800dc30:	da05      	bge.n	800dc3e <_vsniprintf_r+0x1a>
 800dc32:	238b      	movs	r3, #139	; 0x8b
 800dc34:	6003      	str	r3, [r0, #0]
 800dc36:	f04f 30ff 	mov.w	r0, #4294967295
 800dc3a:	b01b      	add	sp, #108	; 0x6c
 800dc3c:	bd30      	pop	{r4, r5, pc}
 800dc3e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dc42:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dc46:	bf14      	ite	ne
 800dc48:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dc4c:	4623      	moveq	r3, r4
 800dc4e:	9302      	str	r3, [sp, #8]
 800dc50:	9305      	str	r3, [sp, #20]
 800dc52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc56:	9100      	str	r1, [sp, #0]
 800dc58:	9104      	str	r1, [sp, #16]
 800dc5a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800dc5e:	4669      	mov	r1, sp
 800dc60:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dc62:	f001 fb93 	bl	800f38c <_svfiprintf_r>
 800dc66:	1c43      	adds	r3, r0, #1
 800dc68:	bfbc      	itt	lt
 800dc6a:	238b      	movlt	r3, #139	; 0x8b
 800dc6c:	602b      	strlt	r3, [r5, #0]
 800dc6e:	2c00      	cmp	r4, #0
 800dc70:	d0e3      	beq.n	800dc3a <_vsniprintf_r+0x16>
 800dc72:	9b00      	ldr	r3, [sp, #0]
 800dc74:	2200      	movs	r2, #0
 800dc76:	701a      	strb	r2, [r3, #0]
 800dc78:	e7df      	b.n	800dc3a <_vsniprintf_r+0x16>
	...

0800dc7c <vsniprintf>:
 800dc7c:	b507      	push	{r0, r1, r2, lr}
 800dc7e:	9300      	str	r3, [sp, #0]
 800dc80:	4613      	mov	r3, r2
 800dc82:	460a      	mov	r2, r1
 800dc84:	4601      	mov	r1, r0
 800dc86:	4803      	ldr	r0, [pc, #12]	; (800dc94 <vsniprintf+0x18>)
 800dc88:	6800      	ldr	r0, [r0, #0]
 800dc8a:	f7ff ffcb 	bl	800dc24 <_vsniprintf_r>
 800dc8e:	b003      	add	sp, #12
 800dc90:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc94:	2000001c 	.word	0x2000001c

0800dc98 <quorem>:
 800dc98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc9c:	6903      	ldr	r3, [r0, #16]
 800dc9e:	690c      	ldr	r4, [r1, #16]
 800dca0:	42a3      	cmp	r3, r4
 800dca2:	4607      	mov	r7, r0
 800dca4:	f2c0 8081 	blt.w	800ddaa <quorem+0x112>
 800dca8:	3c01      	subs	r4, #1
 800dcaa:	f101 0814 	add.w	r8, r1, #20
 800dcae:	f100 0514 	add.w	r5, r0, #20
 800dcb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dcb6:	9301      	str	r3, [sp, #4]
 800dcb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dcbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dcc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dccc:	fbb2 f6f3 	udiv	r6, r2, r3
 800dcd0:	d331      	bcc.n	800dd36 <quorem+0x9e>
 800dcd2:	f04f 0e00 	mov.w	lr, #0
 800dcd6:	4640      	mov	r0, r8
 800dcd8:	46ac      	mov	ip, r5
 800dcda:	46f2      	mov	sl, lr
 800dcdc:	f850 2b04 	ldr.w	r2, [r0], #4
 800dce0:	b293      	uxth	r3, r2
 800dce2:	fb06 e303 	mla	r3, r6, r3, lr
 800dce6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	ebaa 0303 	sub.w	r3, sl, r3
 800dcf0:	f8dc a000 	ldr.w	sl, [ip]
 800dcf4:	0c12      	lsrs	r2, r2, #16
 800dcf6:	fa13 f38a 	uxtah	r3, r3, sl
 800dcfa:	fb06 e202 	mla	r2, r6, r2, lr
 800dcfe:	9300      	str	r3, [sp, #0]
 800dd00:	9b00      	ldr	r3, [sp, #0]
 800dd02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dd06:	b292      	uxth	r2, r2
 800dd08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dd0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd10:	f8bd 3000 	ldrh.w	r3, [sp]
 800dd14:	4581      	cmp	r9, r0
 800dd16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd1a:	f84c 3b04 	str.w	r3, [ip], #4
 800dd1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dd22:	d2db      	bcs.n	800dcdc <quorem+0x44>
 800dd24:	f855 300b 	ldr.w	r3, [r5, fp]
 800dd28:	b92b      	cbnz	r3, 800dd36 <quorem+0x9e>
 800dd2a:	9b01      	ldr	r3, [sp, #4]
 800dd2c:	3b04      	subs	r3, #4
 800dd2e:	429d      	cmp	r5, r3
 800dd30:	461a      	mov	r2, r3
 800dd32:	d32e      	bcc.n	800dd92 <quorem+0xfa>
 800dd34:	613c      	str	r4, [r7, #16]
 800dd36:	4638      	mov	r0, r7
 800dd38:	f001 f9b4 	bl	800f0a4 <__mcmp>
 800dd3c:	2800      	cmp	r0, #0
 800dd3e:	db24      	blt.n	800dd8a <quorem+0xf2>
 800dd40:	3601      	adds	r6, #1
 800dd42:	4628      	mov	r0, r5
 800dd44:	f04f 0c00 	mov.w	ip, #0
 800dd48:	f858 2b04 	ldr.w	r2, [r8], #4
 800dd4c:	f8d0 e000 	ldr.w	lr, [r0]
 800dd50:	b293      	uxth	r3, r2
 800dd52:	ebac 0303 	sub.w	r3, ip, r3
 800dd56:	0c12      	lsrs	r2, r2, #16
 800dd58:	fa13 f38e 	uxtah	r3, r3, lr
 800dd5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dd60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd6a:	45c1      	cmp	r9, r8
 800dd6c:	f840 3b04 	str.w	r3, [r0], #4
 800dd70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dd74:	d2e8      	bcs.n	800dd48 <quorem+0xb0>
 800dd76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd7e:	b922      	cbnz	r2, 800dd8a <quorem+0xf2>
 800dd80:	3b04      	subs	r3, #4
 800dd82:	429d      	cmp	r5, r3
 800dd84:	461a      	mov	r2, r3
 800dd86:	d30a      	bcc.n	800dd9e <quorem+0x106>
 800dd88:	613c      	str	r4, [r7, #16]
 800dd8a:	4630      	mov	r0, r6
 800dd8c:	b003      	add	sp, #12
 800dd8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd92:	6812      	ldr	r2, [r2, #0]
 800dd94:	3b04      	subs	r3, #4
 800dd96:	2a00      	cmp	r2, #0
 800dd98:	d1cc      	bne.n	800dd34 <quorem+0x9c>
 800dd9a:	3c01      	subs	r4, #1
 800dd9c:	e7c7      	b.n	800dd2e <quorem+0x96>
 800dd9e:	6812      	ldr	r2, [r2, #0]
 800dda0:	3b04      	subs	r3, #4
 800dda2:	2a00      	cmp	r2, #0
 800dda4:	d1f0      	bne.n	800dd88 <quorem+0xf0>
 800dda6:	3c01      	subs	r4, #1
 800dda8:	e7eb      	b.n	800dd82 <quorem+0xea>
 800ddaa:	2000      	movs	r0, #0
 800ddac:	e7ee      	b.n	800dd8c <quorem+0xf4>
	...

0800ddb0 <_dtoa_r>:
 800ddb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddb4:	ed2d 8b04 	vpush	{d8-d9}
 800ddb8:	ec57 6b10 	vmov	r6, r7, d0
 800ddbc:	b093      	sub	sp, #76	; 0x4c
 800ddbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ddc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ddc4:	9106      	str	r1, [sp, #24]
 800ddc6:	ee10 aa10 	vmov	sl, s0
 800ddca:	4604      	mov	r4, r0
 800ddcc:	9209      	str	r2, [sp, #36]	; 0x24
 800ddce:	930c      	str	r3, [sp, #48]	; 0x30
 800ddd0:	46bb      	mov	fp, r7
 800ddd2:	b975      	cbnz	r5, 800ddf2 <_dtoa_r+0x42>
 800ddd4:	2010      	movs	r0, #16
 800ddd6:	f7ff f985 	bl	800d0e4 <malloc>
 800ddda:	4602      	mov	r2, r0
 800dddc:	6260      	str	r0, [r4, #36]	; 0x24
 800ddde:	b920      	cbnz	r0, 800ddea <_dtoa_r+0x3a>
 800dde0:	4ba7      	ldr	r3, [pc, #668]	; (800e080 <_dtoa_r+0x2d0>)
 800dde2:	21ea      	movs	r1, #234	; 0xea
 800dde4:	48a7      	ldr	r0, [pc, #668]	; (800e084 <_dtoa_r+0x2d4>)
 800dde6:	f001 fe41 	bl	800fa6c <__assert_func>
 800ddea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ddee:	6005      	str	r5, [r0, #0]
 800ddf0:	60c5      	str	r5, [r0, #12]
 800ddf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddf4:	6819      	ldr	r1, [r3, #0]
 800ddf6:	b151      	cbz	r1, 800de0e <_dtoa_r+0x5e>
 800ddf8:	685a      	ldr	r2, [r3, #4]
 800ddfa:	604a      	str	r2, [r1, #4]
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	4093      	lsls	r3, r2
 800de00:	608b      	str	r3, [r1, #8]
 800de02:	4620      	mov	r0, r4
 800de04:	f000 ff0c 	bl	800ec20 <_Bfree>
 800de08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de0a:	2200      	movs	r2, #0
 800de0c:	601a      	str	r2, [r3, #0]
 800de0e:	1e3b      	subs	r3, r7, #0
 800de10:	bfaa      	itet	ge
 800de12:	2300      	movge	r3, #0
 800de14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800de18:	f8c8 3000 	strge.w	r3, [r8]
 800de1c:	4b9a      	ldr	r3, [pc, #616]	; (800e088 <_dtoa_r+0x2d8>)
 800de1e:	bfbc      	itt	lt
 800de20:	2201      	movlt	r2, #1
 800de22:	f8c8 2000 	strlt.w	r2, [r8]
 800de26:	ea33 030b 	bics.w	r3, r3, fp
 800de2a:	d11b      	bne.n	800de64 <_dtoa_r+0xb4>
 800de2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de2e:	f242 730f 	movw	r3, #9999	; 0x270f
 800de32:	6013      	str	r3, [r2, #0]
 800de34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de38:	4333      	orrs	r3, r6
 800de3a:	f000 8592 	beq.w	800e962 <_dtoa_r+0xbb2>
 800de3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de40:	b963      	cbnz	r3, 800de5c <_dtoa_r+0xac>
 800de42:	4b92      	ldr	r3, [pc, #584]	; (800e08c <_dtoa_r+0x2dc>)
 800de44:	e022      	b.n	800de8c <_dtoa_r+0xdc>
 800de46:	4b92      	ldr	r3, [pc, #584]	; (800e090 <_dtoa_r+0x2e0>)
 800de48:	9301      	str	r3, [sp, #4]
 800de4a:	3308      	adds	r3, #8
 800de4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800de4e:	6013      	str	r3, [r2, #0]
 800de50:	9801      	ldr	r0, [sp, #4]
 800de52:	b013      	add	sp, #76	; 0x4c
 800de54:	ecbd 8b04 	vpop	{d8-d9}
 800de58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de5c:	4b8b      	ldr	r3, [pc, #556]	; (800e08c <_dtoa_r+0x2dc>)
 800de5e:	9301      	str	r3, [sp, #4]
 800de60:	3303      	adds	r3, #3
 800de62:	e7f3      	b.n	800de4c <_dtoa_r+0x9c>
 800de64:	2200      	movs	r2, #0
 800de66:	2300      	movs	r3, #0
 800de68:	4650      	mov	r0, sl
 800de6a:	4659      	mov	r1, fp
 800de6c:	f7f2 fe3c 	bl	8000ae8 <__aeabi_dcmpeq>
 800de70:	ec4b ab19 	vmov	d9, sl, fp
 800de74:	4680      	mov	r8, r0
 800de76:	b158      	cbz	r0, 800de90 <_dtoa_r+0xe0>
 800de78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de7a:	2301      	movs	r3, #1
 800de7c:	6013      	str	r3, [r2, #0]
 800de7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de80:	2b00      	cmp	r3, #0
 800de82:	f000 856b 	beq.w	800e95c <_dtoa_r+0xbac>
 800de86:	4883      	ldr	r0, [pc, #524]	; (800e094 <_dtoa_r+0x2e4>)
 800de88:	6018      	str	r0, [r3, #0]
 800de8a:	1e43      	subs	r3, r0, #1
 800de8c:	9301      	str	r3, [sp, #4]
 800de8e:	e7df      	b.n	800de50 <_dtoa_r+0xa0>
 800de90:	ec4b ab10 	vmov	d0, sl, fp
 800de94:	aa10      	add	r2, sp, #64	; 0x40
 800de96:	a911      	add	r1, sp, #68	; 0x44
 800de98:	4620      	mov	r0, r4
 800de9a:	f001 f9a9 	bl	800f1f0 <__d2b>
 800de9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800dea2:	ee08 0a10 	vmov	s16, r0
 800dea6:	2d00      	cmp	r5, #0
 800dea8:	f000 8084 	beq.w	800dfb4 <_dtoa_r+0x204>
 800deac:	ee19 3a90 	vmov	r3, s19
 800deb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800deb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800deb8:	4656      	mov	r6, sl
 800deba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800debe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dec2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800dec6:	4b74      	ldr	r3, [pc, #464]	; (800e098 <_dtoa_r+0x2e8>)
 800dec8:	2200      	movs	r2, #0
 800deca:	4630      	mov	r0, r6
 800decc:	4639      	mov	r1, r7
 800dece:	f7f2 f9eb 	bl	80002a8 <__aeabi_dsub>
 800ded2:	a365      	add	r3, pc, #404	; (adr r3, 800e068 <_dtoa_r+0x2b8>)
 800ded4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded8:	f7f2 fb9e 	bl	8000618 <__aeabi_dmul>
 800dedc:	a364      	add	r3, pc, #400	; (adr r3, 800e070 <_dtoa_r+0x2c0>)
 800dede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee2:	f7f2 f9e3 	bl	80002ac <__adddf3>
 800dee6:	4606      	mov	r6, r0
 800dee8:	4628      	mov	r0, r5
 800deea:	460f      	mov	r7, r1
 800deec:	f7f2 fb2a 	bl	8000544 <__aeabi_i2d>
 800def0:	a361      	add	r3, pc, #388	; (adr r3, 800e078 <_dtoa_r+0x2c8>)
 800def2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def6:	f7f2 fb8f 	bl	8000618 <__aeabi_dmul>
 800defa:	4602      	mov	r2, r0
 800defc:	460b      	mov	r3, r1
 800defe:	4630      	mov	r0, r6
 800df00:	4639      	mov	r1, r7
 800df02:	f7f2 f9d3 	bl	80002ac <__adddf3>
 800df06:	4606      	mov	r6, r0
 800df08:	460f      	mov	r7, r1
 800df0a:	f7f2 fe35 	bl	8000b78 <__aeabi_d2iz>
 800df0e:	2200      	movs	r2, #0
 800df10:	9000      	str	r0, [sp, #0]
 800df12:	2300      	movs	r3, #0
 800df14:	4630      	mov	r0, r6
 800df16:	4639      	mov	r1, r7
 800df18:	f7f2 fdf0 	bl	8000afc <__aeabi_dcmplt>
 800df1c:	b150      	cbz	r0, 800df34 <_dtoa_r+0x184>
 800df1e:	9800      	ldr	r0, [sp, #0]
 800df20:	f7f2 fb10 	bl	8000544 <__aeabi_i2d>
 800df24:	4632      	mov	r2, r6
 800df26:	463b      	mov	r3, r7
 800df28:	f7f2 fdde 	bl	8000ae8 <__aeabi_dcmpeq>
 800df2c:	b910      	cbnz	r0, 800df34 <_dtoa_r+0x184>
 800df2e:	9b00      	ldr	r3, [sp, #0]
 800df30:	3b01      	subs	r3, #1
 800df32:	9300      	str	r3, [sp, #0]
 800df34:	9b00      	ldr	r3, [sp, #0]
 800df36:	2b16      	cmp	r3, #22
 800df38:	d85a      	bhi.n	800dff0 <_dtoa_r+0x240>
 800df3a:	9a00      	ldr	r2, [sp, #0]
 800df3c:	4b57      	ldr	r3, [pc, #348]	; (800e09c <_dtoa_r+0x2ec>)
 800df3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df46:	ec51 0b19 	vmov	r0, r1, d9
 800df4a:	f7f2 fdd7 	bl	8000afc <__aeabi_dcmplt>
 800df4e:	2800      	cmp	r0, #0
 800df50:	d050      	beq.n	800dff4 <_dtoa_r+0x244>
 800df52:	9b00      	ldr	r3, [sp, #0]
 800df54:	3b01      	subs	r3, #1
 800df56:	9300      	str	r3, [sp, #0]
 800df58:	2300      	movs	r3, #0
 800df5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800df5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df5e:	1b5d      	subs	r5, r3, r5
 800df60:	1e6b      	subs	r3, r5, #1
 800df62:	9305      	str	r3, [sp, #20]
 800df64:	bf45      	ittet	mi
 800df66:	f1c5 0301 	rsbmi	r3, r5, #1
 800df6a:	9304      	strmi	r3, [sp, #16]
 800df6c:	2300      	movpl	r3, #0
 800df6e:	2300      	movmi	r3, #0
 800df70:	bf4c      	ite	mi
 800df72:	9305      	strmi	r3, [sp, #20]
 800df74:	9304      	strpl	r3, [sp, #16]
 800df76:	9b00      	ldr	r3, [sp, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	db3d      	blt.n	800dff8 <_dtoa_r+0x248>
 800df7c:	9b05      	ldr	r3, [sp, #20]
 800df7e:	9a00      	ldr	r2, [sp, #0]
 800df80:	920a      	str	r2, [sp, #40]	; 0x28
 800df82:	4413      	add	r3, r2
 800df84:	9305      	str	r3, [sp, #20]
 800df86:	2300      	movs	r3, #0
 800df88:	9307      	str	r3, [sp, #28]
 800df8a:	9b06      	ldr	r3, [sp, #24]
 800df8c:	2b09      	cmp	r3, #9
 800df8e:	f200 8089 	bhi.w	800e0a4 <_dtoa_r+0x2f4>
 800df92:	2b05      	cmp	r3, #5
 800df94:	bfc4      	itt	gt
 800df96:	3b04      	subgt	r3, #4
 800df98:	9306      	strgt	r3, [sp, #24]
 800df9a:	9b06      	ldr	r3, [sp, #24]
 800df9c:	f1a3 0302 	sub.w	r3, r3, #2
 800dfa0:	bfcc      	ite	gt
 800dfa2:	2500      	movgt	r5, #0
 800dfa4:	2501      	movle	r5, #1
 800dfa6:	2b03      	cmp	r3, #3
 800dfa8:	f200 8087 	bhi.w	800e0ba <_dtoa_r+0x30a>
 800dfac:	e8df f003 	tbb	[pc, r3]
 800dfb0:	59383a2d 	.word	0x59383a2d
 800dfb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dfb8:	441d      	add	r5, r3
 800dfba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dfbe:	2b20      	cmp	r3, #32
 800dfc0:	bfc1      	itttt	gt
 800dfc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dfc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dfca:	fa0b f303 	lslgt.w	r3, fp, r3
 800dfce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dfd2:	bfda      	itte	le
 800dfd4:	f1c3 0320 	rsble	r3, r3, #32
 800dfd8:	fa06 f003 	lslle.w	r0, r6, r3
 800dfdc:	4318      	orrgt	r0, r3
 800dfde:	f7f2 faa1 	bl	8000524 <__aeabi_ui2d>
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	4606      	mov	r6, r0
 800dfe6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dfea:	3d01      	subs	r5, #1
 800dfec:	930e      	str	r3, [sp, #56]	; 0x38
 800dfee:	e76a      	b.n	800dec6 <_dtoa_r+0x116>
 800dff0:	2301      	movs	r3, #1
 800dff2:	e7b2      	b.n	800df5a <_dtoa_r+0x1aa>
 800dff4:	900b      	str	r0, [sp, #44]	; 0x2c
 800dff6:	e7b1      	b.n	800df5c <_dtoa_r+0x1ac>
 800dff8:	9b04      	ldr	r3, [sp, #16]
 800dffa:	9a00      	ldr	r2, [sp, #0]
 800dffc:	1a9b      	subs	r3, r3, r2
 800dffe:	9304      	str	r3, [sp, #16]
 800e000:	4253      	negs	r3, r2
 800e002:	9307      	str	r3, [sp, #28]
 800e004:	2300      	movs	r3, #0
 800e006:	930a      	str	r3, [sp, #40]	; 0x28
 800e008:	e7bf      	b.n	800df8a <_dtoa_r+0x1da>
 800e00a:	2300      	movs	r3, #0
 800e00c:	9308      	str	r3, [sp, #32]
 800e00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e010:	2b00      	cmp	r3, #0
 800e012:	dc55      	bgt.n	800e0c0 <_dtoa_r+0x310>
 800e014:	2301      	movs	r3, #1
 800e016:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e01a:	461a      	mov	r2, r3
 800e01c:	9209      	str	r2, [sp, #36]	; 0x24
 800e01e:	e00c      	b.n	800e03a <_dtoa_r+0x28a>
 800e020:	2301      	movs	r3, #1
 800e022:	e7f3      	b.n	800e00c <_dtoa_r+0x25c>
 800e024:	2300      	movs	r3, #0
 800e026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e028:	9308      	str	r3, [sp, #32]
 800e02a:	9b00      	ldr	r3, [sp, #0]
 800e02c:	4413      	add	r3, r2
 800e02e:	9302      	str	r3, [sp, #8]
 800e030:	3301      	adds	r3, #1
 800e032:	2b01      	cmp	r3, #1
 800e034:	9303      	str	r3, [sp, #12]
 800e036:	bfb8      	it	lt
 800e038:	2301      	movlt	r3, #1
 800e03a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e03c:	2200      	movs	r2, #0
 800e03e:	6042      	str	r2, [r0, #4]
 800e040:	2204      	movs	r2, #4
 800e042:	f102 0614 	add.w	r6, r2, #20
 800e046:	429e      	cmp	r6, r3
 800e048:	6841      	ldr	r1, [r0, #4]
 800e04a:	d93d      	bls.n	800e0c8 <_dtoa_r+0x318>
 800e04c:	4620      	mov	r0, r4
 800e04e:	f000 fda7 	bl	800eba0 <_Balloc>
 800e052:	9001      	str	r0, [sp, #4]
 800e054:	2800      	cmp	r0, #0
 800e056:	d13b      	bne.n	800e0d0 <_dtoa_r+0x320>
 800e058:	4b11      	ldr	r3, [pc, #68]	; (800e0a0 <_dtoa_r+0x2f0>)
 800e05a:	4602      	mov	r2, r0
 800e05c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e060:	e6c0      	b.n	800dde4 <_dtoa_r+0x34>
 800e062:	2301      	movs	r3, #1
 800e064:	e7df      	b.n	800e026 <_dtoa_r+0x276>
 800e066:	bf00      	nop
 800e068:	636f4361 	.word	0x636f4361
 800e06c:	3fd287a7 	.word	0x3fd287a7
 800e070:	8b60c8b3 	.word	0x8b60c8b3
 800e074:	3fc68a28 	.word	0x3fc68a28
 800e078:	509f79fb 	.word	0x509f79fb
 800e07c:	3fd34413 	.word	0x3fd34413
 800e080:	080104a5 	.word	0x080104a5
 800e084:	080104bc 	.word	0x080104bc
 800e088:	7ff00000 	.word	0x7ff00000
 800e08c:	080104a1 	.word	0x080104a1
 800e090:	08010498 	.word	0x08010498
 800e094:	08010475 	.word	0x08010475
 800e098:	3ff80000 	.word	0x3ff80000
 800e09c:	08010610 	.word	0x08010610
 800e0a0:	08010517 	.word	0x08010517
 800e0a4:	2501      	movs	r5, #1
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	9306      	str	r3, [sp, #24]
 800e0aa:	9508      	str	r5, [sp, #32]
 800e0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e0b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	2312      	movs	r3, #18
 800e0b8:	e7b0      	b.n	800e01c <_dtoa_r+0x26c>
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	9308      	str	r3, [sp, #32]
 800e0be:	e7f5      	b.n	800e0ac <_dtoa_r+0x2fc>
 800e0c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e0c6:	e7b8      	b.n	800e03a <_dtoa_r+0x28a>
 800e0c8:	3101      	adds	r1, #1
 800e0ca:	6041      	str	r1, [r0, #4]
 800e0cc:	0052      	lsls	r2, r2, #1
 800e0ce:	e7b8      	b.n	800e042 <_dtoa_r+0x292>
 800e0d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0d2:	9a01      	ldr	r2, [sp, #4]
 800e0d4:	601a      	str	r2, [r3, #0]
 800e0d6:	9b03      	ldr	r3, [sp, #12]
 800e0d8:	2b0e      	cmp	r3, #14
 800e0da:	f200 809d 	bhi.w	800e218 <_dtoa_r+0x468>
 800e0de:	2d00      	cmp	r5, #0
 800e0e0:	f000 809a 	beq.w	800e218 <_dtoa_r+0x468>
 800e0e4:	9b00      	ldr	r3, [sp, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	dd32      	ble.n	800e150 <_dtoa_r+0x3a0>
 800e0ea:	4ab7      	ldr	r2, [pc, #732]	; (800e3c8 <_dtoa_r+0x618>)
 800e0ec:	f003 030f 	and.w	r3, r3, #15
 800e0f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e0f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e0f8:	9b00      	ldr	r3, [sp, #0]
 800e0fa:	05d8      	lsls	r0, r3, #23
 800e0fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e100:	d516      	bpl.n	800e130 <_dtoa_r+0x380>
 800e102:	4bb2      	ldr	r3, [pc, #712]	; (800e3cc <_dtoa_r+0x61c>)
 800e104:	ec51 0b19 	vmov	r0, r1, d9
 800e108:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e10c:	f7f2 fbae 	bl	800086c <__aeabi_ddiv>
 800e110:	f007 070f 	and.w	r7, r7, #15
 800e114:	4682      	mov	sl, r0
 800e116:	468b      	mov	fp, r1
 800e118:	2503      	movs	r5, #3
 800e11a:	4eac      	ldr	r6, [pc, #688]	; (800e3cc <_dtoa_r+0x61c>)
 800e11c:	b957      	cbnz	r7, 800e134 <_dtoa_r+0x384>
 800e11e:	4642      	mov	r2, r8
 800e120:	464b      	mov	r3, r9
 800e122:	4650      	mov	r0, sl
 800e124:	4659      	mov	r1, fp
 800e126:	f7f2 fba1 	bl	800086c <__aeabi_ddiv>
 800e12a:	4682      	mov	sl, r0
 800e12c:	468b      	mov	fp, r1
 800e12e:	e028      	b.n	800e182 <_dtoa_r+0x3d2>
 800e130:	2502      	movs	r5, #2
 800e132:	e7f2      	b.n	800e11a <_dtoa_r+0x36a>
 800e134:	07f9      	lsls	r1, r7, #31
 800e136:	d508      	bpl.n	800e14a <_dtoa_r+0x39a>
 800e138:	4640      	mov	r0, r8
 800e13a:	4649      	mov	r1, r9
 800e13c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e140:	f7f2 fa6a 	bl	8000618 <__aeabi_dmul>
 800e144:	3501      	adds	r5, #1
 800e146:	4680      	mov	r8, r0
 800e148:	4689      	mov	r9, r1
 800e14a:	107f      	asrs	r7, r7, #1
 800e14c:	3608      	adds	r6, #8
 800e14e:	e7e5      	b.n	800e11c <_dtoa_r+0x36c>
 800e150:	f000 809b 	beq.w	800e28a <_dtoa_r+0x4da>
 800e154:	9b00      	ldr	r3, [sp, #0]
 800e156:	4f9d      	ldr	r7, [pc, #628]	; (800e3cc <_dtoa_r+0x61c>)
 800e158:	425e      	negs	r6, r3
 800e15a:	4b9b      	ldr	r3, [pc, #620]	; (800e3c8 <_dtoa_r+0x618>)
 800e15c:	f006 020f 	and.w	r2, r6, #15
 800e160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e168:	ec51 0b19 	vmov	r0, r1, d9
 800e16c:	f7f2 fa54 	bl	8000618 <__aeabi_dmul>
 800e170:	1136      	asrs	r6, r6, #4
 800e172:	4682      	mov	sl, r0
 800e174:	468b      	mov	fp, r1
 800e176:	2300      	movs	r3, #0
 800e178:	2502      	movs	r5, #2
 800e17a:	2e00      	cmp	r6, #0
 800e17c:	d17a      	bne.n	800e274 <_dtoa_r+0x4c4>
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d1d3      	bne.n	800e12a <_dtoa_r+0x37a>
 800e182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e184:	2b00      	cmp	r3, #0
 800e186:	f000 8082 	beq.w	800e28e <_dtoa_r+0x4de>
 800e18a:	4b91      	ldr	r3, [pc, #580]	; (800e3d0 <_dtoa_r+0x620>)
 800e18c:	2200      	movs	r2, #0
 800e18e:	4650      	mov	r0, sl
 800e190:	4659      	mov	r1, fp
 800e192:	f7f2 fcb3 	bl	8000afc <__aeabi_dcmplt>
 800e196:	2800      	cmp	r0, #0
 800e198:	d079      	beq.n	800e28e <_dtoa_r+0x4de>
 800e19a:	9b03      	ldr	r3, [sp, #12]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d076      	beq.n	800e28e <_dtoa_r+0x4de>
 800e1a0:	9b02      	ldr	r3, [sp, #8]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	dd36      	ble.n	800e214 <_dtoa_r+0x464>
 800e1a6:	9b00      	ldr	r3, [sp, #0]
 800e1a8:	4650      	mov	r0, sl
 800e1aa:	4659      	mov	r1, fp
 800e1ac:	1e5f      	subs	r7, r3, #1
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	4b88      	ldr	r3, [pc, #544]	; (800e3d4 <_dtoa_r+0x624>)
 800e1b2:	f7f2 fa31 	bl	8000618 <__aeabi_dmul>
 800e1b6:	9e02      	ldr	r6, [sp, #8]
 800e1b8:	4682      	mov	sl, r0
 800e1ba:	468b      	mov	fp, r1
 800e1bc:	3501      	adds	r5, #1
 800e1be:	4628      	mov	r0, r5
 800e1c0:	f7f2 f9c0 	bl	8000544 <__aeabi_i2d>
 800e1c4:	4652      	mov	r2, sl
 800e1c6:	465b      	mov	r3, fp
 800e1c8:	f7f2 fa26 	bl	8000618 <__aeabi_dmul>
 800e1cc:	4b82      	ldr	r3, [pc, #520]	; (800e3d8 <_dtoa_r+0x628>)
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f7f2 f86c 	bl	80002ac <__adddf3>
 800e1d4:	46d0      	mov	r8, sl
 800e1d6:	46d9      	mov	r9, fp
 800e1d8:	4682      	mov	sl, r0
 800e1da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e1de:	2e00      	cmp	r6, #0
 800e1e0:	d158      	bne.n	800e294 <_dtoa_r+0x4e4>
 800e1e2:	4b7e      	ldr	r3, [pc, #504]	; (800e3dc <_dtoa_r+0x62c>)
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	4640      	mov	r0, r8
 800e1e8:	4649      	mov	r1, r9
 800e1ea:	f7f2 f85d 	bl	80002a8 <__aeabi_dsub>
 800e1ee:	4652      	mov	r2, sl
 800e1f0:	465b      	mov	r3, fp
 800e1f2:	4680      	mov	r8, r0
 800e1f4:	4689      	mov	r9, r1
 800e1f6:	f7f2 fc9f 	bl	8000b38 <__aeabi_dcmpgt>
 800e1fa:	2800      	cmp	r0, #0
 800e1fc:	f040 8295 	bne.w	800e72a <_dtoa_r+0x97a>
 800e200:	4652      	mov	r2, sl
 800e202:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e206:	4640      	mov	r0, r8
 800e208:	4649      	mov	r1, r9
 800e20a:	f7f2 fc77 	bl	8000afc <__aeabi_dcmplt>
 800e20e:	2800      	cmp	r0, #0
 800e210:	f040 8289 	bne.w	800e726 <_dtoa_r+0x976>
 800e214:	ec5b ab19 	vmov	sl, fp, d9
 800e218:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f2c0 8148 	blt.w	800e4b0 <_dtoa_r+0x700>
 800e220:	9a00      	ldr	r2, [sp, #0]
 800e222:	2a0e      	cmp	r2, #14
 800e224:	f300 8144 	bgt.w	800e4b0 <_dtoa_r+0x700>
 800e228:	4b67      	ldr	r3, [pc, #412]	; (800e3c8 <_dtoa_r+0x618>)
 800e22a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e22e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e234:	2b00      	cmp	r3, #0
 800e236:	f280 80d5 	bge.w	800e3e4 <_dtoa_r+0x634>
 800e23a:	9b03      	ldr	r3, [sp, #12]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	f300 80d1 	bgt.w	800e3e4 <_dtoa_r+0x634>
 800e242:	f040 826f 	bne.w	800e724 <_dtoa_r+0x974>
 800e246:	4b65      	ldr	r3, [pc, #404]	; (800e3dc <_dtoa_r+0x62c>)
 800e248:	2200      	movs	r2, #0
 800e24a:	4640      	mov	r0, r8
 800e24c:	4649      	mov	r1, r9
 800e24e:	f7f2 f9e3 	bl	8000618 <__aeabi_dmul>
 800e252:	4652      	mov	r2, sl
 800e254:	465b      	mov	r3, fp
 800e256:	f7f2 fc65 	bl	8000b24 <__aeabi_dcmpge>
 800e25a:	9e03      	ldr	r6, [sp, #12]
 800e25c:	4637      	mov	r7, r6
 800e25e:	2800      	cmp	r0, #0
 800e260:	f040 8245 	bne.w	800e6ee <_dtoa_r+0x93e>
 800e264:	9d01      	ldr	r5, [sp, #4]
 800e266:	2331      	movs	r3, #49	; 0x31
 800e268:	f805 3b01 	strb.w	r3, [r5], #1
 800e26c:	9b00      	ldr	r3, [sp, #0]
 800e26e:	3301      	adds	r3, #1
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	e240      	b.n	800e6f6 <_dtoa_r+0x946>
 800e274:	07f2      	lsls	r2, r6, #31
 800e276:	d505      	bpl.n	800e284 <_dtoa_r+0x4d4>
 800e278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e27c:	f7f2 f9cc 	bl	8000618 <__aeabi_dmul>
 800e280:	3501      	adds	r5, #1
 800e282:	2301      	movs	r3, #1
 800e284:	1076      	asrs	r6, r6, #1
 800e286:	3708      	adds	r7, #8
 800e288:	e777      	b.n	800e17a <_dtoa_r+0x3ca>
 800e28a:	2502      	movs	r5, #2
 800e28c:	e779      	b.n	800e182 <_dtoa_r+0x3d2>
 800e28e:	9f00      	ldr	r7, [sp, #0]
 800e290:	9e03      	ldr	r6, [sp, #12]
 800e292:	e794      	b.n	800e1be <_dtoa_r+0x40e>
 800e294:	9901      	ldr	r1, [sp, #4]
 800e296:	4b4c      	ldr	r3, [pc, #304]	; (800e3c8 <_dtoa_r+0x618>)
 800e298:	4431      	add	r1, r6
 800e29a:	910d      	str	r1, [sp, #52]	; 0x34
 800e29c:	9908      	ldr	r1, [sp, #32]
 800e29e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e2a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e2a6:	2900      	cmp	r1, #0
 800e2a8:	d043      	beq.n	800e332 <_dtoa_r+0x582>
 800e2aa:	494d      	ldr	r1, [pc, #308]	; (800e3e0 <_dtoa_r+0x630>)
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	f7f2 fadd 	bl	800086c <__aeabi_ddiv>
 800e2b2:	4652      	mov	r2, sl
 800e2b4:	465b      	mov	r3, fp
 800e2b6:	f7f1 fff7 	bl	80002a8 <__aeabi_dsub>
 800e2ba:	9d01      	ldr	r5, [sp, #4]
 800e2bc:	4682      	mov	sl, r0
 800e2be:	468b      	mov	fp, r1
 800e2c0:	4649      	mov	r1, r9
 800e2c2:	4640      	mov	r0, r8
 800e2c4:	f7f2 fc58 	bl	8000b78 <__aeabi_d2iz>
 800e2c8:	4606      	mov	r6, r0
 800e2ca:	f7f2 f93b 	bl	8000544 <__aeabi_i2d>
 800e2ce:	4602      	mov	r2, r0
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	4640      	mov	r0, r8
 800e2d4:	4649      	mov	r1, r9
 800e2d6:	f7f1 ffe7 	bl	80002a8 <__aeabi_dsub>
 800e2da:	3630      	adds	r6, #48	; 0x30
 800e2dc:	f805 6b01 	strb.w	r6, [r5], #1
 800e2e0:	4652      	mov	r2, sl
 800e2e2:	465b      	mov	r3, fp
 800e2e4:	4680      	mov	r8, r0
 800e2e6:	4689      	mov	r9, r1
 800e2e8:	f7f2 fc08 	bl	8000afc <__aeabi_dcmplt>
 800e2ec:	2800      	cmp	r0, #0
 800e2ee:	d163      	bne.n	800e3b8 <_dtoa_r+0x608>
 800e2f0:	4642      	mov	r2, r8
 800e2f2:	464b      	mov	r3, r9
 800e2f4:	4936      	ldr	r1, [pc, #216]	; (800e3d0 <_dtoa_r+0x620>)
 800e2f6:	2000      	movs	r0, #0
 800e2f8:	f7f1 ffd6 	bl	80002a8 <__aeabi_dsub>
 800e2fc:	4652      	mov	r2, sl
 800e2fe:	465b      	mov	r3, fp
 800e300:	f7f2 fbfc 	bl	8000afc <__aeabi_dcmplt>
 800e304:	2800      	cmp	r0, #0
 800e306:	f040 80b5 	bne.w	800e474 <_dtoa_r+0x6c4>
 800e30a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e30c:	429d      	cmp	r5, r3
 800e30e:	d081      	beq.n	800e214 <_dtoa_r+0x464>
 800e310:	4b30      	ldr	r3, [pc, #192]	; (800e3d4 <_dtoa_r+0x624>)
 800e312:	2200      	movs	r2, #0
 800e314:	4650      	mov	r0, sl
 800e316:	4659      	mov	r1, fp
 800e318:	f7f2 f97e 	bl	8000618 <__aeabi_dmul>
 800e31c:	4b2d      	ldr	r3, [pc, #180]	; (800e3d4 <_dtoa_r+0x624>)
 800e31e:	4682      	mov	sl, r0
 800e320:	468b      	mov	fp, r1
 800e322:	4640      	mov	r0, r8
 800e324:	4649      	mov	r1, r9
 800e326:	2200      	movs	r2, #0
 800e328:	f7f2 f976 	bl	8000618 <__aeabi_dmul>
 800e32c:	4680      	mov	r8, r0
 800e32e:	4689      	mov	r9, r1
 800e330:	e7c6      	b.n	800e2c0 <_dtoa_r+0x510>
 800e332:	4650      	mov	r0, sl
 800e334:	4659      	mov	r1, fp
 800e336:	f7f2 f96f 	bl	8000618 <__aeabi_dmul>
 800e33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e33c:	9d01      	ldr	r5, [sp, #4]
 800e33e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e340:	4682      	mov	sl, r0
 800e342:	468b      	mov	fp, r1
 800e344:	4649      	mov	r1, r9
 800e346:	4640      	mov	r0, r8
 800e348:	f7f2 fc16 	bl	8000b78 <__aeabi_d2iz>
 800e34c:	4606      	mov	r6, r0
 800e34e:	f7f2 f8f9 	bl	8000544 <__aeabi_i2d>
 800e352:	3630      	adds	r6, #48	; 0x30
 800e354:	4602      	mov	r2, r0
 800e356:	460b      	mov	r3, r1
 800e358:	4640      	mov	r0, r8
 800e35a:	4649      	mov	r1, r9
 800e35c:	f7f1 ffa4 	bl	80002a8 <__aeabi_dsub>
 800e360:	f805 6b01 	strb.w	r6, [r5], #1
 800e364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e366:	429d      	cmp	r5, r3
 800e368:	4680      	mov	r8, r0
 800e36a:	4689      	mov	r9, r1
 800e36c:	f04f 0200 	mov.w	r2, #0
 800e370:	d124      	bne.n	800e3bc <_dtoa_r+0x60c>
 800e372:	4b1b      	ldr	r3, [pc, #108]	; (800e3e0 <_dtoa_r+0x630>)
 800e374:	4650      	mov	r0, sl
 800e376:	4659      	mov	r1, fp
 800e378:	f7f1 ff98 	bl	80002ac <__adddf3>
 800e37c:	4602      	mov	r2, r0
 800e37e:	460b      	mov	r3, r1
 800e380:	4640      	mov	r0, r8
 800e382:	4649      	mov	r1, r9
 800e384:	f7f2 fbd8 	bl	8000b38 <__aeabi_dcmpgt>
 800e388:	2800      	cmp	r0, #0
 800e38a:	d173      	bne.n	800e474 <_dtoa_r+0x6c4>
 800e38c:	4652      	mov	r2, sl
 800e38e:	465b      	mov	r3, fp
 800e390:	4913      	ldr	r1, [pc, #76]	; (800e3e0 <_dtoa_r+0x630>)
 800e392:	2000      	movs	r0, #0
 800e394:	f7f1 ff88 	bl	80002a8 <__aeabi_dsub>
 800e398:	4602      	mov	r2, r0
 800e39a:	460b      	mov	r3, r1
 800e39c:	4640      	mov	r0, r8
 800e39e:	4649      	mov	r1, r9
 800e3a0:	f7f2 fbac 	bl	8000afc <__aeabi_dcmplt>
 800e3a4:	2800      	cmp	r0, #0
 800e3a6:	f43f af35 	beq.w	800e214 <_dtoa_r+0x464>
 800e3aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e3ac:	1e6b      	subs	r3, r5, #1
 800e3ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e3b4:	2b30      	cmp	r3, #48	; 0x30
 800e3b6:	d0f8      	beq.n	800e3aa <_dtoa_r+0x5fa>
 800e3b8:	9700      	str	r7, [sp, #0]
 800e3ba:	e049      	b.n	800e450 <_dtoa_r+0x6a0>
 800e3bc:	4b05      	ldr	r3, [pc, #20]	; (800e3d4 <_dtoa_r+0x624>)
 800e3be:	f7f2 f92b 	bl	8000618 <__aeabi_dmul>
 800e3c2:	4680      	mov	r8, r0
 800e3c4:	4689      	mov	r9, r1
 800e3c6:	e7bd      	b.n	800e344 <_dtoa_r+0x594>
 800e3c8:	08010610 	.word	0x08010610
 800e3cc:	080105e8 	.word	0x080105e8
 800e3d0:	3ff00000 	.word	0x3ff00000
 800e3d4:	40240000 	.word	0x40240000
 800e3d8:	401c0000 	.word	0x401c0000
 800e3dc:	40140000 	.word	0x40140000
 800e3e0:	3fe00000 	.word	0x3fe00000
 800e3e4:	9d01      	ldr	r5, [sp, #4]
 800e3e6:	4656      	mov	r6, sl
 800e3e8:	465f      	mov	r7, fp
 800e3ea:	4642      	mov	r2, r8
 800e3ec:	464b      	mov	r3, r9
 800e3ee:	4630      	mov	r0, r6
 800e3f0:	4639      	mov	r1, r7
 800e3f2:	f7f2 fa3b 	bl	800086c <__aeabi_ddiv>
 800e3f6:	f7f2 fbbf 	bl	8000b78 <__aeabi_d2iz>
 800e3fa:	4682      	mov	sl, r0
 800e3fc:	f7f2 f8a2 	bl	8000544 <__aeabi_i2d>
 800e400:	4642      	mov	r2, r8
 800e402:	464b      	mov	r3, r9
 800e404:	f7f2 f908 	bl	8000618 <__aeabi_dmul>
 800e408:	4602      	mov	r2, r0
 800e40a:	460b      	mov	r3, r1
 800e40c:	4630      	mov	r0, r6
 800e40e:	4639      	mov	r1, r7
 800e410:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e414:	f7f1 ff48 	bl	80002a8 <__aeabi_dsub>
 800e418:	f805 6b01 	strb.w	r6, [r5], #1
 800e41c:	9e01      	ldr	r6, [sp, #4]
 800e41e:	9f03      	ldr	r7, [sp, #12]
 800e420:	1bae      	subs	r6, r5, r6
 800e422:	42b7      	cmp	r7, r6
 800e424:	4602      	mov	r2, r0
 800e426:	460b      	mov	r3, r1
 800e428:	d135      	bne.n	800e496 <_dtoa_r+0x6e6>
 800e42a:	f7f1 ff3f 	bl	80002ac <__adddf3>
 800e42e:	4642      	mov	r2, r8
 800e430:	464b      	mov	r3, r9
 800e432:	4606      	mov	r6, r0
 800e434:	460f      	mov	r7, r1
 800e436:	f7f2 fb7f 	bl	8000b38 <__aeabi_dcmpgt>
 800e43a:	b9d0      	cbnz	r0, 800e472 <_dtoa_r+0x6c2>
 800e43c:	4642      	mov	r2, r8
 800e43e:	464b      	mov	r3, r9
 800e440:	4630      	mov	r0, r6
 800e442:	4639      	mov	r1, r7
 800e444:	f7f2 fb50 	bl	8000ae8 <__aeabi_dcmpeq>
 800e448:	b110      	cbz	r0, 800e450 <_dtoa_r+0x6a0>
 800e44a:	f01a 0f01 	tst.w	sl, #1
 800e44e:	d110      	bne.n	800e472 <_dtoa_r+0x6c2>
 800e450:	4620      	mov	r0, r4
 800e452:	ee18 1a10 	vmov	r1, s16
 800e456:	f000 fbe3 	bl	800ec20 <_Bfree>
 800e45a:	2300      	movs	r3, #0
 800e45c:	9800      	ldr	r0, [sp, #0]
 800e45e:	702b      	strb	r3, [r5, #0]
 800e460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e462:	3001      	adds	r0, #1
 800e464:	6018      	str	r0, [r3, #0]
 800e466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e468:	2b00      	cmp	r3, #0
 800e46a:	f43f acf1 	beq.w	800de50 <_dtoa_r+0xa0>
 800e46e:	601d      	str	r5, [r3, #0]
 800e470:	e4ee      	b.n	800de50 <_dtoa_r+0xa0>
 800e472:	9f00      	ldr	r7, [sp, #0]
 800e474:	462b      	mov	r3, r5
 800e476:	461d      	mov	r5, r3
 800e478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e47c:	2a39      	cmp	r2, #57	; 0x39
 800e47e:	d106      	bne.n	800e48e <_dtoa_r+0x6de>
 800e480:	9a01      	ldr	r2, [sp, #4]
 800e482:	429a      	cmp	r2, r3
 800e484:	d1f7      	bne.n	800e476 <_dtoa_r+0x6c6>
 800e486:	9901      	ldr	r1, [sp, #4]
 800e488:	2230      	movs	r2, #48	; 0x30
 800e48a:	3701      	adds	r7, #1
 800e48c:	700a      	strb	r2, [r1, #0]
 800e48e:	781a      	ldrb	r2, [r3, #0]
 800e490:	3201      	adds	r2, #1
 800e492:	701a      	strb	r2, [r3, #0]
 800e494:	e790      	b.n	800e3b8 <_dtoa_r+0x608>
 800e496:	4ba6      	ldr	r3, [pc, #664]	; (800e730 <_dtoa_r+0x980>)
 800e498:	2200      	movs	r2, #0
 800e49a:	f7f2 f8bd 	bl	8000618 <__aeabi_dmul>
 800e49e:	2200      	movs	r2, #0
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	4606      	mov	r6, r0
 800e4a4:	460f      	mov	r7, r1
 800e4a6:	f7f2 fb1f 	bl	8000ae8 <__aeabi_dcmpeq>
 800e4aa:	2800      	cmp	r0, #0
 800e4ac:	d09d      	beq.n	800e3ea <_dtoa_r+0x63a>
 800e4ae:	e7cf      	b.n	800e450 <_dtoa_r+0x6a0>
 800e4b0:	9a08      	ldr	r2, [sp, #32]
 800e4b2:	2a00      	cmp	r2, #0
 800e4b4:	f000 80d7 	beq.w	800e666 <_dtoa_r+0x8b6>
 800e4b8:	9a06      	ldr	r2, [sp, #24]
 800e4ba:	2a01      	cmp	r2, #1
 800e4bc:	f300 80ba 	bgt.w	800e634 <_dtoa_r+0x884>
 800e4c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4c2:	2a00      	cmp	r2, #0
 800e4c4:	f000 80b2 	beq.w	800e62c <_dtoa_r+0x87c>
 800e4c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e4cc:	9e07      	ldr	r6, [sp, #28]
 800e4ce:	9d04      	ldr	r5, [sp, #16]
 800e4d0:	9a04      	ldr	r2, [sp, #16]
 800e4d2:	441a      	add	r2, r3
 800e4d4:	9204      	str	r2, [sp, #16]
 800e4d6:	9a05      	ldr	r2, [sp, #20]
 800e4d8:	2101      	movs	r1, #1
 800e4da:	441a      	add	r2, r3
 800e4dc:	4620      	mov	r0, r4
 800e4de:	9205      	str	r2, [sp, #20]
 800e4e0:	f000 fc56 	bl	800ed90 <__i2b>
 800e4e4:	4607      	mov	r7, r0
 800e4e6:	2d00      	cmp	r5, #0
 800e4e8:	dd0c      	ble.n	800e504 <_dtoa_r+0x754>
 800e4ea:	9b05      	ldr	r3, [sp, #20]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	dd09      	ble.n	800e504 <_dtoa_r+0x754>
 800e4f0:	42ab      	cmp	r3, r5
 800e4f2:	9a04      	ldr	r2, [sp, #16]
 800e4f4:	bfa8      	it	ge
 800e4f6:	462b      	movge	r3, r5
 800e4f8:	1ad2      	subs	r2, r2, r3
 800e4fa:	9204      	str	r2, [sp, #16]
 800e4fc:	9a05      	ldr	r2, [sp, #20]
 800e4fe:	1aed      	subs	r5, r5, r3
 800e500:	1ad3      	subs	r3, r2, r3
 800e502:	9305      	str	r3, [sp, #20]
 800e504:	9b07      	ldr	r3, [sp, #28]
 800e506:	b31b      	cbz	r3, 800e550 <_dtoa_r+0x7a0>
 800e508:	9b08      	ldr	r3, [sp, #32]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	f000 80af 	beq.w	800e66e <_dtoa_r+0x8be>
 800e510:	2e00      	cmp	r6, #0
 800e512:	dd13      	ble.n	800e53c <_dtoa_r+0x78c>
 800e514:	4639      	mov	r1, r7
 800e516:	4632      	mov	r2, r6
 800e518:	4620      	mov	r0, r4
 800e51a:	f000 fcf9 	bl	800ef10 <__pow5mult>
 800e51e:	ee18 2a10 	vmov	r2, s16
 800e522:	4601      	mov	r1, r0
 800e524:	4607      	mov	r7, r0
 800e526:	4620      	mov	r0, r4
 800e528:	f000 fc48 	bl	800edbc <__multiply>
 800e52c:	ee18 1a10 	vmov	r1, s16
 800e530:	4680      	mov	r8, r0
 800e532:	4620      	mov	r0, r4
 800e534:	f000 fb74 	bl	800ec20 <_Bfree>
 800e538:	ee08 8a10 	vmov	s16, r8
 800e53c:	9b07      	ldr	r3, [sp, #28]
 800e53e:	1b9a      	subs	r2, r3, r6
 800e540:	d006      	beq.n	800e550 <_dtoa_r+0x7a0>
 800e542:	ee18 1a10 	vmov	r1, s16
 800e546:	4620      	mov	r0, r4
 800e548:	f000 fce2 	bl	800ef10 <__pow5mult>
 800e54c:	ee08 0a10 	vmov	s16, r0
 800e550:	2101      	movs	r1, #1
 800e552:	4620      	mov	r0, r4
 800e554:	f000 fc1c 	bl	800ed90 <__i2b>
 800e558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	4606      	mov	r6, r0
 800e55e:	f340 8088 	ble.w	800e672 <_dtoa_r+0x8c2>
 800e562:	461a      	mov	r2, r3
 800e564:	4601      	mov	r1, r0
 800e566:	4620      	mov	r0, r4
 800e568:	f000 fcd2 	bl	800ef10 <__pow5mult>
 800e56c:	9b06      	ldr	r3, [sp, #24]
 800e56e:	2b01      	cmp	r3, #1
 800e570:	4606      	mov	r6, r0
 800e572:	f340 8081 	ble.w	800e678 <_dtoa_r+0x8c8>
 800e576:	f04f 0800 	mov.w	r8, #0
 800e57a:	6933      	ldr	r3, [r6, #16]
 800e57c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e580:	6918      	ldr	r0, [r3, #16]
 800e582:	f000 fbb5 	bl	800ecf0 <__hi0bits>
 800e586:	f1c0 0020 	rsb	r0, r0, #32
 800e58a:	9b05      	ldr	r3, [sp, #20]
 800e58c:	4418      	add	r0, r3
 800e58e:	f010 001f 	ands.w	r0, r0, #31
 800e592:	f000 8092 	beq.w	800e6ba <_dtoa_r+0x90a>
 800e596:	f1c0 0320 	rsb	r3, r0, #32
 800e59a:	2b04      	cmp	r3, #4
 800e59c:	f340 808a 	ble.w	800e6b4 <_dtoa_r+0x904>
 800e5a0:	f1c0 001c 	rsb	r0, r0, #28
 800e5a4:	9b04      	ldr	r3, [sp, #16]
 800e5a6:	4403      	add	r3, r0
 800e5a8:	9304      	str	r3, [sp, #16]
 800e5aa:	9b05      	ldr	r3, [sp, #20]
 800e5ac:	4403      	add	r3, r0
 800e5ae:	4405      	add	r5, r0
 800e5b0:	9305      	str	r3, [sp, #20]
 800e5b2:	9b04      	ldr	r3, [sp, #16]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	dd07      	ble.n	800e5c8 <_dtoa_r+0x818>
 800e5b8:	ee18 1a10 	vmov	r1, s16
 800e5bc:	461a      	mov	r2, r3
 800e5be:	4620      	mov	r0, r4
 800e5c0:	f000 fd00 	bl	800efc4 <__lshift>
 800e5c4:	ee08 0a10 	vmov	s16, r0
 800e5c8:	9b05      	ldr	r3, [sp, #20]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	dd05      	ble.n	800e5da <_dtoa_r+0x82a>
 800e5ce:	4631      	mov	r1, r6
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	f000 fcf6 	bl	800efc4 <__lshift>
 800e5d8:	4606      	mov	r6, r0
 800e5da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d06e      	beq.n	800e6be <_dtoa_r+0x90e>
 800e5e0:	ee18 0a10 	vmov	r0, s16
 800e5e4:	4631      	mov	r1, r6
 800e5e6:	f000 fd5d 	bl	800f0a4 <__mcmp>
 800e5ea:	2800      	cmp	r0, #0
 800e5ec:	da67      	bge.n	800e6be <_dtoa_r+0x90e>
 800e5ee:	9b00      	ldr	r3, [sp, #0]
 800e5f0:	3b01      	subs	r3, #1
 800e5f2:	ee18 1a10 	vmov	r1, s16
 800e5f6:	9300      	str	r3, [sp, #0]
 800e5f8:	220a      	movs	r2, #10
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	f000 fb31 	bl	800ec64 <__multadd>
 800e602:	9b08      	ldr	r3, [sp, #32]
 800e604:	ee08 0a10 	vmov	s16, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	f000 81b1 	beq.w	800e970 <_dtoa_r+0xbc0>
 800e60e:	2300      	movs	r3, #0
 800e610:	4639      	mov	r1, r7
 800e612:	220a      	movs	r2, #10
 800e614:	4620      	mov	r0, r4
 800e616:	f000 fb25 	bl	800ec64 <__multadd>
 800e61a:	9b02      	ldr	r3, [sp, #8]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	4607      	mov	r7, r0
 800e620:	f300 808e 	bgt.w	800e740 <_dtoa_r+0x990>
 800e624:	9b06      	ldr	r3, [sp, #24]
 800e626:	2b02      	cmp	r3, #2
 800e628:	dc51      	bgt.n	800e6ce <_dtoa_r+0x91e>
 800e62a:	e089      	b.n	800e740 <_dtoa_r+0x990>
 800e62c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e62e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e632:	e74b      	b.n	800e4cc <_dtoa_r+0x71c>
 800e634:	9b03      	ldr	r3, [sp, #12]
 800e636:	1e5e      	subs	r6, r3, #1
 800e638:	9b07      	ldr	r3, [sp, #28]
 800e63a:	42b3      	cmp	r3, r6
 800e63c:	bfbf      	itttt	lt
 800e63e:	9b07      	ldrlt	r3, [sp, #28]
 800e640:	9607      	strlt	r6, [sp, #28]
 800e642:	1af2      	sublt	r2, r6, r3
 800e644:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e646:	bfb6      	itet	lt
 800e648:	189b      	addlt	r3, r3, r2
 800e64a:	1b9e      	subge	r6, r3, r6
 800e64c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e64e:	9b03      	ldr	r3, [sp, #12]
 800e650:	bfb8      	it	lt
 800e652:	2600      	movlt	r6, #0
 800e654:	2b00      	cmp	r3, #0
 800e656:	bfb7      	itett	lt
 800e658:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e65c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e660:	1a9d      	sublt	r5, r3, r2
 800e662:	2300      	movlt	r3, #0
 800e664:	e734      	b.n	800e4d0 <_dtoa_r+0x720>
 800e666:	9e07      	ldr	r6, [sp, #28]
 800e668:	9d04      	ldr	r5, [sp, #16]
 800e66a:	9f08      	ldr	r7, [sp, #32]
 800e66c:	e73b      	b.n	800e4e6 <_dtoa_r+0x736>
 800e66e:	9a07      	ldr	r2, [sp, #28]
 800e670:	e767      	b.n	800e542 <_dtoa_r+0x792>
 800e672:	9b06      	ldr	r3, [sp, #24]
 800e674:	2b01      	cmp	r3, #1
 800e676:	dc18      	bgt.n	800e6aa <_dtoa_r+0x8fa>
 800e678:	f1ba 0f00 	cmp.w	sl, #0
 800e67c:	d115      	bne.n	800e6aa <_dtoa_r+0x8fa>
 800e67e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e682:	b993      	cbnz	r3, 800e6aa <_dtoa_r+0x8fa>
 800e684:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e688:	0d1b      	lsrs	r3, r3, #20
 800e68a:	051b      	lsls	r3, r3, #20
 800e68c:	b183      	cbz	r3, 800e6b0 <_dtoa_r+0x900>
 800e68e:	9b04      	ldr	r3, [sp, #16]
 800e690:	3301      	adds	r3, #1
 800e692:	9304      	str	r3, [sp, #16]
 800e694:	9b05      	ldr	r3, [sp, #20]
 800e696:	3301      	adds	r3, #1
 800e698:	9305      	str	r3, [sp, #20]
 800e69a:	f04f 0801 	mov.w	r8, #1
 800e69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	f47f af6a 	bne.w	800e57a <_dtoa_r+0x7ca>
 800e6a6:	2001      	movs	r0, #1
 800e6a8:	e76f      	b.n	800e58a <_dtoa_r+0x7da>
 800e6aa:	f04f 0800 	mov.w	r8, #0
 800e6ae:	e7f6      	b.n	800e69e <_dtoa_r+0x8ee>
 800e6b0:	4698      	mov	r8, r3
 800e6b2:	e7f4      	b.n	800e69e <_dtoa_r+0x8ee>
 800e6b4:	f43f af7d 	beq.w	800e5b2 <_dtoa_r+0x802>
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	301c      	adds	r0, #28
 800e6bc:	e772      	b.n	800e5a4 <_dtoa_r+0x7f4>
 800e6be:	9b03      	ldr	r3, [sp, #12]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	dc37      	bgt.n	800e734 <_dtoa_r+0x984>
 800e6c4:	9b06      	ldr	r3, [sp, #24]
 800e6c6:	2b02      	cmp	r3, #2
 800e6c8:	dd34      	ble.n	800e734 <_dtoa_r+0x984>
 800e6ca:	9b03      	ldr	r3, [sp, #12]
 800e6cc:	9302      	str	r3, [sp, #8]
 800e6ce:	9b02      	ldr	r3, [sp, #8]
 800e6d0:	b96b      	cbnz	r3, 800e6ee <_dtoa_r+0x93e>
 800e6d2:	4631      	mov	r1, r6
 800e6d4:	2205      	movs	r2, #5
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	f000 fac4 	bl	800ec64 <__multadd>
 800e6dc:	4601      	mov	r1, r0
 800e6de:	4606      	mov	r6, r0
 800e6e0:	ee18 0a10 	vmov	r0, s16
 800e6e4:	f000 fcde 	bl	800f0a4 <__mcmp>
 800e6e8:	2800      	cmp	r0, #0
 800e6ea:	f73f adbb 	bgt.w	800e264 <_dtoa_r+0x4b4>
 800e6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6f0:	9d01      	ldr	r5, [sp, #4]
 800e6f2:	43db      	mvns	r3, r3
 800e6f4:	9300      	str	r3, [sp, #0]
 800e6f6:	f04f 0800 	mov.w	r8, #0
 800e6fa:	4631      	mov	r1, r6
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	f000 fa8f 	bl	800ec20 <_Bfree>
 800e702:	2f00      	cmp	r7, #0
 800e704:	f43f aea4 	beq.w	800e450 <_dtoa_r+0x6a0>
 800e708:	f1b8 0f00 	cmp.w	r8, #0
 800e70c:	d005      	beq.n	800e71a <_dtoa_r+0x96a>
 800e70e:	45b8      	cmp	r8, r7
 800e710:	d003      	beq.n	800e71a <_dtoa_r+0x96a>
 800e712:	4641      	mov	r1, r8
 800e714:	4620      	mov	r0, r4
 800e716:	f000 fa83 	bl	800ec20 <_Bfree>
 800e71a:	4639      	mov	r1, r7
 800e71c:	4620      	mov	r0, r4
 800e71e:	f000 fa7f 	bl	800ec20 <_Bfree>
 800e722:	e695      	b.n	800e450 <_dtoa_r+0x6a0>
 800e724:	2600      	movs	r6, #0
 800e726:	4637      	mov	r7, r6
 800e728:	e7e1      	b.n	800e6ee <_dtoa_r+0x93e>
 800e72a:	9700      	str	r7, [sp, #0]
 800e72c:	4637      	mov	r7, r6
 800e72e:	e599      	b.n	800e264 <_dtoa_r+0x4b4>
 800e730:	40240000 	.word	0x40240000
 800e734:	9b08      	ldr	r3, [sp, #32]
 800e736:	2b00      	cmp	r3, #0
 800e738:	f000 80ca 	beq.w	800e8d0 <_dtoa_r+0xb20>
 800e73c:	9b03      	ldr	r3, [sp, #12]
 800e73e:	9302      	str	r3, [sp, #8]
 800e740:	2d00      	cmp	r5, #0
 800e742:	dd05      	ble.n	800e750 <_dtoa_r+0x9a0>
 800e744:	4639      	mov	r1, r7
 800e746:	462a      	mov	r2, r5
 800e748:	4620      	mov	r0, r4
 800e74a:	f000 fc3b 	bl	800efc4 <__lshift>
 800e74e:	4607      	mov	r7, r0
 800e750:	f1b8 0f00 	cmp.w	r8, #0
 800e754:	d05b      	beq.n	800e80e <_dtoa_r+0xa5e>
 800e756:	6879      	ldr	r1, [r7, #4]
 800e758:	4620      	mov	r0, r4
 800e75a:	f000 fa21 	bl	800eba0 <_Balloc>
 800e75e:	4605      	mov	r5, r0
 800e760:	b928      	cbnz	r0, 800e76e <_dtoa_r+0x9be>
 800e762:	4b87      	ldr	r3, [pc, #540]	; (800e980 <_dtoa_r+0xbd0>)
 800e764:	4602      	mov	r2, r0
 800e766:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e76a:	f7ff bb3b 	b.w	800dde4 <_dtoa_r+0x34>
 800e76e:	693a      	ldr	r2, [r7, #16]
 800e770:	3202      	adds	r2, #2
 800e772:	0092      	lsls	r2, r2, #2
 800e774:	f107 010c 	add.w	r1, r7, #12
 800e778:	300c      	adds	r0, #12
 800e77a:	f7fe fcc3 	bl	800d104 <memcpy>
 800e77e:	2201      	movs	r2, #1
 800e780:	4629      	mov	r1, r5
 800e782:	4620      	mov	r0, r4
 800e784:	f000 fc1e 	bl	800efc4 <__lshift>
 800e788:	9b01      	ldr	r3, [sp, #4]
 800e78a:	f103 0901 	add.w	r9, r3, #1
 800e78e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e792:	4413      	add	r3, r2
 800e794:	9305      	str	r3, [sp, #20]
 800e796:	f00a 0301 	and.w	r3, sl, #1
 800e79a:	46b8      	mov	r8, r7
 800e79c:	9304      	str	r3, [sp, #16]
 800e79e:	4607      	mov	r7, r0
 800e7a0:	4631      	mov	r1, r6
 800e7a2:	ee18 0a10 	vmov	r0, s16
 800e7a6:	f7ff fa77 	bl	800dc98 <quorem>
 800e7aa:	4641      	mov	r1, r8
 800e7ac:	9002      	str	r0, [sp, #8]
 800e7ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e7b2:	ee18 0a10 	vmov	r0, s16
 800e7b6:	f000 fc75 	bl	800f0a4 <__mcmp>
 800e7ba:	463a      	mov	r2, r7
 800e7bc:	9003      	str	r0, [sp, #12]
 800e7be:	4631      	mov	r1, r6
 800e7c0:	4620      	mov	r0, r4
 800e7c2:	f000 fc8b 	bl	800f0dc <__mdiff>
 800e7c6:	68c2      	ldr	r2, [r0, #12]
 800e7c8:	f109 3bff 	add.w	fp, r9, #4294967295
 800e7cc:	4605      	mov	r5, r0
 800e7ce:	bb02      	cbnz	r2, 800e812 <_dtoa_r+0xa62>
 800e7d0:	4601      	mov	r1, r0
 800e7d2:	ee18 0a10 	vmov	r0, s16
 800e7d6:	f000 fc65 	bl	800f0a4 <__mcmp>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	4629      	mov	r1, r5
 800e7de:	4620      	mov	r0, r4
 800e7e0:	9207      	str	r2, [sp, #28]
 800e7e2:	f000 fa1d 	bl	800ec20 <_Bfree>
 800e7e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e7ea:	ea43 0102 	orr.w	r1, r3, r2
 800e7ee:	9b04      	ldr	r3, [sp, #16]
 800e7f0:	430b      	orrs	r3, r1
 800e7f2:	464d      	mov	r5, r9
 800e7f4:	d10f      	bne.n	800e816 <_dtoa_r+0xa66>
 800e7f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e7fa:	d02a      	beq.n	800e852 <_dtoa_r+0xaa2>
 800e7fc:	9b03      	ldr	r3, [sp, #12]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	dd02      	ble.n	800e808 <_dtoa_r+0xa58>
 800e802:	9b02      	ldr	r3, [sp, #8]
 800e804:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e808:	f88b a000 	strb.w	sl, [fp]
 800e80c:	e775      	b.n	800e6fa <_dtoa_r+0x94a>
 800e80e:	4638      	mov	r0, r7
 800e810:	e7ba      	b.n	800e788 <_dtoa_r+0x9d8>
 800e812:	2201      	movs	r2, #1
 800e814:	e7e2      	b.n	800e7dc <_dtoa_r+0xa2c>
 800e816:	9b03      	ldr	r3, [sp, #12]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	db04      	blt.n	800e826 <_dtoa_r+0xa76>
 800e81c:	9906      	ldr	r1, [sp, #24]
 800e81e:	430b      	orrs	r3, r1
 800e820:	9904      	ldr	r1, [sp, #16]
 800e822:	430b      	orrs	r3, r1
 800e824:	d122      	bne.n	800e86c <_dtoa_r+0xabc>
 800e826:	2a00      	cmp	r2, #0
 800e828:	ddee      	ble.n	800e808 <_dtoa_r+0xa58>
 800e82a:	ee18 1a10 	vmov	r1, s16
 800e82e:	2201      	movs	r2, #1
 800e830:	4620      	mov	r0, r4
 800e832:	f000 fbc7 	bl	800efc4 <__lshift>
 800e836:	4631      	mov	r1, r6
 800e838:	ee08 0a10 	vmov	s16, r0
 800e83c:	f000 fc32 	bl	800f0a4 <__mcmp>
 800e840:	2800      	cmp	r0, #0
 800e842:	dc03      	bgt.n	800e84c <_dtoa_r+0xa9c>
 800e844:	d1e0      	bne.n	800e808 <_dtoa_r+0xa58>
 800e846:	f01a 0f01 	tst.w	sl, #1
 800e84a:	d0dd      	beq.n	800e808 <_dtoa_r+0xa58>
 800e84c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e850:	d1d7      	bne.n	800e802 <_dtoa_r+0xa52>
 800e852:	2339      	movs	r3, #57	; 0x39
 800e854:	f88b 3000 	strb.w	r3, [fp]
 800e858:	462b      	mov	r3, r5
 800e85a:	461d      	mov	r5, r3
 800e85c:	3b01      	subs	r3, #1
 800e85e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e862:	2a39      	cmp	r2, #57	; 0x39
 800e864:	d071      	beq.n	800e94a <_dtoa_r+0xb9a>
 800e866:	3201      	adds	r2, #1
 800e868:	701a      	strb	r2, [r3, #0]
 800e86a:	e746      	b.n	800e6fa <_dtoa_r+0x94a>
 800e86c:	2a00      	cmp	r2, #0
 800e86e:	dd07      	ble.n	800e880 <_dtoa_r+0xad0>
 800e870:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e874:	d0ed      	beq.n	800e852 <_dtoa_r+0xaa2>
 800e876:	f10a 0301 	add.w	r3, sl, #1
 800e87a:	f88b 3000 	strb.w	r3, [fp]
 800e87e:	e73c      	b.n	800e6fa <_dtoa_r+0x94a>
 800e880:	9b05      	ldr	r3, [sp, #20]
 800e882:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e886:	4599      	cmp	r9, r3
 800e888:	d047      	beq.n	800e91a <_dtoa_r+0xb6a>
 800e88a:	ee18 1a10 	vmov	r1, s16
 800e88e:	2300      	movs	r3, #0
 800e890:	220a      	movs	r2, #10
 800e892:	4620      	mov	r0, r4
 800e894:	f000 f9e6 	bl	800ec64 <__multadd>
 800e898:	45b8      	cmp	r8, r7
 800e89a:	ee08 0a10 	vmov	s16, r0
 800e89e:	f04f 0300 	mov.w	r3, #0
 800e8a2:	f04f 020a 	mov.w	r2, #10
 800e8a6:	4641      	mov	r1, r8
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	d106      	bne.n	800e8ba <_dtoa_r+0xb0a>
 800e8ac:	f000 f9da 	bl	800ec64 <__multadd>
 800e8b0:	4680      	mov	r8, r0
 800e8b2:	4607      	mov	r7, r0
 800e8b4:	f109 0901 	add.w	r9, r9, #1
 800e8b8:	e772      	b.n	800e7a0 <_dtoa_r+0x9f0>
 800e8ba:	f000 f9d3 	bl	800ec64 <__multadd>
 800e8be:	4639      	mov	r1, r7
 800e8c0:	4680      	mov	r8, r0
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	220a      	movs	r2, #10
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	f000 f9cc 	bl	800ec64 <__multadd>
 800e8cc:	4607      	mov	r7, r0
 800e8ce:	e7f1      	b.n	800e8b4 <_dtoa_r+0xb04>
 800e8d0:	9b03      	ldr	r3, [sp, #12]
 800e8d2:	9302      	str	r3, [sp, #8]
 800e8d4:	9d01      	ldr	r5, [sp, #4]
 800e8d6:	ee18 0a10 	vmov	r0, s16
 800e8da:	4631      	mov	r1, r6
 800e8dc:	f7ff f9dc 	bl	800dc98 <quorem>
 800e8e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e8e4:	9b01      	ldr	r3, [sp, #4]
 800e8e6:	f805 ab01 	strb.w	sl, [r5], #1
 800e8ea:	1aea      	subs	r2, r5, r3
 800e8ec:	9b02      	ldr	r3, [sp, #8]
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	dd09      	ble.n	800e906 <_dtoa_r+0xb56>
 800e8f2:	ee18 1a10 	vmov	r1, s16
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	220a      	movs	r2, #10
 800e8fa:	4620      	mov	r0, r4
 800e8fc:	f000 f9b2 	bl	800ec64 <__multadd>
 800e900:	ee08 0a10 	vmov	s16, r0
 800e904:	e7e7      	b.n	800e8d6 <_dtoa_r+0xb26>
 800e906:	9b02      	ldr	r3, [sp, #8]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	bfc8      	it	gt
 800e90c:	461d      	movgt	r5, r3
 800e90e:	9b01      	ldr	r3, [sp, #4]
 800e910:	bfd8      	it	le
 800e912:	2501      	movle	r5, #1
 800e914:	441d      	add	r5, r3
 800e916:	f04f 0800 	mov.w	r8, #0
 800e91a:	ee18 1a10 	vmov	r1, s16
 800e91e:	2201      	movs	r2, #1
 800e920:	4620      	mov	r0, r4
 800e922:	f000 fb4f 	bl	800efc4 <__lshift>
 800e926:	4631      	mov	r1, r6
 800e928:	ee08 0a10 	vmov	s16, r0
 800e92c:	f000 fbba 	bl	800f0a4 <__mcmp>
 800e930:	2800      	cmp	r0, #0
 800e932:	dc91      	bgt.n	800e858 <_dtoa_r+0xaa8>
 800e934:	d102      	bne.n	800e93c <_dtoa_r+0xb8c>
 800e936:	f01a 0f01 	tst.w	sl, #1
 800e93a:	d18d      	bne.n	800e858 <_dtoa_r+0xaa8>
 800e93c:	462b      	mov	r3, r5
 800e93e:	461d      	mov	r5, r3
 800e940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e944:	2a30      	cmp	r2, #48	; 0x30
 800e946:	d0fa      	beq.n	800e93e <_dtoa_r+0xb8e>
 800e948:	e6d7      	b.n	800e6fa <_dtoa_r+0x94a>
 800e94a:	9a01      	ldr	r2, [sp, #4]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d184      	bne.n	800e85a <_dtoa_r+0xaaa>
 800e950:	9b00      	ldr	r3, [sp, #0]
 800e952:	3301      	adds	r3, #1
 800e954:	9300      	str	r3, [sp, #0]
 800e956:	2331      	movs	r3, #49	; 0x31
 800e958:	7013      	strb	r3, [r2, #0]
 800e95a:	e6ce      	b.n	800e6fa <_dtoa_r+0x94a>
 800e95c:	4b09      	ldr	r3, [pc, #36]	; (800e984 <_dtoa_r+0xbd4>)
 800e95e:	f7ff ba95 	b.w	800de8c <_dtoa_r+0xdc>
 800e962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e964:	2b00      	cmp	r3, #0
 800e966:	f47f aa6e 	bne.w	800de46 <_dtoa_r+0x96>
 800e96a:	4b07      	ldr	r3, [pc, #28]	; (800e988 <_dtoa_r+0xbd8>)
 800e96c:	f7ff ba8e 	b.w	800de8c <_dtoa_r+0xdc>
 800e970:	9b02      	ldr	r3, [sp, #8]
 800e972:	2b00      	cmp	r3, #0
 800e974:	dcae      	bgt.n	800e8d4 <_dtoa_r+0xb24>
 800e976:	9b06      	ldr	r3, [sp, #24]
 800e978:	2b02      	cmp	r3, #2
 800e97a:	f73f aea8 	bgt.w	800e6ce <_dtoa_r+0x91e>
 800e97e:	e7a9      	b.n	800e8d4 <_dtoa_r+0xb24>
 800e980:	08010517 	.word	0x08010517
 800e984:	08010474 	.word	0x08010474
 800e988:	08010498 	.word	0x08010498

0800e98c <std>:
 800e98c:	2300      	movs	r3, #0
 800e98e:	b510      	push	{r4, lr}
 800e990:	4604      	mov	r4, r0
 800e992:	e9c0 3300 	strd	r3, r3, [r0]
 800e996:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e99a:	6083      	str	r3, [r0, #8]
 800e99c:	8181      	strh	r1, [r0, #12]
 800e99e:	6643      	str	r3, [r0, #100]	; 0x64
 800e9a0:	81c2      	strh	r2, [r0, #14]
 800e9a2:	6183      	str	r3, [r0, #24]
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	2208      	movs	r2, #8
 800e9a8:	305c      	adds	r0, #92	; 0x5c
 800e9aa:	f7fe fbb9 	bl	800d120 <memset>
 800e9ae:	4b05      	ldr	r3, [pc, #20]	; (800e9c4 <std+0x38>)
 800e9b0:	6263      	str	r3, [r4, #36]	; 0x24
 800e9b2:	4b05      	ldr	r3, [pc, #20]	; (800e9c8 <std+0x3c>)
 800e9b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e9b6:	4b05      	ldr	r3, [pc, #20]	; (800e9cc <std+0x40>)
 800e9b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e9ba:	4b05      	ldr	r3, [pc, #20]	; (800e9d0 <std+0x44>)
 800e9bc:	6224      	str	r4, [r4, #32]
 800e9be:	6323      	str	r3, [r4, #48]	; 0x30
 800e9c0:	bd10      	pop	{r4, pc}
 800e9c2:	bf00      	nop
 800e9c4:	0800f841 	.word	0x0800f841
 800e9c8:	0800f863 	.word	0x0800f863
 800e9cc:	0800f89b 	.word	0x0800f89b
 800e9d0:	0800f8bf 	.word	0x0800f8bf

0800e9d4 <_cleanup_r>:
 800e9d4:	4901      	ldr	r1, [pc, #4]	; (800e9dc <_cleanup_r+0x8>)
 800e9d6:	f000 b8af 	b.w	800eb38 <_fwalk_reent>
 800e9da:	bf00      	nop
 800e9dc:	0800fbd5 	.word	0x0800fbd5

0800e9e0 <__sfmoreglue>:
 800e9e0:	b570      	push	{r4, r5, r6, lr}
 800e9e2:	2268      	movs	r2, #104	; 0x68
 800e9e4:	1e4d      	subs	r5, r1, #1
 800e9e6:	4355      	muls	r5, r2
 800e9e8:	460e      	mov	r6, r1
 800e9ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e9ee:	f7fe fc0b 	bl	800d208 <_malloc_r>
 800e9f2:	4604      	mov	r4, r0
 800e9f4:	b140      	cbz	r0, 800ea08 <__sfmoreglue+0x28>
 800e9f6:	2100      	movs	r1, #0
 800e9f8:	e9c0 1600 	strd	r1, r6, [r0]
 800e9fc:	300c      	adds	r0, #12
 800e9fe:	60a0      	str	r0, [r4, #8]
 800ea00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ea04:	f7fe fb8c 	bl	800d120 <memset>
 800ea08:	4620      	mov	r0, r4
 800ea0a:	bd70      	pop	{r4, r5, r6, pc}

0800ea0c <__sfp_lock_acquire>:
 800ea0c:	4801      	ldr	r0, [pc, #4]	; (800ea14 <__sfp_lock_acquire+0x8>)
 800ea0e:	f000 b8b8 	b.w	800eb82 <__retarget_lock_acquire_recursive>
 800ea12:	bf00      	nop
 800ea14:	200081fd 	.word	0x200081fd

0800ea18 <__sfp_lock_release>:
 800ea18:	4801      	ldr	r0, [pc, #4]	; (800ea20 <__sfp_lock_release+0x8>)
 800ea1a:	f000 b8b3 	b.w	800eb84 <__retarget_lock_release_recursive>
 800ea1e:	bf00      	nop
 800ea20:	200081fd 	.word	0x200081fd

0800ea24 <__sinit_lock_acquire>:
 800ea24:	4801      	ldr	r0, [pc, #4]	; (800ea2c <__sinit_lock_acquire+0x8>)
 800ea26:	f000 b8ac 	b.w	800eb82 <__retarget_lock_acquire_recursive>
 800ea2a:	bf00      	nop
 800ea2c:	200081fe 	.word	0x200081fe

0800ea30 <__sinit_lock_release>:
 800ea30:	4801      	ldr	r0, [pc, #4]	; (800ea38 <__sinit_lock_release+0x8>)
 800ea32:	f000 b8a7 	b.w	800eb84 <__retarget_lock_release_recursive>
 800ea36:	bf00      	nop
 800ea38:	200081fe 	.word	0x200081fe

0800ea3c <__sinit>:
 800ea3c:	b510      	push	{r4, lr}
 800ea3e:	4604      	mov	r4, r0
 800ea40:	f7ff fff0 	bl	800ea24 <__sinit_lock_acquire>
 800ea44:	69a3      	ldr	r3, [r4, #24]
 800ea46:	b11b      	cbz	r3, 800ea50 <__sinit+0x14>
 800ea48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea4c:	f7ff bff0 	b.w	800ea30 <__sinit_lock_release>
 800ea50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ea54:	6523      	str	r3, [r4, #80]	; 0x50
 800ea56:	4b13      	ldr	r3, [pc, #76]	; (800eaa4 <__sinit+0x68>)
 800ea58:	4a13      	ldr	r2, [pc, #76]	; (800eaa8 <__sinit+0x6c>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ea5e:	42a3      	cmp	r3, r4
 800ea60:	bf04      	itt	eq
 800ea62:	2301      	moveq	r3, #1
 800ea64:	61a3      	streq	r3, [r4, #24]
 800ea66:	4620      	mov	r0, r4
 800ea68:	f000 f820 	bl	800eaac <__sfp>
 800ea6c:	6060      	str	r0, [r4, #4]
 800ea6e:	4620      	mov	r0, r4
 800ea70:	f000 f81c 	bl	800eaac <__sfp>
 800ea74:	60a0      	str	r0, [r4, #8]
 800ea76:	4620      	mov	r0, r4
 800ea78:	f000 f818 	bl	800eaac <__sfp>
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	60e0      	str	r0, [r4, #12]
 800ea80:	2104      	movs	r1, #4
 800ea82:	6860      	ldr	r0, [r4, #4]
 800ea84:	f7ff ff82 	bl	800e98c <std>
 800ea88:	68a0      	ldr	r0, [r4, #8]
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	2109      	movs	r1, #9
 800ea8e:	f7ff ff7d 	bl	800e98c <std>
 800ea92:	68e0      	ldr	r0, [r4, #12]
 800ea94:	2202      	movs	r2, #2
 800ea96:	2112      	movs	r1, #18
 800ea98:	f7ff ff78 	bl	800e98c <std>
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	61a3      	str	r3, [r4, #24]
 800eaa0:	e7d2      	b.n	800ea48 <__sinit+0xc>
 800eaa2:	bf00      	nop
 800eaa4:	08010460 	.word	0x08010460
 800eaa8:	0800e9d5 	.word	0x0800e9d5

0800eaac <__sfp>:
 800eaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaae:	4607      	mov	r7, r0
 800eab0:	f7ff ffac 	bl	800ea0c <__sfp_lock_acquire>
 800eab4:	4b1e      	ldr	r3, [pc, #120]	; (800eb30 <__sfp+0x84>)
 800eab6:	681e      	ldr	r6, [r3, #0]
 800eab8:	69b3      	ldr	r3, [r6, #24]
 800eaba:	b913      	cbnz	r3, 800eac2 <__sfp+0x16>
 800eabc:	4630      	mov	r0, r6
 800eabe:	f7ff ffbd 	bl	800ea3c <__sinit>
 800eac2:	3648      	adds	r6, #72	; 0x48
 800eac4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eac8:	3b01      	subs	r3, #1
 800eaca:	d503      	bpl.n	800ead4 <__sfp+0x28>
 800eacc:	6833      	ldr	r3, [r6, #0]
 800eace:	b30b      	cbz	r3, 800eb14 <__sfp+0x68>
 800ead0:	6836      	ldr	r6, [r6, #0]
 800ead2:	e7f7      	b.n	800eac4 <__sfp+0x18>
 800ead4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ead8:	b9d5      	cbnz	r5, 800eb10 <__sfp+0x64>
 800eada:	4b16      	ldr	r3, [pc, #88]	; (800eb34 <__sfp+0x88>)
 800eadc:	60e3      	str	r3, [r4, #12]
 800eade:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eae2:	6665      	str	r5, [r4, #100]	; 0x64
 800eae4:	f000 f84c 	bl	800eb80 <__retarget_lock_init_recursive>
 800eae8:	f7ff ff96 	bl	800ea18 <__sfp_lock_release>
 800eaec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eaf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eaf4:	6025      	str	r5, [r4, #0]
 800eaf6:	61a5      	str	r5, [r4, #24]
 800eaf8:	2208      	movs	r2, #8
 800eafa:	4629      	mov	r1, r5
 800eafc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eb00:	f7fe fb0e 	bl	800d120 <memset>
 800eb04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eb08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb10:	3468      	adds	r4, #104	; 0x68
 800eb12:	e7d9      	b.n	800eac8 <__sfp+0x1c>
 800eb14:	2104      	movs	r1, #4
 800eb16:	4638      	mov	r0, r7
 800eb18:	f7ff ff62 	bl	800e9e0 <__sfmoreglue>
 800eb1c:	4604      	mov	r4, r0
 800eb1e:	6030      	str	r0, [r6, #0]
 800eb20:	2800      	cmp	r0, #0
 800eb22:	d1d5      	bne.n	800ead0 <__sfp+0x24>
 800eb24:	f7ff ff78 	bl	800ea18 <__sfp_lock_release>
 800eb28:	230c      	movs	r3, #12
 800eb2a:	603b      	str	r3, [r7, #0]
 800eb2c:	e7ee      	b.n	800eb0c <__sfp+0x60>
 800eb2e:	bf00      	nop
 800eb30:	08010460 	.word	0x08010460
 800eb34:	ffff0001 	.word	0xffff0001

0800eb38 <_fwalk_reent>:
 800eb38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb3c:	4606      	mov	r6, r0
 800eb3e:	4688      	mov	r8, r1
 800eb40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eb44:	2700      	movs	r7, #0
 800eb46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb4a:	f1b9 0901 	subs.w	r9, r9, #1
 800eb4e:	d505      	bpl.n	800eb5c <_fwalk_reent+0x24>
 800eb50:	6824      	ldr	r4, [r4, #0]
 800eb52:	2c00      	cmp	r4, #0
 800eb54:	d1f7      	bne.n	800eb46 <_fwalk_reent+0xe>
 800eb56:	4638      	mov	r0, r7
 800eb58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb5c:	89ab      	ldrh	r3, [r5, #12]
 800eb5e:	2b01      	cmp	r3, #1
 800eb60:	d907      	bls.n	800eb72 <_fwalk_reent+0x3a>
 800eb62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb66:	3301      	adds	r3, #1
 800eb68:	d003      	beq.n	800eb72 <_fwalk_reent+0x3a>
 800eb6a:	4629      	mov	r1, r5
 800eb6c:	4630      	mov	r0, r6
 800eb6e:	47c0      	blx	r8
 800eb70:	4307      	orrs	r7, r0
 800eb72:	3568      	adds	r5, #104	; 0x68
 800eb74:	e7e9      	b.n	800eb4a <_fwalk_reent+0x12>
	...

0800eb78 <_localeconv_r>:
 800eb78:	4800      	ldr	r0, [pc, #0]	; (800eb7c <_localeconv_r+0x4>)
 800eb7a:	4770      	bx	lr
 800eb7c:	20000170 	.word	0x20000170

0800eb80 <__retarget_lock_init_recursive>:
 800eb80:	4770      	bx	lr

0800eb82 <__retarget_lock_acquire_recursive>:
 800eb82:	4770      	bx	lr

0800eb84 <__retarget_lock_release_recursive>:
 800eb84:	4770      	bx	lr
	...

0800eb88 <__malloc_lock>:
 800eb88:	4801      	ldr	r0, [pc, #4]	; (800eb90 <__malloc_lock+0x8>)
 800eb8a:	f7ff bffa 	b.w	800eb82 <__retarget_lock_acquire_recursive>
 800eb8e:	bf00      	nop
 800eb90:	200081fc 	.word	0x200081fc

0800eb94 <__malloc_unlock>:
 800eb94:	4801      	ldr	r0, [pc, #4]	; (800eb9c <__malloc_unlock+0x8>)
 800eb96:	f7ff bff5 	b.w	800eb84 <__retarget_lock_release_recursive>
 800eb9a:	bf00      	nop
 800eb9c:	200081fc 	.word	0x200081fc

0800eba0 <_Balloc>:
 800eba0:	b570      	push	{r4, r5, r6, lr}
 800eba2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eba4:	4604      	mov	r4, r0
 800eba6:	460d      	mov	r5, r1
 800eba8:	b976      	cbnz	r6, 800ebc8 <_Balloc+0x28>
 800ebaa:	2010      	movs	r0, #16
 800ebac:	f7fe fa9a 	bl	800d0e4 <malloc>
 800ebb0:	4602      	mov	r2, r0
 800ebb2:	6260      	str	r0, [r4, #36]	; 0x24
 800ebb4:	b920      	cbnz	r0, 800ebc0 <_Balloc+0x20>
 800ebb6:	4b18      	ldr	r3, [pc, #96]	; (800ec18 <_Balloc+0x78>)
 800ebb8:	4818      	ldr	r0, [pc, #96]	; (800ec1c <_Balloc+0x7c>)
 800ebba:	2166      	movs	r1, #102	; 0x66
 800ebbc:	f000 ff56 	bl	800fa6c <__assert_func>
 800ebc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ebc4:	6006      	str	r6, [r0, #0]
 800ebc6:	60c6      	str	r6, [r0, #12]
 800ebc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ebca:	68f3      	ldr	r3, [r6, #12]
 800ebcc:	b183      	cbz	r3, 800ebf0 <_Balloc+0x50>
 800ebce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebd0:	68db      	ldr	r3, [r3, #12]
 800ebd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ebd6:	b9b8      	cbnz	r0, 800ec08 <_Balloc+0x68>
 800ebd8:	2101      	movs	r1, #1
 800ebda:	fa01 f605 	lsl.w	r6, r1, r5
 800ebde:	1d72      	adds	r2, r6, #5
 800ebe0:	0092      	lsls	r2, r2, #2
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	f000 fb60 	bl	800f2a8 <_calloc_r>
 800ebe8:	b160      	cbz	r0, 800ec04 <_Balloc+0x64>
 800ebea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ebee:	e00e      	b.n	800ec0e <_Balloc+0x6e>
 800ebf0:	2221      	movs	r2, #33	; 0x21
 800ebf2:	2104      	movs	r1, #4
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	f000 fb57 	bl	800f2a8 <_calloc_r>
 800ebfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebfc:	60f0      	str	r0, [r6, #12]
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d1e4      	bne.n	800ebce <_Balloc+0x2e>
 800ec04:	2000      	movs	r0, #0
 800ec06:	bd70      	pop	{r4, r5, r6, pc}
 800ec08:	6802      	ldr	r2, [r0, #0]
 800ec0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ec0e:	2300      	movs	r3, #0
 800ec10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ec14:	e7f7      	b.n	800ec06 <_Balloc+0x66>
 800ec16:	bf00      	nop
 800ec18:	080104a5 	.word	0x080104a5
 800ec1c:	08010588 	.word	0x08010588

0800ec20 <_Bfree>:
 800ec20:	b570      	push	{r4, r5, r6, lr}
 800ec22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ec24:	4605      	mov	r5, r0
 800ec26:	460c      	mov	r4, r1
 800ec28:	b976      	cbnz	r6, 800ec48 <_Bfree+0x28>
 800ec2a:	2010      	movs	r0, #16
 800ec2c:	f7fe fa5a 	bl	800d0e4 <malloc>
 800ec30:	4602      	mov	r2, r0
 800ec32:	6268      	str	r0, [r5, #36]	; 0x24
 800ec34:	b920      	cbnz	r0, 800ec40 <_Bfree+0x20>
 800ec36:	4b09      	ldr	r3, [pc, #36]	; (800ec5c <_Bfree+0x3c>)
 800ec38:	4809      	ldr	r0, [pc, #36]	; (800ec60 <_Bfree+0x40>)
 800ec3a:	218a      	movs	r1, #138	; 0x8a
 800ec3c:	f000 ff16 	bl	800fa6c <__assert_func>
 800ec40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec44:	6006      	str	r6, [r0, #0]
 800ec46:	60c6      	str	r6, [r0, #12]
 800ec48:	b13c      	cbz	r4, 800ec5a <_Bfree+0x3a>
 800ec4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ec4c:	6862      	ldr	r2, [r4, #4]
 800ec4e:	68db      	ldr	r3, [r3, #12]
 800ec50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec54:	6021      	str	r1, [r4, #0]
 800ec56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ec5a:	bd70      	pop	{r4, r5, r6, pc}
 800ec5c:	080104a5 	.word	0x080104a5
 800ec60:	08010588 	.word	0x08010588

0800ec64 <__multadd>:
 800ec64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec68:	690d      	ldr	r5, [r1, #16]
 800ec6a:	4607      	mov	r7, r0
 800ec6c:	460c      	mov	r4, r1
 800ec6e:	461e      	mov	r6, r3
 800ec70:	f101 0c14 	add.w	ip, r1, #20
 800ec74:	2000      	movs	r0, #0
 800ec76:	f8dc 3000 	ldr.w	r3, [ip]
 800ec7a:	b299      	uxth	r1, r3
 800ec7c:	fb02 6101 	mla	r1, r2, r1, r6
 800ec80:	0c1e      	lsrs	r6, r3, #16
 800ec82:	0c0b      	lsrs	r3, r1, #16
 800ec84:	fb02 3306 	mla	r3, r2, r6, r3
 800ec88:	b289      	uxth	r1, r1
 800ec8a:	3001      	adds	r0, #1
 800ec8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ec90:	4285      	cmp	r5, r0
 800ec92:	f84c 1b04 	str.w	r1, [ip], #4
 800ec96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ec9a:	dcec      	bgt.n	800ec76 <__multadd+0x12>
 800ec9c:	b30e      	cbz	r6, 800ece2 <__multadd+0x7e>
 800ec9e:	68a3      	ldr	r3, [r4, #8]
 800eca0:	42ab      	cmp	r3, r5
 800eca2:	dc19      	bgt.n	800ecd8 <__multadd+0x74>
 800eca4:	6861      	ldr	r1, [r4, #4]
 800eca6:	4638      	mov	r0, r7
 800eca8:	3101      	adds	r1, #1
 800ecaa:	f7ff ff79 	bl	800eba0 <_Balloc>
 800ecae:	4680      	mov	r8, r0
 800ecb0:	b928      	cbnz	r0, 800ecbe <__multadd+0x5a>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	4b0c      	ldr	r3, [pc, #48]	; (800ece8 <__multadd+0x84>)
 800ecb6:	480d      	ldr	r0, [pc, #52]	; (800ecec <__multadd+0x88>)
 800ecb8:	21b5      	movs	r1, #181	; 0xb5
 800ecba:	f000 fed7 	bl	800fa6c <__assert_func>
 800ecbe:	6922      	ldr	r2, [r4, #16]
 800ecc0:	3202      	adds	r2, #2
 800ecc2:	f104 010c 	add.w	r1, r4, #12
 800ecc6:	0092      	lsls	r2, r2, #2
 800ecc8:	300c      	adds	r0, #12
 800ecca:	f7fe fa1b 	bl	800d104 <memcpy>
 800ecce:	4621      	mov	r1, r4
 800ecd0:	4638      	mov	r0, r7
 800ecd2:	f7ff ffa5 	bl	800ec20 <_Bfree>
 800ecd6:	4644      	mov	r4, r8
 800ecd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ecdc:	3501      	adds	r5, #1
 800ecde:	615e      	str	r6, [r3, #20]
 800ece0:	6125      	str	r5, [r4, #16]
 800ece2:	4620      	mov	r0, r4
 800ece4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ece8:	08010517 	.word	0x08010517
 800ecec:	08010588 	.word	0x08010588

0800ecf0 <__hi0bits>:
 800ecf0:	0c03      	lsrs	r3, r0, #16
 800ecf2:	041b      	lsls	r3, r3, #16
 800ecf4:	b9d3      	cbnz	r3, 800ed2c <__hi0bits+0x3c>
 800ecf6:	0400      	lsls	r0, r0, #16
 800ecf8:	2310      	movs	r3, #16
 800ecfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ecfe:	bf04      	itt	eq
 800ed00:	0200      	lsleq	r0, r0, #8
 800ed02:	3308      	addeq	r3, #8
 800ed04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ed08:	bf04      	itt	eq
 800ed0a:	0100      	lsleq	r0, r0, #4
 800ed0c:	3304      	addeq	r3, #4
 800ed0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ed12:	bf04      	itt	eq
 800ed14:	0080      	lsleq	r0, r0, #2
 800ed16:	3302      	addeq	r3, #2
 800ed18:	2800      	cmp	r0, #0
 800ed1a:	db05      	blt.n	800ed28 <__hi0bits+0x38>
 800ed1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ed20:	f103 0301 	add.w	r3, r3, #1
 800ed24:	bf08      	it	eq
 800ed26:	2320      	moveq	r3, #32
 800ed28:	4618      	mov	r0, r3
 800ed2a:	4770      	bx	lr
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	e7e4      	b.n	800ecfa <__hi0bits+0xa>

0800ed30 <__lo0bits>:
 800ed30:	6803      	ldr	r3, [r0, #0]
 800ed32:	f013 0207 	ands.w	r2, r3, #7
 800ed36:	4601      	mov	r1, r0
 800ed38:	d00b      	beq.n	800ed52 <__lo0bits+0x22>
 800ed3a:	07da      	lsls	r2, r3, #31
 800ed3c:	d423      	bmi.n	800ed86 <__lo0bits+0x56>
 800ed3e:	0798      	lsls	r0, r3, #30
 800ed40:	bf49      	itett	mi
 800ed42:	085b      	lsrmi	r3, r3, #1
 800ed44:	089b      	lsrpl	r3, r3, #2
 800ed46:	2001      	movmi	r0, #1
 800ed48:	600b      	strmi	r3, [r1, #0]
 800ed4a:	bf5c      	itt	pl
 800ed4c:	600b      	strpl	r3, [r1, #0]
 800ed4e:	2002      	movpl	r0, #2
 800ed50:	4770      	bx	lr
 800ed52:	b298      	uxth	r0, r3
 800ed54:	b9a8      	cbnz	r0, 800ed82 <__lo0bits+0x52>
 800ed56:	0c1b      	lsrs	r3, r3, #16
 800ed58:	2010      	movs	r0, #16
 800ed5a:	b2da      	uxtb	r2, r3
 800ed5c:	b90a      	cbnz	r2, 800ed62 <__lo0bits+0x32>
 800ed5e:	3008      	adds	r0, #8
 800ed60:	0a1b      	lsrs	r3, r3, #8
 800ed62:	071a      	lsls	r2, r3, #28
 800ed64:	bf04      	itt	eq
 800ed66:	091b      	lsreq	r3, r3, #4
 800ed68:	3004      	addeq	r0, #4
 800ed6a:	079a      	lsls	r2, r3, #30
 800ed6c:	bf04      	itt	eq
 800ed6e:	089b      	lsreq	r3, r3, #2
 800ed70:	3002      	addeq	r0, #2
 800ed72:	07da      	lsls	r2, r3, #31
 800ed74:	d403      	bmi.n	800ed7e <__lo0bits+0x4e>
 800ed76:	085b      	lsrs	r3, r3, #1
 800ed78:	f100 0001 	add.w	r0, r0, #1
 800ed7c:	d005      	beq.n	800ed8a <__lo0bits+0x5a>
 800ed7e:	600b      	str	r3, [r1, #0]
 800ed80:	4770      	bx	lr
 800ed82:	4610      	mov	r0, r2
 800ed84:	e7e9      	b.n	800ed5a <__lo0bits+0x2a>
 800ed86:	2000      	movs	r0, #0
 800ed88:	4770      	bx	lr
 800ed8a:	2020      	movs	r0, #32
 800ed8c:	4770      	bx	lr
	...

0800ed90 <__i2b>:
 800ed90:	b510      	push	{r4, lr}
 800ed92:	460c      	mov	r4, r1
 800ed94:	2101      	movs	r1, #1
 800ed96:	f7ff ff03 	bl	800eba0 <_Balloc>
 800ed9a:	4602      	mov	r2, r0
 800ed9c:	b928      	cbnz	r0, 800edaa <__i2b+0x1a>
 800ed9e:	4b05      	ldr	r3, [pc, #20]	; (800edb4 <__i2b+0x24>)
 800eda0:	4805      	ldr	r0, [pc, #20]	; (800edb8 <__i2b+0x28>)
 800eda2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800eda6:	f000 fe61 	bl	800fa6c <__assert_func>
 800edaa:	2301      	movs	r3, #1
 800edac:	6144      	str	r4, [r0, #20]
 800edae:	6103      	str	r3, [r0, #16]
 800edb0:	bd10      	pop	{r4, pc}
 800edb2:	bf00      	nop
 800edb4:	08010517 	.word	0x08010517
 800edb8:	08010588 	.word	0x08010588

0800edbc <__multiply>:
 800edbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edc0:	4691      	mov	r9, r2
 800edc2:	690a      	ldr	r2, [r1, #16]
 800edc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800edc8:	429a      	cmp	r2, r3
 800edca:	bfb8      	it	lt
 800edcc:	460b      	movlt	r3, r1
 800edce:	460c      	mov	r4, r1
 800edd0:	bfbc      	itt	lt
 800edd2:	464c      	movlt	r4, r9
 800edd4:	4699      	movlt	r9, r3
 800edd6:	6927      	ldr	r7, [r4, #16]
 800edd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eddc:	68a3      	ldr	r3, [r4, #8]
 800edde:	6861      	ldr	r1, [r4, #4]
 800ede0:	eb07 060a 	add.w	r6, r7, sl
 800ede4:	42b3      	cmp	r3, r6
 800ede6:	b085      	sub	sp, #20
 800ede8:	bfb8      	it	lt
 800edea:	3101      	addlt	r1, #1
 800edec:	f7ff fed8 	bl	800eba0 <_Balloc>
 800edf0:	b930      	cbnz	r0, 800ee00 <__multiply+0x44>
 800edf2:	4602      	mov	r2, r0
 800edf4:	4b44      	ldr	r3, [pc, #272]	; (800ef08 <__multiply+0x14c>)
 800edf6:	4845      	ldr	r0, [pc, #276]	; (800ef0c <__multiply+0x150>)
 800edf8:	f240 115d 	movw	r1, #349	; 0x15d
 800edfc:	f000 fe36 	bl	800fa6c <__assert_func>
 800ee00:	f100 0514 	add.w	r5, r0, #20
 800ee04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ee08:	462b      	mov	r3, r5
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	4543      	cmp	r3, r8
 800ee0e:	d321      	bcc.n	800ee54 <__multiply+0x98>
 800ee10:	f104 0314 	add.w	r3, r4, #20
 800ee14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ee18:	f109 0314 	add.w	r3, r9, #20
 800ee1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ee20:	9202      	str	r2, [sp, #8]
 800ee22:	1b3a      	subs	r2, r7, r4
 800ee24:	3a15      	subs	r2, #21
 800ee26:	f022 0203 	bic.w	r2, r2, #3
 800ee2a:	3204      	adds	r2, #4
 800ee2c:	f104 0115 	add.w	r1, r4, #21
 800ee30:	428f      	cmp	r7, r1
 800ee32:	bf38      	it	cc
 800ee34:	2204      	movcc	r2, #4
 800ee36:	9201      	str	r2, [sp, #4]
 800ee38:	9a02      	ldr	r2, [sp, #8]
 800ee3a:	9303      	str	r3, [sp, #12]
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d80c      	bhi.n	800ee5a <__multiply+0x9e>
 800ee40:	2e00      	cmp	r6, #0
 800ee42:	dd03      	ble.n	800ee4c <__multiply+0x90>
 800ee44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d05a      	beq.n	800ef02 <__multiply+0x146>
 800ee4c:	6106      	str	r6, [r0, #16]
 800ee4e:	b005      	add	sp, #20
 800ee50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee54:	f843 2b04 	str.w	r2, [r3], #4
 800ee58:	e7d8      	b.n	800ee0c <__multiply+0x50>
 800ee5a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ee5e:	f1ba 0f00 	cmp.w	sl, #0
 800ee62:	d024      	beq.n	800eeae <__multiply+0xf2>
 800ee64:	f104 0e14 	add.w	lr, r4, #20
 800ee68:	46a9      	mov	r9, r5
 800ee6a:	f04f 0c00 	mov.w	ip, #0
 800ee6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ee72:	f8d9 1000 	ldr.w	r1, [r9]
 800ee76:	fa1f fb82 	uxth.w	fp, r2
 800ee7a:	b289      	uxth	r1, r1
 800ee7c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ee80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ee84:	f8d9 2000 	ldr.w	r2, [r9]
 800ee88:	4461      	add	r1, ip
 800ee8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ee8e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ee92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ee96:	b289      	uxth	r1, r1
 800ee98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ee9c:	4577      	cmp	r7, lr
 800ee9e:	f849 1b04 	str.w	r1, [r9], #4
 800eea2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eea6:	d8e2      	bhi.n	800ee6e <__multiply+0xb2>
 800eea8:	9a01      	ldr	r2, [sp, #4]
 800eeaa:	f845 c002 	str.w	ip, [r5, r2]
 800eeae:	9a03      	ldr	r2, [sp, #12]
 800eeb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eeb4:	3304      	adds	r3, #4
 800eeb6:	f1b9 0f00 	cmp.w	r9, #0
 800eeba:	d020      	beq.n	800eefe <__multiply+0x142>
 800eebc:	6829      	ldr	r1, [r5, #0]
 800eebe:	f104 0c14 	add.w	ip, r4, #20
 800eec2:	46ae      	mov	lr, r5
 800eec4:	f04f 0a00 	mov.w	sl, #0
 800eec8:	f8bc b000 	ldrh.w	fp, [ip]
 800eecc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eed0:	fb09 220b 	mla	r2, r9, fp, r2
 800eed4:	4492      	add	sl, r2
 800eed6:	b289      	uxth	r1, r1
 800eed8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800eedc:	f84e 1b04 	str.w	r1, [lr], #4
 800eee0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eee4:	f8be 1000 	ldrh.w	r1, [lr]
 800eee8:	0c12      	lsrs	r2, r2, #16
 800eeea:	fb09 1102 	mla	r1, r9, r2, r1
 800eeee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800eef2:	4567      	cmp	r7, ip
 800eef4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eef8:	d8e6      	bhi.n	800eec8 <__multiply+0x10c>
 800eefa:	9a01      	ldr	r2, [sp, #4]
 800eefc:	50a9      	str	r1, [r5, r2]
 800eefe:	3504      	adds	r5, #4
 800ef00:	e79a      	b.n	800ee38 <__multiply+0x7c>
 800ef02:	3e01      	subs	r6, #1
 800ef04:	e79c      	b.n	800ee40 <__multiply+0x84>
 800ef06:	bf00      	nop
 800ef08:	08010517 	.word	0x08010517
 800ef0c:	08010588 	.word	0x08010588

0800ef10 <__pow5mult>:
 800ef10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef14:	4615      	mov	r5, r2
 800ef16:	f012 0203 	ands.w	r2, r2, #3
 800ef1a:	4606      	mov	r6, r0
 800ef1c:	460f      	mov	r7, r1
 800ef1e:	d007      	beq.n	800ef30 <__pow5mult+0x20>
 800ef20:	4c25      	ldr	r4, [pc, #148]	; (800efb8 <__pow5mult+0xa8>)
 800ef22:	3a01      	subs	r2, #1
 800ef24:	2300      	movs	r3, #0
 800ef26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ef2a:	f7ff fe9b 	bl	800ec64 <__multadd>
 800ef2e:	4607      	mov	r7, r0
 800ef30:	10ad      	asrs	r5, r5, #2
 800ef32:	d03d      	beq.n	800efb0 <__pow5mult+0xa0>
 800ef34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ef36:	b97c      	cbnz	r4, 800ef58 <__pow5mult+0x48>
 800ef38:	2010      	movs	r0, #16
 800ef3a:	f7fe f8d3 	bl	800d0e4 <malloc>
 800ef3e:	4602      	mov	r2, r0
 800ef40:	6270      	str	r0, [r6, #36]	; 0x24
 800ef42:	b928      	cbnz	r0, 800ef50 <__pow5mult+0x40>
 800ef44:	4b1d      	ldr	r3, [pc, #116]	; (800efbc <__pow5mult+0xac>)
 800ef46:	481e      	ldr	r0, [pc, #120]	; (800efc0 <__pow5mult+0xb0>)
 800ef48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ef4c:	f000 fd8e 	bl	800fa6c <__assert_func>
 800ef50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ef54:	6004      	str	r4, [r0, #0]
 800ef56:	60c4      	str	r4, [r0, #12]
 800ef58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ef5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ef60:	b94c      	cbnz	r4, 800ef76 <__pow5mult+0x66>
 800ef62:	f240 2171 	movw	r1, #625	; 0x271
 800ef66:	4630      	mov	r0, r6
 800ef68:	f7ff ff12 	bl	800ed90 <__i2b>
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ef72:	4604      	mov	r4, r0
 800ef74:	6003      	str	r3, [r0, #0]
 800ef76:	f04f 0900 	mov.w	r9, #0
 800ef7a:	07eb      	lsls	r3, r5, #31
 800ef7c:	d50a      	bpl.n	800ef94 <__pow5mult+0x84>
 800ef7e:	4639      	mov	r1, r7
 800ef80:	4622      	mov	r2, r4
 800ef82:	4630      	mov	r0, r6
 800ef84:	f7ff ff1a 	bl	800edbc <__multiply>
 800ef88:	4639      	mov	r1, r7
 800ef8a:	4680      	mov	r8, r0
 800ef8c:	4630      	mov	r0, r6
 800ef8e:	f7ff fe47 	bl	800ec20 <_Bfree>
 800ef92:	4647      	mov	r7, r8
 800ef94:	106d      	asrs	r5, r5, #1
 800ef96:	d00b      	beq.n	800efb0 <__pow5mult+0xa0>
 800ef98:	6820      	ldr	r0, [r4, #0]
 800ef9a:	b938      	cbnz	r0, 800efac <__pow5mult+0x9c>
 800ef9c:	4622      	mov	r2, r4
 800ef9e:	4621      	mov	r1, r4
 800efa0:	4630      	mov	r0, r6
 800efa2:	f7ff ff0b 	bl	800edbc <__multiply>
 800efa6:	6020      	str	r0, [r4, #0]
 800efa8:	f8c0 9000 	str.w	r9, [r0]
 800efac:	4604      	mov	r4, r0
 800efae:	e7e4      	b.n	800ef7a <__pow5mult+0x6a>
 800efb0:	4638      	mov	r0, r7
 800efb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efb6:	bf00      	nop
 800efb8:	080106d8 	.word	0x080106d8
 800efbc:	080104a5 	.word	0x080104a5
 800efc0:	08010588 	.word	0x08010588

0800efc4 <__lshift>:
 800efc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efc8:	460c      	mov	r4, r1
 800efca:	6849      	ldr	r1, [r1, #4]
 800efcc:	6923      	ldr	r3, [r4, #16]
 800efce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800efd2:	68a3      	ldr	r3, [r4, #8]
 800efd4:	4607      	mov	r7, r0
 800efd6:	4691      	mov	r9, r2
 800efd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800efdc:	f108 0601 	add.w	r6, r8, #1
 800efe0:	42b3      	cmp	r3, r6
 800efe2:	db0b      	blt.n	800effc <__lshift+0x38>
 800efe4:	4638      	mov	r0, r7
 800efe6:	f7ff fddb 	bl	800eba0 <_Balloc>
 800efea:	4605      	mov	r5, r0
 800efec:	b948      	cbnz	r0, 800f002 <__lshift+0x3e>
 800efee:	4602      	mov	r2, r0
 800eff0:	4b2a      	ldr	r3, [pc, #168]	; (800f09c <__lshift+0xd8>)
 800eff2:	482b      	ldr	r0, [pc, #172]	; (800f0a0 <__lshift+0xdc>)
 800eff4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800eff8:	f000 fd38 	bl	800fa6c <__assert_func>
 800effc:	3101      	adds	r1, #1
 800effe:	005b      	lsls	r3, r3, #1
 800f000:	e7ee      	b.n	800efe0 <__lshift+0x1c>
 800f002:	2300      	movs	r3, #0
 800f004:	f100 0114 	add.w	r1, r0, #20
 800f008:	f100 0210 	add.w	r2, r0, #16
 800f00c:	4618      	mov	r0, r3
 800f00e:	4553      	cmp	r3, sl
 800f010:	db37      	blt.n	800f082 <__lshift+0xbe>
 800f012:	6920      	ldr	r0, [r4, #16]
 800f014:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f018:	f104 0314 	add.w	r3, r4, #20
 800f01c:	f019 091f 	ands.w	r9, r9, #31
 800f020:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f024:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f028:	d02f      	beq.n	800f08a <__lshift+0xc6>
 800f02a:	f1c9 0e20 	rsb	lr, r9, #32
 800f02e:	468a      	mov	sl, r1
 800f030:	f04f 0c00 	mov.w	ip, #0
 800f034:	681a      	ldr	r2, [r3, #0]
 800f036:	fa02 f209 	lsl.w	r2, r2, r9
 800f03a:	ea42 020c 	orr.w	r2, r2, ip
 800f03e:	f84a 2b04 	str.w	r2, [sl], #4
 800f042:	f853 2b04 	ldr.w	r2, [r3], #4
 800f046:	4298      	cmp	r0, r3
 800f048:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f04c:	d8f2      	bhi.n	800f034 <__lshift+0x70>
 800f04e:	1b03      	subs	r3, r0, r4
 800f050:	3b15      	subs	r3, #21
 800f052:	f023 0303 	bic.w	r3, r3, #3
 800f056:	3304      	adds	r3, #4
 800f058:	f104 0215 	add.w	r2, r4, #21
 800f05c:	4290      	cmp	r0, r2
 800f05e:	bf38      	it	cc
 800f060:	2304      	movcc	r3, #4
 800f062:	f841 c003 	str.w	ip, [r1, r3]
 800f066:	f1bc 0f00 	cmp.w	ip, #0
 800f06a:	d001      	beq.n	800f070 <__lshift+0xac>
 800f06c:	f108 0602 	add.w	r6, r8, #2
 800f070:	3e01      	subs	r6, #1
 800f072:	4638      	mov	r0, r7
 800f074:	612e      	str	r6, [r5, #16]
 800f076:	4621      	mov	r1, r4
 800f078:	f7ff fdd2 	bl	800ec20 <_Bfree>
 800f07c:	4628      	mov	r0, r5
 800f07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f082:	f842 0f04 	str.w	r0, [r2, #4]!
 800f086:	3301      	adds	r3, #1
 800f088:	e7c1      	b.n	800f00e <__lshift+0x4a>
 800f08a:	3904      	subs	r1, #4
 800f08c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f090:	f841 2f04 	str.w	r2, [r1, #4]!
 800f094:	4298      	cmp	r0, r3
 800f096:	d8f9      	bhi.n	800f08c <__lshift+0xc8>
 800f098:	e7ea      	b.n	800f070 <__lshift+0xac>
 800f09a:	bf00      	nop
 800f09c:	08010517 	.word	0x08010517
 800f0a0:	08010588 	.word	0x08010588

0800f0a4 <__mcmp>:
 800f0a4:	b530      	push	{r4, r5, lr}
 800f0a6:	6902      	ldr	r2, [r0, #16]
 800f0a8:	690c      	ldr	r4, [r1, #16]
 800f0aa:	1b12      	subs	r2, r2, r4
 800f0ac:	d10e      	bne.n	800f0cc <__mcmp+0x28>
 800f0ae:	f100 0314 	add.w	r3, r0, #20
 800f0b2:	3114      	adds	r1, #20
 800f0b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f0b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f0bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f0c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f0c4:	42a5      	cmp	r5, r4
 800f0c6:	d003      	beq.n	800f0d0 <__mcmp+0x2c>
 800f0c8:	d305      	bcc.n	800f0d6 <__mcmp+0x32>
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	4610      	mov	r0, r2
 800f0ce:	bd30      	pop	{r4, r5, pc}
 800f0d0:	4283      	cmp	r3, r0
 800f0d2:	d3f3      	bcc.n	800f0bc <__mcmp+0x18>
 800f0d4:	e7fa      	b.n	800f0cc <__mcmp+0x28>
 800f0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f0da:	e7f7      	b.n	800f0cc <__mcmp+0x28>

0800f0dc <__mdiff>:
 800f0dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0e0:	460c      	mov	r4, r1
 800f0e2:	4606      	mov	r6, r0
 800f0e4:	4611      	mov	r1, r2
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	4690      	mov	r8, r2
 800f0ea:	f7ff ffdb 	bl	800f0a4 <__mcmp>
 800f0ee:	1e05      	subs	r5, r0, #0
 800f0f0:	d110      	bne.n	800f114 <__mdiff+0x38>
 800f0f2:	4629      	mov	r1, r5
 800f0f4:	4630      	mov	r0, r6
 800f0f6:	f7ff fd53 	bl	800eba0 <_Balloc>
 800f0fa:	b930      	cbnz	r0, 800f10a <__mdiff+0x2e>
 800f0fc:	4b3a      	ldr	r3, [pc, #232]	; (800f1e8 <__mdiff+0x10c>)
 800f0fe:	4602      	mov	r2, r0
 800f100:	f240 2132 	movw	r1, #562	; 0x232
 800f104:	4839      	ldr	r0, [pc, #228]	; (800f1ec <__mdiff+0x110>)
 800f106:	f000 fcb1 	bl	800fa6c <__assert_func>
 800f10a:	2301      	movs	r3, #1
 800f10c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f114:	bfa4      	itt	ge
 800f116:	4643      	movge	r3, r8
 800f118:	46a0      	movge	r8, r4
 800f11a:	4630      	mov	r0, r6
 800f11c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f120:	bfa6      	itte	ge
 800f122:	461c      	movge	r4, r3
 800f124:	2500      	movge	r5, #0
 800f126:	2501      	movlt	r5, #1
 800f128:	f7ff fd3a 	bl	800eba0 <_Balloc>
 800f12c:	b920      	cbnz	r0, 800f138 <__mdiff+0x5c>
 800f12e:	4b2e      	ldr	r3, [pc, #184]	; (800f1e8 <__mdiff+0x10c>)
 800f130:	4602      	mov	r2, r0
 800f132:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f136:	e7e5      	b.n	800f104 <__mdiff+0x28>
 800f138:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f13c:	6926      	ldr	r6, [r4, #16]
 800f13e:	60c5      	str	r5, [r0, #12]
 800f140:	f104 0914 	add.w	r9, r4, #20
 800f144:	f108 0514 	add.w	r5, r8, #20
 800f148:	f100 0e14 	add.w	lr, r0, #20
 800f14c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f150:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f154:	f108 0210 	add.w	r2, r8, #16
 800f158:	46f2      	mov	sl, lr
 800f15a:	2100      	movs	r1, #0
 800f15c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f160:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f164:	fa1f f883 	uxth.w	r8, r3
 800f168:	fa11 f18b 	uxtah	r1, r1, fp
 800f16c:	0c1b      	lsrs	r3, r3, #16
 800f16e:	eba1 0808 	sub.w	r8, r1, r8
 800f172:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f176:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f17a:	fa1f f888 	uxth.w	r8, r8
 800f17e:	1419      	asrs	r1, r3, #16
 800f180:	454e      	cmp	r6, r9
 800f182:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f186:	f84a 3b04 	str.w	r3, [sl], #4
 800f18a:	d8e7      	bhi.n	800f15c <__mdiff+0x80>
 800f18c:	1b33      	subs	r3, r6, r4
 800f18e:	3b15      	subs	r3, #21
 800f190:	f023 0303 	bic.w	r3, r3, #3
 800f194:	3304      	adds	r3, #4
 800f196:	3415      	adds	r4, #21
 800f198:	42a6      	cmp	r6, r4
 800f19a:	bf38      	it	cc
 800f19c:	2304      	movcc	r3, #4
 800f19e:	441d      	add	r5, r3
 800f1a0:	4473      	add	r3, lr
 800f1a2:	469e      	mov	lr, r3
 800f1a4:	462e      	mov	r6, r5
 800f1a6:	4566      	cmp	r6, ip
 800f1a8:	d30e      	bcc.n	800f1c8 <__mdiff+0xec>
 800f1aa:	f10c 0203 	add.w	r2, ip, #3
 800f1ae:	1b52      	subs	r2, r2, r5
 800f1b0:	f022 0203 	bic.w	r2, r2, #3
 800f1b4:	3d03      	subs	r5, #3
 800f1b6:	45ac      	cmp	ip, r5
 800f1b8:	bf38      	it	cc
 800f1ba:	2200      	movcc	r2, #0
 800f1bc:	441a      	add	r2, r3
 800f1be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f1c2:	b17b      	cbz	r3, 800f1e4 <__mdiff+0x108>
 800f1c4:	6107      	str	r7, [r0, #16]
 800f1c6:	e7a3      	b.n	800f110 <__mdiff+0x34>
 800f1c8:	f856 8b04 	ldr.w	r8, [r6], #4
 800f1cc:	fa11 f288 	uxtah	r2, r1, r8
 800f1d0:	1414      	asrs	r4, r2, #16
 800f1d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f1d6:	b292      	uxth	r2, r2
 800f1d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f1dc:	f84e 2b04 	str.w	r2, [lr], #4
 800f1e0:	1421      	asrs	r1, r4, #16
 800f1e2:	e7e0      	b.n	800f1a6 <__mdiff+0xca>
 800f1e4:	3f01      	subs	r7, #1
 800f1e6:	e7ea      	b.n	800f1be <__mdiff+0xe2>
 800f1e8:	08010517 	.word	0x08010517
 800f1ec:	08010588 	.word	0x08010588

0800f1f0 <__d2b>:
 800f1f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f1f4:	4689      	mov	r9, r1
 800f1f6:	2101      	movs	r1, #1
 800f1f8:	ec57 6b10 	vmov	r6, r7, d0
 800f1fc:	4690      	mov	r8, r2
 800f1fe:	f7ff fccf 	bl	800eba0 <_Balloc>
 800f202:	4604      	mov	r4, r0
 800f204:	b930      	cbnz	r0, 800f214 <__d2b+0x24>
 800f206:	4602      	mov	r2, r0
 800f208:	4b25      	ldr	r3, [pc, #148]	; (800f2a0 <__d2b+0xb0>)
 800f20a:	4826      	ldr	r0, [pc, #152]	; (800f2a4 <__d2b+0xb4>)
 800f20c:	f240 310a 	movw	r1, #778	; 0x30a
 800f210:	f000 fc2c 	bl	800fa6c <__assert_func>
 800f214:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f218:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f21c:	bb35      	cbnz	r5, 800f26c <__d2b+0x7c>
 800f21e:	2e00      	cmp	r6, #0
 800f220:	9301      	str	r3, [sp, #4]
 800f222:	d028      	beq.n	800f276 <__d2b+0x86>
 800f224:	4668      	mov	r0, sp
 800f226:	9600      	str	r6, [sp, #0]
 800f228:	f7ff fd82 	bl	800ed30 <__lo0bits>
 800f22c:	9900      	ldr	r1, [sp, #0]
 800f22e:	b300      	cbz	r0, 800f272 <__d2b+0x82>
 800f230:	9a01      	ldr	r2, [sp, #4]
 800f232:	f1c0 0320 	rsb	r3, r0, #32
 800f236:	fa02 f303 	lsl.w	r3, r2, r3
 800f23a:	430b      	orrs	r3, r1
 800f23c:	40c2      	lsrs	r2, r0
 800f23e:	6163      	str	r3, [r4, #20]
 800f240:	9201      	str	r2, [sp, #4]
 800f242:	9b01      	ldr	r3, [sp, #4]
 800f244:	61a3      	str	r3, [r4, #24]
 800f246:	2b00      	cmp	r3, #0
 800f248:	bf14      	ite	ne
 800f24a:	2202      	movne	r2, #2
 800f24c:	2201      	moveq	r2, #1
 800f24e:	6122      	str	r2, [r4, #16]
 800f250:	b1d5      	cbz	r5, 800f288 <__d2b+0x98>
 800f252:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f256:	4405      	add	r5, r0
 800f258:	f8c9 5000 	str.w	r5, [r9]
 800f25c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f260:	f8c8 0000 	str.w	r0, [r8]
 800f264:	4620      	mov	r0, r4
 800f266:	b003      	add	sp, #12
 800f268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f26c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f270:	e7d5      	b.n	800f21e <__d2b+0x2e>
 800f272:	6161      	str	r1, [r4, #20]
 800f274:	e7e5      	b.n	800f242 <__d2b+0x52>
 800f276:	a801      	add	r0, sp, #4
 800f278:	f7ff fd5a 	bl	800ed30 <__lo0bits>
 800f27c:	9b01      	ldr	r3, [sp, #4]
 800f27e:	6163      	str	r3, [r4, #20]
 800f280:	2201      	movs	r2, #1
 800f282:	6122      	str	r2, [r4, #16]
 800f284:	3020      	adds	r0, #32
 800f286:	e7e3      	b.n	800f250 <__d2b+0x60>
 800f288:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f28c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f290:	f8c9 0000 	str.w	r0, [r9]
 800f294:	6918      	ldr	r0, [r3, #16]
 800f296:	f7ff fd2b 	bl	800ecf0 <__hi0bits>
 800f29a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f29e:	e7df      	b.n	800f260 <__d2b+0x70>
 800f2a0:	08010517 	.word	0x08010517
 800f2a4:	08010588 	.word	0x08010588

0800f2a8 <_calloc_r>:
 800f2a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f2aa:	fba1 2402 	umull	r2, r4, r1, r2
 800f2ae:	b94c      	cbnz	r4, 800f2c4 <_calloc_r+0x1c>
 800f2b0:	4611      	mov	r1, r2
 800f2b2:	9201      	str	r2, [sp, #4]
 800f2b4:	f7fd ffa8 	bl	800d208 <_malloc_r>
 800f2b8:	9a01      	ldr	r2, [sp, #4]
 800f2ba:	4605      	mov	r5, r0
 800f2bc:	b930      	cbnz	r0, 800f2cc <_calloc_r+0x24>
 800f2be:	4628      	mov	r0, r5
 800f2c0:	b003      	add	sp, #12
 800f2c2:	bd30      	pop	{r4, r5, pc}
 800f2c4:	220c      	movs	r2, #12
 800f2c6:	6002      	str	r2, [r0, #0]
 800f2c8:	2500      	movs	r5, #0
 800f2ca:	e7f8      	b.n	800f2be <_calloc_r+0x16>
 800f2cc:	4621      	mov	r1, r4
 800f2ce:	f7fd ff27 	bl	800d120 <memset>
 800f2d2:	e7f4      	b.n	800f2be <_calloc_r+0x16>

0800f2d4 <__ssputs_r>:
 800f2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2d8:	688e      	ldr	r6, [r1, #8]
 800f2da:	429e      	cmp	r6, r3
 800f2dc:	4682      	mov	sl, r0
 800f2de:	460c      	mov	r4, r1
 800f2e0:	4690      	mov	r8, r2
 800f2e2:	461f      	mov	r7, r3
 800f2e4:	d838      	bhi.n	800f358 <__ssputs_r+0x84>
 800f2e6:	898a      	ldrh	r2, [r1, #12]
 800f2e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f2ec:	d032      	beq.n	800f354 <__ssputs_r+0x80>
 800f2ee:	6825      	ldr	r5, [r4, #0]
 800f2f0:	6909      	ldr	r1, [r1, #16]
 800f2f2:	eba5 0901 	sub.w	r9, r5, r1
 800f2f6:	6965      	ldr	r5, [r4, #20]
 800f2f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f2fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f300:	3301      	adds	r3, #1
 800f302:	444b      	add	r3, r9
 800f304:	106d      	asrs	r5, r5, #1
 800f306:	429d      	cmp	r5, r3
 800f308:	bf38      	it	cc
 800f30a:	461d      	movcc	r5, r3
 800f30c:	0553      	lsls	r3, r2, #21
 800f30e:	d531      	bpl.n	800f374 <__ssputs_r+0xa0>
 800f310:	4629      	mov	r1, r5
 800f312:	f7fd ff79 	bl	800d208 <_malloc_r>
 800f316:	4606      	mov	r6, r0
 800f318:	b950      	cbnz	r0, 800f330 <__ssputs_r+0x5c>
 800f31a:	230c      	movs	r3, #12
 800f31c:	f8ca 3000 	str.w	r3, [sl]
 800f320:	89a3      	ldrh	r3, [r4, #12]
 800f322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f326:	81a3      	strh	r3, [r4, #12]
 800f328:	f04f 30ff 	mov.w	r0, #4294967295
 800f32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f330:	6921      	ldr	r1, [r4, #16]
 800f332:	464a      	mov	r2, r9
 800f334:	f7fd fee6 	bl	800d104 <memcpy>
 800f338:	89a3      	ldrh	r3, [r4, #12]
 800f33a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f33e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f342:	81a3      	strh	r3, [r4, #12]
 800f344:	6126      	str	r6, [r4, #16]
 800f346:	6165      	str	r5, [r4, #20]
 800f348:	444e      	add	r6, r9
 800f34a:	eba5 0509 	sub.w	r5, r5, r9
 800f34e:	6026      	str	r6, [r4, #0]
 800f350:	60a5      	str	r5, [r4, #8]
 800f352:	463e      	mov	r6, r7
 800f354:	42be      	cmp	r6, r7
 800f356:	d900      	bls.n	800f35a <__ssputs_r+0x86>
 800f358:	463e      	mov	r6, r7
 800f35a:	6820      	ldr	r0, [r4, #0]
 800f35c:	4632      	mov	r2, r6
 800f35e:	4641      	mov	r1, r8
 800f360:	f000 fd10 	bl	800fd84 <memmove>
 800f364:	68a3      	ldr	r3, [r4, #8]
 800f366:	1b9b      	subs	r3, r3, r6
 800f368:	60a3      	str	r3, [r4, #8]
 800f36a:	6823      	ldr	r3, [r4, #0]
 800f36c:	4433      	add	r3, r6
 800f36e:	6023      	str	r3, [r4, #0]
 800f370:	2000      	movs	r0, #0
 800f372:	e7db      	b.n	800f32c <__ssputs_r+0x58>
 800f374:	462a      	mov	r2, r5
 800f376:	f000 fd1f 	bl	800fdb8 <_realloc_r>
 800f37a:	4606      	mov	r6, r0
 800f37c:	2800      	cmp	r0, #0
 800f37e:	d1e1      	bne.n	800f344 <__ssputs_r+0x70>
 800f380:	6921      	ldr	r1, [r4, #16]
 800f382:	4650      	mov	r0, sl
 800f384:	f7fd fed4 	bl	800d130 <_free_r>
 800f388:	e7c7      	b.n	800f31a <__ssputs_r+0x46>
	...

0800f38c <_svfiprintf_r>:
 800f38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f390:	4698      	mov	r8, r3
 800f392:	898b      	ldrh	r3, [r1, #12]
 800f394:	061b      	lsls	r3, r3, #24
 800f396:	b09d      	sub	sp, #116	; 0x74
 800f398:	4607      	mov	r7, r0
 800f39a:	460d      	mov	r5, r1
 800f39c:	4614      	mov	r4, r2
 800f39e:	d50e      	bpl.n	800f3be <_svfiprintf_r+0x32>
 800f3a0:	690b      	ldr	r3, [r1, #16]
 800f3a2:	b963      	cbnz	r3, 800f3be <_svfiprintf_r+0x32>
 800f3a4:	2140      	movs	r1, #64	; 0x40
 800f3a6:	f7fd ff2f 	bl	800d208 <_malloc_r>
 800f3aa:	6028      	str	r0, [r5, #0]
 800f3ac:	6128      	str	r0, [r5, #16]
 800f3ae:	b920      	cbnz	r0, 800f3ba <_svfiprintf_r+0x2e>
 800f3b0:	230c      	movs	r3, #12
 800f3b2:	603b      	str	r3, [r7, #0]
 800f3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3b8:	e0d1      	b.n	800f55e <_svfiprintf_r+0x1d2>
 800f3ba:	2340      	movs	r3, #64	; 0x40
 800f3bc:	616b      	str	r3, [r5, #20]
 800f3be:	2300      	movs	r3, #0
 800f3c0:	9309      	str	r3, [sp, #36]	; 0x24
 800f3c2:	2320      	movs	r3, #32
 800f3c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3cc:	2330      	movs	r3, #48	; 0x30
 800f3ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f578 <_svfiprintf_r+0x1ec>
 800f3d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3d6:	f04f 0901 	mov.w	r9, #1
 800f3da:	4623      	mov	r3, r4
 800f3dc:	469a      	mov	sl, r3
 800f3de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3e2:	b10a      	cbz	r2, 800f3e8 <_svfiprintf_r+0x5c>
 800f3e4:	2a25      	cmp	r2, #37	; 0x25
 800f3e6:	d1f9      	bne.n	800f3dc <_svfiprintf_r+0x50>
 800f3e8:	ebba 0b04 	subs.w	fp, sl, r4
 800f3ec:	d00b      	beq.n	800f406 <_svfiprintf_r+0x7a>
 800f3ee:	465b      	mov	r3, fp
 800f3f0:	4622      	mov	r2, r4
 800f3f2:	4629      	mov	r1, r5
 800f3f4:	4638      	mov	r0, r7
 800f3f6:	f7ff ff6d 	bl	800f2d4 <__ssputs_r>
 800f3fa:	3001      	adds	r0, #1
 800f3fc:	f000 80aa 	beq.w	800f554 <_svfiprintf_r+0x1c8>
 800f400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f402:	445a      	add	r2, fp
 800f404:	9209      	str	r2, [sp, #36]	; 0x24
 800f406:	f89a 3000 	ldrb.w	r3, [sl]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	f000 80a2 	beq.w	800f554 <_svfiprintf_r+0x1c8>
 800f410:	2300      	movs	r3, #0
 800f412:	f04f 32ff 	mov.w	r2, #4294967295
 800f416:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f41a:	f10a 0a01 	add.w	sl, sl, #1
 800f41e:	9304      	str	r3, [sp, #16]
 800f420:	9307      	str	r3, [sp, #28]
 800f422:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f426:	931a      	str	r3, [sp, #104]	; 0x68
 800f428:	4654      	mov	r4, sl
 800f42a:	2205      	movs	r2, #5
 800f42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f430:	4851      	ldr	r0, [pc, #324]	; (800f578 <_svfiprintf_r+0x1ec>)
 800f432:	f7f0 fee5 	bl	8000200 <memchr>
 800f436:	9a04      	ldr	r2, [sp, #16]
 800f438:	b9d8      	cbnz	r0, 800f472 <_svfiprintf_r+0xe6>
 800f43a:	06d0      	lsls	r0, r2, #27
 800f43c:	bf44      	itt	mi
 800f43e:	2320      	movmi	r3, #32
 800f440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f444:	0711      	lsls	r1, r2, #28
 800f446:	bf44      	itt	mi
 800f448:	232b      	movmi	r3, #43	; 0x2b
 800f44a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f44e:	f89a 3000 	ldrb.w	r3, [sl]
 800f452:	2b2a      	cmp	r3, #42	; 0x2a
 800f454:	d015      	beq.n	800f482 <_svfiprintf_r+0xf6>
 800f456:	9a07      	ldr	r2, [sp, #28]
 800f458:	4654      	mov	r4, sl
 800f45a:	2000      	movs	r0, #0
 800f45c:	f04f 0c0a 	mov.w	ip, #10
 800f460:	4621      	mov	r1, r4
 800f462:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f466:	3b30      	subs	r3, #48	; 0x30
 800f468:	2b09      	cmp	r3, #9
 800f46a:	d94e      	bls.n	800f50a <_svfiprintf_r+0x17e>
 800f46c:	b1b0      	cbz	r0, 800f49c <_svfiprintf_r+0x110>
 800f46e:	9207      	str	r2, [sp, #28]
 800f470:	e014      	b.n	800f49c <_svfiprintf_r+0x110>
 800f472:	eba0 0308 	sub.w	r3, r0, r8
 800f476:	fa09 f303 	lsl.w	r3, r9, r3
 800f47a:	4313      	orrs	r3, r2
 800f47c:	9304      	str	r3, [sp, #16]
 800f47e:	46a2      	mov	sl, r4
 800f480:	e7d2      	b.n	800f428 <_svfiprintf_r+0x9c>
 800f482:	9b03      	ldr	r3, [sp, #12]
 800f484:	1d19      	adds	r1, r3, #4
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	9103      	str	r1, [sp, #12]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	bfbb      	ittet	lt
 800f48e:	425b      	neglt	r3, r3
 800f490:	f042 0202 	orrlt.w	r2, r2, #2
 800f494:	9307      	strge	r3, [sp, #28]
 800f496:	9307      	strlt	r3, [sp, #28]
 800f498:	bfb8      	it	lt
 800f49a:	9204      	strlt	r2, [sp, #16]
 800f49c:	7823      	ldrb	r3, [r4, #0]
 800f49e:	2b2e      	cmp	r3, #46	; 0x2e
 800f4a0:	d10c      	bne.n	800f4bc <_svfiprintf_r+0x130>
 800f4a2:	7863      	ldrb	r3, [r4, #1]
 800f4a4:	2b2a      	cmp	r3, #42	; 0x2a
 800f4a6:	d135      	bne.n	800f514 <_svfiprintf_r+0x188>
 800f4a8:	9b03      	ldr	r3, [sp, #12]
 800f4aa:	1d1a      	adds	r2, r3, #4
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	9203      	str	r2, [sp, #12]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	bfb8      	it	lt
 800f4b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4b8:	3402      	adds	r4, #2
 800f4ba:	9305      	str	r3, [sp, #20]
 800f4bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f588 <_svfiprintf_r+0x1fc>
 800f4c0:	7821      	ldrb	r1, [r4, #0]
 800f4c2:	2203      	movs	r2, #3
 800f4c4:	4650      	mov	r0, sl
 800f4c6:	f7f0 fe9b 	bl	8000200 <memchr>
 800f4ca:	b140      	cbz	r0, 800f4de <_svfiprintf_r+0x152>
 800f4cc:	2340      	movs	r3, #64	; 0x40
 800f4ce:	eba0 000a 	sub.w	r0, r0, sl
 800f4d2:	fa03 f000 	lsl.w	r0, r3, r0
 800f4d6:	9b04      	ldr	r3, [sp, #16]
 800f4d8:	4303      	orrs	r3, r0
 800f4da:	3401      	adds	r4, #1
 800f4dc:	9304      	str	r3, [sp, #16]
 800f4de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4e2:	4826      	ldr	r0, [pc, #152]	; (800f57c <_svfiprintf_r+0x1f0>)
 800f4e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4e8:	2206      	movs	r2, #6
 800f4ea:	f7f0 fe89 	bl	8000200 <memchr>
 800f4ee:	2800      	cmp	r0, #0
 800f4f0:	d038      	beq.n	800f564 <_svfiprintf_r+0x1d8>
 800f4f2:	4b23      	ldr	r3, [pc, #140]	; (800f580 <_svfiprintf_r+0x1f4>)
 800f4f4:	bb1b      	cbnz	r3, 800f53e <_svfiprintf_r+0x1b2>
 800f4f6:	9b03      	ldr	r3, [sp, #12]
 800f4f8:	3307      	adds	r3, #7
 800f4fa:	f023 0307 	bic.w	r3, r3, #7
 800f4fe:	3308      	adds	r3, #8
 800f500:	9303      	str	r3, [sp, #12]
 800f502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f504:	4433      	add	r3, r6
 800f506:	9309      	str	r3, [sp, #36]	; 0x24
 800f508:	e767      	b.n	800f3da <_svfiprintf_r+0x4e>
 800f50a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f50e:	460c      	mov	r4, r1
 800f510:	2001      	movs	r0, #1
 800f512:	e7a5      	b.n	800f460 <_svfiprintf_r+0xd4>
 800f514:	2300      	movs	r3, #0
 800f516:	3401      	adds	r4, #1
 800f518:	9305      	str	r3, [sp, #20]
 800f51a:	4619      	mov	r1, r3
 800f51c:	f04f 0c0a 	mov.w	ip, #10
 800f520:	4620      	mov	r0, r4
 800f522:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f526:	3a30      	subs	r2, #48	; 0x30
 800f528:	2a09      	cmp	r2, #9
 800f52a:	d903      	bls.n	800f534 <_svfiprintf_r+0x1a8>
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d0c5      	beq.n	800f4bc <_svfiprintf_r+0x130>
 800f530:	9105      	str	r1, [sp, #20]
 800f532:	e7c3      	b.n	800f4bc <_svfiprintf_r+0x130>
 800f534:	fb0c 2101 	mla	r1, ip, r1, r2
 800f538:	4604      	mov	r4, r0
 800f53a:	2301      	movs	r3, #1
 800f53c:	e7f0      	b.n	800f520 <_svfiprintf_r+0x194>
 800f53e:	ab03      	add	r3, sp, #12
 800f540:	9300      	str	r3, [sp, #0]
 800f542:	462a      	mov	r2, r5
 800f544:	4b0f      	ldr	r3, [pc, #60]	; (800f584 <_svfiprintf_r+0x1f8>)
 800f546:	a904      	add	r1, sp, #16
 800f548:	4638      	mov	r0, r7
 800f54a:	f7fd ff71 	bl	800d430 <_printf_float>
 800f54e:	1c42      	adds	r2, r0, #1
 800f550:	4606      	mov	r6, r0
 800f552:	d1d6      	bne.n	800f502 <_svfiprintf_r+0x176>
 800f554:	89ab      	ldrh	r3, [r5, #12]
 800f556:	065b      	lsls	r3, r3, #25
 800f558:	f53f af2c 	bmi.w	800f3b4 <_svfiprintf_r+0x28>
 800f55c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f55e:	b01d      	add	sp, #116	; 0x74
 800f560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f564:	ab03      	add	r3, sp, #12
 800f566:	9300      	str	r3, [sp, #0]
 800f568:	462a      	mov	r2, r5
 800f56a:	4b06      	ldr	r3, [pc, #24]	; (800f584 <_svfiprintf_r+0x1f8>)
 800f56c:	a904      	add	r1, sp, #16
 800f56e:	4638      	mov	r0, r7
 800f570:	f7fe fa02 	bl	800d978 <_printf_i>
 800f574:	e7eb      	b.n	800f54e <_svfiprintf_r+0x1c2>
 800f576:	bf00      	nop
 800f578:	080106e4 	.word	0x080106e4
 800f57c:	080106ee 	.word	0x080106ee
 800f580:	0800d431 	.word	0x0800d431
 800f584:	0800f2d5 	.word	0x0800f2d5
 800f588:	080106ea 	.word	0x080106ea

0800f58c <__sfputc_r>:
 800f58c:	6893      	ldr	r3, [r2, #8]
 800f58e:	3b01      	subs	r3, #1
 800f590:	2b00      	cmp	r3, #0
 800f592:	b410      	push	{r4}
 800f594:	6093      	str	r3, [r2, #8]
 800f596:	da08      	bge.n	800f5aa <__sfputc_r+0x1e>
 800f598:	6994      	ldr	r4, [r2, #24]
 800f59a:	42a3      	cmp	r3, r4
 800f59c:	db01      	blt.n	800f5a2 <__sfputc_r+0x16>
 800f59e:	290a      	cmp	r1, #10
 800f5a0:	d103      	bne.n	800f5aa <__sfputc_r+0x1e>
 800f5a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5a6:	f000 b98f 	b.w	800f8c8 <__swbuf_r>
 800f5aa:	6813      	ldr	r3, [r2, #0]
 800f5ac:	1c58      	adds	r0, r3, #1
 800f5ae:	6010      	str	r0, [r2, #0]
 800f5b0:	7019      	strb	r1, [r3, #0]
 800f5b2:	4608      	mov	r0, r1
 800f5b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5b8:	4770      	bx	lr

0800f5ba <__sfputs_r>:
 800f5ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5bc:	4606      	mov	r6, r0
 800f5be:	460f      	mov	r7, r1
 800f5c0:	4614      	mov	r4, r2
 800f5c2:	18d5      	adds	r5, r2, r3
 800f5c4:	42ac      	cmp	r4, r5
 800f5c6:	d101      	bne.n	800f5cc <__sfputs_r+0x12>
 800f5c8:	2000      	movs	r0, #0
 800f5ca:	e007      	b.n	800f5dc <__sfputs_r+0x22>
 800f5cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5d0:	463a      	mov	r2, r7
 800f5d2:	4630      	mov	r0, r6
 800f5d4:	f7ff ffda 	bl	800f58c <__sfputc_r>
 800f5d8:	1c43      	adds	r3, r0, #1
 800f5da:	d1f3      	bne.n	800f5c4 <__sfputs_r+0xa>
 800f5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f5e0 <_vfiprintf_r>:
 800f5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5e4:	460d      	mov	r5, r1
 800f5e6:	b09d      	sub	sp, #116	; 0x74
 800f5e8:	4614      	mov	r4, r2
 800f5ea:	4698      	mov	r8, r3
 800f5ec:	4606      	mov	r6, r0
 800f5ee:	b118      	cbz	r0, 800f5f8 <_vfiprintf_r+0x18>
 800f5f0:	6983      	ldr	r3, [r0, #24]
 800f5f2:	b90b      	cbnz	r3, 800f5f8 <_vfiprintf_r+0x18>
 800f5f4:	f7ff fa22 	bl	800ea3c <__sinit>
 800f5f8:	4b89      	ldr	r3, [pc, #548]	; (800f820 <_vfiprintf_r+0x240>)
 800f5fa:	429d      	cmp	r5, r3
 800f5fc:	d11b      	bne.n	800f636 <_vfiprintf_r+0x56>
 800f5fe:	6875      	ldr	r5, [r6, #4]
 800f600:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f602:	07d9      	lsls	r1, r3, #31
 800f604:	d405      	bmi.n	800f612 <_vfiprintf_r+0x32>
 800f606:	89ab      	ldrh	r3, [r5, #12]
 800f608:	059a      	lsls	r2, r3, #22
 800f60a:	d402      	bmi.n	800f612 <_vfiprintf_r+0x32>
 800f60c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f60e:	f7ff fab8 	bl	800eb82 <__retarget_lock_acquire_recursive>
 800f612:	89ab      	ldrh	r3, [r5, #12]
 800f614:	071b      	lsls	r3, r3, #28
 800f616:	d501      	bpl.n	800f61c <_vfiprintf_r+0x3c>
 800f618:	692b      	ldr	r3, [r5, #16]
 800f61a:	b9eb      	cbnz	r3, 800f658 <_vfiprintf_r+0x78>
 800f61c:	4629      	mov	r1, r5
 800f61e:	4630      	mov	r0, r6
 800f620:	f000 f9b6 	bl	800f990 <__swsetup_r>
 800f624:	b1c0      	cbz	r0, 800f658 <_vfiprintf_r+0x78>
 800f626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f628:	07dc      	lsls	r4, r3, #31
 800f62a:	d50e      	bpl.n	800f64a <_vfiprintf_r+0x6a>
 800f62c:	f04f 30ff 	mov.w	r0, #4294967295
 800f630:	b01d      	add	sp, #116	; 0x74
 800f632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f636:	4b7b      	ldr	r3, [pc, #492]	; (800f824 <_vfiprintf_r+0x244>)
 800f638:	429d      	cmp	r5, r3
 800f63a:	d101      	bne.n	800f640 <_vfiprintf_r+0x60>
 800f63c:	68b5      	ldr	r5, [r6, #8]
 800f63e:	e7df      	b.n	800f600 <_vfiprintf_r+0x20>
 800f640:	4b79      	ldr	r3, [pc, #484]	; (800f828 <_vfiprintf_r+0x248>)
 800f642:	429d      	cmp	r5, r3
 800f644:	bf08      	it	eq
 800f646:	68f5      	ldreq	r5, [r6, #12]
 800f648:	e7da      	b.n	800f600 <_vfiprintf_r+0x20>
 800f64a:	89ab      	ldrh	r3, [r5, #12]
 800f64c:	0598      	lsls	r0, r3, #22
 800f64e:	d4ed      	bmi.n	800f62c <_vfiprintf_r+0x4c>
 800f650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f652:	f7ff fa97 	bl	800eb84 <__retarget_lock_release_recursive>
 800f656:	e7e9      	b.n	800f62c <_vfiprintf_r+0x4c>
 800f658:	2300      	movs	r3, #0
 800f65a:	9309      	str	r3, [sp, #36]	; 0x24
 800f65c:	2320      	movs	r3, #32
 800f65e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f662:	f8cd 800c 	str.w	r8, [sp, #12]
 800f666:	2330      	movs	r3, #48	; 0x30
 800f668:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f82c <_vfiprintf_r+0x24c>
 800f66c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f670:	f04f 0901 	mov.w	r9, #1
 800f674:	4623      	mov	r3, r4
 800f676:	469a      	mov	sl, r3
 800f678:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f67c:	b10a      	cbz	r2, 800f682 <_vfiprintf_r+0xa2>
 800f67e:	2a25      	cmp	r2, #37	; 0x25
 800f680:	d1f9      	bne.n	800f676 <_vfiprintf_r+0x96>
 800f682:	ebba 0b04 	subs.w	fp, sl, r4
 800f686:	d00b      	beq.n	800f6a0 <_vfiprintf_r+0xc0>
 800f688:	465b      	mov	r3, fp
 800f68a:	4622      	mov	r2, r4
 800f68c:	4629      	mov	r1, r5
 800f68e:	4630      	mov	r0, r6
 800f690:	f7ff ff93 	bl	800f5ba <__sfputs_r>
 800f694:	3001      	adds	r0, #1
 800f696:	f000 80aa 	beq.w	800f7ee <_vfiprintf_r+0x20e>
 800f69a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f69c:	445a      	add	r2, fp
 800f69e:	9209      	str	r2, [sp, #36]	; 0x24
 800f6a0:	f89a 3000 	ldrb.w	r3, [sl]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	f000 80a2 	beq.w	800f7ee <_vfiprintf_r+0x20e>
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f6b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6b4:	f10a 0a01 	add.w	sl, sl, #1
 800f6b8:	9304      	str	r3, [sp, #16]
 800f6ba:	9307      	str	r3, [sp, #28]
 800f6bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f6c0:	931a      	str	r3, [sp, #104]	; 0x68
 800f6c2:	4654      	mov	r4, sl
 800f6c4:	2205      	movs	r2, #5
 800f6c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6ca:	4858      	ldr	r0, [pc, #352]	; (800f82c <_vfiprintf_r+0x24c>)
 800f6cc:	f7f0 fd98 	bl	8000200 <memchr>
 800f6d0:	9a04      	ldr	r2, [sp, #16]
 800f6d2:	b9d8      	cbnz	r0, 800f70c <_vfiprintf_r+0x12c>
 800f6d4:	06d1      	lsls	r1, r2, #27
 800f6d6:	bf44      	itt	mi
 800f6d8:	2320      	movmi	r3, #32
 800f6da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6de:	0713      	lsls	r3, r2, #28
 800f6e0:	bf44      	itt	mi
 800f6e2:	232b      	movmi	r3, #43	; 0x2b
 800f6e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6e8:	f89a 3000 	ldrb.w	r3, [sl]
 800f6ec:	2b2a      	cmp	r3, #42	; 0x2a
 800f6ee:	d015      	beq.n	800f71c <_vfiprintf_r+0x13c>
 800f6f0:	9a07      	ldr	r2, [sp, #28]
 800f6f2:	4654      	mov	r4, sl
 800f6f4:	2000      	movs	r0, #0
 800f6f6:	f04f 0c0a 	mov.w	ip, #10
 800f6fa:	4621      	mov	r1, r4
 800f6fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f700:	3b30      	subs	r3, #48	; 0x30
 800f702:	2b09      	cmp	r3, #9
 800f704:	d94e      	bls.n	800f7a4 <_vfiprintf_r+0x1c4>
 800f706:	b1b0      	cbz	r0, 800f736 <_vfiprintf_r+0x156>
 800f708:	9207      	str	r2, [sp, #28]
 800f70a:	e014      	b.n	800f736 <_vfiprintf_r+0x156>
 800f70c:	eba0 0308 	sub.w	r3, r0, r8
 800f710:	fa09 f303 	lsl.w	r3, r9, r3
 800f714:	4313      	orrs	r3, r2
 800f716:	9304      	str	r3, [sp, #16]
 800f718:	46a2      	mov	sl, r4
 800f71a:	e7d2      	b.n	800f6c2 <_vfiprintf_r+0xe2>
 800f71c:	9b03      	ldr	r3, [sp, #12]
 800f71e:	1d19      	adds	r1, r3, #4
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	9103      	str	r1, [sp, #12]
 800f724:	2b00      	cmp	r3, #0
 800f726:	bfbb      	ittet	lt
 800f728:	425b      	neglt	r3, r3
 800f72a:	f042 0202 	orrlt.w	r2, r2, #2
 800f72e:	9307      	strge	r3, [sp, #28]
 800f730:	9307      	strlt	r3, [sp, #28]
 800f732:	bfb8      	it	lt
 800f734:	9204      	strlt	r2, [sp, #16]
 800f736:	7823      	ldrb	r3, [r4, #0]
 800f738:	2b2e      	cmp	r3, #46	; 0x2e
 800f73a:	d10c      	bne.n	800f756 <_vfiprintf_r+0x176>
 800f73c:	7863      	ldrb	r3, [r4, #1]
 800f73e:	2b2a      	cmp	r3, #42	; 0x2a
 800f740:	d135      	bne.n	800f7ae <_vfiprintf_r+0x1ce>
 800f742:	9b03      	ldr	r3, [sp, #12]
 800f744:	1d1a      	adds	r2, r3, #4
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	9203      	str	r2, [sp, #12]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	bfb8      	it	lt
 800f74e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f752:	3402      	adds	r4, #2
 800f754:	9305      	str	r3, [sp, #20]
 800f756:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f83c <_vfiprintf_r+0x25c>
 800f75a:	7821      	ldrb	r1, [r4, #0]
 800f75c:	2203      	movs	r2, #3
 800f75e:	4650      	mov	r0, sl
 800f760:	f7f0 fd4e 	bl	8000200 <memchr>
 800f764:	b140      	cbz	r0, 800f778 <_vfiprintf_r+0x198>
 800f766:	2340      	movs	r3, #64	; 0x40
 800f768:	eba0 000a 	sub.w	r0, r0, sl
 800f76c:	fa03 f000 	lsl.w	r0, r3, r0
 800f770:	9b04      	ldr	r3, [sp, #16]
 800f772:	4303      	orrs	r3, r0
 800f774:	3401      	adds	r4, #1
 800f776:	9304      	str	r3, [sp, #16]
 800f778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f77c:	482c      	ldr	r0, [pc, #176]	; (800f830 <_vfiprintf_r+0x250>)
 800f77e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f782:	2206      	movs	r2, #6
 800f784:	f7f0 fd3c 	bl	8000200 <memchr>
 800f788:	2800      	cmp	r0, #0
 800f78a:	d03f      	beq.n	800f80c <_vfiprintf_r+0x22c>
 800f78c:	4b29      	ldr	r3, [pc, #164]	; (800f834 <_vfiprintf_r+0x254>)
 800f78e:	bb1b      	cbnz	r3, 800f7d8 <_vfiprintf_r+0x1f8>
 800f790:	9b03      	ldr	r3, [sp, #12]
 800f792:	3307      	adds	r3, #7
 800f794:	f023 0307 	bic.w	r3, r3, #7
 800f798:	3308      	adds	r3, #8
 800f79a:	9303      	str	r3, [sp, #12]
 800f79c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f79e:	443b      	add	r3, r7
 800f7a0:	9309      	str	r3, [sp, #36]	; 0x24
 800f7a2:	e767      	b.n	800f674 <_vfiprintf_r+0x94>
 800f7a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7a8:	460c      	mov	r4, r1
 800f7aa:	2001      	movs	r0, #1
 800f7ac:	e7a5      	b.n	800f6fa <_vfiprintf_r+0x11a>
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	3401      	adds	r4, #1
 800f7b2:	9305      	str	r3, [sp, #20]
 800f7b4:	4619      	mov	r1, r3
 800f7b6:	f04f 0c0a 	mov.w	ip, #10
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7c0:	3a30      	subs	r2, #48	; 0x30
 800f7c2:	2a09      	cmp	r2, #9
 800f7c4:	d903      	bls.n	800f7ce <_vfiprintf_r+0x1ee>
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d0c5      	beq.n	800f756 <_vfiprintf_r+0x176>
 800f7ca:	9105      	str	r1, [sp, #20]
 800f7cc:	e7c3      	b.n	800f756 <_vfiprintf_r+0x176>
 800f7ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7d2:	4604      	mov	r4, r0
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	e7f0      	b.n	800f7ba <_vfiprintf_r+0x1da>
 800f7d8:	ab03      	add	r3, sp, #12
 800f7da:	9300      	str	r3, [sp, #0]
 800f7dc:	462a      	mov	r2, r5
 800f7de:	4b16      	ldr	r3, [pc, #88]	; (800f838 <_vfiprintf_r+0x258>)
 800f7e0:	a904      	add	r1, sp, #16
 800f7e2:	4630      	mov	r0, r6
 800f7e4:	f7fd fe24 	bl	800d430 <_printf_float>
 800f7e8:	4607      	mov	r7, r0
 800f7ea:	1c78      	adds	r0, r7, #1
 800f7ec:	d1d6      	bne.n	800f79c <_vfiprintf_r+0x1bc>
 800f7ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7f0:	07d9      	lsls	r1, r3, #31
 800f7f2:	d405      	bmi.n	800f800 <_vfiprintf_r+0x220>
 800f7f4:	89ab      	ldrh	r3, [r5, #12]
 800f7f6:	059a      	lsls	r2, r3, #22
 800f7f8:	d402      	bmi.n	800f800 <_vfiprintf_r+0x220>
 800f7fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7fc:	f7ff f9c2 	bl	800eb84 <__retarget_lock_release_recursive>
 800f800:	89ab      	ldrh	r3, [r5, #12]
 800f802:	065b      	lsls	r3, r3, #25
 800f804:	f53f af12 	bmi.w	800f62c <_vfiprintf_r+0x4c>
 800f808:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f80a:	e711      	b.n	800f630 <_vfiprintf_r+0x50>
 800f80c:	ab03      	add	r3, sp, #12
 800f80e:	9300      	str	r3, [sp, #0]
 800f810:	462a      	mov	r2, r5
 800f812:	4b09      	ldr	r3, [pc, #36]	; (800f838 <_vfiprintf_r+0x258>)
 800f814:	a904      	add	r1, sp, #16
 800f816:	4630      	mov	r0, r6
 800f818:	f7fe f8ae 	bl	800d978 <_printf_i>
 800f81c:	e7e4      	b.n	800f7e8 <_vfiprintf_r+0x208>
 800f81e:	bf00      	nop
 800f820:	08010548 	.word	0x08010548
 800f824:	08010568 	.word	0x08010568
 800f828:	08010528 	.word	0x08010528
 800f82c:	080106e4 	.word	0x080106e4
 800f830:	080106ee 	.word	0x080106ee
 800f834:	0800d431 	.word	0x0800d431
 800f838:	0800f5bb 	.word	0x0800f5bb
 800f83c:	080106ea 	.word	0x080106ea

0800f840 <__sread>:
 800f840:	b510      	push	{r4, lr}
 800f842:	460c      	mov	r4, r1
 800f844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f848:	f000 fae6 	bl	800fe18 <_read_r>
 800f84c:	2800      	cmp	r0, #0
 800f84e:	bfab      	itete	ge
 800f850:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f852:	89a3      	ldrhlt	r3, [r4, #12]
 800f854:	181b      	addge	r3, r3, r0
 800f856:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f85a:	bfac      	ite	ge
 800f85c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f85e:	81a3      	strhlt	r3, [r4, #12]
 800f860:	bd10      	pop	{r4, pc}

0800f862 <__swrite>:
 800f862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f866:	461f      	mov	r7, r3
 800f868:	898b      	ldrh	r3, [r1, #12]
 800f86a:	05db      	lsls	r3, r3, #23
 800f86c:	4605      	mov	r5, r0
 800f86e:	460c      	mov	r4, r1
 800f870:	4616      	mov	r6, r2
 800f872:	d505      	bpl.n	800f880 <__swrite+0x1e>
 800f874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f878:	2302      	movs	r3, #2
 800f87a:	2200      	movs	r2, #0
 800f87c:	f000 f9f8 	bl	800fc70 <_lseek_r>
 800f880:	89a3      	ldrh	r3, [r4, #12]
 800f882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f886:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f88a:	81a3      	strh	r3, [r4, #12]
 800f88c:	4632      	mov	r2, r6
 800f88e:	463b      	mov	r3, r7
 800f890:	4628      	mov	r0, r5
 800f892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f896:	f000 b869 	b.w	800f96c <_write_r>

0800f89a <__sseek>:
 800f89a:	b510      	push	{r4, lr}
 800f89c:	460c      	mov	r4, r1
 800f89e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8a2:	f000 f9e5 	bl	800fc70 <_lseek_r>
 800f8a6:	1c43      	adds	r3, r0, #1
 800f8a8:	89a3      	ldrh	r3, [r4, #12]
 800f8aa:	bf15      	itete	ne
 800f8ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800f8ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f8b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f8b6:	81a3      	strheq	r3, [r4, #12]
 800f8b8:	bf18      	it	ne
 800f8ba:	81a3      	strhne	r3, [r4, #12]
 800f8bc:	bd10      	pop	{r4, pc}

0800f8be <__sclose>:
 800f8be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8c2:	f000 b8f1 	b.w	800faa8 <_close_r>
	...

0800f8c8 <__swbuf_r>:
 800f8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ca:	460e      	mov	r6, r1
 800f8cc:	4614      	mov	r4, r2
 800f8ce:	4605      	mov	r5, r0
 800f8d0:	b118      	cbz	r0, 800f8da <__swbuf_r+0x12>
 800f8d2:	6983      	ldr	r3, [r0, #24]
 800f8d4:	b90b      	cbnz	r3, 800f8da <__swbuf_r+0x12>
 800f8d6:	f7ff f8b1 	bl	800ea3c <__sinit>
 800f8da:	4b21      	ldr	r3, [pc, #132]	; (800f960 <__swbuf_r+0x98>)
 800f8dc:	429c      	cmp	r4, r3
 800f8de:	d12b      	bne.n	800f938 <__swbuf_r+0x70>
 800f8e0:	686c      	ldr	r4, [r5, #4]
 800f8e2:	69a3      	ldr	r3, [r4, #24]
 800f8e4:	60a3      	str	r3, [r4, #8]
 800f8e6:	89a3      	ldrh	r3, [r4, #12]
 800f8e8:	071a      	lsls	r2, r3, #28
 800f8ea:	d52f      	bpl.n	800f94c <__swbuf_r+0x84>
 800f8ec:	6923      	ldr	r3, [r4, #16]
 800f8ee:	b36b      	cbz	r3, 800f94c <__swbuf_r+0x84>
 800f8f0:	6923      	ldr	r3, [r4, #16]
 800f8f2:	6820      	ldr	r0, [r4, #0]
 800f8f4:	1ac0      	subs	r0, r0, r3
 800f8f6:	6963      	ldr	r3, [r4, #20]
 800f8f8:	b2f6      	uxtb	r6, r6
 800f8fa:	4283      	cmp	r3, r0
 800f8fc:	4637      	mov	r7, r6
 800f8fe:	dc04      	bgt.n	800f90a <__swbuf_r+0x42>
 800f900:	4621      	mov	r1, r4
 800f902:	4628      	mov	r0, r5
 800f904:	f000 f966 	bl	800fbd4 <_fflush_r>
 800f908:	bb30      	cbnz	r0, 800f958 <__swbuf_r+0x90>
 800f90a:	68a3      	ldr	r3, [r4, #8]
 800f90c:	3b01      	subs	r3, #1
 800f90e:	60a3      	str	r3, [r4, #8]
 800f910:	6823      	ldr	r3, [r4, #0]
 800f912:	1c5a      	adds	r2, r3, #1
 800f914:	6022      	str	r2, [r4, #0]
 800f916:	701e      	strb	r6, [r3, #0]
 800f918:	6963      	ldr	r3, [r4, #20]
 800f91a:	3001      	adds	r0, #1
 800f91c:	4283      	cmp	r3, r0
 800f91e:	d004      	beq.n	800f92a <__swbuf_r+0x62>
 800f920:	89a3      	ldrh	r3, [r4, #12]
 800f922:	07db      	lsls	r3, r3, #31
 800f924:	d506      	bpl.n	800f934 <__swbuf_r+0x6c>
 800f926:	2e0a      	cmp	r6, #10
 800f928:	d104      	bne.n	800f934 <__swbuf_r+0x6c>
 800f92a:	4621      	mov	r1, r4
 800f92c:	4628      	mov	r0, r5
 800f92e:	f000 f951 	bl	800fbd4 <_fflush_r>
 800f932:	b988      	cbnz	r0, 800f958 <__swbuf_r+0x90>
 800f934:	4638      	mov	r0, r7
 800f936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f938:	4b0a      	ldr	r3, [pc, #40]	; (800f964 <__swbuf_r+0x9c>)
 800f93a:	429c      	cmp	r4, r3
 800f93c:	d101      	bne.n	800f942 <__swbuf_r+0x7a>
 800f93e:	68ac      	ldr	r4, [r5, #8]
 800f940:	e7cf      	b.n	800f8e2 <__swbuf_r+0x1a>
 800f942:	4b09      	ldr	r3, [pc, #36]	; (800f968 <__swbuf_r+0xa0>)
 800f944:	429c      	cmp	r4, r3
 800f946:	bf08      	it	eq
 800f948:	68ec      	ldreq	r4, [r5, #12]
 800f94a:	e7ca      	b.n	800f8e2 <__swbuf_r+0x1a>
 800f94c:	4621      	mov	r1, r4
 800f94e:	4628      	mov	r0, r5
 800f950:	f000 f81e 	bl	800f990 <__swsetup_r>
 800f954:	2800      	cmp	r0, #0
 800f956:	d0cb      	beq.n	800f8f0 <__swbuf_r+0x28>
 800f958:	f04f 37ff 	mov.w	r7, #4294967295
 800f95c:	e7ea      	b.n	800f934 <__swbuf_r+0x6c>
 800f95e:	bf00      	nop
 800f960:	08010548 	.word	0x08010548
 800f964:	08010568 	.word	0x08010568
 800f968:	08010528 	.word	0x08010528

0800f96c <_write_r>:
 800f96c:	b538      	push	{r3, r4, r5, lr}
 800f96e:	4d07      	ldr	r5, [pc, #28]	; (800f98c <_write_r+0x20>)
 800f970:	4604      	mov	r4, r0
 800f972:	4608      	mov	r0, r1
 800f974:	4611      	mov	r1, r2
 800f976:	2200      	movs	r2, #0
 800f978:	602a      	str	r2, [r5, #0]
 800f97a:	461a      	mov	r2, r3
 800f97c:	f7f9 fd12 	bl	80093a4 <_write>
 800f980:	1c43      	adds	r3, r0, #1
 800f982:	d102      	bne.n	800f98a <_write_r+0x1e>
 800f984:	682b      	ldr	r3, [r5, #0]
 800f986:	b103      	cbz	r3, 800f98a <_write_r+0x1e>
 800f988:	6023      	str	r3, [r4, #0]
 800f98a:	bd38      	pop	{r3, r4, r5, pc}
 800f98c:	20008200 	.word	0x20008200

0800f990 <__swsetup_r>:
 800f990:	4b32      	ldr	r3, [pc, #200]	; (800fa5c <__swsetup_r+0xcc>)
 800f992:	b570      	push	{r4, r5, r6, lr}
 800f994:	681d      	ldr	r5, [r3, #0]
 800f996:	4606      	mov	r6, r0
 800f998:	460c      	mov	r4, r1
 800f99a:	b125      	cbz	r5, 800f9a6 <__swsetup_r+0x16>
 800f99c:	69ab      	ldr	r3, [r5, #24]
 800f99e:	b913      	cbnz	r3, 800f9a6 <__swsetup_r+0x16>
 800f9a0:	4628      	mov	r0, r5
 800f9a2:	f7ff f84b 	bl	800ea3c <__sinit>
 800f9a6:	4b2e      	ldr	r3, [pc, #184]	; (800fa60 <__swsetup_r+0xd0>)
 800f9a8:	429c      	cmp	r4, r3
 800f9aa:	d10f      	bne.n	800f9cc <__swsetup_r+0x3c>
 800f9ac:	686c      	ldr	r4, [r5, #4]
 800f9ae:	89a3      	ldrh	r3, [r4, #12]
 800f9b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f9b4:	0719      	lsls	r1, r3, #28
 800f9b6:	d42c      	bmi.n	800fa12 <__swsetup_r+0x82>
 800f9b8:	06dd      	lsls	r5, r3, #27
 800f9ba:	d411      	bmi.n	800f9e0 <__swsetup_r+0x50>
 800f9bc:	2309      	movs	r3, #9
 800f9be:	6033      	str	r3, [r6, #0]
 800f9c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f9c4:	81a3      	strh	r3, [r4, #12]
 800f9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f9ca:	e03e      	b.n	800fa4a <__swsetup_r+0xba>
 800f9cc:	4b25      	ldr	r3, [pc, #148]	; (800fa64 <__swsetup_r+0xd4>)
 800f9ce:	429c      	cmp	r4, r3
 800f9d0:	d101      	bne.n	800f9d6 <__swsetup_r+0x46>
 800f9d2:	68ac      	ldr	r4, [r5, #8]
 800f9d4:	e7eb      	b.n	800f9ae <__swsetup_r+0x1e>
 800f9d6:	4b24      	ldr	r3, [pc, #144]	; (800fa68 <__swsetup_r+0xd8>)
 800f9d8:	429c      	cmp	r4, r3
 800f9da:	bf08      	it	eq
 800f9dc:	68ec      	ldreq	r4, [r5, #12]
 800f9de:	e7e6      	b.n	800f9ae <__swsetup_r+0x1e>
 800f9e0:	0758      	lsls	r0, r3, #29
 800f9e2:	d512      	bpl.n	800fa0a <__swsetup_r+0x7a>
 800f9e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9e6:	b141      	cbz	r1, 800f9fa <__swsetup_r+0x6a>
 800f9e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9ec:	4299      	cmp	r1, r3
 800f9ee:	d002      	beq.n	800f9f6 <__swsetup_r+0x66>
 800f9f0:	4630      	mov	r0, r6
 800f9f2:	f7fd fb9d 	bl	800d130 <_free_r>
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	6363      	str	r3, [r4, #52]	; 0x34
 800f9fa:	89a3      	ldrh	r3, [r4, #12]
 800f9fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fa00:	81a3      	strh	r3, [r4, #12]
 800fa02:	2300      	movs	r3, #0
 800fa04:	6063      	str	r3, [r4, #4]
 800fa06:	6923      	ldr	r3, [r4, #16]
 800fa08:	6023      	str	r3, [r4, #0]
 800fa0a:	89a3      	ldrh	r3, [r4, #12]
 800fa0c:	f043 0308 	orr.w	r3, r3, #8
 800fa10:	81a3      	strh	r3, [r4, #12]
 800fa12:	6923      	ldr	r3, [r4, #16]
 800fa14:	b94b      	cbnz	r3, 800fa2a <__swsetup_r+0x9a>
 800fa16:	89a3      	ldrh	r3, [r4, #12]
 800fa18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fa1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa20:	d003      	beq.n	800fa2a <__swsetup_r+0x9a>
 800fa22:	4621      	mov	r1, r4
 800fa24:	4630      	mov	r0, r6
 800fa26:	f000 f95b 	bl	800fce0 <__smakebuf_r>
 800fa2a:	89a0      	ldrh	r0, [r4, #12]
 800fa2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa30:	f010 0301 	ands.w	r3, r0, #1
 800fa34:	d00a      	beq.n	800fa4c <__swsetup_r+0xbc>
 800fa36:	2300      	movs	r3, #0
 800fa38:	60a3      	str	r3, [r4, #8]
 800fa3a:	6963      	ldr	r3, [r4, #20]
 800fa3c:	425b      	negs	r3, r3
 800fa3e:	61a3      	str	r3, [r4, #24]
 800fa40:	6923      	ldr	r3, [r4, #16]
 800fa42:	b943      	cbnz	r3, 800fa56 <__swsetup_r+0xc6>
 800fa44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fa48:	d1ba      	bne.n	800f9c0 <__swsetup_r+0x30>
 800fa4a:	bd70      	pop	{r4, r5, r6, pc}
 800fa4c:	0781      	lsls	r1, r0, #30
 800fa4e:	bf58      	it	pl
 800fa50:	6963      	ldrpl	r3, [r4, #20]
 800fa52:	60a3      	str	r3, [r4, #8]
 800fa54:	e7f4      	b.n	800fa40 <__swsetup_r+0xb0>
 800fa56:	2000      	movs	r0, #0
 800fa58:	e7f7      	b.n	800fa4a <__swsetup_r+0xba>
 800fa5a:	bf00      	nop
 800fa5c:	2000001c 	.word	0x2000001c
 800fa60:	08010548 	.word	0x08010548
 800fa64:	08010568 	.word	0x08010568
 800fa68:	08010528 	.word	0x08010528

0800fa6c <__assert_func>:
 800fa6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa6e:	4614      	mov	r4, r2
 800fa70:	461a      	mov	r2, r3
 800fa72:	4b09      	ldr	r3, [pc, #36]	; (800fa98 <__assert_func+0x2c>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	4605      	mov	r5, r0
 800fa78:	68d8      	ldr	r0, [r3, #12]
 800fa7a:	b14c      	cbz	r4, 800fa90 <__assert_func+0x24>
 800fa7c:	4b07      	ldr	r3, [pc, #28]	; (800fa9c <__assert_func+0x30>)
 800fa7e:	9100      	str	r1, [sp, #0]
 800fa80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fa84:	4906      	ldr	r1, [pc, #24]	; (800faa0 <__assert_func+0x34>)
 800fa86:	462b      	mov	r3, r5
 800fa88:	f000 f8e0 	bl	800fc4c <fiprintf>
 800fa8c:	f000 f9e3 	bl	800fe56 <abort>
 800fa90:	4b04      	ldr	r3, [pc, #16]	; (800faa4 <__assert_func+0x38>)
 800fa92:	461c      	mov	r4, r3
 800fa94:	e7f3      	b.n	800fa7e <__assert_func+0x12>
 800fa96:	bf00      	nop
 800fa98:	2000001c 	.word	0x2000001c
 800fa9c:	080106f5 	.word	0x080106f5
 800faa0:	08010702 	.word	0x08010702
 800faa4:	08010730 	.word	0x08010730

0800faa8 <_close_r>:
 800faa8:	b538      	push	{r3, r4, r5, lr}
 800faaa:	4d06      	ldr	r5, [pc, #24]	; (800fac4 <_close_r+0x1c>)
 800faac:	2300      	movs	r3, #0
 800faae:	4604      	mov	r4, r0
 800fab0:	4608      	mov	r0, r1
 800fab2:	602b      	str	r3, [r5, #0]
 800fab4:	f000 fa44 	bl	800ff40 <_close>
 800fab8:	1c43      	adds	r3, r0, #1
 800faba:	d102      	bne.n	800fac2 <_close_r+0x1a>
 800fabc:	682b      	ldr	r3, [r5, #0]
 800fabe:	b103      	cbz	r3, 800fac2 <_close_r+0x1a>
 800fac0:	6023      	str	r3, [r4, #0]
 800fac2:	bd38      	pop	{r3, r4, r5, pc}
 800fac4:	20008200 	.word	0x20008200

0800fac8 <__sflush_r>:
 800fac8:	898a      	ldrh	r2, [r1, #12]
 800faca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800face:	4605      	mov	r5, r0
 800fad0:	0710      	lsls	r0, r2, #28
 800fad2:	460c      	mov	r4, r1
 800fad4:	d458      	bmi.n	800fb88 <__sflush_r+0xc0>
 800fad6:	684b      	ldr	r3, [r1, #4]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	dc05      	bgt.n	800fae8 <__sflush_r+0x20>
 800fadc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fade:	2b00      	cmp	r3, #0
 800fae0:	dc02      	bgt.n	800fae8 <__sflush_r+0x20>
 800fae2:	2000      	movs	r0, #0
 800fae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800faea:	2e00      	cmp	r6, #0
 800faec:	d0f9      	beq.n	800fae2 <__sflush_r+0x1a>
 800faee:	2300      	movs	r3, #0
 800faf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800faf4:	682f      	ldr	r7, [r5, #0]
 800faf6:	602b      	str	r3, [r5, #0]
 800faf8:	d032      	beq.n	800fb60 <__sflush_r+0x98>
 800fafa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fafc:	89a3      	ldrh	r3, [r4, #12]
 800fafe:	075a      	lsls	r2, r3, #29
 800fb00:	d505      	bpl.n	800fb0e <__sflush_r+0x46>
 800fb02:	6863      	ldr	r3, [r4, #4]
 800fb04:	1ac0      	subs	r0, r0, r3
 800fb06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fb08:	b10b      	cbz	r3, 800fb0e <__sflush_r+0x46>
 800fb0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fb0c:	1ac0      	subs	r0, r0, r3
 800fb0e:	2300      	movs	r3, #0
 800fb10:	4602      	mov	r2, r0
 800fb12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb14:	6a21      	ldr	r1, [r4, #32]
 800fb16:	4628      	mov	r0, r5
 800fb18:	47b0      	blx	r6
 800fb1a:	1c43      	adds	r3, r0, #1
 800fb1c:	89a3      	ldrh	r3, [r4, #12]
 800fb1e:	d106      	bne.n	800fb2e <__sflush_r+0x66>
 800fb20:	6829      	ldr	r1, [r5, #0]
 800fb22:	291d      	cmp	r1, #29
 800fb24:	d82c      	bhi.n	800fb80 <__sflush_r+0xb8>
 800fb26:	4a2a      	ldr	r2, [pc, #168]	; (800fbd0 <__sflush_r+0x108>)
 800fb28:	40ca      	lsrs	r2, r1
 800fb2a:	07d6      	lsls	r6, r2, #31
 800fb2c:	d528      	bpl.n	800fb80 <__sflush_r+0xb8>
 800fb2e:	2200      	movs	r2, #0
 800fb30:	6062      	str	r2, [r4, #4]
 800fb32:	04d9      	lsls	r1, r3, #19
 800fb34:	6922      	ldr	r2, [r4, #16]
 800fb36:	6022      	str	r2, [r4, #0]
 800fb38:	d504      	bpl.n	800fb44 <__sflush_r+0x7c>
 800fb3a:	1c42      	adds	r2, r0, #1
 800fb3c:	d101      	bne.n	800fb42 <__sflush_r+0x7a>
 800fb3e:	682b      	ldr	r3, [r5, #0]
 800fb40:	b903      	cbnz	r3, 800fb44 <__sflush_r+0x7c>
 800fb42:	6560      	str	r0, [r4, #84]	; 0x54
 800fb44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb46:	602f      	str	r7, [r5, #0]
 800fb48:	2900      	cmp	r1, #0
 800fb4a:	d0ca      	beq.n	800fae2 <__sflush_r+0x1a>
 800fb4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb50:	4299      	cmp	r1, r3
 800fb52:	d002      	beq.n	800fb5a <__sflush_r+0x92>
 800fb54:	4628      	mov	r0, r5
 800fb56:	f7fd faeb 	bl	800d130 <_free_r>
 800fb5a:	2000      	movs	r0, #0
 800fb5c:	6360      	str	r0, [r4, #52]	; 0x34
 800fb5e:	e7c1      	b.n	800fae4 <__sflush_r+0x1c>
 800fb60:	6a21      	ldr	r1, [r4, #32]
 800fb62:	2301      	movs	r3, #1
 800fb64:	4628      	mov	r0, r5
 800fb66:	47b0      	blx	r6
 800fb68:	1c41      	adds	r1, r0, #1
 800fb6a:	d1c7      	bne.n	800fafc <__sflush_r+0x34>
 800fb6c:	682b      	ldr	r3, [r5, #0]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d0c4      	beq.n	800fafc <__sflush_r+0x34>
 800fb72:	2b1d      	cmp	r3, #29
 800fb74:	d001      	beq.n	800fb7a <__sflush_r+0xb2>
 800fb76:	2b16      	cmp	r3, #22
 800fb78:	d101      	bne.n	800fb7e <__sflush_r+0xb6>
 800fb7a:	602f      	str	r7, [r5, #0]
 800fb7c:	e7b1      	b.n	800fae2 <__sflush_r+0x1a>
 800fb7e:	89a3      	ldrh	r3, [r4, #12]
 800fb80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb84:	81a3      	strh	r3, [r4, #12]
 800fb86:	e7ad      	b.n	800fae4 <__sflush_r+0x1c>
 800fb88:	690f      	ldr	r7, [r1, #16]
 800fb8a:	2f00      	cmp	r7, #0
 800fb8c:	d0a9      	beq.n	800fae2 <__sflush_r+0x1a>
 800fb8e:	0793      	lsls	r3, r2, #30
 800fb90:	680e      	ldr	r6, [r1, #0]
 800fb92:	bf08      	it	eq
 800fb94:	694b      	ldreq	r3, [r1, #20]
 800fb96:	600f      	str	r7, [r1, #0]
 800fb98:	bf18      	it	ne
 800fb9a:	2300      	movne	r3, #0
 800fb9c:	eba6 0807 	sub.w	r8, r6, r7
 800fba0:	608b      	str	r3, [r1, #8]
 800fba2:	f1b8 0f00 	cmp.w	r8, #0
 800fba6:	dd9c      	ble.n	800fae2 <__sflush_r+0x1a>
 800fba8:	6a21      	ldr	r1, [r4, #32]
 800fbaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fbac:	4643      	mov	r3, r8
 800fbae:	463a      	mov	r2, r7
 800fbb0:	4628      	mov	r0, r5
 800fbb2:	47b0      	blx	r6
 800fbb4:	2800      	cmp	r0, #0
 800fbb6:	dc06      	bgt.n	800fbc6 <__sflush_r+0xfe>
 800fbb8:	89a3      	ldrh	r3, [r4, #12]
 800fbba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbbe:	81a3      	strh	r3, [r4, #12]
 800fbc0:	f04f 30ff 	mov.w	r0, #4294967295
 800fbc4:	e78e      	b.n	800fae4 <__sflush_r+0x1c>
 800fbc6:	4407      	add	r7, r0
 800fbc8:	eba8 0800 	sub.w	r8, r8, r0
 800fbcc:	e7e9      	b.n	800fba2 <__sflush_r+0xda>
 800fbce:	bf00      	nop
 800fbd0:	20400001 	.word	0x20400001

0800fbd4 <_fflush_r>:
 800fbd4:	b538      	push	{r3, r4, r5, lr}
 800fbd6:	690b      	ldr	r3, [r1, #16]
 800fbd8:	4605      	mov	r5, r0
 800fbda:	460c      	mov	r4, r1
 800fbdc:	b913      	cbnz	r3, 800fbe4 <_fflush_r+0x10>
 800fbde:	2500      	movs	r5, #0
 800fbe0:	4628      	mov	r0, r5
 800fbe2:	bd38      	pop	{r3, r4, r5, pc}
 800fbe4:	b118      	cbz	r0, 800fbee <_fflush_r+0x1a>
 800fbe6:	6983      	ldr	r3, [r0, #24]
 800fbe8:	b90b      	cbnz	r3, 800fbee <_fflush_r+0x1a>
 800fbea:	f7fe ff27 	bl	800ea3c <__sinit>
 800fbee:	4b14      	ldr	r3, [pc, #80]	; (800fc40 <_fflush_r+0x6c>)
 800fbf0:	429c      	cmp	r4, r3
 800fbf2:	d11b      	bne.n	800fc2c <_fflush_r+0x58>
 800fbf4:	686c      	ldr	r4, [r5, #4]
 800fbf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d0ef      	beq.n	800fbde <_fflush_r+0xa>
 800fbfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fc00:	07d0      	lsls	r0, r2, #31
 800fc02:	d404      	bmi.n	800fc0e <_fflush_r+0x3a>
 800fc04:	0599      	lsls	r1, r3, #22
 800fc06:	d402      	bmi.n	800fc0e <_fflush_r+0x3a>
 800fc08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc0a:	f7fe ffba 	bl	800eb82 <__retarget_lock_acquire_recursive>
 800fc0e:	4628      	mov	r0, r5
 800fc10:	4621      	mov	r1, r4
 800fc12:	f7ff ff59 	bl	800fac8 <__sflush_r>
 800fc16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc18:	07da      	lsls	r2, r3, #31
 800fc1a:	4605      	mov	r5, r0
 800fc1c:	d4e0      	bmi.n	800fbe0 <_fflush_r+0xc>
 800fc1e:	89a3      	ldrh	r3, [r4, #12]
 800fc20:	059b      	lsls	r3, r3, #22
 800fc22:	d4dd      	bmi.n	800fbe0 <_fflush_r+0xc>
 800fc24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc26:	f7fe ffad 	bl	800eb84 <__retarget_lock_release_recursive>
 800fc2a:	e7d9      	b.n	800fbe0 <_fflush_r+0xc>
 800fc2c:	4b05      	ldr	r3, [pc, #20]	; (800fc44 <_fflush_r+0x70>)
 800fc2e:	429c      	cmp	r4, r3
 800fc30:	d101      	bne.n	800fc36 <_fflush_r+0x62>
 800fc32:	68ac      	ldr	r4, [r5, #8]
 800fc34:	e7df      	b.n	800fbf6 <_fflush_r+0x22>
 800fc36:	4b04      	ldr	r3, [pc, #16]	; (800fc48 <_fflush_r+0x74>)
 800fc38:	429c      	cmp	r4, r3
 800fc3a:	bf08      	it	eq
 800fc3c:	68ec      	ldreq	r4, [r5, #12]
 800fc3e:	e7da      	b.n	800fbf6 <_fflush_r+0x22>
 800fc40:	08010548 	.word	0x08010548
 800fc44:	08010568 	.word	0x08010568
 800fc48:	08010528 	.word	0x08010528

0800fc4c <fiprintf>:
 800fc4c:	b40e      	push	{r1, r2, r3}
 800fc4e:	b503      	push	{r0, r1, lr}
 800fc50:	4601      	mov	r1, r0
 800fc52:	ab03      	add	r3, sp, #12
 800fc54:	4805      	ldr	r0, [pc, #20]	; (800fc6c <fiprintf+0x20>)
 800fc56:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc5a:	6800      	ldr	r0, [r0, #0]
 800fc5c:	9301      	str	r3, [sp, #4]
 800fc5e:	f7ff fcbf 	bl	800f5e0 <_vfiprintf_r>
 800fc62:	b002      	add	sp, #8
 800fc64:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc68:	b003      	add	sp, #12
 800fc6a:	4770      	bx	lr
 800fc6c:	2000001c 	.word	0x2000001c

0800fc70 <_lseek_r>:
 800fc70:	b538      	push	{r3, r4, r5, lr}
 800fc72:	4d07      	ldr	r5, [pc, #28]	; (800fc90 <_lseek_r+0x20>)
 800fc74:	4604      	mov	r4, r0
 800fc76:	4608      	mov	r0, r1
 800fc78:	4611      	mov	r1, r2
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	602a      	str	r2, [r5, #0]
 800fc7e:	461a      	mov	r2, r3
 800fc80:	f000 f986 	bl	800ff90 <_lseek>
 800fc84:	1c43      	adds	r3, r0, #1
 800fc86:	d102      	bne.n	800fc8e <_lseek_r+0x1e>
 800fc88:	682b      	ldr	r3, [r5, #0]
 800fc8a:	b103      	cbz	r3, 800fc8e <_lseek_r+0x1e>
 800fc8c:	6023      	str	r3, [r4, #0]
 800fc8e:	bd38      	pop	{r3, r4, r5, pc}
 800fc90:	20008200 	.word	0x20008200

0800fc94 <__swhatbuf_r>:
 800fc94:	b570      	push	{r4, r5, r6, lr}
 800fc96:	460e      	mov	r6, r1
 800fc98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc9c:	2900      	cmp	r1, #0
 800fc9e:	b096      	sub	sp, #88	; 0x58
 800fca0:	4614      	mov	r4, r2
 800fca2:	461d      	mov	r5, r3
 800fca4:	da08      	bge.n	800fcb8 <__swhatbuf_r+0x24>
 800fca6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	602a      	str	r2, [r5, #0]
 800fcae:	061a      	lsls	r2, r3, #24
 800fcb0:	d410      	bmi.n	800fcd4 <__swhatbuf_r+0x40>
 800fcb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fcb6:	e00e      	b.n	800fcd6 <__swhatbuf_r+0x42>
 800fcb8:	466a      	mov	r2, sp
 800fcba:	f000 f8d3 	bl	800fe64 <_fstat_r>
 800fcbe:	2800      	cmp	r0, #0
 800fcc0:	dbf1      	blt.n	800fca6 <__swhatbuf_r+0x12>
 800fcc2:	9a01      	ldr	r2, [sp, #4]
 800fcc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fcc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fccc:	425a      	negs	r2, r3
 800fcce:	415a      	adcs	r2, r3
 800fcd0:	602a      	str	r2, [r5, #0]
 800fcd2:	e7ee      	b.n	800fcb2 <__swhatbuf_r+0x1e>
 800fcd4:	2340      	movs	r3, #64	; 0x40
 800fcd6:	2000      	movs	r0, #0
 800fcd8:	6023      	str	r3, [r4, #0]
 800fcda:	b016      	add	sp, #88	; 0x58
 800fcdc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fce0 <__smakebuf_r>:
 800fce0:	898b      	ldrh	r3, [r1, #12]
 800fce2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fce4:	079d      	lsls	r5, r3, #30
 800fce6:	4606      	mov	r6, r0
 800fce8:	460c      	mov	r4, r1
 800fcea:	d507      	bpl.n	800fcfc <__smakebuf_r+0x1c>
 800fcec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fcf0:	6023      	str	r3, [r4, #0]
 800fcf2:	6123      	str	r3, [r4, #16]
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	6163      	str	r3, [r4, #20]
 800fcf8:	b002      	add	sp, #8
 800fcfa:	bd70      	pop	{r4, r5, r6, pc}
 800fcfc:	ab01      	add	r3, sp, #4
 800fcfe:	466a      	mov	r2, sp
 800fd00:	f7ff ffc8 	bl	800fc94 <__swhatbuf_r>
 800fd04:	9900      	ldr	r1, [sp, #0]
 800fd06:	4605      	mov	r5, r0
 800fd08:	4630      	mov	r0, r6
 800fd0a:	f7fd fa7d 	bl	800d208 <_malloc_r>
 800fd0e:	b948      	cbnz	r0, 800fd24 <__smakebuf_r+0x44>
 800fd10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd14:	059a      	lsls	r2, r3, #22
 800fd16:	d4ef      	bmi.n	800fcf8 <__smakebuf_r+0x18>
 800fd18:	f023 0303 	bic.w	r3, r3, #3
 800fd1c:	f043 0302 	orr.w	r3, r3, #2
 800fd20:	81a3      	strh	r3, [r4, #12]
 800fd22:	e7e3      	b.n	800fcec <__smakebuf_r+0xc>
 800fd24:	4b0d      	ldr	r3, [pc, #52]	; (800fd5c <__smakebuf_r+0x7c>)
 800fd26:	62b3      	str	r3, [r6, #40]	; 0x28
 800fd28:	89a3      	ldrh	r3, [r4, #12]
 800fd2a:	6020      	str	r0, [r4, #0]
 800fd2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd30:	81a3      	strh	r3, [r4, #12]
 800fd32:	9b00      	ldr	r3, [sp, #0]
 800fd34:	6163      	str	r3, [r4, #20]
 800fd36:	9b01      	ldr	r3, [sp, #4]
 800fd38:	6120      	str	r0, [r4, #16]
 800fd3a:	b15b      	cbz	r3, 800fd54 <__smakebuf_r+0x74>
 800fd3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd40:	4630      	mov	r0, r6
 800fd42:	f000 f8a1 	bl	800fe88 <_isatty_r>
 800fd46:	b128      	cbz	r0, 800fd54 <__smakebuf_r+0x74>
 800fd48:	89a3      	ldrh	r3, [r4, #12]
 800fd4a:	f023 0303 	bic.w	r3, r3, #3
 800fd4e:	f043 0301 	orr.w	r3, r3, #1
 800fd52:	81a3      	strh	r3, [r4, #12]
 800fd54:	89a0      	ldrh	r0, [r4, #12]
 800fd56:	4305      	orrs	r5, r0
 800fd58:	81a5      	strh	r5, [r4, #12]
 800fd5a:	e7cd      	b.n	800fcf8 <__smakebuf_r+0x18>
 800fd5c:	0800e9d5 	.word	0x0800e9d5

0800fd60 <__ascii_mbtowc>:
 800fd60:	b082      	sub	sp, #8
 800fd62:	b901      	cbnz	r1, 800fd66 <__ascii_mbtowc+0x6>
 800fd64:	a901      	add	r1, sp, #4
 800fd66:	b142      	cbz	r2, 800fd7a <__ascii_mbtowc+0x1a>
 800fd68:	b14b      	cbz	r3, 800fd7e <__ascii_mbtowc+0x1e>
 800fd6a:	7813      	ldrb	r3, [r2, #0]
 800fd6c:	600b      	str	r3, [r1, #0]
 800fd6e:	7812      	ldrb	r2, [r2, #0]
 800fd70:	1e10      	subs	r0, r2, #0
 800fd72:	bf18      	it	ne
 800fd74:	2001      	movne	r0, #1
 800fd76:	b002      	add	sp, #8
 800fd78:	4770      	bx	lr
 800fd7a:	4610      	mov	r0, r2
 800fd7c:	e7fb      	b.n	800fd76 <__ascii_mbtowc+0x16>
 800fd7e:	f06f 0001 	mvn.w	r0, #1
 800fd82:	e7f8      	b.n	800fd76 <__ascii_mbtowc+0x16>

0800fd84 <memmove>:
 800fd84:	4288      	cmp	r0, r1
 800fd86:	b510      	push	{r4, lr}
 800fd88:	eb01 0402 	add.w	r4, r1, r2
 800fd8c:	d902      	bls.n	800fd94 <memmove+0x10>
 800fd8e:	4284      	cmp	r4, r0
 800fd90:	4623      	mov	r3, r4
 800fd92:	d807      	bhi.n	800fda4 <memmove+0x20>
 800fd94:	1e43      	subs	r3, r0, #1
 800fd96:	42a1      	cmp	r1, r4
 800fd98:	d008      	beq.n	800fdac <memmove+0x28>
 800fd9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fda2:	e7f8      	b.n	800fd96 <memmove+0x12>
 800fda4:	4402      	add	r2, r0
 800fda6:	4601      	mov	r1, r0
 800fda8:	428a      	cmp	r2, r1
 800fdaa:	d100      	bne.n	800fdae <memmove+0x2a>
 800fdac:	bd10      	pop	{r4, pc}
 800fdae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fdb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fdb6:	e7f7      	b.n	800fda8 <memmove+0x24>

0800fdb8 <_realloc_r>:
 800fdb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdbc:	4680      	mov	r8, r0
 800fdbe:	4614      	mov	r4, r2
 800fdc0:	460e      	mov	r6, r1
 800fdc2:	b921      	cbnz	r1, 800fdce <_realloc_r+0x16>
 800fdc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdc8:	4611      	mov	r1, r2
 800fdca:	f7fd ba1d 	b.w	800d208 <_malloc_r>
 800fdce:	b92a      	cbnz	r2, 800fddc <_realloc_r+0x24>
 800fdd0:	f7fd f9ae 	bl	800d130 <_free_r>
 800fdd4:	4625      	mov	r5, r4
 800fdd6:	4628      	mov	r0, r5
 800fdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fddc:	f000 f864 	bl	800fea8 <_malloc_usable_size_r>
 800fde0:	4284      	cmp	r4, r0
 800fde2:	4607      	mov	r7, r0
 800fde4:	d802      	bhi.n	800fdec <_realloc_r+0x34>
 800fde6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fdea:	d812      	bhi.n	800fe12 <_realloc_r+0x5a>
 800fdec:	4621      	mov	r1, r4
 800fdee:	4640      	mov	r0, r8
 800fdf0:	f7fd fa0a 	bl	800d208 <_malloc_r>
 800fdf4:	4605      	mov	r5, r0
 800fdf6:	2800      	cmp	r0, #0
 800fdf8:	d0ed      	beq.n	800fdd6 <_realloc_r+0x1e>
 800fdfa:	42bc      	cmp	r4, r7
 800fdfc:	4622      	mov	r2, r4
 800fdfe:	4631      	mov	r1, r6
 800fe00:	bf28      	it	cs
 800fe02:	463a      	movcs	r2, r7
 800fe04:	f7fd f97e 	bl	800d104 <memcpy>
 800fe08:	4631      	mov	r1, r6
 800fe0a:	4640      	mov	r0, r8
 800fe0c:	f7fd f990 	bl	800d130 <_free_r>
 800fe10:	e7e1      	b.n	800fdd6 <_realloc_r+0x1e>
 800fe12:	4635      	mov	r5, r6
 800fe14:	e7df      	b.n	800fdd6 <_realloc_r+0x1e>
	...

0800fe18 <_read_r>:
 800fe18:	b538      	push	{r3, r4, r5, lr}
 800fe1a:	4d07      	ldr	r5, [pc, #28]	; (800fe38 <_read_r+0x20>)
 800fe1c:	4604      	mov	r4, r0
 800fe1e:	4608      	mov	r0, r1
 800fe20:	4611      	mov	r1, r2
 800fe22:	2200      	movs	r2, #0
 800fe24:	602a      	str	r2, [r5, #0]
 800fe26:	461a      	mov	r2, r3
 800fe28:	f000 f8ba 	bl	800ffa0 <_read>
 800fe2c:	1c43      	adds	r3, r0, #1
 800fe2e:	d102      	bne.n	800fe36 <_read_r+0x1e>
 800fe30:	682b      	ldr	r3, [r5, #0]
 800fe32:	b103      	cbz	r3, 800fe36 <_read_r+0x1e>
 800fe34:	6023      	str	r3, [r4, #0]
 800fe36:	bd38      	pop	{r3, r4, r5, pc}
 800fe38:	20008200 	.word	0x20008200

0800fe3c <__ascii_wctomb>:
 800fe3c:	b149      	cbz	r1, 800fe52 <__ascii_wctomb+0x16>
 800fe3e:	2aff      	cmp	r2, #255	; 0xff
 800fe40:	bf85      	ittet	hi
 800fe42:	238a      	movhi	r3, #138	; 0x8a
 800fe44:	6003      	strhi	r3, [r0, #0]
 800fe46:	700a      	strbls	r2, [r1, #0]
 800fe48:	f04f 30ff 	movhi.w	r0, #4294967295
 800fe4c:	bf98      	it	ls
 800fe4e:	2001      	movls	r0, #1
 800fe50:	4770      	bx	lr
 800fe52:	4608      	mov	r0, r1
 800fe54:	4770      	bx	lr

0800fe56 <abort>:
 800fe56:	b508      	push	{r3, lr}
 800fe58:	2006      	movs	r0, #6
 800fe5a:	f000 f855 	bl	800ff08 <raise>
 800fe5e:	2001      	movs	r0, #1
 800fe60:	f000 f8b4 	bl	800ffcc <_exit>

0800fe64 <_fstat_r>:
 800fe64:	b538      	push	{r3, r4, r5, lr}
 800fe66:	4d07      	ldr	r5, [pc, #28]	; (800fe84 <_fstat_r+0x20>)
 800fe68:	2300      	movs	r3, #0
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	4608      	mov	r0, r1
 800fe6e:	4611      	mov	r1, r2
 800fe70:	602b      	str	r3, [r5, #0]
 800fe72:	f000 f86d 	bl	800ff50 <_fstat>
 800fe76:	1c43      	adds	r3, r0, #1
 800fe78:	d102      	bne.n	800fe80 <_fstat_r+0x1c>
 800fe7a:	682b      	ldr	r3, [r5, #0]
 800fe7c:	b103      	cbz	r3, 800fe80 <_fstat_r+0x1c>
 800fe7e:	6023      	str	r3, [r4, #0]
 800fe80:	bd38      	pop	{r3, r4, r5, pc}
 800fe82:	bf00      	nop
 800fe84:	20008200 	.word	0x20008200

0800fe88 <_isatty_r>:
 800fe88:	b538      	push	{r3, r4, r5, lr}
 800fe8a:	4d06      	ldr	r5, [pc, #24]	; (800fea4 <_isatty_r+0x1c>)
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	4604      	mov	r4, r0
 800fe90:	4608      	mov	r0, r1
 800fe92:	602b      	str	r3, [r5, #0]
 800fe94:	f000 f86c 	bl	800ff70 <_isatty>
 800fe98:	1c43      	adds	r3, r0, #1
 800fe9a:	d102      	bne.n	800fea2 <_isatty_r+0x1a>
 800fe9c:	682b      	ldr	r3, [r5, #0]
 800fe9e:	b103      	cbz	r3, 800fea2 <_isatty_r+0x1a>
 800fea0:	6023      	str	r3, [r4, #0]
 800fea2:	bd38      	pop	{r3, r4, r5, pc}
 800fea4:	20008200 	.word	0x20008200

0800fea8 <_malloc_usable_size_r>:
 800fea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800feac:	1f18      	subs	r0, r3, #4
 800feae:	2b00      	cmp	r3, #0
 800feb0:	bfbc      	itt	lt
 800feb2:	580b      	ldrlt	r3, [r1, r0]
 800feb4:	18c0      	addlt	r0, r0, r3
 800feb6:	4770      	bx	lr

0800feb8 <_raise_r>:
 800feb8:	291f      	cmp	r1, #31
 800feba:	b538      	push	{r3, r4, r5, lr}
 800febc:	4604      	mov	r4, r0
 800febe:	460d      	mov	r5, r1
 800fec0:	d904      	bls.n	800fecc <_raise_r+0x14>
 800fec2:	2316      	movs	r3, #22
 800fec4:	6003      	str	r3, [r0, #0]
 800fec6:	f04f 30ff 	mov.w	r0, #4294967295
 800feca:	bd38      	pop	{r3, r4, r5, pc}
 800fecc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fece:	b112      	cbz	r2, 800fed6 <_raise_r+0x1e>
 800fed0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fed4:	b94b      	cbnz	r3, 800feea <_raise_r+0x32>
 800fed6:	4620      	mov	r0, r4
 800fed8:	f000 f830 	bl	800ff3c <_getpid_r>
 800fedc:	462a      	mov	r2, r5
 800fede:	4601      	mov	r1, r0
 800fee0:	4620      	mov	r0, r4
 800fee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fee6:	f000 b817 	b.w	800ff18 <_kill_r>
 800feea:	2b01      	cmp	r3, #1
 800feec:	d00a      	beq.n	800ff04 <_raise_r+0x4c>
 800feee:	1c59      	adds	r1, r3, #1
 800fef0:	d103      	bne.n	800fefa <_raise_r+0x42>
 800fef2:	2316      	movs	r3, #22
 800fef4:	6003      	str	r3, [r0, #0]
 800fef6:	2001      	movs	r0, #1
 800fef8:	e7e7      	b.n	800feca <_raise_r+0x12>
 800fefa:	2400      	movs	r4, #0
 800fefc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ff00:	4628      	mov	r0, r5
 800ff02:	4798      	blx	r3
 800ff04:	2000      	movs	r0, #0
 800ff06:	e7e0      	b.n	800feca <_raise_r+0x12>

0800ff08 <raise>:
 800ff08:	4b02      	ldr	r3, [pc, #8]	; (800ff14 <raise+0xc>)
 800ff0a:	4601      	mov	r1, r0
 800ff0c:	6818      	ldr	r0, [r3, #0]
 800ff0e:	f7ff bfd3 	b.w	800feb8 <_raise_r>
 800ff12:	bf00      	nop
 800ff14:	2000001c 	.word	0x2000001c

0800ff18 <_kill_r>:
 800ff18:	b538      	push	{r3, r4, r5, lr}
 800ff1a:	4d07      	ldr	r5, [pc, #28]	; (800ff38 <_kill_r+0x20>)
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	4604      	mov	r4, r0
 800ff20:	4608      	mov	r0, r1
 800ff22:	4611      	mov	r1, r2
 800ff24:	602b      	str	r3, [r5, #0]
 800ff26:	f000 f82b 	bl	800ff80 <_kill>
 800ff2a:	1c43      	adds	r3, r0, #1
 800ff2c:	d102      	bne.n	800ff34 <_kill_r+0x1c>
 800ff2e:	682b      	ldr	r3, [r5, #0]
 800ff30:	b103      	cbz	r3, 800ff34 <_kill_r+0x1c>
 800ff32:	6023      	str	r3, [r4, #0]
 800ff34:	bd38      	pop	{r3, r4, r5, pc}
 800ff36:	bf00      	nop
 800ff38:	20008200 	.word	0x20008200

0800ff3c <_getpid_r>:
 800ff3c:	f000 b810 	b.w	800ff60 <_getpid>

0800ff40 <_close>:
 800ff40:	4b02      	ldr	r3, [pc, #8]	; (800ff4c <_close+0xc>)
 800ff42:	2258      	movs	r2, #88	; 0x58
 800ff44:	601a      	str	r2, [r3, #0]
 800ff46:	f04f 30ff 	mov.w	r0, #4294967295
 800ff4a:	4770      	bx	lr
 800ff4c:	20008200 	.word	0x20008200

0800ff50 <_fstat>:
 800ff50:	4b02      	ldr	r3, [pc, #8]	; (800ff5c <_fstat+0xc>)
 800ff52:	2258      	movs	r2, #88	; 0x58
 800ff54:	601a      	str	r2, [r3, #0]
 800ff56:	f04f 30ff 	mov.w	r0, #4294967295
 800ff5a:	4770      	bx	lr
 800ff5c:	20008200 	.word	0x20008200

0800ff60 <_getpid>:
 800ff60:	4b02      	ldr	r3, [pc, #8]	; (800ff6c <_getpid+0xc>)
 800ff62:	2258      	movs	r2, #88	; 0x58
 800ff64:	601a      	str	r2, [r3, #0]
 800ff66:	f04f 30ff 	mov.w	r0, #4294967295
 800ff6a:	4770      	bx	lr
 800ff6c:	20008200 	.word	0x20008200

0800ff70 <_isatty>:
 800ff70:	4b02      	ldr	r3, [pc, #8]	; (800ff7c <_isatty+0xc>)
 800ff72:	2258      	movs	r2, #88	; 0x58
 800ff74:	601a      	str	r2, [r3, #0]
 800ff76:	2000      	movs	r0, #0
 800ff78:	4770      	bx	lr
 800ff7a:	bf00      	nop
 800ff7c:	20008200 	.word	0x20008200

0800ff80 <_kill>:
 800ff80:	4b02      	ldr	r3, [pc, #8]	; (800ff8c <_kill+0xc>)
 800ff82:	2258      	movs	r2, #88	; 0x58
 800ff84:	601a      	str	r2, [r3, #0]
 800ff86:	f04f 30ff 	mov.w	r0, #4294967295
 800ff8a:	4770      	bx	lr
 800ff8c:	20008200 	.word	0x20008200

0800ff90 <_lseek>:
 800ff90:	4b02      	ldr	r3, [pc, #8]	; (800ff9c <_lseek+0xc>)
 800ff92:	2258      	movs	r2, #88	; 0x58
 800ff94:	601a      	str	r2, [r3, #0]
 800ff96:	f04f 30ff 	mov.w	r0, #4294967295
 800ff9a:	4770      	bx	lr
 800ff9c:	20008200 	.word	0x20008200

0800ffa0 <_read>:
 800ffa0:	4b02      	ldr	r3, [pc, #8]	; (800ffac <_read+0xc>)
 800ffa2:	2258      	movs	r2, #88	; 0x58
 800ffa4:	601a      	str	r2, [r3, #0]
 800ffa6:	f04f 30ff 	mov.w	r0, #4294967295
 800ffaa:	4770      	bx	lr
 800ffac:	20008200 	.word	0x20008200

0800ffb0 <_sbrk>:
 800ffb0:	4a04      	ldr	r2, [pc, #16]	; (800ffc4 <_sbrk+0x14>)
 800ffb2:	6811      	ldr	r1, [r2, #0]
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	b909      	cbnz	r1, 800ffbc <_sbrk+0xc>
 800ffb8:	4903      	ldr	r1, [pc, #12]	; (800ffc8 <_sbrk+0x18>)
 800ffba:	6011      	str	r1, [r2, #0]
 800ffbc:	6810      	ldr	r0, [r2, #0]
 800ffbe:	4403      	add	r3, r0
 800ffc0:	6013      	str	r3, [r2, #0]
 800ffc2:	4770      	bx	lr
 800ffc4:	20008204 	.word	0x20008204
 800ffc8:	20008208 	.word	0x20008208

0800ffcc <_exit>:
 800ffcc:	e7fe      	b.n	800ffcc <_exit>
	...

0800ffd0 <_init>:
 800ffd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffd2:	bf00      	nop
 800ffd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffd6:	bc08      	pop	{r3}
 800ffd8:	469e      	mov	lr, r3
 800ffda:	4770      	bx	lr

0800ffdc <_fini>:
 800ffdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffde:	bf00      	nop
 800ffe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffe2:	bc08      	pop	{r3}
 800ffe4:	469e      	mov	lr, r3
 800ffe6:	4770      	bx	lr
